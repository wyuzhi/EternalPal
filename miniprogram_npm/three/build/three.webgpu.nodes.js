/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color,Vector2,Vector3,Vector4,Matrix2,Matrix3,Matrix4,EventDispatcher,MathUtils,WebGLCoordinateSystem,WebGPUCoordinateSystem,ColorManagement,SRGBTransfer,NoToneMapping,StaticDrawUsage,InterleavedBuffer,InterleavedBufferAttribute,DynamicDrawUsage,NoColorSpace,Texture,UnsignedIntType,IntType,NearestFilter,Sphere,BackSide,DoubleSide,Euler,CubeTexture,CubeReflectionMapping,CubeRefractionMapping,TangentSpaceNormalMap,ObjectSpaceNormalMap,InstancedInterleavedBuffer,InstancedBufferAttribute,DataArrayTexture,FloatType,FramebufferTexture,LinearMipmapLinearFilter,DepthTexture,Material,NormalBlending,LineBasicMaterial,LineDashedMaterial,NoBlending,MeshNormalMaterial,SRGBColorSpace,WebGLCubeRenderTarget,BoxGeometry,Mesh,Scene,LinearFilter,CubeCamera,EquirectangularReflectionMapping,EquirectangularRefractionMapping,AddOperation,MixOperation,MultiplyOperation,MeshBasicMaterial,MeshLambertMaterial,MeshPhongMaterial,OrthographicCamera,PerspectiveCamera,RenderTarget,LinearSRGBColorSpace,RGBAFormat,HalfFloatType,CubeUVReflectionMapping,BufferGeometry,BufferAttribute,MeshStandardMaterial,MeshPhysicalMaterial,MeshToonMaterial,MeshMatcapMaterial,SpriteMaterial,PointsMaterial,ShadowMaterial,Uint32BufferAttribute,Uint16BufferAttribute,arrayNeedsUint32,Camera,DepthStencilFormat,DepthFormat,UnsignedInt248Type,UnsignedByteType,Plane,Object3D,LinearMipMapLinearFilter,Float32BufferAttribute,UVMapping,VSMShadowMap,LessCompare,RGFormat,BasicShadowMap,SphereGeometry,LinearMipmapNearestFilter,NearestMipmapLinearFilter,Float16BufferAttribute,REVISION,ArrayCamera,PlaneGeometry,FrontSide,CustomBlending,AddEquation,ZeroFactor,CylinderGeometry,Quaternion,WebXRController,RAD2DEG,PCFShadowMap,FrustumArray,Frustum,DataTexture,RedIntegerFormat,RedFormat,ShortType,ByteType,UnsignedShortType,RGIntegerFormat,RGBIntegerFormat,RGBFormat,RGBAIntegerFormat,warnOnce,createCanvasElement,ReverseSubtractEquation,SubtractEquation,OneMinusDstAlphaFactor,OneMinusDstColorFactor,OneMinusSrcAlphaFactor,OneMinusSrcColorFactor,DstAlphaFactor,DstColorFactor,SrcAlphaSaturateFactor,SrcAlphaFactor,SrcColorFactor,OneFactor,CullFaceNone,CullFaceBack,CullFaceFront,MultiplyBlending,SubtractiveBlending,AdditiveBlending,NotEqualDepth,GreaterDepth,GreaterEqualDepth,EqualDepth,LessEqualDepth,LessDepth,AlwaysDepth,NeverDepth,UnsignedShort4444Type,UnsignedShort5551Type,UnsignedInt5999Type,AlphaFormat,RGB_S3TC_DXT1_Format,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGB_PVRTC_4BPPV1_Format,RGB_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_PVRTC_2BPPV1_Format,RGB_ETC1_Format,RGB_ETC2_Format,RGBA_ETC2_EAC_Format,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_10x10_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,RGBA_BPTC_Format,RED_RGTC1_Format,SIGNED_RED_RGTC1_Format,RED_GREEN_RGTC2_Format,SIGNED_RED_GREEN_RGTC2_Format,MirroredRepeatWrapping,ClampToEdgeWrapping,RepeatWrapping,NearestMipmapNearestFilter,NotEqualCompare,GreaterCompare,GreaterEqualCompare,EqualCompare,LessEqualCompare,AlwaysCompare,NeverCompare,LinearTransfer,NotEqualStencilFunc,GreaterStencilFunc,GreaterEqualStencilFunc,EqualStencilFunc,LessEqualStencilFunc,LessStencilFunc,AlwaysStencilFunc,NeverStencilFunc,DecrementWrapStencilOp,IncrementWrapStencilOp,DecrementStencilOp,IncrementStencilOp,InvertStencilOp,ReplaceStencilOp,ZeroStencilOp,KeepStencilOp,MaxEquation,MinEquation,SpotLight,PointLight,DirectionalLight,RectAreaLight,AmbientLight,HemisphereLight,LightProbe,LinearToneMapping,ReinhardToneMapping,CineonToneMapping,ACESFilmicToneMapping,AgXToneMapping,NeutralToneMapping,Group,Loader,FileLoader,MaterialLoader,ObjectLoader}from"./three.core.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,InterpolationSamplingMode,InterpolationSamplingType,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RenderTarget3D,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,Timer,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.js";const refreshUniforms=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","aoMapIntensity","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveIntensity","emissiveMap","envMap","envMapIntensity","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","lightMapIntensity","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"],_lightsCache=new WeakMap;class NodeMaterialObserver{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=refreshUniforms,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}needsVelocity(e){const t=e.getMRT();return null!==t&&t.has("velocity")}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:i,object:n}=e;if(t={material:this.getMaterialData(i),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:n.matrixWorld.clone()},n.center&&(t.center=n.center.clone()),n.morphTargetInfluences&&(t.morphTargetInfluences=n.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:i}=e.context;t.bufferWidth=r,t.bufferHeight=i}t.lights=this.getLightsData(e.lightsNode.getLights()),this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const i=e[r];t[r]={version:i.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.overrideNodes.modelViewMatrix||null!==e.renderer.overrideNodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const i=e[r];null!=i&&("object"==typeof i&&void 0!==i.clone?!0===i.isTexture?t[r]={id:i.id,version:i.version}:t[r]=i.clone():t[r]=i)}return t}equals(e,t){const{object:r,material:i,geometry:n}=e,o=this.getRenderObjectData(e);if(!0!==o.worldMatrix.equals(r.matrixWorld))return o.worldMatrix.copy(r.matrixWorld),!1;const s=o.material;for(const e in s){const t=s[e],r=i[e];if(void 0!==t.equals){if(!1===t.equals(r))return t.copy(r),!1}else if(!0===r.isTexture){if(t.id!==r.id||t.version!==r.version)return t.id=r.id,t.version=r.version,!1}else if(t!==r)return s[e]=r,!1}if(s.transmission>0){const{width:t,height:r}=e.context;if(o.bufferWidth!==t||o.bufferHeight!==r)return o.bufferWidth=t,o.bufferHeight=r,!1}const a=o.geometry,l=n.attributes,u=a.attributes,d=Object.keys(u),c=Object.keys(l);if(a.id!==n.id)return a.id=n.id,!1;if(d.length!==c.length)return o.geometry.attributes=this.getAttributesData(l),!1;for(const e of d){const t=u[e],r=l[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const h=n.index,p=a.indexVersion,m=h?h.version:null;if(p!==m)return a.indexVersion=m,!1;if(a.drawRange.start!==n.drawRange.start||a.drawRange.count!==n.drawRange.count)return a.drawRange.start=n.drawRange.start,a.drawRange.count=n.drawRange.count,!1;if(o.morphTargetInfluences){let e=!1;for(let t=0;t<o.morphTargetInfluences.length;t++)o.morphTargetInfluences[t]!==r.morphTargetInfluences[t]&&(e=!0);if(e)return!0}if(o.lights)for(let e=0;e<t.length;e++)if(o.lights[e].map!==t[e].map)return!1;return o.center&&!1===o.center.equals(r.center)?(o.center.copy(r.center),!0):(null!==e.bundle&&(o.version=e.bundle.version),!0)}getLightsData(e){const t=[];for(const r of e)!0===r.isSpotLight&&null!==r.map&&t.push({map:r.map.version});return t}getLights(e,t){if(_lightsCache.has(e)){const r=_lightsCache.get(e);if(r.renderId===t)return r.lightsData}const r=this.getLightsData(e.getLights());return _lightsCache.set(e,{renderId:t,lightsData:r}),r}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e)||this.needsVelocity(t.renderer))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const i=!0===e.object.static,n=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(i||n)return!1;const o=this.getLights(e.lightsNode,r);return!0!==this.equals(e,o)}}function cyrb53(e,t=0){let r=3735928559^t,i=1103547991^t;if(e instanceof Array)for(let t,n=0;n<e.length;n++)t=e[n],r=Math.imul(r^t,2654435761),i=Math.imul(i^t,1597334677);else for(let t,n=0;n<e.length;n++)t=e.charCodeAt(n),r=Math.imul(r^t,2654435761),i=Math.imul(i^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(i^i>>>13,3266489909),i=Math.imul(i^i>>>16,2246822507),i^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&i)+(r>>>0)}const hashString=e=>cyrb53(e),hashArray=e=>cyrb53(e),hash$1=(...e)=>cyrb53(e);function getCacheKey$1(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:i,childNode:n}of getNodeChildren(e))r.push(cyrb53(i.slice(0,-4)),n.getCacheKey(t));return cyrb53(r)}function*getNodeChildren(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const i=e[r];if(!0===Array.isArray(i))for(let e=0;e<i.length;e++){const n=i[e];n&&(!0===n.isNode||t&&"function"==typeof n.toJSON)&&(yield{property:r,index:e,childNode:n})}else if(i&&!0===i.isNode)yield{property:r,childNode:i};else if(i&&Object.getPrototypeOf(i)===Object.prototype)for(const e in i){if(!0===e.startsWith("_"))continue;const n=i[e];n&&(!0===n.isNode||t&&"function"==typeof n.toJSON)&&(yield{property:r,index:e,childNode:n})}}}const typeFromLength=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),dataFromObject=new WeakMap;function getTypeFromLength(e){return typeFromLength.get(e)}function getTypedArrayFromType(e){if(/[iu]?vec\d/.test(e))return e.startsWith("ivec")?Int32Array:e.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(e))return Float32Array;if(/float/.test(e))return Float32Array;if(/uint/.test(e))return Uint32Array;if(/int/.test(e))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${e}`)}function getLengthFromType(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function getMemoryLengthFromType(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?12:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function getByteBoundaryFromType(e){return/float|int|uint/.test(e)?4:/vec2/.test(e)?8:/vec3/.test(e)||/vec4/.test(e)?16:/mat2/.test(e)?8:/mat3/.test(e)?48:/mat4/.test(e)?64:void console.error("THREE.TSL: Unsupported type:",e)}function getValueType(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix2?"mat2":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function getValueFromType(e,...t){const r=e?e.slice(-4):void 0;return 1===t.length&&("vec2"===r?t=[t[0],t[0]]:"vec3"===r?t=[t[0],t[0],t[0]]:"vec4"===r&&(t=[t[0],t[0],t[0],t[0]])),"color"===e?new Color(...t):"vec2"===r?new Vector2(...t):"vec3"===r?new Vector3(...t):"vec4"===r?new Vector4(...t):"mat2"===r?new Matrix2(...t):"mat3"===r?new Matrix3(...t):"mat4"===r?new Matrix4(...t):"bool"===e?t[0]||!1:"float"===e||"int"===e||"uint"===e?t[0]||0:"string"===e?t[0]||"":"ArrayBuffer"===e?base64ToArrayBuffer(t[0]):null}function getDataFromObject(e){let t=dataFromObject.get(e);return void 0===t&&(t={},dataFromObject.set(e,t)),t}function arrayBufferToBase64(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function base64ToArrayBuffer(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var NodeUtils=Object.freeze({__proto__:null,arrayBufferToBase64:arrayBufferToBase64,base64ToArrayBuffer:base64ToArrayBuffer,getByteBoundaryFromType:getByteBoundaryFromType,getCacheKey:getCacheKey$1,getDataFromObject:getDataFromObject,getLengthFromType:getLengthFromType,getMemoryLengthFromType:getMemoryLengthFromType,getNodeChildren:getNodeChildren,getTypeFromLength:getTypeFromLength,getTypedArrayFromType:getTypedArrayFromType,getValueFromType:getValueFromType,getValueType:getValueType,hash:hash$1,hashArray:hashArray,hashString:hashString});const NodeShaderStage={VERTEX:"vertex",FRAGMENT:"fragment"},NodeUpdateType={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},NodeType={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},NodeAccess={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},defaultShaderStages=["fragment","vertex"],defaultBuildStages=["setup","analyze","generate"],shaderStages=[...defaultShaderStages,"compute"],vectorComponents=["x","y","z","w"],_parentBuildStage={analyze:"setup",generate:"analyze"};let _nodeId=0;class Node extends EventDispatcher{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=NodeUpdateType.NONE,this.updateBeforeType=NodeUpdateType.NONE,this.updateAfterType=NodeUpdateType.NONE,this.uuid=MathUtils.generateUUID(),this.version=0,this.global=!1,this.parents=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:_nodeId++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,NodeUpdateType.FRAME)}onRenderUpdate(e){return this.onUpdate(e,NodeUpdateType.RENDER)}onObjectUpdate(e){return this.onUpdate(e,NodeUpdateType.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of getNodeChildren(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=hash$1(getCacheKey$1(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}getArrayCount(){return null}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return t.outputNode||null}analyze(e,t=null){const r=e.increaseUsage(this);if(!0===this.parents){const r=e.getDataFromNode(this,"any");r.stages=r.stages||{},r.stages[e.shaderStage]=r.stages[e.shaderStage]||[],r.stages[e.shaderStage].push(t)}if(1===r){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e,this)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);const i=e.getDataFromNode(this);i.buildStages=i.buildStages||{},i.buildStages[e.buildStage]=!0;const n=_parentBuildStage[e.buildStage];if(n&&!0!==i.buildStages[n]){const t=e.getBuildStage();e.setBuildStage(n),this.build(e),e.setBuildStage(t)}e.addNode(this),e.addChain(this);let o=null;const s=e.getBuildStage();if("setup"===s){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){t.initialized=!0,t.outputNode=this.setup(e)||t.outputNode||null;for(const r of Object.values(t))if(r&&!0===r.isNode){if(!0===r.parents){const t=e.getNodeProperties(r);t.parents=t.parents||[],t.parents.push(this)}r.build(e)}}o=t.outputNode}else if("analyze"===s)this.analyze(e,t);else if("generate"===s){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);o=i.snippet,void 0===o?void 0===i.generated?(i.generated=!0,o=this.generate(e)||"",i.snippet=o):(console.warn("THREE.Node: Recursion detected.",this),o="/* Recursion detected. */"):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),o=e.format(o,r,t)}else o=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),o}getSerializeChildren(){return getNodeChildren(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:i,index:n,childNode:o}of t)void 0!==n?(void 0===r[i]&&(r[i]=Number.isInteger(n)?[]:{}),r[i][n]=o.toJSON(e.meta).uuid):r[i]=o.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const i=[];for(const n of e.inputNodes[r])i.push(t[n]);this[r]=i}else if("object"==typeof e.inputNodes[r]){const i={};for(const n in e.inputNodes[r]){const o=e.inputNodes[r][n];i[n]=t[o]}this[r]=i}else{const i=e.inputNodes[r];this[r]=t[i]}}}toJSON(e){const{uuid:t,type:r}=this,i=void 0===e||"string"==typeof e;i&&(e={textures:{},images:{},nodes:{}});let n=e.nodes[t];function o(e){const t=[];for(const r in e){const i=e[r];delete i.metadata,t.push(i)}return t}if(void 0===n&&(n={uuid:t,type:r,meta:e,metadata:{version:4.7,type:"Node",generator:"Node.toJSON"}},!0!==i&&(e.nodes[n.uuid]=n),this.serialize(n),delete n.meta),i){const t=o(e.textures),r=o(e.images),i=o(e.nodes);t.length>0&&(n.textures=t),r.length>0&&(n.images=r),i.length>0&&(n.nodes=i)}return n}}class ArrayElementNode extends Node{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.indexNode.getNodeType(e);return`${this.node.build(e)}[ ${this.indexNode.build(e,!e.isVector(t)&&e.isInteger(t)?t:"uint")} ]`}}class ConvertNode extends Node{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const i of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(i)||(r=i);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,i=this.getNodeType(e),n=r.build(e,i);return e.format(n,i,t)}}class TempNode extends Node{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),i=e.getDataFromNode(this);if(void 0!==i.propertyName)return e.format(i.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const n=super.build(e,r),o=e.getVarFromNode(this,null,r),s=e.getPropertyName(o);return e.addLineFlowCode(`${s} = ${n}`,this),i.snippet=n,i.propertyName=s,e.format(i.propertyName,r,t)}}return super.build(e,t)}}class JoinNode extends TempNode{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),i=e.getTypeLength(r),n=this.nodes,o=e.getComponentType(r),s=[];let a=0;for(const t of n){if(a>=i){console.error(`THREE.TSL: Length of parameters exceeds maximum length of function '${r}()' type.`);break}let n,l=t.getNodeType(e),u=e.getTypeLength(l);a+u>i&&(console.error(`THREE.TSL: Length of '${r}()' data exceeds maximum length of output type.`),u=i-a,l=e.getTypeFromLength(u)),a+=u,n=t.build(e,l);const d=e.getComponentType(l);d!==o&&(n=e.format(n,d,o)),s.push(n)}const l=`${e.getType(r)}( ${s.join(", ")} )`;return e.format(l,r,t)}}const _stringVectorComponents=vectorComponents.join("");class SplitNode extends Node{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(vectorComponents.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,i=e.getTypeLength(r.getNodeType(e));let n=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const s=r.build(e,o);n=this.components.length===i&&this.components===_stringVectorComponents.slice(0,this.components.length)?e.format(s,o,t):e.format(`${s}.${this.components}`,this.getNodeType(e),t)}else n=r.build(e,t);return n}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class SetNode extends TempNode{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:i}=this,n=this.getNodeType(e),o=e.getComponentType(i.getNodeType(e)),s=e.getTypeFromLength(r.length,o),a=i.build(e,s),l=t.build(e,n),u=e.getTypeLength(n),d=[];for(let e=0;e<u;e++){const t=vectorComponents[e];t===r[0]?(d.push(a),e+=r.length-1):d.push(l+"."+t)}return`${e.getType(n)}( ${d.join(", ")} )`}}class FlipNode extends TempNode{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,i=this.getNodeType(e),n=r.build(e),o=e.getVarFromNode(this),s=e.getPropertyName(o);e.addLineFlowCode(s+" = "+n,this);const a=e.getTypeLength(i),l=[];let u=0;for(let e=0;e<a;e++){const r=vectorComponents[e];r===t[u]?(l.push("1.0 - "+s+"."+r),u++):l.push(s+"."+r)}return`${e.getType(i)}( ${l.join(", ")} )`}}class InputNode extends Node{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?getValueType(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=getValueType(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=arrayBufferToBase64(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?getValueFromType(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const _regNum=/float|u?int/;class ConstNode extends InputNode{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return _regNum.test(r)&&_regNum.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),r,t)}}class MemberNode extends Node{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let currentStack=null;const NodeElements=new Map;function addMethodChaining(e,t){if(NodeElements.has(e))console.warn(`THREE.TSL: Redefinition of method chaining '${e}'.`);else{if("function"!=typeof t)throw new Error(`THREE.TSL: Node element ${e} is not a function`);NodeElements.set(e,t)}}const parseSwizzle=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),parseSwizzleAndSort=e=>parseSwizzle(e).split("").sort().join(""),shaderNodeHandler={setup(e,t){const r=t.shift();return e(nodeObjects(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(currentStack.assign(r,...e),r);if(NodeElements.has(t)){const i=NodeElements.get(t);return e.isStackNode?(...e)=>r.add(i(...e)):(...e)=>i(r,...e)}if("toVarIntent"===t)return()=>r;if("self"===t)return e;if(t.endsWith("Assign")&&NodeElements.has(t.slice(0,t.length-6))){const i=NodeElements.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],i(...e)):(...e)=>r.assign(i(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=parseSwizzle(t),nodeObject(new SplitNode(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=parseSwizzleAndSort(t.slice(3).toLowerCase()),r=>nodeObject(new SetNode(e,t,nodeObject(r)));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=parseSwizzleAndSort(t.slice(4).toLowerCase()),()=>nodeObject(new FlipNode(nodeObject(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),nodeObject(new SplitNode(e,t));if(!0===/^\d+$/.test(t))return nodeObject(new ArrayElementNode(r,new ConstNode(Number(t),"uint")));if(!0===/^get$/.test(t))return e=>nodeObject(new MemberNode(r,e))}return Reflect.get(e,t,r)},set:(e,t,r,i)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,i):(i[t].assign(r),!0)},nodeObjectsCacheMap=new WeakMap,nodeBuilderFunctionsCacheMap=new WeakMap,ShaderNodeObject=function(e,t=null){const r=getValueType(e);if("node"===r){let t=nodeObjectsCacheMap.get(e);return void 0===t&&(t=new Proxy(e,shaderNodeHandler),nodeObjectsCacheMap.set(e,t),nodeObjectsCacheMap.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?nodeObject(getConstNode(e,t)):"shader"===r?e.isFn?e:Fn(e):e},ShaderNodeObjects=function(e,t=null){for(const r in e)e[r]=nodeObject(e[r],t);return e},ShaderNodeArray=function(e,t=null){const r=e.length;for(let i=0;i<r;i++)e[i]=nodeObject(e[i],t);return e},ShaderNodeProxy=function(e,t=null,r=null,i=null){function n(e){return null!==i?(e=nodeObject(Object.assign(e,i)),!0===i.intent&&(e=e.toVarIntent())):e=nodeObject(e),e}let o,s,a,l=t;function u(t){let r;return r=l?/[a-z]/i.test(l)?l+"()":l:e.type,void 0!==s&&t.length<s?(console.error(`THREE.TSL: "${r}" parameter length is less than minimum required.`),t.concat(new Array(s-t.length).fill(0))):void 0!==a&&t.length>a?(console.error(`THREE.TSL: "${r}" parameter length exceeds limit.`),t.slice(0,a)):t}return null===t?o=(...t)=>n(new e(...nodeArray(u(t)))):null!==r?(r=nodeObject(r),o=(...i)=>n(new e(t,...nodeArray(u(i)),r))):o=(...r)=>n(new e(t,...nodeArray(u(r)))),o.setParameterLength=(...e)=>(1===e.length?s=a=e[0]:2===e.length&&([s,a]=e),o),o.setName=e=>(l=e,o),o},ShaderNodeImmutable=function(e,...t){return nodeObject(new e(...nodeArray(t)))};class ShaderCallNodeInternal extends Node{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t,this.isShaderCallNodeInternal=!0}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:r}=this,i=e.getNodeProperties(t),n=e.getClosestSubBuild(t.subBuilds)||"",o=n||"default";if(i[o])return i[o];const s=e.subBuildFn;e.subBuildFn=n;let a=null;if(t.layout){let i=nodeBuilderFunctionsCacheMap.get(e.constructor);void 0===i&&(i=new WeakMap,nodeBuilderFunctionsCacheMap.set(e.constructor,i));let n=i.get(t);void 0===n&&(n=nodeObject(e.buildFunctionNode(t)),i.set(t,n)),e.addInclude(n),a=nodeObject(n.call(r))}else{let i=r;if(Array.isArray(i)){let e=0;i=new Proxy(i,{get:(t,r,i)=>void 0===t[r]?t[e++]:Reflect.get(t,r,i)})}const n=t.jsFunc,o=null!==i||n.length>1?n(i||[],e):n(e);a=nodeObject(o)}return e.subBuildFn=s,t.once&&(i[o]=a),a}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}getOutputNode(e){const t=e.getNodeProperties(this),r=e.getSubBuildOutput(this);return t[r]=t[r]||this.setupOutput(e),t[r].subBuild=e.getClosestSubBuild(this),t[r]}build(e,t=null){let r=null;const i=e.getBuildStage(),n=e.getNodeProperties(this),o=e.getSubBuildOutput(this),s=this.getOutputNode(e);if("setup"===i){const t=e.getSubBuildProperty("initialized",this);if(!0!==n[t]&&(n[t]=!0,n[o]=this.getOutputNode(e),n[o].build(e),this.shaderNode.subBuilds))for(const t of e.chaining){const r=e.getDataFromNode(t,"any");r.subBuilds=r.subBuilds||new Set;for(const e of this.shaderNode.subBuilds)r.subBuilds.add(e)}r=n[o]}else"analyze"===i?s.build(e,t):"generate"===i&&(r=s.build(e,t)||"");return r}}class ShaderNodeInternal extends Node{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return nodeObjects(e),nodeObject(new ShaderCallNodeInternal(this,e))}setup(){return this.call()}}const bools=[!1,!0],uints=[0,1,2,3],ints=[-1,-2],floats=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],boolsCacheMap=new Map;for(const e of bools)boolsCacheMap.set(e,new ConstNode(e));const uintsCacheMap=new Map;for(const e of uints)uintsCacheMap.set(e,new ConstNode(e,"uint"));const intsCacheMap=new Map([...uintsCacheMap].map((e=>new ConstNode(e.value,"int"))));for(const e of ints)intsCacheMap.set(e,new ConstNode(e,"int"));const floatsCacheMap=new Map([...intsCacheMap].map((e=>new ConstNode(e.value))));for(const e of floats)floatsCacheMap.set(e,new ConstNode(e));for(const e of floats)floatsCacheMap.set(-e,new ConstNode(-e));const cacheMaps={bool:boolsCacheMap,uint:uintsCacheMap,ints:intsCacheMap,float:floatsCacheMap},constNodesCacheMap=new Map([...boolsCacheMap,...floatsCacheMap]),getConstNode=(e,t)=>constNodesCacheMap.has(e)?constNodesCacheMap.get(e):!0===e.isNode?e:new ConstNode(e,t),ConvertType=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[getValueFromType(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return nodeObjectIntent(t.get(r[0]));if(1===r.length){const t=getConstNode(r[0],e);return t.nodeType===e?nodeObjectIntent(t):nodeObjectIntent(new ConvertNode(t,e))}const i=r.map((e=>getConstNode(e)));return nodeObjectIntent(new JoinNode(i,e))}},defined=e=>"object"==typeof e&&null!==e?e.value:e,getConstNodeType=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function ShaderNode(e,t){return new Proxy(new ShaderNodeInternal(e,t),shaderNodeHandler)}const nodeObject=(e,t=null)=>ShaderNodeObject(e,t),nodeObjectIntent=(e,t=null)=>nodeObject(e,t).toVarIntent(),nodeObjects=(e,t=null)=>new ShaderNodeObjects(e,t),nodeArray=(e,t=null)=>new ShaderNodeArray(e,t),nodeProxy=(e,t=null,r=null,i=null)=>new ShaderNodeProxy(e,t,r,i),nodeImmutable=(e,...t)=>new ShaderNodeImmutable(e,...t),nodeProxyIntent=(e,t=null,r=null,i={})=>new ShaderNodeProxy(e,t,r,{intent:!0,...i});let fnId=0;const Fn=(e,t=null)=>{let r=null;null!==t&&("object"==typeof t?r=t.return:("string"==typeof t?r=t:console.error("THREE.TSL: Invalid layout type."),t=null));const i=new ShaderNode(e,r),n=(...e)=>{let t;nodeObjects(e);t=e[0]&&(e[0].isNode||Object.getPrototypeOf(e[0])!==Object.prototype)?[...e]:e[0];const n=i.call(t);return"void"===r&&n.toStack(),n.toVarIntent()};if(n.shaderNode=i,n.id=i.id,n.isFn=!0,n.getNodeType=(...e)=>i.getNodeType(...e),n.getCacheKey=(...e)=>i.getCacheKey(...e),n.setLayout=e=>(i.setLayout(e),n),n.once=(e=null)=>(i.once=!0,i.subBuilds=e,n),null!==t){if("object"!=typeof t.inputs){const e={name:"fn"+fnId++,type:r,inputs:[]};for(const r in t)"return"!==r&&e.inputs.push({name:r,type:t[r]});t=e}n.setLayout(t)}return n},setCurrentStack=e=>{currentStack=e},getCurrentStack=()=>currentStack,If=(...e)=>currentStack.If(...e),Switch=(...e)=>currentStack.Switch(...e);function Stack(e){return currentStack&&currentStack.add(e),e}addMethodChaining("toStack",Stack);const color=new ConvertType("color"),float=new ConvertType("float",cacheMaps.float),int=new ConvertType("int",cacheMaps.ints),uint=new ConvertType("uint",cacheMaps.uint),bool=new ConvertType("bool",cacheMaps.bool),vec2=new ConvertType("vec2"),ivec2=new ConvertType("ivec2"),uvec2=new ConvertType("uvec2"),bvec2=new ConvertType("bvec2"),vec3=new ConvertType("vec3"),ivec3=new ConvertType("ivec3"),uvec3=new ConvertType("uvec3"),bvec3=new ConvertType("bvec3"),vec4=new ConvertType("vec4"),ivec4=new ConvertType("ivec4"),uvec4=new ConvertType("uvec4"),bvec4=new ConvertType("bvec4"),mat2=new ConvertType("mat2"),mat3=new ConvertType("mat3"),mat4=new ConvertType("mat4"),string=(e="")=>nodeObject(new ConstNode(e,"string")),arrayBuffer=e=>nodeObject(new ConstNode(e,"ArrayBuffer"));addMethodChaining("toColor",color),addMethodChaining("toFloat",float),addMethodChaining("toInt",int),addMethodChaining("toUint",uint),addMethodChaining("toBool",bool),addMethodChaining("toVec2",vec2),addMethodChaining("toIVec2",ivec2),addMethodChaining("toUVec2",uvec2),addMethodChaining("toBVec2",bvec2),addMethodChaining("toVec3",vec3),addMethodChaining("toIVec3",ivec3),addMethodChaining("toUVec3",uvec3),addMethodChaining("toBVec3",bvec3),addMethodChaining("toVec4",vec4),addMethodChaining("toIVec4",ivec4),addMethodChaining("toUVec4",uvec4),addMethodChaining("toBVec4",bvec4),addMethodChaining("toMat2",mat2),addMethodChaining("toMat3",mat3),addMethodChaining("toMat4",mat4);const element=nodeProxy(ArrayElementNode).setParameterLength(2),convert=(e,t)=>nodeObject(new ConvertNode(nodeObject(e),t)),split=(e,t)=>nodeObject(new SplitNode(nodeObject(e),t));addMethodChaining("element",element),addMethodChaining("convert",convert);const append=e=>(console.warn("THREE.TSL: append() has been renamed to Stack()."),Stack(e));addMethodChaining("append",(e=>(console.warn("THREE.TSL: .append() has been renamed to .toStack()."),Stack(e))));class PropertyNode extends Node{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0,this.global=!0}getHash(e){return this.name||super.getHash(e)}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const property=(e,t)=>nodeObject(new PropertyNode(e,t)),varyingProperty=(e,t)=>nodeObject(new PropertyNode(e,t,!0)),diffuseColor=nodeImmutable(PropertyNode,"vec4","DiffuseColor"),emissive=nodeImmutable(PropertyNode,"vec3","EmissiveColor"),roughness=nodeImmutable(PropertyNode,"float","Roughness"),metalness=nodeImmutable(PropertyNode,"float","Metalness"),clearcoat=nodeImmutable(PropertyNode,"float","Clearcoat"),clearcoatRoughness=nodeImmutable(PropertyNode,"float","ClearcoatRoughness"),sheen=nodeImmutable(PropertyNode,"vec3","Sheen"),sheenRoughness=nodeImmutable(PropertyNode,"float","SheenRoughness"),iridescence=nodeImmutable(PropertyNode,"float","Iridescence"),iridescenceIOR=nodeImmutable(PropertyNode,"float","IridescenceIOR"),iridescenceThickness=nodeImmutable(PropertyNode,"float","IridescenceThickness"),alphaT=nodeImmutable(PropertyNode,"float","AlphaT"),anisotropy=nodeImmutable(PropertyNode,"float","Anisotropy"),anisotropyT=nodeImmutable(PropertyNode,"vec3","AnisotropyT"),anisotropyB=nodeImmutable(PropertyNode,"vec3","AnisotropyB"),specularColor=nodeImmutable(PropertyNode,"color","SpecularColor"),specularF90=nodeImmutable(PropertyNode,"float","SpecularF90"),shininess=nodeImmutable(PropertyNode,"float","Shininess"),output=nodeImmutable(PropertyNode,"vec4","Output"),dashSize=nodeImmutable(PropertyNode,"float","dashSize"),gapSize=nodeImmutable(PropertyNode,"float","gapSize"),pointWidth=nodeImmutable(PropertyNode,"float","pointWidth"),ior=nodeImmutable(PropertyNode,"float","IOR"),transmission=nodeImmutable(PropertyNode,"float","Transmission"),thickness=nodeImmutable(PropertyNode,"float","Thickness"),attenuationDistance=nodeImmutable(PropertyNode,"float","AttenuationDistance"),attenuationColor=nodeImmutable(PropertyNode,"color","AttenuationColor"),dispersion=nodeImmutable(PropertyNode,"float","Dispersion");class UniformGroupNode extends Node{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const uniformGroup=e=>new UniformGroupNode(e),sharedUniformGroup=(e,t=0)=>new UniformGroupNode(e,!0,t),frameGroup=sharedUniformGroup("frame"),renderGroup=sharedUniformGroup("render"),objectGroup=uniformGroup("object");class UniformNode extends InputNode{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=objectGroup}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const i=e(t,r);void 0!==i&&(this.value=i)}),t)}getInputType(e){let t=super.getInputType(e);return"bool"===t&&(t="uint"),t}generate(e,t){const r=this.getNodeType(e),i=this.getUniformHash(e);let n=e.getNodeFromHash(i);void 0===n&&(e.setHashNode(this,i),n=this);const o=n.getInputType(e),s=e.getUniformFromNode(n,o,e.shaderStage,this.name||e.context.nodeName),a=e.getPropertyName(s);void 0!==e.context.nodeName&&delete e.context.nodeName;let l=a;if("bool"===r){const t=e.getDataFromNode(this);let i=t.propertyName;if(void 0===i){const n=e.getVarFromNode(this,null,"bool");i=e.getPropertyName(n),t.propertyName=i,l=e.format(a,o,r),e.addLineFlowCode(`${i} = ${l}`,this)}l=i}return e.format(l,r,t)}}const uniform=(e,t)=>{const r=getConstNodeType(t||e),i=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return nodeObject(new UniformNode(i,r))};class ArrayNode extends TempNode{static get type(){return"ArrayNode"}constructor(e,t,r=null){super(e),this.count=t,this.values=r,this.isArrayNode=!0}getArrayCount(){return this.count}getNodeType(e){return null===this.nodeType&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const array=(...e)=>{let t;if(1===e.length){const r=e[0];t=new ArrayNode(null,r.length,r)}else{const r=e[0],i=e[1];t=new ArrayNode(r,i)}return nodeObject(t)};addMethodChaining("toArray",((e,t)=>array(Array(t).fill(e))));class AssignNode extends TempNode{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t,this.isAssignNode=!0}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return vectorComponents.join("").slice(0,r)!==t.components}return!1}setup(e){const{targetNode:t,sourceNode:r}=this;e.getNodeProperties(t).assign=!0;const i=e.getNodeProperties(this);i.sourceNode=r,i.targetNode=t.context({assign:!0})}generate(e,t){const{targetNode:r,sourceNode:i}=e.getNodeProperties(this),n=this.needsSplitAssign(e),o=r.getNodeType(e),s=r.build(e),a=i.build(e,o),l=i.getNodeType(e),u=e.getDataFromNode(this);let d;if(!0===u.initialized)"void"!==t&&(d=s);else if(n){const i=e.getVarFromNode(this,null,o),n=e.getPropertyName(i);e.addLineFlowCode(`${n} = ${a}`,this);const l=r.node,u=l.node.context({assign:!0}).build(e);for(let t=0;t<l.components.length;t++){const r=l.components[t];e.addLineFlowCode(`${u}.${r} = ${n}[ ${t} ]`,this)}"void"!==t&&(d=s)}else d=`${s} = ${a}`,"void"!==t&&"void"!==l||(e.addLineFlowCode(d,this),"void"!==t&&(d=s));return u.initialized=!0,e.format(d,o,t)}}const assign=nodeProxy(AssignNode).setParameterLength(2);addMethodChaining("assign",assign);class FunctionCallNode extends TempNode{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,i=r.getInputs(e),n=this.parameters,o=(t,r)=>{const i=r.type;let n;return n="pointer"===i?"&"+t.build(e):t.build(e,i),n};if(Array.isArray(n)){if(n.length>i.length)console.error("THREE.TSL: The number of provided parameters exceeds the expected number of inputs in 'Fn()'."),n.length=i.length;else if(n.length<i.length)for(console.error("THREE.TSL: The number of provided parameters is less than the expected number of inputs in 'Fn()'.");n.length<i.length;)n.push(float(0));for(let e=0;e<n.length;e++)t.push(o(n[e],i[e]))}else for(const e of i){const r=n[e.name];void 0!==r?t.push(o(r,e)):(console.error(`THREE.TSL: Input '${e.name}' not found in 'Fn()'.`),t.push(o(float(0),e)))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const call=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?nodeArray(t):nodeObjects(t[0]),nodeObject(new FunctionCallNode(nodeObject(e),t)));addMethodChaining("call",call);const _vectorOperators={"==":"equal","!=":"notEqual","<":"lessThan",">":"greaterThan","<=":"lessThanEqual",">=":"greaterThanEqual","%":"mod"};class OperatorNode extends TempNode{static get type(){return"OperatorNode"}constructor(e,t,r,...i){if(super(),i.length>0){let n=new OperatorNode(e,t,r);for(let t=0;t<i.length-1;t++)n=new OperatorNode(e,n,i[t]);t=n,r=i[i.length-1]}this.op=e,this.aNode=t,this.bNode=r,this.isOperatorNode=!0}getOperatorMethod(e,t){return e.getMethod(_vectorOperators[this.op],t)}getNodeType(e){const t=this.op,r=this.aNode,i=this.bNode,n=r.getNodeType(e),o=i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===t)return n;if("~"===t||"&"===t||"|"===t||"^"===t||">>"===t||"<<"===t)return e.getIntegerType(n);if("!"===t||"&&"===t||"||"===t||"^^"===t)return"bool";if("=="===t||"!="===t||"<"===t||">"===t||"<="===t||">="===t){const t=Math.max(e.getTypeLength(n),e.getTypeLength(o));return t>1?`bvec${t}`:"bool"}if(e.isMatrix(n)){if("float"===o)return n;if(e.isVector(o))return e.getVectorFromMatrix(n);if(e.isMatrix(o))return n}else if(e.isMatrix(o)){if("float"===n)return o;if(e.isVector(n))return e.getVectorFromMatrix(o)}return e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,{aNode:i,bNode:n}=this,o=this.getNodeType(e);let s=null,a=null;"void"!==o?(s=i.getNodeType(e),a=n?n.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r||"!="===r?e.isVector(s)?a=s:e.isVector(a)?s=a:s!==a&&(s=a="float"):">>"===r||"<<"===r?(s=o,a=e.changeComponentType(a,"uint")):"%"===r?(s=o,a=e.isInteger(s)&&e.isInteger(a)?a:s):e.isMatrix(s)?"float"===a?a="float":e.isVector(a)?a=e.getVectorFromMatrix(s):e.isMatrix(a)||(s=a=o):s=e.isMatrix(a)?"float"===s?"float":e.isVector(s)?e.getVectorFromMatrix(a):a=o:a=o):s=a=o;const l=i.build(e,s),u=n?n.build(e,a):null,d=e.getFunctionOperator(r);if("void"!==t){const i=e.renderer.coordinateSystem===WebGLCoordinateSystem;if("=="===r||"!="===r||"<"===r||">"===r||"<="===r||">="===r)return i&&e.isVector(s)?e.format(`${this.getOperatorMethod(e,t)}( ${l}, ${u} )`,o,t):e.format(`( ${l} ${r} ${u} )`,o,t);if("%"===r)return e.isInteger(a)?e.format(`( ${l} % ${u} )`,o,t):e.format(`${this.getOperatorMethod(e,o)}( ${l}, ${u} )`,o,t);if("!"===r||"~"===r)return e.format(`(${r}${l})`,s,t);if(d)return e.format(`${d}( ${l}, ${u} )`,o,t);if(e.isMatrix(s)&&"float"===a)return e.format(`( ${u} ${r} ${l} )`,o,t);if("float"===s&&e.isMatrix(a))return e.format(`${l} ${r} ${u}`,o,t);{let n=`( ${l} ${r} ${u} )`;return!i&&"bool"===o&&e.isVector(s)&&e.isVector(a)&&(n=`all${n}`),e.format(n,o,t)}}if("void"!==s)return d?e.format(`${d}( ${l}, ${u} )`,o,t):e.isMatrix(s)&&"float"===a?e.format(`${u} ${r} ${l}`,o,t):e.format(`${l} ${r} ${u}`,o,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const add=nodeProxyIntent(OperatorNode,"+").setParameterLength(2,1/0).setName("add"),sub=nodeProxyIntent(OperatorNode,"-").setParameterLength(2,1/0).setName("sub"),mul=nodeProxyIntent(OperatorNode,"*").setParameterLength(2,1/0).setName("mul"),div=nodeProxyIntent(OperatorNode,"/").setParameterLength(2,1/0).setName("div"),mod=nodeProxyIntent(OperatorNode,"%").setParameterLength(2).setName("mod"),equal=nodeProxyIntent(OperatorNode,"==").setParameterLength(2).setName("equal"),notEqual=nodeProxyIntent(OperatorNode,"!=").setParameterLength(2).setName("notEqual"),lessThan=nodeProxyIntent(OperatorNode,"<").setParameterLength(2).setName("lessThan"),greaterThan=nodeProxyIntent(OperatorNode,">").setParameterLength(2).setName("greaterThan"),lessThanEqual=nodeProxyIntent(OperatorNode,"<=").setParameterLength(2).setName("lessThanEqual"),greaterThanEqual=nodeProxyIntent(OperatorNode,">=").setParameterLength(2).setName("greaterThanEqual"),and=nodeProxyIntent(OperatorNode,"&&").setParameterLength(2,1/0).setName("and"),or=nodeProxyIntent(OperatorNode,"||").setParameterLength(2,1/0).setName("or"),not=nodeProxyIntent(OperatorNode,"!").setParameterLength(1).setName("not"),xor=nodeProxyIntent(OperatorNode,"^^").setParameterLength(2).setName("xor"),bitAnd=nodeProxyIntent(OperatorNode,"&").setParameterLength(2).setName("bitAnd"),bitNot=nodeProxyIntent(OperatorNode,"~").setParameterLength(2).setName("bitNot"),bitOr=nodeProxyIntent(OperatorNode,"|").setParameterLength(2).setName("bitOr"),bitXor=nodeProxyIntent(OperatorNode,"^").setParameterLength(2).setName("bitXor"),shiftLeft=nodeProxyIntent(OperatorNode,"<<").setParameterLength(2).setName("shiftLeft"),shiftRight=nodeProxyIntent(OperatorNode,">>").setParameterLength(2).setName("shiftRight"),incrementBefore=Fn((([e])=>(e.addAssign(1),e))),decrementBefore=Fn((([e])=>(e.subAssign(1),e))),increment=Fn((([e])=>{const t=int(e).toConst();return e.addAssign(1),t})),decrement=Fn((([e])=>{const t=int(e).toConst();return e.subAssign(1),t}));addMethodChaining("add",add),addMethodChaining("sub",sub),addMethodChaining("mul",mul),addMethodChaining("div",div),addMethodChaining("mod",mod),addMethodChaining("equal",equal),addMethodChaining("notEqual",notEqual),addMethodChaining("lessThan",lessThan),addMethodChaining("greaterThan",greaterThan),addMethodChaining("lessThanEqual",lessThanEqual),addMethodChaining("greaterThanEqual",greaterThanEqual),addMethodChaining("and",and),addMethodChaining("or",or),addMethodChaining("not",not),addMethodChaining("xor",xor),addMethodChaining("bitAnd",bitAnd),addMethodChaining("bitNot",bitNot),addMethodChaining("bitOr",bitOr),addMethodChaining("bitXor",bitXor),addMethodChaining("shiftLeft",shiftLeft),addMethodChaining("shiftRight",shiftRight),addMethodChaining("incrementBefore",incrementBefore),addMethodChaining("decrementBefore",decrementBefore),addMethodChaining("increment",increment),addMethodChaining("decrement",decrement);const modInt=(e,t)=>(console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.'),mod(int(e),int(t)));addMethodChaining("modInt",modInt);class MathNode extends TempNode{static get type(){return"MathNode"}constructor(e,t,r=null,i=null){if(super(),(e===MathNode.MAX||e===MathNode.MIN)&&arguments.length>3){let n=new MathNode(e,t,r);for(let t=2;t<arguments.length-1;t++)n=new MathNode(e,n,arguments[t]);t=n,r=arguments[arguments.length-1],i=null}this.method=e,this.aNode=t,this.bNode=r,this.cNode=i,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,i=this.cNode?this.cNode.getNodeType(e):null,n=e.isMatrix(t)?0:e.getTypeLength(t),o=e.isMatrix(r)?0:e.getTypeLength(r),s=e.isMatrix(i)?0:e.getTypeLength(i);return n>o&&n>s?t:o>s?r:s>n?i:t}getNodeType(e){const t=this.method;return t===MathNode.LENGTH||t===MathNode.DISTANCE||t===MathNode.DOT?"float":t===MathNode.CROSS?"vec3":t===MathNode.ALL||t===MathNode.ANY?"bool":t===MathNode.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):this.getInputType(e)}setup(e){const{aNode:t,bNode:r,method:i}=this;let n=null;if(i===MathNode.ONE_MINUS)n=sub(1,t);else if(i===MathNode.RECIPROCAL)n=div(1,t);else if(i===MathNode.DIFFERENCE)n=abs(sub(t,r));else if(i===MathNode.TRANSFORM_DIRECTION){let i=t,o=r;e.isMatrix(i.getNodeType(e))?o=vec4(vec3(o),0):i=vec4(vec3(i),0);const s=mul(i,o).xyz;n=normalize(s)}return null!==n?n:super.setup(e)}generate(e,t){if(e.getNodeProperties(this).outputNode)return super.generate(e,t);let r=this.method;const i=this.getNodeType(e),n=this.getInputType(e),o=this.aNode,s=this.bNode,a=this.cNode,l=e.renderer.coordinateSystem;if(r===MathNode.NEGATE)return e.format("( - "+o.build(e,n)+" )",i,t);{const u=[];return r===MathNode.CROSS?u.push(o.build(e,i),s.build(e,i)):l===WebGLCoordinateSystem&&r===MathNode.STEP?u.push(o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":n),s.build(e,n)):l!==WebGLCoordinateSystem||r!==MathNode.MIN&&r!==MathNode.MAX?r===MathNode.REFRACT?u.push(o.build(e,n),s.build(e,n),a.build(e,"float")):r===MathNode.MIX?u.push(o.build(e,n),s.build(e,n),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":n)):(l===WebGPUCoordinateSystem&&r===MathNode.ATAN&&null!==s&&(r="atan2"),"fragment"===e.shaderStage||r!==MathNode.DFDX&&r!==MathNode.DFDY||(console.warn(`THREE.TSL: '${r}' is not supported in the ${e.shaderStage} stage.`),r="/*"+r+"*/"),u.push(o.build(e,n)),null!==s&&u.push(s.build(e,n)),null!==a&&u.push(a.build(e,n))):u.push(o.build(e,n),s.build(e,1===e.getTypeLength(s.getNodeType(e))?"float":n)),e.format(`${e.getMethod(r,i)}( ${u.join(", ")} )`,i,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}MathNode.ALL="all",MathNode.ANY="any",MathNode.RADIANS="radians",MathNode.DEGREES="degrees",MathNode.EXP="exp",MathNode.EXP2="exp2",MathNode.LOG="log",MathNode.LOG2="log2",MathNode.SQRT="sqrt",MathNode.INVERSE_SQRT="inversesqrt",MathNode.FLOOR="floor",MathNode.CEIL="ceil",MathNode.NORMALIZE="normalize",MathNode.FRACT="fract",MathNode.SIN="sin",MathNode.COS="cos",MathNode.TAN="tan",MathNode.ASIN="asin",MathNode.ACOS="acos",MathNode.ATAN="atan",MathNode.ABS="abs",MathNode.SIGN="sign",MathNode.LENGTH="length",MathNode.NEGATE="negate",MathNode.ONE_MINUS="oneMinus",MathNode.DFDX="dFdx",MathNode.DFDY="dFdy",MathNode.ROUND="round",MathNode.RECIPROCAL="reciprocal",MathNode.TRUNC="trunc",MathNode.FWIDTH="fwidth",MathNode.TRANSPOSE="transpose",MathNode.DETERMINANT="determinant",MathNode.INVERSE="inverse",MathNode.BITCAST="bitcast",MathNode.EQUALS="equals",MathNode.MIN="min",MathNode.MAX="max",MathNode.STEP="step",MathNode.REFLECT="reflect",MathNode.DISTANCE="distance",MathNode.DIFFERENCE="difference",MathNode.DOT="dot",MathNode.CROSS="cross",MathNode.POW="pow",MathNode.TRANSFORM_DIRECTION="transformDirection",MathNode.MIX="mix",MathNode.CLAMP="clamp",MathNode.REFRACT="refract",MathNode.SMOOTHSTEP="smoothstep",MathNode.FACEFORWARD="faceforward";const EPSILON=float(1e-6),INFINITY=float(1e6),PI=float(Math.PI),PI2=float(2*Math.PI),all=nodeProxyIntent(MathNode,MathNode.ALL).setParameterLength(1),any=nodeProxyIntent(MathNode,MathNode.ANY).setParameterLength(1),radians=nodeProxyIntent(MathNode,MathNode.RADIANS).setParameterLength(1),degrees=nodeProxyIntent(MathNode,MathNode.DEGREES).setParameterLength(1),exp=nodeProxyIntent(MathNode,MathNode.EXP).setParameterLength(1),exp2=nodeProxyIntent(MathNode,MathNode.EXP2).setParameterLength(1),log=nodeProxyIntent(MathNode,MathNode.LOG).setParameterLength(1),log2=nodeProxyIntent(MathNode,MathNode.LOG2).setParameterLength(1),sqrt=nodeProxyIntent(MathNode,MathNode.SQRT).setParameterLength(1),inverseSqrt=nodeProxyIntent(MathNode,MathNode.INVERSE_SQRT).setParameterLength(1),floor=nodeProxyIntent(MathNode,MathNode.FLOOR).setParameterLength(1),ceil=nodeProxyIntent(MathNode,MathNode.CEIL).setParameterLength(1),normalize=nodeProxyIntent(MathNode,MathNode.NORMALIZE).setParameterLength(1),fract=nodeProxyIntent(MathNode,MathNode.FRACT).setParameterLength(1),sin=nodeProxyIntent(MathNode,MathNode.SIN).setParameterLength(1),cos=nodeProxyIntent(MathNode,MathNode.COS).setParameterLength(1),tan=nodeProxyIntent(MathNode,MathNode.TAN).setParameterLength(1),asin=nodeProxyIntent(MathNode,MathNode.ASIN).setParameterLength(1),acos=nodeProxyIntent(MathNode,MathNode.ACOS).setParameterLength(1),atan=nodeProxyIntent(MathNode,MathNode.ATAN).setParameterLength(1,2),abs=nodeProxyIntent(MathNode,MathNode.ABS).setParameterLength(1),sign=nodeProxyIntent(MathNode,MathNode.SIGN).setParameterLength(1),length=nodeProxyIntent(MathNode,MathNode.LENGTH).setParameterLength(1),negate=nodeProxyIntent(MathNode,MathNode.NEGATE).setParameterLength(1),oneMinus=nodeProxyIntent(MathNode,MathNode.ONE_MINUS).setParameterLength(1),dFdx=nodeProxyIntent(MathNode,MathNode.DFDX).setParameterLength(1),dFdy=nodeProxyIntent(MathNode,MathNode.DFDY).setParameterLength(1),round=nodeProxyIntent(MathNode,MathNode.ROUND).setParameterLength(1),reciprocal=nodeProxyIntent(MathNode,MathNode.RECIPROCAL).setParameterLength(1),trunc=nodeProxyIntent(MathNode,MathNode.TRUNC).setParameterLength(1),fwidth=nodeProxyIntent(MathNode,MathNode.FWIDTH).setParameterLength(1),transpose=nodeProxyIntent(MathNode,MathNode.TRANSPOSE).setParameterLength(1),determinant=nodeProxyIntent(MathNode,MathNode.DETERMINANT).setParameterLength(1),inverse=nodeProxyIntent(MathNode,MathNode.INVERSE).setParameterLength(1),bitcast=nodeProxyIntent(MathNode,MathNode.BITCAST).setParameterLength(2),equals=(e,t)=>(console.warn('THREE.TSL: "equals" is deprecated. Use "equal" inside a vector instead, like: "bvec*( equal( ... ) )"'),equal(e,t)),min$1=nodeProxyIntent(MathNode,MathNode.MIN).setParameterLength(2,1/0),max$1=nodeProxyIntent(MathNode,MathNode.MAX).setParameterLength(2,1/0),step=nodeProxyIntent(MathNode,MathNode.STEP).setParameterLength(2),reflect=nodeProxyIntent(MathNode,MathNode.REFLECT).setParameterLength(2),distance=nodeProxyIntent(MathNode,MathNode.DISTANCE).setParameterLength(2),difference=nodeProxyIntent(MathNode,MathNode.DIFFERENCE).setParameterLength(2),dot=nodeProxyIntent(MathNode,MathNode.DOT).setParameterLength(2),cross=nodeProxyIntent(MathNode,MathNode.CROSS).setParameterLength(2),pow=nodeProxyIntent(MathNode,MathNode.POW).setParameterLength(2),pow2=nodeProxyIntent(MathNode,MathNode.POW,2).setParameterLength(1),pow3=nodeProxyIntent(MathNode,MathNode.POW,3).setParameterLength(1),pow4=nodeProxyIntent(MathNode,MathNode.POW,4).setParameterLength(1),transformDirection=nodeProxyIntent(MathNode,MathNode.TRANSFORM_DIRECTION).setParameterLength(2),cbrt=e=>mul(sign(e),pow(abs(e),1/3)),lengthSq=e=>dot(e,e),mix=nodeProxyIntent(MathNode,MathNode.MIX).setParameterLength(3),clamp=(e,t=0,r=1)=>nodeObject(new MathNode(MathNode.CLAMP,nodeObject(e),nodeObject(t),nodeObject(r))),saturate=e=>clamp(e),refract=nodeProxyIntent(MathNode,MathNode.REFRACT).setParameterLength(3),smoothstep=nodeProxyIntent(MathNode,MathNode.SMOOTHSTEP).setParameterLength(3),faceForward=nodeProxyIntent(MathNode,MathNode.FACEFORWARD).setParameterLength(3),rand=Fn((([e])=>{const t=dot(e.xy,vec2(12.9898,78.233)),r=mod(t,PI);return fract(sin(r).mul(43758.5453))})),mixElement=(e,t,r)=>mix(t,r,e),smoothstepElement=(e,t,r)=>smoothstep(t,r,e),stepElement=(e,t)=>step(t,e),atan2=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),atan(e,t)),faceforward=faceForward,inversesqrt=inverseSqrt;addMethodChaining("all",all),addMethodChaining("any",any),addMethodChaining("equals",equals),addMethodChaining("radians",radians),addMethodChaining("degrees",degrees),addMethodChaining("exp",exp),addMethodChaining("exp2",exp2),addMethodChaining("log",log),addMethodChaining("log2",log2),addMethodChaining("sqrt",sqrt),addMethodChaining("inverseSqrt",inverseSqrt),addMethodChaining("floor",floor),addMethodChaining("ceil",ceil),addMethodChaining("normalize",normalize),addMethodChaining("fract",fract),addMethodChaining("sin",sin),addMethodChaining("cos",cos),addMethodChaining("tan",tan),addMethodChaining("asin",asin),addMethodChaining("acos",acos),addMethodChaining("atan",atan),addMethodChaining("abs",abs),addMethodChaining("sign",sign),addMethodChaining("length",length),addMethodChaining("lengthSq",lengthSq),addMethodChaining("negate",negate),addMethodChaining("oneMinus",oneMinus),addMethodChaining("dFdx",dFdx),addMethodChaining("dFdy",dFdy),addMethodChaining("round",round),addMethodChaining("reciprocal",reciprocal),addMethodChaining("trunc",trunc),addMethodChaining("fwidth",fwidth),addMethodChaining("atan2",atan2),addMethodChaining("min",min$1),addMethodChaining("max",max$1),addMethodChaining("step",stepElement),addMethodChaining("reflect",reflect),addMethodChaining("distance",distance),addMethodChaining("dot",dot),addMethodChaining("cross",cross),addMethodChaining("pow",pow),addMethodChaining("pow2",pow2),addMethodChaining("pow3",pow3),addMethodChaining("pow4",pow4),addMethodChaining("transformDirection",transformDirection),addMethodChaining("mix",mixElement),addMethodChaining("clamp",clamp),addMethodChaining("refract",refract),addMethodChaining("smoothstep",smoothstepElement),addMethodChaining("faceForward",faceForward),addMethodChaining("difference",difference),addMethodChaining("saturate",saturate),addMethodChaining("cbrt",cbrt),addMethodChaining("transpose",transpose),addMethodChaining("determinant",determinant),addMethodChaining("inverse",inverse),addMethodChaining("rand",rand);class ConditionalNode extends Node{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const{ifNode:t,elseNode:r}=e.getNodeProperties(this);if(void 0===t)return e.flowBuildStage(this,"setup"),this.getNodeType(e);const i=t.getNodeType(e);if(null!==r){const t=r.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(i))return t}return i}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,n=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=n,null!==i&&(e.getDataFromNode(i).parentNodeBlock=n);const o=e.getNodeProperties(this);o.condNode=t,o.ifNode=r.context({nodeBlock:r}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(e,t){const r=this.getNodeType(e),i=e.getDataFromNode(this);if(void 0!==i.nodeProperty)return i.nodeProperty;const{condNode:n,ifNode:o,elseNode:s}=e.getNodeProperties(this),a=e.currentFunctionNode,l="void"!==t,u=l?property(r).build(e):"";i.nodeProperty=u;const d=n.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${d} ) {\n\n`).addFlowTab();let c=o.build(e,r);if(c&&(l?c=u+" = "+c+";":(c="return "+c+";",null===a&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),c="// "+c))),e.removeFlowTab().addFlowCode(e.tab+"\t"+c+"\n\n"+e.tab+"}"),null!==s){e.addFlowCode(" else {\n\n").addFlowTab();let t=s.build(e,r);t&&(l?t=u+" = "+t+";":(t="return "+t+";",null===a&&(console.warn("THREE.TSL: Return statement used in an inline 'Fn()'. Define a layout struct to allow return values."),t="// "+t))),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const select=nodeProxy(ConditionalNode).setParameterLength(2,3);addMethodChaining("select",select);class ContextNode extends Node{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value}),this.node.build(e),e.setContext(t)}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const i=this.node.build(e,t);return e.setContext(r),i}}const context=nodeProxy(ContextNode).setParameterLength(1,2),setName=(e,t)=>context(e,{nodeName:t});function label(e,t){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),setName(e,t)}addMethodChaining("context",context),addMethodChaining("label",label),addMethodChaining("setName",setName);class VarNode extends Node{static get type(){return"VarNode"}constructor(e,t=null,r=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=r,this.parents=!0,this.intent=!1}setIntent(e){return this.intent=e,this}getIntent(){return this.intent}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}getArrayCount(e){return this.node.getArrayCount(e)}build(...e){if(!0===this.intent){if(!0!==e[0].getNodeProperties(this).assign)return this.node.build(...e)}return super.build(...e)}generate(e){const{node:t,name:r,readOnly:i}=this,{renderer:n}=e,o=!0===n.backend.isWebGPUBackend;let s=!1,a=!1;i&&(s=e.isDeterministic(t),a=o?i:s);const l=e.getVectorType(this.getNodeType(e)),u=t.build(e,l),d=e.getVarFromNode(this,r,l,void 0,a),c=e.getPropertyName(d);let h=c;if(a)if(o)h=s?`const ${c}`:`let ${c}`;else{const r=t.getArrayCount(e);h=`const ${e.getVar(d.type,c,r)}`}return e.addLineFlowCode(`${h} = ${u}`,this),c}}const createVar=nodeProxy(VarNode),Var=(e,t=null)=>createVar(e,t).toStack(),Const=(e,t=null)=>createVar(e,t,!0).toStack(),VarIntent=e=>null===getCurrentStack()?e:createVar(e).setIntent(!0).toStack();addMethodChaining("toVar",Var),addMethodChaining("toConst",Const),addMethodChaining("toVarIntent",VarIntent);const temp=e=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),createVar(e));addMethodChaining("temp",temp);class SubBuildNode extends Node{static get type(){return"SubBuild"}constructor(e,t,r=null){super(r),this.node=e,this.name=t,this.isSubBuildNode=!0}getNodeType(e){if(null!==this.nodeType)return this.nodeType;e.addSubBuild(this.name);const t=this.node.getNodeType(e);return e.removeSubBuild(),t}build(e,...t){e.addSubBuild(this.name);const r=this.node.build(e,...t);return e.removeSubBuild(),r}}const subBuild=(e,t,r=null)=>nodeObject(new SubBuildNode(nodeObject(e),t,r));class VaryingNode extends Node{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0,this.interpolationType=null,this.interpolationSampling=null,this.global=!0}setInterpolation(e,t=null){return this.interpolationType=e,this.interpolationSampling=t,this}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const i=this.name,n=this.getNodeType(e),o=this.interpolationType,s=this.interpolationSampling;t.varying=r=e.getVaryingFromNode(this,i,n,o,s),t.node=subBuild(this.node,"VERTEX")}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e),e.flowNodeFromShaderStage(NodeShaderStage.VERTEX,this.node)}analyze(e){this.setupVarying(e),e.flowNodeFromShaderStage(NodeShaderStage.VERTEX,this.node)}generate(e){const t=e.getSubBuildProperty("property",e.currentStack),r=e.getNodeProperties(this),i=this.setupVarying(e);if(void 0===r[t]){const n=this.getNodeType(e),o=e.getPropertyName(i,NodeShaderStage.VERTEX);e.flowNodeFromShaderStage(NodeShaderStage.VERTEX,r.node,n,o),r[t]=o}return e.getPropertyName(i)}}const varying=nodeProxy(VaryingNode).setParameterLength(1,2),vertexStage=e=>varying(e);addMethodChaining("toVarying",varying),addMethodChaining("toVertexStage",vertexStage),addMethodChaining("varying",((...e)=>(console.warn("THREE.TSL: .varying() has been renamed to .toVarying()."),varying(...e)))),addMethodChaining("vertexStage",((...e)=>(console.warn("THREE.TSL: .vertexStage() has been renamed to .toVertexStage()."),varying(...e))));const sRGBTransferEOTF=Fn((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),i=e.lessThanEqual(.04045);return mix(t,r,i)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),sRGBTransferOETF=Fn((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),i=e.lessThanEqual(.0031308);return mix(t,r,i)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),WORKING_COLOR_SPACE="WorkingColorSpace",OUTPUT_COLOR_SPACE="OutputColorSpace";class ColorSpaceNode extends TempNode{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return"WorkingColorSpace"===t?ColorManagement.workingColorSpace:"OutputColorSpace"===t?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),i=this.resolveColorSpace(e,this.target);let n=t;return!1!==ColorManagement.enabled&&r!==i&&r&&i?(ColorManagement.getTransfer(r)===SRGBTransfer&&(n=vec4(sRGBTransferEOTF(n.rgb),n.a)),ColorManagement.getPrimaries(r)!==ColorManagement.getPrimaries(i)&&(n=vec4(mat3(ColorManagement._getMatrix(new Matrix3,r,i)).mul(n.rgb),n.a)),ColorManagement.getTransfer(i)===SRGBTransfer&&(n=vec4(sRGBTransferOETF(n.rgb),n.a)),n):n}}const workingToColorSpace=(e,t)=>nodeObject(new ColorSpaceNode(nodeObject(e),"WorkingColorSpace",t)),colorSpaceToWorking=(e,t)=>nodeObject(new ColorSpaceNode(nodeObject(e),t,"WorkingColorSpace")),convertColorSpace=(e,t,r)=>nodeObject(new ColorSpaceNode(nodeObject(e),t,r));addMethodChaining("workingToColorSpace",workingToColorSpace),addMethodChaining("colorSpaceToWorking",colorSpaceToWorking);let ReferenceElementNode$1=class extends ArrayElementNode{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),i=this.getNodeType();return e.format(t,r,i)}};class ReferenceBaseNode extends Node{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,i=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=i,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=NodeUpdateType.OBJECT}setGroup(e){return this.group=e,this}element(e){return nodeObject(new ReferenceElementNode$1(this,nodeObject(e)))}setNodeType(e){const t=uniform(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const reference$1=(e,t,r)=>nodeObject(new ReferenceBaseNode(e,t,r));class RendererReferenceNode extends ReferenceBaseNode{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(renderGroup)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const rendererReference=(e,t,r=null)=>nodeObject(new RendererReferenceNode(e,t,r));class ToneMappingNode extends TempNode{static get type(){return"ToneMappingNode"}constructor(e,t=toneMappingExposure,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return hash$1(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===NoToneMapping)return t;let i=null;const n=e.renderer.library.getToneMappingFunction(r);return null!==n?i=vec4(n(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),i=t),i}}const toneMapping=(e,t,r)=>nodeObject(new ToneMappingNode(e,nodeObject(t),nodeObject(r))),toneMappingExposure=rendererReference("toneMappingExposure","float");addMethodChaining("toneMapping",((e,t,r)=>toneMapping(t,r,e)));class BufferAttributeNode extends InputNode{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,i=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=i,this.usage=StaticDrawUsage,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,i=e.getTypeLength(t),n=this.bufferStride||i,o=this.bufferOffset,s=!0===r.isInterleavedBuffer?r:new InterleavedBuffer(r,n),a=new InterleavedBufferAttribute(s,i,o);s.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),i=e.getPropertyName(r);let n=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=i,n=i;else{n=varying(this).build(e,t)}return n}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const bufferAttribute=(e,t=null,r=0,i=0)=>nodeObject(new BufferAttributeNode(e,t,r,i)),dynamicBufferAttribute=(e,t=null,r=0,i=0)=>bufferAttribute(e,t,r,i).setUsage(DynamicDrawUsage),instancedBufferAttribute=(e,t=null,r=0,i=0)=>bufferAttribute(e,t,r,i).setInstanced(!0),instancedDynamicBufferAttribute=(e,t=null,r=0,i=0)=>dynamicBufferAttribute(e,t,r,i).setInstanced(!0);addMethodChaining("toAttribute",(e=>bufferAttribute(e.value)));class ComputeNode extends Node{static get type(){return"ComputeNode"}constructor(e,t){super("void"),this.isComputeNode=!0,this.computeNode=e,this.workgroupSize=t,this.count=null,this.version=1,this.name="",this.updateBeforeType=NodeUpdateType.OBJECT,this.onInitFunction=null}setCount(e){return this.count=e,this}getCount(){return this.count}dispose(){this.dispatchEvent({type:"dispose"})}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}setup(e){const t=this.computeNode.build(e);if(t){e.getNodeProperties(this).outputComputeNode=t.outputNode,t.outputNode=null}return t}generate(e,t){const{shaderStage:r}=e;if("compute"===r){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}else{const r=e.getNodeProperties(this).outputComputeNode;if(r)return r.build(e,t)}}}const computeKernel=(e,t=[64])=>{(0===t.length||t.length>3)&&console.error("THREE.TSL: compute() workgroupSize must have 1, 2, or 3 elements");for(let e=0;e<t.length;e++){const r=t[e];("number"!=typeof r||r<=0||!Number.isInteger(r))&&console.error(`THREE.TSL: compute() workgroupSize element at index [ ${e} ] must be a positive integer`)}for(;t.length<3;)t.push(1);return nodeObject(new ComputeNode(nodeObject(e),t))},compute=(e,t,r)=>computeKernel(e,r).setCount(t);addMethodChaining("compute",compute),addMethodChaining("computeKernel",computeKernel);class CacheNode extends Node{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const i=this.node.getNodeType(e);return e.setCache(t),i}build(e,...t){const r=e.getCache(),i=e.getCacheFromNode(this,this.parent);e.setCache(i);const n=this.node.build(e,...t);return e.setCache(r),n}}const cache=(e,t)=>nodeObject(new CacheNode(nodeObject(e),t));addMethodChaining("cache",cache);class BypassNode extends Node{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const bypass=nodeProxy(BypassNode).setParameterLength(2);addMethodChaining("bypass",bypass);class RemapNode extends Node{static get type(){return"RemapNode"}constructor(e,t,r,i=float(0),n=float(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=i,this.outHighNode=n,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:i,outHighNode:n,doClamp:o}=this;let s=e.sub(t).div(r.sub(t));return!0===o&&(s=s.clamp()),s.mul(n.sub(i)).add(i)}}const remap=nodeProxy(RemapNode,null,null,{doClamp:!1}).setParameterLength(3,5),remapClamp=nodeProxy(RemapNode).setParameterLength(3,5);addMethodChaining("remap",remap),addMethodChaining("remapClamp",remapClamp);class ExpressionNode extends Node{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),i=this.snippet;if("void"!==r)return e.format(i,r,t);e.addLineFlowCode(i,this)}}const expression=nodeProxy(ExpressionNode).setParameterLength(1,2),Discard=e=>(e?select(e,expression("discard")):expression("discard")).toStack(),Return=()=>expression("return").toStack();addMethodChaining("discard",Discard);class RenderOutputNode extends TempNode{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||NoToneMapping,i=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||NoColorSpace;return r!==NoToneMapping&&(t=t.toneMapping(r)),i!==NoColorSpace&&i!==ColorManagement.workingColorSpace&&(t=t.workingToColorSpace(i)),t}}const renderOutput=(e,t=null,r=null)=>nodeObject(new RenderOutputNode(nodeObject(e),t,r));addMethodChaining("renderOutput",renderOutput);class DebugNode extends TempNode{static get type(){return"DebugNode"}constructor(e,t=null){super(),this.node=e,this.callback=t}getNodeType(e){return this.node.getNodeType(e)}setup(e){return this.node.build(e)}analyze(e){return this.node.build(e)}generate(e){const t=this.callback,r=this.node.build(e),i="--- TSL debug - "+e.shaderStage+" shader ---",n="-".repeat(i.length);let o="";return o+="// #"+i+"#\n",o+=e.flow.code.replace(/^\t/gm,"")+"\n",o+="/* ... */ "+r+" /* ... */\n",o+="// #"+n+"#\n",null!==t?t(e,o):console.log(o),r}}const debug=(e,t=null)=>nodeObject(new DebugNode(nodeObject(e),t)).toStack();function addNodeElement(e){console.warn("THREE.TSL: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)}addMethodChaining("debug",debug);class AttributeNode extends Node{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const i=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(i)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const i=e.geometry.getAttribute(t),n=e.getTypeFromAttribute(i),o=e.getAttribute(t,n);if("vertex"===e.shaderStage)return e.format(o.name,n,r);return varying(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const attribute=(e,t=null)=>nodeObject(new AttributeNode(e,t)),uv$1=(e=0)=>attribute("uv"+(e>0?e:""),"vec2");class TextureSizeNode extends Node{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),i=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${i} )`,this.getNodeType(e),t)}}const textureSize=nodeProxy(TextureSizeNode).setParameterLength(1,2);class MaxMipLevelNode extends UniformNode{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=NodeUpdateType.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const maxMipLevel=nodeProxy(MaxMipLevelNode).setParameterLength(1),EmptyTexture$1=new Texture;class TextureNode extends UniformNode{static get type(){return"TextureNode"}constructor(e=EmptyTexture$1,t=null,r=null,i=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=i,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=NodeUpdateType.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===UnsignedIntType?"uvec4":this.value.type===IntType?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return uv$1(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=uniform(this.value.matrix)),this._matrixUniform.mul(vec3(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?NodeUpdateType.OBJECT:NodeUpdateType.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(int(textureSize(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const r=this.value;if(!r||!0!==r.isTexture)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let i=this.uvNode;null!==i&&!0!==e.context.forceUVContext||!e.context.getUV||(i=e.context.getUV(this,e)),i||(i=this.getDefaultUV()),!0===this.updateMatrix&&(i=this.getTransformedUV(i)),i=this.setupUV(e,i);let n=this.levelNode;null===n&&e.context.getTextureLevel&&(n=e.context.getTextureLevel(this)),t.uvNode=i,t.levelNode=n,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,i,n,o,s,a){const l=this.value;let u;return u=i?e.generateTextureLevel(l,t,r,i,o):n?e.generateTextureBias(l,t,r,n,o):a?e.generateTextureGrad(l,t,r,a,o):s?e.generateTextureCompare(l,t,r,s,o):!1===this.sampler?e.generateTextureLoad(l,t,r,o):e.generateTexture(l,t,r,o),u}generate(e,t){const r=this.value,i=e.getNodeProperties(this),n=super.generate(e,"property");if(/^sampler/.test(t))return n+"_sampler";if(e.isReference(t))return n;{const o=e.getDataFromNode(this);let s=o.propertyName;if(void 0===s){const{uvNode:t,levelNode:r,biasNode:a,compareNode:l,depthNode:u,gradNode:d}=i,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=a?a.build(e,"float"):null,m=u?u.build(e,"int"):null,g=l?l.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,x=e.getVarFromNode(this);s=e.getPropertyName(x);const _=this.generateSnippet(e,n,c,h,p,m,g,f);e.addLineFlowCode(`${s} = ${_}`,this),o.snippet=_,o.propertyName=s}let a=s;const l=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(a=colorSpaceToWorking(expression(a,l),r.colorSpace).setup(e).build(e,l)),e.format(a,l,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=nodeObject(e),t.referenceNode=this.getSelf(),nodeObject(t)}load(e){return this.sample(e).setSampler(!1)}blur(e){const t=this.clone();t.biasNode=nodeObject(e).mul(maxMipLevel(t)),t.referenceNode=this.getSelf();const r=t.value;return!1===t.generateMipmaps&&(r&&!1===r.generateMipmaps||r.minFilter===NearestFilter||r.magFilter===NearestFilter)&&(console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture."),t.biasNode=null),nodeObject(t)}level(e){const t=this.clone();return t.levelNode=nodeObject(e),t.referenceNode=this.getSelf(),nodeObject(t)}size(e){return textureSize(this,e)}bias(e){const t=this.clone();return t.biasNode=nodeObject(e),t.referenceNode=this.getSelf(),nodeObject(t)}compare(e){const t=this.clone();return t.compareNode=nodeObject(e),t.referenceNode=this.getSelf(),nodeObject(t)}grad(e,t){const r=this.clone();return r.gradNode=[nodeObject(e),nodeObject(t)],r.referenceNode=this.getSelf(),nodeObject(r)}depth(e){const t=this.clone();return t.depthNode=nodeObject(e),t.referenceNode=this.getSelf(),nodeObject(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}}const textureBase=nodeProxy(TextureNode).setParameterLength(1,4).setName("texture"),texture=(e=EmptyTexture$1,t=null,r=null,i=null)=>{let n;return e&&!0===e.isTextureNode?(n=nodeObject(e.clone()),n.referenceNode=e.getSelf(),null!==t&&(n.uvNode=nodeObject(t)),null!==r&&(n.levelNode=nodeObject(r)),null!==i&&(n.biasNode=nodeObject(i))):n=textureBase(e,t,r,i),n},uniformTexture=(e=EmptyTexture$1)=>texture(e),textureLoad=(...e)=>texture(...e).setSampler(!1),sampler=e=>(!0===e.isNode?e:texture(e)).convert("sampler"),samplerComparison=e=>(!0===e.isNode?e:texture(e)).convert("samplerComparison");class BufferNode extends UniformNode{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const buffer=(e,t,r)=>nodeObject(new BufferNode(e,t,r));class UniformArrayElementNode extends ArrayElementNode{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),i=this.node.getPaddedType();return e.format(t,i,r)}}class UniformArrayNode extends BufferNode{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?getValueType(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=NodeUpdateType.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const i=4*r,n=e[r];t[i]=n.r,t[i+1]=n.g,t[i+2]=n.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const i=4*r,n=e[r];t[i]=n.elements[0],t[i+1]=n.elements[1],t[i+2]=n.elements[2],t[i+3]=n.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const i=16*r,n=e[r];t[i]=n.elements[0],t[i+1]=n.elements[1],t[i+2]=n.elements[2],t[i+4]=n.elements[3],t[i+5]=n.elements[4],t[i+6]=n.elements[5],t[i+8]=n.elements[6],t[i+9]=n.elements[7],t[i+10]=n.elements[8],t[i+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const i=16*r,n=e[r];for(let e=0;e<n.elements.length;e++)t[i+e]=n.elements[e]}else for(let r=0;r<e.length;r++){const i=4*r,n=e[r];t[i]=n.x,t[i+1]=n.y,t[i+2]=n.z||0,t[i+3]=n.w||0}}setup(e){const t=this.array.length,r=this.elementType;let i=Float32Array;const n=this.paddedType,o=e.getTypeLength(n);return"i"===r.charAt(0)&&(i=Int32Array),"u"===r.charAt(0)&&(i=Uint32Array),this.value=new i(t*o),this.bufferCount=t,this.bufferType=n,super.setup(e)}element(e){return nodeObject(new UniformArrayElementNode(this,nodeObject(e)))}}const uniformArray=(e,t)=>nodeObject(new UniformArrayNode(e,t));class BuiltinNode extends Node{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}}const builtin=nodeProxy(BuiltinNode).setParameterLength(1),cameraIndex=uniform(0,"uint").setName("u_cameraIndex").setGroup(sharedUniformGroup("cameraIndex")).toVarying("v_cameraIndex"),cameraNear=uniform("float").setName("cameraNear").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.near)),cameraFar=uniform("float").setName("cameraFar").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.far)),cameraProjectionMatrix=Fn((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrix);t=uniformArray(r).setGroup(renderGroup).setName("cameraProjectionMatrices").element(e.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraProjectionMatrix")}else t=uniform("mat4").setName("cameraProjectionMatrix").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.projectionMatrix));return t})).once()(),cameraProjectionMatrixInverse=Fn((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrixInverse);t=uniformArray(r).setGroup(renderGroup).setName("cameraProjectionMatricesInverse").element(e.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraProjectionMatrixInverse")}else t=uniform("mat4").setName("cameraProjectionMatrixInverse").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse));return t})).once()(),cameraViewMatrix=Fn((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.matrixWorldInverse);t=uniformArray(r).setGroup(renderGroup).setName("cameraViewMatrices").element(e.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraViewMatrix")}else t=uniform("mat4").setName("cameraViewMatrix").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.matrixWorldInverse));return t})).once()(),cameraWorldMatrix=uniform("mat4").setName("cameraWorldMatrix").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.matrixWorld)),cameraNormalMatrix=uniform("mat3").setName("cameraNormalMatrix").setGroup(renderGroup).onRenderUpdate((({camera:e})=>e.normalMatrix)),cameraPosition=uniform(new Vector3).setName("cameraPosition").setGroup(renderGroup).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld))),_sphere=new Sphere;class Object3DNode extends Node{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=NodeUpdateType.OBJECT,this.uniformNode=new UniformNode(null)}getNodeType(){const e=this.scope;return e===Object3DNode.WORLD_MATRIX?"mat4":e===Object3DNode.POSITION||e===Object3DNode.VIEW_POSITION||e===Object3DNode.DIRECTION||e===Object3DNode.SCALE?"vec3":e===Object3DNode.RADIUS?"float":void 0}update(e){const t=this.object3d,r=this.uniformNode,i=this.scope;if(i===Object3DNode.WORLD_MATRIX)r.value=t.matrixWorld;else if(i===Object3DNode.POSITION)r.value=r.value||new Vector3,r.value.setFromMatrixPosition(t.matrixWorld);else if(i===Object3DNode.SCALE)r.value=r.value||new Vector3,r.value.setFromMatrixScale(t.matrixWorld);else if(i===Object3DNode.DIRECTION)r.value=r.value||new Vector3,t.getWorldDirection(r.value);else if(i===Object3DNode.VIEW_POSITION){const i=e.camera;r.value=r.value||new Vector3,r.value.setFromMatrixPosition(t.matrixWorld),r.value.applyMatrix4(i.matrixWorldInverse)}else if(i===Object3DNode.RADIUS){const i=e.object.geometry;null===i.boundingSphere&&i.computeBoundingSphere(),_sphere.copy(i.boundingSphere).applyMatrix4(t.matrixWorld),r.value=_sphere.radius}}generate(e){const t=this.scope;return t===Object3DNode.WORLD_MATRIX?this.uniformNode.nodeType="mat4":t===Object3DNode.POSITION||t===Object3DNode.VIEW_POSITION||t===Object3DNode.DIRECTION||t===Object3DNode.SCALE?this.uniformNode.nodeType="vec3":t===Object3DNode.RADIUS&&(this.uniformNode.nodeType="float"),this.uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}Object3DNode.WORLD_MATRIX="worldMatrix",Object3DNode.POSITION="position",Object3DNode.SCALE="scale",Object3DNode.VIEW_POSITION="viewPosition",Object3DNode.DIRECTION="direction",Object3DNode.RADIUS="radius";const objectDirection=nodeProxy(Object3DNode,Object3DNode.DIRECTION).setParameterLength(1),objectWorldMatrix=nodeProxy(Object3DNode,Object3DNode.WORLD_MATRIX).setParameterLength(1),objectPosition=nodeProxy(Object3DNode,Object3DNode.POSITION).setParameterLength(1),objectScale=nodeProxy(Object3DNode,Object3DNode.SCALE).setParameterLength(1),objectViewPosition=nodeProxy(Object3DNode,Object3DNode.VIEW_POSITION).setParameterLength(1),objectRadius=nodeProxy(Object3DNode,Object3DNode.RADIUS).setParameterLength(1);class ModelNode extends Object3DNode{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const modelDirection=nodeImmutable(ModelNode,ModelNode.DIRECTION),modelWorldMatrix=nodeImmutable(ModelNode,ModelNode.WORLD_MATRIX),modelPosition=nodeImmutable(ModelNode,ModelNode.POSITION),modelScale=nodeImmutable(ModelNode,ModelNode.SCALE),modelViewPosition=nodeImmutable(ModelNode,ModelNode.VIEW_POSITION),modelRadius=nodeImmutable(ModelNode,ModelNode.RADIUS),modelNormalMatrix=uniform(new Matrix3).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),modelWorldMatrixInverse=uniform(new Matrix4).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),modelViewMatrix=Fn((e=>e.renderer.overrideNodes.modelViewMatrix||mediumpModelViewMatrix)).once()().toVar("modelViewMatrix"),mediumpModelViewMatrix=cameraViewMatrix.mul(modelWorldMatrix),highpModelViewMatrix=Fn((e=>(e.context.isHighPrecisionModelViewMatrix=!0,uniform("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),highpModelNormalViewMatrix=Fn((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return uniform("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),positionGeometry=attribute("position","vec3"),positionLocal=positionGeometry.toVarying("positionLocal"),positionPrevious=positionGeometry.toVarying("positionPrevious"),positionWorld=Fn((e=>modelWorldMatrix.mul(positionLocal).xyz.toVarying(e.getSubBuildProperty("v_positionWorld"))),"vec3").once(["POSITION"])(),positionWorldDirection=Fn((()=>positionLocal.transformDirection(modelWorldMatrix).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection")),"vec3").once(["POSITION"])(),positionView=Fn((e=>e.context.setupPositionView().toVarying("v_positionView")),"vec3").once(["POSITION"])(),positionViewDirection=positionView.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class FrontFacingNode extends Node{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){if("fragment"!==e.shaderStage)return"true";const{renderer:t,material:r}=e;return t.coordinateSystem===WebGLCoordinateSystem&&r.side===BackSide?"false":e.getFrontFacing()}}const frontFacing=nodeImmutable(FrontFacingNode),faceDirection=float(frontFacing).mul(2).sub(1),directionToFaceDirection=Fn((([e],{material:t})=>{const r=t.side;return r===BackSide?e=e.mul(-1):r===DoubleSide&&(e=e.mul(faceDirection)),e})),normalGeometry=attribute("normal","vec3"),normalLocal=Fn((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.'),vec3(0,1,0)):normalGeometry),"vec3").once()().toVar("normalLocal"),normalFlat=positionView.dFdx().cross(positionView.dFdy()).normalize().toVar("normalFlat"),normalViewGeometry=Fn((e=>{let t;return t=!0===e.material.flatShading?normalFlat:transformNormalToView(normalLocal).toVarying("v_normalViewGeometry").normalize(),t}),"vec3").once()().toVar("normalViewGeometry"),normalWorldGeometry=Fn((e=>{let t=normalViewGeometry.transformDirection(cameraViewMatrix);return!0!==e.material.flatShading&&(t=t.toVarying("v_normalWorldGeometry")),t.normalize().toVar("normalWorldGeometry")}),"vec3").once()(),normalView=Fn((({subBuildFn:e,material:t,context:r})=>{let i;return"NORMAL"===e||"VERTEX"===e?(i=normalViewGeometry,!0!==t.flatShading&&(i=directionToFaceDirection(i))):i=r.setupNormal().context({getUV:null}),i}),"vec3").once(["NORMAL","VERTEX"])().toVar("normalView"),normalWorld=normalView.transformDirection(cameraViewMatrix).toVar("normalWorld"),clearcoatNormalView=Fn((({subBuildFn:e,context:t})=>{let r;return r="NORMAL"===e||"VERTEX"===e?normalView:t.setupClearcoatNormal().context({getUV:null}),r}),"vec3").once(["NORMAL","VERTEX"])().toVar("clearcoatNormalView"),transformNormal=Fn((([e,t=modelWorldMatrix])=>{const r=mat3(t),i=e.div(vec3(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(i).xyz})),transformNormalToView=Fn((([e],t)=>{const r=t.renderer.overrideNodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const i=modelNormalMatrix.mul(e);return cameraViewMatrix.transformDirection(i)})),transformedNormalView=Fn((()=>(console.warn('THREE.TSL: "transformedNormalView" is deprecated. Use "normalView" instead.'),normalView))).once(["NORMAL","VERTEX"])(),transformedNormalWorld=Fn((()=>(console.warn('THREE.TSL: "transformedNormalWorld" is deprecated. Use "normalWorld" instead.'),normalWorld))).once(["NORMAL","VERTEX"])(),transformedClearcoatNormalView=Fn((()=>(console.warn('THREE.TSL: "transformedClearcoatNormalView" is deprecated. Use "clearcoatNormalView" instead.'),clearcoatNormalView))).once(["NORMAL","VERTEX"])(),_e1$1=new Euler,_m1$1=new Matrix4,materialRefractionRatio=uniform(0).onReference((({material:e})=>e)).onObjectUpdate((({material:e})=>e.refractionRatio)),materialEnvIntensity=uniform(1).onReference((({material:e})=>e)).onObjectUpdate((function({material:e,scene:t}){return e.envMap?e.envMapIntensity:t.environmentIntensity})),materialEnvRotation=uniform(new Matrix4).onReference((function(e){return e.material})).onObjectUpdate((function({material:e,scene:t}){const r=null!==t.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation;return r?(_e1$1.copy(r),_m1$1.makeRotationFromEuler(_e1$1)):_m1$1.identity(),_m1$1})),reflectView=positionViewDirection.negate().reflect(normalView),refractView=positionViewDirection.negate().refract(normalView,materialRefractionRatio),reflectVector=reflectView.transformDirection(cameraViewMatrix).toVar("reflectVector"),refractVector=refractView.transformDirection(cameraViewMatrix).toVar("reflectVector"),EmptyTexture=new CubeTexture;class CubeTextureNode extends TextureNode{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,i=null){super(e,t,r,i),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===CubeReflectionMapping?reflectVector:e.mapping===CubeRefractionMapping?refractVector:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),vec3(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==WebGPUCoordinateSystem&&r.isRenderTargetTexture||(t=vec3(t.x.negate(),t.yz)),materialEnvRotation.mul(t)}generateUV(e,t){return t.build(e,"vec3")}}const cubeTextureBase=nodeProxy(CubeTextureNode).setParameterLength(1,4).setName("cubeTexture"),cubeTexture=(e=EmptyTexture,t=null,r=null,i=null)=>{let n;return e&&!0===e.isCubeTextureNode?(n=nodeObject(e.clone()),n.referenceNode=e.getSelf(),null!==t&&(n.uvNode=nodeObject(t)),null!==r&&(n.levelNode=nodeObject(r)),null!==i&&(n.biasNode=nodeObject(i))):n=cubeTextureBase(e,t,r,i),n},uniformCubeTexture=(e=EmptyTexture)=>cubeTextureBase(e);class ReferenceElementNode extends ArrayElementNode{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),i=this.getNodeType();return e.format(t,r,i)}}class ReferenceNode extends Node{static get type(){return"ReferenceNode"}constructor(e,t,r=null,i=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=i,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=NodeUpdateType.OBJECT}element(e){return nodeObject(new ReferenceElementNode(this,nodeObject(e)))}setGroup(e){return this.group=e,this}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setNodeType(e){let t=null;t=null!==this.count?buffer(null,e,this.count):Array.isArray(this.getValueFromReference())?uniformArray(null,e):"texture"===e?texture(null):"cubeTexture"===e?cubeTexture(null):uniform(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.setName(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const reference=(e,t,r)=>nodeObject(new ReferenceNode(e,t,r)),referenceBuffer=(e,t,r,i)=>nodeObject(new ReferenceNode(e,t,i,r));class MaterialReferenceNode extends ReferenceNode{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const materialReference=(e,t,r=null)=>nodeObject(new MaterialReferenceNode(e,t,r)),uv=uv$1(),q0=positionView.dFdx(),q1=positionView.dFdy(),st0=uv.dFdx(),st1=uv.dFdy(),N=normalView,q1perp=q1.cross(N),q0perp=N.cross(q0),T=q1perp.mul(st0.x).add(q0perp.mul(st1.x)),B=q1perp.mul(st0.y).add(q0perp.mul(st1.y)),det=T.dot(T).max(B.dot(B)),scale=det.equal(0).select(0,det.inverseSqrt()),tangentViewFrame=T.mul(scale).toVar("tangentViewFrame"),bitangentViewFrame=B.mul(scale).toVar("bitangentViewFrame"),tangentGeometry=Fn((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),attribute("tangent","vec4"))))(),tangentLocal=tangentGeometry.xyz.toVar("tangentLocal"),tangentView=Fn((({subBuildFn:e,geometry:t,material:r})=>{let i;return i="VERTEX"===e||t.hasAttribute("tangent")?modelViewMatrix.mul(vec4(tangentLocal,0)).xyz.toVarying("v_tangentView").normalize():tangentViewFrame,!0!==r.flatShading&&(i=directionToFaceDirection(i)),i}),"vec3").once(["NORMAL","VERTEX"])().toVar("tangentView"),tangentWorld=tangentView.transformDirection(cameraViewMatrix).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),getBitangent=Fn((([e,t],{subBuildFn:r,material:i})=>{let n=e.mul(tangentGeometry.w).xyz;return"NORMAL"===r&&!0!==i.flatShading&&(n=n.toVarying(t)),n})).once(["NORMAL"]),bitangentGeometry=getBitangent(normalGeometry.cross(tangentGeometry),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),bitangentLocal=getBitangent(normalLocal.cross(tangentLocal),"v_bitangentLocal").normalize().toVar("bitangentLocal"),bitangentView=Fn((({subBuildFn:e,geometry:t,material:r})=>{let i;return i="VERTEX"===e||t.hasAttribute("tangent")?getBitangent(normalView.cross(tangentView),"v_bitangentView").normalize():bitangentViewFrame,!0!==r.flatShading&&(i=directionToFaceDirection(i)),i}),"vec3").once(["NORMAL","VERTEX"])().toVar("bitangentView"),bitangentWorld=getBitangent(normalWorld.cross(tangentWorld),"v_bitangentWorld").normalize().toVar("bitangentWorld"),TBNViewMatrix=mat3(tangentView,bitangentView,normalView).toVar("TBNViewMatrix"),parallaxDirection=positionViewDirection.mul(TBNViewMatrix),parallaxUV=(e,t)=>e.sub(parallaxDirection.mul(t)),bentNormalView=Fn((()=>{let e=anisotropyB.cross(positionViewDirection);return e=e.cross(anisotropyB).normalize(),e=mix(e,normalView,anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})).once()();class NormalMapNode extends TempNode{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=TangentSpaceNormalMap}setup({material:e}){const{normalMapType:t,scaleNode:r}=this;let i=this.node.mul(2).sub(1);if(null!==r){let t=r;!0===e.flatShading&&(t=directionToFaceDirection(t)),i=vec3(i.xy.mul(t),i.z)}let n=null;return t===ObjectSpaceNormalMap?n=transformNormalToView(i):t===TangentSpaceNormalMap?n=TBNViewMatrix.mul(i).normalize():(console.error(`THREE.NodeMaterial: Unsupported normal map type: ${t}`),n=normalView),n}}const normalMap=nodeProxy(NormalMapNode).setParameterLength(1,2),dHdxy_fwd=Fn((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||uv$1()),forceUVContext:!0}),i=float(r((e=>e)));return vec2(float(r((e=>e.add(e.dFdx())))).sub(i),float(r((e=>e.add(e.dFdy())))).sub(i)).mul(t)})),perturbNormalArb=Fn((e=>{const{surf_pos:t,surf_norm:r,dHdxy:i}=e,n=t.dFdx().normalize(),o=r,s=t.dFdy().normalize().cross(o),a=o.cross(n),l=n.dot(s).mul(faceDirection),u=l.sign().mul(i.x.mul(s).add(i.y.mul(a)));return l.abs().mul(r).sub(u).normalize()}));class BumpMapNode extends TempNode{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=dHdxy_fwd({textureNode:this.textureNode,bumpScale:e});return perturbNormalArb({surf_pos:positionView,surf_norm:normalView,dHdxy:t})}}const bumpMap=nodeProxy(BumpMapNode).setParameterLength(1,2),_propertyCache=new Map;class MaterialNode extends Node{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=_propertyCache.get(e);return void 0===r&&(r=materialReference(e,t),_propertyCache.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let i=null;if(r===MaterialNode.COLOR){const e=void 0!==t.color?this.getColor(r):vec3();i=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===MaterialNode.OPACITY){const e=this.getFloat(r);i=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===MaterialNode.SPECULAR_STRENGTH)i=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:float(1);else if(r===MaterialNode.SPECULAR_INTENSITY){const e=this.getFloat(r);i=t.specularIntensityMap&&!0===t.specularIntensityMap.isTexture?e.mul(this.getTexture(r).a):e}else if(r===MaterialNode.SPECULAR_COLOR){const e=this.getColor(r);i=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===MaterialNode.ROUGHNESS){const e=this.getFloat(r);i=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===MaterialNode.METALNESS){const e=this.getFloat(r);i=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===MaterialNode.EMISSIVE){const e=this.getFloat("emissiveIntensity"),n=this.getColor(r).mul(e);i=t.emissiveMap&&!0===t.emissiveMap.isTexture?n.mul(this.getTexture(r)):n}else if(r===MaterialNode.NORMAL)t.normalMap?(i=normalMap(this.getTexture("normal"),this.getCache("normalScale","vec2")),i.normalMapType=t.normalMapType):i=t.bumpMap?bumpMap(this.getTexture("bump").r,this.getFloat("bumpScale")):normalView;else if(r===MaterialNode.CLEARCOAT){const e=this.getFloat(r);i=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===MaterialNode.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);i=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===MaterialNode.CLEARCOAT_NORMAL)i=t.clearcoatNormalMap?normalMap(this.getTexture(r),this.getCache(r+"Scale","vec2")):normalView;else if(r===MaterialNode.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));i=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===MaterialNode.SHEEN_ROUGHNESS){const e=this.getFloat(r);i=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,i=i.clamp(.07,1)}else if(r===MaterialNode.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);i=mat2(materialAnisotropyVector.x,materialAnisotropyVector.y,materialAnisotropyVector.y.negate(),materialAnisotropyVector.x).mul(e.rg.mul(2).sub(vec2(1)).normalize().mul(e.b))}else i=materialAnisotropyVector;else if(r===MaterialNode.IRIDESCENCE_THICKNESS){const e=reference("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const n=reference("0","float",t.iridescenceThicknessRange);i=e.sub(n).mul(this.getTexture(r).g).add(n)}else i=e}else if(r===MaterialNode.TRANSMISSION){const e=this.getFloat(r);i=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===MaterialNode.THICKNESS){const e=this.getFloat(r);i=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===MaterialNode.IOR)i=this.getFloat(r);else if(r===MaterialNode.LIGHT_MAP)i=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===MaterialNode.AO)i=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else if(r===MaterialNode.LINE_DASH_OFFSET)i=t.dashOffset?this.getFloat(r):float(0);else{const t=this.getNodeType(e);i=this.getCache(r,t)}return i}}MaterialNode.ALPHA_TEST="alphaTest",MaterialNode.COLOR="color",MaterialNode.OPACITY="opacity",MaterialNode.SHININESS="shininess",MaterialNode.SPECULAR="specular",MaterialNode.SPECULAR_STRENGTH="specularStrength",MaterialNode.SPECULAR_INTENSITY="specularIntensity",MaterialNode.SPECULAR_COLOR="specularColor",MaterialNode.REFLECTIVITY="reflectivity",MaterialNode.ROUGHNESS="roughness",MaterialNode.METALNESS="metalness",MaterialNode.NORMAL="normal",MaterialNode.CLEARCOAT="clearcoat",MaterialNode.CLEARCOAT_ROUGHNESS="clearcoatRoughness",MaterialNode.CLEARCOAT_NORMAL="clearcoatNormal",MaterialNode.EMISSIVE="emissive",MaterialNode.ROTATION="rotation",MaterialNode.SHEEN="sheen",MaterialNode.SHEEN_ROUGHNESS="sheenRoughness",MaterialNode.ANISOTROPY="anisotropy",MaterialNode.IRIDESCENCE="iridescence",MaterialNode.IRIDESCENCE_IOR="iridescenceIOR",MaterialNode.IRIDESCENCE_THICKNESS="iridescenceThickness",MaterialNode.IOR="ior",MaterialNode.TRANSMISSION="transmission",MaterialNode.THICKNESS="thickness",MaterialNode.ATTENUATION_DISTANCE="attenuationDistance",MaterialNode.ATTENUATION_COLOR="attenuationColor",MaterialNode.LINE_SCALE="scale",MaterialNode.LINE_DASH_SIZE="dashSize",MaterialNode.LINE_GAP_SIZE="gapSize",MaterialNode.LINE_WIDTH="linewidth",MaterialNode.LINE_DASH_OFFSET="dashOffset",MaterialNode.POINT_SIZE="size",MaterialNode.DISPERSION="dispersion",MaterialNode.LIGHT_MAP="light",MaterialNode.AO="ao";const materialAlphaTest=nodeImmutable(MaterialNode,MaterialNode.ALPHA_TEST),materialColor=nodeImmutable(MaterialNode,MaterialNode.COLOR),materialShininess=nodeImmutable(MaterialNode,MaterialNode.SHININESS),materialEmissive=nodeImmutable(MaterialNode,MaterialNode.EMISSIVE),materialOpacity=nodeImmutable(MaterialNode,MaterialNode.OPACITY),materialSpecular=nodeImmutable(MaterialNode,MaterialNode.SPECULAR),materialSpecularIntensity=nodeImmutable(MaterialNode,MaterialNode.SPECULAR_INTENSITY),materialSpecularColor=nodeImmutable(MaterialNode,MaterialNode.SPECULAR_COLOR),materialSpecularStrength=nodeImmutable(MaterialNode,MaterialNode.SPECULAR_STRENGTH),materialReflectivity=nodeImmutable(MaterialNode,MaterialNode.REFLECTIVITY),materialRoughness=nodeImmutable(MaterialNode,MaterialNode.ROUGHNESS),materialMetalness=nodeImmutable(MaterialNode,MaterialNode.METALNESS),materialNormal=nodeImmutable(MaterialNode,MaterialNode.NORMAL),materialClearcoat=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT),materialClearcoatRoughness=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT_ROUGHNESS),materialClearcoatNormal=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT_NORMAL),materialRotation=nodeImmutable(MaterialNode,MaterialNode.ROTATION),materialSheen=nodeImmutable(MaterialNode,MaterialNode.SHEEN),materialSheenRoughness=nodeImmutable(MaterialNode,MaterialNode.SHEEN_ROUGHNESS),materialAnisotropy=nodeImmutable(MaterialNode,MaterialNode.ANISOTROPY),materialIridescence=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE),materialIridescenceIOR=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE_IOR),materialIridescenceThickness=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE_THICKNESS),materialTransmission=nodeImmutable(MaterialNode,MaterialNode.TRANSMISSION),materialThickness=nodeImmutable(MaterialNode,MaterialNode.THICKNESS),materialIOR=nodeImmutable(MaterialNode,MaterialNode.IOR),materialAttenuationDistance=nodeImmutable(MaterialNode,MaterialNode.ATTENUATION_DISTANCE),materialAttenuationColor=nodeImmutable(MaterialNode,MaterialNode.ATTENUATION_COLOR),materialLineScale=nodeImmutable(MaterialNode,MaterialNode.LINE_SCALE),materialLineDashSize=nodeImmutable(MaterialNode,MaterialNode.LINE_DASH_SIZE),materialLineGapSize=nodeImmutable(MaterialNode,MaterialNode.LINE_GAP_SIZE),materialLineWidth=nodeImmutable(MaterialNode,MaterialNode.LINE_WIDTH),materialLineDashOffset=nodeImmutable(MaterialNode,MaterialNode.LINE_DASH_OFFSET),materialPointSize=nodeImmutable(MaterialNode,MaterialNode.POINT_SIZE),materialDispersion=nodeImmutable(MaterialNode,MaterialNode.DISPERSION),materialLightMap=nodeImmutable(MaterialNode,MaterialNode.LIGHT_MAP),materialAO=nodeImmutable(MaterialNode,MaterialNode.AO),materialAnisotropyVector=uniform(new Vector2).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),modelViewProjection=Fn((e=>e.context.setupModelViewProjection()),"vec4").once()().toVarying("v_modelViewProjection");class IndexNode extends Node{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let i,n;if(r===IndexNode.VERTEX)i=e.getVertexIndex();else if(r===IndexNode.INSTANCE)i=e.getInstanceIndex();else if(r===IndexNode.DRAW)i=e.getDrawIndex();else if(r===IndexNode.INVOCATION_LOCAL)i=e.getInvocationLocalIndex();else if(r===IndexNode.INVOCATION_SUBGROUP)i=e.getInvocationSubgroupIndex();else{if(r!==IndexNode.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);i=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)n=i;else{n=varying(this).build(e,t)}return n}}IndexNode.VERTEX="vertex",IndexNode.INSTANCE="instance",IndexNode.SUBGROUP="subgroup",IndexNode.INVOCATION_LOCAL="invocationLocal",IndexNode.INVOCATION_SUBGROUP="invocationSubgroup",IndexNode.DRAW="draw";const vertexIndex=nodeImmutable(IndexNode,IndexNode.VERTEX),instanceIndex=nodeImmutable(IndexNode,IndexNode.INSTANCE),subgroupIndex=nodeImmutable(IndexNode,IndexNode.SUBGROUP),invocationSubgroupIndex=nodeImmutable(IndexNode,IndexNode.INVOCATION_SUBGROUP),invocationLocalIndex=nodeImmutable(IndexNode,IndexNode.INVOCATION_LOCAL),drawIndex=nodeImmutable(IndexNode,IndexNode.DRAW);class InstanceNode extends Node{static get type(){return"InstanceNode"}constructor(e,t,r=null){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=NodeUpdateType.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:i}=this;let{instanceMatrixNode:n,instanceColorNode:o}=this;if(null===n){if(t<=1e3)n=buffer(r.array,"mat4",Math.max(t,1)).element(instanceIndex);else{const e=new InstancedInterleavedBuffer(r.array,16,1);this.buffer=e;const t=r.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute,i=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];n=mat4(...i)}this.instanceMatrixNode=n}if(i&&null===o){const e=new InstancedBufferAttribute(i.array,3),t=i.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute;this.bufferColor=e,o=vec3(t(e,"vec3",3,0)),this.instanceColorNode=o}const s=n.mul(positionLocal).xyz;if(positionLocal.assign(s),e.hasGeometryAttribute("normal")){const e=transformNormal(normalLocal,n);normalLocal.assign(e)}null!==this.instanceColorNode&&varyingProperty("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==DynamicDrawUsage&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==DynamicDrawUsage&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const instance=nodeProxy(InstanceNode).setParameterLength(2,3);class InstancedMeshNode extends InstanceNode{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:i}=e;super(t,r,i),this.instancedMesh=e}}const instancedMesh=nodeProxy(InstancedMeshNode).setParameterLength(1);class BatchNode extends Node{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=instanceIndex:this.batchingIdNode=drawIndex);const t=Fn((([e])=>{const t=int(textureSize(textureLoad(this.batchMesh._indirectTexture),0).x),r=int(e).mod(t),i=int(e).div(t);return textureLoad(this.batchMesh._indirectTexture,ivec2(r,i)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(int(this.batchingIdNode)),i=this.batchMesh._matricesTexture,n=int(textureSize(textureLoad(i),0).x),o=float(r).mul(4).toInt().toVar(),s=o.mod(n),a=o.div(n),l=mat4(textureLoad(i,ivec2(s,a)),textureLoad(i,ivec2(s.add(1),a)),textureLoad(i,ivec2(s.add(2),a)),textureLoad(i,ivec2(s.add(3),a))),u=this.batchMesh._colorsTexture;if(null!==u){const e=Fn((([e])=>{const t=int(textureSize(textureLoad(u),0).x),r=e,i=r.mod(t),n=r.div(t);return textureLoad(u,ivec2(i,n)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);varyingProperty("vec3","vBatchColor").assign(t)}const d=mat3(l);positionLocal.assign(l.mul(positionLocal));const c=normalLocal.div(vec3(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;normalLocal.assign(h),e.hasGeometryAttribute("tangent")&&tangentLocal.mulAssign(d)}}const batch=nodeProxy(BatchNode).setParameterLength(1);class StorageArrayElementNode extends ArrayElementNode{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const r=this.storageBufferNode.structTypeNode;return r?r.getMemberType(e,t):"void"}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const i=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===i||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==i){const i=this.getNodeType(e);r=e.format(r,i,t)}return r}}const storageElement=nodeProxy(StorageArrayElementNode).setParameterLength(2);class StorageBufferNode extends BufferNode{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){let i,n=null;t&&t.isStruct?(i="struct",n=t.layout,(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(r=e.count)):null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(i=getTypeFromLength(e.itemSize),r=e.count):i=t,super(e,i,r),this.isStorageBufferNode=!0,this.structTypeNode=n,this.access=NodeAccess.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return storageElement(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(NodeAccess.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=bufferAttribute(this.value),this._varying=varying(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(null!==this.structTypeNode)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}getMemberType(e,t){return null!==this.structTypeNode?this.structTypeNode.getMemberType(e,t):"void"}generate(e){if(null!==this.structTypeNode&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),i=r.build(e);return e.registerTransform(i,t),i}}const storage=(e,t=null,r=0)=>nodeObject(new StorageBufferNode(e,t,r)),storageObject=(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),storage(e,t,r).setPBO(!0)),_frameId=new WeakMap;class SkinningNode extends Node{static get type(){return"SkinningNode"}constructor(e){super("void"),this.skinnedMesh=e,this.updateType=NodeUpdateType.OBJECT,this.skinIndexNode=attribute("skinIndex","uvec4"),this.skinWeightNode=attribute("skinWeight","vec4"),this.bindMatrixNode=reference("bindMatrix","mat4"),this.bindMatrixInverseNode=reference("bindMatrixInverse","mat4"),this.boneMatricesNode=referenceBuffer("skeleton.boneMatrices","mat4",e.skeleton.bones.length),this.positionNode=positionLocal,this.toPositionNode=positionLocal,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=this.positionNode){const{skinIndexNode:r,skinWeightNode:i,bindMatrixNode:n,bindMatrixInverseNode:o}=this,s=e.element(r.x),a=e.element(r.y),l=e.element(r.z),u=e.element(r.w),d=n.mul(t),c=add(s.mul(i.x).mul(d),a.mul(i.y).mul(d),l.mul(i.z).mul(d),u.mul(i.w).mul(d));return o.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=normalLocal){const{skinIndexNode:r,skinWeightNode:i,bindMatrixNode:n,bindMatrixInverseNode:o}=this,s=e.element(r.x),a=e.element(r.y),l=e.element(r.z),u=e.element(r.w);let d=add(i.x.mul(s),i.y.mul(a),i.z.mul(l),i.w.mul(u));return d=o.mul(d).mul(n),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=referenceBuffer("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,positionPrevious)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||!0===getDataFromObject(e.object).useVelocity}setup(e){this.needsPreviousBoneMatrices(e)&&positionPrevious.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(this.toPositionNode&&this.toPositionNode.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();normalLocal.assign(t),e.hasGeometryAttribute("tangent")&&tangentLocal.assign(t)}return t}generate(e,t){if("void"!==t)return super.generate(e,t)}update(e){const t=e.object&&e.object.skeleton?e.object.skeleton:this.skinnedMesh.skeleton;_frameId.get(t)!==e.frameId&&(_frameId.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const skinning=e=>nodeObject(new SkinningNode(e)),computeSkinning=(e,t=null)=>{const r=new SkinningNode(e);return r.positionNode=storage(new InstancedBufferAttribute(e.geometry.getAttribute("position").array,3),"vec3").setPBO(!0).toReadOnly().element(instanceIndex).toVar(),r.skinIndexNode=storage(new InstancedBufferAttribute(new Uint32Array(e.geometry.getAttribute("skinIndex").array),4),"uvec4").setPBO(!0).toReadOnly().element(instanceIndex).toVar(),r.skinWeightNode=storage(new InstancedBufferAttribute(e.geometry.getAttribute("skinWeight").array,4),"vec4").setPBO(!0).toReadOnly().element(instanceIndex).toVar(),r.bindMatrixNode=uniform(e.bindMatrix,"mat4"),r.bindMatrixInverseNode=uniform(e.bindMatrixInverse,"mat4"),r.boneMatricesNode=buffer(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length),r.toPositionNode=t,nodeObject(r)};class LoopNode extends Node{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],i=!0!==t.isNode&&t.name||this.getVarName(e),n=!0!==t.isNode&&t.type||"int";r[i]=expression(i,n)}const i=e.addStack();t.returnsNode=this.params[this.params.length-1](r,e),t.stackNode=i;const n=this.params[0];return!0!==n.isNode&&"function"==typeof n.update&&(t.updateNode=Fn(this.params[0].update)(r)),e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,i=t.stackNode;for(let i=0,n=r.length-1;i<n;i++){const n=r[i];let o,s=!1,a=null,l=null,u=null,d=null,c=null,h=null;if(n.isNode?"bool"===n.getNodeType(e)?(s=!0,d="bool",l=n.build(e,d)):(d="int",u=this.getVarName(i),a="0",l=n.build(e,d),c="<"):(d=n.type||"int",u=n.name||this.getVarName(i),a=n.start,l=n.end,c=n.condition,h=n.update,"number"==typeof a?a=e.generateConst(d,a):a&&a.isNode&&(a=a.build(e,d)),"number"==typeof l?l=e.generateConst(d,l):l&&l.isNode&&(l=l.build(e,d)),void 0!==a&&void 0===l?(a+=" - 1",l="0",c=">="):void 0!==l&&void 0===a&&(a="0",c="<"),void 0===c&&(c=Number(a)>Number(l)?">=":"<")),s)o=`while ( ${l} )`;else{const r={start:a,end:l},i=r.start,n=r.end;let s;const p=()=>c.includes("<")?"+=":"-=";if(null!=h)switch(typeof h){case"function":s=e.flowStagesNode(t.updateNode,"void").code.replace(/\t|;/g,"");break;case"number":s=u+" "+p()+" "+e.generateConst(d,h);break;case"string":s=u+" "+h;break;default:h.isNode?s=u+" "+p()+" "+h.build(e):(console.error("THREE.TSL: 'Loop( { update: ... } )' is not a function, string or number."),s="break /* invalid update */")}else h="int"===d||"uint"===d?c.includes("<")?"++":"--":p()+" 1.",s=u+" "+h;o=`for ( ${e.getVar(d,u)+" = "+i}; ${u+" "+c+" "+n}; ${s} )`}e.addFlowCode((0===i?"\n":"")+e.tab+o+" {\n\n").addFlowTab()}const n=i.build(e,"void"),o=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+n);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),o}}const Loop=(...e)=>nodeObject(new LoopNode(nodeArray(e,"int"))).toStack(),Continue=()=>expression("continue").toStack(),Break=()=>expression("break").toStack(),_morphTextures=new WeakMap,_morphVec4=new Vector4,getMorph=Fn((({bufferMap:e,influence:t,stride:r,width:i,depth:n,offset:o})=>{const s=int(vertexIndex).mul(r).add(o),a=s.div(i),l=s.sub(a.mul(i));return textureLoad(e,ivec2(l,a)).depth(n).xyz.mul(t)}));function getEntry(e){const t=void 0!==e.morphAttributes.position,r=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let s=_morphTextures.get(e);if(void 0===s||s.count!==o){void 0!==s&&s.texture.dispose();const n=e.morphAttributes.position||[],a=e.morphAttributes.normal||[],l=e.morphAttributes.color||[];let u=0;!0===t&&(u=1),!0===r&&(u=2),!0===i&&(u=3);let d=e.attributes.position.count*u,c=1;const h=4096;d>h&&(c=Math.ceil(d/h),d=h);const p=new Float32Array(d*c*4*o),m=new DataArrayTexture(p,d,c,o);m.type=FloatType,m.needsUpdate=!0;const g=4*u;for(let e=0;e<o;e++){const o=n[e],s=a[e],u=l[e],h=d*c*4*e;for(let e=0;e<o.count;e++){const n=e*g;!0===t&&(_morphVec4.fromBufferAttribute(o,e),p[h+n+0]=_morphVec4.x,p[h+n+1]=_morphVec4.y,p[h+n+2]=_morphVec4.z,p[h+n+3]=0),!0===r&&(_morphVec4.fromBufferAttribute(s,e),p[h+n+4]=_morphVec4.x,p[h+n+5]=_morphVec4.y,p[h+n+6]=_morphVec4.z,p[h+n+7]=0),!0===i&&(_morphVec4.fromBufferAttribute(u,e),p[h+n+8]=_morphVec4.x,p[h+n+9]=_morphVec4.y,p[h+n+10]=_morphVec4.z,p[h+n+11]=4===u.itemSize?_morphVec4.w:1)}}s={count:o,texture:m,stride:u,size:new Vector2(d,c)},_morphTextures.set(e,s),e.addEventListener("dispose",(function t(){m.dispose(),_morphTextures.delete(e),e.removeEventListener("dispose",t)}))}return s}class MorphNode extends Node{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=uniform(1),this.updateType=NodeUpdateType.OBJECT}setup(e){const{geometry:t}=e,r=void 0!==t.morphAttributes.position,i=t.hasAttribute("normal")&&void 0!==t.morphAttributes.normal,n=t.morphAttributes.position||t.morphAttributes.normal||t.morphAttributes.color,o=void 0!==n?n.length:0,{texture:s,stride:a,size:l}=getEntry(t);!0===r&&positionLocal.mulAssign(this.morphBaseInfluence),!0===i&&normalLocal.mulAssign(this.morphBaseInfluence);const u=int(l.width);Loop(o,(({i:e})=>{const t=float(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(textureLoad(this.mesh.morphTexture,ivec2(int(e).add(1),int(instanceIndex))).r):t.assign(reference("morphTargetInfluences","float").element(e).toVar()),If(t.notEqual(0),(()=>{!0===r&&positionLocal.addAssign(getMorph({bufferMap:s,influence:t,stride:a,width:u,depth:e,offset:int(0)})),!0===i&&normalLocal.addAssign(getMorph({bufferMap:s,influence:t,stride:a,width:u,depth:e,offset:int(1)}))}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const morphReference=nodeProxy(MorphNode).setParameterLength(1);class LightingNode extends Node{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class AONode extends LightingNode{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class LightingContextNode extends ContextNode{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,i=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=i,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:vec3().toVar("directDiffuse"),directSpecular:vec3().toVar("directSpecular"),indirectDiffuse:vec3().toVar("indirectDiffuse"),indirectSpecular:vec3().toVar("indirectSpecular")};return{radiance:vec3().toVar("radiance"),irradiance:vec3().toVar("irradiance"),iblIrradiance:vec3().toVar("iblIrradiance"),ambientOcclusion:float(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const lightingContext=nodeProxy(LightingContextNode);class IrradianceNode extends LightingNode{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let screenSizeVec,viewportVec;class ScreenNode extends Node{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===ScreenNode.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=NodeUpdateType.NONE;return this.scope!==ScreenNode.SIZE&&this.scope!==ScreenNode.VIEWPORT||(e=NodeUpdateType.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===ScreenNode.VIEWPORT?null!==t?viewportVec.copy(t.viewport):(e.getViewport(viewportVec),viewportVec.multiplyScalar(e.getPixelRatio())):null!==t?(screenSizeVec.width=t.width,screenSizeVec.height=t.height):e.getDrawingBufferSize(screenSizeVec)}setup(){const e=this.scope;let t=null;return t=e===ScreenNode.SIZE?uniform(screenSizeVec||(screenSizeVec=new Vector2)):e===ScreenNode.VIEWPORT?uniform(viewportVec||(viewportVec=new Vector4)):vec2(screenCoordinate.div(screenSize)),t}generate(e){if(this.scope===ScreenNode.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(screenSize).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}ScreenNode.COORDINATE="coordinate",ScreenNode.VIEWPORT="viewport",ScreenNode.SIZE="size",ScreenNode.UV="uv";const screenUV=nodeImmutable(ScreenNode,ScreenNode.UV),screenSize=nodeImmutable(ScreenNode,ScreenNode.SIZE),screenCoordinate=nodeImmutable(ScreenNode,ScreenNode.COORDINATE),viewport=nodeImmutable(ScreenNode,ScreenNode.VIEWPORT),viewportSize=viewport.zw,viewportCoordinate=screenCoordinate.sub(viewport.xy),viewportUV=viewportCoordinate.div(viewportSize),viewportResolution=Fn((()=>(console.warn('THREE.TSL: "viewportResolution" is deprecated. Use "screenSize" instead.'),screenSize)),"vec2").once()(),_size$4=new Vector2;class ViewportTextureNode extends TextureNode{static get type(){return"ViewportTextureNode"}constructor(e=screenUV,t=null,r=null){let i=null;null===r?(i=new FramebufferTexture,i.minFilter=LinearMipmapLinearFilter,r=i):i=r,super(r,e,t),this.generateMipmaps=!1,this.defaultFramebuffer=i,this.isOutputTextureNode=!0,this.updateBeforeType=NodeUpdateType.RENDER,this._textures=new WeakMap}getFrameBufferTexture(e=null){const t=this.referenceNode?this.referenceNode.defaultFramebuffer:this.defaultFramebuffer;if(null===e)return t;if(!1===this._textures.has(e)){const r=t.clone();this._textures.set(e,r)}return this._textures.get(e)}updateBefore(e){const t=e.renderer,r=t.getRenderTarget();null===r?t.getDrawingBufferSize(_size$4):_size$4.set(r.width,r.height);const i=this.getFrameBufferTexture(r);i.image.width===_size$4.width&&i.image.height===_size$4.height||(i.image.width=_size$4.width,i.image.height=_size$4.height,i.needsUpdate=!0);const n=i.generateMipmaps;i.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(i),i.generateMipmaps=n,this.value=i}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const viewportTexture=nodeProxy(ViewportTextureNode).setParameterLength(0,3),viewportMipTexture=nodeProxy(ViewportTextureNode,null,null,{generateMipmaps:!0}).setParameterLength(0,3);let sharedDepthbuffer=null;class ViewportDepthTextureNode extends ViewportTextureNode{static get type(){return"ViewportDepthTextureNode"}constructor(e=screenUV,t=null){null===sharedDepthbuffer&&(sharedDepthbuffer=new DepthTexture),super(e,t,sharedDepthbuffer)}}const viewportDepthTexture=nodeProxy(ViewportDepthTextureNode).setParameterLength(0,2);class ViewportDepthNode extends Node{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===ViewportDepthNode.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let i=null;if(t===ViewportDepthNode.DEPTH_BASE)null!==r&&(i=depthBase().assign(r));else if(t===ViewportDepthNode.DEPTH)i=e.isPerspectiveCamera?viewZToPerspectiveDepth(positionView.z,cameraNear,cameraFar):viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);else if(t===ViewportDepthNode.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=perspectiveDepthToViewZ(r,cameraNear,cameraFar);i=viewZToOrthographicDepth(e,cameraNear,cameraFar)}else i=r;else i=viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);return i}}ViewportDepthNode.DEPTH_BASE="depthBase",ViewportDepthNode.DEPTH="depth",ViewportDepthNode.LINEAR_DEPTH="linearDepth";const viewZToOrthographicDepth=(e,t,r)=>e.add(t).div(t.sub(r)),orthographicDepthToViewZ=(e,t,r)=>t.sub(r).mul(e).sub(t),viewZToPerspectiveDepth=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),perspectiveDepthToViewZ=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),viewZToLogarithmicDepth=(e,t,r)=>{t=t.max(1e-6).toVar();const i=log2(e.negate().div(t)),n=log2(r.div(t));return i.div(n)},logarithmicDepthToViewZ=(e,t,r)=>{const i=e.mul(log(r.div(t)));return float(Math.E).pow(i).mul(t).negate()},depthBase=nodeProxy(ViewportDepthNode,ViewportDepthNode.DEPTH_BASE),depth=nodeImmutable(ViewportDepthNode,ViewportDepthNode.DEPTH),linearDepth=nodeProxy(ViewportDepthNode,ViewportDepthNode.LINEAR_DEPTH).setParameterLength(0,1),viewportLinearDepth=linearDepth(viewportDepthTexture());depth.assign=e=>depthBase(e);class ClippingNode extends Node{static get type(){return"ClippingNode"}constructor(e=ClippingNode.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:i}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===ClippingNode.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,i):this.scope===ClippingNode.HARDWARE?this.setupHardwareClipping(i,e):this.setupDefault(r,i)}setupAlphaToCoverage(e,t){return Fn((()=>{const r=float().toVar("distanceToPlane"),i=float().toVar("distanceToGradient"),n=float(1).toVar("clipOpacity"),o=t.length;if(!1===this.hardwareClipping&&o>0){const e=uniformArray(t);Loop(o,(({i:t})=>{const o=e.element(t);r.assign(positionView.dot(o.xyz).negate().add(o.w)),i.assign(r.fwidth().div(2)),n.mulAssign(smoothstep(i.negate(),i,r))}))}const s=e.length;if(s>0){const t=uniformArray(e),o=float(1).toVar("intersectionClipOpacity");Loop(s,(({i:e})=>{const n=t.element(e);r.assign(positionView.dot(n.xyz).negate().add(n.w)),i.assign(r.fwidth().div(2)),o.mulAssign(smoothstep(i.negate(),i,r).oneMinus())})),n.mulAssign(o.oneMinus())}diffuseColor.a.mulAssign(n),diffuseColor.a.equal(0).discard()}))()}setupDefault(e,t){return Fn((()=>{const r=t.length;if(!1===this.hardwareClipping&&r>0){const e=uniformArray(t);Loop(r,(({i:t})=>{const r=e.element(t);positionView.dot(r.xyz).greaterThan(r.w).discard()}))}const i=e.length;if(i>0){const t=uniformArray(e),r=bool(!0).toVar("clipped");Loop(i,(({i:e})=>{const i=t.element(e);r.assign(positionView.dot(i.xyz).greaterThan(i.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),Fn((()=>{const i=uniformArray(e),n=builtin(t.getClipDistance());Loop(r,(({i:e})=>{const t=i.element(e),r=positionView.dot(t.xyz).sub(t.w).negate();n.element(e).assign(r)}))}))()}}ClippingNode.ALPHA_TO_COVERAGE="alphaToCoverage",ClippingNode.DEFAULT="default",ClippingNode.HARDWARE="hardware";const clipping=()=>nodeObject(new ClippingNode),clippingAlpha=()=>nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE)),hardwareClipping=()=>nodeObject(new ClippingNode(ClippingNode.HARDWARE)),ALPHA_HASH_SCALE=.05,hash2D=Fn((([e])=>fract(mul(1e4,sin(mul(17,e.x).add(mul(.1,e.y)))).mul(add(.1,abs(sin(mul(13,e.y).add(e.x)))))))),hash3D=Fn((([e])=>hash2D(vec2(hash2D(e.xy),e.z)))),getAlphaHashThreshold=Fn((([e])=>{const t=max$1(length(dFdx(e.xyz)),length(dFdy(e.xyz))),r=float(1).div(float(.05).mul(t)).toVar("pixScale"),i=vec2(exp2(floor(log2(r))),exp2(ceil(log2(r)))),n=vec2(hash3D(floor(i.x.mul(e.xyz))),hash3D(floor(i.y.mul(e.xyz)))),o=fract(log2(r)),s=add(mul(o.oneMinus(),n.x),mul(o,n.y)),a=min$1(o,o.oneMinus()),l=vec3(s.mul(s).div(mul(2,a).mul(sub(1,a))),s.sub(mul(.5,a)).div(sub(1,a)),sub(1,sub(1,s).mul(sub(1,s)).div(mul(2,a).mul(sub(1,a))))),u=s.lessThan(a.oneMinus()).select(s.lessThan(a).select(l.x,l.y),l.z);return clamp(u,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class VertexColorNode extends AttributeNode{static get type(){return"VertexColorNode"}constructor(e){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new Vector4(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}const vertexColor=(e=0)=>nodeObject(new VertexColorNode(e)),blendBurn=Fn((([e,t])=>min$1(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),blendDodge=Fn((([e,t])=>min$1(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),blendScreen=Fn((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),blendOverlay=Fn((([e,t])=>mix(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),step(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),blendColor=Fn((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return vec4(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),premultiplyAlpha=Fn((([e])=>vec4(e.rgb.mul(e.a),e.a)),{color:"vec4",return:"vec4"}),unpremultiplyAlpha=Fn((([e])=>(If(e.a.equal(0),(()=>vec4(0))),vec4(e.rgb.div(e.a),e.a))),{color:"vec4",return:"vec4"}),burn=(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),blendBurn(e)),dodge=(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),blendDodge(e)),screen=(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),blendScreen(e)),overlay=(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),blendOverlay(e));class NodeMaterial extends Material{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.maskNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.receivedShadowPositionNode=null,this.castShadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null,Object.defineProperty(this,"shadowPositionNode",{get:()=>this.receivedShadowPositionNode,set:e=>{console.warn('THREE.NodeMaterial: ".shadowPositionNode" was renamed to ".receivedShadowPositionNode".'),this.receivedShadowPositionNode=e}})}customProgramCacheKey(){return this.type+getCacheKey$1(this)}build(e){this.setup(e)}setupObserver(e){return new NodeMaterialObserver(e)}setup(e){e.context.setupNormal=()=>subBuild(this.setupNormal(e),"NORMAL","vec3"),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const i=subBuild(this.setupVertex(e),"VERTEX"),n=this.vertexNode||i;let o;e.stack.outputNode=n,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const s=this.setupClipping(e);if(!0!==this.depthWrite&&!0!==this.depthTest||(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const i=this.setupLighting(e);null!==s&&e.stack.add(s);const n=vec4(i,diffuseColor.a).max(0);o=this.setupOutput(e,n),output.assign(o);const a=null!==this.outputNode;if(a&&(o=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(a&&output.assign(o),o=e,null!==r&&(o=e.merge(r))):null!==r&&(o=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=vec4(t)),o=this.setupOutput(e,t)}e.stack.outputNode=o,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let i=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?i=clippingAlpha():e.stack.add(clipping())}return i}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(hardwareClipping()),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let i=this.depthNode;if(null===i){const e=t.getMRT();e&&e.has("depth")?i=e.get("depth"):!0===t.logarithmicDepthBuffer&&(i=r.isPerspectiveCamera?viewZToLogarithmicDepth(positionView.z,cameraNear,cameraFar):viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar))}null!==i&&depth.assign(i).toStack()}setupPositionView(){return modelViewMatrix.mul(positionLocal).xyz}setupModelViewProjection(){return cameraProjectionMatrix.mul(positionView)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),modelViewProjection}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&morphReference(t).toStack(),!0===t.isSkinnedMesh&&skinning(t).toStack(),this.displacementMap){const e=materialReference("displacementMap","texture"),t=materialReference("displacementScale","float"),r=materialReference("displacementBias","float");positionLocal.addAssign(normalLocal.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&batch(t).toStack(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&instancedMesh(t).toStack(),null!==this.positionNode&&positionLocal.assign(subBuild(this.positionNode,"POSITION","vec3")),positionLocal}setupDiffuseColor({object:e,geometry:t}){null!==this.maskNode&&bool(this.maskNode).not().discard();let r=this.colorNode?vec4(this.colorNode):materialColor;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=r.mul(vertexColor())),e.instanceColor){r=varyingProperty("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=varyingProperty("vec3","vBatchColor").mul(r)}diffuseColor.assign(r);const i=this.opacityNode?float(this.opacityNode):materialOpacity;diffuseColor.a.assign(diffuseColor.a.mul(i));let n=null;(null!==this.alphaTestNode||this.alphaTest>0)&&(n=null!==this.alphaTestNode?float(this.alphaTestNode):materialAlphaTest,diffuseColor.a.lessThanEqual(n).discard()),!0===this.alphaHash&&diffuseColor.a.lessThan(getAlphaHashThreshold(positionLocal)).discard();!1===this.transparent&&this.blending===NormalBlending&&!1===this.alphaToCoverage?diffuseColor.a.assign(1):null===n&&diffuseColor.a.lessThanEqual(0).discard()}setupVariants(){}setupOutgoingLight(){return!0===this.lights?vec3(0):diffuseColor.rgb}setupNormal(){return this.normalNode?vec3(this.normalNode):materialNormal}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?materialReference("envMap","cubeTexture"):materialReference("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new IrradianceNode(materialLightMap)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const i=this.setupLightMap(e);if(i&&i.isLightingNode&&t.push(i),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:materialAO;t.push(new AONode(e))}let n=this.lightsNode||e.lightsNode;return t.length>0&&(n=e.renderer.lighting.createNode([...n.getLights(),...t])),n}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:i,emissiveNode:n}=this,o=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let s=this.setupOutgoingLight(e);if(o&&o.getScope().hasLights){const t=this.setupLightingModel(e)||null;s=lightingContext(o,t,r,i)}else null!==r&&(s=vec3(null!==i?mix(s,r,i):r));return(n&&!0===n.isNode||t.emissive&&!0===t.emissive.isColor)&&(emissive.assign(vec3(n||materialEmissive)),s=s.add(emissive)),s}setupFog(e,t){const r=e.fogNode;return r&&(output.assign(t),t=vec4(r.toVar())),t}setupPremultipliedAlpha(e,t){return premultiplyAlpha(t)}setupOutput(e,t){return!0===this.fog&&(t=this.setupFog(e,t)),!0===this.premultipliedAlpha&&(t=this.setupPremultipliedAlpha(e,t)),t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=Material.prototype.toJSON.call(this,e),i=getNodeChildren(this);r.inputNodes={};for(const{property:t,childNode:n}of i)r.inputNodes[t]=n.toJSON(e).uuid;function n(e){const t=[];for(const r in e){const i=e[r];delete i.metadata,t.push(i)}return t}if(t){const t=n(e.textures),i=n(e.images),o=n(e.nodes);t.length>0&&(r.textures=t),i.length>0&&(r.images=i),o.length>0&&(r.nodes=o)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.maskNode=e.maskNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.receivedShadowPositionNode=e.receivedShadowPositionNode,this.castShadowPositionNode=e.castShadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const _defaultValues$d=new LineBasicMaterial;class LineBasicNodeMaterial extends NodeMaterial{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(_defaultValues$d),this.setValues(e)}}const _defaultValues$c=new LineDashedMaterial;class LineDashedNodeMaterial extends NodeMaterial{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(_defaultValues$c),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?float(this.offsetNode):materialLineDashOffset,t=this.dashScaleNode?float(this.dashScaleNode):materialLineScale,r=this.dashSizeNode?float(this.dashSizeNode):materialLineDashSize,i=this.gapSizeNode?float(this.gapSizeNode):materialLineGapSize;dashSize.assign(r),gapSize.assign(i);const n=varying(attribute("lineDistance").mul(t));(e?n.add(e):n).mod(dashSize.add(gapSize)).greaterThan(dashSize).discard()}}let _sharedFramebuffer=null;class ViewportSharedTextureNode extends ViewportTextureNode{static get type(){return"ViewportSharedTextureNode"}constructor(e=screenUV,t=null){null===_sharedFramebuffer&&(_sharedFramebuffer=new FramebufferTexture),super(e,t,_sharedFramebuffer)}updateReference(){return this}}const viewportSharedTexture=nodeProxy(ViewportSharedTextureNode).setParameterLength(0,2),_defaultValues$b=new LineDashedMaterial;class Line2NodeMaterial extends NodeMaterial{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(_defaultValues$b),this.useColor=e.vertexColors,this.dashOffset=0,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=NoBlending,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,r=this._useAlphaToCoverage,i=this.useColor,n=this._useDash,o=this._useWorldUnits,s=Fn((({start:e,end:t})=>{const r=cameraProjectionMatrix.element(2).element(2),i=cameraProjectionMatrix.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return vec4(mix(e.xyz,t.xyz,i),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=Fn((()=>{const e=attribute("instanceStart"),t=attribute("instanceEnd"),r=vec4(modelViewMatrix.mul(vec4(e,1))).toVar("start"),i=vec4(modelViewMatrix.mul(vec4(t,1))).toVar("end");if(n){const e=this.dashScaleNode?float(this.dashScaleNode):materialLineScale,t=this.offsetNode?float(this.offsetNode):materialLineDashOffset,r=attribute("instanceDistanceStart"),i=attribute("instanceDistanceEnd");let n=positionGeometry.y.lessThan(.5).select(e.mul(r),e.mul(i));n=n.add(t),varyingProperty("float","lineDistance").assign(n)}o&&(varyingProperty("vec3","worldStart").assign(r.xyz),varyingProperty("vec3","worldEnd").assign(i.xyz));const a=viewport.z.div(viewport.w),l=cameraProjectionMatrix.element(2).element(3).equal(-1);If(l,(()=>{If(r.z.lessThan(0).and(i.z.greaterThan(0)),(()=>{i.assign(s({start:r,end:i}))})).ElseIf(i.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(s({start:i,end:r}))}))}));const u=cameraProjectionMatrix.mul(r),d=cameraProjectionMatrix.mul(i),c=u.xyz.div(u.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const m=vec4().toVar();if(o){const e=i.xyz.sub(r.xyz).normalize(),t=mix(r.xyz,i.xyz,.5).normalize(),o=e.cross(t).normalize(),s=e.cross(o),a=varyingProperty("vec4","worldPos");a.assign(positionGeometry.y.lessThan(.5).select(r,i));const l=materialLineWidth.mul(.5);a.addAssign(vec4(positionGeometry.x.lessThan(0).select(o.mul(l),o.mul(l).negate()),0)),n||(a.addAssign(vec4(positionGeometry.y.lessThan(.5).select(e.mul(l).negate(),e.mul(l)),0)),a.addAssign(vec4(s.mul(l),0)),If(positionGeometry.y.greaterThan(1).or(positionGeometry.y.lessThan(0)),(()=>{a.subAssign(vec4(s.mul(2).mul(l),0))}))),m.assign(cameraProjectionMatrix.mul(a));const u=vec3().toVar();u.assign(positionGeometry.y.lessThan(.5).select(c,h)),m.z.assign(u.z.mul(m.w))}else{const e=vec2(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(positionGeometry.x.lessThan(0).select(e.negate(),e)),If(positionGeometry.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(positionGeometry.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(materialLineWidth)),e.assign(e.div(viewport.w)),m.assign(positionGeometry.y.lessThan(.5).select(u,d)),e.assign(e.mul(m.w)),m.assign(m.add(vec4(e,0,0)))}return m}))();const a=Fn((({p1:e,p2:t,p3:r,p4:i})=>{const n=e.sub(r),o=i.sub(r),s=t.sub(e),a=n.dot(o),l=o.dot(s),u=n.dot(s),d=o.dot(o),c=s.dot(s).mul(d).sub(l.mul(l)),h=a.mul(l).sub(u.mul(d)).div(c).clamp(),p=a.add(l.mul(h)).div(d).clamp();return vec2(h,p)}));if(this.colorNode=Fn((()=>{const e=uv$1();if(n){const t=this.dashSizeNode?float(this.dashSizeNode):materialLineDashSize,r=this.gapSizeNode?float(this.gapSizeNode):materialLineGapSize;dashSize.assign(t),gapSize.assign(r);const i=varyingProperty("float","lineDistance");e.y.lessThan(-1).or(e.y.greaterThan(1)).discard(),i.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard()}const s=float(1).toVar("alpha");if(o){const e=varyingProperty("vec3","worldStart"),i=varyingProperty("vec3","worldEnd"),o=varyingProperty("vec4","worldPos").xyz.normalize().mul(1e5),l=i.sub(e),u=a({p1:e,p2:i,p3:vec3(0,0,0),p4:o}),d=e.add(l.mul(u.x)),c=o.mul(u.y),h=d.sub(c).length().div(materialLineWidth);if(!n)if(r&&t.samples>1){const e=h.fwidth();s.assign(smoothstep(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(r&&t.samples>1){const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1)),i=t.mul(t).add(r.mul(r)),n=float(i.fwidth()).toVar("dlen");If(e.y.abs().greaterThan(1),(()=>{s.assign(smoothstep(n.oneMinus(),n.add(1),i).oneMinus())}))}else If(e.y.abs().greaterThan(1),(()=>{const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1));t.mul(t).add(r.mul(r)).greaterThan(1).discard()}));let l;if(this.lineColorNode)l=this.lineColorNode;else if(i){const e=attribute("instanceColorStart"),t=attribute("instanceColorEnd");l=positionGeometry.y.lessThan(.5).select(e,t).mul(materialColor)}else l=materialColor;return vec4(l,s)}))(),this.transparent){const e=this.opacityNode?float(this.opacityNode):materialOpacity;this.outputNode=vec4(this.colorNode.rgb.mul(e).add(viewportSharedTexture().rgb.mul(e.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const directionToColor=e=>nodeObject(e).mul(.5).add(.5),colorToDirection=e=>nodeObject(e).mul(2).sub(1),_defaultValues$a=new MeshNormalMaterial;class MeshNormalNodeMaterial extends NodeMaterial{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(_defaultValues$a),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?float(this.opacityNode):materialOpacity;diffuseColor.assign(colorSpaceToWorking(vec4(directionToColor(normalView),e),SRGBColorSpace))}}const equirectUV=Fn((([e=positionWorldDirection])=>{const t=e.z.atan(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return vec2(t,r)}));class CubeRenderTarget extends WebGLCubeRenderTarget{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,i=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n=new BoxGeometry(5,5,5),o=equirectUV(positionWorldDirection),s=new NodeMaterial;s.colorNode=texture(t,o,0),s.side=BackSide,s.blending=NoBlending;const a=new Mesh(n,s),l=new Scene;l.add(a),t.minFilter===LinearMipmapLinearFilter&&(t.minFilter=LinearFilter);const u=new CubeCamera(1,10,this),d=e.getMRT();return e.setMRT(null),u.update(e,l),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=i,a.geometry.dispose(),a.material.dispose(),this}}const _cache$1=new WeakMap;class CubeMapNode extends TempNode{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=cubeTexture(null);const t=new CubeTexture;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=NodeUpdateType.RENDER}updateBefore(e){const{renderer:t,material:r}=e,i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const e=i.isTextureNode?i.value:r[i.property];if(e&&e.isTexture){const r=e.mapping;if(r===EquirectangularReflectionMapping||r===EquirectangularRefractionMapping){if(_cache$1.has(e)){const t=_cache$1.get(e);mapTextureMapping(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(isEquirectangularMapReady$1(r)){const i=new CubeRenderTarget(r.height);i.fromEquirectangularTexture(t,e),mapTextureMapping(i.texture,e.mapping),this._cubeTexture=i.texture,_cache$1.set(e,i.texture),e.addEventListener("dispose",onTextureDispose)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function isEquirectangularMapReady$1(e){return null!=e&&e.height>0}function onTextureDispose(e){const t=e.target;t.removeEventListener("dispose",onTextureDispose);const r=_cache$1.get(t);void 0!==r&&(_cache$1.delete(t),r.dispose())}function mapTextureMapping(e,t){t===EquirectangularReflectionMapping?e.mapping=CubeReflectionMapping:t===EquirectangularRefractionMapping&&(e.mapping=CubeRefractionMapping)}const cubeMapNode=nodeProxy(CubeMapNode).setParameterLength(1);class BasicEnvironmentNode extends LightingNode{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=cubeMapNode(this.envNode)}}class BasicLightMapNode extends LightingNode{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=float(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class LightingModel{start(e){e.lightsNode.setupLights(e,e.lightsNode.getLightNodes(e)),this.indirect(e)}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class BasicLightingModel extends LightingModel{constructor(){super()}indirect({context:e}){const t=e.ambientOcclusion,r=e.reflectedLight,i=e.irradianceLightMap;r.indirectDiffuse.assign(vec4(0)),i?r.indirectDiffuse.addAssign(i):r.indirectDiffuse.addAssign(vec4(1,1,1,0)),r.indirectDiffuse.mulAssign(t),r.indirectDiffuse.mulAssign(diffuseColor.rgb)}finish(e){const{material:t,context:r}=e,i=r.outgoingLight,n=e.context.environment;if(n)switch(t.combine){case MultiplyOperation:i.rgb.assign(mix(i.rgb,i.rgb.mul(n.rgb),materialSpecularStrength.mul(materialReflectivity)));break;case MixOperation:i.rgb.assign(mix(i.rgb,n.rgb,materialSpecularStrength.mul(materialReflectivity)));break;case AddOperation:i.rgb.addAssign(n.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",t.combine)}}}const _defaultValues$9=new MeshBasicMaterial;class MeshBasicNodeMaterial extends NodeMaterial{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(_defaultValues$9),this.setValues(e)}setupNormal(){return directionToFaceDirection(normalViewGeometry)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new BasicEnvironmentNode(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new BasicLightMapNode(materialLightMap)),t}setupOutgoingLight(){return diffuseColor.rgb}setupLightingModel(){return new BasicLightingModel}}const F_Schlick=Fn((({f0:e,f90:t,dotVH:r})=>{const i=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(i.oneMinus()).add(t.mul(i))})),BRDF_Lambert=Fn((e=>e.diffuseColor.mul(1/Math.PI))),G_BlinnPhong_Implicit=()=>float(.25),D_BlinnPhong=Fn((({dotNH:e})=>shininess.mul(float(.5)).add(1).mul(float(1/Math.PI)).mul(e.pow(shininess)))),BRDF_BlinnPhong=Fn((({lightDirection:e})=>{const t=e.add(positionViewDirection).normalize(),r=normalView.dot(t).clamp(),i=positionViewDirection.dot(t).clamp(),n=F_Schlick({f0:specularColor,f90:1,dotVH:i}),o=G_BlinnPhong_Implicit(),s=D_BlinnPhong({dotNH:r});return n.mul(o).mul(s)}));class PhongLightingModel extends BasicLightingModel{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const i=normalView.dot(e).clamp().mul(t);r.directDiffuse.addAssign(i.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb}))),!0===this.specular&&r.directSpecular.addAssign(i.mul(BRDF_BlinnPhong({lightDirection:e})).mul(materialSpecularStrength))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:i}=e.context;i.indirectDiffuse.addAssign(r.mul(BRDF_Lambert({diffuseColor:diffuseColor}))),i.indirectDiffuse.mulAssign(t)}}const _defaultValues$8=new MeshLambertMaterial;class MeshLambertNodeMaterial extends NodeMaterial{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(_defaultValues$8),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new BasicEnvironmentNode(t):null}setupLightingModel(){return new PhongLightingModel(!1)}}const _defaultValues$7=new MeshPhongMaterial;class MeshPhongNodeMaterial extends NodeMaterial{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(_defaultValues$7),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new BasicEnvironmentNode(t):null}setupLightingModel(){return new PhongLightingModel}setupVariants(){const e=(this.shininessNode?float(this.shininessNode):materialShininess).max(1e-4);shininess.assign(e);const t=this.specularNode||materialSpecular;specularColor.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const getGeometryRoughness=Fn((e=>{if(!1===e.geometry.hasAttribute("normal"))return float(0);const t=normalViewGeometry.dFdx().abs().max(normalViewGeometry.dFdy().abs());return t.x.max(t.y).max(t.z)})),getRoughness=Fn((e=>{const{roughness:t}=e,r=getGeometryRoughness();let i=t.max(.0525);return i=i.add(r),i=i.min(1),i})),V_GGX_SmithCorrelated=Fn((({alpha:e,dotNL:t,dotNV:r})=>{const i=e.pow2(),n=t.mul(i.add(i.oneMinus().mul(r.pow2())).sqrt()),o=r.mul(i.add(i.oneMinus().mul(t.pow2())).sqrt());return div(.5,n.add(o).max(EPSILON))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),V_GGX_SmithCorrelated_Anisotropic=Fn((({alphaT:e,alphaB:t,dotTV:r,dotBV:i,dotTL:n,dotBL:o,dotNV:s,dotNL:a})=>{const l=a.mul(vec3(e.mul(r),t.mul(i),s).length()),u=s.mul(vec3(e.mul(n),t.mul(o),a).length());return div(.5,l.add(u)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),D_GGX=Fn((({alpha:e,dotNH:t})=>{const r=e.pow2(),i=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(i.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),RECIPROCAL_PI=float(1/Math.PI),D_GGX_Anisotropic=Fn((({alphaT:e,alphaB:t,dotNH:r,dotTH:i,dotBH:n})=>{const o=e.mul(t),s=vec3(t.mul(i),e.mul(n),o.mul(r)),a=s.dot(s),l=o.div(a);return RECIPROCAL_PI.mul(o.mul(l.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),BRDF_GGX=Fn((({lightDirection:e,f0:t,f90:r,roughness:i,f:n,normalView:o=normalView,USE_IRIDESCENCE:s,USE_ANISOTROPY:a})=>{const l=i.pow2(),u=e.add(positionViewDirection).normalize(),d=o.dot(e).clamp(),c=o.dot(positionViewDirection).clamp(),h=o.dot(u).clamp(),p=positionViewDirection.dot(u).clamp();let m,g,f=F_Schlick({f0:t,f90:r,dotVH:p});if(defined(s)&&(f=iridescence.mix(f,n)),defined(a)){const t=anisotropyT.dot(e),r=anisotropyT.dot(positionViewDirection),i=anisotropyT.dot(u),n=anisotropyB.dot(e),o=anisotropyB.dot(positionViewDirection),s=anisotropyB.dot(u);m=V_GGX_SmithCorrelated_Anisotropic({alphaT:alphaT,alphaB:l,dotTV:r,dotBV:o,dotTL:t,dotBL:n,dotNV:c,dotNL:d}),g=D_GGX_Anisotropic({alphaT:alphaT,alphaB:l,dotNH:h,dotTH:i,dotBH:s})}else m=V_GGX_SmithCorrelated({alpha:l,dotNL:d,dotNV:c}),g=D_GGX({alpha:l,dotNH:h});return f.mul(m).mul(g)})),DFGApprox=Fn((({roughness:e,dotNV:t})=>{const r=vec4(-1,-.0275,-.572,.022),i=vec4(1,.0425,1.04,-.04),n=e.mul(r).add(i),o=n.x.mul(n.x).min(t.mul(-9.28).exp2()).mul(n.x).add(n.y);return vec2(-1.04,1.04).mul(o).add(n.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),EnvironmentBRDF=Fn((e=>{const{dotNV:t,specularColor:r,specularF90:i,roughness:n}=e,o=DFGApprox({dotNV:t,roughness:n});return r.mul(o.x).add(i.mul(o.y))})),Schlick_to_F0=Fn((({f:e,f90:t,dotVH:r})=>{const i=r.oneMinus().saturate(),n=i.mul(i),o=i.mul(n,n).clamp(0,.9999);return e.sub(vec3(t).mul(o)).div(o.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),D_Charlie=Fn((({roughness:e,dotNH:t})=>{const r=e.pow2(),i=float(1).div(r),n=t.pow2().oneMinus().max(.0078125);return float(2).add(i).mul(n.pow(i.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),V_Neubelt=Fn((({dotNV:e,dotNL:t})=>float(1).div(float(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),BRDF_Sheen=Fn((({lightDirection:e})=>{const t=e.add(positionViewDirection).normalize(),r=normalView.dot(e).clamp(),i=normalView.dot(positionViewDirection).clamp(),n=normalView.dot(t).clamp(),o=D_Charlie({roughness:sheenRoughness,dotNH:n}),s=V_Neubelt({dotNV:i,dotNL:r});return sheen.mul(o).mul(s)})),LTC_Uv=Fn((({N:e,V:t,roughness:r})=>{const i=e.dot(t).saturate(),n=vec2(r,i.oneMinus().sqrt());return n.assign(n.mul(.984375).add(.0078125)),n})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),LTC_ClippedSphereFormFactor=Fn((({f:e})=>{const t=e.length();return max$1(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),LTC_EdgeVectorFormFactor=Fn((({v1:e,v2:t})=>{const r=e.dot(t),i=r.abs().toVar(),n=i.mul(.0145206).add(.4965155).mul(i).add(.8543985).toVar(),o=i.add(4.1616724).mul(i).add(3.417594).toVar(),s=n.div(o),a=r.greaterThan(0).select(s,max$1(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(s));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),LTC_Evaluate=Fn((({N:e,V:t,P:r,mInv:i,p0:n,p1:o,p2:s,p3:a})=>{const l=o.sub(n).toVar(),u=a.sub(n).toVar(),d=l.cross(u),c=vec3().toVar();return If(d.dot(r.sub(n)).greaterThanEqual(0),(()=>{const l=t.sub(e.mul(t.dot(e))).normalize(),u=e.cross(l).negate(),d=i.mul(mat3(l,u,e).transpose()).toVar(),h=d.mul(n.sub(r)).normalize().toVar(),p=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(s.sub(r)).normalize().toVar(),g=d.mul(a.sub(r)).normalize().toVar(),f=vec3(0).toVar();f.addAssign(LTC_EdgeVectorFormFactor({v1:h,v2:p})),f.addAssign(LTC_EdgeVectorFormFactor({v1:p,v2:m})),f.addAssign(LTC_EdgeVectorFormFactor({v1:m,v2:g})),f.addAssign(LTC_EdgeVectorFormFactor({v1:g,v2:h})),c.assign(vec3(LTC_ClippedSphereFormFactor({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),LTC_Evaluate_Volume=Fn((({P:e,p0:t,p1:r,p2:i,p3:n})=>{const o=r.sub(t).toVar(),s=n.sub(t).toVar(),a=o.cross(s),l=vec3().toVar();return If(a.dot(e.sub(t)).greaterThanEqual(0),(()=>{const o=t.sub(e).normalize().toVar(),s=r.sub(e).normalize().toVar(),a=i.sub(e).normalize().toVar(),u=n.sub(e).normalize().toVar(),d=vec3(0).toVar();d.addAssign(LTC_EdgeVectorFormFactor({v1:o,v2:s})),d.addAssign(LTC_EdgeVectorFormFactor({v1:s,v2:a})),d.addAssign(LTC_EdgeVectorFormFactor({v1:a,v2:u})),d.addAssign(LTC_EdgeVectorFormFactor({v1:u,v2:o})),l.assign(vec3(LTC_ClippedSphereFormFactor({f:d.abs()})))})),l})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),bC=1/6,w0=e=>mul(bC,mul(e,mul(e,e.negate().add(3)).sub(3)).add(1)),w1=e=>mul(bC,mul(e,mul(e,mul(3,e).sub(6))).add(4)),w2=e=>mul(bC,mul(e,mul(e,mul(-3,e).add(3)).add(3)).add(1)),w3=e=>mul(bC,pow(e,3)),g0=e=>w0(e).add(w1(e)),g1=e=>w2(e).add(w3(e)),h0=e=>add(-1,w1(e).div(w0(e).add(w1(e)))),h1=e=>add(1,w3(e).div(w2(e).add(w3(e)))),bicubic=(e,t,r)=>{const i=e.uvNode,n=mul(i,t.zw).add(.5),o=floor(n),s=fract(n),a=g0(s.x),l=g1(s.x),u=h0(s.x),d=h1(s.x),c=h0(s.y),h=h1(s.y),p=vec2(o.x.add(u),o.y.add(c)).sub(.5).mul(t.xy),m=vec2(o.x.add(d),o.y.add(c)).sub(.5).mul(t.xy),g=vec2(o.x.add(u),o.y.add(h)).sub(.5).mul(t.xy),f=vec2(o.x.add(d),o.y.add(h)).sub(.5).mul(t.xy),x=g0(s.y).mul(add(a.mul(e.sample(p).level(r)),l.mul(e.sample(m).level(r)))),_=g1(s.y).mul(add(a.mul(e.sample(g).level(r)),l.mul(e.sample(f).level(r))));return x.add(_)},textureBicubicLevel=Fn((([e,t])=>{const r=vec2(e.size(int(t))),i=vec2(e.size(int(t.add(1)))),n=div(1,r),o=div(1,i),s=bicubic(e,vec4(n,r),floor(t)),a=bicubic(e,vec4(o,i),ceil(t));return fract(t).mix(s,a)})),textureBicubic=Fn((([e,t])=>{const r=t.mul(maxMipLevel(e));return textureBicubicLevel(e,r)})),getVolumeTransmissionRay=Fn((([e,t,r,i,n])=>{const o=vec3(refract(t.negate(),normalize(e),div(1,i))),s=vec3(length(n[0].xyz),length(n[1].xyz),length(n[2].xyz));return normalize(o).mul(r.mul(s))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),applyIorToRoughness=Fn((([e,t])=>e.mul(clamp(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),viewportBackSideTexture=viewportMipTexture(),viewportFrontSideTexture=viewportMipTexture(),getTransmissionSample=Fn((([e,t,r],{material:i})=>{const n=(i.side===BackSide?viewportBackSideTexture:viewportFrontSideTexture).sample(e),o=log2(screenSize.x).mul(applyIorToRoughness(t,r));return textureBicubicLevel(n,o)})),volumeAttenuation=Fn((([e,t,r])=>(If(r.notEqual(0),(()=>{const i=log(t).negate().div(r);return exp(i.negate().mul(e))})),vec3(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),getIBLVolumeRefraction=Fn((([e,t,r,i,n,o,s,a,l,u,d,c,h,p,m])=>{let g,f;if(m){g=vec4().toVar(),f=vec3().toVar();const n=d.sub(1).mul(m.mul(.025)),o=vec3(d.sub(n),d,d.add(n));Loop({start:0,end:3},(({i:n})=>{const d=o.element(n),m=getVolumeTransmissionRay(e,t,c,d,a),x=s.add(m),_=u.mul(l.mul(vec4(x,1))),y=vec2(_.xy.div(_.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(vec2(y.x,y.y.oneMinus()));const T=getTransmissionSample(y,r,d);g.element(n).assign(T.element(n)),g.a.addAssign(T.a),f.element(n).assign(i.element(n).mul(volumeAttenuation(length(m),h,p).element(n)))})),g.a.divAssign(3)}else{const n=getVolumeTransmissionRay(e,t,c,d,a),o=s.add(n),m=u.mul(l.mul(vec4(o,1))),x=vec2(m.xy.div(m.w)).toVar();x.addAssign(1),x.divAssign(2),x.assign(vec2(x.x,x.y.oneMinus())),g=getTransmissionSample(x,r,d),f=i.mul(volumeAttenuation(length(n),h,p))}const x=f.rgb.mul(g.rgb),_=e.dot(t).clamp(),y=vec3(EnvironmentBRDF({dotNV:_,specularColor:n,specularF90:o,roughness:r})),T=f.r.add(f.g,f.b).div(3);return vec4(y.oneMinus().mul(x),g.a.oneMinus().mul(T).oneMinus())})),XYZ_TO_REC709=mat3(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),Fresnel0ToIor=e=>{const t=e.sqrt();return vec3(1).add(t).div(vec3(1).sub(t))},IorToFresnel0=(e,t)=>e.sub(t).div(e.add(t)).pow2(),evalSensitivity=(e,t)=>{const r=e.mul(2*Math.PI*1e-9),i=vec3(54856e-17,44201e-17,52481e-17),n=vec3(1681e3,1795300,2208400),o=vec3(43278e5,93046e5,66121e5),s=float(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=i.mul(o.mul(2*Math.PI).sqrt()).mul(n.mul(r).add(t).cos()).mul(r.pow2().negate().mul(o).exp());a=vec3(a.x.add(s),a.y,a.z).div(1.0685e-7);return XYZ_TO_REC709.mul(a)},evalIridescence=Fn((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:i,baseF0:n})=>{const o=mix(e,t,smoothstep(0,.03,i)),s=e.div(o).pow2().mul(r.pow2().oneMinus()).oneMinus();If(s.lessThan(0),(()=>vec3(1)));const a=s.sqrt(),l=IorToFresnel0(o,e),u=F_Schlick({f0:l,f90:1,dotVH:r}),d=u.oneMinus(),c=o.lessThan(e).select(Math.PI,0),h=float(Math.PI).sub(c),p=Fresnel0ToIor(n.clamp(0,.9999)),m=IorToFresnel0(p,o.toVec3()),g=F_Schlick({f0:m,f90:1,dotVH:a}),f=vec3(p.x.lessThan(o).select(Math.PI,0),p.y.lessThan(o).select(Math.PI,0),p.z.lessThan(o).select(Math.PI,0)),x=o.mul(i,a,2),_=vec3(h).add(f),y=u.mul(g).clamp(1e-5,.9999),T=y.sqrt(),b=d.pow2().mul(g).div(vec3(1).sub(y)),N=u.add(b).toVar(),v=b.sub(d).toVar();return Loop({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{v.mulAssign(T);const t=evalSensitivity(float(e).mul(x),float(e).mul(_)).mul(2);N.addAssign(v.mul(t))})),N.max(vec3(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),IBLSheenBRDF=Fn((({normal:e,viewDir:t,roughness:r})=>{const i=e.dot(t).saturate(),n=r.pow2(),o=select(r.lessThan(.25),float(-339.2).mul(n).add(float(161.4).mul(r)).sub(25.9),float(-8.48).mul(n).add(float(14.3).mul(r)).sub(9.95)),s=select(r.lessThan(.25),float(44).mul(n).sub(float(23.7).mul(r)).add(3.26),float(1.97).mul(n).sub(float(3.27).mul(r)).add(.72));return select(r.lessThan(.25),0,float(.1).mul(r).sub(.025)).add(o.mul(i).add(s).exp()).mul(1/Math.PI).saturate()})),clearcoatF0=vec3(.04),clearcoatF90=float(1);class PhysicalLightingModel extends LightingModel{constructor(e=!1,t=!1,r=!1,i=!1,n=!1,o=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=i,this.transmission=n,this.dispersion=o,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=vec3().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=vec3().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=vec3().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=vec3().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=vec3().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=normalView.dot(positionViewDirection).clamp();this.iridescenceFresnel=evalIridescence({outsideIOR:float(1),eta2:iridescenceIOR,cosTheta1:e,thinFilmThickness:iridescenceThickness,baseF0:specularColor}),this.iridescenceF0=Schlick_to_F0({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=positionWorld,r=cameraPosition.sub(positionWorld).normalize(),i=normalWorld,n=e.context;n.backdrop=getIBLVolumeRefraction(i,r,roughness,diffuseColor,specularColor,specularF90,t,modelWorldMatrix,cameraViewMatrix,cameraProjectionMatrix,ior,thickness,attenuationColor,attenuationDistance,this.dispersion?dispersion:null),n.backdropAlpha=transmission,diffuseColor.a.mulAssign(mix(1,n.backdrop.a,transmission))}super.start(e)}computeMultiscattering(e,t,r){const i=normalView.dot(positionViewDirection).clamp(),n=DFGApprox({roughness:roughness,dotNV:i}),o=(this.iridescenceF0?iridescence.mix(specularColor,this.iridescenceF0):specularColor).mul(n.x).add(r.mul(n.y)),s=n.x.add(n.y).oneMinus(),a=specularColor.add(specularColor.oneMinus().mul(.047619)),l=o.mul(a).div(s.mul(a).oneMinus());e.addAssign(o),t.addAssign(l.mul(s))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const i=normalView.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(i.mul(BRDF_Sheen({lightDirection:e}))),!0===this.clearcoat){const r=clearcoatNormalView.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(BRDF_GGX({lightDirection:e,f0:clearcoatF0,f90:clearcoatF90,roughness:clearcoatRoughness,normalView:clearcoatNormalView})))}r.directDiffuse.addAssign(i.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb}))),r.directSpecular.addAssign(i.mul(BRDF_GGX({lightDirection:e,f0:specularColor,f90:1,roughness:roughness,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:i,reflectedLight:n,ltc_1:o,ltc_2:s}){const a=t.add(r).sub(i),l=t.sub(r).sub(i),u=t.sub(r).add(i),d=t.add(r).add(i),c=normalView,h=positionViewDirection,p=positionView.toVar(),m=LTC_Uv({N:c,V:h,roughness:roughness}),g=o.sample(m).toVar(),f=s.sample(m).toVar(),x=mat3(vec3(g.x,0,g.y),vec3(0,1,0),vec3(g.z,0,g.w)).toVar(),_=specularColor.mul(f.x).add(specularColor.oneMinus().mul(f.y)).toVar();n.directSpecular.addAssign(e.mul(_).mul(LTC_Evaluate({N:c,V:h,P:p,mInv:x,p0:a,p1:l,p2:u,p3:d}))),n.directDiffuse.addAssign(e.mul(diffuseColor).mul(LTC_Evaluate({N:c,V:h,P:p,mInv:mat3(1,0,0,0,1,0,0,0,1),p0:a,p1:l,p2:u,p3:d})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:r}=e.context;r.indirectDiffuse.addAssign(t.mul(BRDF_Lambert({diffuseColor:diffuseColor})))}indirectSpecular(e){const{radiance:t,iblIrradiance:r,reflectedLight:i}=e.context;if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(r.mul(sheen,IBLSheenBRDF({normal:normalView,viewDir:positionViewDirection,roughness:sheenRoughness}))),!0===this.clearcoat){const e=clearcoatNormalView.dot(positionViewDirection).clamp(),t=EnvironmentBRDF({dotNV:e,specularColor:clearcoatF0,specularF90:clearcoatF90,roughness:clearcoatRoughness});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const n=vec3().toVar("singleScattering"),o=vec3().toVar("multiScattering"),s=r.mul(1/Math.PI);this.computeMultiscattering(n,o,specularF90);const a=n.add(o),l=diffuseColor.mul(a.r.max(a.g).max(a.b).oneMinus());i.indirectSpecular.addAssign(t.mul(n)),i.indirectSpecular.addAssign(o.mul(s)),i.indirectDiffuse.addAssign(l.mul(s))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:r}=e.context,i=normalView.dot(positionViewDirection).clamp().add(t),n=roughness.mul(-16).oneMinus().negate().exp2(),o=t.sub(i.pow(n).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(t),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(t),r.indirectDiffuse.mulAssign(t),r.indirectSpecular.mulAssign(o)}finish({context:e}){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=clearcoatNormalView.dot(positionViewDirection).clamp(),r=F_Schlick({dotVH:e,f0:clearcoatF0,f90:clearcoatF90}),i=t.mul(clearcoat.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));t.assign(i)}if(!0===this.sheen){const e=sheen.r.max(sheen.g).max(sheen.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const cubeUV_r0=float(1),cubeUV_m0=float(-2),cubeUV_r1=float(.8),cubeUV_m1=float(-1),cubeUV_r4=float(.4),cubeUV_m4=float(2),cubeUV_r5=float(.305),cubeUV_m5=float(3),cubeUV_r6=float(.21),cubeUV_m6=float(4),cubeUV_minMipLevel=float(4),cubeUV_minTileSize=float(16),getFace=Fn((([e])=>{const t=vec3(abs(e)).toVar(),r=float(-1).toVar();return If(t.x.greaterThan(t.z),(()=>{If(t.x.greaterThan(t.y),(()=>{r.assign(select(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(select(e.y.greaterThan(0),1,4))}))})).Else((()=>{If(t.z.greaterThan(t.y),(()=>{r.assign(select(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(select(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),getUV=Fn((([e,t])=>{const r=vec2().toVar();return If(t.equal(0),(()=>{r.assign(vec2(e.z,e.y).div(abs(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(vec2(e.x.negate(),e.z.negate()).div(abs(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(vec2(e.x.negate(),e.y).div(abs(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(vec2(e.z.negate(),e.y).div(abs(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(vec2(e.x.negate(),e.z).div(abs(e.y)))})).Else((()=>{r.assign(vec2(e.x,e.y).div(abs(e.z)))})),mul(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),roughnessToMip=Fn((([e])=>{const t=float(0).toVar();return If(e.greaterThanEqual(cubeUV_r1),(()=>{t.assign(cubeUV_r0.sub(e).mul(cubeUV_m1.sub(cubeUV_m0)).div(cubeUV_r0.sub(cubeUV_r1)).add(cubeUV_m0))})).ElseIf(e.greaterThanEqual(cubeUV_r4),(()=>{t.assign(cubeUV_r1.sub(e).mul(cubeUV_m4.sub(cubeUV_m1)).div(cubeUV_r1.sub(cubeUV_r4)).add(cubeUV_m1))})).ElseIf(e.greaterThanEqual(cubeUV_r5),(()=>{t.assign(cubeUV_r4.sub(e).mul(cubeUV_m5.sub(cubeUV_m4)).div(cubeUV_r4.sub(cubeUV_r5)).add(cubeUV_m4))})).ElseIf(e.greaterThanEqual(cubeUV_r6),(()=>{t.assign(cubeUV_r5.sub(e).mul(cubeUV_m6.sub(cubeUV_m5)).div(cubeUV_r5.sub(cubeUV_r6)).add(cubeUV_m5))})).Else((()=>{t.assign(float(-2).mul(log2(mul(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),getDirection=Fn((([e,t])=>{const r=e.toVar();r.assign(mul(2,r).sub(1));const i=vec3(r,1).toVar();return If(t.equal(0),(()=>{i.assign(i.zyx)})).ElseIf(t.equal(1),(()=>{i.assign(i.xzy),i.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{i.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{i.assign(i.zyx),i.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{i.assign(i.xzy),i.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{i.z.mulAssign(-1)})),i})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),textureCubeUV=Fn((([e,t,r,i,n,o])=>{const s=float(r),a=vec3(t),l=clamp(roughnessToMip(s),cubeUV_m0,o),u=fract(l),d=floor(l),c=vec3(bilinearCubeUV(e,a,d,i,n,o)).toVar();return If(u.notEqual(0),(()=>{const t=vec3(bilinearCubeUV(e,a,d.add(1),i,n,o)).toVar();c.assign(mix(c,t,u))})),c})),bilinearCubeUV=Fn((([e,t,r,i,n,o])=>{const s=float(r).toVar(),a=vec3(t),l=float(getFace(a)).toVar(),u=float(max$1(cubeUV_minMipLevel.sub(s),0)).toVar();s.assign(max$1(s,cubeUV_minMipLevel));const d=float(exp2(s)).toVar(),c=vec2(getUV(a,l).mul(d.sub(2)).add(1)).toVar();return If(l.greaterThan(2),(()=>{c.y.addAssign(d),l.subAssign(3)})),c.x.addAssign(l.mul(d)),c.x.addAssign(u.mul(mul(3,cubeUV_minTileSize))),c.y.addAssign(mul(4,exp2(o).sub(d))),c.x.mulAssign(i),c.y.mulAssign(n),e.sample(c).grad(vec2(),vec2())})),getSample=Fn((({envMap:e,mipInt:t,outputDirection:r,theta:i,axis:n,CUBEUV_TEXEL_WIDTH:o,CUBEUV_TEXEL_HEIGHT:s,CUBEUV_MAX_MIP:a})=>{const l=cos(i),u=r.mul(l).add(n.cross(r).mul(sin(i))).add(n.mul(n.dot(r).mul(l.oneMinus())));return bilinearCubeUV(e,u,t,o,s,a)})),blur=Fn((({n:e,latitudinal:t,poleAxis:r,outputDirection:i,weights:n,samples:o,dTheta:s,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=vec3(select(t,r,cross(r,i))).toVar();If(h.equal(vec3(0)),(()=>{h.assign(vec3(i.z,0,i.x.negate()))})),h.assign(normalize(h));const p=vec3().toVar();return p.addAssign(n.element(0).mul(getSample({theta:0,axis:h,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),Loop({start:int(1),end:e},(({i:e})=>{If(e.greaterThanEqual(o),(()=>{Break()}));const t=float(s.mul(float(e))).toVar();p.addAssign(n.element(e).mul(getSample({theta:t.mul(-1),axis:h,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(n.element(e).mul(getSample({theta:t,axis:h,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),vec4(p,1)})),LOD_MIN=4,EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582],MAX_SAMPLES=20,_flatCamera=new OrthographicCamera(-1,1,1,-1,0,1),_cubeCamera=new PerspectiveCamera(90,1),_clearColor$2=new Color;let _oldTarget=null,_oldActiveCubeFace=0,_oldActiveMipmapLevel=0;const PHI=(1+Math.sqrt(5))/2,INV_PHI=1/PHI,_axisDirections=[new Vector3(-PHI,INV_PHI,0),new Vector3(PHI,INV_PHI,0),new Vector3(-INV_PHI,0,PHI),new Vector3(INV_PHI,0,PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(0,PHI,INV_PHI),new Vector3(-1,1,-1),new Vector3(1,1,-1),new Vector3(-1,1,1),new Vector3(1,1,1)],_origin=new Vector3,_uniformsMap=new WeakMap,_faceLib=[3,1,5,0,4,2],_direction=getDirection(uv$1(),attribute("faceIndex")).normalize(),_outputDirection=vec3(_direction.x,_direction.y,_direction.z);class PMREMGenerator{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,i=100,n={}){const{size:o=256,position:s=_origin,renderTarget:a=null}=n;if(this._setSize(o),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const o=a||this._allocateTarget();return n.renderTarget=o,this.fromSceneAsync(e,t,r,i,n),o}_oldTarget=this._renderer.getRenderTarget(),_oldActiveCubeFace=this._renderer.getActiveCubeFace(),_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel();const l=a||this._allocateTarget();return l.depthBuffer=!0,this._init(l),this._sceneToCubeUV(e,r,i,l,s),t>0&&this._blur(l,0,0,t),this._applyPMREM(l),this._cleanup(l),l}async fromSceneAsync(e,t=0,r=.1,i=100,n={}){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,i,n)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTarget();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTarget();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=_getCubemapMaterial(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=_getEquirectMaterial(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===CubeReflectionMapping||e.mapping===CubeRefractionMapping?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(_oldTarget,_oldActiveCubeFace,_oldActiveMipmapLevel),e.scissorTest=!1,_setViewport(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),_oldTarget=this._renderer.getRenderTarget(),_oldActiveCubeFace=this._renderer.getActiveCubeFace(),_oldActiveMipmapLevel=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTarget();return this._init(r),this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTarget(){return _createRenderTarget(3*Math.max(this._cubeSize,112),4*this._cubeSize)}_init(e){if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e.width||this._pingPongRenderTarget.height!==e.height){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=_createRenderTarget(e.width,e.height);const{_lodMax:t}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=_createPlanes(t)),this._blurMaterial=_getBlurShader(t,e.width,e.height)}}async _compileMaterial(e){const t=new Mesh(this._lodPlanes[0],e);await this._renderer.compile(t,_flatCamera)}_sceneToCubeUV(e,t,r,i,n){const o=_cubeCamera;o.near=t,o.far=r;const s=[1,1,1,1,-1,1],a=[1,-1,1,-1,1,-1],l=this._renderer,u=l.autoClear;l.getClearColor(_clearColor$2),l.autoClear=!1;let d=this._backgroundBox;if(null===d){const e=new MeshBasicMaterial({name:"PMREM.Background",side:BackSide,depthWrite:!1,depthTest:!1});d=new Mesh(new BoxGeometry,e)}let c=!1;const h=e.background;h?h.isColor&&(d.material.color.copy(h),e.background=null,c=!0):(d.material.color.copy(_clearColor$2),c=!0),l.setRenderTarget(i),l.clear(),c&&l.render(d,o);for(let t=0;t<6;t++){const r=t%3;0===r?(o.up.set(0,s[t],0),o.position.set(n.x,n.y,n.z),o.lookAt(n.x+a[t],n.y,n.z)):1===r?(o.up.set(0,0,s[t]),o.position.set(n.x,n.y,n.z),o.lookAt(n.x,n.y+a[t],n.z)):(o.up.set(0,s[t],0),o.position.set(n.x,n.y,n.z),o.lookAt(n.x,n.y,n.z+a[t]));const u=this._cubeSize;_setViewport(i,r*u,t>2?u:0,u,u),l.render(e,o)}l.autoClear=u,e.background=h}_textureToCubeUV(e,t){const r=this._renderer,i=e.mapping===CubeReflectionMapping||e.mapping===CubeRefractionMapping;i?null===this._cubemapMaterial&&(this._cubemapMaterial=_getCubemapMaterial(e)):null===this._equirectMaterial&&(this._equirectMaterial=_getEquirectMaterial(e));const n=i?this._cubemapMaterial:this._equirectMaterial;n.fragmentNode.value=e;const o=this._lodMeshes[0];o.material=n;const s=this._cubeSize;_setViewport(t,0,0,3*s,2*s),r.setRenderTarget(t),r.render(o,_flatCamera)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let t=1;t<i;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),n=_axisDirections[(i-t-1)%_axisDirections.length];this._blur(e,t-1,t,r,n)}t.autoClear=r}_blur(e,t,r,i,n){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,r,i,"latitudinal",n),this._halfBlur(o,e,r,r,i,"longitudinal",n)}_halfBlur(e,t,r,i,n,o,s){const a=this._renderer,l=this._blurMaterial;"latitudinal"!==o&&"longitudinal"!==o&&console.error("blur direction must be either latitudinal or longitudinal!");const u=this._lodMeshes[i];u.material=l;const d=_uniformsMap.get(l),c=this._sizeLods[r]-1,h=isFinite(n)?Math.PI/(2*c):2*Math.PI/39,p=n/h,m=isFinite(n)?1+Math.floor(3*p):20;m>20&&console.warn(`sigmaRadians, ${n}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const g=[];let f=0;for(let e=0;e<20;++e){const t=e/p,r=Math.exp(-t*t/2);g.push(r),0===e?f+=r:e<m&&(f+=2*r)}for(let e=0;e<g.length;e++)g[e]=g[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=m,d.weights.array=g,d.latitudinal.value="latitudinal"===o?1:0,s&&(d.poleAxis.value=s);const{_lodMax:x}=this;d.dTheta.value=h,d.mipInt.value=x-r;const _=this._sizeLods[i];_setViewport(t,3*_*(i>x-4?i-x+4:0),4*(this._cubeSize-_),3*_,2*_),a.setRenderTarget(t),a.render(u,_flatCamera)}}function _createPlanes(e){const t=[],r=[],i=[],n=[];let o=e;const s=e-4+1+EXTRA_LOD_SIGMA.length;for(let a=0;a<s;a++){const s=Math.pow(2,o);r.push(s);let l=1/s;a>e-4?l=EXTRA_LOD_SIGMA[a-e+4-1]:0===a&&(l=0),i.push(l);const u=1/(s-2),d=-u,c=1+u,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,m=6,g=3,f=2,x=1,_=new Float32Array(g*m*p),y=new Float32Array(f*m*p),T=new Float32Array(x*m*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,i=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],n=_faceLib[e];_.set(i,g*m*n),y.set(h,f*m*n);const o=[n,n,n,n,n,n];T.set(o,x*m*n)}const b=new BufferGeometry;b.setAttribute("position",new BufferAttribute(_,g)),b.setAttribute("uv",new BufferAttribute(y,f)),b.setAttribute("faceIndex",new BufferAttribute(T,x)),t.push(b),n.push(new Mesh(b,null)),o>4&&o--}return{lodPlanes:t,sizeLods:r,sigmas:i,lodMeshes:n}}function _createRenderTarget(e,t){const r=new RenderTarget(e,t,{magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:!1,type:HalfFloatType,format:RGBAFormat,colorSpace:LinearSRGBColorSpace});return r.texture.mapping=CubeUVReflectionMapping,r.texture.name="PMREM.cubeUv",r.texture.isPMREMTexture=!0,r.scissorTest=!0,r}function _setViewport(e,t,r,i,n){e.viewport.set(t,r,i,n),e.scissor.set(t,r,i,n)}function _getMaterial(e){const t=new NodeMaterial;return t.depthTest=!1,t.depthWrite=!1,t.blending=NoBlending,t.name=`PMREM_${e}`,t}function _getBlurShader(e,t,r){const i=uniformArray(new Array(20).fill(0)),n=uniform(new Vector3(0,1,0)),o=uniform(0),s=float(20),a=uniform(0),l=uniform(1),u=texture(null),d=uniform(0),c=float(1/t),h=float(1/r),p=float(e),m={n:s,latitudinal:a,weights:i,poleAxis:n,outputDirection:_outputDirection,dTheta:o,samples:l,envMap:u,mipInt:d,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:p},g=_getMaterial("blur");return g.fragmentNode=blur({...m,latitudinal:a.equal(1)}),_uniformsMap.set(g,m),g}function _getCubemapMaterial(e){const t=_getMaterial("cubemap");return t.fragmentNode=cubeTexture(e,_outputDirection),t}function _getEquirectMaterial(e){const t=_getMaterial("equirect");return t.fragmentNode=texture(e,equirectUV(_outputDirection),0),t}const _cache=new WeakMap;function _generateCubeUVSize(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}function _getPMREMFromTexture(e,t,r){const i=_getCache(t);let n=i.get(e);if((void 0!==n?n.pmremVersion:-1)!==e.pmremVersion){const t=e.image;if(e.isCubeTexture){if(!isCubeMapReady(t))return null;n=r.fromCubemap(e,n)}else{if(!isEquirectangularMapReady(t))return null;n=r.fromEquirectangular(e,n)}n.pmremVersion=e.pmremVersion,i.set(e,n)}return n.texture}function _getCache(e){let t=_cache.get(e);return void 0===t&&(t=new WeakMap,_cache.set(e,t)),t}class PMREMNode extends TempNode{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const i=new Texture;i.isRenderTargetTexture=!0,this._texture=texture(i),this._width=uniform(0),this._height=uniform(0),this._maxMip=uniform(0),this.updateBeforeType=NodeUpdateType.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=_generateCubeUVSize(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const r=t?t.pmremVersion:-1,i=this._value;r!==i.pmremVersion&&(t=!0===i.isPMREMTexture?i:_getPMREMFromTexture(i,e.renderer,this._generator),null!==t&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){null===this._generator&&(this._generator=new PMREMGenerator(e.renderer)),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this)),t=materialEnvRotation.mul(vec3(t.x,t.y.negate(),t.z));let r=this.levelNode;return null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),textureCubeUV(this._texture,t,r,this._width,this._height,this._maxMip)}dispose(){super.dispose(),null!==this._generator&&this._generator.dispose()}}function isCubeMapReady(e){if(null==e)return!1;let t=0;for(let r=0;r<6;r++)void 0!==e[r]&&t++;return 6===t}function isEquirectangularMapReady(e){return null!=e&&e.height>0}const pmremTexture=nodeProxy(PMREMNode).setParameterLength(1,3),_envNodeCache=new WeakMap;class EnvironmentNode extends LightingNode{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let i=_envNodeCache.get(e);void 0===i&&(i=pmremTexture(e),_envNodeCache.set(e,i)),r=i}const i=!0===t.useAnisotropy||t.anisotropy>0?bentNormalView:normalView,n=r.context(createRadianceContext(roughness,i)).mul(materialEnvIntensity),o=r.context(createIrradianceContext(normalWorld)).mul(Math.PI).mul(materialEnvIntensity),s=cache(n),a=cache(o);e.context.radiance.addAssign(s),e.context.iblIrradiance.addAssign(a);const l=e.context.lightingModel.clearcoatRadiance;if(l){const e=r.context(createRadianceContext(clearcoatRoughness,clearcoatNormalView)).mul(materialEnvIntensity),t=cache(e);l.addAssign(t)}}}const createRadianceContext=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=positionViewDirection.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(cameraViewMatrix)),r),getTextureLevel:()=>e}},createIrradianceContext=e=>({getUV:()=>e,getTextureLevel:()=>float(1)}),_defaultValues$6=new MeshStandardMaterial;class MeshStandardNodeMaterial extends NodeMaterial{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(_defaultValues$6),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new EnvironmentNode(t):null}setupLightingModel(){return new PhysicalLightingModel}setupSpecular(){const e=mix(vec3(.04),diffuseColor.rgb,metalness);specularColor.assign(e),specularF90.assign(1)}setupVariants(){const e=this.metalnessNode?float(this.metalnessNode):materialMetalness;metalness.assign(e);let t=this.roughnessNode?float(this.roughnessNode):materialRoughness;t=getRoughness({roughness:t}),roughness.assign(t),this.setupSpecular(),diffuseColor.assign(vec4(diffuseColor.rgb.mul(e.oneMinus()),diffuseColor.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const _defaultValues$5=new MeshPhysicalMaterial;class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(_defaultValues$5),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?float(this.iorNode):materialIOR;ior.assign(e),specularColor.assign(mix(min$1(pow2(ior.sub(1).div(ior.add(1))).mul(materialSpecularColor),vec3(1)).mul(materialSpecularIntensity),diffuseColor.rgb,metalness)),specularF90.assign(mix(materialSpecularIntensity,1,metalness))}setupLightingModel(){return new PhysicalLightingModel(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?float(this.clearcoatNode):materialClearcoat,t=this.clearcoatRoughnessNode?float(this.clearcoatRoughnessNode):materialClearcoatRoughness;clearcoat.assign(e),clearcoatRoughness.assign(getRoughness({roughness:t}))}if(this.useSheen){const e=this.sheenNode?vec3(this.sheenNode):materialSheen,t=this.sheenRoughnessNode?float(this.sheenRoughnessNode):materialSheenRoughness;sheen.assign(e),sheenRoughness.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?float(this.iridescenceNode):materialIridescence,t=this.iridescenceIORNode?float(this.iridescenceIORNode):materialIridescenceIOR,r=this.iridescenceThicknessNode?float(this.iridescenceThicknessNode):materialIridescenceThickness;iridescence.assign(e),iridescenceIOR.assign(t),iridescenceThickness.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?vec2(this.anisotropyNode):materialAnisotropy).toVar();anisotropy.assign(e.length()),If(anisotropy.equal(0),(()=>{e.assign(vec2(1,0))})).Else((()=>{e.divAssign(vec2(anisotropy)),anisotropy.assign(anisotropy.saturate())})),alphaT.assign(anisotropy.pow2().mix(roughness.pow2(),1)),anisotropyT.assign(TBNViewMatrix[0].mul(e.x).add(TBNViewMatrix[1].mul(e.y))),anisotropyB.assign(TBNViewMatrix[1].mul(e.x).sub(TBNViewMatrix[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?float(this.transmissionNode):materialTransmission,t=this.thicknessNode?float(this.thicknessNode):materialThickness,r=this.attenuationDistanceNode?float(this.attenuationDistanceNode):materialAttenuationDistance,i=this.attenuationColorNode?vec3(this.attenuationColorNode):materialAttenuationColor;if(transmission.assign(e),thickness.assign(t),attenuationDistance.assign(r),attenuationColor.assign(i),this.useDispersion){const e=this.dispersionNode?float(this.dispersionNode):materialDispersion;dispersion.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?vec3(this.clearcoatNormalNode):materialClearcoatNormal}setup(e){e.context.setupClearcoatNormal=()=>subBuild(this.setupClearcoatNormal(e),"NORMAL","vec3"),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class SSSLightingModel extends PhysicalLightingModel{constructor(e=!1,t=!1,r=!1,i=!1,n=!1,o=!1,s=!1){super(e,t,r,i,n,o),this.useSSS=s}direct({lightDirection:e,lightColor:t,reflectedLight:r},i){if(!0===this.useSSS){const n=i.material,{thicknessColorNode:o,thicknessDistortionNode:s,thicknessAmbientNode:a,thicknessAttenuationNode:l,thicknessPowerNode:u,thicknessScaleNode:d}=n,c=e.add(normalView.mul(s)).normalize(),h=float(positionViewDirection.dot(c.negate()).saturate().pow(u).mul(d)),p=vec3(h.add(a).mul(o));r.directDiffuse.addAssign(p.mul(l.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},i)}}class MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=float(.1),this.thicknessAmbientNode=float(0),this.thicknessAttenuationNode=float(.1),this.thicknessPowerNode=float(2),this.thicknessScaleNode=float(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new SSSLightingModel(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const getGradientIrradiance=Fn((({normal:e,lightDirection:t,builder:r})=>{const i=e.dot(t),n=vec2(i.mul(.5).add(.5),0);if(r.material.gradientMap){const e=materialReference("gradientMap","texture").context({getUV:()=>n});return vec3(e.r)}{const e=n.fwidth().mul(.5);return mix(vec3(.7),vec3(1),smoothstep(float(.7).sub(e.x),float(.7).add(e.x),n.x))}}));class ToonLightingModel extends LightingModel{direct({lightDirection:e,lightColor:t,reflectedLight:r},i){const n=getGradientIrradiance({normal:normalGeometry,lightDirection:e,builder:i}).mul(t);r.directDiffuse.addAssign(n.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:i}=e.context;i.indirectDiffuse.addAssign(r.mul(BRDF_Lambert({diffuseColor:diffuseColor}))),i.indirectDiffuse.mulAssign(t)}}const _defaultValues$4=new MeshToonMaterial;class MeshToonNodeMaterial extends NodeMaterial{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(_defaultValues$4),this.setValues(e)}setupLightingModel(){return new ToonLightingModel}}const matcapUV=Fn((()=>{const e=vec3(positionViewDirection.z,0,positionViewDirection.x.negate()).normalize(),t=positionViewDirection.cross(e);return vec2(e.dot(normalView),t.dot(normalView)).mul(.495).add(.5)})).once(["NORMAL","VERTEX"])().toVar("matcapUV"),_defaultValues$3=new MeshMatcapMaterial;class MeshMatcapNodeMaterial extends NodeMaterial{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(_defaultValues$3),this.setValues(e)}setupVariants(e){const t=matcapUV;let r;r=e.material.matcap?materialReference("matcap","texture").context({getUV:()=>t}):vec3(mix(.2,.8,t.y)),diffuseColor.rgb.mulAssign(r.rgb)}}class RotateNode extends TempNode{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),i=t.sin();return mat2(e,i,i.negate(),e).mul(r)}{const e=t,i=mat4(vec4(1,0,0,0),vec4(0,cos(e.x),sin(e.x).negate(),0),vec4(0,sin(e.x),cos(e.x),0),vec4(0,0,0,1)),n=mat4(vec4(cos(e.y),0,sin(e.y),0),vec4(0,1,0,0),vec4(sin(e.y).negate(),0,cos(e.y),0),vec4(0,0,0,1)),o=mat4(vec4(cos(e.z),sin(e.z).negate(),0,0),vec4(sin(e.z),cos(e.z),0,0),vec4(0,0,1,0),vec4(0,0,0,1));return i.mul(n).mul(o).mul(vec4(r,1)).xyz}}}const rotate=nodeProxy(RotateNode).setParameterLength(2),_defaultValues$2=new SpriteMaterial;class SpriteNodeMaterial extends NodeMaterial{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.transparent=!0,this.setDefaultValues(_defaultValues$2),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,i=this.sizeAttenuation,{positionNode:n,rotationNode:o,scaleNode:s}=this,a=modelViewMatrix.mul(vec3(n||0));let l=vec2(modelWorldMatrix[0].xyz.length(),modelWorldMatrix[1].xyz.length());if(null!==s&&(l=l.mul(vec2(s))),!1===i)if(r.isPerspectiveCamera)l=l.mul(a.z.negate());else{const e=float(2).div(cameraProjectionMatrix.element(1).element(1));l=l.mul(e.mul(2))}let u=positionGeometry.xy;if(t.center&&!0===t.center.isVector2){const e=reference$1("center","vec2",t);u=u.sub(e.sub(.5))}u=u.mul(l);const d=float(o||materialRotation),c=rotate(u,d);return vec4(a.xy.add(c),a.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const _defaultValues$1=new PointsMaterial;class PointsNodeMaterial extends SpriteNodeMaterial{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(_defaultValues$1),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return modelViewMatrix.mul(vec3(e||positionLocal)).xyz}setupVertex(e){const t=super.setupVertex(e);if(!0!==e.material.isNodeMaterial)return t;const{rotationNode:r,scaleNode:i,sizeNode:n}=this,o=positionGeometry.xy.toVar(),s=viewport.z.div(viewport.w);if(r&&r.isNode){const e=float(r);o.assign(rotate(o,e))}let a=null!==n?vec2(n):materialPointSize;return!0===this.sizeAttenuation&&(a=a.mul(a.div(positionView.z.negate()))),i&&i.isNode&&(a=a.mul(vec2(i))),o.mulAssign(a.mul(2)),o.assign(o.div(viewport.z)),o.y.assign(o.y.mul(s)),o.assign(o.mul(t.w)),t.addAssign(vec4(o,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class ShadowMaskModel extends LightingModel{constructor(){super(),this.shadowNode=float(1).toVar("shadowMask")}direct({lightNode:e}){null!==e.shadowNode&&this.shadowNode.mulAssign(e.shadowNode)}finish({context:e}){diffuseColor.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(diffuseColor.rgb)}}const _defaultValues=new ShadowMaterial;class ShadowNodeMaterial extends NodeMaterial{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.transparent=!0,this.setDefaultValues(_defaultValues),this.setValues(e)}setupLightingModel(){return new ShadowMaskModel}}const scatteringDensity=property("vec3"),linearDepthRay=property("vec3"),outgoingRayLight=property("vec3");class VolumetricLightingModel extends LightingModel{constructor(){super()}start(e){const{material:t,context:r}=e,i=property("vec3"),n=property("vec3");If(cameraPosition.sub(positionWorld).length().greaterThan(modelRadius.mul(2)),(()=>{i.assign(cameraPosition),n.assign(positionWorld)})).Else((()=>{i.assign(positionWorld),n.assign(cameraPosition)}));const o=n.sub(i),s=uniform("int").onRenderUpdate((({material:e})=>e.steps)),a=o.length().div(s).toVar(),l=o.normalize().toVar(),u=float(0).toVar(),d=vec3(1).toVar();t.offsetNode&&u.addAssign(t.offsetNode.mul(a)),Loop(s,(()=>{const n=i.add(l.mul(u)),o=cameraViewMatrix.mul(vec4(n,1)).xyz;let s;null!==t.depthNode&&(linearDepthRay.assign(linearDepth(viewZToPerspectiveDepth(o.z,cameraNear,cameraFar))),r.sceneDepthNode=linearDepth(t.depthNode).toVar()),r.positionWorld=n,r.shadowPositionWorld=n,r.positionView=o,scatteringDensity.assign(0),t.scatteringNode&&(s=t.scatteringNode({positionRay:n})),super.start(e),s&&scatteringDensity.mulAssign(s);const c=scatteringDensity.mul(.01).negate().mul(a).exp();d.mulAssign(c),u.addAssign(a)})),outgoingRayLight.addAssign(d.saturate().oneMinus())}scatteringLight(e,t){const r=t.context.sceneDepthNode;r?If(r.greaterThanEqual(linearDepthRay),(()=>{scatteringDensity.addAssign(e)})):scatteringDensity.addAssign(e)}direct({lightNode:e,lightColor:t},r){if(void 0===e.light.distance)return;const i=t.xyz.toVar();i.mulAssign(e.shadowNode),this.scatteringLight(i,r)}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:i},n){const o=t.add(r).sub(i),s=t.sub(r).sub(i),a=t.sub(r).add(i),l=t.add(r).add(i),u=n.context.positionView,d=e.xyz.mul(LTC_Evaluate_Volume({P:u,p0:o,p1:s,p2:a,p3:l})).pow(1.5);this.scatteringLight(d,n)}finish(e){e.context.outgoingLight.assign(outgoingRayLight)}}class VolumeNodeMaterial extends NodeMaterial{static get type(){return"VolumeNodeMaterial"}constructor(e){super(),this.isVolumeNodeMaterial=!0,this.steps=25,this.offsetNode=null,this.scatteringNode=null,this.lights=!0,this.transparent=!0,this.side=BackSide,this.depthTest=!1,this.depthWrite=!1,this.setValues(e)}setupLightingModel(){return new VolumetricLightingModel}}class Animation{constructor(e,t){this.nodes=e,this.info=t,this._context="undefined"!=typeof self?self:null,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class ChainMap{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length-1;t++){const i=e[t];!1===r.has(i)&&r.set(i,new WeakMap),r=r.get(i)}return r.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let _id$9=0;function getKeys(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const i=e[r];i&&"function"==typeof i.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}class RenderObject{constructor(e,t,r,i,n,o,s,a,l,u){this.id=_id$9++,this._nodes=e,this._geometries=t,this.renderer=r,this.object=i,this.material=n,this.scene=o,this.camera=s,this.lightsNode=a,this.context=l,this.geometry=i.geometry,this.version=n.version,this.drawRange=null,this.attributes=null,this.attributesId=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=u,this.clippingContextCacheKey=null!==u?u.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.onGeometryDispose=()=>{this.attributes=null,this.attributesId=null},this.material.addEventListener("dispose",this.onMaterialDispose),this.geometry.addEventListener("dispose",this.onGeometryDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null,this.attributesId=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],i=new Set,n={};for(const o of e){let e;if(o.node&&o.node.attribute?e=o.node.attribute:(e=t.getAttribute(o.name),n[o.name]=e.version),void 0===e)continue;r.push(e);const s=e.isInterleavedBufferAttribute?e.data:e;i.add(s)}return this.attributes=r,this.attributesId=n,this.vertexBuffers=Array.from(i.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:i,drawRange:n}=this,o=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),s=this.getIndex(),a=null!==s;let l=1;if(!0===r.isInstancedBufferGeometry?l=r.instanceCount:void 0!==e.count&&(l=Math.max(0,e.count)),0===l)return null;if(o.instanceCount=l,!0===e.isBatchedMesh)return o;let u=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(u=2);let d=n.start*u,c=(n.start+n.count)*u;null!==i&&(d=Math.max(d,i.start*u),c=Math.min(c,(i.start+i.count)*u));const h=r.attributes.position;let p=1/0;a?p=s.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const m=c-d;return m<0||m===1/0?null:(o.vertexCount=m,o.firstVertex=d,o)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const i=e.attributes[r];t+=r+",",i.data&&(t+=i.data.stride+","),i.offset&&(t+=i.offset+","),i.itemSize&&(t+=i.itemSize+","),i.normalized&&(t+="n,")}for(const r of Object.keys(e.morphAttributes).sort()){const i=e.morphAttributes[r];t+="morph-"+r+",";for(let e=0,r=i.length;e<r;e++){t+=i[e].id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of getKeys(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const i=t[e];let n;if(null!==i){const e=typeof i;"number"===e?n=0!==i?"1":"0":"object"===e?(n="{",i.isTexture&&(n+=i.mapping),n+="}"):n=String(i)}else n=String(i);r+=n+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",hashString(r)}get needsGeometryUpdate(){if(this.geometry.id!==this.object.geometry.id)return!0;if(null!==this.attributes){const e=this.attributesId;for(const t in e){const r=this.geometry.getAttribute(t);if(void 0===r||e[t]!==r.id)return!0}}return!1}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return!0!==this.material.isShadowPassMaterial&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=hash$1(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=hash$1(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.geometry.removeEventListener("dispose",this.onGeometryDispose),this.onDispose()}}const _chainKeys$5=[];class RenderObjects{constructor(e,t,r,i,n,o){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=i,this.bindings=n,this.info=o,this.chainMaps={}}get(e,t,r,i,n,o,s,a){const l=this.getChainMap(a);_chainKeys$5[0]=e,_chainKeys$5[1]=t,_chainKeys$5[2]=o,_chainKeys$5[3]=n;let u=l.get(_chainKeys$5);return void 0===u?(u=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,i,n,o,s,a),l.set(_chainKeys$5,u)):(u.updateClipping(s),u.needsGeometryUpdate&&u.setGeometry(e.geometry),(u.version!==t.version||u.needsUpdate)&&(u.initialCacheKey!==u.getCacheKey()?(u.dispose(),u=this.get(e,t,r,i,n,o,s,a)):u.version=t.version)),_chainKeys$5.length=0,u}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new ChainMap)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,i,n,o,s,a,l,u,d){const c=this.getChainMap(d),h=new RenderObject(e,t,r,i,n,o,s,a,l,u);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class DataMap{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const AttributeType={VERTEX:1,INDEX:2,STORAGE:3,INDIRECT:4},GPU_CHUNK_BYTES=16,BlendColorFactor=211,OneMinusBlendColorFactor=212;class Attributes extends DataMap{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return null!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===AttributeType.VERTEX?this.backend.createAttribute(e):t===AttributeType.INDEX?this.backend.createIndexAttribute(e):t===AttributeType.STORAGE?this.backend.createStorageAttribute(e):t===AttributeType.INDIRECT&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===DynamicDrawUsage)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function getWireframeVersion(e){return null!==e.index?e.index.version:e.attributes.position.version}function getWireframeIndex(e){const t=[],r=e.index,i=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,i=e.length;r<i;r+=3){const i=e[r+0],n=e[r+1],o=e[r+2];t.push(i,n,n,o,o,i)}}else{for(let e=0,r=i.array.length/3-1;e<r;e+=3){const r=e+0,i=e+1,n=e+2;t.push(r,i,i,n,n,r)}}const n=new(arrayNeedsUint32(t)?Uint32BufferAttribute:Uint16BufferAttribute)(t,1);return n.version=getWireframeVersion(e),n}class Geometries extends DataMap{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const i=t.index,n=e.getAttributes();null!==i&&this.attributes.delete(i);for(const e of n)this.attributes.delete(e);const o=this.wireframes.get(t);void 0!==o&&this.attributes.delete(o),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,AttributeType.STORAGE):this.updateAttribute(e,AttributeType.VERTEX);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,AttributeType.INDEX);const i=e.geometry.indirect;null!==i&&this.updateAttribute(i,AttributeType.INDIRECT)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let i=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=getWireframeIndex(t),e.set(t,r)):r.version!==getWireframeVersion(t)&&(this.attributes.delete(r),r=getWireframeIndex(t),e.set(t,r)),i=r}return i}}class Info{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class Pipeline{constructor(e){this.cacheKey=e,this.usedTimes=0}}class RenderPipeline extends Pipeline{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class ComputePipeline extends Pipeline{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let _id$8=0;class ProgrammableStage{constructor(e,t,r,i=null,n=null){this.id=_id$8++,this.code=e,this.stage=t,this.name=r,this.transforms=i,this.attributes=n,this.usedTimes=0}}class Pipelines extends DataMap{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,i=this.get(e);if(this._needsComputeUpdate(e)){const n=i.pipeline;n&&(n.usedTimes--,n.computeProgram.usedTimes--);const o=this.nodes.getForCompute(e);let s=this.programs.compute.get(o.computeShader);void 0===s&&(n&&0===n.computeProgram.usedTimes&&this._releaseProgram(n.computeProgram),s=new ProgrammableStage(o.computeShader,"compute",e.name,o.transforms,o.nodeAttributes),this.programs.compute.set(o.computeShader,s),r.createProgram(s));const a=this._getComputeCacheKey(e,s);let l=this.caches.get(a);void 0===l&&(n&&0===n.usedTimes&&this._releasePipeline(n),l=this._getComputePipeline(e,s,a,t)),l.usedTimes++,s.usedTimes++,i.version=e.version,i.pipeline=l}return i.pipeline}getForRender(e,t=null){const{backend:r}=this,i=this.get(e);if(this._needsRenderUpdate(e)){const n=i.pipeline;n&&(n.usedTimes--,n.vertexProgram.usedTimes--,n.fragmentProgram.usedTimes--);const o=e.getNodeBuilderState(),s=e.material?e.material.name:"";let a=this.programs.vertex.get(o.vertexShader);void 0===a&&(n&&0===n.vertexProgram.usedTimes&&this._releaseProgram(n.vertexProgram),a=new ProgrammableStage(o.vertexShader,"vertex",s),this.programs.vertex.set(o.vertexShader,a),r.createProgram(a));let l=this.programs.fragment.get(o.fragmentShader);void 0===l&&(n&&0===n.fragmentProgram.usedTimes&&this._releaseProgram(n.fragmentProgram),l=new ProgrammableStage(o.fragmentShader,"fragment",s),this.programs.fragment.set(o.fragmentShader,l),r.createProgram(l));const u=this._getRenderCacheKey(e,a,l);let d=this.caches.get(u);void 0===d?(n&&0===n.usedTimes&&this._releasePipeline(n),d=this._getRenderPipeline(e,a,l,u,t)):e.pipeline=d,d.usedTimes++,a.usedTimes++,l.usedTimes++,i.pipeline=d}return i.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,i){r=r||this._getComputeCacheKey(e,t);let n=this.caches.get(r);return void 0===n&&(n=new ComputePipeline(r,t),this.caches.set(r,n),this.backend.createComputePipeline(n,i)),n}_getRenderPipeline(e,t,r,i,n){i=i||this._getRenderCacheKey(e,t,r);let o=this.caches.get(i);return void 0===o&&(o=new RenderPipeline(i,t,r),this.caches.set(i,o),e.pipeline=o,this.backend.createRenderPipeline(e,n)),o}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class Bindings extends DataMap{constructor(e,t,r,i,n,o){super(),this.backend=e,this.textures=r,this.pipelines=n,this.attributes=i,this.nodes=t,this.info=o,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?AttributeType.INDIRECT:AttributeType.STORAGE;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let i=!1,n=!0,o=0,s=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!1===this.nodes.updateGroup(t))continue}if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?AttributeType.INDIRECT:AttributeType.STORAGE;this.attributes.update(e,r)}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampledTexture){const e=t.update(),a=t.texture,l=this.textures.get(a);e&&(this.textures.updateTexture(a),t.generation!==l.generation&&(t.generation=l.generation,i=!0));if(void 0!==r.get(a).externalTexture||l.isDefaultTexture?n=!1:(o=10*o+a.id,s+=a.version),!0===a.isStorageTexture){const e=this.get(a);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(a)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(a),e.needsMipmap=!1)}}else t.isSampler&&t.update()}!0===i&&this.backend.updateBindings(e,t,n?o:0,s)}}function painterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?e.z-t.z:e.id-t.id}function reversePainterSortStable(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function needsDoublePass(e){return(e.transmission>0||e.transmissionNode)&&e.side===DoubleSide&&!1===e.forceSinglePass}class RenderList{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,i,n,o,s){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:i,renderOrder:e.renderOrder,z:n,group:o,clippingContext:s},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=i,a.renderOrder=e.renderOrder,a.z=n,a.group=o,a.clippingContext=s),this.renderItemsIndex++,a}push(e,t,r,i,n,o,s){const a=this.getNextRenderItem(e,t,r,i,n,o,s);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(needsDoublePass(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,i,n,o,s){const a=this.getNextRenderItem(e,t,r,i,n,o,s);!0===r.transparent||r.transmission>0?(needsDoublePass(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||painterSortStable),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||reversePainterSortStable),this.transparent.length>1&&this.transparent.sort(t||reversePainterSortStable)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}const _chainKeys$4=[];class RenderLists{constructor(e){this.lighting=e,this.lists=new ChainMap}get(e,t){const r=this.lists;_chainKeys$4[0]=e,_chainKeys$4[1]=t;let i=r.get(_chainKeys$4);return void 0===i&&(i=new RenderList(this.lighting,e,t),r.set(_chainKeys$4,i)),_chainKeys$4.length=0,i}dispose(){this.lists=new ChainMap}}let _id$7=0;class RenderContext{constructor(){this.id=_id$7++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new Vector4,this.scissor=!1,this.scissorValue=new Vector4,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return getCacheKey(this)}}function getCacheKey(e){const{textures:t,activeCubeFace:r}=e,i=[r];for(const e of t)i.push(e.id);return hashArray(i)}const _chainKeys$3=[],_defaultScene=new Scene,_defaultCamera=new Camera;class RenderContexts{constructor(){this.chainMaps={}}get(e,t,r=null){let i;if(_chainKeys$3[0]=e,_chainKeys$3[1]=t,null===r)i="default";else{const e=r.texture.format;i=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const n=this._getChainMap(i);let o=n.get(_chainKeys$3);return void 0===o&&(o=new RenderContext,n.set(_chainKeys$3,o)),_chainKeys$3.length=0,null!==r&&(o.sampleCount=0===r.samples?1:r.samples),o}getForClear(e=null){return this.get(_defaultScene,_defaultCamera,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new ChainMap)}dispose(){this.chainMaps={}}}const _size$3=new Vector3;class Textures extends DataMap{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),i=0===e.samples?1:e.samples,n=r.depthTextureMips||(r.depthTextureMips={}),o=e.textures,s=this.getSize(o[0]),a=s.width>>t,l=s.height>>t;let u=e.depthTexture||n[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===u&&d&&(u=new DepthTexture,u.format=e.stencilBuffer?DepthStencilFormat:DepthFormat,u.type=e.stencilBuffer?UnsignedInt248Type:UnsignedIntType,u.image.width=a,u.image.height=l,u.image.depth=s.depth,u.isArrayTexture=!0===e.multiview&&s.depth>1,n[t]=u),r.width===s.width&&s.height===r.height||(c=!0,u&&(u.needsUpdate=!0,u.image.width=a,u.image.height=l,u.image.depth=u.isArrayTexture?u.image.depth:1)),r.width=s.width,r.height=s.height,r.textures=o,r.depthTexture=u||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==i&&(c=!0,u&&(u.needsUpdate=!0),r.sampleCount=i);const h={sampleCount:i};if(!0!==e.isXRRenderTarget){for(let e=0;e<o.length;e++){const t=o[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}u&&this.updateTexture(u,h)}if(!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<o.length;e++)this._destroyTexture(o[e]);u&&this._destroyTexture(u),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const i=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,n=this.backend;if(i&&!0===r.initialized&&(n.destroySampler(e),n.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:UnsignedByteType}const{width:o,height:s,depth:a}=this.getSize(e);if(t.width=o,t.height=s,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,o,s):1,i||!0===e.isStorageTexture)n.createSampler(e),n.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&n.createSampler(e),e.version>0){const i=e.image;if(void 0===i)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===i.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=i;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(n.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&n.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&n.generateMipmaps(e)}}else n.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e)};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=_size$3){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),r instanceof HTMLVideoElement?(t.width=r.videoWidth||1,t.height=r.videoHeight||1,t.depth=1):r instanceof VideoFrame?(t.width=r.displayWidth||1,t.height=r.displayHeight||1,t.depth=1):(t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1)):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let i;return i=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,i}needsMipmaps(e){return!0===e.isCompressedTexture||e.generateMipmaps}_destroyTexture(e){!0===this.has(e)&&(this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e),this.info.memory.textures--)}}class Color4 extends Color{constructor(e,t,r,i=1){super(e,t,r),this.a=i}set(e,t,r,i=1){return this.a=i,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class ParameterNode extends PropertyNode{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}const parameter=(e,t)=>nodeObject(new ParameterNode(e,t));class StackNode extends Node{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this._expressionNode=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new ShaderNode(t);return this._currentCond=select(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new ShaderNode(t),i=select(e,r);return this._currentCond.elseNode=i,this._currentCond=i,this}Else(e){return this._currentCond.elseNode=new ShaderNode(e),this}Switch(e){return this._expressionNode=nodeObject(e),this}Case(...e){const t=[];if(!(e.length>=2))throw new Error("TSL: Invalid parameter length. Case() requires at least two parameters.");for(let r=0;r<e.length-1;r++)t.push(this._expressionNode.equal(nodeObject(e[r])));const r=new ShaderNode(e[e.length-1]);let i=t[0];for(let e=1;e<t.length;e++)i=i.or(t[e]);const n=select(i,r);return null===this._currentCond?(this._currentCond=n,this.add(this._currentCond)):(this._currentCond.elseNode=n,this._currentCond=n,this)}Default(e){return this.Else(e),this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const i of this.getChildren()){if(i.isVarNode&&!0===i.intent){if(!0!==e.getNodeProperties(i).assign)continue}t["node"+r++]=i}return t.outputNode||null}build(e,...t){const r=e.currentStack,i=getCurrentStack();setCurrentStack(this),e.currentStack=this;const n=e.buildStage;for(const t of this.nodes){if(t.isVarNode&&!0===t.intent){if(!0!==e.getNodeProperties(t).assign)continue}if("setup"===n)t.build(e);else if("analyze"===n)t.build(e,this);else if("generate"===n){const r=e.getDataFromNode(t,"any").stages,i=r&&r[e.shaderStage];if(t.isVarNode&&i&&1===i.length&&i[0]&&i[0].isStackNode)continue;t.build(e,"void")}}const o=this.outputNode?this.outputNode.build(e,...t):super.build(e,...t);return setCurrentStack(i),e.currentStack=r,o}}const stack=nodeProxy(StackNode).setParameterLength(0,1);function getMembersLayout(e){return Object.entries(e).map((([e,t])=>"string"==typeof t?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1}))}class StructTypeNode extends Node{static get type(){return"StructTypeNode"}constructor(e,t=null){super("struct"),this.membersLayout=getMembersLayout(e),this.name=t,this.isStructLayoutNode=!0}getLength(){const e=Float32Array.BYTES_PER_ELEMENT;let t=0;for(const r of this.membersLayout){const i=r.type,n=getMemoryLengthFromType(i)*e,o=t%8,s=o%getByteBoundaryFromType(i),a=o+s;t+=s,0!==a&&8-a<n&&(t+=8-a),t+=n}return 8*Math.ceil(t/8)/e}getMemberType(e,t){const r=this.membersLayout.find((e=>e.name===t));return r?r.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}setup(e){e.addInclude(this)}generate(e){return this.getNodeType(e)}}class StructNode extends Node{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),r=t.type,i=e.getPropertyName(t);return e.addLineFlowCode(`${i} = ${e.generateStruct(r,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}const struct=(e,t=null)=>{const r=new StructTypeNode(e,t),i=(...t)=>{let i=null;if(t.length>0)if(t[0].isNode){i={};const r=Object.keys(e);for(let e=0;e<t.length;e++)i[r[e]]=t[e]}else i=t[0];return nodeObject(new StructNode(r,i))};return i.layout=r,i.isStruct=!0,i};class OutputStructNode extends Node{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(void 0===t.membersLayout){const r=this.members,i=[];for(let t=0;t<r.length;t++){const n="m"+t,o=r[t].getNodeType(e);i.push({name:n,type:o,index:t})}t.membersLayout=i,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),r=this.members,i=""!==t?t+".":"";for(let t=0;t<r.length;t++){const n=r[t].build(e);e.addLineFlowCode(`${i}m${t} = ${n}`,this)}return t}}const outputStruct=nodeProxy(OutputStructNode);function getTextureIndex(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class MRTNode extends OutputStructNode{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return mrt(t)}setup(e){const t=this.outputNodes,r=[],i=e.renderer.getRenderTarget().textures;for(const e in t){r[getTextureIndex(i,e)]=vec4(t[e])}return this.members=r,super.setup(e)}}const mrt=nodeProxy(MRTNode),hash=Fn((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),parabola=(e,t)=>pow(mul(4,e.mul(sub(1,e))),t),gain=(e,t)=>e.lessThan(.5)?parabola(e.mul(2),t).div(2):sub(1,parabola(mul(sub(1,e),2),t).div(2)),pcurve=(e,t,r)=>pow(div(pow(e,t),add(pow(e,t),pow(sub(1,e),r))),1/t),sinc=(e,t)=>sin(PI.mul(t.mul(e).sub(1))).div(PI.mul(t.mul(e).sub(1))),tri=Fn((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),tri3=Fn((([e])=>vec3(tri(e.z.add(tri(e.y.mul(1)))),tri(e.z.add(tri(e.x.mul(1)))),tri(e.y.add(tri(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),triNoise3D=Fn((([e,t,r])=>{const i=vec3(e).toVar(),n=float(1.4).toVar(),o=float(0).toVar(),s=vec3(i).toVar();return Loop({start:float(0),end:float(3),type:"float",condition:"<="},(()=>{const e=vec3(tri3(s.mul(2))).toVar();i.addAssign(e.add(r.mul(float(.1).mul(t)))),s.mulAssign(1.8),n.mulAssign(1.5),i.mulAssign(1.2);const a=float(tri(i.z.add(tri(i.x.add(tri(i.y)))))).toVar();o.addAssign(a.div(n)),s.addAssign(.14)})),o})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class FunctionOverloadingNode extends Node{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let i=null,n=-1;for(const r of this.functionNodes){const o=r.shaderNode.layout;if(null===o)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const s=o.inputs;if(t.length===s.length){let o=0;for(let r=0;r<t.length;r++){const i=t[r],n=s[r];i.getNodeType(e)===n.type?o++:o=0}o>n&&(i=r,n=o)}}this._candidateFnCall=r=i(...t)}return r}}const overloadingBaseFn=nodeProxy(FunctionOverloadingNode),overloadingFn=e=>(...t)=>overloadingBaseFn(e,...t),time=uniform(0).setGroup(renderGroup).onRenderUpdate((e=>e.time)),deltaTime=uniform(0).setGroup(renderGroup).onRenderUpdate((e=>e.deltaTime)),frameId=uniform(0,"uint").setGroup(renderGroup).onRenderUpdate((e=>e.frameId)),timerLocal=(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),time.mul(e)),timerGlobal=(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),time.mul(e)),timerDelta=(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),deltaTime.mul(e)),oscSine=(e=time)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare=(e=time)=>e.fract().round(),oscTriangle=(e=time)=>e.add(.5).fract().mul(2).sub(1).abs(),oscSawtooth=(e=time)=>e.fract(),rotateUV=Fn((([e,t,r=vec2(.5)])=>rotate(e.sub(r),t).add(r))),spherizeUV=Fn((([e,t,r=vec2(.5)])=>{const i=e.sub(r),n=i.dot(i),o=n.mul(n).mul(t);return e.add(i.mul(o))})),billboarding=Fn((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let i;null!==e?(i=modelWorldMatrix.toVar(),i[3][0]=e.x,i[3][1]=e.y,i[3][2]=e.z):i=modelWorldMatrix;const n=cameraViewMatrix.mul(i);return defined(t)&&(n[0][0]=modelWorldMatrix[0].length(),n[0][1]=0,n[0][2]=0),defined(r)&&(n[1][0]=0,n[1][1]=modelWorldMatrix[1].length(),n[1][2]=0),n[2][0]=0,n[2][1]=0,n[2][2]=1,cameraProjectionMatrix.mul(n).mul(positionLocal)})),viewportSafeUV=Fn((([e=null])=>{const t=linearDepth();return linearDepth(viewportDepthTexture(e)).sub(t).lessThan(0).select(screenUV,e)}));class SpriteSheetUVNode extends Node{static get type(){return"SpriteSheetUVNode"}constructor(e,t=uv$1(),r=float(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:i,height:n}=r,o=e.mod(i.mul(n)).floor(),s=o.mod(i),a=n.sub(o.add(1).div(i).ceil()),l=r.reciprocal(),u=vec2(s,a);return t.add(u).mul(l)}}const spritesheetUV=nodeProxy(SpriteSheetUVNode).setParameterLength(3),triplanarTextures=Fn((([e,t=null,r=null,i=float(1),n=positionLocal,o=normalLocal])=>{let s=o.abs().normalize();s=s.div(s.dot(vec3(1)));const a=n.yz.mul(i),l=n.zx.mul(i),u=n.xy.mul(i),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=texture(d,a).mul(s.x),m=texture(c,l).mul(s.y),g=texture(h,u).mul(s.z);return add(p,m,g)})),triplanarTexture=(...e)=>triplanarTextures(...e),_reflectorPlane=new Plane,_normal=new Vector3,_reflectorWorldPosition=new Vector3,_cameraWorldPosition=new Vector3,_rotationMatrix=new Matrix4,_lookAtPosition=new Vector3(0,0,-1),clipPlane=new Vector4,_view=new Vector3,_target=new Vector3,_q=new Vector4,_size$2=new Vector2,_defaultRT=new RenderTarget,_defaultUV=screenUV.flipX();_defaultRT.depthTexture=new DepthTexture(1,1);let _inReflector=!1;class ReflectorNode extends TextureNode{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||_defaultRT.texture,_defaultUV),this._reflectorBaseNode=e.reflector||new ReflectorBaseNode(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=nodeObject(new ReflectorNode({defaultTexture:_defaultRT.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e.uvNode=this.uvNode,e.levelNode=this.levelNode,e.biasNode=this.biasNode,e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e._reflectorBaseNode=this._reflectorBaseNode,e}dispose(){super.dispose(),this._reflectorBaseNode.dispose()}}class ReflectorBaseNode extends Node{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new Object3D,resolution:i=1,generateMipmaps:n=!1,bounces:o=!0,depth:s=!1}=t;this.textureNode=e,this.target=r,this.resolution=i,this.generateMipmaps=n,this.bounces=o,this.depth=s,this.updateBeforeType=o?NodeUpdateType.RENDER:NodeUpdateType.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new Map,this.forceUpdate=!1,this.hasOutput=!1}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(_size$2),e.setSize(Math.round(_size$2.width*r),Math.round(_size$2.height*r))}setup(e){return this._updateResolution(_defaultRT,e.renderer),super.setup(e)}dispose(){super.dispose();for(const e of this.renderTargets.values())e.dispose()}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new RenderTarget(0,0,{type:HalfFloatType}),!0===this.generateMipmaps&&(t.texture.minFilter=LinearMipMapLinearFilter,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new DepthTexture),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&_inReflector)return!1;_inReflector=!0;const{scene:t,camera:r,renderer:i,material:n}=e,{target:o}=this,s=this.getVirtualCamera(r),a=this.getRenderTarget(s);i.getDrawingBufferSize(_size$2),this._updateResolution(a,i),_reflectorWorldPosition.setFromMatrixPosition(o.matrixWorld),_cameraWorldPosition.setFromMatrixPosition(r.matrixWorld),_rotationMatrix.extractRotation(o.matrixWorld),_normal.set(0,0,1),_normal.applyMatrix4(_rotationMatrix),_view.subVectors(_reflectorWorldPosition,_cameraWorldPosition);let l=!1;if(!0===_view.dot(_normal)>0&&!1===this.forceUpdate){if(!1===this.hasOutput)return void(_inReflector=!1);l=!0}_view.reflect(_normal).negate(),_view.add(_reflectorWorldPosition),_rotationMatrix.extractRotation(r.matrixWorld),_lookAtPosition.set(0,0,-1),_lookAtPosition.applyMatrix4(_rotationMatrix),_lookAtPosition.add(_cameraWorldPosition),_target.subVectors(_reflectorWorldPosition,_lookAtPosition),_target.reflect(_normal).negate(),_target.add(_reflectorWorldPosition),s.coordinateSystem=r.coordinateSystem,s.position.copy(_view),s.up.set(0,1,0),s.up.applyMatrix4(_rotationMatrix),s.up.reflect(_normal),s.lookAt(_target),s.near=r.near,s.far=r.far,s.updateMatrixWorld(),s.projectionMatrix.copy(r.projectionMatrix),_reflectorPlane.setFromNormalAndCoplanarPoint(_normal,_reflectorWorldPosition),_reflectorPlane.applyMatrix4(s.matrixWorldInverse),clipPlane.set(_reflectorPlane.normal.x,_reflectorPlane.normal.y,_reflectorPlane.normal.z,_reflectorPlane.constant);const u=s.projectionMatrix;_q.x=(Math.sign(clipPlane.x)+u.elements[8])/u.elements[0],_q.y=(Math.sign(clipPlane.y)+u.elements[9])/u.elements[5],_q.z=-1,_q.w=(1+u.elements[10])/u.elements[14],clipPlane.multiplyScalar(1/clipPlane.dot(_q));u.elements[2]=clipPlane.x,u.elements[6]=clipPlane.y,u.elements[10]=i.coordinateSystem===WebGPUCoordinateSystem?clipPlane.z-0:clipPlane.z+1-0,u.elements[14]=clipPlane.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),n.visible=!1;const d=i.getRenderTarget(),c=i.getMRT(),h=i.autoClear;i.setMRT(null),i.setRenderTarget(a),i.autoClear=!0,l?(i.clear(),this.hasOutput=!1):(i.render(t,s),this.hasOutput=!0),i.setMRT(c),i.setRenderTarget(d),i.autoClear=h,n.visible=!0,_inReflector=!1,this.forceUpdate=!1}}const reflector=e=>nodeObject(new ReflectorNode(e)),_camera=new OrthographicCamera(-1,1,1,-1,0,1);class QuadGeometry extends BufferGeometry{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Float32BufferAttribute([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Float32BufferAttribute(t,2))}}const _geometry=new QuadGeometry;class QuadMesh extends Mesh{constructor(e=null){super(_geometry,e),this.camera=_camera,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,_camera)}render(e){e.render(this,_camera)}}const _size$1=new Vector2;class RTTNode extends TextureNode{static get type(){return"RTTNode"}constructor(e,t=null,r=null,i={type:HalfFloatType}){const n=new RenderTarget(t,r,i);super(n.texture,uv$1()),this.isRTTNode=!0,this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=n,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new QuadMesh(new NodeMaterial),this.updateBeforeType=NodeUpdateType.RENDER}get autoResize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,i=t*this.pixelRatio;this.renderTarget.setSize(r,i),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoResize){const t=e.getPixelRatio(),r=e.getSize(_size$1),i=r.width*t,n=r.height*t;i===this.renderTarget.width&&n===this.renderTarget.height||(this.renderTarget.setSize(i,n),this.textureNeedsUpdate=!0)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new TextureNode(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const rtt=(e,...t)=>nodeObject(new RTTNode(nodeObject(e),...t)),convertToTexture=(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():rtt(e,...t),getViewPosition=Fn((([e,t,r],i)=>{let n;i.renderer.coordinateSystem===WebGPUCoordinateSystem?(e=vec2(e.x,e.y.oneMinus()).mul(2).sub(1),n=vec4(vec3(e,t),1)):n=vec4(vec3(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const o=vec4(r.mul(n));return o.xyz.div(o.w)})),getScreenPosition=Fn((([e,t])=>{const r=t.mul(vec4(e,1)),i=r.xy.div(r.w).mul(.5).add(.5).toVar();return vec2(i.x,i.y.oneMinus())})),getNormalFromDepth=Fn((([e,t,r])=>{const i=textureSize(textureLoad(t)),n=ivec2(e.mul(i)).toVar(),o=textureLoad(t,n).toVar(),s=textureLoad(t,n.sub(ivec2(2,0))).toVar(),a=textureLoad(t,n.sub(ivec2(1,0))).toVar(),l=textureLoad(t,n.add(ivec2(1,0))).toVar(),u=textureLoad(t,n.add(ivec2(2,0))).toVar(),d=textureLoad(t,n.add(ivec2(0,2))).toVar(),c=textureLoad(t,n.add(ivec2(0,1))).toVar(),h=textureLoad(t,n.sub(ivec2(0,1))).toVar(),p=textureLoad(t,n.sub(ivec2(0,2))).toVar(),m=abs(sub(float(2).mul(a).sub(s),o)).toVar(),g=abs(sub(float(2).mul(l).sub(u),o)).toVar(),f=abs(sub(float(2).mul(c).sub(d),o)).toVar(),x=abs(sub(float(2).mul(h).sub(p),o)).toVar(),_=getViewPosition(e,o,r).toVar(),y=m.lessThan(g).select(_.sub(getViewPosition(e.sub(vec2(float(1).div(i.x),0)),a,r)),_.negate().add(getViewPosition(e.add(vec2(float(1).div(i.x),0)),l,r))),T=f.lessThan(x).select(_.sub(getViewPosition(e.add(vec2(0,float(1).div(i.y))),c,r)),_.negate().add(getViewPosition(e.sub(vec2(0,float(1).div(i.y))),h,r)));return normalize(cross(y,T))}));class SampleNode extends Node{static get type(){return"SampleNode"}constructor(e){super(),this.callback=e,this.isSampleNode=!0}setup(){return this.sample(uv$1())}sample(e){return this.callback(e)}}const sample=e=>nodeObject(new SampleNode(e));class EventNode extends Node{static get type(){return"EventNode"}constructor(e,t){super("void"),this.eventType=e,this.callback=t,e===EventNode.OBJECT?this.updateType=NodeUpdateType.OBJECT:e===EventNode.MATERIAL&&(this.updateType=NodeUpdateType.RENDER)}update(e){this.callback(e)}}EventNode.OBJECT="object",EventNode.MATERIAL="material";const createEvent=(e,t)=>nodeObject(new EventNode(e,t)).toStack(),OnObjectUpdate=e=>createEvent(EventNode.OBJECT,e),OnMaterialUpdate=e=>createEvent(EventNode.MATERIAL,e);class StorageInstancedBufferAttribute extends InstancedBufferAttribute{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageInstancedBufferAttribute=!0}}class StorageBufferAttribute extends BufferAttribute{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageBufferAttribute=!0}}const attributeArray=(e,t="float")=>{let r,i;!0===t.isStruct?(r=t.layout.getLength(),i=getTypedArrayFromType("float")):(r=getLengthFromType(t),i=getTypedArrayFromType(t));const n=new StorageBufferAttribute(e,r,i);return storage(n,t,e)},instancedArray=(e,t="float")=>{let r,i;!0===t.isStruct?(r=t.layout.getLength(),i=getTypedArrayFromType("float")):(r=getLengthFromType(t),i=getTypedArrayFromType(t));const n=new StorageInstancedBufferAttribute(e,r,i);return storage(n,t,e)};class PointUVNode extends Node{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const pointUV=nodeImmutable(PointUVNode),_e1=new Euler,_m1=new Matrix4;class SceneNode extends Node{static get type(){return"SceneNode"}constructor(e=SceneNode.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let i;return t===SceneNode.BACKGROUND_BLURRINESS?i=reference("backgroundBlurriness","float",r):t===SceneNode.BACKGROUND_INTENSITY?i=reference("backgroundIntensity","float",r):t===SceneNode.BACKGROUND_ROTATION?i=uniform("mat4").setName("backgroundRotation").setGroup(renderGroup).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==UVMapping?(_e1.copy(r.backgroundRotation),_e1.x*=-1,_e1.y*=-1,_e1.z*=-1,_m1.makeRotationFromEuler(_e1)):_m1.identity(),_m1})):console.error("THREE.SceneNode: Unknown scope:",t),i}}SceneNode.BACKGROUND_BLURRINESS="backgroundBlurriness",SceneNode.BACKGROUND_INTENSITY="backgroundIntensity",SceneNode.BACKGROUND_ROTATION="backgroundRotation";const backgroundBlurriness=nodeImmutable(SceneNode,SceneNode.BACKGROUND_BLURRINESS),backgroundIntensity=nodeImmutable(SceneNode,SceneNode.BACKGROUND_INTENSITY),backgroundRotation=nodeImmutable(SceneNode,SceneNode.BACKGROUND_ROTATION);class StorageTextureNode extends TextureNode{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=NodeAccess.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);const t=e.getNodeProperties(this);return t.storeNode=this.storeNode,t}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(NodeAccess.READ_WRITE)}toReadOnly(){return this.setAccess(NodeAccess.READ_ONLY)}toWriteOnly(){return this.setAccess(NodeAccess.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:i,depthNode:n}=t,o=super.generate(e,"property"),s=r.build(e,!0===this.value.is3DTexture?"uvec3":"uvec2"),a=i.build(e,"vec4"),l=n?n.build(e,"int"):null,u=e.generateTextureStore(e,o,s,l,a);e.addLineFlowCode(u,this)}clone(){const e=super.clone();return e.storeNode=this.storeNode,e}}const storageTexture=nodeProxy(StorageTextureNode).setParameterLength(1,3),textureStore=(e,t,r)=>{const i=storageTexture(e,t,r);return null!==r&&i.toStack(),i},normal=Fn((({texture:e,uv:t})=>{const r=1e-4,i=vec3().toVar();return If(t.x.lessThan(r),(()=>{i.assign(vec3(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{i.assign(vec3(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{i.assign(vec3(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{i.assign(vec3(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{i.assign(vec3(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{i.assign(vec3(0,0,-1))})).Else((()=>{const r=.01,n=e.sample(t.add(vec3(-.01,0,0))).r.sub(e.sample(t.add(vec3(r,0,0))).r),o=e.sample(t.add(vec3(0,-.01,0))).r.sub(e.sample(t.add(vec3(0,r,0))).r),s=e.sample(t.add(vec3(0,0,-.01))).r.sub(e.sample(t.add(vec3(0,0,r))).r);i.assign(vec3(n,o,s))})),i.normalize()}));class Texture3DNode extends TextureNode{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return vec3(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return!e.isFlipY()||!0!==r.isRenderTargetTexture&&!0!==r.isFramebufferTexture||(t=this.sampler?t.flipY():t.setY(int(textureSize(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return normal({texture:this,uv:e})}}const texture3D=nodeProxy(Texture3DNode).setParameterLength(1,3);class UserDataNode extends ReferenceNode{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const userData=(e,t,r)=>nodeObject(new UserDataNode(e,t,r)),_objectData=new WeakMap;class VelocityNode extends TempNode{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=NodeUpdateType.OBJECT,this.updateAfterType=NodeUpdateType.OBJECT,this.previousModelWorldMatrix=uniform(new Matrix4),this.previousProjectionMatrix=uniform(new Matrix4).setGroup(renderGroup),this.previousCameraViewMatrix=uniform(new Matrix4)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const i=getPreviousMatrix(r);this.previousModelWorldMatrix.value.copy(i);const n=getData(t);n.frameId!==e&&(n.frameId=e,void 0===n.previousProjectionMatrix?(n.previousProjectionMatrix=new Matrix4,n.previousCameraViewMatrix=new Matrix4,n.currentProjectionMatrix=new Matrix4,n.currentCameraViewMatrix=new Matrix4,n.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),n.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(n.previousProjectionMatrix.copy(n.currentProjectionMatrix),n.previousCameraViewMatrix.copy(n.currentCameraViewMatrix)),n.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),n.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(n.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(n.previousCameraViewMatrix))}updateAfter({object:e}){getPreviousMatrix(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?cameraProjectionMatrix:uniform(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul(modelViewMatrix).mul(positionLocal),i=this.previousProjectionMatrix.mul(t).mul(positionPrevious),n=r.xy.div(r.w),o=i.xy.div(i.w);return sub(n,o)}}function getData(e){let t=_objectData.get(e);return void 0===t&&(t={},_objectData.set(e,t)),t}function getPreviousMatrix(e,t=0){const r=getData(e);let i=r[t];return void 0===i&&(r[t]=i=new Matrix4,r[t].copy(e.matrixWorld)),i}const velocity=nodeImmutable(VelocityNode),grayscale=Fn((([e])=>luminance(e.rgb))),saturation=Fn((([e,t=float(1)])=>t.mix(luminance(e.rgb),e.rgb))),vibrance=Fn((([e,t=float(1)])=>{const r=add(e.r,e.g,e.b).div(3),i=e.r.max(e.g.max(e.b)),n=i.sub(r).mul(t).mul(-3);return mix(e.rgb,i,n)})),hue=Fn((([e,t=float(1)])=>{const r=vec3(.57735,.57735,.57735),i=t.cos();return vec3(e.rgb.mul(i).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(dot(r,e.rgb).mul(i.oneMinus())))))})),luminance=(e,t=vec3(ColorManagement.getLuminanceCoefficients(new Vector3)))=>dot(e,t),cdl=Fn((([e,t=vec3(1),r=vec3(0),i=vec3(1),n=float(1),o=vec3(ColorManagement.getLuminanceCoefficients(new Vector3,LinearSRGBColorSpace))])=>{const s=e.rgb.dot(vec3(o)),a=max$1(e.rgb.mul(t).add(r),0).toVar(),l=a.pow(i).toVar();return If(a.r.greaterThan(0),(()=>{a.r.assign(l.r)})),If(a.g.greaterThan(0),(()=>{a.g.assign(l.g)})),If(a.b.greaterThan(0),(()=>{a.b.assign(l.b)})),a.assign(s.add(a.sub(s).mul(n))),vec4(a.rgb,e.a)}));class PosterizeNode extends TempNode{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const posterize=nodeProxy(PosterizeNode).setParameterLength(2),_size=new Vector2;class PassTextureNode extends TextureNode{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class PassMultipleTextureNode extends PassTextureNode{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){const e=new this.constructor(this.passNode,this.textureName,this.previousTexture);return e.uvNode=this.uvNode,e.levelNode=this.levelNode,e.biasNode=this.biasNode,e.sampler=this.sampler,e.depthNode=this.depthNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e}}class PassNode extends TempNode{static get type(){return"PassNode"}constructor(e,t,r,i={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=i,this._pixelRatio=1,this._width=1,this._height=1;const n=new DepthTexture;n.isRenderTargetTexture=!0,n.name="depth";const o=new RenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:HalfFloatType,...i});o.texture.name="output",o.depthTexture=n,this.renderTarget=o,this._textures={output:o.texture,depth:n},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=uniform(0),this._cameraFar=uniform(0),this._mrt=null,this._layers=null,this._resolution=1,this._viewport=null,this._scissor=null,this.isPassNode=!0,this.updateBeforeType=NodeUpdateType.FRAME,this.global=!0}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],i=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[i]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=nodeObject(new PassMultipleTextureNode(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=nodeObject(new PassMultipleTextureNode(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,i=this._cameraFar;this._viewZNodes[e]=t=perspectiveDepthToViewZ(this.getTextureNode(e),r,i)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,i=this._cameraFar,n=this.getViewZNode(e);this._linearDepthNodes[e]=t=viewZToOrthographicDepth(n,r,i)}return t}async compileAsync(e){const t=e.getRenderTarget(),r=e.getMRT();e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),await e.compileAsync(this.scene,this.camera),e.setRenderTarget(t),e.setMRT(r)}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,this.renderTarget.texture.type=e.getColorBufferType(),this.scope===PassNode.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r}=this;let i,n;const o=t.getOutputRenderTarget();o&&!0===o.isXRRenderTarget?(n=1,i=t.xr.getCamera(),t.xr.updateCamera(i),_size.set(o.width,o.height)):(i=this.camera,n=t.getPixelRatio(),t.getSize(_size)),this._pixelRatio=n,this.setSize(_size.width,_size.height);const s=t.getRenderTarget(),a=t.getMRT(),l=i.layers.mask;this._cameraNear.value=i.near,this._cameraFar.value=i.far,null!==this._layers&&(i.layers.mask=this._layers.mask);for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,i),t.setRenderTarget(s),t.setMRT(a),i.layers.mask=l}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio*this._resolution,i=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(r,i),null!==this._scissor&&this.renderTarget.scissor.copy(this._scissor),null!==this._viewport&&this.renderTarget.viewport.copy(this._viewport)}setScissor(e,t,r,i){null===e?this._scissor=null:(null===this._scissor&&(this._scissor=new Vector4),e.isVector4?this._scissor.copy(e):this._scissor.set(e,t,r,i),this._scissor.multiplyScalar(this._pixelRatio*this._resolution).floor())}setViewport(e,t,r,i){null===e?this._viewport=null:(null===this._viewport&&(this._viewport=new Vector4),e.isVector4?this._viewport.copy(e):this._viewport.set(e,t,r,i),this._viewport.multiplyScalar(this._pixelRatio*this._resolution).floor())}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}PassNode.COLOR="color",PassNode.DEPTH="depth";const pass=(e,t,r)=>nodeObject(new PassNode(PassNode.COLOR,e,t,r)),passTexture=(e,t)=>nodeObject(new PassTextureNode(e,t)),depthPass=(e,t,r)=>nodeObject(new PassNode(PassNode.DEPTH,e,t,r));class ToonOutlinePassNode extends PassNode{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,i,n){super(PassNode.COLOR,e,t),this.colorNode=r,this.thicknessNode=i,this.alphaNode=n,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,i,n,o,s,a,l)=>{if((o.isMeshToonMaterial||o.isMeshToonNodeMaterial)&&!1===o.wireframe){const u=this._getOutlineMaterial(o);t.renderObject(e,r,i,n,u,s,a,l)}t.renderObject(e,r,i,n,o,s,a,l)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new NodeMaterial;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=BackSide;const t=normalLocal.negate(),r=cameraProjectionMatrix.mul(modelViewMatrix),i=float(1),n=r.mul(vec4(positionLocal,1)),o=r.mul(vec4(positionLocal.add(t),1)),s=normalize(n.sub(o));return e.vertexNode=n.add(s.mul(this.thicknessNode).mul(n.w).mul(i)),e.colorNode=vec4(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const toonOutlinePass=(e,t,r=new Color(0,0,0),i=.003,n=1)=>nodeObject(new ToonOutlinePassNode(e,t,nodeObject(r),nodeObject(i),nodeObject(n))),linearToneMapping=Fn((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),reinhardToneMapping=Fn((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),cineonToneMapping=Fn((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),i=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(i).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),RRTAndODTFit=Fn((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),acesFilmicToneMapping=Fn((([e,t])=>{const r=mat3(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),i=mat3(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=RRTAndODTFit(e),(e=i.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),LINEAR_REC2020_TO_LINEAR_SRGB=mat3(vec3(1.6605,-.1246,-.0182),vec3(-.5876,1.1329,-.1006),vec3(-.0728,-.0083,1.1187)),LINEAR_SRGB_TO_LINEAR_REC2020=mat3(vec3(.6274,.0691,.0164),vec3(.3293,.9195,.088),vec3(.0433,.0113,.8956)),agxDefaultContrastApprox=Fn((([e])=>{const t=vec3(e).toVar(),r=vec3(t.mul(t)).toVar(),i=vec3(r.mul(r)).toVar();return float(15.5).mul(i.mul(r)).sub(mul(40.14,i.mul(t))).add(mul(31.96,i).sub(mul(6.868,r.mul(t))).add(mul(.4298,r).add(mul(.1191,t).sub(.00232))))})),agxToneMapping=Fn((([e,t])=>{const r=vec3(e).toVar(),i=mat3(vec3(.856627153315983,.137318972929847,.11189821299995),vec3(.0951212405381588,.761241990602591,.0767994186031903),vec3(.0482516061458583,.101439036467562,.811302368396859)),n=mat3(vec3(1.1271005818144368,-.1413297634984383,-.14132976349843826),vec3(-.11060664309660323,1.157823702216272,-.11060664309660294),vec3(-.016493938717834573,-.016493938717834257,1.2519364065950405)),o=float(-12.47393),s=float(4.026069);return r.mulAssign(t),r.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(r)),r.assign(i.mul(r)),r.assign(max$1(r,1e-10)),r.assign(log2(r)),r.assign(r.sub(o).div(s.sub(o))),r.assign(clamp(r,0,1)),r.assign(agxDefaultContrastApprox(r)),r.assign(n.mul(r)),r.assign(pow(max$1(vec3(0),r),vec3(2.2))),r.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(r)),r.assign(clamp(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),neutralToneMapping=Fn((([e,t])=>{const r=float(.76),i=float(.15);e=e.mul(t);const n=min$1(e.r,min$1(e.g,e.b)),o=select(n.lessThan(.08),n.sub(mul(6.25,n.mul(n))),.04);e.subAssign(o);const s=max$1(e.r,max$1(e.g,e.b));If(s.lessThan(r),(()=>e));const a=sub(1,r),l=sub(1,a.mul(a).div(s.add(a.sub(r))));e.mulAssign(l.div(s));const u=sub(1,div(1,i.mul(s.sub(l)).add(1)));return mix(e,vec3(l),u)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class CodeNode extends Node{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.global=!0,this.code=e,this.includes=t,this.language=r}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const code=nodeProxy(CodeNode).setParameterLength(1,3),js=(e,t)=>code(e,t,"js"),wgsl=(e,t)=>code(e,t,"wgsl"),glsl=(e,t)=>code(e,t,"glsl");class FunctionNode extends CodeNode{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),i=r.name,n=r.type,o=e.getCodeFromNode(this,n);""!==i&&(o.name=i);const s=e.getPropertyName(o),a=this.getNodeFunction(e).getCode(s);return o.code=a+"\n","property"===t?s:e.format(`${s}()`,n,t)}}const nativeFn=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const i=nodeObject(new FunctionNode(e,t,r)),n=(...e)=>i.call(...e);return n.functionNode=i,n},glslFn=(e,t)=>nativeFn(e,t,"glsl"),wgslFn=(e,t)=>nativeFn(e,t,"wgsl");class ScriptableValueNode extends Node{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new EventDispatcher,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:float()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=arrayBufferToBase64(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?base64ToArrayBuffer(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const scriptableValue=nodeProxy(ScriptableValueNode).setParameterLength(1);class Resources extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const i=t(...r);return this.set(e,i),i}}}class Parameters{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const ScriptableNodeResources=new Resources;class ScriptableNode extends Node{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new Resources,this._output=scriptableValue(null),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=scriptableValue(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=scriptableValue(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new Parameters(this),t=ScriptableNodeResources.get("THREE"),r=ScriptableNodeResources.get("TSL"),i=this.getMethod(),n=[e,this._local,ScriptableNodeResources,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=i(...n);const o=this._object.layout;if(o&&(!1===o.cache&&this._local.clear(),this._output.outputType=o.outputType||null,Array.isArray(o.elements)))for(const e of o.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:float()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[hashString(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return hashArray(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const scriptable=nodeProxy(ScriptableNode).setParameterLength(1,2);function getViewZNode(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||positionView.z).negate()}const rangeFogFactor=Fn((([e,t],r)=>{const i=getViewZNode(r);return smoothstep(e,t,i)})),densityFogFactor=Fn((([e],t)=>{const r=getViewZNode(t);return e.mul(e,r,r).negate().exp().oneMinus()})),fog=Fn((([e,t])=>vec4(t.toFloat().mix(output.rgb,e.toVec3()),output.a)));function rangeFog(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),fog(e,rangeFogFactor(t,r))}function densityFog(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),fog(e,densityFogFactor(t))}let min=null,max=null;class RangeNode extends Node{static get type(){return"RangeNode"}constructor(e=float(),t=float()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(getValueType(this.minNode.value)),r=e.getTypeLength(getValueType(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(getValueType(i)),s=e.getTypeLength(getValueType(n));min=min||new Vector4,max=max||new Vector4,min.setScalar(0),max.setScalar(0),1===o?min.setScalar(i):i.isColor?min.set(i.r,i.g,i.b,1):min.set(i.x,i.y,i.z||0,i.w||0),1===s?max.setScalar(n):n.isColor?max.set(n.r,n.g,n.b,1):max.set(n.x,n.y,n.z||0,n.w||0);const a=4,l=a*t.count,u=new Float32Array(l);for(let e=0;e<l;e++){const t=e%a,r=min.getComponent(t),i=max.getComponent(t);u[e]=MathUtils.lerp(r,i,Math.random())}const d=this.getNodeType(e);if(t.count<=4096)r=buffer(u,"vec4",t.count).element(instanceIndex).convert(d);else{const t=new InstancedBufferAttribute(u,4);e.geometry.setAttribute("__range"+this.id,t),r=instancedBufferAttribute(t).convert(d)}}else r=float(0);return r}}const range=nodeProxy(RangeNode).setParameterLength(2);class ComputeBuiltinNode extends Node{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){return e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),i=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,i,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(i))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const computeBuiltin=(e,t)=>nodeObject(new ComputeBuiltinNode(e,t)),numWorkgroups=computeBuiltin("numWorkgroups","uvec3"),workgroupId=computeBuiltin("workgroupId","uvec3"),globalId=computeBuiltin("globalId","uvec3"),localId=computeBuiltin("localId","uvec3"),subgroupSize=computeBuiltin("subgroupSize","uint");class BarrierNode extends Node{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}}const barrier=nodeProxy(BarrierNode),workgroupBarrier=()=>barrier("workgroup").toStack(),storageBarrier=()=>barrier("storage").toStack(),textureBarrier=()=>barrier("texture").toStack();class WorkgroupInfoElementNode extends ArrayElementNode{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const i=e.context.assign;if(r=super.generate(e),!0!==i){const i=this.getNodeType(e);r=e.format(r,i,t)}return r}}class WorkgroupInfoNode extends Node{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e,this.name=""}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return nodeObject(new WorkgroupInfoElementNode(this,e))}generate(e){const t=""!==this.name?this.name:`${this.scope}Array_${this.id}`;return e.getScopedArray(t,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}const workgroupArray=(e,t)=>nodeObject(new WorkgroupInfoNode("Workgroup",e,t));class AtomicFunctionNode extends Node{static get type(){return"AtomicFunctionNode"}constructor(e,t,r){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.parents=!0}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=e.getNodeProperties(this),r=t.parents,i=this.method,n=this.getNodeType(e),o=this.getInputType(e),s=this.pointerNode,a=this.valueNode,l=[];l.push(`&${s.build(e,o)}`),null!==a&&l.push(a.build(e,o));const u=`${e.getMethod(i,n)}( ${l.join(", ")} )`;if(!(!!r&&(1===r.length&&!0===r[0].isStackNode)))return void 0===t.constNode&&(t.constNode=expression(u,n).toConst()),t.constNode.build(e);e.addLineFlowCode(u,this)}}AtomicFunctionNode.ATOMIC_LOAD="atomicLoad",AtomicFunctionNode.ATOMIC_STORE="atomicStore",AtomicFunctionNode.ATOMIC_ADD="atomicAdd",AtomicFunctionNode.ATOMIC_SUB="atomicSub",AtomicFunctionNode.ATOMIC_MAX="atomicMax",AtomicFunctionNode.ATOMIC_MIN="atomicMin",AtomicFunctionNode.ATOMIC_AND="atomicAnd",AtomicFunctionNode.ATOMIC_OR="atomicOr",AtomicFunctionNode.ATOMIC_XOR="atomicXor";const atomicNode=nodeProxy(AtomicFunctionNode),atomicFunc=(e,t,r)=>atomicNode(e,t,r).toStack(),atomicLoad=e=>atomicFunc(AtomicFunctionNode.ATOMIC_LOAD,e,null),atomicStore=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_STORE,e,t),atomicAdd=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_ADD,e,t),atomicSub=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_SUB,e,t),atomicMax=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_MAX,e,t),atomicMin=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_MIN,e,t),atomicAnd=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_AND,e,t),atomicOr=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_OR,e,t),atomicXor=(e,t)=>atomicFunc(AtomicFunctionNode.ATOMIC_XOR,e,t);let uniformsLib;function getLightData(e){uniformsLib=uniformsLib||new WeakMap;let t=uniformsLib.get(e);return void 0===t&&uniformsLib.set(e,t={}),t}function lightShadowMatrix(e){const t=getLightData(e);return t.shadowMatrix||(t.shadowMatrix=uniform("mat4").setGroup(renderGroup).onRenderUpdate((t=>(!0===e.castShadow&&!1!==t.renderer.shadowMap.enabled||e.shadow.updateMatrices(e),e.shadow.matrix))))}function lightProjectionUV(e,t=positionWorld){const r=lightShadowMatrix(e).mul(t);return r.xyz.div(r.w)}function lightPosition(e){const t=getLightData(e);return t.position||(t.position=uniform(new Vector3).setGroup(renderGroup).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function lightTargetPosition(e){const t=getLightData(e);return t.targetPosition||(t.targetPosition=uniform(new Vector3).setGroup(renderGroup).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function lightViewPosition(e){const t=getLightData(e);return t.viewPosition||(t.viewPosition=uniform(new Vector3).setGroup(renderGroup).onRenderUpdate((({camera:t},r)=>{r.value=r.value||new Vector3,r.value.setFromMatrixPosition(e.matrixWorld),r.value.applyMatrix4(t.matrixWorldInverse)})))}const lightTargetDirection=e=>cameraViewMatrix.transformDirection(lightPosition(e).sub(lightTargetPosition(e))),sortLights=e=>e.sort(((e,t)=>e.id-t.id)),getLightNodeById=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},_lightsNodeRef=new WeakMap,_hashData=[];class LightsNode extends Node{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=property("vec3","totalDiffuse"),this.totalSpecularNode=property("vec3","totalSpecular"),this.outgoingLightNode=property("vec3","outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=this._lights;for(let t=0;t<e.length;t++){const r=e[t];if(_hashData.push(r.id),_hashData.push(r.castShadow?1:0),!0===r.isSpotLight){const e=null!==r.map?r.map.id:-1,t=r.colorNode?r.colorNode.getCacheKey():-1;_hashData.push(e,t)}}const t=hashArray(_hashData);return _hashData.length=0,t}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getNodeProperties(this);for(const r of t.nodes)r.build(e);t.outputNode.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,i=sortLights(this._lights),n=e.renderer.library;for(const e of i)if(e.isNode)t.push(nodeObject(e));else{let i=null;if(null!==r&&(i=getLightNodeById(e.id,r)),null===i){const r=n.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let i=null;_lightsNodeRef.has(e)?i=_lightsNodeRef.get(e):(i=nodeObject(new r(e)),_lightsNodeRef.set(e,i)),t.push(i)}}this._lightNodes=t}setupDirectLight(e,t,r){const{lightingModel:i,reflectedLight:n}=e.context;i.direct({...r,lightNode:t,reflectedLight:n},e)}setupDirectRectAreaLight(e,t,r){const{lightingModel:i,reflectedLight:n}=e.context;i.directRectArea({...r,lightNode:t,reflectedLight:n},e)}setupLights(e,t){for(const r of t)r.build(e)}getLightNodes(e){return null===this._lightNodes&&this.setupLightsNode(e),this._lightNodes}setup(e){const t=e.lightsNode;e.lightsNode=this;let r=this.outgoingLightNode;const i=e.context,n=i.lightingModel,o=e.getNodeProperties(this);if(n){const{totalDiffuseNode:t,totalSpecularNode:s}=this;i.outgoingLight=r;const a=e.addStack();o.nodes=a.nodes,n.start(e);const{backdrop:l,backdropAlpha:u}=i,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=i.reflectedLight;let m=d.add(h);null!==l&&(m=vec3(null!==u?u.mix(m,l):l),i.material.transparent=!0),t.assign(m),s.assign(c.add(p)),r.assign(t.add(s)),n.finish(e),r=r.bypass(e.removeStack())}else o.nodes=[];return e.lightsNode=t,r}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const lights=(e=[])=>nodeObject(new LightsNode).setLights(e);class ShadowBaseNode extends Node{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=NodeUpdateType.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({context:e,material:t}){shadowPositionWorld.assign(t.receivedShadowPositionNode||e.shadowPositionWorld||positionWorld)}}const shadowPositionWorld=property("vec3","shadowPositionWorld");function saveRendererState(e,t={}){return t.toneMapping=e.toneMapping,t.toneMappingExposure=e.toneMappingExposure,t.outputColorSpace=e.outputColorSpace,t.renderTarget=e.getRenderTarget(),t.activeCubeFace=e.getActiveCubeFace(),t.activeMipmapLevel=e.getActiveMipmapLevel(),t.renderObjectFunction=e.getRenderObjectFunction(),t.pixelRatio=e.getPixelRatio(),t.mrt=e.getMRT(),t.clearColor=e.getClearColor(t.clearColor||new Color),t.clearAlpha=e.getClearAlpha(),t.autoClear=e.autoClear,t.scissorTest=e.getScissorTest(),t}function resetRendererState(e,t){return t=saveRendererState(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}function restoreRendererState(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function saveSceneState(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}function resetSceneState(e,t){return t=saveSceneState(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}function restoreSceneState(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}function saveRendererAndSceneState(e,t,r={}){return r=saveSceneState(t,r=saveRendererState(e,r))}function resetRendererAndSceneState(e,t,r){return r=resetSceneState(t,r=resetRendererState(e,r))}function restoreRendererAndSceneState(e,t,r){restoreRendererState(e,r),restoreSceneState(t,r)}var RendererUtils=Object.freeze({__proto__:null,resetRendererAndSceneState:resetRendererAndSceneState,resetRendererState:resetRendererState,resetSceneState:resetSceneState,restoreRendererAndSceneState:restoreRendererAndSceneState,restoreRendererState:restoreRendererState,restoreSceneState:restoreSceneState,saveRendererAndSceneState:saveRendererAndSceneState,saveRendererState:saveRendererState,saveSceneState:saveSceneState});const shadowMaterialLib=new WeakMap,BasicShadowFilter=Fn((({depthTexture:e,shadowCoord:t,depthLayer:r})=>{let i=texture(e,t.xy).setName("t_basic");return e.isArrayTexture&&(i=i.depth(r)),i.compare(t.z)})),PCFShadowFilter=Fn((({depthTexture:e,shadowCoord:t,shadow:r,depthLayer:i})=>{const n=(t,r)=>{let n=texture(e,t);return e.isArrayTexture&&(n=n.depth(i)),n.compare(r)},o=reference("mapSize","vec2",r).setGroup(renderGroup),s=reference("radius","float",r).setGroup(renderGroup),a=vec2(1).div(o),l=a.x.negate().mul(s),u=a.y.negate().mul(s),d=a.x.mul(s),c=a.y.mul(s),h=l.div(2),p=u.div(2),m=d.div(2),g=c.div(2);return add(n(t.xy.add(vec2(l,u)),t.z),n(t.xy.add(vec2(0,u)),t.z),n(t.xy.add(vec2(d,u)),t.z),n(t.xy.add(vec2(h,p)),t.z),n(t.xy.add(vec2(0,p)),t.z),n(t.xy.add(vec2(m,p)),t.z),n(t.xy.add(vec2(l,0)),t.z),n(t.xy.add(vec2(h,0)),t.z),n(t.xy,t.z),n(t.xy.add(vec2(m,0)),t.z),n(t.xy.add(vec2(d,0)),t.z),n(t.xy.add(vec2(h,g)),t.z),n(t.xy.add(vec2(0,g)),t.z),n(t.xy.add(vec2(m,g)),t.z),n(t.xy.add(vec2(l,c)),t.z),n(t.xy.add(vec2(0,c)),t.z),n(t.xy.add(vec2(d,c)),t.z)).mul(1/17)})),PCFSoftShadowFilter=Fn((({depthTexture:e,shadowCoord:t,shadow:r,depthLayer:i})=>{const n=(t,r)=>{let n=texture(e,t);return e.isArrayTexture&&(n=n.depth(i)),n.compare(r)},o=reference("mapSize","vec2",r).setGroup(renderGroup),s=vec2(1).div(o),a=s.x,l=s.y,u=t.xy,d=fract(u.mul(o).add(.5));return u.subAssign(d.mul(s)),add(n(u,t.z),n(u.add(vec2(a,0)),t.z),n(u.add(vec2(0,l)),t.z),n(u.add(s),t.z),mix(n(u.add(vec2(a.negate(),0)),t.z),n(u.add(vec2(a.mul(2),0)),t.z),d.x),mix(n(u.add(vec2(a.negate(),l)),t.z),n(u.add(vec2(a.mul(2),l)),t.z),d.x),mix(n(u.add(vec2(0,l.negate())),t.z),n(u.add(vec2(0,l.mul(2))),t.z),d.y),mix(n(u.add(vec2(a,l.negate())),t.z),n(u.add(vec2(a,l.mul(2))),t.z),d.y),mix(mix(n(u.add(vec2(a.negate(),l.negate())),t.z),n(u.add(vec2(a.mul(2),l.negate())),t.z),d.x),mix(n(u.add(vec2(a.negate(),l.mul(2))),t.z),n(u.add(vec2(a.mul(2),l.mul(2))),t.z),d.x),d.y)).mul(1/9)})),VSMShadowFilter=Fn((({depthTexture:e,shadowCoord:t,depthLayer:r})=>{const i=float(1).toVar();let n=texture(e).sample(t.xy);e.isArrayTexture&&(n=n.depth(r)),n=n.rg;const o=step(t.z,n.x);return If(o.notEqual(float(1)),(()=>{const e=t.z.sub(n.x),r=max$1(0,n.y.mul(n.y));let s=r.div(r.add(e.mul(e)));s=clamp(sub(s,.3).div(.95-.3)),i.assign(clamp(max$1(o,s)))})),i})),linearDistance=Fn((([e,t,r])=>{let i=positionWorld.sub(e).length();return i=i.sub(t).div(r.sub(t)),i=i.saturate(),i})),linearShadowDistance=e=>{const t=e.shadow.camera,r=reference("near","float",t).setGroup(renderGroup),i=reference("far","float",t).setGroup(renderGroup),n=objectPosition(e);return linearDistance(n,r,i)},getShadowMaterial=e=>{let t=shadowMaterialLib.get(e);if(void 0===t){const r=e.isPointLight?linearShadowDistance(e):null;t=new NodeMaterial,t.colorNode=vec4(0,0,0,1),t.depthNode=r,t.isShadowPassMaterial=!0,t.name="ShadowMaterial",t.fog=!1,shadowMaterialLib.set(e,t)}return t},_shadowRenderObjectLibrary=new ChainMap,_shadowRenderObjectKeys=[],getShadowRenderObjectFunction=(e,t,r,i)=>{_shadowRenderObjectKeys[0]=e,_shadowRenderObjectKeys[1]=t;let n=_shadowRenderObjectLibrary.get(_shadowRenderObjectKeys);return void 0!==n&&n.shadowType===r&&n.useVelocity===i||(n=(n,o,s,a,l,u,...d)=>{(!0===n.castShadow||n.receiveShadow&&r===VSMShadowMap)&&(i&&(getDataFromObject(n).useVelocity=!0),n.onBeforeShadow(e,n,s,t.camera,a,o.overrideMaterial,u),e.renderObject(n,o,s,a,l,u,...d),n.onAfterShadow(e,n,s,t.camera,a,o.overrideMaterial,u))},n.shadowType=r,n.useVelocity=i,_shadowRenderObjectLibrary.set(_shadowRenderObjectKeys,n)),_shadowRenderObjectKeys[0]=null,_shadowRenderObjectKeys[1]=null,n},VSMPassVertical=Fn((({samples:e,radius:t,size:r,shadowPass:i,depthLayer:n})=>{const o=float(0).toVar("meanVertical"),s=float(0).toVar("squareMeanVertical"),a=e.lessThanEqual(float(1)).select(float(0),float(2).div(e.sub(1))),l=e.lessThanEqual(float(1)).select(float(0),float(-1));Loop({start:int(0),end:int(e),type:"int",condition:"<"},(({i:e})=>{const u=l.add(float(e).mul(a));let d=i.sample(add(screenCoordinate.xy,vec2(0,u).mul(t)).div(r));i.value.isArrayTexture&&(d=d.depth(n)),d=d.x,o.addAssign(d),s.addAssign(d.mul(d))})),o.divAssign(e),s.divAssign(e);const u=sqrt(s.sub(o.mul(o)));return vec2(o,u)})),VSMPassHorizontal=Fn((({samples:e,radius:t,size:r,shadowPass:i,depthLayer:n})=>{const o=float(0).toVar("meanHorizontal"),s=float(0).toVar("squareMeanHorizontal"),a=e.lessThanEqual(float(1)).select(float(0),float(2).div(e.sub(1))),l=e.lessThanEqual(float(1)).select(float(0),float(-1));Loop({start:int(0),end:int(e),type:"int",condition:"<"},(({i:e})=>{const u=l.add(float(e).mul(a));let d=i.sample(add(screenCoordinate.xy,vec2(u,0).mul(t)).div(r));i.value.isArrayTexture&&(d=d.depth(n)),o.addAssign(d.x),s.addAssign(add(d.y.mul(d.y),d.x.mul(d.x)))})),o.divAssign(e),s.divAssign(e);const u=sqrt(s.sub(o.mul(o)));return vec2(o,u)})),_shadowFilterLib=[BasicShadowFilter,PCFShadowFilter,PCFSoftShadowFilter,VSMShadowFilter];let _rendererState;const _quadMesh=new QuadMesh;class ShadowNode extends ShadowBaseNode{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this._cameraFrameId=new WeakMap,this.isShadowNode=!0,this.depthLayer=0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:i,shadow:n,depthLayer:o}){const s=i.x.greaterThanEqual(0).and(i.x.lessThanEqual(1)).and(i.y.greaterThanEqual(0)).and(i.y.lessThanEqual(1)).and(i.z.lessThanEqual(1)),a=t({depthTexture:r,shadowCoord:i,shadow:n,depthLayer:o});return s.select(a,float(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:i}=e,n=reference("bias","float",r).setGroup(renderGroup);let o,s=t;if(r.camera.isOrthographicCamera||!0!==i.logarithmicDepthBuffer)s=s.xyz.div(s.w),o=s.z,i.coordinateSystem===WebGPUCoordinateSystem&&(o=o.mul(2).sub(1));else{const e=s.w;s=s.xy.div(e);const t=reference("near","float",r.camera).setGroup(renderGroup),i=reference("far","float",r.camera).setGroup(renderGroup);o=viewZToLogarithmicDepth(e.negate(),t,i)}return s=vec3(s.x,s.y.oneMinus(),o.add(n)),s}getShadowFilterFn(e){return _shadowFilterLib[e]}setupRenderTarget(e,t){const r=new DepthTexture(e.mapSize.width,e.mapSize.height);r.name="ShadowDepthTexture",r.compareFunction=LessCompare;const i=t.createRenderTarget(e.mapSize.width,e.mapSize.height);return i.texture.name="ShadowMap",i.texture.type=e.mapType,i.depthTexture=r,{shadowMap:i,depthTexture:r}}setupShadow(e){const{renderer:t}=e,{light:r,shadow:i}=this,n=t.shadowMap.type,{depthTexture:o,shadowMap:s}=this.setupRenderTarget(i,e);if(i.camera.updateProjectionMatrix(),n===VSMShadowMap&&!0!==i.isPointLightShadow){o.compareFunction=null,s.depth>1?(s._vsmShadowMapVertical||(s._vsmShadowMapVertical=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:RGFormat,type:HalfFloatType,depth:s.depth,depthBuffer:!1}),s._vsmShadowMapVertical.texture.name="VSMVertical"),this.vsmShadowMapVertical=s._vsmShadowMapVertical,s._vsmShadowMapHorizontal||(s._vsmShadowMapHorizontal=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:RGFormat,type:HalfFloatType,depth:s.depth,depthBuffer:!1}),s._vsmShadowMapHorizontal.texture.name="VSMHorizontal"),this.vsmShadowMapHorizontal=s._vsmShadowMapHorizontal):(this.vsmShadowMapVertical=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:RGFormat,type:HalfFloatType,depthBuffer:!1}),this.vsmShadowMapHorizontal=e.createRenderTarget(i.mapSize.width,i.mapSize.height,{format:RGFormat,type:HalfFloatType,depthBuffer:!1}));let t=texture(o);o.isArrayTexture&&(t=t.depth(this.depthLayer));let r=texture(this.vsmShadowMapVertical.texture);o.isArrayTexture&&(r=r.depth(this.depthLayer));const n=reference("blurSamples","float",i).setGroup(renderGroup),a=reference("radius","float",i).setGroup(renderGroup),l=reference("mapSize","vec2",i).setGroup(renderGroup);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new NodeMaterial);u.fragmentNode=VSMPassVertical({samples:n,radius:a,size:l,shadowPass:t,depthLayer:this.depthLayer}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new NodeMaterial),u.fragmentNode=VSMPassHorizontal({samples:n,radius:a,size:l,shadowPass:r,depthLayer:this.depthLayer}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=reference("intensity","float",i).setGroup(renderGroup),l=reference("normalBias","float",i).setGroup(renderGroup),u=lightShadowMatrix(r).mul(shadowPositionWorld.add(normalWorld.mul(l))),d=this.setupShadowCoord(e,u),c=i.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=n===VSMShadowMap&&!0!==i.isPointLightShadow?this.vsmShadowMapHorizontal.texture:o,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:s.texture,depthTexture:h,shadowCoord:d,shadow:i,depthLayer:this.depthLayer});let m=texture(s.texture,d);o.isArrayTexture&&(m=m.depth(this.depthLayer));const g=mix(1,p.rgb.mix(m,1),a.mul(m.a)).toVar();return this.shadowMap=s,this.shadow.map=s,g}setup(e){if(!1!==e.renderer.shadowMap.enabled)return Fn((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:i}=this,{renderer:n,scene:o}=e;t.updateMatrices(i),r.setSize(t.mapSize.width,t.mapSize.height,r.depth),n.render(o,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:i}=this,{renderer:n,scene:o,camera:s}=e,a=n.shadowMap.type,l=t.depthTexture.version;this._depthVersionCached=l;const u=i.camera.layers.mask;0==(4294967294&i.camera.layers.mask)&&(i.camera.layers.mask=s.layers.mask);const d=n.getRenderObjectFunction(),c=n.getMRT(),h=!!c&&c.has("velocity");_rendererState=resetRendererAndSceneState(n,o,_rendererState),o.overrideMaterial=getShadowMaterial(r),n.setRenderObjectFunction(getShadowRenderObjectFunction(n,i,a,h)),n.setClearColor(0,0),n.setRenderTarget(t),this.renderShadow(e),n.setRenderObjectFunction(d),a===VSMShadowMap&&!0!==i.isPointLightShadow&&this.vsmPass(n),i.camera.layers.mask=u,restoreRendererAndSceneState(n,o,_rendererState)}vsmPass(e){const{shadow:t}=this,r=this.shadowMap.depth;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height,r),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height,r),e.setRenderTarget(this.vsmShadowMapVertical),_quadMesh.material=this.vsmMaterialVertical,_quadMesh.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),_quadMesh.material=this.vsmMaterialHorizontal,_quadMesh.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;let r=t.needsUpdate||t.autoUpdate;r&&(this._cameraFrameId[e.camera]===e.frameId&&(r=!1),this._cameraFrameId[e.camera]=e.frameId),r&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const shadow=(e,t)=>nodeObject(new ShadowNode(e,t)),_clearColor$1=new Color,cubeToUV=Fn((([e,t])=>{const r=e.toVar(),i=abs(r),n=div(1,max$1(i.x,max$1(i.y,i.z)));i.mulAssign(n),r.mulAssign(n.mul(t.mul(2).oneMinus()));const o=vec2(r.xy).toVar(),s=t.mul(1.5).oneMinus();return If(i.z.greaterThanEqual(s),(()=>{If(r.z.greaterThan(0),(()=>{o.x.assign(sub(4,r.x))}))})).ElseIf(i.x.greaterThanEqual(s),(()=>{const e=sign(r.x);o.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(i.y.greaterThanEqual(s),(()=>{const e=sign(r.y);o.x.assign(r.x.add(e.mul(2)).add(2)),o.y.assign(r.z.mul(e).sub(2))})),vec2(.125,.25).mul(o).add(vec2(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),BasicPointShadowFilter=Fn((({depthTexture:e,bd3D:t,dp:r,texelSize:i})=>texture(e,cubeToUV(t,i.y)).compare(r))),PointShadowFilter=Fn((({depthTexture:e,bd3D:t,dp:r,texelSize:i,shadow:n})=>{const o=reference("radius","float",n).setGroup(renderGroup),s=vec2(-1,1).mul(o).mul(i.y);return texture(e,cubeToUV(t.add(s.xyy),i.y)).compare(r).add(texture(e,cubeToUV(t.add(s.yyy),i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.xyx),i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.yyx),i.y)).compare(r)).add(texture(e,cubeToUV(t,i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.xxy),i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.yxy),i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.xxx),i.y)).compare(r)).add(texture(e,cubeToUV(t.add(s.yxx),i.y)).compare(r)).mul(1/9)})),pointShadowFilter=Fn((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:i})=>{const n=r.xyz.toVar(),o=n.length(),s=uniform("float").setGroup(renderGroup).onRenderUpdate((()=>i.camera.near)),a=uniform("float").setGroup(renderGroup).onRenderUpdate((()=>i.camera.far)),l=reference("bias","float",i).setGroup(renderGroup),u=uniform(i.mapSize).setGroup(renderGroup),d=float(1).toVar();return If(o.sub(a).lessThanEqual(0).and(o.sub(s).greaterThanEqual(0)),(()=>{const r=o.sub(s).div(a.sub(s)).toVar();r.addAssign(l);const c=n.normalize(),h=vec2(1).div(u.mul(vec2(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:i}))})),d})),_viewport=new Vector4,_viewportSize=new Vector2,_shadowMapSize=new Vector2;class PointShadowNode extends ShadowNode{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===BasicShadowMap?BasicPointShadowFilter:PointShadowFilter}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:i,shadowCoord:n,shadow:o}){return pointShadowFilter({filterFn:t,shadowTexture:r,depthTexture:i,shadowCoord:n,shadow:o})}renderShadow(e){const{shadow:t,shadowMap:r,light:i}=this,{renderer:n,scene:o}=e,s=t.getFrameExtents();_shadowMapSize.copy(t.mapSize),_shadowMapSize.multiply(s),r.setSize(_shadowMapSize.width,_shadowMapSize.height),_viewportSize.copy(t.mapSize);const a=n.autoClear,l=n.getClearColor(_clearColor$1),u=n.getClearAlpha();n.autoClear=!1,n.setClearColor(t.clearColor,t.clearAlpha),n.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const s=t.getViewport(e),a=_viewportSize.x*s.x,l=_shadowMapSize.y-_viewportSize.y-_viewportSize.y*s.y;_viewport.set(a,l,_viewportSize.x*s.z,_viewportSize.y*s.w),r.viewport.copy(_viewport),t.updateMatrices(i,e),n.render(o,t.camera)}n.autoClear=a,n.setClearColor(l,u)}}const pointShadow=(e,t)=>nodeObject(new PointShadowNode(e,t));class AnalyticLightNode extends LightingNode{static get type(){return"AnalyticLightNode"}constructor(e=null){super(),this.light=e,this.color=new Color,this.colorNode=e&&e.colorNode||uniform(this.color).setGroup(renderGroup),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=NodeUpdateType.FRAME}getHash(){return this.light.uuid}getLightVector(e){return lightViewPosition(this.light).sub(e.context.positionView||positionView)}setupDirect(){}setupDirectRectArea(){}setupShadowNode(){return shadow(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const e=this.light.shadow.shadowNode;let t;t=void 0!==e?nodeObject(e):this.setupShadowNode(),this.shadowNode=t,this.shadowColorNode=r=this.colorNode.mul(t),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null);const t=this.setupDirect(e),r=this.setupDirectRectArea(e);t&&e.lightsNode.setupDirectLight(e,this,t),r&&e.lightsNode.setupDirectRectAreaLight(e,this,r)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const getDistanceAttenuation=Fn((({lightDistance:e,cutoffDistance:t,decayExponent:r})=>{const i=e.pow(r).max(.01).reciprocal();return t.greaterThan(0).select(i.mul(e.div(t).pow4().oneMinus().clamp().pow2()),i)})),directPointLight=({color:e,lightVector:t,cutoffDistance:r,decayExponent:i})=>{const n=t.normalize(),o=t.length(),s=getDistanceAttenuation({lightDistance:o,cutoffDistance:r,decayExponent:i});return{lightDirection:n,lightColor:e.mul(s)}};class PointLightNode extends AnalyticLightNode{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=uniform(0).setGroup(renderGroup),this.decayExponentNode=uniform(2).setGroup(renderGroup)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return pointShadow(this.light)}setupDirect(e){return directPointLight({color:this.colorNode,lightVector:this.getLightVector(e),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode})}}const checker=Fn((([e=uv$1()])=>{const t=e.mul(2),r=t.x.floor(),i=t.y.floor();return r.add(i).mod(2).sign()})),shapeCircle=Fn((([e=uv$1()],{renderer:t,material:r})=>{const i=lengthSq(e.mul(2).sub(1));let n;if(r.alphaToCoverage&&t.samples>1){const e=float(i.fwidth()).toVar();n=smoothstep(e.oneMinus(),e.add(1),i).oneMinus()}else n=select(i.greaterThan(1),0,1);return n})),mx_select=Fn((([e,t,r])=>{const i=float(r).toVar(),n=float(t).toVar(),o=bool(e).toVar();return select(o,n,i)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),mx_negate_if=Fn((([e,t])=>{const r=bool(t).toVar(),i=float(e).toVar();return select(r,i.negate(),i)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),mx_floor=Fn((([e])=>{const t=float(e).toVar();return int(floor(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),mx_floorfrac=Fn((([e,t])=>{const r=float(e).toVar();return t.assign(mx_floor(r)),r.sub(float(t))})),mx_bilerp_0=Fn((([e,t,r,i,n,o])=>{const s=float(o).toVar(),a=float(n).toVar(),l=float(i).toVar(),u=float(r).toVar(),d=float(t).toVar(),c=float(e).toVar(),h=float(sub(1,a)).toVar();return sub(1,s).mul(c.mul(h).add(d.mul(a))).add(s.mul(u.mul(h).add(l.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),mx_bilerp_1=Fn((([e,t,r,i,n,o])=>{const s=float(o).toVar(),a=float(n).toVar(),l=vec3(i).toVar(),u=vec3(r).toVar(),d=vec3(t).toVar(),c=vec3(e).toVar(),h=float(sub(1,a)).toVar();return sub(1,s).mul(c.mul(h).add(d.mul(a))).add(s.mul(u.mul(h).add(l.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]}),mx_bilerp=overloadingFn([mx_bilerp_0,mx_bilerp_1]),mx_trilerp_0=Fn((([e,t,r,i,n,o,s,a,l,u,d])=>{const c=float(d).toVar(),h=float(u).toVar(),p=float(l).toVar(),m=float(a).toVar(),g=float(s).toVar(),f=float(o).toVar(),x=float(n).toVar(),_=float(i).toVar(),y=float(r).toVar(),T=float(t).toVar(),b=float(e).toVar(),N=float(sub(1,p)).toVar(),v=float(sub(1,h)).toVar();return float(sub(1,c)).toVar().mul(v.mul(b.mul(N).add(T.mul(p))).add(h.mul(y.mul(N).add(_.mul(p))))).add(c.mul(v.mul(x.mul(N).add(f.mul(p))).add(h.mul(g.mul(N).add(m.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),mx_trilerp_1=Fn((([e,t,r,i,n,o,s,a,l,u,d])=>{const c=float(d).toVar(),h=float(u).toVar(),p=float(l).toVar(),m=vec3(a).toVar(),g=vec3(s).toVar(),f=vec3(o).toVar(),x=vec3(n).toVar(),_=vec3(i).toVar(),y=vec3(r).toVar(),T=vec3(t).toVar(),b=vec3(e).toVar(),N=float(sub(1,p)).toVar(),v=float(sub(1,h)).toVar();return float(sub(1,c)).toVar().mul(v.mul(b.mul(N).add(T.mul(p))).add(h.mul(y.mul(N).add(_.mul(p))))).add(c.mul(v.mul(x.mul(N).add(f.mul(p))).add(h.mul(g.mul(N).add(m.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),mx_trilerp=overloadingFn([mx_trilerp_0,mx_trilerp_1]),mx_gradient_float_0=Fn((([e,t,r])=>{const i=float(r).toVar(),n=float(t).toVar(),o=uint(e).toVar(),s=uint(o.bitAnd(uint(7))).toVar(),a=float(mx_select(s.lessThan(uint(4)),n,i)).toVar(),l=float(mul(2,mx_select(s.lessThan(uint(4)),i,n))).toVar();return mx_negate_if(a,bool(s.bitAnd(uint(1)))).add(mx_negate_if(l,bool(s.bitAnd(uint(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),mx_gradient_float_1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=float(t).toVar(),a=uint(e).toVar(),l=uint(a.bitAnd(uint(15))).toVar(),u=float(mx_select(l.lessThan(uint(8)),s,o)).toVar(),d=float(mx_select(l.lessThan(uint(4)),o,mx_select(l.equal(uint(12)).or(l.equal(uint(14))),s,n))).toVar();return mx_negate_if(u,bool(l.bitAnd(uint(1)))).add(mx_negate_if(d,bool(l.bitAnd(uint(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),mx_gradient_float=overloadingFn([mx_gradient_float_0,mx_gradient_float_1]),mx_gradient_vec3_0=Fn((([e,t,r])=>{const i=float(r).toVar(),n=float(t).toVar(),o=uvec3(e).toVar();return vec3(mx_gradient_float(o.x,n,i),mx_gradient_float(o.y,n,i),mx_gradient_float(o.z,n,i))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),mx_gradient_vec3_1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=float(t).toVar(),a=uvec3(e).toVar();return vec3(mx_gradient_float(a.x,s,o,n),mx_gradient_float(a.y,s,o,n),mx_gradient_float(a.z,s,o,n))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),mx_gradient_vec3=overloadingFn([mx_gradient_vec3_0,mx_gradient_vec3_1]),mx_gradient_scale2d_0=Fn((([e])=>{const t=float(e).toVar();return mul(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),mx_gradient_scale3d_0=Fn((([e])=>{const t=float(e).toVar();return mul(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),mx_gradient_scale2d_1=Fn((([e])=>{const t=vec3(e).toVar();return mul(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),mx_gradient_scale2d=overloadingFn([mx_gradient_scale2d_0,mx_gradient_scale2d_1]),mx_gradient_scale3d_1=Fn((([e])=>{const t=vec3(e).toVar();return mul(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]}),mx_gradient_scale3d=overloadingFn([mx_gradient_scale3d_0,mx_gradient_scale3d_1]),mx_rotl32=Fn((([e,t])=>{const r=int(t).toVar(),i=uint(e).toVar();return i.shiftLeft(r).bitOr(i.shiftRight(int(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),mx_bjmix=Fn((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(mx_rotl32(r,int(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(mx_rotl32(e,int(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(mx_rotl32(t,int(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(mx_rotl32(r,int(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(mx_rotl32(e,int(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(mx_rotl32(t,int(4))),t.addAssign(e)})),mx_bjfinal=Fn((([e,t,r])=>{const i=uint(r).toVar(),n=uint(t).toVar(),o=uint(e).toVar();return i.bitXorAssign(n),i.subAssign(mx_rotl32(n,int(14))),o.bitXorAssign(i),o.subAssign(mx_rotl32(i,int(11))),n.bitXorAssign(o),n.subAssign(mx_rotl32(o,int(25))),i.bitXorAssign(n),i.subAssign(mx_rotl32(n,int(16))),o.bitXorAssign(i),o.subAssign(mx_rotl32(i,int(4))),n.bitXorAssign(o),n.subAssign(mx_rotl32(o,int(14))),i.bitXorAssign(n),i.subAssign(mx_rotl32(n,int(24))),i})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),mx_bits_to_01=Fn((([e])=>{const t=uint(e).toVar();return float(t).div(float(uint(int(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),mx_fade=Fn((([e])=>{const t=float(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),mx_hash_int_0=Fn((([e])=>{const t=int(e).toVar(),r=uint(uint(1)).toVar(),i=uint(uint(int(3735928559)).add(r.shiftLeft(uint(2))).add(uint(13))).toVar();return mx_bjfinal(i.add(uint(t)),i,i)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),mx_hash_int_1=Fn((([e,t])=>{const r=int(t).toVar(),i=int(e).toVar(),n=uint(uint(2)).toVar(),o=uint().toVar(),s=uint().toVar(),a=uint().toVar();return o.assign(s.assign(a.assign(uint(int(3735928559)).add(n.shiftLeft(uint(2))).add(uint(13))))),o.addAssign(uint(i)),s.addAssign(uint(r)),mx_bjfinal(o,s,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),mx_hash_int_2=Fn((([e,t,r])=>{const i=int(r).toVar(),n=int(t).toVar(),o=int(e).toVar(),s=uint(uint(3)).toVar(),a=uint().toVar(),l=uint().toVar(),u=uint().toVar();return a.assign(l.assign(u.assign(uint(int(3735928559)).add(s.shiftLeft(uint(2))).add(uint(13))))),a.addAssign(uint(o)),l.addAssign(uint(n)),u.addAssign(uint(i)),mx_bjfinal(a,l,u)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),mx_hash_int_3=Fn((([e,t,r,i])=>{const n=int(i).toVar(),o=int(r).toVar(),s=int(t).toVar(),a=int(e).toVar(),l=uint(uint(4)).toVar(),u=uint().toVar(),d=uint().toVar(),c=uint().toVar();return u.assign(d.assign(c.assign(uint(int(3735928559)).add(l.shiftLeft(uint(2))).add(uint(13))))),u.addAssign(uint(a)),d.addAssign(uint(s)),c.addAssign(uint(o)),mx_bjmix(u,d,c),u.addAssign(uint(n)),mx_bjfinal(u,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),mx_hash_int_4=Fn((([e,t,r,i,n])=>{const o=int(n).toVar(),s=int(i).toVar(),a=int(r).toVar(),l=int(t).toVar(),u=int(e).toVar(),d=uint(uint(5)).toVar(),c=uint().toVar(),h=uint().toVar(),p=uint().toVar();return c.assign(h.assign(p.assign(uint(int(3735928559)).add(d.shiftLeft(uint(2))).add(uint(13))))),c.addAssign(uint(u)),h.addAssign(uint(l)),p.addAssign(uint(a)),mx_bjmix(c,h,p),c.addAssign(uint(s)),h.addAssign(uint(o)),mx_bjfinal(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]}),mx_hash_int=overloadingFn([mx_hash_int_0,mx_hash_int_1,mx_hash_int_2,mx_hash_int_3,mx_hash_int_4]),mx_hash_vec3_0=Fn((([e,t])=>{const r=int(t).toVar(),i=int(e).toVar(),n=uint(mx_hash_int(i,r)).toVar(),o=uvec3().toVar();return o.x.assign(n.bitAnd(int(255))),o.y.assign(n.shiftRight(int(8)).bitAnd(int(255))),o.z.assign(n.shiftRight(int(16)).bitAnd(int(255))),o})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),mx_hash_vec3_1=Fn((([e,t,r])=>{const i=int(r).toVar(),n=int(t).toVar(),o=int(e).toVar(),s=uint(mx_hash_int(o,n,i)).toVar(),a=uvec3().toVar();return a.x.assign(s.bitAnd(int(255))),a.y.assign(s.shiftRight(int(8)).bitAnd(int(255))),a.z.assign(s.shiftRight(int(16)).bitAnd(int(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),mx_hash_vec3=overloadingFn([mx_hash_vec3_0,mx_hash_vec3_1]),mx_perlin_noise_float_0=Fn((([e])=>{const t=vec2(e).toVar(),r=int().toVar(),i=int().toVar(),n=float(mx_floorfrac(t.x,r)).toVar(),o=float(mx_floorfrac(t.y,i)).toVar(),s=float(mx_fade(n)).toVar(),a=float(mx_fade(o)).toVar(),l=float(mx_bilerp(mx_gradient_float(mx_hash_int(r,i),n,o),mx_gradient_float(mx_hash_int(r.add(int(1)),i),n.sub(1),o),mx_gradient_float(mx_hash_int(r,i.add(int(1))),n,o.sub(1)),mx_gradient_float(mx_hash_int(r.add(int(1)),i.add(int(1))),n.sub(1),o.sub(1)),s,a)).toVar();return mx_gradient_scale2d(l)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),mx_perlin_noise_float_1=Fn((([e])=>{const t=vec3(e).toVar(),r=int().toVar(),i=int().toVar(),n=int().toVar(),o=float(mx_floorfrac(t.x,r)).toVar(),s=float(mx_floorfrac(t.y,i)).toVar(),a=float(mx_floorfrac(t.z,n)).toVar(),l=float(mx_fade(o)).toVar(),u=float(mx_fade(s)).toVar(),d=float(mx_fade(a)).toVar(),c=float(mx_trilerp(mx_gradient_float(mx_hash_int(r,i,n),o,s,a),mx_gradient_float(mx_hash_int(r.add(int(1)),i,n),o.sub(1),s,a),mx_gradient_float(mx_hash_int(r,i.add(int(1)),n),o,s.sub(1),a),mx_gradient_float(mx_hash_int(r.add(int(1)),i.add(int(1)),n),o.sub(1),s.sub(1),a),mx_gradient_float(mx_hash_int(r,i,n.add(int(1))),o,s,a.sub(1)),mx_gradient_float(mx_hash_int(r.add(int(1)),i,n.add(int(1))),o.sub(1),s,a.sub(1)),mx_gradient_float(mx_hash_int(r,i.add(int(1)),n.add(int(1))),o,s.sub(1),a.sub(1)),mx_gradient_float(mx_hash_int(r.add(int(1)),i.add(int(1)),n.add(int(1))),o.sub(1),s.sub(1),a.sub(1)),l,u,d)).toVar();return mx_gradient_scale3d(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]}),mx_perlin_noise_float=overloadingFn([mx_perlin_noise_float_0,mx_perlin_noise_float_1]),mx_perlin_noise_vec3_0=Fn((([e])=>{const t=vec2(e).toVar(),r=int().toVar(),i=int().toVar(),n=float(mx_floorfrac(t.x,r)).toVar(),o=float(mx_floorfrac(t.y,i)).toVar(),s=float(mx_fade(n)).toVar(),a=float(mx_fade(o)).toVar(),l=vec3(mx_bilerp(mx_gradient_vec3(mx_hash_vec3(r,i),n,o),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i),n.sub(1),o),mx_gradient_vec3(mx_hash_vec3(r,i.add(int(1))),n,o.sub(1)),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i.add(int(1))),n.sub(1),o.sub(1)),s,a)).toVar();return mx_gradient_scale2d(l)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),mx_perlin_noise_vec3_1=Fn((([e])=>{const t=vec3(e).toVar(),r=int().toVar(),i=int().toVar(),n=int().toVar(),o=float(mx_floorfrac(t.x,r)).toVar(),s=float(mx_floorfrac(t.y,i)).toVar(),a=float(mx_floorfrac(t.z,n)).toVar(),l=float(mx_fade(o)).toVar(),u=float(mx_fade(s)).toVar(),d=float(mx_fade(a)).toVar(),c=vec3(mx_trilerp(mx_gradient_vec3(mx_hash_vec3(r,i,n),o,s,a),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i,n),o.sub(1),s,a),mx_gradient_vec3(mx_hash_vec3(r,i.add(int(1)),n),o,s.sub(1),a),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i.add(int(1)),n),o.sub(1),s.sub(1),a),mx_gradient_vec3(mx_hash_vec3(r,i,n.add(int(1))),o,s,a.sub(1)),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i,n.add(int(1))),o.sub(1),s,a.sub(1)),mx_gradient_vec3(mx_hash_vec3(r,i.add(int(1)),n.add(int(1))),o,s.sub(1),a.sub(1)),mx_gradient_vec3(mx_hash_vec3(r.add(int(1)),i.add(int(1)),n.add(int(1))),o.sub(1),s.sub(1),a.sub(1)),l,u,d)).toVar();return mx_gradient_scale3d(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),mx_perlin_noise_vec3=overloadingFn([mx_perlin_noise_vec3_0,mx_perlin_noise_vec3_1]),mx_cell_noise_float_0=Fn((([e])=>{const t=float(e).toVar(),r=int(mx_floor(t)).toVar();return mx_bits_to_01(mx_hash_int(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),mx_cell_noise_float_1=Fn((([e])=>{const t=vec2(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar();return mx_bits_to_01(mx_hash_int(r,i))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),mx_cell_noise_float_2=Fn((([e])=>{const t=vec3(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar(),n=int(mx_floor(t.z)).toVar();return mx_bits_to_01(mx_hash_int(r,i,n))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),mx_cell_noise_float_3=Fn((([e])=>{const t=vec4(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar(),n=int(mx_floor(t.z)).toVar(),o=int(mx_floor(t.w)).toVar();return mx_bits_to_01(mx_hash_int(r,i,n,o))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]}),mx_cell_noise_float$1=overloadingFn([mx_cell_noise_float_0,mx_cell_noise_float_1,mx_cell_noise_float_2,mx_cell_noise_float_3]),mx_cell_noise_vec3_0=Fn((([e])=>{const t=float(e).toVar(),r=int(mx_floor(t)).toVar();return vec3(mx_bits_to_01(mx_hash_int(r,int(0))),mx_bits_to_01(mx_hash_int(r,int(1))),mx_bits_to_01(mx_hash_int(r,int(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),mx_cell_noise_vec3_1=Fn((([e])=>{const t=vec2(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar();return vec3(mx_bits_to_01(mx_hash_int(r,i,int(0))),mx_bits_to_01(mx_hash_int(r,i,int(1))),mx_bits_to_01(mx_hash_int(r,i,int(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),mx_cell_noise_vec3_2=Fn((([e])=>{const t=vec3(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar(),n=int(mx_floor(t.z)).toVar();return vec3(mx_bits_to_01(mx_hash_int(r,i,n,int(0))),mx_bits_to_01(mx_hash_int(r,i,n,int(1))),mx_bits_to_01(mx_hash_int(r,i,n,int(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),mx_cell_noise_vec3_3=Fn((([e])=>{const t=vec4(e).toVar(),r=int(mx_floor(t.x)).toVar(),i=int(mx_floor(t.y)).toVar(),n=int(mx_floor(t.z)).toVar(),o=int(mx_floor(t.w)).toVar();return vec3(mx_bits_to_01(mx_hash_int(r,i,n,o,int(0))),mx_bits_to_01(mx_hash_int(r,i,n,o,int(1))),mx_bits_to_01(mx_hash_int(r,i,n,o,int(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]}),mx_cell_noise_vec3=overloadingFn([mx_cell_noise_vec3_0,mx_cell_noise_vec3_1,mx_cell_noise_vec3_2,mx_cell_noise_vec3_3]),mx_fractal_noise_float$1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=int(t).toVar(),a=vec3(e).toVar(),l=float(0).toVar(),u=float(1).toVar();return Loop(s,(()=>{l.addAssign(u.mul(mx_perlin_noise_float(a))),u.mulAssign(n),a.mulAssign(o)})),l})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_fractal_noise_vec3$1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=int(t).toVar(),a=vec3(e).toVar(),l=vec3(0).toVar(),u=float(1).toVar();return Loop(s,(()=>{l.addAssign(u.mul(mx_perlin_noise_vec3(a))),u.mulAssign(n),a.mulAssign(o)})),l})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_fractal_noise_vec2$1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=int(t).toVar(),a=vec3(e).toVar();return vec2(mx_fractal_noise_float$1(a,s,o,n),mx_fractal_noise_float$1(a.add(vec3(int(19),int(193),int(17))),s,o,n))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_fractal_noise_vec4$1=Fn((([e,t,r,i])=>{const n=float(i).toVar(),o=float(r).toVar(),s=int(t).toVar(),a=vec3(e).toVar(),l=vec3(mx_fractal_noise_vec3$1(a,s,o,n)).toVar(),u=float(mx_fractal_noise_float$1(a.add(vec3(int(19),int(193),int(17))),s,o,n)).toVar();return vec4(l,u)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_worley_distance_0=Fn((([e,t,r,i,n,o,s])=>{const a=int(s).toVar(),l=float(o).toVar(),u=int(n).toVar(),d=int(i).toVar(),c=int(r).toVar(),h=int(t).toVar(),p=vec2(e).toVar(),m=vec3(mx_cell_noise_vec3(vec2(h.add(d),c.add(u)))).toVar(),g=vec2(m.x,m.y).toVar();g.subAssign(.5),g.mulAssign(l),g.addAssign(.5);const f=vec2(vec2(float(h),float(c)).add(g)).toVar(),x=vec2(f.sub(p)).toVar();return If(a.equal(int(2)),(()=>abs(x.x).add(abs(x.y)))),If(a.equal(int(3)),(()=>max$1(abs(x.x),abs(x.y)))),dot(x,x)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_distance_1=Fn((([e,t,r,i,n,o,s,a,l])=>{const u=int(l).toVar(),d=float(a).toVar(),c=int(s).toVar(),h=int(o).toVar(),p=int(n).toVar(),m=int(i).toVar(),g=int(r).toVar(),f=int(t).toVar(),x=vec3(e).toVar(),_=vec3(mx_cell_noise_vec3(vec3(f.add(p),g.add(h),m.add(c)))).toVar();_.subAssign(.5),_.mulAssign(d),_.addAssign(.5);const y=vec3(vec3(float(f),float(g),float(m)).add(_)).toVar(),T=vec3(y.sub(x)).toVar();return If(u.equal(int(2)),(()=>abs(T.x).add(abs(T.y)).add(abs(T.z)))),If(u.equal(int(3)),(()=>max$1(abs(T.x),abs(T.y),abs(T.z)))),dot(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_distance=overloadingFn([mx_worley_distance_0,mx_worley_distance_1]),mx_worley_noise_float_0=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec2(e).toVar(),s=int().toVar(),a=int().toVar(),l=vec2(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a)).toVar(),u=float(1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{const r=float(mx_worley_distance(l,e,t,s,a,n,i)).toVar();u.assign(min$1(u,r))}))})),If(i.equal(int(0)),(()=>{u.assign(sqrt(u))})),u})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_vec2_0=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec2(e).toVar(),s=int().toVar(),a=int().toVar(),l=vec2(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a)).toVar(),u=vec2(1e6,1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{const r=float(mx_worley_distance(l,e,t,s,a,n,i)).toVar();If(r.lessThan(u.x),(()=>{u.y.assign(u.x),u.x.assign(r)})).ElseIf(r.lessThan(u.y),(()=>{u.y.assign(r)}))}))})),If(i.equal(int(0)),(()=>{u.assign(sqrt(u))})),u})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_vec3_0=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec2(e).toVar(),s=int().toVar(),a=int().toVar(),l=vec2(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a)).toVar(),u=vec3(1e6,1e6,1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{const r=float(mx_worley_distance(l,e,t,s,a,n,i)).toVar();If(r.lessThan(u.x),(()=>{u.z.assign(u.y),u.y.assign(u.x),u.x.assign(r)})).ElseIf(r.lessThan(u.y),(()=>{u.z.assign(u.y),u.y.assign(r)})).ElseIf(r.lessThan(u.z),(()=>{u.z.assign(r)}))}))})),If(i.equal(int(0)),(()=>{u.assign(sqrt(u))})),u})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_float_1=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec3(e).toVar(),s=int().toVar(),a=int().toVar(),l=int().toVar(),u=vec3(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a),mx_floorfrac(o.z,l)).toVar(),d=float(1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{Loop({start:-1,end:int(1),name:"z",condition:"<="},(({z:r})=>{const o=float(mx_worley_distance(u,e,t,r,s,a,l,n,i)).toVar();d.assign(min$1(d,o))}))}))})),If(i.equal(int(0)),(()=>{d.assign(sqrt(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_float$1=overloadingFn([mx_worley_noise_float_0,mx_worley_noise_float_1]),mx_worley_noise_vec2_1=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec3(e).toVar(),s=int().toVar(),a=int().toVar(),l=int().toVar(),u=vec3(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a),mx_floorfrac(o.z,l)).toVar(),d=vec2(1e6,1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{Loop({start:-1,end:int(1),name:"z",condition:"<="},(({z:r})=>{const o=float(mx_worley_distance(u,e,t,r,s,a,l,n,i)).toVar();If(o.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(o)})).ElseIf(o.lessThan(d.y),(()=>{d.y.assign(o)}))}))}))})),If(i.equal(int(0)),(()=>{d.assign(sqrt(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_vec2$1=overloadingFn([mx_worley_noise_vec2_0,mx_worley_noise_vec2_1]),mx_worley_noise_vec3_1=Fn((([e,t,r])=>{const i=int(r).toVar(),n=float(t).toVar(),o=vec3(e).toVar(),s=int().toVar(),a=int().toVar(),l=int().toVar(),u=vec3(mx_floorfrac(o.x,s),mx_floorfrac(o.y,a),mx_floorfrac(o.z,l)).toVar(),d=vec3(1e6,1e6,1e6).toVar();return Loop({start:-1,end:int(1),name:"x",condition:"<="},(({x:e})=>{Loop({start:-1,end:int(1),name:"y",condition:"<="},(({y:t})=>{Loop({start:-1,end:int(1),name:"z",condition:"<="},(({z:r})=>{const o=float(mx_worley_distance(u,e,t,r,s,a,l,n,i)).toVar();If(o.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(o)})).ElseIf(o.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(o)})).ElseIf(o.lessThan(d.z),(()=>{d.z.assign(o)}))}))}))})),If(i.equal(int(0)),(()=>{d.assign(sqrt(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),mx_worley_noise_vec3$1=overloadingFn([mx_worley_noise_vec3_0,mx_worley_noise_vec3_1]),mx_unifiednoise2d$1=Fn((([e,t,r,i,n,o,s,a,l,u,d])=>{const c=int(e).toVar(),h=vec2(t).toVar(),p=vec2(r).toVar(),m=vec2(i).toVar(),g=float(n).toVar(),f=float(o).toVar(),x=float(s).toVar(),_=bool(a).toVar(),y=int(l).toVar(),T=float(u).toVar(),b=float(d).toVar(),N=h.mul(p).add(m),v=float(0).toVar();return If(c.equal(int(0)),(()=>{v.assign(mx_perlin_noise_vec3(N))})),If(c.equal(int(1)),(()=>{v.assign(mx_cell_noise_vec3(N))})),If(c.equal(int(2)),(()=>{v.assign(mx_worley_noise_vec3$1(N,g,int(0)))})),If(c.equal(int(3)),(()=>{v.assign(mx_fractal_noise_vec3$1(vec3(N,0),y,T,b))})),v.assign(v.mul(x.sub(f)).add(f)),If(_,(()=>{v.assign(clamp(v,f,x))})),v})).setLayout({name:"mx_unifiednoise2d",type:"float",inputs:[{name:"noiseType",type:"int"},{name:"texcoord",type:"vec2"},{name:"freq",type:"vec2"},{name:"offset",type:"vec2"},{name:"jitter",type:"float"},{name:"outmin",type:"float"},{name:"outmax",type:"float"},{name:"clampoutput",type:"bool"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_unifiednoise3d$1=Fn((([e,t,r,i,n,o,s,a,l,u,d])=>{const c=int(e).toVar(),h=vec3(t).toVar(),p=vec3(r).toVar(),m=vec3(i).toVar(),g=float(n).toVar(),f=float(o).toVar(),x=float(s).toVar(),_=bool(a).toVar(),y=int(l).toVar(),T=float(u).toVar(),b=float(d).toVar(),N=h.mul(p).add(m),v=float(0).toVar();return If(c.equal(int(0)),(()=>{v.assign(mx_perlin_noise_vec3(N))})),If(c.equal(int(1)),(()=>{v.assign(mx_cell_noise_vec3(N))})),If(c.equal(int(2)),(()=>{v.assign(mx_worley_noise_vec3$1(N,g,int(0)))})),If(c.equal(int(3)),(()=>{v.assign(mx_fractal_noise_vec3$1(N,y,T,b))})),v.assign(v.mul(x.sub(f)).add(f)),If(_,(()=>{v.assign(clamp(v,f,x))})),v})).setLayout({name:"mx_unifiednoise3d",type:"float",inputs:[{name:"noiseType",type:"int"},{name:"position",type:"vec3"},{name:"freq",type:"vec3"},{name:"offset",type:"vec3"},{name:"jitter",type:"float"},{name:"outmin",type:"float"},{name:"outmax",type:"float"},{name:"clampoutput",type:"bool"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mx_hsvtorgb=Fn((([e])=>{const t=e.y,r=e.z,i=vec3().toVar();return If(t.lessThan(1e-4),(()=>{i.assign(vec3(r,r,r))})).Else((()=>{let n=e.x;n=n.sub(floor(n)).mul(6).toVar();const o=int(trunc(n)),s=n.sub(float(o)),a=r.mul(t.oneMinus()),l=r.mul(t.mul(s).oneMinus()),u=r.mul(t.mul(s.oneMinus()).oneMinus());If(o.equal(int(0)),(()=>{i.assign(vec3(r,u,a))})).ElseIf(o.equal(int(1)),(()=>{i.assign(vec3(l,r,a))})).ElseIf(o.equal(int(2)),(()=>{i.assign(vec3(a,r,u))})).ElseIf(o.equal(int(3)),(()=>{i.assign(vec3(a,l,r))})).ElseIf(o.equal(int(4)),(()=>{i.assign(vec3(u,a,r))})).Else((()=>{i.assign(vec3(r,a,l))}))})),i})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),mx_rgbtohsv=Fn((([e])=>{const t=vec3(e).toVar(),r=float(t.x).toVar(),i=float(t.y).toVar(),n=float(t.z).toVar(),o=float(min$1(r,min$1(i,n))).toVar(),s=float(max$1(r,max$1(i,n))).toVar(),a=float(s.sub(o)).toVar(),l=float().toVar(),u=float().toVar(),d=float().toVar();return d.assign(s),If(s.greaterThan(0),(()=>{u.assign(a.div(s))})).Else((()=>{u.assign(0)})),If(u.lessThanEqual(0),(()=>{l.assign(0)})).Else((()=>{If(r.greaterThanEqual(s),(()=>{l.assign(i.sub(n).div(a))})).ElseIf(i.greaterThanEqual(s),(()=>{l.assign(add(2,n.sub(r).div(a)))})).Else((()=>{l.assign(add(4,r.sub(i).div(a)))})),l.mulAssign(1/6),If(l.lessThan(0),(()=>{l.addAssign(1)}))})),vec3(l,u,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),mx_srgb_texture_to_lin_rec709=Fn((([e])=>{const t=vec3(e).toVar(),r=bvec3(greaterThan(t,vec3(.04045))).toVar(),i=vec3(t.div(12.92)).toVar(),n=vec3(pow(max$1(t.add(vec3(.055)),vec3(0)).div(1.055),vec3(2.4))).toVar();return mix(i,n,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),mx_aastep=(e,t)=>{e=float(e),t=float(t);const r=vec2(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return smoothstep(e.sub(r),e.add(r),t)},_ramp=(e,t,r,i)=>mix(e,t,r[i].clamp()),mx_ramplr=(e,t,r=uv$1())=>_ramp(e,t,r,"x"),mx_ramptb=(e,t,r=uv$1())=>_ramp(e,t,r,"y"),mx_ramp4=(e,t,r,i,n=uv$1())=>{const o=n.x.clamp(),s=n.y.clamp(),a=mix(e,t,o),l=mix(r,i,o);return mix(a,l,s)},_split=(e,t,r,i,n)=>mix(e,t,mx_aastep(r,i[n])),mx_splitlr=(e,t,r,i=uv$1())=>_split(e,t,r,i,"x"),mx_splittb=(e,t,r,i=uv$1())=>_split(e,t,r,i,"y"),mx_transform_uv=(e=1,t=0,r=uv$1())=>r.mul(e).add(t),mx_safepower=(e,t=1)=>(e=float(e)).abs().pow(t).mul(e.sign()),mx_contrast=(e,t=1,r=.5)=>float(e).sub(r).mul(t).add(r),mx_noise_float=(e=uv$1(),t=1,r=0)=>mx_perlin_noise_float(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3=(e=uv$1(),t=1,r=0)=>mx_perlin_noise_vec3(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4=(e=uv$1(),t=1,r=0)=>{e=e.convert("vec2|vec3");return vec4(mx_perlin_noise_vec3(e),mx_perlin_noise_float(e.add(vec2(19,73)))).mul(t).add(r)},mx_unifiednoise2d=(e,t=uv$1(),r=vec2(1,1),i=vec2(0,0),n=1,o=0,s=1,a=!1,l=1,u=2,d=.5)=>mx_unifiednoise2d$1(e,t.convert("vec2|vec3"),r,i,n,o,s,a,l,u,d),mx_unifiednoise3d=(e,t=uv$1(),r=vec2(1,1),i=vec2(0,0),n=1,o=0,s=1,a=!1,l=1,u=2,d=.5)=>mx_unifiednoise3d$1(e,t.convert("vec2|vec3"),r,i,n,o,s,a,l,u,d),mx_worley_noise_float=(e=uv$1(),t=1)=>mx_worley_noise_float$1(e.convert("vec2|vec3"),t,int(1)),mx_worley_noise_vec2=(e=uv$1(),t=1)=>mx_worley_noise_vec2$1(e.convert("vec2|vec3"),t,int(1)),mx_worley_noise_vec3=(e=uv$1(),t=1)=>mx_worley_noise_vec3$1(e.convert("vec2|vec3"),t,int(1)),mx_cell_noise_float=(e=uv$1())=>mx_cell_noise_float$1(e.convert("vec2|vec3")),mx_fractal_noise_float=(e=uv$1(),t=3,r=2,i=.5,n=1)=>mx_fractal_noise_float$1(e,int(t),r,i).mul(n),mx_fractal_noise_vec2=(e=uv$1(),t=3,r=2,i=.5,n=1)=>mx_fractal_noise_vec2$1(e,int(t),r,i).mul(n),mx_fractal_noise_vec3=(e=uv$1(),t=3,r=2,i=.5,n=1)=>mx_fractal_noise_vec3$1(e,int(t),r,i).mul(n),mx_fractal_noise_vec4=(e=uv$1(),t=3,r=2,i=.5,n=1)=>mx_fractal_noise_vec4$1(e,int(t),r,i).mul(n),mx_add=(e,t=float(0))=>add(e,t),mx_subtract=(e,t=float(0))=>sub(e,t),mx_multiply=(e,t=float(1))=>mul(e,t),mx_divide=(e,t=float(1))=>div(e,t),mx_modulo=(e,t=float(1))=>mod(e,t),mx_power=(e,t=float(1))=>pow(e,t),mx_atan2=(e=float(0),t=float(1))=>atan(e,t),mx_timer=()=>time,mx_frame=()=>frameId,mx_invert=(e,t=float(1))=>sub(t,e),mx_ifgreater=(e,t,r,i)=>e.greaterThan(t).mix(r,i),mx_ifgreatereq=(e,t,r,i)=>e.greaterThanEqual(t).mix(r,i),mx_ifequal=(e,t,r,i)=>e.equal(t).mix(r,i),mx_separate=(e,t=null)=>{if("string"==typeof t){const r={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3},i=t.replace(/^out/,"").toLowerCase();if(void 0!==r[i])return e.element(r[i])}if("number"==typeof t)return e.element(t);if("string"==typeof t&&1===t.length){const r={x:0,r:0,y:1,g:1,z:2,b:2,w:3,a:3};if(void 0!==r[t])return e.element(r[t])}return e},mx_place2d=(e,t=vec2(.5,.5),r=vec2(1,1),i=float(0),n=vec2(0,0))=>{let o=e;if(t&&(o=o.sub(t)),r&&(o=o.mul(r)),i){const e=i.mul(Math.PI/180),t=e.cos(),r=e.sin();o=vec2(o.x.mul(t).sub(o.y.mul(r)),o.x.mul(r).add(o.y.mul(t)))}return t&&(o=o.add(t)),n&&(o=o.add(n)),o},mx_rotate2d=(e,t)=>{e=vec2(e);const r=(t=float(t)).mul(Math.PI/180);return rotate(e,r)},mx_rotate3d=(e,t,r)=>{e=vec3(e),t=float(t),r=vec3(r);const i=t.mul(Math.PI/180),n=r.normalize(),o=i.cos(),s=i.sin(),a=float(1).sub(o);return e.mul(o).add(n.cross(e).mul(s)).add(n.mul(n.dot(e)).mul(a))},mx_heighttonormal=(e,t)=>(e=vec3(e),t=float(t),bumpMap(e,t)),getParallaxCorrectNormal=Fn((([e,t,r])=>{const i=normalize(e).toVar(),n=sub(float(.5).mul(t.sub(r)),positionWorld).div(i).toVar(),o=sub(float(-.5).mul(t.sub(r)),positionWorld).div(i).toVar(),s=vec3().toVar();s.x=i.x.greaterThan(float(0)).select(n.x,o.x),s.y=i.y.greaterThan(float(0)).select(n.y,o.y),s.z=i.z.greaterThan(float(0)).select(n.z,o.z);const a=min$1(s.x,s.y,s.z).toVar();return positionWorld.add(i.mul(a)).toVar().sub(r)})),getShIrradianceAt=Fn((([e,t])=>{const r=e.x,i=e.y,n=e.z;let o=t.element(0).mul(.886227);return o=o.add(t.element(1).mul(1.023328).mul(i)),o=o.add(t.element(2).mul(1.023328).mul(n)),o=o.add(t.element(3).mul(1.023328).mul(r)),o=o.add(t.element(4).mul(.858086).mul(r).mul(i)),o=o.add(t.element(5).mul(.858086).mul(i).mul(n)),o=o.add(t.element(6).mul(n.mul(n).mul(.743125).sub(.247708))),o=o.add(t.element(7).mul(.858086).mul(r).mul(n)),o=o.add(t.element(8).mul(.429043).mul(mul(r,r).sub(mul(i,i)))),o}));var TSL=Object.freeze({__proto__:null,BRDF_GGX:BRDF_GGX,BRDF_Lambert:BRDF_Lambert,BasicPointShadowFilter:BasicPointShadowFilter,BasicShadowFilter:BasicShadowFilter,Break:Break,Const:Const,Continue:Continue,DFGApprox:DFGApprox,D_GGX:D_GGX,Discard:Discard,EPSILON:EPSILON,F_Schlick:F_Schlick,Fn:Fn,INFINITY:INFINITY,If:If,Loop:Loop,NodeAccess:NodeAccess,NodeShaderStage:NodeShaderStage,NodeType:NodeType,NodeUpdateType:NodeUpdateType,OnMaterialUpdate:OnMaterialUpdate,OnObjectUpdate:OnObjectUpdate,PCFShadowFilter:PCFShadowFilter,PCFSoftShadowFilter:PCFSoftShadowFilter,PI:PI,PI2:PI2,PointShadowFilter:PointShadowFilter,Return:Return,Schlick_to_F0:Schlick_to_F0,ScriptableNodeResources:ScriptableNodeResources,ShaderNode:ShaderNode,Stack:Stack,Switch:Switch,TBNViewMatrix:TBNViewMatrix,VSMShadowFilter:VSMShadowFilter,V_GGX_SmithCorrelated:V_GGX_SmithCorrelated,Var:Var,VarIntent:VarIntent,abs:abs,acesFilmicToneMapping:acesFilmicToneMapping,acos:acos,add:add,addMethodChaining:addMethodChaining,addNodeElement:addNodeElement,agxToneMapping:agxToneMapping,all:all,alphaT:alphaT,and:and,anisotropy:anisotropy,anisotropyB:anisotropyB,anisotropyT:anisotropyT,any:any,append:append,array:array,arrayBuffer:arrayBuffer,asin:asin,assign:assign,atan:atan,atan2:atan2,atomicAdd:atomicAdd,atomicAnd:atomicAnd,atomicFunc:atomicFunc,atomicLoad:atomicLoad,atomicMax:atomicMax,atomicMin:atomicMin,atomicOr:atomicOr,atomicStore:atomicStore,atomicSub:atomicSub,atomicXor:atomicXor,attenuationColor:attenuationColor,attenuationDistance:attenuationDistance,attribute:attribute,attributeArray:attributeArray,backgroundBlurriness:backgroundBlurriness,backgroundIntensity:backgroundIntensity,backgroundRotation:backgroundRotation,batch:batch,bentNormalView:bentNormalView,billboarding:billboarding,bitAnd:bitAnd,bitNot:bitNot,bitOr:bitOr,bitXor:bitXor,bitangentGeometry:bitangentGeometry,bitangentLocal:bitangentLocal,bitangentView:bitangentView,bitangentWorld:bitangentWorld,bitcast:bitcast,blendBurn:blendBurn,blendColor:blendColor,blendDodge:blendDodge,blendOverlay:blendOverlay,blendScreen:blendScreen,blur:blur,bool:bool,buffer:buffer,bufferAttribute:bufferAttribute,bumpMap:bumpMap,burn:burn,bvec2:bvec2,bvec3:bvec3,bvec4:bvec4,bypass:bypass,cache:cache,call:call,cameraFar:cameraFar,cameraIndex:cameraIndex,cameraNear:cameraNear,cameraNormalMatrix:cameraNormalMatrix,cameraPosition:cameraPosition,cameraProjectionMatrix:cameraProjectionMatrix,cameraProjectionMatrixInverse:cameraProjectionMatrixInverse,cameraViewMatrix:cameraViewMatrix,cameraWorldMatrix:cameraWorldMatrix,cbrt:cbrt,cdl:cdl,ceil:ceil,checker:checker,cineonToneMapping:cineonToneMapping,clamp:clamp,clearcoat:clearcoat,clearcoatNormalView:clearcoatNormalView,clearcoatRoughness:clearcoatRoughness,code:code,color:color,colorSpaceToWorking:colorSpaceToWorking,colorToDirection:colorToDirection,compute:compute,computeKernel:computeKernel,computeSkinning:computeSkinning,context:context,convert:convert,convertColorSpace:convertColorSpace,convertToTexture:convertToTexture,cos:cos,cross:cross,cubeTexture:cubeTexture,cubeTextureBase:cubeTextureBase,cubeToUV:cubeToUV,dFdx:dFdx,dFdy:dFdy,dashSize:dashSize,debug:debug,decrement:decrement,decrementBefore:decrementBefore,defaultBuildStages:defaultBuildStages,defaultShaderStages:defaultShaderStages,defined:defined,degrees:degrees,deltaTime:deltaTime,densityFog:densityFog,densityFogFactor:densityFogFactor,depth:depth,depthPass:depthPass,determinant:determinant,difference:difference,diffuseColor:diffuseColor,directPointLight:directPointLight,directionToColor:directionToColor,directionToFaceDirection:directionToFaceDirection,dispersion:dispersion,distance:distance,div:div,dodge:dodge,dot:dot,drawIndex:drawIndex,dynamicBufferAttribute:dynamicBufferAttribute,element:element,emissive:emissive,equal:equal,equals:equals,equirectUV:equirectUV,exp:exp,exp2:exp2,expression:expression,faceDirection:faceDirection,faceForward:faceForward,faceforward:faceforward,float:float,floor:floor,fog:fog,fract:fract,frameGroup:frameGroup,frameId:frameId,frontFacing:frontFacing,fwidth:fwidth,gain:gain,gapSize:gapSize,getConstNodeType:getConstNodeType,getCurrentStack:getCurrentStack,getDirection:getDirection,getDistanceAttenuation:getDistanceAttenuation,getGeometryRoughness:getGeometryRoughness,getNormalFromDepth:getNormalFromDepth,getParallaxCorrectNormal:getParallaxCorrectNormal,getRoughness:getRoughness,getScreenPosition:getScreenPosition,getShIrradianceAt:getShIrradianceAt,getShadowMaterial:getShadowMaterial,getShadowRenderObjectFunction:getShadowRenderObjectFunction,getTextureIndex:getTextureIndex,getViewPosition:getViewPosition,globalId:globalId,glsl:glsl,glslFn:glslFn,grayscale:grayscale,greaterThan:greaterThan,greaterThanEqual:greaterThanEqual,hash:hash,highpModelNormalViewMatrix:highpModelNormalViewMatrix,highpModelViewMatrix:highpModelViewMatrix,hue:hue,increment:increment,incrementBefore:incrementBefore,instance:instance,instanceIndex:instanceIndex,instancedArray:instancedArray,instancedBufferAttribute:instancedBufferAttribute,instancedDynamicBufferAttribute:instancedDynamicBufferAttribute,instancedMesh:instancedMesh,int:int,inverse:inverse,inverseSqrt:inverseSqrt,inversesqrt:inversesqrt,invocationLocalIndex:invocationLocalIndex,invocationSubgroupIndex:invocationSubgroupIndex,ior:ior,iridescence:iridescence,iridescenceIOR:iridescenceIOR,iridescenceThickness:iridescenceThickness,ivec2:ivec2,ivec3:ivec3,ivec4:ivec4,js:js,label:label,length:length,lengthSq:lengthSq,lessThan:lessThan,lessThanEqual:lessThanEqual,lightPosition:lightPosition,lightProjectionUV:lightProjectionUV,lightShadowMatrix:lightShadowMatrix,lightTargetDirection:lightTargetDirection,lightTargetPosition:lightTargetPosition,lightViewPosition:lightViewPosition,lightingContext:lightingContext,lights:lights,linearDepth:linearDepth,linearToneMapping:linearToneMapping,localId:localId,log:log,log2:log2,logarithmicDepthToViewZ:logarithmicDepthToViewZ,luminance:luminance,mat2:mat2,mat3:mat3,mat4:mat4,matcapUV:matcapUV,materialAO:materialAO,materialAlphaTest:materialAlphaTest,materialAnisotropy:materialAnisotropy,materialAnisotropyVector:materialAnisotropyVector,materialAttenuationColor:materialAttenuationColor,materialAttenuationDistance:materialAttenuationDistance,materialClearcoat:materialClearcoat,materialClearcoatNormal:materialClearcoatNormal,materialClearcoatRoughness:materialClearcoatRoughness,materialColor:materialColor,materialDispersion:materialDispersion,materialEmissive:materialEmissive,materialEnvIntensity:materialEnvIntensity,materialEnvRotation:materialEnvRotation,materialIOR:materialIOR,materialIridescence:materialIridescence,materialIridescenceIOR:materialIridescenceIOR,materialIridescenceThickness:materialIridescenceThickness,materialLightMap:materialLightMap,materialLineDashOffset:materialLineDashOffset,materialLineDashSize:materialLineDashSize,materialLineGapSize:materialLineGapSize,materialLineScale:materialLineScale,materialLineWidth:materialLineWidth,materialMetalness:materialMetalness,materialNormal:materialNormal,materialOpacity:materialOpacity,materialPointSize:materialPointSize,materialReference:materialReference,materialReflectivity:materialReflectivity,materialRefractionRatio:materialRefractionRatio,materialRotation:materialRotation,materialRoughness:materialRoughness,materialSheen:materialSheen,materialSheenRoughness:materialSheenRoughness,materialShininess:materialShininess,materialSpecular:materialSpecular,materialSpecularColor:materialSpecularColor,materialSpecularIntensity:materialSpecularIntensity,materialSpecularStrength:materialSpecularStrength,materialThickness:materialThickness,materialTransmission:materialTransmission,max:max$1,maxMipLevel:maxMipLevel,mediumpModelViewMatrix:mediumpModelViewMatrix,metalness:metalness,min:min$1,mix:mix,mixElement:mixElement,mod:mod,modInt:modInt,modelDirection:modelDirection,modelNormalMatrix:modelNormalMatrix,modelPosition:modelPosition,modelRadius:modelRadius,modelScale:modelScale,modelViewMatrix:modelViewMatrix,modelViewPosition:modelViewPosition,modelViewProjection:modelViewProjection,modelWorldMatrix:modelWorldMatrix,modelWorldMatrixInverse:modelWorldMatrixInverse,morphReference:morphReference,mrt:mrt,mul:mul,mx_aastep:mx_aastep,mx_add:mx_add,mx_atan2:mx_atan2,mx_cell_noise_float:mx_cell_noise_float,mx_contrast:mx_contrast,mx_divide:mx_divide,mx_fractal_noise_float:mx_fractal_noise_float,mx_fractal_noise_vec2:mx_fractal_noise_vec2,mx_fractal_noise_vec3:mx_fractal_noise_vec3,mx_fractal_noise_vec4:mx_fractal_noise_vec4,mx_frame:mx_frame,mx_heighttonormal:mx_heighttonormal,mx_hsvtorgb:mx_hsvtorgb,mx_ifequal:mx_ifequal,mx_ifgreater:mx_ifgreater,mx_ifgreatereq:mx_ifgreatereq,mx_invert:mx_invert,mx_modulo:mx_modulo,mx_multiply:mx_multiply,mx_noise_float:mx_noise_float,mx_noise_vec3:mx_noise_vec3,mx_noise_vec4:mx_noise_vec4,mx_place2d:mx_place2d,mx_power:mx_power,mx_ramp4:mx_ramp4,mx_ramplr:mx_ramplr,mx_ramptb:mx_ramptb,mx_rgbtohsv:mx_rgbtohsv,mx_rotate2d:mx_rotate2d,mx_rotate3d:mx_rotate3d,mx_safepower:mx_safepower,mx_separate:mx_separate,mx_splitlr:mx_splitlr,mx_splittb:mx_splittb,mx_srgb_texture_to_lin_rec709:mx_srgb_texture_to_lin_rec709,mx_subtract:mx_subtract,mx_timer:mx_timer,mx_transform_uv:mx_transform_uv,mx_unifiednoise2d:mx_unifiednoise2d,mx_unifiednoise3d:mx_unifiednoise3d,mx_worley_noise_float:mx_worley_noise_float,mx_worley_noise_vec2:mx_worley_noise_vec2,mx_worley_noise_vec3:mx_worley_noise_vec3,negate:negate,neutralToneMapping:neutralToneMapping,nodeArray:nodeArray,nodeImmutable:nodeImmutable,nodeObject:nodeObject,nodeObjectIntent:nodeObjectIntent,nodeObjects:nodeObjects,nodeProxy:nodeProxy,nodeProxyIntent:nodeProxyIntent,normalFlat:normalFlat,normalGeometry:normalGeometry,normalLocal:normalLocal,normalMap:normalMap,normalView:normalView,normalViewGeometry:normalViewGeometry,normalWorld:normalWorld,normalWorldGeometry:normalWorldGeometry,normalize:normalize,not:not,notEqual:notEqual,numWorkgroups:numWorkgroups,objectDirection:objectDirection,objectGroup:objectGroup,objectPosition:objectPosition,objectRadius:objectRadius,objectScale:objectScale,objectViewPosition:objectViewPosition,objectWorldMatrix:objectWorldMatrix,oneMinus:oneMinus,or:or,orthographicDepthToViewZ:orthographicDepthToViewZ,oscSawtooth:oscSawtooth,oscSine:oscSine,oscSquare:oscSquare,oscTriangle:oscTriangle,output:output,outputStruct:outputStruct,overlay:overlay,overloadingFn:overloadingFn,parabola:parabola,parallaxDirection:parallaxDirection,parallaxUV:parallaxUV,parameter:parameter,pass:pass,passTexture:passTexture,pcurve:pcurve,perspectiveDepthToViewZ:perspectiveDepthToViewZ,pmremTexture:pmremTexture,pointShadow:pointShadow,pointUV:pointUV,pointWidth:pointWidth,positionGeometry:positionGeometry,positionLocal:positionLocal,positionPrevious:positionPrevious,positionView:positionView,positionViewDirection:positionViewDirection,positionWorld:positionWorld,positionWorldDirection:positionWorldDirection,posterize:posterize,pow:pow,pow2:pow2,pow3:pow3,pow4:pow4,premultiplyAlpha:premultiplyAlpha,property:property,radians:radians,rand:rand,range:range,rangeFog:rangeFog,rangeFogFactor:rangeFogFactor,reciprocal:reciprocal,reference:reference,referenceBuffer:referenceBuffer,reflect:reflect,reflectVector:reflectVector,reflectView:reflectView,reflector:reflector,refract:refract,refractVector:refractVector,refractView:refractView,reinhardToneMapping:reinhardToneMapping,remap:remap,remapClamp:remapClamp,renderGroup:renderGroup,renderOutput:renderOutput,rendererReference:rendererReference,rotate:rotate,rotateUV:rotateUV,roughness:roughness,round:round,rtt:rtt,sRGBTransferEOTF:sRGBTransferEOTF,sRGBTransferOETF:sRGBTransferOETF,sample:sample,sampler:sampler,samplerComparison:samplerComparison,saturate:saturate,saturation:saturation,screen:screen,screenCoordinate:screenCoordinate,screenSize:screenSize,screenUV:screenUV,scriptable:scriptable,scriptableValue:scriptableValue,select:select,setCurrentStack:setCurrentStack,setName:setName,shaderStages:shaderStages,shadow:shadow,shadowPositionWorld:shadowPositionWorld,shapeCircle:shapeCircle,sharedUniformGroup:sharedUniformGroup,sheen:sheen,sheenRoughness:sheenRoughness,shiftLeft:shiftLeft,shiftRight:shiftRight,shininess:shininess,sign:sign,sin:sin,sinc:sinc,skinning:skinning,smoothstep:smoothstep,smoothstepElement:smoothstepElement,specularColor:specularColor,specularF90:specularF90,spherizeUV:spherizeUV,split:split,spritesheetUV:spritesheetUV,sqrt:sqrt,stack:stack,step:step,stepElement:stepElement,storage:storage,storageBarrier:storageBarrier,storageObject:storageObject,storageTexture:storageTexture,string:string,struct:struct,sub:sub,subBuild:subBuild,subgroupIndex:subgroupIndex,subgroupSize:subgroupSize,tan:tan,tangentGeometry:tangentGeometry,tangentLocal:tangentLocal,tangentView:tangentView,tangentWorld:tangentWorld,temp:temp,texture:texture,texture3D:texture3D,textureBarrier:textureBarrier,textureBicubic:textureBicubic,textureBicubicLevel:textureBicubicLevel,textureCubeUV:textureCubeUV,textureLoad:textureLoad,textureSize:textureSize,textureStore:textureStore,thickness:thickness,time:time,timerDelta:timerDelta,timerGlobal:timerGlobal,timerLocal:timerLocal,toneMapping:toneMapping,toneMappingExposure:toneMappingExposure,toonOutlinePass:toonOutlinePass,transformDirection:transformDirection,transformNormal:transformNormal,transformNormalToView:transformNormalToView,transformedClearcoatNormalView:transformedClearcoatNormalView,transformedNormalView:transformedNormalView,transformedNormalWorld:transformedNormalWorld,transmission:transmission,transpose:transpose,triNoise3D:triNoise3D,triplanarTexture:triplanarTexture,triplanarTextures:triplanarTextures,trunc:trunc,uint:uint,uniform:uniform,uniformArray:uniformArray,uniformCubeTexture:uniformCubeTexture,uniformGroup:uniformGroup,uniformTexture:uniformTexture,unpremultiplyAlpha:unpremultiplyAlpha,userData:userData,uv:uv$1,uvec2:uvec2,uvec3:uvec3,uvec4:uvec4,varying:varying,varyingProperty:varyingProperty,vec2:vec2,vec3:vec3,vec4:vec4,vectorComponents:vectorComponents,velocity:velocity,vertexColor:vertexColor,vertexIndex:vertexIndex,vertexStage:vertexStage,vibrance:vibrance,viewZToLogarithmicDepth:viewZToLogarithmicDepth,viewZToOrthographicDepth:viewZToOrthographicDepth,viewZToPerspectiveDepth:viewZToPerspectiveDepth,viewport:viewport,viewportCoordinate:viewportCoordinate,viewportDepthTexture:viewportDepthTexture,viewportLinearDepth:viewportLinearDepth,viewportMipTexture:viewportMipTexture,viewportResolution:viewportResolution,viewportSafeUV:viewportSafeUV,viewportSharedTexture:viewportSharedTexture,viewportSize:viewportSize,viewportTexture:viewportTexture,viewportUV:viewportUV,wgsl:wgsl,wgslFn:wgslFn,workgroupArray:workgroupArray,workgroupBarrier:workgroupBarrier,workgroupId:workgroupId,workingToColorSpace:workingToColorSpace,xor:xor});const _clearColor=new Color4;class Background extends DataMap{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const i=this.renderer,n=this.nodes.getBackgroundNode(e)||e.background;let o=!1;if(null===n)i._clearColor.getRGB(_clearColor),_clearColor.a=i._clearColor.a;else if(!0===n.isColor)n.getRGB(_clearColor),_clearColor.a=1,o=!0;else if(!0===n.isNode){const a=this.get(e),l=n;_clearColor.copy(i._clearColor);let u=a.backgroundMesh;if(void 0===u){const c=context(vec4(l).mul(backgroundIntensity),{getUV:()=>backgroundRotation.mul(normalWorldGeometry),getTextureLevel:()=>backgroundBlurriness});let h=modelViewProjection;h=h.setZ(h.w);const p=new NodeMaterial;function m(){n.removeEventListener("dispose",m),u.material.dispose(),u.geometry.dispose()}p.name="Background.material",p.side=BackSide,p.depthTest=!1,p.depthWrite=!1,p.allowOverride=!1,p.fog=!1,p.lights=!1,p.vertexNode=h,p.colorNode=c,a.backgroundMeshNode=c,a.backgroundMesh=u=new Mesh(new SphereGeometry(1,32,32),p),u.frustumCulled=!1,u.name="Background.mesh",u.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)},n.addEventListener("dispose",m)}const d=l.getCacheKey();a.backgroundCacheKey!==d&&(a.backgroundMeshNode.node=vec4(l).mul(backgroundIntensity),a.backgroundMeshNode.needsUpdate=!0,u.material.needsUpdate=!0,a.backgroundCacheKey=d),t.unshift(u,u.geometry,u.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",n);const s=i.xr.getEnvironmentBlendMode();if("additive"===s?_clearColor.set(0,0,0,1):"alpha-blend"===s&&_clearColor.set(0,0,0,0),!0===i.autoClear||!0===o){const g=r.clearColorValue;g.r=_clearColor.r,g.g=_clearColor.g,g.b=_clearColor.b,g.a=_clearColor.a,!0!==i.backend.isWebGLBackend&&!0!==i.alpha||(g.r*=g.a,g.g*=g.a,g.b*=g.a),r.depthClearValue=i._clearDepth,r.stencilClearValue=i._clearStencil,r.clearColor=!0===i.autoClearColor,r.clearDepth=!0===i.autoClearDepth,r.clearStencil=!0===i.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let _id$6=0;class BindGroup{constructor(e="",t=[],r=0,i=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=i,this.id=_id$6++}}class NodeBuilderState{constructor(e,t,r,i,n,o,s,a,l,u=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=u,this.nodeAttributes=i,this.bindings=n,this.updateNodes=o,this.updateBeforeNodes=s,this.updateAfterNodes=a,this.observer=l,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new BindGroup(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class NodeAttribute{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class NodeUniform{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class NodeVar{constructor(e,t,r=!1,i=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=r,this.count=i}}class NodeVarying extends NodeVar{constructor(e,t,r=null,i=null){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0,this.interpolationType=r,this.interpolationSampling=i}}class NodeCode{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let _id$5=0;class NodeCache{constructor(e=null){this.id=_id$5++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class StructType{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class Uniform{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class NumberUniform extends Uniform{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class Vector2Uniform extends Uniform{constructor(e,t=new Vector2){super(e,t),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class Vector3Uniform extends Uniform{constructor(e,t=new Vector3){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class Vector4Uniform extends Uniform{constructor(e,t=new Vector4){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class ColorUniform extends Uniform{constructor(e,t=new Color){super(e,t),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class Matrix2Uniform extends Uniform{constructor(e,t=new Matrix2){super(e,t),this.isMatrix2Uniform=!0,this.boundary=8,this.itemSize=4}}class Matrix3Uniform extends Uniform{constructor(e,t=new Matrix3){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class Matrix4Uniform extends Uniform{constructor(e,t=new Matrix4){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class NumberNodeUniform extends NumberUniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Vector2NodeUniform extends Vector2Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Vector3NodeUniform extends Vector3Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Vector4NodeUniform extends Vector4Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class ColorNodeUniform extends ColorUniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Matrix2NodeUniform extends Matrix2Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Matrix3NodeUniform extends Matrix3Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Matrix4NodeUniform extends Matrix4Uniform{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const rendererCache=new WeakMap,typeFromArray=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),toFloat=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class NodeBuilder{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.declarations={},this.flow={code:""},this.chaining=[],this.stack=stack(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new NodeCache,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.subBuildLayers=[],this.currentStack=null,this.subBuildFn=null}getBindGroupsCache(){let e=rendererCache.get(this.renderer);return void 0===e&&(e=new ChainMap,rendererCache.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new RenderTarget(e,t,r)}createCubeRenderTarget(e,t){return new CubeRenderTarget(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const r=this.getBindGroupsCache(),i=[];let n,o=!0;for(const e of t)i.push(e),o=o&&!0!==e.groupNode.shared;return o?(n=r.get(i),void 0===n&&(n=new BindGroup(e,i,this.bindingsIndexes[e].group,i),r.set(i,n))):n=new BindGroup(e,i,this.bindingsIndexes[e].group,i),n}getBindGroupArray(e,t){const r=this.bindings[t];let i=r[e];return void 0===i&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=i=[]),i}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of shaderStages)for(const i in r[e]){const n=r[e][i];(t[i]||(t[i]=[])).push(...n)}e=[];for(const r in t){const i=t[r],n=this._getBindGroup(r,i);e.push(n)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==NodeUpdateType.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==NodeUpdateType.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==NodeUpdateType.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===LinearFilter||e.magFilter===LinearMipmapNearestFilter||e.magFilter===NearestMipmapLinearFilter||e.magFilter===LinearMipmapLinearFilter||e.minFilter===LinearFilter||e.minFilter===LinearMipmapNearestFilter||e.minFilter===NearestMipmapLinearFilter||e.minFilter===LinearMipmapLinearFilter}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new NodeCache(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,r=null){let i=this.generateArrayDeclaration(e,t)+"( ";for(let n=0;n<t;n++){const o=r?r[n]:null;i+=null!==o?o.build(this,e):this.generateConst(e),n<t-1&&(i+=", ")}return i+=" )",i}generateStruct(e,t,r=null){const i=[];for(const e of t){const{name:t,type:n}=e;r&&r[t]&&r[t].isNode?i.push(r[t].build(this,n)):i.push(this.generateConst(n))}return e+"( "+i.join(", ")+" )"}generateConst(e,t=null){if(null===t&&("float"===e||"int"===e||"uint"===e?t=0:"bool"===e?t=!1:"color"===e?t=new Color:"vec2"===e?t=new Vector2:"vec3"===e?t=new Vector3:"vec4"===e&&(t=new Vector4)),"float"===e)return toFloat(t);if("int"===e)return`${Math.round(t)}`;if("uint"===e)return t>=0?`${Math.round(t)}u`:"0u";if("bool"===e)return t?"true":"false";if("color"===e)return`${this.getType("vec3")}( ${toFloat(t.r)}, ${toFloat(t.g)}, ${toFloat(t.b)} )`;const r=this.getTypeLength(e),i=this.getComponentType(e),n=e=>this.generateConst(i,e);if(2===r)return`${this.getType(e)}( ${n(t.x)}, ${n(t.y)} )`;if(3===r)return`${this.getType(e)}( ${n(t.x)}, ${n(t.y)}, ${n(t.z)} )`;if(4===r&&"mat2"!==e)return`${this.getType(e)}( ${n(t.x)}, ${n(t.y)}, ${n(t.z)}, ${n(t.w)} )`;if(r>=4&&t&&(t.isMatrix2||t.isMatrix3||t.isMatrix4))return`${this.getType(e)}( ${t.elements.map(n).join(", ")} )`;if(r>4)return`${this.getType(e)}()`;throw new Error(`NodeBuilder: Type '${e}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const i=new NodeAttribute(e,t);return this.registerDeclaration(i),r.push(i),i}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"samplerComparison"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===IntType)return"int";if(t===UnsignedIntType)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;let r=getTypeFromLength(e);const i="float"===t?"":t[0];return!0===/mat2/.test(t)&&(r=r.replace("vec","mat")),i+r}getTypeFromArray(e){return typeFromArray.get(e.constructor)}isInteger(e){return/int|uint|(i|u)vec/.test(e)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,i=e.itemSize,n=e.normalized;let o;return e instanceof Float16BufferAttribute||!0===n||(o=this.getTypeFromArray(r)),this.getTypeFromLength(i,o)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=stack(this.stack),this.stacks.push(getCurrentStack()||this.stack),setCurrentStack(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,setCurrentStack(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let i=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);void 0===i&&(i={},r.setData(e,i)),void 0===i[t]&&(i[t]={});let n=i[t];const o=i.any?i.any.subBuilds:null,s=this.getClosestSubBuild(o);return s&&(void 0===n.subBuildsCache&&(n.subBuildsCache={}),n=n.subBuildsCache[s]||(n.subBuildsCache[s]={}),n.subBuilds=o),n}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let i=r.bufferAttribute;if(void 0===i){const n=this.uniforms.index++;i=new NodeAttribute("nodeAttribute"+n,t,e),this.bufferAttributes.push(i),r.bufferAttribute=i}return i}getStructTypeFromNode(e,t,r=null,i=this.shaderStage){const n=this.getDataFromNode(e,i,this.globalCache);let o=n.structType;if(void 0===o){const e=this.structs.index++;null===r&&(r="StructType"+e),o=new StructType(r,t),this.structs[i].push(o),n.structType=o}return o}getOutputStructTypeFromNode(e,t){const r=this.getStructTypeFromNode(e,t,"OutputType","fragment");return r.output=!0,r}getUniformFromNode(e,t,r=this.shaderStage,i=null){const n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniform;if(void 0===o){const s=this.uniforms.index++;o=new NodeUniform(i||"nodeUniform"+s,t,e),this.uniforms[r].push(o),this.registerDeclaration(o),n.uniform=o}return o}getVarFromNode(e,t=null,r=e.getNodeType(this),i=this.shaderStage,n=!1){const o=this.getDataFromNode(e,i),s=this.getSubBuildProperty("variable",o.subBuilds);let a=o[s];if(void 0===a){const l=n?"_const":"_var",u=this.vars[i]||(this.vars[i]=[]),d=this.vars[l]||(this.vars[l]=0);null===t&&(t=(n?"nodeConst":"nodeVar")+d,this.vars[l]++),"variable"!==s&&(t=this.getSubBuildProperty(t,o.subBuilds));const c=e.getArrayCount(this);a=new NodeVar(t,r,n,c),n||u.push(a),this.registerDeclaration(a),o[s]=a}return a}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(null!==e.values)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,r=e.getNodeType(this),i=null,n=null){const o=this.getDataFromNode(e,"any"),s=this.getSubBuildProperty("varying",o.subBuilds);let a=o[s];if(void 0===a){const e=this.varyings,l=e.length;null===t&&(t="nodeVarying"+l),"varying"!==s&&(t=this.getSubBuildProperty(t,o.subBuilds)),a=new NodeVarying(t,r,i,n),e.push(a),this.registerDeclaration(a),o[s]=a}return a}registerDeclaration(e){const t=this.shaderStage,r=this.declarations[t]||(this.declarations[t]={}),i=this.getPropertyName(e);let n=1,o=i;for(;void 0!==r[o];)o=i+"_"+n++;n>1&&(e.name=o,console.warn(`THREE.TSL: Declaration name '${i}' of '${e.type}' already in use. Renamed to '${o}'.`)),r[o]=e}getCodeFromNode(e,t,r=this.shaderStage){const i=this.getDataFromNode(e);let n=i.code;if(void 0===n){const e=this.codes[r]||(this.codes[r]=[]),o=e.length;n=new NodeCode("nodeCode"+o,t),e.push(n),i.code=n}return n}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:i}=this.getDataFromNode(e);let n=!0,o=t;for(;o;){if(!0===i.get(o)){n=!1;break}o=this.getDataFromNode(o).parentNodeBlock}if(n)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const i=this.getDataFromNode(e),n=i.flowCodes||(i.flowCodes=[]),o=i.flowCodeBlock||(i.flowCodeBlock=new WeakMap);n.push(t),o.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}addInclude(e){null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new FunctionNode,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new ParameterNode(e.type,e.name);e.layout=null;const i=e.call(r),n=this.flowStagesNode(i,t.type);return e.layout=t,n}flowBuildStage(e,t,r=null){const i=this.getBuildStage();this.setBuildStage(t);const n=e.build(this,r);return this.setBuildStage(i),n}flowStagesNode(e,t=null){const r=this.flow,i=this.vars,n=this.declarations,o=this.cache,s=this.buildStage,a=this.stack,l={code:""};this.flow=l,this.vars={},this.declarations={},this.cache=new NodeCache,this.stack=stack();for(const r of defaultBuildStages)this.setBuildStage(r),l.result=e.build(this,t);return l.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=i,this.declarations=n,this.cache=o,this.stack=a,this.setBuildStage(s),l}getFunctionOperator(){return null}buildFunctionCode(){console.warn("Abstract function.")}flowChildNode(e,t=null){const r=this.flow,i={code:""};return this.flow=i,i.result=e.build(this,t),this.flow=r,i}flowNodeFromShaderStage(e,t,r=null,i=null){const n=this.tab,o=this.cache,s=this.shaderStage,a=this.context;this.setShaderStage(e);const l={...this.context};delete l.nodeBlock,this.cache=this.globalCache,this.tab="\t",this.context=l;let u=null;if("generate"===this.buildStage){const n=this.flowChildNode(t,r);null!==i&&(n.code+=`${this.tab+i} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,u=n}else u=t.build(this);return this.setShaderStage(s),this.cache=o,this.tab=n,this.context=a,u}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,r=null){return`${null!==r?this.generateArrayDeclaration(e,r):this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}get subBuild(){return this.subBuildLayers[this.subBuildLayers.length-1]||null}addSubBuild(e){this.subBuildLayers.push(e)}removeSubBuild(){return this.subBuildLayers.pop()}getClosestSubBuild(e){let t;if(t=e&&e.isNode?e.isShaderCallNodeInternal?e.shaderNode.subBuilds:e.isStackNode?[e.subBuild]:this.getDataFromNode(e,"any").subBuilds:e instanceof Set?[...e]:e,!t)return null;const r=this.subBuildLayers;for(let e=t.length-1;e>=0;e--){const i=t[e];if(r.includes(i))return i}return null}getSubBuildOutput(e){return this.getSubBuildProperty("outputNode",e)}getSubBuildProperty(e="",t=null){let r,i;return r=null!==t?this.getClosestSubBuild(t):this.subBuildFn,i=r?e?r+"_"+e:r:e,i}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new NodeMaterial),e.build(this)}else this.addFlow("compute",e);for(const e of defaultBuildStages){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of shaderStages){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new NumberNodeUniform(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new Vector2NodeUniform(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new Vector3NodeUniform(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new Vector4NodeUniform(e);if("color"===t)return new ColorNodeUniform(e);if("mat2"===t)return new Matrix2NodeUniform(e);if("mat3"===t)return new Matrix3NodeUniform(e);if("mat4"===t)return new Matrix4NodeUniform(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const i=this.getTypeLength(t),n=this.getTypeLength(r);return 16===i&&9===n?`${this.getType(r)}( ${e}[ 0 ].xyz, ${e}[ 1 ].xyz, ${e}[ 2 ].xyz )`:9===i&&4===n?`${this.getType(r)}( ${e}[ 0 ].xy, ${e}[ 1 ].xy )`:i>4||n>4||0===n?e:i===n?`${this.getType(r)}( ${e} )`:i>n?(e="bool"===r?`all( ${e} )`:`${e}.${"xyz".slice(0,n)}`,this.format(e,this.getTypeFromLength(n,this.getComponentType(t)),r)):4===n&&i>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===i?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===i&&n>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${REVISION} - Node System\n`}*[Symbol.iterator](){}}class NodeFrame{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===NodeUpdateType.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===NodeUpdateType.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===NodeUpdateType.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===NodeUpdateType.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===NodeUpdateType.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===NodeUpdateType.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===NodeUpdateType.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===NodeUpdateType.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===NodeUpdateType.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class NodeFunctionInput{constructor(e,t,r=null,i="",n=!1){this.type=e,this.name=t,this.count=r,this.qualifier=i,this.isConst=n}}NodeFunctionInput.isNodeFunctionInput=!0;class DirectionalLightNode extends AnalyticLightNode{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setupDirect(){const e=this.colorNode;return{lightDirection:lightTargetDirection(this.light),lightColor:e}}}const _matrix41=new Matrix4,_matrix42=new Matrix4;let _ltcLib=null;class RectAreaLightNode extends AnalyticLightNode{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=uniform(new Vector3).setGroup(renderGroup),this.halfWidth=uniform(new Vector3).setGroup(renderGroup),this.updateType=NodeUpdateType.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;_matrix42.identity(),_matrix41.copy(t.matrixWorld),_matrix41.premultiply(r),_matrix42.extractRotation(_matrix41),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(_matrix42),this.halfHeight.value.applyMatrix4(_matrix42)}setupDirectRectArea(e){let t,r;e.isAvailable("float32Filterable")?(t=texture(_ltcLib.LTC_FLOAT_1),r=texture(_ltcLib.LTC_FLOAT_2)):(t=texture(_ltcLib.LTC_HALF_1),r=texture(_ltcLib.LTC_HALF_2));const{colorNode:i,light:n}=this;return{lightColor:i,lightPosition:lightViewPosition(n),halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:t,ltc_2:r}}static setLTC(e){_ltcLib=e}}class SpotLightNode extends AnalyticLightNode{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=uniform(0).setGroup(renderGroup),this.penumbraCosNode=uniform(0).setGroup(renderGroup),this.cutoffDistanceNode=uniform(0).setGroup(renderGroup),this.decayExponentNode=uniform(0).setGroup(renderGroup),this.colorNode=uniform(this.color).setGroup(renderGroup)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e,t){const{coneCosNode:r,penumbraCosNode:i}=this;return smoothstep(r,i,t)}getLightCoord(e){const t=e.getNodeProperties(this);let r=t.projectionUV;return void 0===r&&(r=lightProjectionUV(this.light,e.context.positionWorld),t.projectionUV=r),r}setupDirect(e){const{colorNode:t,cutoffDistanceNode:r,decayExponentNode:i,light:n}=this,o=this.getLightVector(e),s=o.normalize(),a=s.dot(lightTargetDirection(n)),l=this.getSpotAttenuation(e,a),u=o.length(),d=getDistanceAttenuation({lightDistance:u,cutoffDistance:r,decayExponent:i});let c,h,p=t.mul(l).mul(d);if(n.colorNode?(h=this.getLightCoord(e),c=n.colorNode(h)):n.map&&(h=this.getLightCoord(e),c=texture(n.map,h.xy).onRenderUpdate((()=>n.map))),c){p=h.mul(2).sub(1).abs().lessThan(1).all().select(p.mul(c),p)}return{lightColor:p,lightDirection:s}}}class IESSpotLightNode extends SpotLightNode{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e,t){const r=this.light.iesMap;let i=null;if(r&&!0===r.isTexture){const e=t.acos().mul(1/Math.PI);i=texture(r,vec2(e,0),0).r}else i=super.getSpotAttenuation(t);return i}}const sdBox=Fn((([e,t])=>{const r=e.abs().sub(t);return length(max$1(r,0)).add(min$1(max$1(r.x,r.y),0))}));class ProjectorLightNode extends SpotLightNode{static get type(){return"ProjectorLightNode"}update(e){super.update(e);const t=this.light;if(this.penumbraCosNode.value=Math.min(Math.cos(t.angle*(1-t.penumbra)),.99999),null===t.aspect){let e=1;null!==t.map&&(e=t.map.width/t.map.height),t.shadow.aspect=e}else t.shadow.aspect=t.aspect}getSpotAttenuation(e){const t=float(0),r=this.penumbraCosNode,i=lightShadowMatrix(this.light).mul(e.context.positionWorld||positionWorld);return If(i.w.greaterThan(0),(()=>{const e=i.xyz.div(i.w),n=sdBox(e.xy.sub(vec2(.5)),vec2(.5)),o=div(-1,sub(1,acos(r)).sub(1));t.assign(saturate(n.mul(-2).mul(o)))})),t}}class AmbientLightNode extends AnalyticLightNode{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class HemisphereLightNode extends AnalyticLightNode{static get type(){return"HemisphereLightNode"}constructor(e=null){super(e),this.lightPositionNode=lightPosition(e),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=uniform(new Color).setGroup(renderGroup)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:i}=this,n=normalWorld.dot(i).mul(.5).add(.5),o=mix(r,t,n);e.context.irradiance.addAssign(o)}}class LightProbeNode extends AnalyticLightNode{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new Vector3);this.lightProbe=uniformArray(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=getShIrradianceAt(normalWorld,this.lightProbe);e.context.irradiance.addAssign(t)}}class NodeParser{parseFunction(){console.warn("Abstract function.")}}class NodeFunction{constructor(e,t,r="",i=""){this.type=e,this.inputs=t,this.name=r,this.precision=i}getCode(){console.warn("Abstract function.")}}NodeFunction.isNodeFunction=!0;const declarationRegexp$1=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,propertiesRegexp$1=/[a-z_0-9]+/gi,pragmaMain="#pragma main",parse$1=e=>{const t=(e=e.trim()).indexOf(pragmaMain),r=-1!==t?e.slice(t+12):e,i=r.match(declarationRegexp$1);if(null!==i&&5===i.length){const n=i[4],o=[];let s=null;for(;null!==(s=propertiesRegexp$1.exec(n));)o.push(s);const a=[];let l=0;for(;l<o.length;){const e="const"===o[l][0];!0===e&&l++;let t=o[l][0];"in"===t||"out"===t||"inout"===t?l++:t="";const r=o[l++][0];let i=Number.parseInt(o[l][0]);!1===Number.isNaN(i)?l++:i=null;const n=o[l++][0];a.push(new NodeFunctionInput(r,n,i,t,e))}const u=r.substring(i[0].length),d=void 0!==i[3]?i[3]:"";return{type:i[2],inputs:a,name:d,precision:void 0!==i[1]?i[1]:"",inputsCode:n,blockCode:u,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")};class GLSLNodeFunction extends NodeFunction{constructor(e){const{type:t,inputs:r,name:i,precision:n,inputsCode:o,blockCode:s,headerCode:a}=parse$1(e);super(t,r,i,n),this.inputsCode=o,this.blockCode=s,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:i,inputsCode:n,headerCode:o,precision:s}=this;let a=`${i} ${e} ( ${n.trim()} )`;""!==s&&(a=`${s} ${a}`),t=o+a+r}else t="";return t}}class GLSLNodeParser extends NodeParser{parseFunction(e){return new GLSLNodeFunction(e)}}const _outputNodeMap=new WeakMap,_chainKeys$2=[],_cacheKeyValues=[];class Nodes extends DataMap{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new NodeFrame,this.nodeBuilderCache=new Map,this.callHashCache=new ChainMap,this.groupsData=new ChainMap,this.cacheLib={}}updateGroup(e){const t=e.groupNode,r=t.name;if(r===objectGroup.name)return!0;if(r===renderGroup.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===frameGroup.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}_chainKeys$2[0]=t,_chainKeys$2[1]=e;let i=this.groupsData.get(_chainKeys$2);return void 0===i&&this.groupsData.set(_chainKeys$2,i={}),_chainKeys$2.length=0,i.version!==t.version&&(i.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:i}=this,n=this.getForRenderCacheKey(e);if(r=i.get(n),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview&&t.enableMultiview(),t.build(),r=this._createNodeBuilderState(t),i.set(n,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const i=this.backend.createNodeBuilder(e,this.renderer);i.build(),r=this._createNodeBuilderState(i),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new NodeBuilderState(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const r=this.get(e);r.environmentNode&&(t=r.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const r=this.get(e);r.backgroundNode&&(t=r.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){_chainKeys$2[0]=e,_chainKeys$2[1]=t;const r=this.renderer.info.calls,i=this.callHashCache.get(_chainKeys$2)||{};if(i.callId!==r){const n=this.getEnvironmentNode(e),o=this.getFogNode(e);t&&_cacheKeyValues.push(t.getCacheKey(!0)),n&&_cacheKeyValues.push(n.getCacheKey()),o&&_cacheKeyValues.push(o.getCacheKey()),_cacheKeyValues.push(this.renderer.getOutputRenderTarget()&&this.renderer.getOutputRenderTarget().multiview?1:0),_cacheKeyValues.push(this.renderer.shadowMap.enabled?1:0),i.callId=r,i.cacheKey=hashArray(_cacheKeyValues),this.callHashCache.set(_chainKeys$2,i),_cacheKeyValues.length=0}return _chainKeys$2.length=0,i.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const i=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||i){const n=this.getCacheNode("background",r,(()=>{if(!0===r.isCubeTexture||r.mapping===EquirectangularReflectionMapping||r.mapping===EquirectangularRefractionMapping||r.mapping===CubeUVReflectionMapping){if(e.backgroundBlurriness>0||r.mapping===CubeUVReflectionMapping)return pmremTexture(r);{let e;return e=!0===r.isCubeTexture?cubeTexture(r):texture(r),cubeMapNode(e)}}if(!0===r.isTexture)return texture(r,screenUV.flipY()).setUpdateMatrix(!0);!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r)}),i);t.backgroundNode=n,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,r,i=!1){const n=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let o=n.get(t);return(void 0===o||i)&&(o=r(),n.set(t,o)),o}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){const e=this.getCacheNode("fog",r,(()=>{if(r.isFogExp2){const e=reference("color","color",r).setGroup(renderGroup),t=reference("density","float",r).setGroup(renderGroup);return fog(e,densityFogFactor(t))}if(r.isFog){const e=reference("color","color",r).setGroup(renderGroup),t=reference("near","float",r).setGroup(renderGroup),i=reference("far","float",r).setGroup(renderGroup);return fog(e,rangeFogFactor(t,i))}console.error("THREE.Renderer: Unsupported fog configuration.",r)}));t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){const e=this.getCacheNode("environment",r,(()=>!0===r.isCubeTexture?cubeTexture(r):!0===r.isTexture?texture(r):void console.error("Nodes: Unsupported environment configuration.",r)));t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,i=null,n=null){const o=this.nodeFrame;return o.renderer=e,o.scene=t,o.object=r,o.camera=i,o.material=n,o}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace+","+e.xr.isPresenting}hasOutputChange(e){return _outputNodeMap.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),i=e.isArrayTexture?texture3D(e,vec3(screenUV,builtin("gl_ViewID_OVR"))).renderOutput(t.toneMapping,t.currentColorSpace):texture(e,screenUV).renderOutput(t.toneMapping,t.currentColorSpace);return _outputNodeMap.set(e,r),i}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new NodeFrame,this.nodeBuilderCache=new Map,this.cacheLib={}}}const _plane=new Plane;class ClippingContext{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new Matrix3,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,null!==e&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,r){const i=e.length;for(let n=0;n<i;n++){_plane.copy(e[n]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const i=t[r+n],o=_plane.normal;i.x=-o.x,i.y=-o.y,i.z=-o.z,i.w=_plane.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,s;if(this.clipIntersection?(o=this.intersectionPlanes,s=e.intersectionPlanes.length):(o=this.unionPlanes,s=e.unionPlanes.length),o.length!==s+n){o.length=s+n;for(let e=0;e<n;e++)o[s+e]=new Vector4;r=!0}this.projectPlanes(i,o,s),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new ClippingContext(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class RenderBundle{constructor(e,t){this.bundleGroup=e,this.camera=t}}const _chainKeys$1=[];class RenderBundles{constructor(){this.bundles=new ChainMap}get(e,t){const r=this.bundles;_chainKeys$1[0]=e,_chainKeys$1[1]=t;let i=r.get(_chainKeys$1);return void 0===i&&(i=new RenderBundle(e,t),r.set(_chainKeys$1,i)),_chainKeys$1.length=0,i}dispose(){this.bundles=new ChainMap}}class NodeLibrary{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const _defaultLights=new LightsNode,_chainKeys=[];class Lighting extends ChainMap{constructor(){super()}createNode(e=[]){return(new LightsNode).setLights(e)}getNode(e,t){if(e.isQuadMesh)return _defaultLights;_chainKeys[0]=e,_chainKeys[1]=t;let r=this.get(_chainKeys);return void 0===r&&(r=this.createNode(),this.set(_chainKeys,r)),_chainKeys.length=0,r}}class XRRenderTarget extends RenderTarget{constructor(e=1,t=1,r={}){super(e,t,r),this.isXRRenderTarget=!0,this._hasExternalTextures=!1,this._autoAllocateDepthBuffer=!0,this._isOpaqueFramebuffer=!1}copy(e){return super.copy(e),this._hasExternalTextures=e._hasExternalTextures,this._autoAllocateDepthBuffer=e._autoAllocateDepthBuffer,this._isOpaqueFramebuffer=e._isOpaqueFramebuffer,this}}const _cameraLPos=new Vector3,_cameraRPos=new Vector3;class XRManager extends EventDispatcher{constructor(e,t=!1){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new PerspectiveCamera,this._cameraL.viewport=new Vector4,this._cameraR=new PerspectiveCamera,this._cameraR.viewport=new Vector4,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new ArrayCamera,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._supportsLayers=!1,this._supportsGlBinding="undefined"!=typeof XRWebGLBinding,this._frameBufferTargets=null,this._createXRLayer=createXRLayer.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new Vector2,this._onSessionEvent=onSessionEvent.bind(this),this._onSessionEnd=onSessionEnd.bind(this),this._onInputSourcesChange=onInputSourcesChange.bind(this),this._onAnimationFrame=onAnimationFrame.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers=this._supportsGlBinding&&"createProjectionLayer"in XRWebGLBinding.prototype,this._useMultiviewIfPossible=t,this._useMultiview=!1}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}useMultiview(){return this._useMultiview}createQuadLayer(e,t,r,i,n,o,s,a={}){const l=new PlaneGeometry(e,t),u=new XRRenderTarget(n,o,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(n,o,a.stencil?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,a.stencil?DepthStencilFormat:DepthFormat),stencilBuffer:a.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});u._autoAllocateDepthBuffer=!0;const d=new MeshBasicMaterial({color:16777215,side:FrontSide});d.map=u.texture,d.map.offset.y=1,d.map.repeat.y=-1;const c=new Mesh(l,d);c.position.copy(r),c.quaternion.copy(i);const h={type:"quad",width:e,height:t,translation:r,quaternion:i,pixelwidth:n,pixelheight:o,plane:c,material:d,rendercall:s,renderTarget:u};if(this._layers.push(h),null!==this._session){h.plane.material=new MeshBasicMaterial({color:16777215,side:FrontSide}),h.plane.material.blending=CustomBlending,h.plane.material.blendEquation=AddEquation,h.plane.material.blendSrc=ZeroFactor,h.plane.material.blendDst=ZeroFactor,h.xrlayer=this._createXRLayer(h);const e=this._session.renderState.layers;e.unshift(h.xrlayer),this._session.updateRenderState({layers:e})}else u.isXRRenderTarget=!1;return c}createCylinderLayer(e,t,r,i,n,o,s,a,l={}){const u=new CylinderGeometry(e,e,e*t/r,64,64,!0,Math.PI-t/2,t),d=new XRRenderTarget(o,s,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(o,s,l.stencil?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,l.stencil?DepthStencilFormat:DepthFormat),stencilBuffer:l.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});d._autoAllocateDepthBuffer=!0;const c=new MeshBasicMaterial({color:16777215,side:BackSide});c.map=d.texture,c.map.offset.y=1,c.map.repeat.y=-1;const h=new Mesh(u,c);h.position.copy(i),h.quaternion.copy(n);const p={type:"cylinder",radius:e,centralAngle:t,aspectratio:r,translation:i,quaternion:n,pixelwidth:o,pixelheight:s,plane:h,material:c,rendercall:a,renderTarget:d};if(this._layers.push(p),null!==this._session){p.plane.material=new MeshBasicMaterial({color:16777215,side:BackSide}),p.plane.material.blending=CustomBlending,p.plane.material.blendEquation=AddEquation,p.plane.material.blendSrc=ZeroFactor,p.plane.material.blendDst=ZeroFactor,p.xrlayer=this._createXRLayer(p);const e=this._session.renderState.layers;e.unshift(p.xrlayer),this._session.updateRenderState({layers:e})}else d.isXRRenderTarget=!1;return h}renderLayers(){const e=new Vector3,t=new Quaternion,r=this._renderer,i=this.isPresenting,n=r.getOutputRenderTarget(),o=r._frameBufferTarget;this.isPresenting=!1;const s=new Vector2;r.getSize(s);const a=r._quad;for(const i of this._layers)if(i.renderTarget.isXRRenderTarget=null!==this._session,i.renderTarget._hasExternalTextures=i.renderTarget.isXRRenderTarget,i.renderTarget.isXRRenderTarget&&this._supportsLayers){i.xrlayer.transform=new XRRigidTransform(i.plane.getWorldPosition(e),i.plane.getWorldQuaternion(t));const n=this._glBinding.getSubImage(i.xrlayer,this._xrFrame);r.backend.setXRRenderTargetTextures(i.renderTarget,n.colorTexture,void 0),r._setXRLayerSize(i.renderTarget.width,i.renderTarget.height),r.setOutputRenderTarget(i.renderTarget),r.setRenderTarget(null),r._frameBufferTarget=null,this._frameBufferTargets||(this._frameBufferTargets=new WeakMap);const{frameBufferTarget:o,quad:s}=this._frameBufferTargets.get(i.renderTarget)||{frameBufferTarget:null,quad:null};o?(r._frameBufferTarget=o,r._quad=s):(r._quad=new QuadMesh(new NodeMaterial),this._frameBufferTargets.set(i.renderTarget,{frameBufferTarget:r._getFrameBufferTarget(),quad:r._quad})),i.rendercall(),r._frameBufferTarget=null}else r.setRenderTarget(i.renderTarget),i.rendercall();r.setRenderTarget(null),r.setOutputRenderTarget(n),r._frameBufferTarget=o,r._setXRLayerSize(s.x,s.y),r._quad=a,this.isPresenting=i}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend;this._gl=t.getContext();const i=this._gl,n=i.getContextAttributes();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),this._supportsGlBinding){const t=new XRWebGLBinding(e,i);this._glBinding=t}if(!0===this._useLayers){let r=null,o=null,s=null;t.depth&&(s=t.stencil?i.DEPTH24_STENCIL8:i.DEPTH_COMPONENT24,r=t.stencil?DepthStencilFormat:DepthFormat,o=t.stencil?UnsignedInt248Type:UnsignedIntType);const a={colorFormat:i.RGBA8,depthFormat:s,scaleFactor:this._framebufferScaleFactor,clearOnAccess:!1};this._useMultiviewIfPossible&&t.hasFeature("OVR_multiview2")&&(a.textureType="texture-array",this._useMultiview=!0);const l=this._glBinding.createProjectionLayer(a),u=[l];this._glProjLayer=l,t.setPixelRatio(1),t._setXRLayerSize(l.textureWidth,l.textureHeight);const d=this._useMultiview?2:1,c=new DepthTexture(l.textureWidth,l.textureHeight,o,void 0,void 0,void 0,void 0,void 0,void 0,r,d);if(this._xrRenderTarget=new XRRenderTarget(l.textureWidth,l.textureHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:t.outputColorSpace,depthTexture:c,stencilBuffer:t.stencil,samples:n.antialias?4:0,resolveDepthBuffer:!1===l.ignoreDepthValues,resolveStencilBuffer:!1===l.ignoreDepthValues,depth:this._useMultiview?2:1,multiview:this._useMultiview}),this._xrRenderTarget._hasExternalTextures=!0,this._xrRenderTarget.depth=this._useMultiview?2:1,this._supportsLayers=e.enabledFeatures.includes("layers"),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._supportsLayers)for(const e of this._layers)e.plane.material=new MeshBasicMaterial({color:16777215,side:"cylinder"===e.type?BackSide:FrontSide}),e.plane.material.blending=CustomBlending,e.plane.material.blendEquation=AddEquation,e.plane.material.blendSrc=ZeroFactor,e.plane.material.blendDst=ZeroFactor,e.xrlayer=this._createXRLayer(e),u.unshift(e.xrlayer);e.updateRenderState({layers:u})}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},n=new XRWebGLLayer(e,i,r);this._glBaseLayer=n,e.updateRenderState({baseLayer:n}),t.setPixelRatio(1),t._setXRLayerSize(n.framebufferWidth,n.framebufferHeight),this._xrRenderTarget=new XRRenderTarget(n.framebufferWidth,n.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:!1===n.ignoreDepthValues,resolveStencilBuffer:!1===n.ignoreDepthValues}),this._xrRenderTarget._isOpaqueFramebuffer=!0,this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType())}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,i=e.far,n=this._cameraXR,o=this._cameraL,s=this._cameraR;n.near=s.near=o.near=r,n.far=s.far=o.far=i,n.isMultiViewCamera=this._useMultiview,this._currentDepthNear===n.near&&this._currentDepthFar===n.far||(t.updateRenderState({depthNear:n.near,depthFar:n.far}),this._currentDepthNear=n.near,this._currentDepthFar=n.far),n.layers.mask=6|e.layers.mask,o.layers.mask=3&n.layers.mask,s.layers.mask=5&n.layers.mask;const a=e.parent,l=n.cameras;updateCamera(n,a);for(let e=0;e<l.length;e++)updateCamera(l[e],a);2===l.length?setProjectionFromUnion(n,o,s):n.projectionMatrix.copy(o.projectionMatrix),updateUserCamera(e,n,a)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new WebXRController,this._controllers[e]=t),t}}function setProjectionFromUnion(e,t,r){_cameraLPos.setFromMatrixPosition(t.matrixWorld),_cameraRPos.setFromMatrixPosition(r.matrixWorld);const i=_cameraLPos.distanceTo(_cameraRPos),n=t.projectionMatrix.elements,o=r.projectionMatrix.elements,s=n[14]/(n[10]-1),a=n[14]/(n[10]+1),l=(n[9]+1)/n[5],u=(n[9]-1)/n[5],d=(n[8]-1)/n[0],c=(o[8]+1)/o[0],h=s*d,p=s*c,m=i/(-d+c),g=m*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(g),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===n[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=s+m,r=a+m,n=h-g,o=p+(i-g),d=l*a/r*t,c=u*a/r*t;e.projectionMatrix.makePerspective(n,o,d,c,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function updateCamera(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function updateUserCamera(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*RAD2DEG*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}function onSessionEvent(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function onSessionEnd(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}if(this._currentDepthNear=null,this._currentDepthFar=null,t._resetXRState(),this._session=null,this._xrRenderTarget=null,!0===this._supportsLayers)for(const e of this._layers)e.renderTarget=new XRRenderTarget(e.pixelwidth,e.pixelheight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(e.pixelwidth,e.pixelheight,e.stencilBuffer?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,e.stencilBuffer?DepthStencilFormat:DepthFormat),stencilBuffer:e.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),e.renderTarget.isXRRenderTarget=!1,e.plane.material=e.material,e.material.map=e.renderTarget.texture,e.material.map.offset.y=1,e.material.map.repeat.y=-1,delete e.xrlayer;this.isPresenting=!1,this._useMultiview=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function onInputSourcesChange(e){const t=this._controllers,r=this._controllerInputSources;for(let i=0;i<e.removed.length;i++){const n=e.removed[i],o=r.indexOf(n);o>=0&&(r[o]=null,t[o].disconnect(n))}for(let i=0;i<e.added.length;i++){const n=e.added[i];let o=r.indexOf(n);if(-1===o){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(n),o=e;break}if(null===r[e]){r[e]=n,o=e;break}}if(-1===o)break}const s=t[o];s&&s.connect(n)}}function createXRLayer(e){return"quad"===e.type?this._glBinding.createQuadLayer({transform:new XRRigidTransform(e.translation,e.quaternion),width:e.width/2,height:e.height/2,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(e.translation,e.quaternion),radius:e.radius,centralAngle:e.centralAngle,aspectRatio:e.aspectRatio,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1})}function onAnimationFrame(e,t){if(void 0===t)return;const r=this._cameraXR,i=this._renderer,n=i.backend,o=this._glBaseLayer,s=this.getReferenceSpace(),a=t.getViewerPose(s);if(this._xrFrame=t,null!==a){const e=a.views;null!==this._glBaseLayer&&n.setXRTarget(o.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let i=0;i<e.length;i++){const s=e[i];let a;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,s);a=e.viewport,0===i&&n.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues&&!this._useMultiview?void 0:e.depthStencilTexture)}else a=o.getViewport(s);let l=this._cameras[i];void 0===l&&(l=new PerspectiveCamera,l.layers.enable(i),l.viewport=new Vector4,this._cameras[i]=l),l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(s.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(a.x,a.y,a.width,a.height),0===i&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}i.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],i=this._controllers[e];null!==r&&void 0!==i&&i.update(r,t,s)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}const _scene=new Scene,_drawingBufferSize=new Vector2,_screen=new Vector4,_frustum=new Frustum,_frustumArray=new FrustumArray,_projScreenMatrix=new Matrix4,_vector4=new Vector4;class Renderer{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:s=!1,samples:a=0,getFallback:l=null,colorBufferType:u=HalfFloatType,multiview:d=!1}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=a||!0===s?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=SRGBColorSpace,this.toneMapping=NoToneMapping,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new Info,this.overrideNodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new NodeLibrary,this.lighting=new Lighting,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new Vector4(0,0,this._width,this._height),this._scissor=new Vector4(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new QuadMesh(new NodeMaterial),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new Color4(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=u,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:PCFShadowMap},this.xr=new XRManager(this,d),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const i=this._renderLists.get(e,t),n=this._renderContexts.get(e,t,this._renderTarget),o=e.overrideMaterial||r.material,s=this._objects.get(r,o,e,t,i.lightsNode,n,n.clippingContext),{fragmentShader:a,vertexShader:l}=s.getNodeBuilderState();return{fragmentShader:a,vertexShader:l}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new Nodes(this,r),this._animation=new Animation(this._nodes,this.info),this._attributes=new Attributes(r),this._background=new Background(this,this._nodes),this._geometries=new Geometries(this._attributes,this.info),this._textures=new Textures(this,r,this.info),this._pipelines=new Pipelines(r,this._nodes),this._bindings=new Bindings(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new RenderObjects(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new RenderLists(this.lighting),this._bundles=new RenderBundles,this._renderContexts=new RenderContexts,this._animation.start(),this._initialized=!0,e(this)}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,s=this._currentRenderObjectFunction,a=this._compilationPromises,l=!0===e.isScene?e:_scene;null===r&&(r=e);const u=this._renderTarget,d=this._renderContexts.get(r,t,u),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,i.renderId++,i.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new ClippingContext),d.clippingContext.updateGlobal(l,t),l.onBeforeRender(this,e,t,u);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==u){this._textures.updateRenderTarget(u,c);const e=this._textures.get(u);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._background.update(l,p,d);const m=p.opaque,g=p.transparent,f=p.transparentDoublePass,x=p.lightsNode;!0===this.opaque&&m.length>0&&this._renderObjects(m,t,l,x),!0===this.transparent&&g.length>0&&this._renderTransparents(g,f,t,l,x),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=s,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}set highPrecision(e){!0===e?(this.overrideNodes.modelViewMatrix=highpModelViewMatrix,this.overrideNodes.modelNormalViewMatrix=highpModelNormalViewMatrix):this.highPrecision&&(this.overrideNodes.modelViewMatrix=null,this.overrideNodes.modelNormalViewMatrix=null)}get highPrecision(){return this.overrideNodes.modelViewMatrix===highpModelViewMatrix&&this.overrideNodes.modelNormalViewMatrix===highpModelNormalViewMatrix}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:i,camera:n,renderList:o}=e,s=this._currentRenderContext,a=this._bundles.get(i,n),l=this.backend.get(a);void 0===l.renderContexts&&(l.renderContexts=new Set);const u=i.version!==l.version,d=!1===l.renderContexts.has(s)||u;if(l.renderContexts.add(s),d){this.backend.beginBundle(s),(void 0===l.renderObjects||u)&&(l.renderObjects=[]),this._currentRenderBundle=a;const{transparentDoublePass:e,transparent:d,opaque:c}=o;!0===this.opaque&&c.length>0&&this._renderObjects(c,n,t,r),!0===this.transparent&&d.length>0&&this._renderTransparents(d,e,n,t,r),this._currentRenderBundle=null,this.backend.finishBundle(s,a),l.version=i.version}else{const{renderObjects:e}=l;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(s,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this,r=e!==NoToneMapping,i=t!==ColorManagement.workingColorSpace;if(!1===r&&!1===i)return null;const{width:n,height:o}=this.getDrawingBufferSize(_drawingBufferSize),{depth:s,stencil:a}=this;let l=this._frameBufferTarget;null===l&&(l=new RenderTarget(n,o,{depthBuffer:s,stencilBuffer:a,type:this._colorBufferType,format:RGBAFormat,colorSpace:ColorManagement.workingColorSpace,generateMipmaps:!1,minFilter:LinearFilter,magFilter:LinearFilter,samples:this.samples}),l.isPostProcessingRenderTarget=!0,this._frameBufferTarget=l);const u=this.getOutputRenderTarget();return l.depthBuffer=s,l.stencilBuffer=a,null!==u?l.setSize(u.width,u.height,u.depth):l.setSize(n,o,1),l.viewport.copy(this._viewport),l.scissor.copy(this._scissor),l.viewport.multiplyScalar(this._pixelRatio),l.scissor.multiplyScalar(this._pixelRatio),l.scissorTest=this._scissorTest,l.multiview=null!==u&&u.multiview,l.resolveDepthBuffer=null===u||u.resolveDepthBuffer,l._autoAllocateDepthBuffer=null!==u&&u._autoAllocateDepthBuffer,l}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const i=r?this._getFrameBufferTarget():null,n=this._nodes.nodeFrame,o=n.renderId,s=this._currentRenderContext,a=this._currentRenderObjectFunction,l=!0===e.isScene?e:_scene,u=this._renderTarget||this._outputRenderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==i?(h=i,this.setRenderTarget(h)):h=u;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,n.renderId=this.info.calls;const m=this.coordinateSystem,g=this.xr;if(t.coordinateSystem!==m&&!1===g.isPresenting&&(t.coordinateSystem=m,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=m,e.updateProjectionMatrix();!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===g.enabled&&!0===g.isPresenting&&(!0===g.cameraAutoUpdate&&g.updateCamera(t),t=g.getCamera());let f=this._viewport,x=this._scissor,_=this._pixelRatio;null!==h&&(f=h.viewport,x=h.scissor,_=1),this.getDrawingBufferSize(_drawingBufferSize),_screen.set(0,0,_drawingBufferSize.width,_drawingBufferSize.height);const y=void 0===f.minDepth?0:f.minDepth,T=void 0===f.maxDepth?1:f.maxDepth;p.viewportValue.copy(f).multiplyScalar(_).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=y,p.viewportValue.maxDepth=T,p.viewport=!1===p.viewportValue.equals(_screen),p.scissorValue.copy(x).multiplyScalar(_).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(_screen),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new ClippingContext),p.clippingContext.updateGlobal(l,t),l.onBeforeRender(this,e,t,h);const b=t.isArrayCamera?_frustumArray:_frustum;t.isArrayCamera||(_projScreenMatrix.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),b.setFromProjectionMatrix(_projScreenMatrix,t.coordinateSystem,t.reversedDepth));const N=this._renderLists.get(e,t);if(N.begin(),this._projectObject(e,t,0,N,p.clippingContext),N.finish(),!0===this.sortObjects&&N.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=N.occlusionQueryCount,this._background.update(l,N,p),p.camera=t,this.backend.beginRender(p);const{bundles:v,lightsNode:S,transparentDoublePass:C,transparent:M,opaque:R}=N;return v.length>0&&this._renderBundles(v,l,S),!0===this.opaque&&R.length>0&&this._renderObjects(R,t,l,S),!0===this.transparent&&M.length>0&&this._renderTransparents(M,C,t,l,S),this.backend.finishRender(p),n.renderId=o,this._currentRenderContext=s,this._currentRenderObjectFunction=a,null!==i&&(this.setRenderTarget(u,d,c),this._renderOutput(h)),l.onAfterRender(this,e,t,h),p}_setXRLayerSize(e,t){this._width=e,this._height=t,this.setViewport(0,0,e,t)}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const r=this.autoClear,i=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=r,this.xr.enabled=i}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setSize(e,t,r=!0){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,i){const n=this._scissor;e.isVector4?n.copy(e):n.set(e,t,r,i)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,i,n=0,o=1){const s=this._viewport;e.isVector4?s.copy(e):s.set(e,t,r,i),s.minDepth=n,s.maxDepth=o}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const i=this._renderTarget||this._getFrameBufferTarget();let n=null;if(null!==i){this._textures.updateRenderTarget(i);const e=this._textures.get(i);n=this._renderContexts.getForClear(i),n.textures=e.textures,n.depthTexture=e.depthTexture,n.width=e.width,n.height=e.height,n.renderTarget=i,n.depth=i.depthBuffer,n.stencil=i.stencilBuffer,n.clearColorValue=this.backend.getClearColor(),n.activeCubeFace=this.getActiveCubeFace(),n.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,r,n),null!==i&&null===this._renderTarget&&this._renderOutput(i)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:NoToneMapping}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:ColorManagement.workingColorSpace}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||null===this._renderTarget}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),null!==this._frameBufferTarget&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach((e=>{null!==e&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}_resetXRState(){this.backend.setXRTarget(null),this.setOutputRenderTarget(null),this.setRenderTarget(null),this._frameBufferTarget.dispose(),this._frameBufferTarget=null}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e,t=null){if(!0===this._isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const r=this._nodes.nodeFrame,i=r.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,r.renderId=this.info.calls;const n=this.backend,o=this._pipelines,s=this._bindings,a=this._nodes,l=Array.isArray(e)?e:[e];if(void 0===l[0]||!0!==l[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");n.beginCompute(e);for(const r of l){if(!1===o.has(r)){const e=()=>{r.removeEventListener("dispose",e),o.delete(r),s.delete(r),a.delete(r)};r.addEventListener("dispose",e);const t=r.onInitFunction;null!==t&&t.call(r,{renderer:this})}a.updateForCompute(r),s.updateForCompute(r);const i=s.getForCompute(r),l=o.getForCompute(r,i);n.compute(e,r,i,l,t)}n.finishCompute(e),r.renderId=i}async computeAsync(e,t=null){!1===this._initialized&&await this.init(),this.compute(e,t)}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return!1===this._initialized&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){!1===this._initialized&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=_vector4.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=_vector4.copy(t).floor()}else t=_vector4.set(0,0,e.image.width,e.image.height);let r,i=this._currentRenderContext;null!==i?r=i.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),i=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,i,t)}copyTextureToTexture(e,t,r=null,i=null,n=0,o=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,i,n,o)}async readRenderTargetPixelsAsync(e,t,r,i,n,o=0,s=0){return this.backend.copyTextureToBuffer(e.textures[o],t,r,i,n,s)}_projectObject(e,t,r,i,n){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(n=n.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)i.pushLight(e);else if(e.isSprite){const o=t.isArrayCamera?_frustumArray:_frustum;if(!e.frustumCulled||o.intersectsSprite(e,t)){!0===this.sortObjects&&_vector4.setFromMatrixPosition(e.matrixWorld).applyMatrix4(_projScreenMatrix);const{geometry:t,material:o}=e;o.visible&&i.push(e,t,o,r,_vector4.z,null,n)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if(e.isMesh||e.isLine||e.isPoints){const o=t.isArrayCamera?_frustumArray:_frustum;if(!e.frustumCulled||o.intersectsObject(e,t)){const{geometry:t,material:o}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),_vector4.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(_projScreenMatrix)),Array.isArray(o)){const s=t.groups;for(let a=0,l=s.length;a<l;a++){const l=s[a],u=o[l.materialIndex];u&&u.visible&&i.push(e,t,u,r,_vector4.z,l,n)}}else o.visible&&i.push(e,t,o,r,_vector4.z,null,n)}}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=i;(i=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:i}),i.finish()}const o=e.children;for(let e=0,s=o.length;e<s;e++)this._projectObject(o[e],t,r,i,n)}_renderBundles(e,t,r){for(const i of e)this._renderBundle(i,t,r)}_renderTransparents(e,t,r,i,n){if(t.length>0){for(const{material:e}of t)e.side=BackSide;this._renderObjects(t,r,i,n,"backSide");for(const{material:e}of t)e.side=FrontSide;this._renderObjects(e,r,i,n);for(const{material:e}of t)e.side=DoubleSide}else this._renderObjects(e,r,i,n)}_renderObjects(e,t,r,i,n=null){for(let o=0,s=e.length;o<s;o++){const{object:s,geometry:a,material:l,group:u,clippingContext:d}=e[o];this._currentRenderObjectFunction(s,r,t,a,l,u,i,d,n)}}renderObject(e,t,r,i,n,o,s,a=null,l=null){let u,d,c;if(e.onBeforeRender(this,t,r,i,n,o),!0===n.allowOverride&&null!==t.overrideMaterial){const e=t.overrideMaterial;n.positionNode&&n.positionNode.isNode&&(u=e.positionNode,e.positionNode=n.positionNode),e.alphaTest=n.alphaTest,e.alphaMap=n.alphaMap,e.transparent=n.transparent||n.transmission>0,e.isShadowPassMaterial&&(e.side=null===n.shadowSide?n.side:n.shadowSide,n.depthNode&&n.depthNode.isNode&&(c=e.depthNode,e.depthNode=n.depthNode),n.castShadowNode&&n.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=n.castShadowNode),n.castShadowPositionNode&&n.castShadowPositionNode.isNode&&(u=e.positionNode,e.positionNode=n.castShadowPositionNode)),n=e}!0===n.transparent&&n.side===DoubleSide&&!1===n.forceSinglePass?(n.side=BackSide,this._handleObjectFunction(e,n,t,r,s,o,a,"backSide"),n.side=FrontSide,this._handleObjectFunction(e,n,t,r,s,o,a,l),n.side=DoubleSide):this._handleObjectFunction(e,n,t,r,s,o,a,l),void 0!==u&&(t.overrideMaterial.positionNode=u),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,i,n,o)}_renderObjectDirect(e,t,r,i,n,o,s,a){const l=this._objects.get(e,t,r,i,n,this._currentRenderContext,s,a);l.drawRange=e.geometry.drawRange,l.group=o;const u=this._nodes.needsRefresh(l);if(u&&(this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l)),this._pipelines.updateForRender(l),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(l),l.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(l,this.info),u&&this._nodes.updateAfter(l)}_createObjectPipeline(e,t,r,i,n,o,s,a){const l=this._objects.get(e,t,r,i,n,this._currentRenderContext,s,a);l.drawRange=e.geometry.drawRange,l.group=o,this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l),this._pipelines.getForRender(l,this._compilationPromises),this._nodes.updateAfter(l)}get compile(){return this.compileAsync}}class Binding{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}function getFloatLength(e){return e+(16-e%16)%16}class Buffer extends Binding{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return getFloatLength(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class UniformBuffer extends Buffer{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let _id$4=0;class NodeUniformBuffer extends UniformBuffer{constructor(e,t){super("UniformBuffer_"+_id$4++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class UniformsGroup extends UniformBuffer{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){const e=this.bytesPerElement;let t=0;for(let r=0,i=this.uniforms.length;r<i;r++){const i=this.uniforms[r],n=i.boundary,o=i.itemSize*e,s=t%16,a=s%n,l=s+a;t+=a,0!==l&&16-l<o&&(t+=16-l),i.offset=t/e,t+=o}return 16*Math.ceil(t/16)}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,i=e.getValue(),n=e.offset,o=e.getType();if(r[n]!==i){this._getBufferForType(o)[n]=r[n]=i,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,i=e.getValue(),n=e.offset,o=e.getType();if(r[n+0]!==i.x||r[n+1]!==i.y){const e=this._getBufferForType(o);e[n+0]=r[n+0]=i.x,e[n+1]=r[n+1]=i.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,i=e.getValue(),n=e.offset,o=e.getType();if(r[n+0]!==i.x||r[n+1]!==i.y||r[n+2]!==i.z){const e=this._getBufferForType(o);e[n+0]=r[n+0]=i.x,e[n+1]=r[n+1]=i.y,e[n+2]=r[n+2]=i.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,i=e.getValue(),n=e.offset,o=e.getType();if(r[n+0]!==i.x||r[n+1]!==i.y||r[n+2]!==i.z||r[n+4]!==i.w){const e=this._getBufferForType(o);e[n+0]=r[n+0]=i.x,e[n+1]=r[n+1]=i.y,e[n+2]=r[n+2]=i.z,e[n+3]=r[n+3]=i.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,i=e.getValue(),n=e.offset;if(r[n+0]!==i.r||r[n+1]!==i.g||r[n+2]!==i.b){const e=this.buffer;e[n+0]=r[n+0]=i.r,e[n+1]=r[n+1]=i.g,e[n+2]=r[n+2]=i.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,i=e.getValue().elements,n=e.offset;if(r[n+0]!==i[0]||r[n+1]!==i[1]||r[n+2]!==i[2]||r[n+4]!==i[3]||r[n+5]!==i[4]||r[n+6]!==i[5]||r[n+8]!==i[6]||r[n+9]!==i[7]||r[n+10]!==i[8]){const e=this.buffer;e[n+0]=r[n+0]=i[0],e[n+1]=r[n+1]=i[1],e[n+2]=r[n+2]=i[2],e[n+4]=r[n+4]=i[3],e[n+5]=r[n+5]=i[4],e[n+6]=r[n+6]=i[5],e[n+8]=r[n+8]=i[6],e[n+9]=r[n+9]=i[7],e[n+10]=r[n+10]=i[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,i=e.getValue().elements,n=e.offset;if(!1===arraysEqual(r,i,n)){this.buffer.set(i,n),setArray(r,i,n),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}function setArray(e,t,r){for(let i=0,n=t.length;i<n;i++)e[r+i]=t[i]}function arraysEqual(e,t,r){for(let i=0,n=t.length;i<n;i++)if(e[r+i]!==t[i])return!1;return!0}let _id$3=0;class NodeUniformsGroup extends UniformsGroup{constructor(e,t){super(e),this.id=_id$3++,this.groupNode=t,this.isNodeUniformsGroup=!0}}class Sampler extends Binding{constructor(e,t){super(e),this._onDisposeTexture=()=>{this.texture=null},this.texture=t,this.version=t?t.version:0,this.generation=null,this.isSampler=!0}set texture(e){this._texture!==e&&(this._texture&&this._texture.removeEventListener("dispose",this._onDisposeTexture),this._texture=e,this.generation=null,this.version=0,this._texture&&this._texture.addEventListener("dispose",this._onDisposeTexture))}get texture(){return this._texture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}let _id$2=0;class SampledTexture extends Sampler{constructor(e,t){super(e,t),this.id=_id$2++,this.store=!1,this.isSampledTexture=!0}}class NodeSampledTexture extends SampledTexture{constructor(e,t,r,i=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=i}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class NodeSampledCubeTexture extends NodeSampledTexture{constructor(e,t,r,i=null){super(e,t,r,i),this.isSampledCubeTexture=!0}}class NodeSampledTexture3D extends NodeSampledTexture{constructor(e,t,r,i=null){super(e,t,r,i),this.isSampledTexture3D=!0}}const glslMethods={textureDimensions:"textureSize",equals:"equal"},precisionLib={low:"lowp",medium:"mediump",high:"highp"},supports$1={swizzleAssign:!0,storageBuffer:!1},interpolationTypeMap={perspective:"smooth",linear:"noperspective"},interpolationModeMap={centroid:"centroid"},defaultPrecisions="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\nprecision lowp sampler2DArrayShadow;\nprecision lowp samplerCubeShadow;\n";class GLSLNodeBuilder extends NodeBuilder{constructor(e,t){super(e,t,new GLSLNodeParser),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]}}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==NoColorSpace}getMethod(e){return glslMethods[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),i=[];for(const e of t.inputs)i.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${i.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:i}=t,n=t.array.constructor.name.toLowerCase().includes("int");let o=n?RedIntegerFormat:RedFormat;2===i?o=n?RGIntegerFormat:RGFormat:3===i?o=n?RGBIntegerFormat:RGBFormat:4===i&&(o=n?RGBAIntegerFormat:RGBAFormat);const s={Float32Array:FloatType,Uint8Array:UnsignedByteType,Uint16Array:UnsignedShortType,Uint32Array:UnsignedIntType,Int8Array:ByteType,Int16Array:ShortType,Int32Array:IntType,Uint8ClampedArray:UnsignedByteType},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/i))));let l=Math.ceil(r/i/a);a*l*i<r&&l++;const u=a*l*i,d=new e.constructor(u);d.set(e,0),t.array=d;const c=new DataTexture(t.array,a,l,o,s[t.array.constructor.name]||FloatType);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new TextureNode(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.nodeName)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,i=t.value;if(this.renderer.backend.has(i)){this.renderer.backend.get(i).pbo=i.pbo}const n=this.getUniformFromNode(i.pboNode,"texture",this.shaderStage,this.context.nodeName),o=this.getPropertyName(n);this.increaseUsage(r);const s=r.build(this,"uint"),a=this.getDataFromNode(e);let l=a.propertyName;if(void 0===l){const r=this.getVarFromNode(e);l=this.getPropertyName(r);const n=this.getDataFromNode(t);let u=n.propertySizeName;void 0===u&&(u=l+"Size",this.getVarFromNode(t,u,"uint"),this.addLineFlowCode(`${u} = uint( textureSize( ${o}, 0 ).x )`,e),n.propertySizeName=u);const{itemSize:d}=i,c="."+vectorComponents.join("").slice(0,d),h=`ivec2(${s} % ${u}, ${s} / ${u})`,p=this.generateTextureLoad(null,o,h,null,"0");let m="vec4";i.pbo.type===UnsignedIntType?m="uvec4":i.pbo.type===IntType&&(m="ivec4"),this.addLineFlowCode(`${l} = ${m}(${p})${c}`,e),a.propertyName=l}return l}generateTextureLoad(e,t,r,i,n="0"){return i?`texelFetch( ${t}, ivec3( ${r}, ${i} ), ${n} )`:`texelFetch( ${t}, ${r}, ${n} )`}generateTexture(e,t,r,i){return e.isDepthTexture?(i&&(r=`vec4( ${r}, ${i} )`),`texture( ${t}, ${r} ).x`):(i&&(r=`vec3( ${r}, ${i} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,i){return`textureLod( ${t}, ${r}, ${i} )`}generateTextureBias(e,t,r,i){return`texture( ${t}, ${r}, ${i} )`}generateTextureGrad(e,t,r,i){return`textureGrad( ${t}, ${r}, ${i[0]}, ${i[1]} )`}generateTextureCompare(e,t,r,i,n,o=this.shaderStage){if("fragment"===o)return n?`texture( ${t}, vec4( ${r}, ${n}, ${i} ) )`:`texture( ${t}, vec3( ${r}, ${i} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],i={};for(const n of t){let t=null,o=!1;if("texture"===n.type||"texture3D"===n.type){const e=n.node.value;let r="";!0!==e.isDataTexture&&!0!==e.isData3DTexture||(e.type===UnsignedIntType?r="u":e.type===IntType&&(r="i")),t="texture3D"===n.type&&!1===e.isArrayTexture?`${r}sampler3D ${n.name};`:e.compareFunction?!0===e.isArrayTexture?`sampler2DArrayShadow ${n.name};`:`sampler2DShadow ${n.name};`:!0===e.isArrayTexture||!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${n.name};`:`${r}sampler2D ${n.name};`}else if("cubeTexture"===n.type)t=`samplerCube ${n.name};`;else if("buffer"===n.type){const e=n.node,r=this.getType(e.bufferType),i=e.bufferCount,o=i>0?i:"";t=`${e.name} {\n\t${r} ${n.name}[${o}];\n};\n`}else{t=`${this.getVectorType(n.type)} ${this.getPropertyName(n,e)};`,o=!0}const s=n.node.precision;if(null!==s&&(t=precisionLib[s]+" "+t),o){t="\t"+t;const e=n.groupNode.name;(i[e]||(i[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let n="";for(const t in i){const r=i[t];n+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return n+=r.join("\n"),n}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==IntType){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const i=r.array;!1==(i instanceof Uint32Array||i instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const i of e)t+=`layout( location = ${r++} ) in ${i.type} ${i.name};\n`}return t}getStructMembers(e){const t=[];for(const r of e.members)t.push(`\t${r.type} ${r.name};`);return t.join("\n")}getStructs(e){const t=[],r=this.structs[e],i=[];for(const e of r)if(e.output)for(const t of e.members)i.push(`layout( location = ${t.index} ) out ${t.type} ${t.name};`);else{let r="struct "+e.name+" {\n";r+=this.getStructMembers(e),r+="\n};\n",t.push(r)}return 0===i.length&&i.push("layout( location = 0 ) out vec4 fragColor;"),"\n"+i.join("\n")+"\n\n"+t.join("\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const i of r){"compute"===e&&(i.needsInterpolation=!0);const r=this.getType(i.type);if(i.needsInterpolation)if(i.interpolationType){t+=`${interpolationTypeMap[i.interpolationType]||i.interpolationType} ${interpolationModeMap[i.interpolationSampling]||""} out ${r} ${i.name};\n`}else{t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}out ${r} ${i.name};\n`}else t+=`${r} ${i.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);if(e.interpolationType){t+=`${interpolationTypeMap[e.interpolationType]||e.interpolationType} ${interpolationModeMap[e.interpolationSampling]||""} in ${r} ${e.name};\n`}else{t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const i=this.extensions[r]||(this.extensions[r]=new Map);!1===i.has(e)&&i.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:i}of r.values())t.push(`#extension ${e} : ${i}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=supports$1[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}supports$1[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}enableMultiview(){this.enableExtension("GL_OVR_multiview2","require","fragment"),this.enableExtension("GL_OVR_multiview2","require","vertex"),this.builtins.vertex.push("layout(num_views = 2) in")}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const i=e[r],n=this.getPropertyName(i.attributeNode);n&&(t+=`${i.varyingName} = ${n};\n\t`)}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${defaultPrecisions}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${defaultPrecisions}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n// structs\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1];for(const e of i){const i=this.getFlowData(e),o=e.name;o&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${o}\n\t`),r+=`${i.code}\n\t`,e===n&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${i.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${i.result};`)))}const o=e[t];o.extensions=this.getExtensions(t),o.uniforms=this.getUniforms(t),o.attributes=this.getAttributes(t),o.varyings=this.getVaryings(t),o.vars=this.getVars(t),o.structs=this.getStructs(t),o.codes=this.getCodes(t),o.transforms=this.getTransforms(t),o.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,i=null){const n=super.getUniformFromNode(e,t,r,i),o=this.getDataFromNode(e,r,this.globalCache);let s=o.uniformGPU;if(void 0===s){const i=e.groupNode,a=i.name,l=this.getBindGroupArray(a,r);if("texture"===t)s=new NodeSampledTexture(n.name,n.node,i),l.push(s);else if("cubeTexture"===t)s=new NodeSampledCubeTexture(n.name,n.node,i),l.push(s);else if("texture3D"===t)s=new NodeSampledTexture3D(n.name,n.node,i),l.push(s);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,n.name=`buffer${e.id}`;const t=new NodeUniformBuffer(e,i);t.name=e.name,l.push(t),s=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let o=e[a];void 0===o&&(o=new NodeUniformsGroup(r+"_"+a,i),e[a]=o,l.push(o)),s=this.getNodeUniform(n,t),o.addUniform(s)}o.uniformGPU=s}return n}}let _vector2=null,_color4=null;class Backend{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null},this.trackTimestamp=!0===e.trackTimestamp}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp)return void warnOnce("WebGPURenderer: Timestamp tracking is disabled.");const t=this.timestampQueryPool[e];if(!t)return void warnOnce(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);const r=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=r,r}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return _vector2=_vector2||new Vector2,this.renderer.getDrawingBufferSize(_vector2)}setScissorTest(){}getClearColor(){const e=this.renderer;return _color4=_color4||new Color4,e.getClearColor(_color4),_color4.getRGB(_color4),_color4}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:createCanvasElement(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${REVISION} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let equationToGL,factorToGL,_id$1=0;class DualAttributeData{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class WebGLAttributeUtils{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:i}=r,n=e.array,o=e.usage||i.STATIC_DRAW,s=e.isInterleavedBufferAttribute?e.data:e,a=r.get(s);let l,u=a.bufferGPU;if(void 0===u&&(u=this._createBuffer(i,t,n,o),a.bufferGPU=u,a.bufferType=t,a.version=s.version),n instanceof Float32Array)l=i.FLOAT;else if("undefined"!=typeof Float16Array&&n instanceof Float16Array)l=i.HALF_FLOAT;else if(n instanceof Uint16Array)l=e.isFloat16BufferAttribute?i.HALF_FLOAT:i.UNSIGNED_SHORT;else if(n instanceof Int16Array)l=i.SHORT;else if(n instanceof Uint32Array)l=i.UNSIGNED_INT;else if(n instanceof Int32Array)l=i.INT;else if(n instanceof Int8Array)l=i.BYTE;else if(n instanceof Uint8Array)l=i.UNSIGNED_BYTE;else{if(!(n instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+n);l=i.UNSIGNED_BYTE}let d={bufferGPU:u,bufferType:t,type:l,byteLength:n.byteLength,bytesPerElement:n.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:l===i.INT||l===i.UNSIGNED_INT||e.gpuType===IntType,id:_id$1++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(i,t,n,o);d=new DualAttributeData(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,i=e.array,n=e.isInterleavedBufferAttribute?e.data:e,o=t.get(n),s=o.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(s,o.bufferGPU),0===a.length)r.bufferSubData(s,0,i);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(s,t.start*i.BYTES_PER_ELEMENT,i,t.start,t.count)}n.clearUpdateRanges()}r.bindBuffer(s,null),o.version=n.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const i=t.get(e);r.deleteBuffer(i.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,i=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:n}=t.get(i),o=e.array,s=o.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,n);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,s,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,s),await t.utils._clientWaitAsync();const l=new e.array.constructor(o.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,l),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),l.buffer}_createBuffer(e,t,r,i){const n=e.createBuffer();return e.bindBuffer(t,n),e.bufferData(t,r,i),e.bindBuffer(t,null),n}}class WebGLState{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;equationToGL={[AddEquation]:e.FUNC_ADD,[SubtractEquation]:e.FUNC_SUBTRACT,[ReverseSubtractEquation]:e.FUNC_REVERSE_SUBTRACT},factorToGL={[ZeroFactor]:e.ZERO,[OneFactor]:e.ONE,[SrcColorFactor]:e.SRC_COLOR,[SrcAlphaFactor]:e.SRC_ALPHA,[SrcAlphaSaturateFactor]:e.SRC_ALPHA_SATURATE,[DstColorFactor]:e.DST_COLOR,[DstAlphaFactor]:e.DST_ALPHA,[OneMinusSrcColorFactor]:e.ONE_MINUS_SRC_COLOR,[OneMinusSrcAlphaFactor]:e.ONE_MINUS_SRC_ALPHA,[OneMinusDstColorFactor]:e.ONE_MINUS_DST_COLOR,[OneMinusDstAlphaFactor]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),r=e.getParameter(e.VIEWPORT);this.currentScissor=(new Vector4).fromArray(t),this.currentViewport=(new Vector4).fromArray(r),this._tempVec4=new Vector4}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==CullFaceNone?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===CullFaceBack?t.cullFace(t.BACK):e===CullFaceFront?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,i,n,o,s,a){const{gl:l}=this;if(e!==NoBlending){if(!1===this.currentBlendingEnabled&&(this.enable(l.BLEND),this.currentBlendingEnabled=!0),e===CustomBlending)n=n||t,o=o||r,s=s||i,t===this.currentBlendEquation&&n===this.currentBlendEquationAlpha||(l.blendEquationSeparate(equationToGL[t],equationToGL[n]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=n),r===this.currentBlendSrc&&i===this.currentBlendDst&&o===this.currentBlendSrcAlpha&&s===this.currentBlendDstAlpha||(l.blendFuncSeparate(factorToGL[r],factorToGL[i],factorToGL[o],factorToGL[s]),this.currentBlendSrc=r,this.currentBlendDst=i,this.currentBlendSrcAlpha=o,this.currentBlendDstAlpha=s),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===AddEquation&&this.currentBlendEquationAlpha===AddEquation||(l.blendEquation(l.FUNC_ADD),this.currentBlendEquation=AddEquation,this.currentBlendEquationAlpha=AddEquation),a)switch(e){case NormalBlending:l.blendFuncSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:l.blendFunc(l.ONE,l.ONE);break;case SubtractiveBlending:l.blendFuncSeparate(l.ZERO,l.ONE_MINUS_SRC_COLOR,l.ZERO,l.ONE);break;case MultiplyBlending:l.blendFuncSeparate(l.DST_COLOR,l.ONE_MINUS_SRC_ALPHA,l.ZERO,l.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case NormalBlending:l.blendFuncSeparate(l.SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA);break;case AdditiveBlending:l.blendFuncSeparate(l.SRC_ALPHA,l.ONE,l.ONE,l.ONE);break;case SubtractiveBlending:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case MultiplyBlending:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(l.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case NeverDepth:t.depthFunc(t.NEVER);break;case AlwaysDepth:t.depthFunc(t.ALWAYS);break;case LessDepth:t.depthFunc(t.LESS);break;case LessEqualDepth:t.depthFunc(t.LEQUAL);break;case EqualDepth:t.depthFunc(t.EQUAL);break;case GreaterEqualDepth:t.depthFunc(t.GEQUAL);break;case GreaterDepth:t.depthFunc(t.GREATER);break;case NotEqualDepth:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,r,i){const n=this._tempVec4.set(e,t,r,i);if(!1===this.currentScissor.equals(n)){const{gl:e}=this;e.scissor(n.x,n.y,n.z,n.w),this.currentScissor.copy(n)}}viewport(e,t,r,i){const n=this._tempVec4.set(e,t,r,i);if(!1===this.currentViewport.equals(n)){const{gl:e}=this;e.viewport(n.x,n.y,n.z,n.w),this.currentViewport.copy(n)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:i}=this;e.side===DoubleSide?this.disable(i.CULL_FACE):this.enable(i.CULL_FACE);let n=e.side===BackSide;t&&(n=!n),this.setFlipSided(n),e.blending===NormalBlending&&!1===e.transparent?this.setBlending(NoBlending):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const o=e.stencilWrite;if(this.setStencilTest(o),o&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(i.SAMPLE_ALPHA_TO_COVERAGE):this.disable(i.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:i}=this;e?(this.enable(i.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(i.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(i.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}setVertexState(e,t=null){const r=this.gl;return(this.currentVAO!==e||this.currentIndex!==t)&&(r.bindVertexArray(e),null!==t&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0)}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:i}=this;return i[e]!==t&&(r.bindFramebuffer(e,t),i[e]=t,e===r.DRAW_FRAMEBUFFER&&(i[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(i[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let i=[],n=!1;if(null!==e.textures){i=this.currentDrawbuffers.get(t),void 0===i&&(i=[],this.currentDrawbuffers.set(t,i));const o=e.textures;if(i.length!==o.length||i[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=o.length;e<t;e++)i[e]=r.COLOR_ATTACHMENT0+e;i.length=o.length,n=!0}}else i[0]!==r.BACK&&(i[0]=r.BACK,n=!0);n&&r.drawBuffers(i)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:i}=this;void 0===e&&(e=t.TEXTURE0+i-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:i,currentTextureSlot:n,currentBoundTextures:o,maxTextures:s}=this;void 0===r&&(r=null===n?i.TEXTURE0+s-1:n);let a=o[r];void 0===a&&(a={type:void 0,texture:void 0},o[r]=a),a.type===e&&a.texture===t||(n!==r&&(i.activeTexture(r),this.currentTextureSlot=r),i.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:i}=this,n=`${e}-${t}`;return this.currentBoundBufferBases[n]!==r&&(i.bindBufferBase(e,t,r),this.currentBoundBufferBases[n]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,i=r[t];void 0!==i&&void 0!==i.type&&(e.bindTexture(i.type,null),i.type=void 0,i.texture=void 0)}}class WebGLUtils{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=NoColorSpace){const{gl:r,extensions:i}=this;let n;const o=ColorManagement.getTransfer(t);if(e===UnsignedByteType)return r.UNSIGNED_BYTE;if(e===UnsignedShort4444Type)return r.UNSIGNED_SHORT_4_4_4_4;if(e===UnsignedShort5551Type)return r.UNSIGNED_SHORT_5_5_5_1;if(e===UnsignedInt5999Type)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===ByteType)return r.BYTE;if(e===ShortType)return r.SHORT;if(e===UnsignedShortType)return r.UNSIGNED_SHORT;if(e===IntType)return r.INT;if(e===UnsignedIntType)return r.UNSIGNED_INT;if(e===FloatType)return r.FLOAT;if(e===HalfFloatType)return r.HALF_FLOAT;if(e===AlphaFormat)return r.ALPHA;if(e===RGBFormat)return r.RGB;if(e===RGBAFormat)return r.RGBA;if(e===DepthFormat)return r.DEPTH_COMPONENT;if(e===DepthStencilFormat)return r.DEPTH_STENCIL;if(e===RedFormat)return r.RED;if(e===RedIntegerFormat)return r.RED_INTEGER;if(e===RGFormat)return r.RG;if(e===RGIntegerFormat)return r.RG_INTEGER;if(e===RGBAIntegerFormat)return r.RGBA_INTEGER;if(e===RGB_S3TC_DXT1_Format||e===RGBA_S3TC_DXT1_Format||e===RGBA_S3TC_DXT3_Format||e===RGBA_S3TC_DXT5_Format)if(o===SRGBTransfer){if(n=i.get("WEBGL_compressed_texture_s3tc_srgb"),null===n)return null;if(e===RGB_S3TC_DXT1_Format)return n.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return n.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(n=i.get("WEBGL_compressed_texture_s3tc"),null===n)return null;if(e===RGB_S3TC_DXT1_Format)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===RGB_PVRTC_4BPPV1_Format||e===RGB_PVRTC_2BPPV1_Format||e===RGBA_PVRTC_4BPPV1_Format||e===RGBA_PVRTC_2BPPV1_Format){if(n=i.get("WEBGL_compressed_texture_pvrtc"),null===n)return null;if(e===RGB_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===RGB_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===RGBA_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===RGBA_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===RGB_ETC1_Format||e===RGB_ETC2_Format||e===RGBA_ETC2_EAC_Format){if(n=i.get("WEBGL_compressed_texture_etc"),null===n)return null;if(e===RGB_ETC1_Format||e===RGB_ETC2_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ETC2:n.COMPRESSED_RGB8_ETC2;if(e===RGBA_ETC2_EAC_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:n.COMPRESSED_RGBA8_ETC2_EAC}if(e===RGBA_ASTC_4x4_Format||e===RGBA_ASTC_5x4_Format||e===RGBA_ASTC_5x5_Format||e===RGBA_ASTC_6x5_Format||e===RGBA_ASTC_6x6_Format||e===RGBA_ASTC_8x5_Format||e===RGBA_ASTC_8x6_Format||e===RGBA_ASTC_8x8_Format||e===RGBA_ASTC_10x5_Format||e===RGBA_ASTC_10x6_Format||e===RGBA_ASTC_10x8_Format||e===RGBA_ASTC_10x10_Format||e===RGBA_ASTC_12x10_Format||e===RGBA_ASTC_12x12_Format){if(n=i.get("WEBGL_compressed_texture_astc"),null===n)return null;if(e===RGBA_ASTC_4x4_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:n.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===RGBA_ASTC_5x4_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:n.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===RGBA_ASTC_5x5_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:n.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===RGBA_ASTC_6x5_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:n.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===RGBA_ASTC_6x6_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:n.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===RGBA_ASTC_8x5_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:n.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===RGBA_ASTC_8x6_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:n.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===RGBA_ASTC_8x8_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:n.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===RGBA_ASTC_10x5_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:n.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===RGBA_ASTC_10x6_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:n.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===RGBA_ASTC_10x8_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:n.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===RGBA_ASTC_10x10_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:n.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===RGBA_ASTC_12x10_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:n.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===RGBA_ASTC_12x12_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:n.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===RGBA_BPTC_Format){if(n=i.get("EXT_texture_compression_bptc"),null===n)return null;if(e===RGBA_BPTC_Format)return o===SRGBTransfer?n.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:n.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===RED_RGTC1_Format||e===SIGNED_RED_RGTC1_Format||e===RED_GREEN_RGTC2_Format||e===SIGNED_RED_GREEN_RGTC2_Format){if(n=i.get("EXT_texture_compression_rgtc"),null===n)return null;if(e===RGBA_BPTC_Format)return n.COMPRESSED_RED_RGTC1_EXT;if(e===SIGNED_RED_RGTC1_Format)return n.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===RED_GREEN_RGTC2_Format)return n.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===SIGNED_RED_GREEN_RGTC2_Format)return n.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===UnsignedInt248Type?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,i)=>{!function n(){const o=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(o===e.WAIT_FAILED)return e.deleteSync(t),void i();o!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(n)}()}))}}let wrappingToGL,filterToGL,compareToGL,initialized=!1;class WebGLTextureUtils{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===initialized&&(this._init(),initialized=!0)}_init(){const e=this.gl;wrappingToGL={[RepeatWrapping]:e.REPEAT,[ClampToEdgeWrapping]:e.CLAMP_TO_EDGE,[MirroredRepeatWrapping]:e.MIRRORED_REPEAT},filterToGL={[NearestFilter]:e.NEAREST,[NearestMipmapNearestFilter]:e.NEAREST_MIPMAP_NEAREST,[NearestMipmapLinearFilter]:e.NEAREST_MIPMAP_LINEAR,[LinearFilter]:e.LINEAR,[LinearMipmapNearestFilter]:e.LINEAR_MIPMAP_NEAREST,[LinearMipmapLinearFilter]:e.LINEAR_MIPMAP_LINEAR},compareToGL={[NeverCompare]:e.NEVER,[AlwaysCompare]:e.ALWAYS,[LessCompare]:e.LESS,[LessEqualCompare]:e.LEQUAL,[EqualCompare]:e.EQUAL,[GreaterEqualCompare]:e.GEQUAL,[GreaterCompare]:e.GREATER,[NotEqualCompare]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isArrayTexture||!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,i,n=!1){const{gl:o,extensions:s}=this;if(null!==e){if(void 0!==o[e])return o[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;if(t===o.RED&&(r===o.FLOAT&&(a=o.R32F),r===o.HALF_FLOAT&&(a=o.R16F),r===o.UNSIGNED_BYTE&&(a=o.R8),r===o.UNSIGNED_SHORT&&(a=o.R16),r===o.UNSIGNED_INT&&(a=o.R32UI),r===o.BYTE&&(a=o.R8I),r===o.SHORT&&(a=o.R16I),r===o.INT&&(a=o.R32I)),t===o.RED_INTEGER&&(r===o.UNSIGNED_BYTE&&(a=o.R8UI),r===o.UNSIGNED_SHORT&&(a=o.R16UI),r===o.UNSIGNED_INT&&(a=o.R32UI),r===o.BYTE&&(a=o.R8I),r===o.SHORT&&(a=o.R16I),r===o.INT&&(a=o.R32I)),t===o.RG&&(r===o.FLOAT&&(a=o.RG32F),r===o.HALF_FLOAT&&(a=o.RG16F),r===o.UNSIGNED_BYTE&&(a=o.RG8),r===o.UNSIGNED_SHORT&&(a=o.RG16),r===o.UNSIGNED_INT&&(a=o.RG32UI),r===o.BYTE&&(a=o.RG8I),r===o.SHORT&&(a=o.RG16I),r===o.INT&&(a=o.RG32I)),t===o.RG_INTEGER&&(r===o.UNSIGNED_BYTE&&(a=o.RG8UI),r===o.UNSIGNED_SHORT&&(a=o.RG16UI),r===o.UNSIGNED_INT&&(a=o.RG32UI),r===o.BYTE&&(a=o.RG8I),r===o.SHORT&&(a=o.RG16I),r===o.INT&&(a=o.RG32I)),t===o.RGB){const e=n?LinearTransfer:ColorManagement.getTransfer(i);r===o.FLOAT&&(a=o.RGB32F),r===o.HALF_FLOAT&&(a=o.RGB16F),r===o.UNSIGNED_BYTE&&(a=o.RGB8),r===o.UNSIGNED_SHORT&&(a=o.RGB16),r===o.UNSIGNED_INT&&(a=o.RGB32UI),r===o.BYTE&&(a=o.RGB8I),r===o.SHORT&&(a=o.RGB16I),r===o.INT&&(a=o.RGB32I),r===o.UNSIGNED_BYTE&&(a=e===SRGBTransfer?o.SRGB8:o.RGB8),r===o.UNSIGNED_SHORT_5_6_5&&(a=o.RGB565),r===o.UNSIGNED_SHORT_5_5_5_1&&(a=o.RGB5_A1),r===o.UNSIGNED_SHORT_4_4_4_4&&(a=o.RGB4),r===o.UNSIGNED_INT_5_9_9_9_REV&&(a=o.RGB9_E5)}if(t===o.RGB_INTEGER&&(r===o.UNSIGNED_BYTE&&(a=o.RGB8UI),r===o.UNSIGNED_SHORT&&(a=o.RGB16UI),r===o.UNSIGNED_INT&&(a=o.RGB32UI),r===o.BYTE&&(a=o.RGB8I),r===o.SHORT&&(a=o.RGB16I),r===o.INT&&(a=o.RGB32I)),t===o.RGBA){const e=n?LinearTransfer:ColorManagement.getTransfer(i);r===o.FLOAT&&(a=o.RGBA32F),r===o.HALF_FLOAT&&(a=o.RGBA16F),r===o.UNSIGNED_BYTE&&(a=o.RGBA8),r===o.UNSIGNED_SHORT&&(a=o.RGBA16),r===o.UNSIGNED_INT&&(a=o.RGBA32UI),r===o.BYTE&&(a=o.RGBA8I),r===o.SHORT&&(a=o.RGBA16I),r===o.INT&&(a=o.RGBA32I),r===o.UNSIGNED_BYTE&&(a=e===SRGBTransfer?o.SRGB8_ALPHA8:o.RGBA8),r===o.UNSIGNED_SHORT_4_4_4_4&&(a=o.RGBA4),r===o.UNSIGNED_SHORT_5_5_5_1&&(a=o.RGB5_A1)}return t===o.RGBA_INTEGER&&(r===o.UNSIGNED_BYTE&&(a=o.RGBA8UI),r===o.UNSIGNED_SHORT&&(a=o.RGBA16UI),r===o.UNSIGNED_INT&&(a=o.RGBA32UI),r===o.BYTE&&(a=o.RGBA8I),r===o.SHORT&&(a=o.RGBA16I),r===o.INT&&(a=o.RGBA32I)),t===o.DEPTH_COMPONENT&&(r===o.UNSIGNED_SHORT&&(a=o.DEPTH_COMPONENT16),r===o.UNSIGNED_INT&&(a=o.DEPTH_COMPONENT24),r===o.FLOAT&&(a=o.DEPTH_COMPONENT32F)),t===o.DEPTH_STENCIL&&r===o.UNSIGNED_INT_24_8&&(a=o.DEPTH24_STENCIL8),a!==o.R16F&&a!==o.R32F&&a!==o.RG16F&&a!==o.RG32F&&a!==o.RGBA16F&&a!==o.RGBA32F||s.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:i,backend:n}=this,o=ColorManagement.getPrimaries(ColorManagement.workingColorSpace),s=t.colorSpace===NoColorSpace?null:ColorManagement.getPrimaries(t.colorSpace),a=t.colorSpace===NoColorSpace||o===s?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,a),r.texParameteri(e,r.TEXTURE_WRAP_S,wrappingToGL[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,wrappingToGL[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||t.isArrayTexture||r.texParameteri(e,r.TEXTURE_WRAP_R,wrappingToGL[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,filterToGL[t.magFilter]);const l=void 0!==t.mipmaps&&t.mipmaps.length>0,u=t.minFilter===LinearFilter&&l?LinearMipmapLinearFilter:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,filterToGL[u]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,compareToGL[t.compareFunction])),!0===i.has("EXT_texture_filter_anisotropic")){if(t.magFilter===NearestFilter)return;if(t.minFilter!==NearestMipmapLinearFilter&&t.minFilter!==LinearMipmapLinearFilter)return;if(t.type===FloatType&&!1===i.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const o=i.get("EXT_texture_filter_anisotropic");r.texParameterf(e,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,n.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:i}=this,n=this.getGLTextureType(e);let o=i[n];void 0===o&&(o=t.createTexture(),r.state.bindTexture(n,o),t.texParameteri(n,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(n,t.TEXTURE_MAG_FILTER,t.NEAREST),i[n]=o),r.set(e,{textureGPU:o,glTextureType:n,isDefault:!0})}createTexture(e,t){const{gl:r,backend:i}=this,{levels:n,width:o,height:s,depth:a}=t,l=i.utils.convert(e.format,e.colorSpace),u=i.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,l,u,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);i.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,n,d,o,s,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,n,d,o,s,a):e.isVideoTexture||r.texStorage2D(h,n,d,o,s),i.set(e,{textureGPU:c,glTextureType:h,glFormat:l,glType:u,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:i}=this,{textureGPU:n,glTextureType:o,glFormat:s,glType:a}=i.get(t),{width:l,height:u}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),i.state.bindTexture(o,n),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(o,0,0,0,l,u,s,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),i.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:i,height:n}=t,{textureGPU:o,glTextureType:s,glFormat:a,glType:l,glInternalFormat:u}=this.backend.get(e);if(!e.isRenderTargetTexture&&void 0!==o)if(this.backend.state.bindTexture(s,o),this.setTextureParameters(s,e),e.isCompressedTexture){const i=e.mipmaps,n=t.image;for(let t=0;t<i.length;t++){const o=i[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,o.width,o.height,n.depth,a,o.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,o.width,o.height,n.depth,a,l,o.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,o.width,o.height,a,o.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const o=getImage(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,i,n,a,l,o)}}else if(e.isDataArrayTexture||e.isArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,l,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,l,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(s,0,u,a,l,t.image);else{const e=getImage(t.image);r.texSubImage2D(s,0,0,0,i,n,a,l,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:i,glTextureType:n}=r.get(e);r.state.bindTexture(n,i),t.generateMipmap(n)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const i=r.get(e);if(i.renderBufferStorageSetup=void 0,i.framebuffers){for(const e in i.framebuffers)t.deleteFramebuffer(i.framebuffers[e]);delete i.framebuffers}if(i.depthRenderbuffer&&(t.deleteRenderbuffer(i.depthRenderbuffer),delete i.depthRenderbuffer),i.stencilRenderbuffer&&(t.deleteRenderbuffer(i.stencilRenderbuffer),delete i.stencilRenderbuffer),i.msaaFrameBuffer&&(t.deleteFramebuffer(i.msaaFrameBuffer),delete i.msaaFrameBuffer),i.msaaRenderbuffers){for(let e=0;e<i.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(i.msaaRenderbuffers[e]);delete i.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:i,renderTarget:n}=r.get(e);this.deallocateRenderBuffers(n),t.deleteTexture(i),r.delete(e)}copyTextureToTexture(e,t,r=null,i=null,n=0,o=0){const{gl:s,backend:a}=this,{state:l}=this.backend,{textureGPU:u,glTextureType:d,glType:c,glFormat:h}=a.get(t);let p,m,g,f,x,_,y,T,b;l.bindTexture(d,u);const N=e.isCompressedTexture?e.mipmaps[o]:e.image;if(null!==r)p=r.max.x-r.min.x,m=r.max.y-r.min.y,g=r.isBox3?r.max.z-r.min.z:1,f=r.min.x,x=r.min.y,_=r.isBox3?r.min.z:0;else{const t=Math.pow(2,-n);p=Math.floor(N.width*t),m=Math.floor(N.height*t),g=e.isDataArrayTexture||e.isArrayTexture?N.depth:e.isData3DTexture?Math.floor(N.depth*t):1,f=0,x=0,_=0}null!==i?(y=i.x,T=i.y,b=i.z):(y=0,T=0,b=0),s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,t.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,t.unpackAlignment);const v=s.getParameter(s.UNPACK_ROW_LENGTH),S=s.getParameter(s.UNPACK_IMAGE_HEIGHT),C=s.getParameter(s.UNPACK_SKIP_PIXELS),M=s.getParameter(s.UNPACK_SKIP_ROWS),R=s.getParameter(s.UNPACK_SKIP_IMAGES);s.pixelStorei(s.UNPACK_ROW_LENGTH,N.width),s.pixelStorei(s.UNPACK_IMAGE_HEIGHT,N.height),s.pixelStorei(s.UNPACK_SKIP_PIXELS,f),s.pixelStorei(s.UNPACK_SKIP_ROWS,x),s.pixelStorei(s.UNPACK_SKIP_IMAGES,_);const A=t.isDataArrayTexture||t.isData3DTexture||t.isArrayTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const r=a.get(e),i=a.get(t),n=a.get(r.renderTarget),o=a.get(i.renderTarget),u=n.framebuffers[r.cacheKey],d=o.framebuffers[i.cacheKey];l.bindFramebuffer(s.READ_FRAMEBUFFER,u),l.bindFramebuffer(s.DRAW_FRAMEBUFFER,d);let c=s.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=s.DEPTH_BUFFER_BIT),s.blitFramebuffer(f,x,p,m,y,T,p,m,c,s.NEAREST),l.bindFramebuffer(s.READ_FRAMEBUFFER,null),l.bindFramebuffer(s.DRAW_FRAMEBUFFER,null)}else A?e.isDataTexture||e.isData3DTexture?s.texSubImage3D(d,o,y,T,b,p,m,g,h,c,N.data):t.isCompressedArrayTexture?s.compressedTexSubImage3D(d,o,y,T,b,p,m,g,h,N.data):s.texSubImage3D(d,o,y,T,b,p,m,g,h,c,N):e.isDataTexture?s.texSubImage2D(d,o,y,T,p,m,h,c,N.data):e.isCompressedTexture?s.compressedTexSubImage2D(d,o,y,T,N.width,N.height,h,N.data):s.texSubImage2D(d,o,y,T,p,m,h,c,N);s.pixelStorei(s.UNPACK_ROW_LENGTH,v),s.pixelStorei(s.UNPACK_IMAGE_HEIGHT,S),s.pixelStorei(s.UNPACK_SKIP_PIXELS,C),s.pixelStorei(s.UNPACK_SKIP_ROWS,M),s.pixelStorei(s.UNPACK_SKIP_IMAGES,R),0===o&&t.generateMipmaps&&s.generateMipmap(d),l.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:i}=this,{state:n}=this.backend,{textureGPU:o}=this.backend.get(e),{x:s,y:a,z:l,w:u}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(d){const r=0!==s||0!==a;let d,h;if(!0===e.isDepthTexture?(d=i.DEPTH_BUFFER_BIT,h=i.DEPTH_ATTACHMENT,t.stencil&&(d|=i.STENCIL_BUFFER_BIT)):(d=i.COLOR_BUFFER_BIT,h=i.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;n.bindFramebuffer(i.DRAW_FRAMEBUFFER,r),n.bindFramebuffer(i.READ_FRAMEBUFFER,h);const p=c-a-u;i.blitFramebuffer(s,p,s+l,p+u,s,p,s+l,p+u,d,i.NEAREST),n.bindFramebuffer(i.READ_FRAMEBUFFER,r),n.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,s,p,l,u),n.unbindTexture()}else{const e=i.createFramebuffer();n.bindFramebuffer(i.DRAW_FRAMEBUFFER,e),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,h,i.TEXTURE_2D,o,0),i.blitFramebuffer(0,0,l,u,0,0,l,u,d,i.NEAREST),i.deleteFramebuffer(e)}}else n.bindTexture(i.TEXTURE_2D,o),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,s,c-u-a,l,u),n.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,r,i=!1){const{gl:n}=this,o=t.renderTarget,{depthTexture:s,depthBuffer:a,stencilBuffer:l,width:u,height:d}=o;if(n.bindRenderbuffer(n.RENDERBUFFER,e),a&&!l){let t=n.DEPTH_COMPONENT24;if(!0===i){this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(n.RENDERBUFFER,o.samples,t,u,d)}else r>0?(s&&s.isDepthTexture&&s.type===n.FLOAT&&(t=n.DEPTH_COMPONENT32F),n.renderbufferStorageMultisample(n.RENDERBUFFER,r,t,u,d)):n.renderbufferStorage(n.RENDERBUFFER,t,u,d);n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,e)}else a&&l&&(r>0?n.renderbufferStorageMultisample(n.RENDERBUFFER,r,n.DEPTH24_STENCIL8,u,d):n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,u,d),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,e));n.bindRenderbuffer(n.RENDERBUFFER,null)}async copyTextureToBuffer(e,t,r,i,n,o){const{backend:s,gl:a}=this,{textureGPU:l,glFormat:u,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+o:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,l,0);const p=this._getTypedArrayType(d),m=i*n*this._getBytesPerTexel(d,u),g=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,g),a.bufferData(a.PIXEL_PACK_BUFFER,m,a.STREAM_READ),a.readPixels(t,r,i,n,u,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await s.utils._clientWaitAsync();const f=new p(m/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,g),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let i=0;return e===r.UNSIGNED_BYTE&&(i=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(i=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(i=4),t===r.RGBA?4*i:t===r.RGB?3*i:t===r.ALPHA?i:void 0}}function getImage(e){return e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?e:e.data}class WebGLExtensions{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class WebGLCapabilities{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const GLFeatureName={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query",OVR_multiview2:"OVR_multiview2"};class WebGLBufferRenderer{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:i,object:n,type:o,info:s,index:a}=this;0!==a?r.drawElements(i,t,o,e):r.drawArrays(i,e,t),s.update(n,t,1)}renderInstances(e,t,r){const{gl:i,mode:n,type:o,index:s,object:a,info:l}=this;0!==r&&(0!==s?i.drawElementsInstanced(n,t,o,e,r):i.drawArraysInstanced(n,e,t,r),l.update(a,t,r))}renderMultiDraw(e,t,r){const{extensions:i,mode:n,object:o,info:s}=this;if(0===r)return;const a=i.get("WEBGL_multi_draw");if(null===a)for(let i=0;i<r;i++)this.render(e[i],t[i]);else{0!==this.index?a.multiDrawElementsWEBGL(n,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(n,e,0,t,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e];s.update(o,i,1)}}renderMultiDrawInstances(e,t,r,i){const{extensions:n,mode:o,object:s,info:a}=this;if(0===r)return;const l=n.get("WEBGL_multi_draw");if(null===l)for(let n=0;n<r;n++)this.renderInstances(e[n],t[n],i[n]);else{0!==this.index?l.multiDrawElementsInstancedWEBGL(o,t,0,this.type,e,0,i,0,r):l.multiDrawArraysInstancedWEBGL(o,e,0,t,0,i,0,r);let n=0;for(let e=0;e<r;e++)n+=t[e]*i[e];a.update(s,n,1)}}}class TimestampQueryPool{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class WebGLTimestampQueryPool extends TimestampQueryPool{constructor(e,t,r=2048){if(super(r),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext)return console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),void(this.trackTimestamp=!1);this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null==t)return;if(null!==this.activeQuery)return;const r=this.queries[t];if(r)try{"inactive"===this.queryStates.get(t)&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,r),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null!=t&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,r]of this.queryStates)if("ended"===r){const r=this.queries[t];e.push(this.resolveQuery(r))}if(0===e.length)return this.lastValue;const t=(await Promise.all(e)).reduce(((e,t)=>e+t),0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise((t=>{if(this.isDisposed)return void t(this.lastValue);let r,i=!1;const n=e=>{i||(i=!0,r&&(clearTimeout(r),r=null),t(e))},o=()=>{if(this.isDisposed)n(this.lastValue);else try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT))return void n(this.lastValue);if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE))return void(r=setTimeout(o,1));const i=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(i)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};o()}))}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class WebGLBackend extends Backend{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,r={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},i=void 0!==t.context?t.context:e.domElement.getContext("webgl2",r);function n(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=n,e.domElement.addEventListener("webglcontextlost",n,!1),this.gl=i,this.extensions=new WebGLExtensions(this),this.capabilities=new WebGLCapabilities(this),this.attributeUtils=new WebGLAttributeUtils(this),this.textureUtils=new WebGLTextureUtils(this),this.bufferRenderer=new WebGLBufferRenderer(this),this.state=new WebGLState(this),this.utils=new WebGLUtils(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.extensions.get("OVR_multiview2"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return WebGLCoordinateSystem}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,r=null){const i=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:i.RGBA8}),null!==r){const t=e.stencilBuffer?i.DEPTH24_STENCIL8:i.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!0===e._autoAllocateDepthBuffer&&!1===e.multiview&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e._autoAllocateDepthBuffer=!1}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new WebGLTimestampQueryPool(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t}=this,r=this.get(e);if(e.viewport)this.updateViewport(e);else{const{width:e,height:r}=this.getDrawingBufferSize();t.viewport(0,0,e,r)}if(e.scissor){const{x:r,y:i,width:n,height:o}=e.scissorValue;t.scissor(r,e.height-o-i,n,o)}this.initTimestampQuery(e),r.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const i=e.occlusionQueryCount;i>0&&(r.currentOcclusionQueries=r.occlusionQueries,r.currentOcclusionQueryObjects=r.occlusionQueryObjects,r.lastOcclusionObject=null,r.occlusionQueries=new Array(i),r.occlusionQueryObjects=new Array(i),r.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,i=this.get(e),n=i.previousContext;r.resetVertexState();const o=e.occlusionQueryCount;o>0&&(o>i.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const s=e.textures;if(null!==s)for(let e=0;e<s.length;e++){const t=s[e];t.generateMipmaps&&this.generateMipmaps(t)}this._currentContext=n;const a=e.renderTarget;if(null!==e.textures&&a){const i=this.get(a);if(a.samples>0&&!1===this._useMultisampledExtension(a)){const n=i.framebuffers[e.getCacheKey()];let o=t.COLOR_BUFFER_BIT;a.resolveDepthBuffer&&(a.depthBuffer&&(o|=t.DEPTH_BUFFER_BIT),a.stencilBuffer&&a.resolveStencilBuffer&&(o|=t.STENCIL_BUFFER_BIT));const s=i.msaaFrameBuffer,l=i.msaaRenderbuffers,u=e.textures,d=u.length>1;if(r.bindFramebuffer(t.READ_FRAMEBUFFER,s),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,n),d)for(let e=0;e<u.length;e++)t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);for(let r=0;r<u.length;r++){if(d){const{textureGPU:e}=this.get(u[r]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,l[r]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}if(e.scissor){const{x:r,y:i,width:n,height:s}=e.scissorValue,a=e.height-s-i;t.blitFramebuffer(r,a,r+n,a+s,r,a,r+n,a+s,o,t.NEAREST)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,o,t.NEAREST)}if(d)for(let e=0;e<u.length;e++){const{textureGPU:r}=this.get(u[e]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,l[e]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,r,0)}!0===this._supportsInvalidateFramebuffer&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,i.invalidationArray)}else if(!1===a.resolveDepthBuffer&&i.framebuffers){const n=i.framebuffers[e.getCacheKey()];r.bindFramebuffer(t.DRAW_FRAMEBUFFER,n),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,i.depthInvalidationArray)}}if(null!==n)if(this._setFramebuffer(n),n.viewport)this.updateViewport(n);else{const{width:e,height:t}=this.getDrawingBufferSize();r.viewport(0,0,e,t)}this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:i}=t;if(r&&i){const e=new WeakSet,{gl:n}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const o=()=>{let s=0;for(let t=0;t<r.length;t++){const o=r[t];null!==o&&(n.getQueryParameter(o,n.QUERY_RESULT_AVAILABLE)&&(0===n.getQueryParameter(o,n.QUERY_RESULT)&&e.add(i[t]),r[t]=null,n.deleteQuery(o),s++))}s<r.length?requestAnimationFrame(o):t.occluded=e};o()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:i,width:n,height:o}=e.viewportValue;t.viewport(r,e.height-o-i,n,o)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,r,i=null,n=!0){const{gl:o,renderer:s}=this;if(null===i){i={textures:null,clearColorValue:this.getClearColor()}}let a=0;if(e&&(a|=o.COLOR_BUFFER_BIT),t&&(a|=o.DEPTH_BUFFER_BIT),r&&(a|=o.STENCIL_BUFFER_BIT),0!==a){let l;l=i.clearColorValue?i.clearColorValue:this.getClearColor();const u=s.getClearDepth(),d=s.getClearStencil();if(t&&this.state.setDepthMask(!0),null===i.textures)o.clearColor(l.r,l.g,l.b,l.a),o.clear(a);else{if(n&&this._setFramebuffer(i),e)for(let e=0;e<i.textures.length;e++)0===e?o.clearBufferfv(o.COLOR,e,[l.r,l.g,l.b,l.a]):o.clearBufferfv(o.COLOR,e,[0,0,0,1]);t&&r?o.clearBufferfi(o.DEPTH_STENCIL,0,u,d):t?o.clearBufferfv(o.DEPTH,0,[u]):r&&o.clearBufferiv(o.STENCIL,0,[d])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,i,n=null){const{state:o,gl:s}=this;!1===this.discard&&(s.enable(s.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:l,attributes:u}=this.get(i),d=this._getVaoKey(u),c=this.vaoCache[d];void 0===c?this.vaoCache[d]=this._createVao(u):o.setVertexState(c),o.useProgram(a),this._bindUniforms(r);const h=this._getTransformFeedback(l);s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,h),s.beginTransformFeedback(s.POINTS),n=null!==n?n:t.count,Array.isArray(n)&&(warnOnce("WebGLBackend.compute(): The count parameter must be a single number, not an array."),n=n[0]),u[0].isStorageInstancedBufferAttribute?s.drawArraysInstanced(s.POINTS,0,1,n):s.drawArrays(s.POINTS,0,n),s.endTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null);for(let e=0;e<l.length;e++){const t=l[e];t.pbo&&this.has(t.pbo)&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isArrayTexture&&e.camera.isArrayCamera}draw(e){const{object:t,pipeline:r,material:i,context:n,hardwareClippingPlanes:o}=e,{programGPU:s}=this.get(r),{gl:a,state:l}=this,u=this.get(n),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;l.setMaterial(i,c,o),l.useProgram(s);const h=e.getAttributes(),p=this.get(h);let m=p.vaoGPU;if(void 0===m){const e=this._getVaoKey(h);m=this.vaoCache[e],void 0===m&&(m=this._createVao(h),this.vaoCache[e]=m,p.vaoGPU=m)}const g=e.getIndex(),f=null!==g?this.get(g).bufferGPU:null;l.setVertexState(m,f);const x=u.lastOcclusionObject;if(x!==t&&void 0!==x){if(null!==x&&!0===x.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),u.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),u.occlusionQueries[u.occlusionQueryIndex]=e,u.occlusionQueryObjects[u.occlusionQueryIndex]=t}u.lastOcclusionObject=t}const _=this.bufferRenderer;t.isPoints?_.mode=a.POINTS:t.isLineSegments?_.mode=a.LINES:t.isLine?_.mode=a.LINE_STRIP:t.isLineLoop?_.mode=a.LINE_LOOP:!0===i.wireframe?(l.setLineWidth(i.wireframeLinewidth*this.renderer.getPixelRatio()),_.mode=a.LINES):_.mode=a.TRIANGLES;const{vertexCount:y,instanceCount:T}=d;let{firstVertex:b}=d;if(_.object=t,null!==g){b*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);_.index=g.count,_.type=e.type}else _.index=0;const N=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?(warnOnce("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),_.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?_.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):warnOnce("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):T>1?_.renderInstances(b,y,T):_.render(b,y)};if(!0===e.camera.isArrayCamera&&e.camera.cameras.length>0&&!1===e.camera.isMultiViewCamera){const r=this.get(e.camera),i=e.camera.cameras,n=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==i.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,n=i.length;r<n;r++){const i=a.createBuffer();e[0]=r,a.bindBuffer(a.UNIFORM_BUFFER,i),a.bufferData(a.UNIFORM_BUFFER,e,a.STATIC_DRAW),t.push(i)}r.indexesGPU=t}const o=this.get(n),s=this.renderer.getPixelRatio(),u=this._currentContext.renderTarget,d=this._isRenderCameraDepthArray(this._currentContext),c=this._currentContext.activeCubeFace;if(d){const e=this.get(u.depthTexture);if(e.clearedRenderId!==this.renderer._nodes.nodeFrame.renderId){e.clearedRenderId=this.renderer._nodes.nodeFrame.renderId;const{stencilBuffer:t}=u;for(let e=0,r=i.length;e<r;e++)this.renderer._activeCubeFace=e,this._currentContext.activeCubeFace=e,this._setFramebuffer(this._currentContext),this.clear(!1,!0,t,this._currentContext,!1);this.renderer._activeCubeFace=c,this._currentContext.activeCubeFace=c}}for(let n=0,u=i.length;n<u;n++){const u=i[n];if(t.layers.test(u.layers)){d&&(this.renderer._activeCubeFace=n,this._currentContext.activeCubeFace=n,this._setFramebuffer(this._currentContext));const t=u.viewport;if(void 0!==t){const r=t.x*s,i=t.y*s,n=t.width*s,o=t.height*s;l.viewport(Math.floor(r),Math.floor(e.context.height-o-i),Math.floor(n),Math.floor(o))}l.bindBufferBase(a.UNIFORM_BUFFER,o.index,r.indexesGPU[n]),N()}this._currentContext.activeCubeFace=c,this.renderer._activeCubeFace=c}}else N()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,i,n,o){return this.textureUtils.copyTextureToBuffer(e,t,r,i,n,o)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new GLSLNodeBuilder(e,t)}createProgram(e){const t=this.gl,{stage:r,code:i}=e,n="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(n,i),t.compileShader(n),this.set(e,{shaderGPU:n})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,i=e.pipeline,{fragmentProgram:n,vertexProgram:o}=i,s=r.createProgram(),a=this.get(n).shaderGPU,l=this.get(o).shaderGPU;if(r.attachShader(s,a),r.attachShader(s,l),r.linkProgram(s),this.set(i,{programGPU:s,fragmentShader:a,vertexShader:l}),null!==t&&this.parallel){const n=new Promise((t=>{const n=this.parallel,o=()=>{r.getProgramParameter(s,n.COMPLETION_STATUS_KHR)?(this._completeCompile(e,i),t()):requestAnimationFrame(o)};o()}));t.push(n)}else this._completeCompile(e,i)}_handleSource(e,t){const r=e.split("\n"),i=[],n=Math.max(t-6,0),o=Math.min(t+6,r.length);for(let e=n;e<o;e++){const n=e+1;i.push(`${n===t?">":" "} ${n}: ${r[e]}`)}return i.join("\n")}_getShaderErrors(e,t,r){const i=e.getShaderParameter(t,e.COMPILE_STATUS),n=(e.getShaderInfoLog(t)||"").trim();if(i&&""===n)return"";const o=/ERROR: 0:(\d+)/.exec(n);if(o){const i=parseInt(o[1]);return r.toUpperCase()+"\n\n"+n+"\n\n"+this._handleSource(e.getShaderSource(t),i)}return n}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const i=this.gl,n=(i.getProgramInfoLog(e)||"").trim();if(!1===i.getProgramParameter(e,i.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(i,e,r,t);else{const o=this._getShaderErrors(i,r,"vertex"),s=this._getShaderErrors(i,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(e,i.VALIDATE_STATUS)+"\n\nProgram Info Log: "+n+"\n"+o+"\n"+s)}else""!==n&&console.warn("THREE.WebGLProgram: Program Info Log:",n)}}_completeCompile(e,t){const{state:r,gl:i}=this,n=this.get(t),{programGPU:o,fragmentShader:s,vertexShader:a}=n;!1===i.getProgramParameter(o,i.LINK_STATUS)&&this._logProgramError(o,s,a),r.useProgram(o);const l=e.getBindings();this._setupBindings(l,o),this.set(t,{programGPU:o})}createComputePipeline(e,t){const{state:r,gl:i}=this,n={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(n);const{computeProgram:o}=e,s=i.createProgram(),a=this.get(n).shaderGPU,l=this.get(o).shaderGPU,u=o.transforms,d=[],c=[];for(let e=0;e<u.length;e++){const t=u[e];d.push(t.varyingName),c.push(t.attributeNode)}i.attachShader(s,a),i.attachShader(s,l),i.transformFeedbackVaryings(s,d,i.SEPARATE_ATTRIBS),i.linkProgram(s),!1===i.getProgramParameter(s,i.LINK_STATUS)&&this._logProgramError(s,a,l),r.useProgram(s),this._setupBindings(t,s);const h=o.attributes,p=[],m=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,i.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,i.ARRAY_BUFFER);const r=this.get(t);m.push(r)}this.set(e,{programGPU:s,transformBuffers:m,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const i of t){this.set(i,{textures:r,uniformBuffers:e});for(const t of i.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let i=r.uniformBuffers,n=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,n=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,n),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:i++,bufferGPU:n})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:n++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,i=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,i,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(GLFeatureName).filter((t=>GLFeatureName[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,i=null,n=0,o=0){this.textureUtils.copyTextureToTexture(e,t,r,i,n,o)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let i=null;if(null!==e.textures){const n=e.renderTarget,o=this.get(n),{samples:s,depthBuffer:a,stencilBuffer:l}=n,u=!0===n.isWebGLCubeRenderTarget,d=!0===n.isRenderTarget3D,c=n.depth>1,h=!0===n.isXRRenderTarget,p=!0===h&&!0===n._hasExternalTextures;let m=o.msaaFrameBuffer,g=o.depthRenderbuffer;const f=this.extensions.get("WEBGL_multisampled_render_to_texture"),x=this.extensions.get("OVR_multiview2"),_=this._useMultisampledExtension(n),y=getCacheKey(e);let T;if(u?(o.cubeFramebuffers||(o.cubeFramebuffers={}),T=o.cubeFramebuffers[y]):h&&!1===p?T=this._xrFramebuffer:(o.framebuffers||(o.framebuffers={}),T=o.framebuffers[y]),void 0===T){T=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,T);const i=e.textures,a=[];if(u){o.cubeFramebuffers[y]=T;const{textureGPU:e}=this.get(i[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{o.framebuffers[y]=T;for(let r=0;r<i.length;r++){const o=i[r],a=this.get(o);a.renderTarget=e.renderTarget,a.cacheKey=y;const l=t.COLOR_ATTACHMENT0+r;if(n.multiview)x.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,l,a.textureGPU,0,s,0,2);else if(d||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,l,a.textureGPU,0,e)}else _?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,l,t.TEXTURE_2D,a.textureGPU,0,s):t.framebufferTexture2D(t.FRAMEBUFFER,l,t.TEXTURE_2D,a.textureGPU,0)}}const h=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===n._autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,_),o.xrDepthRenderbuffer=r,a.push(l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT),t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,h,t.RENDERBUFFER,r)}else if(null!==e.depthTexture){a.push(l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT);const r=this.get(e.depthTexture);if(r.renderTarget=e.renderTarget,r.cacheKey=y,n.multiview)x.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,h,r.textureGPU,0,s,0,2);else if(p&&_)f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,h,t.TEXTURE_2D,r.textureGPU,0,s);else if(e.depthTexture.isArrayTexture){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,h,r.textureGPU,0,e)}else t.framebufferTexture2D(t.FRAMEBUFFER,h,t.TEXTURE_2D,r.textureGPU,0)}o.depthInvalidationArray=a}else{if(this._isRenderCameraDepthArray(e)){r.bindFramebuffer(t.FRAMEBUFFER,T);const i=this.renderer._activeCubeFace,n=this.get(e.depthTexture),o=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.framebufferTextureLayer(t.FRAMEBUFFER,o,n.textureGPU,0,i)}if((h||_||n.multiview)&&!0!==n._isOpaqueFramebuffer){r.bindFramebuffer(t.FRAMEBUFFER,T);const i=this.get(e.textures[0]);n.multiview?x.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,i.textureGPU,0,s,0,2):_?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,i.textureGPU,0,s):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,i.textureGPU,0);const a=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===n._autoAllocateDepthBuffer){const e=o.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,a,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);n.multiview?x.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,a,r.textureGPU,0,s,0,2):_?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0,s):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0)}}}if(s>0&&!1===_&&!n.multiview){if(void 0===m){const i=[];m=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,m);const n=[],u=e.textures;for(let r=0;r<u.length;r++){n[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,n[r]),i.push(t.COLOR_ATTACHMENT0+r);const o=e.textures[r],a=this.get(o);t.renderbufferStorageMultisample(t.RENDERBUFFER,s,a.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,n[r])}if(t.bindRenderbuffer(t.RENDERBUFFER,null),o.msaaFrameBuffer=m,o.msaaRenderbuffers=n,a&&void 0===g){g=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(g,e,s),o.depthRenderbuffer=g;const r=l?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;i.push(r)}o.invalidationArray=i}i=o.msaaFrameBuffer}else i=T;r.drawBuffers(e,T)}r.bindFramebuffer(t.FRAMEBUFFER,i)}_getVaoKey(e){let t="";for(let r=0;r<e.length;r++){t+=":"+this.get(e[r]).id}return t}_createVao(e){const{gl:t}=this,r=t.createVertexArray();t.bindVertexArray(r);for(let r=0;r<e.length;r++){const i=e[r],n=this.get(i);let o,s;t.bindBuffer(t.ARRAY_BUFFER,n.bufferGPU),t.enableVertexAttribArray(r),!0===i.isInterleavedBufferAttribute?(o=i.data.stride*n.bytesPerElement,s=i.offset*n.bytesPerElement):(o=0,s=0),n.isInteger?t.vertexAttribIPointer(r,i.itemSize,n.type,o,s):t.vertexAttribPointer(r,i.itemSize,n.type,i.normalized,o,s),i.isInstancedBufferAttribute&&!i.isInterleavedBufferAttribute?t.vertexAttribDivisor(r,i.meshPerAttribute):i.isInterleavedBufferAttribute&&i.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(r,i.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),r}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:i}=this;r=i.createTransformFeedback(),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];i.bindBufferBase(i.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const i of e)for(const e of i.bindings){const i=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const n=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,n,i)}else if(e.isSampledTexture){const n=r.getUniformLocation(t,e.name);r.uniform1i(n,i)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const i of e)for(const e of i.bindings){const i=this.get(e),n=i.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,n,i.bufferGPU):e.isSampledTexture&&r.bindTexture(i.glTextureType,i.textureGPU,t.TEXTURE0+n)}}_useMultisampledExtension(e){return!0===e.multiview||e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e._autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const GPUPrimitiveTopology={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},GPUCompareFunction={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},GPUStoreOp={Store:"store"},GPULoadOp={Load:"load",Clear:"clear"},GPUFrontFace={CCW:"ccw"},GPUCullMode={None:"none",Front:"front",Back:"back"},GPUIndexFormat={Uint16:"uint16",Uint32:"uint32"},GPUTextureFormat={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10UFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},GPUAddressMode={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},GPUFilterMode={Linear:"linear",Nearest:"nearest"},GPUBlendFactor={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDst:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},GPUBlendOperation={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},GPUColorWriteFlags={None:0,All:15},GPUStencilOperation={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},GPUBufferBindingType={Storage:"storage",ReadOnlyStorage:"read-only-storage"},GPUStorageTextureAccess={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},GPUSamplerBindingType={NonFiltering:"non-filtering",Comparison:"comparison"},GPUTextureSampleType={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},GPUTextureDimension={TwoD:"2d",ThreeD:"3d"},GPUTextureViewDimension={TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",ThreeD:"3d"},GPUTextureAspect={All:"all"},GPUInputStepMode={Vertex:"vertex",Instance:"instance"},GPUFeatureName={CoreFeaturesAndLimits:"core-features-and-limits",DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionBCSliced3D:"texture-compression-bc-sliced-3d",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TextureCompressionASTCSliced3D:"texture-compression-astc-sliced-3d",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",Float32Blendable:"float32-blendable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups",TextureFormatsTier1:"texture-formats-tier1",TextureFormatsTier2:"texture-formats-tier2"};class NodeSampler extends Sampler{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class StorageBuffer extends Buffer{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let _id=0;class NodeStorageBuffer extends StorageBuffer{constructor(e,t){super("StorageBuffer_"+_id++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:NodeAccess.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class WebGPUTexturePassUtils extends DataMap{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:GPUFilterMode.Linear}),this.flipYSampler=e.createSampler({minFilter:GPUFilterMode.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:GPUPrimitiveTopology.TriangleStrip,stripIndexFormat:GPUIndexFormat.Uint32},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:GPUPrimitiveTopology.TriangleStrip,stripIndexFormat:GPUIndexFormat.Uint32},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const i=t.format,{width:n,height:o}=t.size,s=this.getTransferPipeline(i),a=this.getFlipYPipeline(i),l=this.device.createTexture({size:{width:n,height:o,depthOrArrayLayers:1},format:i,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),u=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:r}),d=l.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const i=e.getBindGroupLayout(0),n=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),o=c.beginRenderPass({colorAttachments:[{view:r,loadOp:GPULoadOp.Clear,storeOp:GPUStoreOp.Store,clearValue:[0,0,0,0]}]});o.setPipeline(e),o.setBindGroup(0,n),o.draw(4,1,0,0),o.end()};h(s,u,d),h(a,d,u),this.device.queue.submit([c.finish()]),l.destroy()}generateMipmaps(e,t,r=0){const i=this.get(e);void 0===i.useCount&&(i.useCount=0,i.layers=[]);const n=i.layers[r]||this._mipmapCreateBundles(e,t,r),o=this.device.createCommandEncoder({});this._mipmapRunBundles(o,n),this.device.queue.submit([o.finish()]),0!==i.useCount&&(i.layers[r]=n),i.useCount++}_mipmapCreateBundles(e,t,r){const i=this.getTransferPipeline(t.format),n=i.getBindGroupLayout(0);let o=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:r});const s=[];for(let a=1;a<t.mipLevelCount;a++){const l=this.device.createBindGroup({layout:n,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),u=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:r}),d={colorAttachments:[{view:u,loadOp:GPULoadOp.Clear,storeOp:GPUStoreOp.Store,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(i),c.setBindGroup(0,l),c.draw(4,1,0,0),s.push({renderBundles:[c.finish()],passDescriptor:d}),o=u}return s}_mipmapRunBundles(e,t){const r=t.length;for(let i=0;i<r;i++){const r=t[i],n=e.beginRenderPass(r.passDescriptor);n.executeBundles(r.renderBundles),n.end()}}}const _compareToWebGPU={[NeverCompare]:"never",[LessCompare]:"less",[EqualCompare]:"equal",[LessEqualCompare]:"less-equal",[GreaterCompare]:"greater",[GreaterEqualCompare]:"greater-equal",[AlwaysCompare]:"always",[NotEqualCompare]:"not-equal"},_flipMap=[0,1,3,2,4,5];class WebGPUTextureUtils{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new DepthTexture,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,i=t.get(e),n={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};n.magFilter===GPUFilterMode.Linear&&n.minFilter===GPUFilterMode.Linear&&n.mipmapFilter===GPUFilterMode.Linear&&(n.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(n.compare=_compareToWebGPU[e.compareFunction]),i.sampler=r.createSampler(n)}createDefaultTexture(e){let t;const r=getFormat(e);t=e.isCubeTexture?this._getDefaultCubeTextureGPU(r):this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,i=r.get(e);if(i.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:n,height:o,depth:s,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const l=this._getDimension(e),u=e.internalFormat||t.format||getFormat(e,r.device);i.format=u;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const m={label:e.name,size:{width:n,height:o,depthOrArrayLayers:s},mipLevelCount:a,sampleCount:c,dimension:l,format:u,usage:p};if(void 0===u)return console.warn("WebGPURenderer: Texture format not supported."),void this.createDefaultTexture(e);if(e.isCubeTexture&&(m.textureBindingViewDimension=GPUTextureViewDimension.Cube),i.texture=r.device.createTexture(m),h){const e=Object.assign({},m);e.label=e.label+"-msaa",e.sampleCount=d,i.msaaTexture=r.device.createTexture(e)}i.initialized=!0,i.textureDescriptorGPU=m}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:i,height:n}=r.getDrawingBufferSize(),o=this.depthTexture,s=r.get(o).texture;let a,l;if(t?(a=DepthStencilFormat,l=UnsignedInt248Type):e&&(a=DepthFormat,l=UnsignedIntType),void 0!==s){if(o.image.width===i&&o.image.height===n&&o.format===a&&o.type===l)return s;this.destroyTexture(o)}return o.name="depthBuffer",o.format=a,o.type=l,o.image.width=i,o.image.height=n,this.createTexture(o,{width:i,height:n}),r.get(o).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:i}=r;if(!e.isRenderTargetTexture&&void 0!==i){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,i,0,e.flipY);else if(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)for(let n=0;n<t.image.depth;n++)this._copyBufferToTexture(t.image,r.texture,i,n,e.flipY,n);else e.isCompressedTexture||e.isCompressedArrayTexture?this._copyCompressedBufferToTexture(e.mipmaps,r.texture,i):e.isCubeTexture?this._copyCubeMapToTexture(t.images,r.texture,i,e.flipY,e.premultiplyAlpha):this._copyImageToTexture(t.image,r.texture,i,0,e.flipY,e.premultiplyAlpha);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,i,n,o){const s=this.backend.device,a=this.backend.get(e),l=a.texture,u=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(u);let c=i*d;c=256*Math.ceil(c/256);const h=s.createBuffer({size:i*n*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=s.createCommandEncoder();p.copyTextureToBuffer({texture:l,origin:{x:t,y:r,z:o}},{buffer:h,bytesPerRow:c},{width:i,height:n});const m=this._getTypedArrayType(u);s.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new m(h.getMappedRange())}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new Texture;r.minFilter=NearestFilter,r.magFilter=NearestFilter,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new CubeTexture;r.minFilter=NearestFilter,r.magFilter=NearestFilter,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_copyCubeMapToTexture(e,t,r,i,n){for(let o=0;o<6;o++){const s=e[o],a=!0===i?_flipMap[o]:o;s.isDataTexture?this._copyBufferToTexture(s.image,t,r,a,i):this._copyImageToTexture(s,t,r,a,i,n)}}_copyImageToTexture(e,t,r,i,n,o){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:n},{texture:t,mipLevel:0,origin:{x:0,y:0,z:i},premultipliedAlpha:o},{width:r.size.width,height:r.size.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new WebGPUTexturePassUtils(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,i,n,o=0){const s=this.backend.device,a=e.data,l=this._getBytesPerTexel(r.format),u=e.width*l;s.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:i}},a,{offset:e.width*e.height*l*o,bytesPerRow:u},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===n&&this._flipY(t,r,i)}_copyCompressedBufferToTexture(e,t,r){const i=this.backend.device,n=this._getBlockData(r.format),o=r.size.depthOrArrayLayers>1;for(let s=0;s<e.length;s++){const a=e[s],l=a.width,u=a.height,d=o?r.size.depthOrArrayLayers:1,c=Math.ceil(l/n.width)*n.byteLength,h=c*Math.ceil(u/n.height);for(let e=0;e<d;e++)i.queue.writeTexture({texture:t,mipLevel:s,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(u/n.height)},{width:Math.ceil(l/n.width)*n.width,height:Math.ceil(u/n.height)*n.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===GPUTextureFormat.BC1RGBAUnorm||e===GPUTextureFormat.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC2RGBAUnorm||e===GPUTextureFormat.BC2RGBAUnormSRGB||e===GPUTextureFormat.BC3RGBAUnorm||e===GPUTextureFormat.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.BC4RUnorm||e===GPUTextureFormat.BC4RSnorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC5RGUnorm||e===GPUTextureFormat.BC5RGSnorm||e===GPUTextureFormat.BC6HRGBUFloat||e===GPUTextureFormat.BC6HRGBFloat||e===GPUTextureFormat.BC7RGBAUnorm||e===GPUTextureFormat.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ETC2RGB8Unorm||e===GPUTextureFormat.ETC2RGB8UnormSRGB||e===GPUTextureFormat.ETC2RGB8A1Unorm||e===GPUTextureFormat.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.ETC2RGBA8Unorm||e===GPUTextureFormat.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.EACR11Unorm||e===GPUTextureFormat.EACR11Snorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.EACRG11Unorm||e===GPUTextureFormat.EACRG11Snorm||e===GPUTextureFormat.ASTC4x4Unorm||e===GPUTextureFormat.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ASTC5x4Unorm||e===GPUTextureFormat.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===GPUTextureFormat.ASTC5x5Unorm||e===GPUTextureFormat.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===GPUTextureFormat.ASTC6x5Unorm||e===GPUTextureFormat.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===GPUTextureFormat.ASTC6x6Unorm||e===GPUTextureFormat.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===GPUTextureFormat.ASTC8x5Unorm||e===GPUTextureFormat.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===GPUTextureFormat.ASTC8x6Unorm||e===GPUTextureFormat.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===GPUTextureFormat.ASTC8x8Unorm||e===GPUTextureFormat.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===GPUTextureFormat.ASTC10x5Unorm||e===GPUTextureFormat.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===GPUTextureFormat.ASTC10x6Unorm||e===GPUTextureFormat.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===GPUTextureFormat.ASTC10x8Unorm||e===GPUTextureFormat.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===GPUTextureFormat.ASTC10x10Unorm||e===GPUTextureFormat.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===GPUTextureFormat.ASTC12x10Unorm||e===GPUTextureFormat.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===GPUTextureFormat.ASTC12x12Unorm||e===GPUTextureFormat.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=GPUAddressMode.ClampToEdge;return e===RepeatWrapping?t=GPUAddressMode.Repeat:e===MirroredRepeatWrapping&&(t=GPUAddressMode.MirrorRepeat),t}_convertFilterMode(e){let t=GPUFilterMode.Linear;return e!==NearestFilter&&e!==NearestMipmapNearestFilter&&e!==NearestMipmapLinearFilter||(t=GPUFilterMode.Nearest),t}_getBytesPerTexel(e){return e===GPUTextureFormat.R8Unorm||e===GPUTextureFormat.R8Snorm||e===GPUTextureFormat.R8Uint||e===GPUTextureFormat.R8Sint?1:e===GPUTextureFormat.R16Uint||e===GPUTextureFormat.R16Sint||e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG8Unorm||e===GPUTextureFormat.RG8Snorm||e===GPUTextureFormat.RG8Uint||e===GPUTextureFormat.RG8Sint?2:e===GPUTextureFormat.R32Uint||e===GPUTextureFormat.R32Sint||e===GPUTextureFormat.R32Float||e===GPUTextureFormat.RG16Uint||e===GPUTextureFormat.RG16Sint||e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.RGBA8Unorm||e===GPUTextureFormat.RGBA8UnormSRGB||e===GPUTextureFormat.RGBA8Snorm||e===GPUTextureFormat.RGBA8Uint||e===GPUTextureFormat.RGBA8Sint||e===GPUTextureFormat.BGRA8Unorm||e===GPUTextureFormat.BGRA8UnormSRGB||e===GPUTextureFormat.RGB9E5UFloat||e===GPUTextureFormat.RGB10A2Unorm||e===GPUTextureFormat.RG11B10UFloat||e===GPUTextureFormat.Depth32Float||e===GPUTextureFormat.Depth24Plus||e===GPUTextureFormat.Depth24PlusStencil8||e===GPUTextureFormat.Depth32FloatStencil8?4:e===GPUTextureFormat.RG32Uint||e===GPUTextureFormat.RG32Sint||e===GPUTextureFormat.RG32Float||e===GPUTextureFormat.RGBA16Uint||e===GPUTextureFormat.RGBA16Sint||e===GPUTextureFormat.RGBA16Float?8:e===GPUTextureFormat.RGBA32Uint||e===GPUTextureFormat.RGBA32Sint||e===GPUTextureFormat.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===GPUTextureFormat.R8Uint?Uint8Array:e===GPUTextureFormat.R8Sint?Int8Array:e===GPUTextureFormat.R8Unorm?Uint8Array:e===GPUTextureFormat.R8Snorm?Int8Array:e===GPUTextureFormat.RG8Uint?Uint8Array:e===GPUTextureFormat.RG8Sint?Int8Array:e===GPUTextureFormat.RG8Unorm?Uint8Array:e===GPUTextureFormat.RG8Snorm?Int8Array:e===GPUTextureFormat.RGBA8Uint?Uint8Array:e===GPUTextureFormat.RGBA8Sint?Int8Array:e===GPUTextureFormat.RGBA8Unorm?Uint8Array:e===GPUTextureFormat.RGBA8Snorm?Int8Array:e===GPUTextureFormat.R16Uint?Uint16Array:e===GPUTextureFormat.R16Sint?Int16Array:e===GPUTextureFormat.RG16Uint?Uint16Array:e===GPUTextureFormat.RG16Sint?Int16Array:e===GPUTextureFormat.RGBA16Uint?Uint16Array:e===GPUTextureFormat.RGBA16Sint?Int16Array:e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.RGBA16Float?Uint16Array:e===GPUTextureFormat.R32Uint?Uint32Array:e===GPUTextureFormat.R32Sint?Int32Array:e===GPUTextureFormat.R32Float?Float32Array:e===GPUTextureFormat.RG32Uint?Uint32Array:e===GPUTextureFormat.RG32Sint?Int32Array:e===GPUTextureFormat.RG32Float?Float32Array:e===GPUTextureFormat.RGBA32Uint?Uint32Array:e===GPUTextureFormat.RGBA32Sint?Int32Array:e===GPUTextureFormat.RGBA32Float?Float32Array:e===GPUTextureFormat.BGRA8Unorm||e===GPUTextureFormat.BGRA8UnormSRGB?Uint8Array:e===GPUTextureFormat.RGB10A2Unorm||e===GPUTextureFormat.RGB9E5UFloat||e===GPUTextureFormat.RG11B10UFloat?Uint32Array:e===GPUTextureFormat.Depth32Float?Float32Array:e===GPUTextureFormat.Depth24Plus||e===GPUTextureFormat.Depth24PlusStencil8?Uint32Array:e===GPUTextureFormat.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.is3DTexture||e.isData3DTexture?GPUTextureDimension.ThreeD:GPUTextureDimension.TwoD,t}}function getFormat(e,t=null){const r=e.format,i=e.type,n=e.colorSpace,o=ColorManagement.getTransfer(n);let s;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case RGBA_S3TC_DXT1_Format:s=o===SRGBTransfer?GPUTextureFormat.BC1RGBAUnormSRGB:GPUTextureFormat.BC1RGBAUnorm;break;case RGBA_S3TC_DXT3_Format:s=o===SRGBTransfer?GPUTextureFormat.BC2RGBAUnormSRGB:GPUTextureFormat.BC2RGBAUnorm;break;case RGBA_S3TC_DXT5_Format:s=o===SRGBTransfer?GPUTextureFormat.BC3RGBAUnormSRGB:GPUTextureFormat.BC3RGBAUnorm;break;case RGB_ETC2_Format:s=o===SRGBTransfer?GPUTextureFormat.ETC2RGB8UnormSRGB:GPUTextureFormat.ETC2RGB8Unorm;break;case RGBA_ETC2_EAC_Format:s=o===SRGBTransfer?GPUTextureFormat.ETC2RGBA8UnormSRGB:GPUTextureFormat.ETC2RGBA8Unorm;break;case RGBA_ASTC_4x4_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC4x4UnormSRGB:GPUTextureFormat.ASTC4x4Unorm;break;case RGBA_ASTC_5x4_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC5x4UnormSRGB:GPUTextureFormat.ASTC5x4Unorm;break;case RGBA_ASTC_5x5_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC5x5UnormSRGB:GPUTextureFormat.ASTC5x5Unorm;break;case RGBA_ASTC_6x5_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC6x5UnormSRGB:GPUTextureFormat.ASTC6x5Unorm;break;case RGBA_ASTC_6x6_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC6x6UnormSRGB:GPUTextureFormat.ASTC6x6Unorm;break;case RGBA_ASTC_8x5_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC8x5UnormSRGB:GPUTextureFormat.ASTC8x5Unorm;break;case RGBA_ASTC_8x6_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC8x6UnormSRGB:GPUTextureFormat.ASTC8x6Unorm;break;case RGBA_ASTC_8x8_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC8x8UnormSRGB:GPUTextureFormat.ASTC8x8Unorm;break;case RGBA_ASTC_10x5_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC10x5UnormSRGB:GPUTextureFormat.ASTC10x5Unorm;break;case RGBA_ASTC_10x6_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC10x6UnormSRGB:GPUTextureFormat.ASTC10x6Unorm;break;case RGBA_ASTC_10x8_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC10x8UnormSRGB:GPUTextureFormat.ASTC10x8Unorm;break;case RGBA_ASTC_10x10_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC10x10UnormSRGB:GPUTextureFormat.ASTC10x10Unorm;break;case RGBA_ASTC_12x10_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC12x10UnormSRGB:GPUTextureFormat.ASTC12x10Unorm;break;case RGBA_ASTC_12x12_Format:s=o===SRGBTransfer?GPUTextureFormat.ASTC12x12UnormSRGB:GPUTextureFormat.ASTC12x12Unorm;break;case RGBAFormat:s=o===SRGBTransfer?GPUTextureFormat.RGBA8UnormSRGB:GPUTextureFormat.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case RGBAFormat:switch(i){case ByteType:s=GPUTextureFormat.RGBA8Snorm;break;case ShortType:s=GPUTextureFormat.RGBA16Sint;break;case UnsignedShortType:s=GPUTextureFormat.RGBA16Uint;break;case UnsignedIntType:s=GPUTextureFormat.RGBA32Uint;break;case IntType:s=GPUTextureFormat.RGBA32Sint;break;case UnsignedByteType:s=o===SRGBTransfer?GPUTextureFormat.RGBA8UnormSRGB:GPUTextureFormat.RGBA8Unorm;break;case HalfFloatType:s=GPUTextureFormat.RGBA16Float;break;case FloatType:s=GPUTextureFormat.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",i)}break;case RGBFormat:if(i===UnsignedInt5999Type)s=GPUTextureFormat.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",i);break;case RedFormat:switch(i){case ByteType:s=GPUTextureFormat.R8Snorm;break;case ShortType:s=GPUTextureFormat.R16Sint;break;case UnsignedShortType:s=GPUTextureFormat.R16Uint;break;case UnsignedIntType:s=GPUTextureFormat.R32Uint;break;case IntType:s=GPUTextureFormat.R32Sint;break;case UnsignedByteType:s=GPUTextureFormat.R8Unorm;break;case HalfFloatType:s=GPUTextureFormat.R16Float;break;case FloatType:s=GPUTextureFormat.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",i)}break;case RGFormat:switch(i){case ByteType:s=GPUTextureFormat.RG8Snorm;break;case ShortType:s=GPUTextureFormat.RG16Sint;break;case UnsignedShortType:s=GPUTextureFormat.RG16Uint;break;case UnsignedIntType:s=GPUTextureFormat.RG32Uint;break;case IntType:s=GPUTextureFormat.RG32Sint;break;case UnsignedByteType:s=GPUTextureFormat.RG8Unorm;break;case HalfFloatType:s=GPUTextureFormat.RG16Float;break;case FloatType:s=GPUTextureFormat.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",i)}break;case DepthFormat:switch(i){case UnsignedShortType:s=GPUTextureFormat.Depth16Unorm;break;case UnsignedIntType:s=GPUTextureFormat.Depth24Plus;break;case FloatType:s=GPUTextureFormat.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",i)}break;case DepthStencilFormat:switch(i){case UnsignedInt248Type:s=GPUTextureFormat.Depth24PlusStencil8;break;case FloatType:t&&!1===t.features.has(GPUFeatureName.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),s=GPUTextureFormat.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",i)}break;case RedIntegerFormat:switch(i){case IntType:s=GPUTextureFormat.R32Sint;break;case UnsignedIntType:s=GPUTextureFormat.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",i)}break;case RGIntegerFormat:switch(i){case IntType:s=GPUTextureFormat.RG32Sint;break;case UnsignedIntType:s=GPUTextureFormat.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",i)}break;case RGBAIntegerFormat:switch(i){case IntType:s=GPUTextureFormat.RGBA32Sint;break;case UnsignedIntType:s=GPUTextureFormat.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",i)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return s}const declarationRegexp=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,propertiesRegexp=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,wgslTypeLib$1={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_2d_array:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_depth_cube:"depthTexture",texture_depth_cube_array:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},parse=e=>{const t=(e=e.trim()).match(declarationRegexp);if(null!==t&&4===t.length){const r=t[2],i=[];let n=null;for(;null!==(n=propertiesRegexp.exec(r));)i.push({name:n[1],type:n[2]});const o=[];for(let e=0;e<i.length;e++){const{name:t,type:r}=i[e];let n=r;n.startsWith("ptr")?n="pointer":(n.startsWith("texture")&&(n=r.split("<")[0]),n=wgslTypeLib$1[n]),o.push(new NodeFunctionInput(n,t))}const s=e.substring(t[0].length),a=t[3]||"void",l=void 0!==t[1]?t[1]:"";return{type:wgslTypeLib$1[a]||a,inputs:o,name:l,inputsCode:r,blockCode:s,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")};class WGSLNodeFunction extends NodeFunction{constructor(e){const{type:t,inputs:r,name:i,inputsCode:n,blockCode:o,outputType:s}=parse(e);super(t,r,i),this.inputsCode=n,this.blockCode=o,this.outputType=s}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class WGSLNodeParser extends NodeParser{parseFunction(e){return new WGSLNodeFunction(e)}}const GPUShaderStage="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},accessNames={[NodeAccess.READ_ONLY]:"read",[NodeAccess.WRITE_ONLY]:"write",[NodeAccess.READ_WRITE]:"read_write"},wrapNames={[RepeatWrapping]:"repeat",[ClampToEdgeWrapping]:"clamp",[MirroredRepeatWrapping]:"mirror"},gpuShaderStageLib={vertex:GPUShaderStage?GPUShaderStage.VERTEX:1,fragment:GPUShaderStage?GPUShaderStage.FRAGMENT:2,compute:GPUShaderStage?GPUShaderStage.COMPUTE:4},supports={instance:!0,swizzleAssign:!1,storageBuffer:!0},wgslFnOpLib={"^^":"tsl_xor"},wgslTypeLib={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},wgslCodeCache={},wgslPolyfill={tsl_xor:new CodeNode("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new CodeNode("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new CodeNode("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new CodeNode("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new CodeNode("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new CodeNode("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new CodeNode("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new CodeNode("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new CodeNode("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new CodeNode("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new CodeNode("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new CodeNode("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new CodeNode("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},wgslMethods={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(wgslPolyfill.pow_float=new CodeNode("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),wgslPolyfill.pow_vec2=new CodeNode("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[wgslPolyfill.pow_float]),wgslPolyfill.pow_vec3=new CodeNode("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[wgslPolyfill.pow_float]),wgslPolyfill.pow_vec4=new CodeNode("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[wgslPolyfill.pow_float]),wgslMethods.pow_float="tsl_pow_float",wgslMethods.pow_vec2="tsl_pow_vec2",wgslMethods.pow_vec3="tsl_pow_vec3",wgslMethods.pow_vec4="tsl_pow_vec4");let diagnostics="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(diagnostics+="diagnostic( off, derivative_uniformity );\n");class WGSLNodeBuilder extends NodeBuilder{constructor(e,t){super(e,t,new WGSLNodeParser),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}_generateTextureSample(e,t,r,i,n=this.shaderStage){return"fragment"===n?i?`textureSample( ${t}, ${t}_sampler, ${r}, ${i} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.generateTextureSampleLevel(e,t,r,"0",i)}generateTextureSampleLevel(e,t,r,i,n){return!1===this.isUnfilterable(e)?`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${i} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,i):this.generateTextureLod(e,t,r,n,i)}generateWrapFunction(e){const t=`tsl_coord_${wrapNames[e.wrapS]}S_${wrapNames[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let r=wgslCodeCache[t];if(void 0===r){const i=[],n=e.isData3DTexture?"vec3f":"vec2f";let o=`fn ${t}( coord : ${n} ) -> ${n} {\n\n\treturn ${n}(\n`;const s=(e,t)=>{e===RepeatWrapping?(i.push(wgslPolyfill.repeatWrapping_float),o+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===ClampToEdgeWrapping?(i.push(wgslPolyfill.clampWrapping_float),o+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===MirroredRepeatWrapping?(i.push(wgslPolyfill.mirrorWrapping_float),o+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(o+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};s(e.wrapS,"x"),o+=",\n",s(e.wrapT,"y"),e.isData3DTexture&&(o+=",\n",s(e.wrapR,"z")),o+="\n\t);\n\n}\n",wgslCodeCache[t]=r=new CodeNode(o,i)}return r.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,r){const i=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===i.dimensionsSnippet&&(i.dimensionsSnippet={});let n=i.dimensionsSnippet[r];if(void 0===i.dimensionsSnippet[r]){let o,s;const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(e),l=a>1;s=e.isData3DTexture?"vec3<u32>":"vec2<u32>",o=l||e.isStorageTexture?t:`${t}${r?`, u32( ${r} )`:""}`,n=new VarNode(new ExpressionNode(`textureDimensions( ${o} )`,s)),i.dimensionsSnippet[r]=n,(e.isArrayTexture||e.isDataArrayTexture||e.isData3DTexture)&&(i.arrayLayerCount=new VarNode(new ExpressionNode(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(i.cubeFaceCount=new VarNode(new ExpressionNode("6u","u32")))}return n.build(this)}generateFilteredTexture(e,t,r,i="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,i)}, u32( ${i} ) )`}generateTextureLod(e,t,r,i,n="0u"){const o=this.generateWrapFunction(e),s=this.generateTextureDimension(e,t,n),a=e.isData3DTexture?"vec3":"vec2",l=`${a}<u32>( ${o}( ${r} ) * ${a}<f32>( ${s} ) )`;return this.generateTextureLoad(e,t,l,i,n)}generateTextureLoad(e,t,r,i,n="0u"){let o;return i?o=`textureLoad( ${t}, ${r}, ${i}, u32( ${n} ) )`:(o=`textureLoad( ${t}, ${r}, u32( ${n} ) )`,this.renderer.backend.compatibilityMode&&e.isDepthTexture&&(o+=".x")),o}generateTextureStore(e,t,r,i,n){let o;return o=i?`textureStore( ${t}, ${r}, ${i}, ${n} )`:`textureStore( ${t}, ${r}, ${n} )`,o}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===FloatType||!1===this.isSampleCompare(e)&&e.minFilter===NearestFilter&&e.magFilter===NearestFilter||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,i,n=this.shaderStage){let o=null;return o=this.isUnfilterable(e)?this.generateTextureLod(e,t,r,i,"0",n):this._generateTextureSample(e,t,r,i,n),o}generateTextureGrad(e,t,r,i,n,o=this.shaderStage){if("fragment"===o)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${i[0]}, ${i[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${o} shader.`)}generateTextureCompare(e,t,r,i,n,o=this.shaderStage){if("fragment"===o)return!0===e.isDepthTexture&&!0===e.isArrayTexture?`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${n}, ${i} )`:`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${i} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}generateTextureLevel(e,t,r,i,n){return!1===this.isUnfilterable(e)?`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${i} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,i):this.generateTextureLod(e,t,r,n,i)}generateTextureBias(e,t,r,i,n,o=this.shaderStage){if("fragment"===o)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${i} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${o} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?this.isCustomStruct(e)?t:t+".value":e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=wgslFnOpLib[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?!0===e.isAtomic?(console.warn("WebGPURenderer: Atomic operations are only supported in compute shaders."),NodeAccess.READ_WRITE):NodeAccess.READ_ONLY:e.access}getStorageAccess(e,t){return accessNames[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,i=null){const n=super.getUniformFromNode(e,t,r,i),o=this.getDataFromNode(e,r,this.globalCache);if(void 0===o.uniformGPU){let s;const a=e.groupNode,l=a.name,u=this.getBindGroupArray(l,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let i=null;const o=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?i=!0===e.value.is3DTexture?new NodeSampledTexture3D(n.name,n.node,a,o):new NodeSampledTexture(n.name,n.node,a,o):"cubeTexture"===t?i=new NodeSampledCubeTexture(n.name,n.node,a,o):"texture3D"===t&&(i=new NodeSampledTexture3D(n.name,n.node,a,o)),i.store=!0===e.isStorageTextureNode,i.setVisibility(gpuShaderStageLib[r]),!1===this.isUnfilterable(e.value)&&!1===i.store){const e=new NodeSampler(`${n.name}_sampler`,n.node,a);e.setVisibility(gpuShaderStageLib[r]),u.push(e,i),s=[e,i]}else u.push(i),s=[i]}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const o=new("buffer"===t?NodeUniformBuffer:NodeStorageBuffer)(e,a);o.setVisibility(gpuShaderStageLib[r]),u.push(o),s=o,n.name=i||"NodeBuffer_"+n.id}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let i=e[l];void 0===i&&(i=new NodeUniformsGroup(l,a),i.setVisibility(gpuShaderStageLib[r]),e[l]=i,u.push(i)),s=this.getNodeUniform(n,t),i.addUniform(s)}o.uniformGPU=s}return n}getBuiltin(e,t,r,i=this.shaderStage){const n=this.builtins[i]||(this.builtins[i]=new Map);return!1===n.has(e)&&n.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),i=[];for(const e of t.inputs)i.push(e.name+" : "+this.getType(e.type));let n=`fn ${t.name}( ${i.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(n+=`\treturn ${r.result};\n`),n+="\n}\n",n}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:i,type:n}of r.values())t.push(`@builtin( ${e} ) ${i} : ${n}`);return t.join(",\n\t")}getScopedArray(e,t,r,i){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:i}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:i,bufferCount:n}of this.scopedArrays.values()){const o=this.getType(i);t.push(`var<${r}> ${e}: array< ${o}, ${n} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,i=r.length;e<i;e++){const i=r[e],n=i.name,o=this.getType(i.type);t.push(`@location( ${e} ) ${n} : ${o}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[];for(const r of e.members){const i=e.output?"@location( "+r.index+" ) ":"";let n=this.getType(r.type);r.atomic&&(n="atomic< "+n+" >"),t.push(`\t${i+r.name} : ${n}`)}return e.output&&t.push(`\t${this.getBuiltins("output")}`),t.join(",\n")}getStructs(e){let t="";const r=this.structs[e];if(r.length>0){const e=[];for(const t of r){let r=`struct ${t.name} {\n`;r+=this.getStructMembers(t),r+="\n};",e.push(r)}t="\n"+e.join("\n\n")+"\n"}return t}getVar(e,t,r=null){let i=`var ${t} : `;return i+=null!==r?this.generateArrayDeclaration(e,r):this.getType(e),i}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name,e.count)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,i=this.vars[e];for(let n=0;n<r.length;n++){const o=r[n];if(o.needsInterpolation){let e=`@location( ${n} )`;if(o.interpolationType){const t=null!==o.interpolationSampling?`, ${o.interpolationSampling} )`:" )";e+=` @interpolate( ${o.interpolationType}${t}`}else/^(int|uint|ivec|uvec)/.test(o.type)&&(e+=` @interpolate( ${this.renderer.backend.compatibilityMode?"flat, either":"flat"} )`);t.push(`${e} ${o.name} : ${this.getType(o.type)}`)}else"vertex"===e&&!1===i.includes(o)&&i.push(o)}}const r=this.getBuiltins(e);r&&t.push(r);const i=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+i):i}isCustomStruct(e){const t=e.value,r=e.node,i=(t.isBufferAttribute||t.isInstancedBufferAttribute)&&null!==r.structTypeNode,n=r.value&&r.value.array&&"number"==typeof r.value.itemSize&&r.value.array.length>r.value.itemSize;return i&&!n}getUniforms(e){const t=this.uniforms[e],r=[],i=[],n=[],o={};for(const n of t){const t=n.groupNode.name,s=this.bindingsIndexes[t];if("texture"===n.type||"cubeTexture"===n.type||"storageTexture"===n.type||"texture3D"===n.type){const t=n.node.value;let i;!1===this.isUnfilterable(t)&&!0!==n.node.isStorageTextureNode&&(this.isSampleCompare(t)?r.push(`@binding( ${s.binding++} ) @group( ${s.group} ) var ${n.name}_sampler : sampler_comparison;`):r.push(`@binding( ${s.binding++} ) @group( ${s.group} ) var ${n.name}_sampler : sampler;`));let o="";const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(t);if(a>1&&(o="_multisampled"),!0===t.isCubeTexture)i="texture_cube<f32>";else if(!0===t.isDepthTexture)i=this.renderer.backend.compatibilityMode&&null===t.compareFunction?`texture${o}_2d<f32>`:`texture_depth${o}_2d${!0===t.isArrayTexture?"_array":""}`;else if(!0===n.node.isStorageTextureNode){const r=getFormat(t),o=this.getStorageAccess(n.node,e),s=n.node.value.is3DTexture,a=n.node.value.isArrayTexture;i=`texture_storage_${s?"3d":"2d"+(a?"_array":"")}<${r}, ${o}>`}else if(!0===t.isArrayTexture||!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)i="texture_2d_array<f32>";else if(!0===t.is3DTexture||!0===t.isData3DTexture)i="texture_3d<f32>";else{i=`texture${o}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${s.binding++} ) @group( ${s.group} ) var ${n.name} : ${i};`)}else if("buffer"===n.type||"storageBuffer"===n.type||"indirectStorageBuffer"===n.type){const t=n.node,r=this.getType(t.getNodeType(this)),o=t.bufferCount,a=o>0&&"buffer"===n.type?", "+o:"",l=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(n))i.push(`@binding( ${s.binding++} ) @group( ${s.group} ) var<${l}> ${n.name} : ${r};`);else{const e=`\tvalue : array< ${t.isAtomic?`atomic<${r}>`:`${r}`}${a} >`;i.push(this._getWGSLStructBinding(n.name,e,l,s.binding++,s.group))}}else{const e=this.getType(this.getVectorType(n.type)),t=n.groupNode.name;(o[t]||(o[t]={index:s.binding++,id:s.group,snippets:[]})).snippets.push(`\t${n.name} : ${e}`)}}for(const e in o){const t=o[e];n.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let s=r.join("\n");return s+=i.join("\n"),s+=n.join("\n"),s}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let i="// code\n\n";i+=this.flowCode[t];const n=this.flowNodes[t],o=n[n.length-1],s=o.outputNode,a=void 0!==s&&!0===s.isOutputStructNode;for(const e of n){const n=this.getFlowData(e),l=e.name;if(l&&(i.length>0&&(i+="\n"),i+=`\t// flow -> ${l}\n`),i+=`${n.code}\n\t`,e===o&&"compute"!==t)if(i+="// result\n\n\t","vertex"===t)i+=`varyings.Vertex = ${n.result};`;else if("fragment"===t)if(a)r.returnType=s.getNodeType(this),r.structs+="var<private> output : "+r.returnType+";",i+=`return ${n.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;",i+=`output.color = ${n.result};\n\n\treturn output;`}}r.flow=i}if(this.shaderStage=null,null!==this.material)this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment);else{const t=this.object.workgroupSize;this.computeShader=this._getWGSLComputeCode(e.compute,t)}}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return wgslTypeLib[e]||e}isAvailable(e){let t=supports[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),supports[e]=t),t}_getWGSLMethod(e){return void 0!==wgslPolyfill[e]&&this._include(e),wgslMethods[e]}_include(e){const t=wgslPolyfill[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${diagnostics}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){const[r,i,n]=t;return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${r}, ${i}, ${n} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x\n\t\t+ globalId.y * ( ${r} * numWorkgroups.x )\n\t\t+ globalId.z * ( ${r} * numWorkgroups.x ) * ( ${i} * numWorkgroups.y );\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,i=0,n=0){const o=e+"Struct";return`${this._getWGSLStruct(o,t)}\n@binding( ${i} ) @group( ${n} )\nvar<${r}> ${e} : ${o};`}}class WebGPUUtils{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=GPUTextureFormat.Depth24PlusStencil8:e.depth&&(t=GPUTextureFormat.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?GPUPrimitiveTopology.PointList:e.isLineSegments||e.isMesh&&!0===t.wireframe?GPUPrimitiveTopology.LineList:e.isLine?GPUPrimitiveTopology.LineStrip:e.isMesh?GPUPrimitiveTopology.TriangleList:void 0}getSampleCount(e){return e>=4?4:1}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(void 0===e)return navigator.gpu.getPreferredCanvasFormat();if(e===UnsignedByteType)return GPUTextureFormat.BGRA8Unorm;if(e===HalfFloatType)return GPUTextureFormat.RGBA16Float;throw new Error("Unsupported outputType")}}const typedArraysToVertexFormatPrefix=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]);"undefined"!=typeof Float16Array&&typedArraysToVertexFormatPrefix.set(Float16Array,["float16"]);const typedAttributeToVertexFormatPrefix=new Map([[Float16BufferAttribute,["float16"]]]),typeArraysToVertexFormatPrefixForItemSize1=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class WebGPUAttributeUtils{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),i=this.backend,n=i.get(r);let o=n.buffer;if(void 0===o){const s=i.device;let a=r.array;if(!1===e.normalized)if(a.constructor===Int16Array||a.constructor===Int8Array)a=new Int32Array(a);else if((a.constructor===Uint16Array||a.constructor===Uint8Array)&&(a=new Uint32Array(a),t&GPUBufferUsage.INDEX))for(let e=0;e<a.length;e++)65535===a[e]&&(a[e]=4294967295);if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a,n._force3to4BytesAlignment=!0}const l=a.byteLength,u=l+(4-l%4)%4;o=s.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(o.getMappedRange()).set(a),o.unmap(),n.buffer=o}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,i=r.device,n=r.get(t),o=r.get(t).buffer;let s=t.array;if(!0===n._force3to4BytesAlignment){s=new s.constructor(4*t.count);for(let e=0;e<t.count;e++)s.set(t.array.subarray(3*e,3*e+3),4*e);t.array=s}const a=this._isTypedArray(s),l=t.updateRanges;if(0===l.length)i.queue.writeBuffer(o,0,s,0);else{const e=a?1:s.BYTES_PER_ELEMENT;for(let t=0,r=l.length;t<r;t++){const r=l[t];let u,d;if(!0===n._force3to4BytesAlignment){u=4*Math.floor(r.start/3)*e,d=4*Math.ceil(r.count/3)*e}else u=r.start*e,d=r.count*e;const c=u*(a?s.BYTES_PER_ELEMENT:1);i.queue.writeBuffer(o,c,s,u,d)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const i=t[e],n=i.array.BYTES_PER_ELEMENT,o=this._getBufferAttribute(i);let s=r.get(o);if(void 0===s){let e,t;!0===i.isInterleavedBufferAttribute?(e=i.data.stride*n,t=i.data.isInstancedInterleavedBuffer?GPUInputStepMode.Instance:GPUInputStepMode.Vertex):(e=i.itemSize*n,t=i.isInstancedBufferAttribute?GPUInputStepMode.Instance:GPUInputStepMode.Vertex),!1!==i.normalized||i.array.constructor!==Int16Array&&i.array.constructor!==Uint16Array||(e=4),s={arrayStride:e,attributes:[],stepMode:t},r.set(o,s)}const a=this._getVertexFormat(i),l=!0===i.isInterleavedBufferAttribute?i.offset*n:0;s.attributes.push({shaderLocation:e,offset:l,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,i=t.get(this._getBufferAttribute(e)).buffer,n=i.size,o=r.createBuffer({label:`${e.name}_readback`,size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),s=r.createCommandEncoder({label:`readback_encoder_${e.name}`});s.copyBufferToBuffer(i,0,o,0,n);const a=s.finish();r.queue.submit([a]),await o.mapAsync(GPUMapMode.READ);const l=o.getMappedRange(),u=new e.array.constructor(l.slice(0));return o.unmap(),u.buffer}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,i=e.array.constructor,n=e.constructor;let o;if(1===t)o=typeArraysToVertexFormatPrefixForItemSize1.get(i);else{const e=(typedAttributeToVertexFormatPrefix.get(n)||typedArraysToVertexFormatPrefix.get(i))[r?1:0];if(e){const r=i.BYTES_PER_ELEMENT*t,n=4*Math.floor((r+3)/4)/i.BYTES_PER_ELEMENT;if(n%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");o=`${e}x${n}`}}return o||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),o}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class WebGPUBindingUtils{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,i=[];let n=0;for(const r of e.bindings){const e={binding:n++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===NodeAccess.READ_WRITE||r.access===NodeAccess.WRITE_ONLY)?t.type=GPUBufferBindingType.Storage:t.type=GPUBufferBindingType.ReadOnlyStorage),e.buffer=t}else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const i=r.access;t.access=i===NodeAccess.READ_WRITE?GPUStorageTextureAccess.ReadWrite:i===NodeAccess.WRITE_ONLY?GPUStorageTextureAccess.WriteOnly:GPUStorageTextureAccess.ReadOnly,r.texture.isArrayTexture?t.viewDimension=GPUTextureViewDimension.TwoDArray:r.texture.is3DTexture&&(t.viewDimension=GPUTextureViewDimension.ThreeD),e.storageTexture=t}else if(r.isSampledTexture){const i={},{primarySamples:n}=t.utils.getTextureSampleData(r.texture);if(n>1&&(i.multisampled=!0,r.texture.isDepthTexture||(i.sampleType=GPUTextureSampleType.UnfilterableFloat)),r.texture.isDepthTexture)t.compatibilityMode&&null===r.texture.compareFunction?i.sampleType=GPUTextureSampleType.UnfilterableFloat:i.sampleType=GPUTextureSampleType.Depth;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===IntType?i.sampleType=GPUTextureSampleType.SInt:e===UnsignedIntType?i.sampleType=GPUTextureSampleType.UInt:e===FloatType&&(this.backend.hasFeature("float32-filterable")?i.sampleType=GPUTextureSampleType.Float:i.sampleType=GPUTextureSampleType.UnfilterableFloat)}r.isSampledCubeTexture?i.viewDimension=GPUTextureViewDimension.Cube:r.texture.isArrayTexture||r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?i.viewDimension=GPUTextureViewDimension.TwoDArray:r.isSampledTexture3D&&(i.viewDimension=GPUTextureViewDimension.ThreeD),e.texture=i}else if(r.isSampler){const i={};r.texture.isDepthTexture&&(null!==r.texture.compareFunction?i.type=GPUSamplerBindingType.Comparison:t.compatibilityMode&&(i.type=GPUSamplerBindingType.NonFiltering)),e.sampler=i}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);i.push(e)}return r.createBindGroupLayout({entries:i})}createBindings(e,t,r,i=0){const{backend:n,bindGroupLayoutCache:o}=this,s=n.get(e);let a,l=o.get(e.bindingsReference);void 0===l&&(l=this.createBindingsLayout(e),o.set(e.bindingsReference,l)),r>0&&(void 0===s.groups&&(s.groups=[],s.versions=[]),s.versions[r]===i&&(a=s.groups[r])),void 0===a&&(a=this.createBindGroup(e,l),r>0&&(s.groups[r]=a,s.versions[r]=i)),s.group=a,s.layout=l}updateBinding(e){const t=this.backend,r=t.device,i=e.buffer,n=t.get(e).buffer;r.queue.writeBuffer(n,0,i,0)}createBindGroupIndex(e,t){const r=this.backend.device,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=e[0],o=r.createBuffer({label:"bindingCameraIndex_"+n,size:16,usage:i});r.queue.writeBuffer(o,0,e,0);const s=[{binding:0,resource:{buffer:o}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+n,layout:t,entries:s})}createBindGroup(e,t){const r=this.backend,i=r.device;let n=0;const o=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,n=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,o=i.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:n});e.buffer=o}o.push({binding:n,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const i=t.attribute;e.buffer=r.get(i).buffer}o.push({binding:n,resource:{buffer:e.buffer}})}else if(t.isSampledTexture){const e=r.get(t.texture);let s;if(void 0!==e.externalTexture)s=i.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount;let i=`view-${e.texture.width}-${e.texture.height}`;if(e.texture.depthOrArrayLayers>1&&(i+=`-${e.texture.depthOrArrayLayers}`),i+=`-${r}`,s=e[i],void 0===s){const n=GPUTextureAspect.All;let o;o=t.isSampledCubeTexture?GPUTextureViewDimension.Cube:t.isSampledTexture3D?GPUTextureViewDimension.ThreeD:t.texture.isArrayTexture||t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?GPUTextureViewDimension.TwoDArray:GPUTextureViewDimension.TwoD,s=e[i]=e.texture.createView({aspect:n,dimension:o,mipLevelCount:r})}}o.push({binding:n,resource:s})}else if(t.isSampler){const e=r.get(t.texture);o.push({binding:n,resource:e.sampler})}n++}return i.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:o})}}class WebGPUPipelineUtils{constructor(e){this.backend=e,this._activePipelines=new WeakMap}setPipeline(e,t){this._activePipelines.get(e)!==t&&(e.setPipeline(t),this._activePipelines.set(e,t))}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:i,geometry:n,pipeline:o}=e,{vertexProgram:s,fragmentProgram:a}=o,l=this.backend,u=l.device,d=l.utils,c=l.get(o),h=[];for(const t of e.getBindings()){const e=l.get(t);h.push(e.layout)}const p=l.attributeUtils.createShaderVertexBuffers(e);let m;i.blending===NoBlending||i.blending===NormalBlending&&!1===i.transparent||(m=this._getBlending(i));let g={};!0===i.stencilWrite&&(g={compare:this._getStencilCompare(i),failOp:this._getStencilOperation(i.stencilFail),depthFailOp:this._getStencilOperation(i.stencilZFail),passOp:this._getStencilOperation(i.stencilZPass)});const f=this._getColorWriteMask(i),x=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);x.push({format:r,blend:m,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);x.push({format:t,blend:m,writeMask:f})}const _=l.get(s).module,y=l.get(a).module,T=this._getPrimitiveState(r,n,i),b=this._getDepthCompare(i),N=d.getCurrentDepthStencilFormat(e.context),v=this._getSampleCount(e.context),S={label:`renderPipeline_${i.name||i.type}_${i.id}`,vertex:Object.assign({},_,{buffers:p}),fragment:Object.assign({},y,{targets:x}),primitive:T,multisample:{count:v,alphaToCoverageEnabled:i.alphaToCoverage&&v>1},layout:u.createPipelineLayout({bindGroupLayouts:h})},C={},M=e.context.depth,R=e.context.stencil;if(!0!==M&&!0!==R||(!0===M&&(C.format=N,C.depthWriteEnabled=i.depthWrite,C.depthCompare=b),!0===R&&(C.stencilFront=g,C.stencilBack={},C.stencilReadMask=i.stencilFuncMask,C.stencilWriteMask=i.stencilWriteMask),!0===i.polygonOffset&&(C.depthBias=i.polygonOffsetUnits,C.depthBiasSlopeScale=i.polygonOffsetFactor,C.depthBiasClamp=0),S.depthStencil=C),null===t)c.pipeline=u.createRenderPipeline(S);else{const e=new Promise((e=>{u.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e,t="renderBundleEncoder"){const r=this.backend,{utils:i,device:n}=r,o=i.getCurrentDepthStencilFormat(e),s={label:t,colorFormats:[i.getCurrentColorFormat(e)],depthStencilFormat:o,sampleCount:this._getSampleCount(e)};return n.createRenderBundleEncoder(s)}createComputePipeline(e,t){const r=this.backend,i=r.device,n=r.get(e.computeProgram).module,o=r.get(e),s=[];for(const e of t){const t=r.get(e);s.push(t.layout)}o.pipeline=i.createComputePipeline({compute:n,layout:i.createPipelineLayout({bindGroupLayouts:s})})}_getBlending(e){let t,r;const i=e.blending,n=e.blendSrc,o=e.blendDst,s=e.blendEquation;if(i===CustomBlending){const i=null!==e.blendSrcAlpha?e.blendSrcAlpha:n,a=null!==e.blendDstAlpha?e.blendDstAlpha:o,l=null!==e.blendEquationAlpha?e.blendEquationAlpha:s;t={srcFactor:this._getBlendFactor(n),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(s)},r={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(l)}}else{const n=(e,i,n,o)=>{t={srcFactor:e,dstFactor:i,operation:GPUBlendOperation.Add},r={srcFactor:n,dstFactor:o,operation:GPUBlendOperation.Add}};if(e.premultipliedAlpha)switch(i){case NormalBlending:n(GPUBlendFactor.One,GPUBlendFactor.OneMinusSrcAlpha,GPUBlendFactor.One,GPUBlendFactor.OneMinusSrcAlpha);break;case AdditiveBlending:n(GPUBlendFactor.One,GPUBlendFactor.One,GPUBlendFactor.One,GPUBlendFactor.One);break;case SubtractiveBlending:n(GPUBlendFactor.Zero,GPUBlendFactor.OneMinusSrc,GPUBlendFactor.Zero,GPUBlendFactor.One);break;case MultiplyBlending:n(GPUBlendFactor.Dst,GPUBlendFactor.OneMinusSrcAlpha,GPUBlendFactor.Zero,GPUBlendFactor.One)}else switch(i){case NormalBlending:n(GPUBlendFactor.SrcAlpha,GPUBlendFactor.OneMinusSrcAlpha,GPUBlendFactor.One,GPUBlendFactor.OneMinusSrcAlpha);break;case AdditiveBlending:n(GPUBlendFactor.SrcAlpha,GPUBlendFactor.One,GPUBlendFactor.One,GPUBlendFactor.One);break;case SubtractiveBlending:console.error("THREE.WebGPURenderer: SubtractiveBlending requires material.premultipliedAlpha = true");break;case MultiplyBlending:console.error("THREE.WebGPURenderer: MultiplyBlending requires material.premultipliedAlpha = true")}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",i)}_getBlendFactor(e){let t;switch(e){case ZeroFactor:t=GPUBlendFactor.Zero;break;case OneFactor:t=GPUBlendFactor.One;break;case SrcColorFactor:t=GPUBlendFactor.Src;break;case OneMinusSrcColorFactor:t=GPUBlendFactor.OneMinusSrc;break;case SrcAlphaFactor:t=GPUBlendFactor.SrcAlpha;break;case OneMinusSrcAlphaFactor:t=GPUBlendFactor.OneMinusSrcAlpha;break;case DstColorFactor:t=GPUBlendFactor.Dst;break;case OneMinusDstColorFactor:t=GPUBlendFactor.OneMinusDst;break;case DstAlphaFactor:t=GPUBlendFactor.DstAlpha;break;case OneMinusDstAlphaFactor:t=GPUBlendFactor.OneMinusDstAlpha;break;case SrcAlphaSaturateFactor:t=GPUBlendFactor.SrcAlphaSaturated;break;case 211:t=GPUBlendFactor.Constant;break;case 212:t=GPUBlendFactor.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case NeverStencilFunc:t=GPUCompareFunction.Never;break;case AlwaysStencilFunc:t=GPUCompareFunction.Always;break;case LessStencilFunc:t=GPUCompareFunction.Less;break;case LessEqualStencilFunc:t=GPUCompareFunction.LessEqual;break;case EqualStencilFunc:t=GPUCompareFunction.Equal;break;case GreaterEqualStencilFunc:t=GPUCompareFunction.GreaterEqual;break;case GreaterStencilFunc:t=GPUCompareFunction.Greater;break;case NotEqualStencilFunc:t=GPUCompareFunction.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case KeepStencilOp:t=GPUStencilOperation.Keep;break;case ZeroStencilOp:t=GPUStencilOperation.Zero;break;case ReplaceStencilOp:t=GPUStencilOperation.Replace;break;case InvertStencilOp:t=GPUStencilOperation.Invert;break;case IncrementStencilOp:t=GPUStencilOperation.IncrementClamp;break;case DecrementStencilOp:t=GPUStencilOperation.DecrementClamp;break;case IncrementWrapStencilOp:t=GPUStencilOperation.IncrementWrap;break;case DecrementWrapStencilOp:t=GPUStencilOperation.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case AddEquation:t=GPUBlendOperation.Add;break;case SubtractEquation:t=GPUBlendOperation.Subtract;break;case ReverseSubtractEquation:t=GPUBlendOperation.ReverseSubtract;break;case MinEquation:t=GPUBlendOperation.Min;break;case MaxEquation:t=GPUBlendOperation.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const i={},n=this.backend.utils;switch(i.topology=n.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(i.stripIndexFormat=t.index.array instanceof Uint16Array?GPUIndexFormat.Uint16:GPUIndexFormat.Uint32),r.side){case FrontSide:i.frontFace=GPUFrontFace.CCW,i.cullMode=GPUCullMode.Back;break;case BackSide:i.frontFace=GPUFrontFace.CCW,i.cullMode=GPUCullMode.Front;break;case DoubleSide:i.frontFace=GPUFrontFace.CCW,i.cullMode=GPUCullMode.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return i}_getColorWriteMask(e){return!0===e.colorWrite?GPUColorWriteFlags.All:GPUColorWriteFlags.None}_getDepthCompare(e){let t;if(!1===e.depthTest)t=GPUCompareFunction.Always;else{const r=e.depthFunc;switch(r){case NeverDepth:t=GPUCompareFunction.Never;break;case AlwaysDepth:t=GPUCompareFunction.Always;break;case LessDepth:t=GPUCompareFunction.Less;break;case LessEqualDepth:t=GPUCompareFunction.LessEqual;break;case EqualDepth:t=GPUCompareFunction.Equal;break;case GreaterEqualDepth:t=GPUCompareFunction.GreaterEqual;break;case GreaterDepth:t=GPUCompareFunction.Greater;break;case NotEqualDepth:t=GPUCompareFunction.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class WebGPUTimestampQueryPool extends TimestampQueryPool{constructor(e,t,r=2048){super(r),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const i=8*this.maxQueries;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return warnOnce(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||0===this.currentQueryIndex||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if("unmapped"!==this.resultBuffer.mapState)return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,r=8*t;this.currentQueryIndex=0,this.queryOffsets.clear();const i=this.device.createCommandEncoder();i.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),i.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,r);const n=i.finish();if(this.device.queue.submit([n]),"unmapped"!==this.resultBuffer.mapState)return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,r),this.isDisposed)return"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue;const o=new BigUint64Array(this.resultBuffer.getMappedRange(0,r));let s=0;for(const[,t]of e){const e=o[t],r=o[t+1];s+=Number(r-e)/1e6}return this.resultBuffer.unmap(),this.lastValue=s,s}catch(e){return console.error("Error resolving queries:",e),"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&"mapped"===this.resultBuffer.mapState)try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class WebGPUBackend extends Backend{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.compatibilityMode=void 0!==e.compatibilityMode&&e.compatibilityMode,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.compatibilityMode=this.parameters.compatibilityMode,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new WebGPUUtils(this),this.attributeUtils=new WebGPUAttributeUtils(this),this.bindingUtils=new WebGPUBindingUtils(this),this.pipelineUtils=new WebGPUPipelineUtils(this),this.textureUtils=new WebGPUTextureUtils(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference,featureLevel:t.compatibilityMode?"compatibility":void 0},i="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===i)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const n=Object.values(GPUFeatureName),o=[];for(const e of n)i.features.has(e)&&o.push(e);const s={requiredFeatures:o,requiredLimits:t.requiredLimits};r=await i.requestDevice(s)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const i=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=i;const n=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(GPUFeatureName.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:n}),this.updateSize()}get coordinateSystem(){return WebGPUCoordinateSystem}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.image.depth>1&&e.camera.isArrayCamera}_getRenderPassDescriptor(e,t={}){const r=e.renderTarget,i=this.get(r);let n=i.descriptors;if(void 0===n||i.width!==r.width||i.height!==r.height||i.dimensions!==r.dimensions||i.activeMipmapLevel!==e.activeMipmapLevel||i.activeCubeFace!==e.activeCubeFace||i.samples!==r.samples){n={},i.descriptors=n;const e=()=>{r.removeEventListener("dispose",e),this.delete(r)};!1===r.hasEventListener("dispose",e)&&r.addEventListener("dispose",e)}const o=e.getCacheKey();let s=n[o];if(void 0===s){const t=e.textures,a=[];let l;const u=this._isRenderCameraDepthArray(e);for(let i=0;i<t.length;i++){const n=this.get(t[i]),o={label:`colorAttachment_${i}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:GPUTextureViewDimension.TwoD};if(r.isRenderTarget3D)l=e.activeCubeFace,o.baseArrayLayer=0,o.dimension=GPUTextureViewDimension.ThreeD,o.depthOrArrayLayers=t[i].image.depth;else if(r.isRenderTarget&&t[i].image.depth>1)if(!0===u){const t=e.camera.cameras;for(let e=0;e<t.length;e++){const t={...o,baseArrayLayer:e,arrayLayerCount:1,dimension:GPUTextureViewDimension.TwoD},r=n.texture.createView(t);a.push({view:r,resolveTarget:void 0,depthSlice:void 0})}}else o.dimension=GPUTextureViewDimension.TwoDArray,o.depthOrArrayLayers=t[i].image.depth;if(!0!==u){const e=n.texture.createView(o);let t,r;void 0!==n.msaaTexture?(t=n.msaaTexture.createView(),r=e):(t=e,r=void 0),a.push({view:t,resolveTarget:r,depthSlice:l})}}if(s={textureViews:a},e.depth){const t=this.get(e.depthTexture),r={};e.depthTexture.isArrayTexture&&(r.dimension=GPUTextureViewDimension.TwoD,r.arrayLayerCount=1,r.baseArrayLayer=e.activeCubeFace),s.depthStencilView=t.texture.createView(r)}n[o]=s,i.width=r.width,i.height=r.height,i.samples=r.samples,i.activeMipmapLevel=e.activeMipmapLevel,i.activeCubeFace=e.activeCubeFace,i.dimensions=r.dimensions}const a={colorAttachments:[]};for(let e=0;e<s.textureViews.length;e++){const r=s.textureViews[e];let i={r:0,g:0,b:0,a:1};0===e&&t.clearValue&&(i=t.clearValue),a.colorAttachments.push({view:r.view,depthSlice:r.depthSlice,resolveTarget:r.resolveTarget,loadOp:t.loadOp||GPULoadOp.Load,storeOp:t.storeOp||GPUStoreOp.Store,clearValue:i})}return s.depthStencilView&&(a.depthStencilAttachment={view:s.depthStencilView}),a}beginRender(e){const t=this.get(e),r=this.device,i=e.occlusionQueryCount;let n,o;i>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,n=r.createQuerySet({type:"occlusion",count:i,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=n,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(i),t.lastOcclusionObject=null),o=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e,{loadOp:GPULoadOp.Load}),this.initTimestampQuery(e,o),o.occlusionQuerySet=n;const s=o.depthStencilAttachment;if(null!==e.textures){const t=o.colorAttachments;for(let r=0;r<t.length;r++){const i=t[r];e.clearColor?(i.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},i.loadOp=GPULoadOp.Clear):i.loadOp=GPULoadOp.Load,i.storeOp=GPUStoreOp.Store}}else{const t=o.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=GPULoadOp.Clear):t.loadOp=GPULoadOp.Load,t.storeOp=GPUStoreOp.Store}e.depth&&(e.clearDepth?(s.depthClearValue=e.clearDepthValue,s.depthLoadOp=GPULoadOp.Clear):s.depthLoadOp=GPULoadOp.Load,s.depthStoreOp=GPUStoreOp.Store),e.stencil&&(e.clearStencil?(s.stencilClearValue=e.clearStencilValue,s.stencilLoadOp=GPULoadOp.Clear):s.stencilLoadOp=GPULoadOp.Load,s.stencilStoreOp=GPUStoreOp.Store);const a=r.createCommandEncoder({label:"renderContext_"+e.id});if(!0===this._isRenderCameraDepthArray(e)){const r=e.camera.cameras;t.layerDescriptors&&t.layerDescriptors.length===r.length?this._updateDepthLayerDescriptors(e,t,r):this._createDepthLayerDescriptors(e,t,o,r),t.bundleEncoders=[],t.bundleSets=[];for(let i=0;i<r.length;i++){const r=this.pipelineUtils.createBundleEncoder(e,"renderBundleArrayCamera_"+i),n={attributes:{},bindingGroups:[],pipeline:null,index:null};t.bundleEncoders.push(r),t.bundleSets.push(n)}t.currentPass=null}else{const r=a.beginRenderPass(o);if(t.currentPass=r,e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:i,width:n,height:o}=e.scissorValue;r.setScissorRect(t,i,n,o)}}t.descriptor=o,t.encoder=a,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[]}_createDepthLayerDescriptors(e,t,r,i){const n=r.depthStencilAttachment;t.layerDescriptors=[];const o=this.get(e.depthTexture);o.viewCache||(o.viewCache=[]);for(let s=0;s<i.length;s++){const i={...r,colorAttachments:[{...r.colorAttachments[0],view:r.colorAttachments[s].view}]};if(r.depthStencilAttachment){const t=s;o.viewCache[t]||(o.viewCache[t]=o.texture.createView({dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:s,arrayLayerCount:1})),i.depthStencilAttachment={view:o.viewCache[t],depthLoadOp:n.depthLoadOp||GPULoadOp.Clear,depthStoreOp:n.depthStoreOp||GPUStoreOp.Store,depthClearValue:n.depthClearValue||1},e.stencil&&(i.depthStencilAttachment.stencilLoadOp=n.stencilLoadOp,i.depthStencilAttachment.stencilStoreOp=n.stencilStoreOp,i.depthStencilAttachment.stencilClearValue=n.stencilClearValue)}else i.depthStencilAttachment={...n};t.layerDescriptors.push(i)}}_updateDepthLayerDescriptors(e,t,r){for(let i=0;i<r.length;i++){const r=t.layerDescriptors[i];if(r.depthStencilAttachment){const t=r.depthStencilAttachment;e.depth&&(e.clearDepth?(t.depthClearValue=e.clearDepthValue,t.depthLoadOp=GPULoadOp.Clear):t.depthLoadOp=GPULoadOp.Load),e.stencil&&(e.clearStencil?(t.stencilClearValue=e.clearStencilValue,t.stencilLoadOp=GPULoadOp.Clear):t.stencilLoadOp=GPULoadOp.Load)}}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery();const i=t.encoder;if(!0===this._isRenderCameraDepthArray(e)){const r=[];for(let e=0;e<t.bundleEncoders.length;e++){const i=t.bundleEncoders[e];r.push(i.finish())}for(let n=0;n<t.layerDescriptors.length;n++)if(n<r.length){const o=t.layerDescriptors[n],s=i.beginRenderPass(o);if(e.viewport){const{x:t,y:r,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;s.setViewport(t,r,i,n,o,a)}if(e.scissor){const{x:t,y:r,width:i,height:n}=e.scissorValue;s.setScissorRect(t,r,i,n)}s.executeBundles([r[n]]),s.end()}}else t.currentPass&&t.currentPass.end();if(r>0){const i=8*r;let n=this.occludedResolveCache.get(i);void 0===n&&(n=this.device.createBuffer({size:i,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(i,n));const o=this.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,n,0),t.encoder.copyBufferToBuffer(n,0,o,0,i),t.occlusionQueryBuffer=o,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:i}=t;if(r&&i){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const n=r.getMappedRange(),o=new BigUint64Array(n);for(let t=0;t<i.length;t++)o[t]===BigInt(0)&&e.add(i[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:i,width:n,height:o,minDepth:s,maxDepth:a}=e.viewportValue;t.setViewport(r,i,n,o,s,a)}getClearColor(){const e=super.getClearColor();return!0===this.renderer.alpha&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,r,i=null){const n=this.device,o=this.renderer;let s,a,l,u,d=[];if(e){const e=this.getClearColor();a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===i){l=o.depth,u=o.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=GPULoadOp.Clear,e.storeOp=GPUStoreOp.Store}(l||u)&&(s=t.depthStencilAttachment)}else{l=i.depth,u=i.stencil;const n={loadOp:e?GPULoadOp.Clear:GPULoadOp.Load,clearValue:e?a:void 0};l&&(n.depthLoadOp=t?GPULoadOp.Clear:GPULoadOp.Load,n.depthClearValue=t?o.getClearDepth():void 0,n.depthStoreOp=GPUStoreOp.Store),u&&(n.stencilLoadOp=r?GPULoadOp.Clear:GPULoadOp.Load,n.stencilClearValue=r?o.getClearStencil():void 0,n.stencilStoreOp=GPUStoreOp.Store);const c=this._getRenderPassDescriptor(i,n);d=c.colorAttachments,s=c.depthStencilAttachment}l&&s&&(t?(s.depthLoadOp=GPULoadOp.Clear,s.depthClearValue=o.getClearDepth(),s.depthStoreOp=GPUStoreOp.Store):(s.depthLoadOp=GPULoadOp.Load,s.depthStoreOp=GPUStoreOp.Store)),u&&s&&(r?(s.stencilLoadOp=GPULoadOp.Clear,s.stencilClearValue=o.getClearStencil(),s.stencilStoreOp=GPUStoreOp.Store):(s.stencilLoadOp=GPULoadOp.Load,s.stencilStoreOp=GPUStoreOp.Store));const c=n.createCommandEncoder({label:"clear"});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:s}).end(),n.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={label:"computeGroup_"+e.id};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,i,n=null){const o=this.get(t),{passEncoderGPU:s}=this.get(e),a=this.get(i).pipeline;this.pipelineUtils.setPipeline(s,a);for(let e=0,t=r.length;e<t;e++){const t=r[e],i=this.get(t);s.setBindGroup(e,i.group)}let l;if(null===n&&(n=t.count),"number"==typeof n){const e=n;if(void 0===o.dispatchSize||o.count!==e){o.dispatchSize=[0,1,1],o.count=e;const r=t.workgroupSize;let i=r[0];for(let e=1;e<r.length;e++)i*=r[e];const n=Math.ceil(e/i),s=this.device.limits.maxComputeWorkgroupsPerDimension;l=[n,1,1],n>s&&(l[0]=Math.min(n,s),l[1]=Math.ceil(n/s)),o.dispatchSize=l}l=o.dispatchSize}else l=n;s.dispatchWorkgroups(l[0],l[1]||1,l[2]||1)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,material:i,context:n,pipeline:o}=e,s=e.getBindings(),a=this.get(n),l=this.get(o).pipeline,u=e.getIndex(),d=null!==u,c=e.getDrawParameters();if(null===c)return;const h=(t,r)=>{this.pipelineUtils.setPipeline(t,l),r.pipeline=l;const o=r.bindingGroups;for(let e=0,r=s.length;e<r;e++){const r=s[e],i=this.get(r);o[r.index]!==r.id&&(t.setBindGroup(r.index,i.group),o[r.index]=r.id)}if(!0===d&&r.index!==u){const e=this.get(u).buffer,i=u.array instanceof Uint16Array?GPUIndexFormat.Uint16:GPUIndexFormat.Uint32;t.setIndexBuffer(e,i),r.index=u}const c=e.getVertexBuffers();for(let e=0,i=c.length;e<i;e++){const i=c[e];if(r.attributes[e]!==i){const n=this.get(i).buffer;t.setVertexBuffer(e,n),r.attributes[e]=i}}!0===n.stencil&&!0===i.stencilWrite&&a.currentStencilRef!==i.stencilRef&&(t.setStencilReference(i.stencilRef),a.currentStencilRef=i.stencilRef)},p=(i,n)=>{if(h(i,n),!0===r.isBatchedMesh){const e=r._multiDrawStarts,n=r._multiDrawCounts,o=r._multiDrawCount,s=r._multiDrawInstances;null!==s&&warnOnce("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let a=0;a<o;a++){const o=s?s[a]:1,l=o>1?0:a;!0===d?i.drawIndexed(n[a],o,e[a]/u.array.BYTES_PER_ELEMENT,0,l):i.draw(n[a],o,e[a],l),t.update(r,n[a],o)}}else if(!0===d){const{vertexCount:n,instanceCount:o,firstVertex:s}=c,a=e.getIndirect();if(null!==a){const e=this.get(a).buffer;i.drawIndexedIndirect(e,0)}else i.drawIndexed(n,o,s,0,0);t.update(r,n,o)}else{const{vertexCount:n,instanceCount:o,firstVertex:s}=c,a=e.getIndirect();if(null!==a){const e=this.get(a).buffer;i.drawIndirect(e,0)}else i.draw(n,o,s,0);t.update(r,n,o)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const t=this.get(e.camera),i=e.camera.cameras,o=e.getBindingGroup("cameraIndex");if(void 0===t.indexesGPU||t.indexesGPU.length!==i.length){const e=this.get(o),r=[],n=new Uint32Array([0,0,0,0]);for(let t=0,o=i.length;t<o;t++){n[0]=t;const i=this.bindingUtils.createBindGroupIndex(n,e.layout);r.push(i)}t.indexesGPU=r}const s=this.renderer.getPixelRatio();for(let e=0,l=i.length;e<l;e++){const l=i[e];if(r.layers.test(l.layers)){const r=l.viewport;let i=a.currentPass,u=a.currentSets;if(a.bundleEncoders){i=a.bundleEncoders[e],u=a.bundleSets[e]}r&&i.setViewport(Math.floor(r.x*s),Math.floor(r.y*s),Math.floor(r.width*s),Math.floor(r.height*s),n.viewportValue.minDepth,n.viewportValue.maxDepth),o&&t.indexesGPU&&(i.setBindGroup(o.index,t.indexesGPU[e]),u.bindingGroups[o.index]=o.id),p(i,u)}}}else if(a.currentPass){if(void 0!==a.occlusionQuerySet){const e=a.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(a.currentPass.endOcclusionQuery(),a.occlusionQueryIndex++),!0===r.occlusionTest&&(a.currentPass.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=r),a.lastOcclusionObject=r)}p(a.currentPass,a.currentSets)}}needsRenderUpdate(e){const t=this.get(e),{object:r,material:i}=e,n=this.utils,o=n.getSampleCountRenderContext(e.context),s=n.getCurrentColorSpace(e.context),a=n.getCurrentColorFormat(e.context),l=n.getCurrentDepthStencilFormat(e.context),u=n.getPrimitiveTopology(r,i);let d=!1;return t.material===i&&t.materialVersion===i.version&&t.transparent===i.transparent&&t.blending===i.blending&&t.premultipliedAlpha===i.premultipliedAlpha&&t.blendSrc===i.blendSrc&&t.blendDst===i.blendDst&&t.blendEquation===i.blendEquation&&t.blendSrcAlpha===i.blendSrcAlpha&&t.blendDstAlpha===i.blendDstAlpha&&t.blendEquationAlpha===i.blendEquationAlpha&&t.colorWrite===i.colorWrite&&t.depthWrite===i.depthWrite&&t.depthTest===i.depthTest&&t.depthFunc===i.depthFunc&&t.stencilWrite===i.stencilWrite&&t.stencilFunc===i.stencilFunc&&t.stencilFail===i.stencilFail&&t.stencilZFail===i.stencilZFail&&t.stencilZPass===i.stencilZPass&&t.stencilFuncMask===i.stencilFuncMask&&t.stencilWriteMask===i.stencilWriteMask&&t.side===i.side&&t.alphaToCoverage===i.alphaToCoverage&&t.sampleCount===o&&t.colorSpace===s&&t.colorFormat===a&&t.depthStencilFormat===l&&t.primitiveTopology===u&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=i,t.materialVersion=i.version,t.transparent=i.transparent,t.blending=i.blending,t.premultipliedAlpha=i.premultipliedAlpha,t.blendSrc=i.blendSrc,t.blendDst=i.blendDst,t.blendEquation=i.blendEquation,t.blendSrcAlpha=i.blendSrcAlpha,t.blendDstAlpha=i.blendDstAlpha,t.blendEquationAlpha=i.blendEquationAlpha,t.colorWrite=i.colorWrite,t.depthWrite=i.depthWrite,t.depthTest=i.depthTest,t.depthFunc=i.depthFunc,t.stencilWrite=i.stencilWrite,t.stencilFunc=i.stencilFunc,t.stencilFail=i.stencilFail,t.stencilZFail=i.stencilZFail,t.stencilZPass=i.stencilZPass,t.stencilFuncMask=i.stencilFuncMask,t.stencilWriteMask=i.stencilWriteMask,t.side=i.side,t.alphaToCoverage=i.alphaToCoverage,t.sampleCount=o,t.colorSpace=s,t.colorFormat=a,t.depthStencilFormat=l,t.primitiveTopology=u,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,i=this.utils,n=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,i.getSampleCountRenderContext(n),i.getCurrentColorSpace(n),i.getCurrentColorFormat(n),i.getCurrentDepthStencilFormat(n),i.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,i,n,o){return this.textureUtils.copyTextureToBuffer(e,t,r,i,n,o)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=e.isComputeNode?"compute":"render";this.timestampQueryPool[r]||(this.timestampQueryPool[r]=new WebGPUTimestampQueryPool(this.device,r,2048));const i=this.timestampQueryPool[r],n=i.allocateQueriesForContext(e);t.timestampWrites={querySet:i.querySet,beginningOfPassWriteIndex:n,endOfPassWriteIndex:n+1}}createNodeBuilder(e,t){return new WGSLNodeBuilder(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage+(""!==e.name?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),i=r.currentPass.finish();this.get(t).bundleGPU=i,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,i){this.bindingUtils.createBindings(e,t,r,i)}updateBindings(e,t,r,i){this.bindingUtils.createBindings(e,t,r,i)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){let t=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t|=GPUBufferUsage.STORAGE),this.attributeUtils.createAttribute(e,t)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,i=null,n=0,o=0){let s=0,a=0,l=0,u=0,d=0,c=0,h=e.image.width,p=e.image.height,m=1;null!==r&&(!0===r.isBox3?(u=r.min.x,d=r.min.y,c=r.min.z,h=r.max.x-r.min.x,p=r.max.y-r.min.y,m=r.max.z-r.min.z):(u=r.min.x,d=r.min.y,h=r.max.x-r.min.x,p=r.max.y-r.min.y,m=1)),null!==i&&(s=i.x,a=i.y,l=i.z||0);const g=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),f=this.get(e).texture,x=this.get(t).texture;g.copyTextureToTexture({texture:f,mipLevel:n,origin:{x:u,y:d,z:c}},{texture:x,mipLevel:o,origin:{x:s,y:a,z:l}},[h,p,m]),this.device.queue.submit([g.finish()]),0===o&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,r){const i=this.get(t);let n=null;n=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const o=this.get(e).texture;if(n.format!==o.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",n.format,o.format);let s;if(i.currentPass?(i.currentPass.end(),s=i.encoder):s=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),s.copyTextureToTexture({texture:n,origin:[r.x,r.y,0]},{texture:o},[r.z,r.w]),i.currentPass){const{descriptor:e}=i;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=GPULoadOp.Load;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=GPULoadOp.Load),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=GPULoadOp.Load),i.currentPass=s.beginRenderPass(e),i.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:n,height:o}=t.scissorValue;i.currentPass.setScissorRect(e,r,n,o)}}else this.device.queue.submit([s.finish()]);e.generateMipmaps&&this.textureUtils.generateMipmaps(e)}}class IESSpotLight extends SpotLight{constructor(e,t,r,i,n,o){super(e,t,r,i,n,o),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class ProjectorLight extends SpotLight{constructor(e,t,r,i,n,o){super(e,t,r,i,n,o),this.aspect=null}copy(e,t){return super.copy(e,t),this.aspect=e.aspect,this}}class BasicNodeLibrary extends NodeLibrary{constructor(){super(),this.addLight(PointLightNode,PointLight),this.addLight(DirectionalLightNode,DirectionalLight),this.addLight(RectAreaLightNode,RectAreaLight),this.addLight(SpotLightNode,SpotLight),this.addLight(AmbientLightNode,AmbientLight),this.addLight(HemisphereLightNode,HemisphereLight),this.addLight(LightProbeNode,LightProbe),this.addLight(IESSpotLightNode,IESSpotLight),this.addLight(ProjectorLightNode,ProjectorLight),this.addToneMapping(linearToneMapping,LinearToneMapping),this.addToneMapping(reinhardToneMapping,ReinhardToneMapping),this.addToneMapping(cineonToneMapping,CineonToneMapping),this.addToneMapping(acesFilmicToneMapping,ACESFilmicToneMapping),this.addToneMapping(agxToneMapping,AgXToneMapping),this.addToneMapping(neutralToneMapping,NeutralToneMapping)}}class WebGPURenderer extends Renderer{constructor(e={}){let t;e.forceWebGL?t=WebGLBackend:(t=WebGPUBackend,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new WebGLBackend(e)));super(new t(e),e),this.library=new BasicNodeLibrary,this.isWebGPURenderer=!0}}class BundleGroup extends Group{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}class PostProcessing{constructor(e,t=vec4(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const r=new NodeMaterial;r.name="PostProcessing",this._quadMesh=new QuadMesh(r),this._context=null}render(){const e=this.renderer;this._update(),null!==this._context.onBeforePostProcessing&&this._context.onBeforePostProcessing();const t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=NoToneMapping,e.outputColorSpace=ColorManagement.workingColorSpace;const i=e.xr.enabled;e.xr.enabled=!1,this._quadMesh.render(e),e.xr.enabled=i,e.toneMapping=t,e.outputColorSpace=r,null!==this._context.onAfterPostProcessing&&this._context.onAfterPostProcessing()}get context(){return this._context}dispose(){this._quadMesh.material.dispose()}_update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace,i={postProcessing:this,onBeforePostProcessing:null,onAfterPostProcessing:null};let n=this.outputNode;!0===this.outputColorTransform?(n=n.context(i),n=renderOutput(n,t,r)):(i.toneMapping=t,i.outputColorSpace=r,n=n.context(i)),this._context=i,this._quadMesh.material.fragmentNode=n,this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update(),null!==this._context.onBeforePostProcessing&&this._context.onBeforePostProcessing();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=NoToneMapping,e.outputColorSpace=ColorManagement.workingColorSpace;const i=e.xr.enabled;e.xr.enabled=!1,await this._quadMesh.renderAsync(e),e.xr.enabled=i,e.toneMapping=t,e.outputColorSpace=r,null!==this._context.onAfterPostProcessing&&this._context.onAfterPostProcessing()}}class StorageTexture extends Texture{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=LinearFilter,this.minFilter=LinearFilter,this.isStorageTexture=!0}setSize(e,t){this.image.width===e&&this.image.height===t||(this.image.width=e,this.image.height=t,this.dispose())}}class IndirectStorageBufferAttribute extends StorageBufferAttribute{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class NodeLoader extends Loader{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,i){const n=new FileLoader(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials),n.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){i?i(t):console.error(t),this.manager.itemError(e)}}),r,i)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:i}=r;t[e]=this.createNodeFromType(i),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const i of e){i.meta=r;t[i.uuid].deserialize(i),delete i.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),float()):nodeObject(new this.nodes[e])}}class NodeMaterialLoader extends MaterialLoader{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,i=e.inputNodes;for(const e in i){const n=i[e];t[e]=r[n]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class NodeObjectLoader extends ObjectLoader{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new NodeLoader;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const i=this.parseNodes(this._nodesJSON,t),n=new NodeMaterialLoader;n.setTextures(t),n.setNodes(i),n.setNodeMaterials(this.nodeMaterials);for(let t=0,i=e.length;t<i;t++){const i=e[t];r[i.uuid]=n.parse(i)}}return r}}class ClippingGroup extends Group{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{ACESFilmicToneMapping,AONode,AddEquation,AddOperation,AdditiveBlending,AgXToneMapping,AlphaFormat,AlwaysCompare,AlwaysDepth,AlwaysStencilFunc,AmbientLight,AmbientLightNode,AnalyticLightNode,ArrayCamera,ArrayElementNode,ArrayNode,AssignNode,AttributeNode,BackSide,BasicEnvironmentNode,BasicShadowMap,BatchNode,BoxGeometry,BufferAttribute,BufferAttributeNode,BufferGeometry,BufferNode,BumpMapNode,BundleGroup,BypassNode,ByteType,CacheNode,Camera,CineonToneMapping,ClampToEdgeWrapping,ClippingGroup,CodeNode,Color,ColorManagement,ColorSpaceNode,ComputeNode,ConstNode,ContextNode,ConvertNode,CubeCamera,CubeReflectionMapping,CubeRefractionMapping,CubeTexture,CubeTextureNode,CubeUVReflectionMapping,CullFaceBack,CullFaceFront,CullFaceNone,CustomBlending,CylinderGeometry,DataArrayTexture,DataTexture,DebugNode,DecrementStencilOp,DecrementWrapStencilOp,DepthFormat,DepthStencilFormat,DepthTexture,DirectionalLight,DirectionalLightNode,DoubleSide,DstAlphaFactor,DstColorFactor,DynamicDrawUsage,EnvironmentNode,EqualCompare,EqualDepth,EqualStencilFunc,EquirectangularReflectionMapping,EquirectangularRefractionMapping,Euler,EventDispatcher,EventNode,ExpressionNode,FileLoader,Float16BufferAttribute,Float32BufferAttribute,FloatType,FramebufferTexture,FrontFacingNode,FrontSide,Frustum,FrustumArray,FunctionCallNode,FunctionNode,FunctionOverloadingNode,GLSLNodeParser,GreaterCompare,GreaterDepth,GreaterEqualCompare,GreaterEqualDepth,GreaterEqualStencilFunc,GreaterStencilFunc,Group,HalfFloatType,HemisphereLight,HemisphereLightNode,IESSpotLight,IESSpotLightNode,IncrementStencilOp,IncrementWrapStencilOp,IndexNode,IndirectStorageBufferAttribute,InstanceNode,InstancedBufferAttribute,InstancedInterleavedBuffer,InstancedMeshNode,IntType,InterleavedBuffer,InterleavedBufferAttribute,InvertStencilOp,IrradianceNode,JoinNode,KeepStencilOp,LessCompare,LessDepth,LessEqualCompare,LessEqualDepth,LessEqualStencilFunc,LessStencilFunc,LightProbe,LightProbeNode,Lighting,LightingContextNode,LightingModel,LightingNode,LightsNode,Line2NodeMaterial,LineBasicMaterial,LineBasicNodeMaterial,LineDashedMaterial,LineDashedNodeMaterial,LinearFilter,LinearMipMapLinearFilter,LinearMipmapLinearFilter,LinearMipmapNearestFilter,LinearSRGBColorSpace,LinearToneMapping,LinearTransfer,Loader,LoopNode,MRTNode,Material,MaterialLoader,MaterialNode,MaterialReferenceNode,MathUtils,Matrix2,Matrix3,Matrix4,MaxEquation,MaxMipLevelNode,MemberNode,Mesh,MeshBasicMaterial,MeshBasicNodeMaterial,MeshLambertMaterial,MeshLambertNodeMaterial,MeshMatcapMaterial,MeshMatcapNodeMaterial,MeshNormalMaterial,MeshNormalNodeMaterial,MeshPhongMaterial,MeshPhongNodeMaterial,MeshPhysicalMaterial,MeshPhysicalNodeMaterial,MeshSSSNodeMaterial,MeshStandardMaterial,MeshStandardNodeMaterial,MeshToonMaterial,MeshToonNodeMaterial,MinEquation,MirroredRepeatWrapping,MixOperation,ModelNode,MorphNode,MultiplyBlending,MultiplyOperation,NearestFilter,NearestMipmapLinearFilter,NearestMipmapNearestFilter,NeutralToneMapping,NeverCompare,NeverDepth,NeverStencilFunc,NoBlending,NoColorSpace,NoToneMapping,Node,NodeAccess,NodeAttribute,NodeBuilder,NodeCache,NodeCode,NodeFrame,NodeFunctionInput,NodeLoader,NodeMaterial,NodeMaterialLoader,NodeMaterialObserver,NodeObjectLoader,NodeShaderStage,NodeType,NodeUniform,NodeUpdateType,NodeUtils,NodeVar,NodeVarying,NormalBlending,NormalMapNode,NotEqualCompare,NotEqualDepth,NotEqualStencilFunc,Object3D,Object3DNode,ObjectLoader,ObjectSpaceNormalMap,OneFactor,OneMinusDstAlphaFactor,OneMinusDstColorFactor,OneMinusSrcAlphaFactor,OneMinusSrcColorFactor,OrthographicCamera,OutputStructNode,PCFShadowMap,PMREMGenerator,PMREMNode,ParameterNode,PassNode,PerspectiveCamera,PhongLightingModel,PhysicalLightingModel,Plane,PlaneGeometry,PointLight,PointLightNode,PointUVNode,PointsMaterial,PointsNodeMaterial,PostProcessing,PosterizeNode,ProjectorLight,ProjectorLightNode,PropertyNode,QuadMesh,Quaternion,RED_GREEN_RGTC2_Format,RED_RGTC1_Format,REVISION,RGBAFormat,RGBAIntegerFormat,RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_BPTC_Format,RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGBFormat,RGBIntegerFormat,RGB_ETC1_Format,RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format,RGFormat,RGIntegerFormat,RTTNode,RangeNode,RectAreaLight,RectAreaLightNode,RedFormat,RedIntegerFormat,ReferenceNode,ReflectorNode,ReinhardToneMapping,RemapNode,RenderOutputNode,RenderTarget,RendererReferenceNode,RendererUtils,RepeatWrapping,ReplaceStencilOp,ReverseSubtractEquation,RotateNode,SIGNED_RED_GREEN_RGTC2_Format,SIGNED_RED_RGTC1_Format,SRGBColorSpace,SRGBTransfer,Scene,SceneNode,ScreenNode,ScriptableNode,ScriptableValueNode,SetNode,ShadowBaseNode,ShadowMaterial,ShadowNode,ShadowNodeMaterial,ShortType,SkinningNode,Sphere,SphereGeometry,SplitNode,SpotLight,SpotLightNode,SpriteMaterial,SpriteNodeMaterial,SpriteSheetUVNode,SrcAlphaFactor,SrcAlphaSaturateFactor,SrcColorFactor,StackNode,StaticDrawUsage,StorageArrayElementNode,StorageBufferAttribute,StorageBufferNode,StorageInstancedBufferAttribute,StorageTexture,StorageTextureNode,StructNode,StructTypeNode,SubBuildNode,SubtractEquation,SubtractiveBlending,TSL,TangentSpaceNormalMap,TempNode,Texture,Texture3DNode,TextureNode,TextureSizeNode,ToneMappingNode,ToonOutlinePassNode,UVMapping,Uint16BufferAttribute,Uint32BufferAttribute,UniformArrayNode,UniformGroupNode,UniformNode,UnsignedByteType,UnsignedInt248Type,UnsignedInt5999Type,UnsignedIntType,UnsignedShort4444Type,UnsignedShort5551Type,UnsignedShortType,UserDataNode,VSMShadowMap,VarNode,VaryingNode,Vector2,Vector3,Vector4,VertexColorNode,ViewportDepthNode,ViewportDepthTextureNode,ViewportSharedTextureNode,ViewportTextureNode,VolumeNodeMaterial,WebGLCoordinateSystem,WebGLCubeRenderTarget,WebGPUCoordinateSystem,WebGPURenderer,WebXRController,ZeroFactor,ZeroStencilOp,createCanvasElement,defaultBuildStages,defaultShaderStages,shaderStages,vectorComponents};
//# sourceMappingURL=three.webgpu.nodes.js.map