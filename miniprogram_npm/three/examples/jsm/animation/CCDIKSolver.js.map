{"version":3,"file":"node_modules/three/examples/jsm/animation/CCDIKSolver.js","names":["BufferAttribute","BufferGeometry","Color","Line","LineBasicMaterial","Matrix4","Mesh","MeshBasicMaterial","Object3D","Quaternion","SphereGeometry","Vector3","_quaternion","_targetPos","_targetVec","_effectorPos","_effectorVec","_linkPos","_invLinkQ","_linkScale","_axis","_vector","_matrix","CCDIKSolver","constructor","mesh","iks","this","_initialQuaternions","_workingQuaternion","ik","chainQuats","i","links","length","push","_valid","update","globalBlendFactor","il","updateOne","overrideBlend","chainBlend","undefined","blendFactor","bones","skeleton","chainIndex","indexOf","initialQuaternions","math","Math","effector","target","setFromMatrixPosition","matrixWorld","iteration","j","linkIndex","index","copy","quaternion","rotated","jl","link","enabled","limitation","rotationMin","rotationMax","decompose","invert","subVectors","applyQuaternion","normalize","angle","dot","acos","minAngle","maxAngle","crossVectors","setFromAxisAngle","multiply","c","w","c2","sqrt","set","x","y","z","rotation","setFromVector3","setFromEuler","max","min","updateMatrixWorld","slerp","createHelper","sphereSize","CCDIKHelper","link0","link1","parent","console","warn","name","getPosition","bone","matrixWorldInv","applyMatrix4","setPositionOfBoneToAttributeArray","array","v","super","root","matrix","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","_init","force","visible","offset","targetBone","effectorBone","targetMesh","children","effectorMesh","position","linkBone","line","geometry","attributes","needsUpdate","dispose","child","isLine","scope","createLine","vertices","Float32Array","setAttribute","createLineGeometry","add"],"sources":["node_modules/three/examples/jsm/animation/CCDIKSolver.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tQuaternion,\n\tSphereGeometry,\n\tVector3\n} from 'three';\n\nconst _quaternion = new Quaternion();\nconst _targetPos = new Vector3();\nconst _targetVec = new Vector3();\nconst _effectorPos = new Vector3();\nconst _effectorVec = new Vector3();\nconst _linkPos = new Vector3();\nconst _invLinkQ = new Quaternion();\nconst _linkScale = new Vector3();\nconst _axis = new Vector3();\nconst _vector = new Vector3();\nconst _matrix = new Matrix4();\n\n/**\n * This class solves the Inverse Kinematics Problem with a [CCD Algorithm]{@link https://web.archive.org/web/20221206080850/https://sites.google.com/site/auraliusproject/ccd-algorithm}.\n *\n * `CCDIKSolver` is designed to work with instances of {@link SkinnedMesh}.\n *\n * @three_import import { CCDIKSolver } from 'three/addons/animation/CCDIKSolver.js';\n */\nclass CCDIKSolver {\n\n\t/**\n\t * @param {SkinnedMesh} mesh - The skinned mesh.\n\t * @param {Array<CCDIKSolver~IK>} [iks=[]] - The IK objects.\n\t */\n\tconstructor( mesh, iks = [] ) {\n\n\t\t/**\n\t\t * The skinned mesh.\n\t\t *\n\t\t * @type {SkinnedMesh}\n\t\t */\n\t\tthis.mesh = mesh;\n\n\t\t/**\n\t\t * The IK objects.\n\t\t *\n\t\t * @type {SkinnedMesh}\n\t\t */\n\t\tthis.iks = iks;\n\n\t\tthis._initialQuaternions = [];\n\t\tthis._workingQuaternion = new Quaternion();\n\n\t\tfor ( const ik of iks ) {\n\n\t\t\tconst chainQuats = [];\n\t\t\tfor ( let i = 0; i < ik.links.length; i ++ ) {\n\n\t\t\t  chainQuats.push( new Quaternion() );\n\n\t\t\t}\n\n\t\t\tthis._initialQuaternions.push( chainQuats );\n\n\t\t}\n\n\t\tthis._valid();\n\n\t}\n\n\t/**\n\t * Updates all IK bones by solving the CCD algorithm.\n\t *\n\t * @param {number} [globalBlendFactor=1.0] - Blend factor applied if an IK chain doesn't have its own .blendFactor.\n\t * @return {CCDIKSolver} A reference to this instance.\n\t */\n\tupdate( globalBlendFactor = 1.0 ) {\n\n\t\tconst iks = this.iks;\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tthis.updateOne( iks[ i ], globalBlendFactor );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates one IK bone solving the CCD algorithm.\n\t *\n\t * @param {CCDIKSolver~IK} ik - The IK to update.\n\t * @param {number} [overrideBlend=1.0] - If the IK object does not define `blendFactor`, this value is used.\n\t * @return {CCDIKSolver} A reference to this instance.\n\t */\n\tupdateOne( ik, overrideBlend = 1.0 ) {\n\n\t\tconst chainBlend = ik.blendFactor !== undefined ? ik.blendFactor : overrideBlend;\n\t\tconst bones = this.mesh.skeleton.bones;\n\t\tconst chainIndex = this.iks.indexOf( ik );\n\t\tconst initialQuaternions = this._initialQuaternions[ chainIndex ];\n\n\t\t// for reference overhead reduction in loop\n\t\tconst math = Math;\n\n\t\tconst effector = bones[ ik.effector ];\n\t\tconst target = bones[ ik.target ];\n\n\t\t// don't use getWorldPosition() here for the performance\n\t\t// because it calls updateMatrixWorld( true ) inside.\n\t\t_targetPos.setFromMatrixPosition( target.matrixWorld );\n\n\t\tconst links = ik.links;\n\t\tconst iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n\t\tif ( chainBlend < 1.0 ) {\n\n\t\t\tfor ( let j = 0; j < links.length; j ++ ) {\n\n\t\t\t  const linkIndex = links[ j ].index;\n\t\t\t  initialQuaternions[ j ].copy( bones[ linkIndex ].quaternion );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < iteration; i ++ ) {\n\n\t\t\tlet rotated = false;\n\n\t\t\tfor ( let j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\tconst link = bones[ links[ j ].index ];\n\n\t\t\t\t// skip this link and following links\n\t\t\t\tif ( links[ j ].enabled === false ) break;\n\n\t\t\t\tconst limitation = links[ j ].limitation;\n\t\t\t\tconst rotationMin = links[ j ].rotationMin;\n\t\t\t\tconst rotationMax = links[ j ].rotationMax;\n\n\t\t\t\t// don't use getWorldPosition/Quaternion() here for the performance\n\t\t\t\t// because they call updateMatrixWorld( true ) inside.\n\t\t\t\tlink.matrixWorld.decompose( _linkPos, _invLinkQ, _linkScale );\n\t\t\t\t_invLinkQ.invert();\n\t\t\t\t_effectorPos.setFromMatrixPosition( effector.matrixWorld );\n\n\t\t\t\t// work in link world\n\t\t\t\t_effectorVec.subVectors( _effectorPos, _linkPos );\n\t\t\t\t_effectorVec.applyQuaternion( _invLinkQ );\n\t\t\t\t_effectorVec.normalize();\n\n\t\t\t\t_targetVec.subVectors( _targetPos, _linkPos );\n\t\t\t\t_targetVec.applyQuaternion( _invLinkQ );\n\t\t\t\t_targetVec.normalize();\n\n\t\t\t\tlet angle = _targetVec.dot( _effectorVec );\n\n\t\t\t\tif ( angle > 1.0 ) {\n\n\t\t\t\t\tangle = 1.0;\n\n\t\t\t\t} else if ( angle < - 1.0 ) {\n\n\t\t\t\t\tangle = - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tangle = math.acos( angle );\n\n\t\t\t\t// skip if changing angle is too small to prevent vibration of bone\n\t\t\t\tif ( angle < 1e-5 ) continue;\n\n\t\t\t\tif ( ik.minAngle !== undefined && angle < ik.minAngle ) {\n\n\t\t\t\t\tangle = ik.minAngle;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ik.maxAngle !== undefined && angle > ik.maxAngle ) {\n\n\t\t\t\t\tangle = ik.maxAngle;\n\n\t\t\t\t}\n\n\t\t\t\t_axis.crossVectors( _effectorVec, _targetVec );\n\t\t\t\t_axis.normalize();\n\n\t\t\t\t_quaternion.setFromAxisAngle( _axis, angle );\n\t\t\t\tlink.quaternion.multiply( _quaternion );\n\n\t\t\t\t// TODO: re-consider the limitation specification\n\t\t\t\tif ( limitation !== undefined ) {\n\n\t\t\t\t\tlet c = link.quaternion.w;\n\n\t\t\t\t\tif ( c > 1.0 ) c = 1.0;\n\n\t\t\t\t\tconst c2 = math.sqrt( 1 - c * c );\n\t\t\t\t\tlink.quaternion.set( limitation.x * c2,\n\t\t\t\t\t                     limitation.y * c2,\n\t\t\t\t\t                     limitation.z * c2,\n\t\t\t\t\t                     c );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotationMin !== undefined ) {\n\n\t\t\t\t\tlink.rotation.setFromVector3( _vector.setFromEuler( link.rotation ).max( rotationMin ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotationMax !== undefined ) {\n\n\t\t\t\t\tlink.rotation.setFromVector3( _vector.setFromEuler( link.rotation ).min( rotationMax ) );\n\n\t\t\t\t}\n\n\t\t\t\tlink.updateMatrixWorld( true );\n\n\t\t\t\trotated = true;\n\n\t\t\t}\n\n\t\t\tif ( ! rotated ) break;\n\n\t\t}\n\n\t\tif ( chainBlend < 1.0 ) {\n\n\t\t\tfor ( let j = 0; j < links.length; j ++ ) {\n\n\t\t\t  const linkIndex = links[ j ].index;\n\t\t\t  const link = bones[ linkIndex ];\n\n\t\t\t  this._workingQuaternion.copy( initialQuaternions[ j ] ).slerp( link.quaternion, chainBlend );\n\n\t\t\t  link.quaternion.copy( this._workingQuaternion );\n\t\t\t  link.updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t}\n\n\t\t  return this;\n\n\t}\n\n\t/**\n\t * Creates a helper for visualizing the CCDIK.\n\t *\n\t * @param {number} sphereSize - The sphere size.\n\t * @return {CCDIKHelper} The created helper.\n\t */\n\tcreateHelper( sphereSize ) {\n\n\t\treturn new CCDIKHelper( this.mesh, this.iks, sphereSize );\n\n\t}\n\n\t// private methods\n\n\t_valid() {\n\n\t\tconst iks = this.iks;\n\t\tconst bones = this.mesh.skeleton.bones;\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tconst ik = iks[ i ];\n\t\t\tconst effector = bones[ ik.effector ];\n\t\t\tconst links = ik.links;\n\t\t\tlet link0, link1;\n\n\t\t\tlink0 = effector;\n\n\t\t\tfor ( let j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\tlink1 = bones[ links[ j ].index ];\n\n\t\t\t\tif ( link0.parent !== link1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.CCDIKSolver: bone ' + link0.name + ' is not the child of bone ' + link1.name );\n\n\t\t\t\t}\n\n\t\t\t\tlink0 = link1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction getPosition( bone, matrixWorldInv ) {\n\n\treturn _vector\n\t\t.setFromMatrixPosition( bone.matrixWorld )\n\t\t.applyMatrix4( matrixWorldInv );\n\n}\n\nfunction setPositionOfBoneToAttributeArray( array, index, bone, matrixWorldInv ) {\n\n\tconst v = getPosition( bone, matrixWorldInv );\n\n\tarray[ index * 3 + 0 ] = v.x;\n\tarray[ index * 3 + 1 ] = v.y;\n\tarray[ index * 3 + 2 ] = v.z;\n\n}\n\n/**\n * Helper for visualizing IK bones.\n *\n * @augments Object3D\n * @three_import import { CCDIKHelper } from 'three/addons/animation/CCDIKSolver.js';\n */\nclass CCDIKHelper extends Object3D {\n\n\t/**\n\t * @param {SkinnedMesh} mesh - The skinned mesh.\n \t * @param {Array<CCDIKSolver~IK>} [iks=[]] - The IK objects.\n \t * @param {number} [sphereSize=0.25] - The sphere size.\n\t */\n\tconstructor( mesh, iks = [], sphereSize = 0.25 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The skinned mesh this helper refers to.\n\t\t *\n\t\t * @type {SkinnedMesh}\n\t\t */\n\t\tthis.root = mesh;\n\n\t\t/**\n\t\t * The IK objects.\n\t\t *\n\t\t * @type {Array<CCDIKSolver~IK>}\n\t\t */\n\t\tthis.iks = iks;\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The helpers sphere geometry.\n\t\t *\n\t\t * @type {SkinnedMesh}\n\t\t */\n\t\tthis.sphereGeometry = new SphereGeometry( sphereSize, 16, 8 );\n\n\t\t/**\n\t\t * The material for the target spheres.\n\t\t *\n\t\t * @type {MeshBasicMaterial}\n\t\t */\n\t\tthis.targetSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0xff8888 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t/**\n\t\t * The material for the effector spheres.\n\t\t *\n\t\t * @type {MeshBasicMaterial}\n\t\t */\n\t\tthis.effectorSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x88ff88 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t/**\n\t\t * The material for the link spheres.\n\t\t *\n\t\t * @type {MeshBasicMaterial}\n\t\t */\n\t\tthis.linkSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x8888ff ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t/**\n\t\t * A global line material.\n\t\t *\n\t\t * @type {LineBasicMaterial}\n\t\t */\n\t\tthis.lineMaterial = new LineBasicMaterial( {\n\t\t\tcolor: new Color( 0xff0000 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis._init();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst mesh = this.root;\n\n\t\tif ( this.visible ) {\n\n\t\t\tlet offset = 0;\n\n\t\t\tconst iks = this.iks;\n\t\t\tconst bones = mesh.skeleton.bones;\n\n\t\t\t_matrix.copy( mesh.matrixWorld ).invert();\n\n\t\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\tconst ik = iks[ i ];\n\n\t\t\t\tconst targetBone = bones[ ik.target ];\n\t\t\t\tconst effectorBone = bones[ ik.effector ];\n\n\t\t\t\tconst targetMesh = this.children[ offset ++ ];\n\t\t\t\tconst effectorMesh = this.children[ offset ++ ];\n\n\t\t\t\ttargetMesh.position.copy( getPosition( targetBone, _matrix ) );\n\t\t\t\teffectorMesh.position.copy( getPosition( effectorBone, _matrix ) );\n\n\t\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst link = ik.links[ j ];\n\t\t\t\t\tconst linkBone = bones[ link.index ];\n\n\t\t\t\t\tconst linkMesh = this.children[ offset ++ ];\n\n\t\t\t\t\tlinkMesh.position.copy( getPosition( linkBone, _matrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tconst line = this.children[ offset ++ ];\n\t\t\t\tconst array = line.geometry.attributes.position.array;\n\n\t\t\t\tsetPositionOfBoneToAttributeArray( array, 0, targetBone, _matrix );\n\t\t\t\tsetPositionOfBoneToAttributeArray( array, 1, effectorBone, _matrix );\n\n\t\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst link = ik.links[ j ];\n\t\t\t\t\tconst linkBone = bones[ link.index ];\n\t\t\t\t\tsetPositionOfBoneToAttributeArray( array, j + 2, linkBone, _matrix );\n\n\t\t\t\t}\n\n\t\t\t\tline.geometry.attributes.position.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance.\n\t * Call this method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.sphereGeometry.dispose();\n\n\t\tthis.targetSphereMaterial.dispose();\n\t\tthis.effectorSphereMaterial.dispose();\n\t\tthis.linkSphereMaterial.dispose();\n\t\tthis.lineMaterial.dispose();\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.isLine ) child.geometry.dispose();\n\n\t\t}\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tconst scope = this;\n\t\tconst iks = this.iks;\n\n\t\tfunction createLineGeometry( ik ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = new Float32Array( ( 2 + ik.links.length ) * 3 );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction createTargetMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.targetSphereMaterial );\n\n\t\t}\n\n\t\tfunction createEffectorMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.effectorSphereMaterial );\n\n\t\t}\n\n\t\tfunction createLinkMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.linkSphereMaterial );\n\n\t\t}\n\n\t\tfunction createLine( ik ) {\n\n\t\t\treturn new Line( createLineGeometry( ik ), scope.lineMaterial );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tconst ik = iks[ i ];\n\n\t\t\tthis.add( createTargetMesh() );\n\t\t\tthis.add( createEffectorMesh() );\n\n\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.add( createLinkMesh() );\n\n\t\t\t}\n\n\t\t\tthis.add( createLine( ik ) );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This type represents IK configuration objects.\n *\n * @typedef {Object} CCDIKSolver~IK\n * @property {number} target - The target bone index which refers to a bone in the `Skeleton.bones` array.\n * @property {number} effector - The effector bone index which refers to a bone in the `Skeleton.bones` array.\n * @property {Array<CCDIKSolver~BoneLink>} links - An array of bone links.\n * @property {number} [iteration=1] - Iteration number of calculation. Smaller is faster but less precise.\n * @property {number} [minAngle] - Minimum rotation angle in a step in radians.\n * @property {number} [maxAngle] - Minimum rotation angle in a step in radians.\n * @property {number} [blendFactor] - The blend factor.\n **/\n\n/**\n * This type represents bone links.\n *\n * @typedef {Object} CCDIKSolver~BoneLink\n * @property {number} index - The index of a linked bone which refers to a bone in the `Skeleton.bones` array.\n * @property {number} [limitation] - Rotation axis.\n * @property {number} [rotationMin] - Rotation minimum limit.\n * @property {number} [rotationMax] - Rotation maximum limit.\n * @property {boolean} [enabled=true] - Whether the link is enabled or not.\n **/\n\n\nexport { CCDIKSolver, CCDIKHelper };\n"],"mappings":"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","ignoreList":[]}