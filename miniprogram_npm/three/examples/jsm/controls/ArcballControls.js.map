{"version":3,"file":"node_modules/three/examples/jsm/controls/ArcballControls.js","names":["Controls","GridHelper","EllipseCurve","BufferGeometry","Line","LineBasicMaterial","Raycaster","Group","Box3","Sphere","Quaternion","Vector2","Vector3","Matrix4","MathUtils","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","_raycaster","_offset","_gizmoMatrixStateTemp","_cameraMatrixStateTemp","_scalePointTemp","_EPS","ArcballControls","constructor","domElement","scene","super","this","target","_currentTarget","radiusFactor","mouseActions","_mouseOp","_v2_1","_v3_1","_v3_2","_m4_1","_m4_2","_quat","_translationMatrix","_rotationMatrix","_scaleMatrix","_rotationAxis","_cameraMatrixState","_cameraProjectionState","_fovState","_upState","_zoomState","_nearPos","_farPos","_gizmoMatrixState","_up0","_zoom0","_fov0","_initialNear","_nearPos0","_initialFar","_farPos0","_cameraMatrixState0","_gizmoMatrixState0","_target0","_button","_touchStart","_touchCurrent","_input","_switchSensibility","_startFingerDistance","_currentFingerDistance","_startFingerRotation","_currentFingerRotation","_devPxRatio","_downValid","_nclicks","_downEvents","_downStart","_clickStart","_maxDownTime","_maxInterval","_posThreshold","_movementThreshold","_currentCursorPosition","_startCursorPosition","_grid","_gridPosition","_gizmos","_curvePts","_timeStart","_animationId","focusAnimationTime","_timePrev","_timeCurrent","_anglePrev","_angleCurrent","_cursorPosPrev","_cursorPosCurr","_wPrev","_wCurr","adjustNearFar","scaleFactor","dampingFactor","wMax","enableAnimations","enableGrid","cursorZoom","minFov","maxFov","rotateSpeed","enablePan","enableRotate","enableZoom","enableGizmos","enableFocus","minDistance","maxDistance","Infinity","minZoom","maxZoom","_tbRadius","_state","setCamera","add","initializeMouseActions","_onContextMenu","onContextMenu","bind","_onWheel","onWheel","_onPointerUp","onPointerUp","_onPointerMove","onPointerMove","_onPointerDown","onPointerDown","_onPointerCancel","onPointerCancel","_onWindowResize","onWindowResize","connect","element","style","touchAction","window","devicePixelRatio","addEventListener","passive","disconnect","removeEventListener","onSinglePanStart","event","operation","enabled","dispatchEvent","setCenter","clientX","clientY","cancelAnimationFrame","activateGizmos","updateTbState","copy","unprojectOnTbPlane","object","drawGrid","unprojectOnTbSurface","performance","now","isPerspectiveCamera","setY","getCursorNDC","onSinglePanMove","opState","restart","applyTransformMatrix","pan","disposeGrid","distance","distanceTo","angle","angleTo","amount","Math","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","movement","size","pow","setFromMatrixPosition","scale","position","xNew","clamp","tan","DEG2RAD","newFov","RAD2DEG","atan","newDistance","setFov","sub","normalize","multiplyScalar","makeTranslation","z","onSinglePanEnd","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","onDoubleTap","hitP","unprojectOnObj","onFocusAnim","focus","onDoublePanStart","onDoublePanMove","onDoublePanEnd","onRotateStart","getAngle","getWorldDirection","onRotateMove","rotationPoint","applyQuaternion","quaternion","zoom","zRotate","onRotateEnd","onPinchStart","calculatePointersDistance","onPinchMove","scalePoint","isOrthographicCamera","onPinchEnd","onTriplePanStart","nFingers","length","i","onTriplePanMove","onTriplePanEnd","setMouseAction","compareMouseAction","action1","action2","mouse","key","state","includes","action","splice","push","unsetMouseAction","getOpFromAction","getOpStateFromAction","p1","p2","atan2","PI","updateTouchEvent","pointerId","transformation","premultiply","decompose","updateMatrix","up","calculateTbRadius","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","near","adjustedFarPosition","regularFarPosition","minFarPos","far","updateProjectionMatrix","update","p0","t0","t1","sqrt","vec1","vec2","extractRotation","setFromRotationMatrix","crossVectors","clone","halfFovV","fov","halfFovH","top","right","point","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","rotateX","dispose","remove","easeOutCubic","isActive","gizmoX","children","gizmoY","gizmoZ","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","setX","getCursorPosition","lookAt","matrix","projectionMatrix","makeGizmos","setGizmosVisible","value","visible","setTbRadius","points","getPoints","curveGeometry","setFromPoints","gizmo","geometry","tbCenter","tbRadius","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","rotation","identity","setPosition","makeScale","traverse","isLine","clear","time","cameraMatrix","gizmoMatrix","animTime","w0","deltaTime","adjust","distanceFactor","set","setTransformationMatrices","reset","axis","makeRotationAxis","multiply","copyState","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","pasteState","readText","then","setStateFromJSON","saveState","scaleGizmos","sizeInverse","pos","applyAxisAngle","getRaycaster","cursor","raycaster","setFromCamera","intersect","intersectObjects","uuid","face","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","rayDir","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","updateMatrixState","newState","updateMatrices","equals","newZoom","oldRadius","newRadius","json","parse","undefined","fromArray","elements","gizmoTmp","preventDefault","button","isPrimary","pointerType","modifier","ctrlKey","metaKey","shiftKey","mouseOpState","nTouch","timeStamp","clickInterval","shift","mouseOp","notchDeltaY","sgn","deltaY","deltaX"],"sources":["node_modules/three/examples/jsm/controls/ArcballControls.js"],"sourcesContent":["import {\n\tControls,\n\tGridHelper,\n\tEllipseCurve,\n\tBufferGeometry,\n\tLine,\n\tLineBasicMaterial,\n\tRaycaster,\n\tGroup,\n\tBox3,\n\tSphere,\n\tQuaternion,\n\tVector2,\n\tVector3,\n\tMatrix4,\n\tMathUtils\n} from 'three';\n\n//trackball state\nconst STATE = {\n\n\tIDLE: Symbol(),\n\tROTATE: Symbol(),\n\tPAN: Symbol(),\n\tSCALE: Symbol(),\n\tFOV: Symbol(),\n\tFOCUS: Symbol(),\n\tZROTATE: Symbol(),\n\tTOUCH_MULTI: Symbol(),\n\tANIMATION_FOCUS: Symbol(),\n\tANIMATION_ROTATE: Symbol()\n\n};\n\nconst INPUT = {\n\n\tNONE: Symbol(),\n\tONE_FINGER: Symbol(),\n\tONE_FINGER_SWITCHED: Symbol(),\n\tTWO_FINGER: Symbol(),\n\tMULT_FINGER: Symbol(),\n\tCURSOR: Symbol()\n\n};\n\n//cursor center coordinates\nconst _center = {\n\n\tx: 0,\n\ty: 0\n\n};\n\n//transformation matrices for gizmos and camera\nconst _transformation = {\n\n\tcamera: new Matrix4(),\n\tgizmos: new Matrix4()\n\n};\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event ArcballControls#change\n * @type {Object}\n */\nconst _changeEvent = { type: 'change' };\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event ArcballControls#start\n * @type {Object}\n */\nconst _startEvent = { type: 'start' };\n\n/**\n * Fires when an interaction has finished.\n *\n * @event ArcballControls#end\n * @type {Object}\n */\nconst _endEvent = { type: 'end' };\n\nconst _raycaster = new Raycaster();\nconst _offset = new Vector3();\n\nconst _gizmoMatrixStateTemp = new Matrix4();\nconst _cameraMatrixStateTemp = new Matrix4();\nconst _scalePointTemp = new Vector3();\n\nconst _EPS = 0.000001;\n\n/**\n * Arcball controls allow the camera to be controlled by a virtual trackball with full touch support and advanced navigation functionality.\n * Cursor/finger positions and movements are mapped over a virtual trackball surface represented by a gizmo and mapped in intuitive and\n * consistent camera movements. Dragging cursor/fingers will cause camera to orbit around the center of the trackball in a conservative\n * way (returning to the starting point will make the camera return to its starting orientation).\n *\n * In addition to supporting pan, zoom and pinch gestures, Arcball controls provide focus< functionality with a double click/tap for intuitively\n * moving the object's point of interest in the center of the virtual trackball. Focus allows a much better inspection and navigation in complex\n * environment. Moreover Arcball controls allow FOV manipulation (in a vertigo-style method) and z-rotation. Saving and restoring of Camera State\n * is supported also through clipboard (use ctrl+c and ctrl+v shortcuts for copy and paste the state).\n *\n * Unlike {@link OrbitControls} and {@link TrackballControls}, `ArcballControls` doesn't require `update()` to be called externally in an\n * animation loop when animations are on.\n *\n * @augments Controls\n * @three_import import { ArcballControls } from 'three/addons/controls/ArcballControls.js';\n */\nclass ArcballControls extends Controls {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Camera} camera - The camera to be controlled. The camera must not be a child of another object, unless that object is the scene itself.\n\t * @param {?HTMLDOMElement} [domElement=null] - The HTML element used for event listeners.\n\t * @param {?Scene} [scene=null] The scene rendered by the camera. If not given, gizmos cannot be shown.\n\t */\n\tconstructor( camera, domElement = null, scene = null ) {\n\n\t\tsuper( camera, domElement );\n\n\t\t/**\n\t\t * The scene rendered by the camera. If not given, gizmos cannot be shown.\n\t\t *\n\t\t * @type {?Scene}\n\t\t * @default null\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The control's focus point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target = new Vector3();\n\t\tthis._currentTarget = new Vector3();\n\n\t\t/**\n\t\t * The size of the gizmo relative to the screen width and height.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.67\n\t\t */\n\t\tthis.radiusFactor = 0.67;\n\n\t\t/**\n\t\t * Holds the mouse actions of this controls. This property is maintained by the methods\n\t\t * `setMouseAction()` and `unsetMouseAction()`.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.mouseActions = [];\n\t\tthis._mouseOp = null;\n\n\n\t\t//global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\t\tthis._v2_1 = new Vector2();\n\t\tthis._v3_1 = new Vector3();\n\t\tthis._v3_2 = new Vector3();\n\n\t\tthis._m4_1 = new Matrix4();\n\t\tthis._m4_2 = new Matrix4();\n\n\t\tthis._quat = new Quaternion();\n\n\t\t//transformation matrices\n\t\tthis._translationMatrix = new Matrix4(); //matrix for translation operation\n\t\tthis._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\t\tthis._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n\t\tthis._rotationAxis = new Vector3(); //axis for rotate operation\n\n\n\t\t//camera state\n\t\tthis._cameraMatrixState = new Matrix4();\n\t\tthis._cameraProjectionState = new Matrix4();\n\n\t\tthis._fovState = 1;\n\t\tthis._upState = new Vector3();\n\t\tthis._zoomState = 1;\n\t\tthis._nearPos = 0;\n\t\tthis._farPos = 0;\n\n\t\tthis._gizmoMatrixState = new Matrix4();\n\n\t\t//initial values\n\t\tthis._up0 = new Vector3();\n\t\tthis._zoom0 = 1;\n\t\tthis._fov0 = 0;\n\t\tthis._initialNear = 0;\n\t\tthis._nearPos0 = 0;\n\t\tthis._initialFar = 0;\n\t\tthis._farPos0 = 0;\n\t\tthis._cameraMatrixState0 = new Matrix4();\n\t\tthis._gizmoMatrixState0 = new Matrix4();\n\t\tthis._target0 = new Vector3();\n\n\t\t//pointers array\n\t\tthis._button = - 1;\n\t\tthis._touchStart = [];\n\t\tthis._touchCurrent = [];\n\t\tthis._input = INPUT.NONE;\n\n\t\t//two fingers touch interaction\n\t\tthis._switchSensibility = 32;\t//minimum movement to be performed to fire single pan start after the second finger has been released\n\t\tthis._startFingerDistance = 0; //distance between two fingers\n\t\tthis._currentFingerDistance = 0;\n\t\tthis._startFingerRotation = 0; //amount of rotation performed with two fingers\n\t\tthis._currentFingerRotation = 0;\n\n\t\t//double tap\n\t\tthis._devPxRatio = 0;\n\t\tthis._downValid = true;\n\t\tthis._nclicks = 0;\n\t\tthis._downEvents = [];\n\t\tthis._downStart = 0;\t//pointerDown time\n\t\tthis._clickStart = 0;\t//first click time\n\t\tthis._maxDownTime = 250;\n\t\tthis._maxInterval = 300;\n\t\tthis._posThreshold = 24;\n\t\tthis._movementThreshold = 24;\n\n\t\t//cursor positions\n\t\tthis._currentCursorPosition = new Vector3();\n\t\tthis._startCursorPosition = new Vector3();\n\n\t\t//grid\n\t\tthis._grid = null; //grid to be visualized during pan operation\n\t\tthis._gridPosition = new Vector3();\n\n\t\t//gizmos\n\t\tthis._gizmos = new Group();\n\t\tthis._curvePts = 128;\n\n\n\t\t//animations\n\t\tthis._timeStart = - 1; //initial time\n\t\tthis._animationId = - 1;\n\n\t\t/**\n\t\t * Duration of focus animations in ms.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 500\n\t\t */\n\t\tthis.focusAnimationTime = 500;\n\n\t\t//rotate animation\n\t\tthis._timePrev = 0; //time at which previous rotate operation has been detected\n\t\tthis._timeCurrent = 0; //time at which current rotate operation has been detected\n\t\tthis._anglePrev = 0; //angle of previous rotation\n\t\tthis._angleCurrent = 0; //angle of current rotation\n\t\tthis._cursorPosPrev = new Vector3();\t//cursor position when previous rotate operation has been detected\n\t\tthis._cursorPosCurr = new Vector3();//cursor position when current rotate operation has been detected\n\t\tthis._wPrev = 0; //angular velocity of the previous rotate operation\n\t\tthis._wCurr = 0; //angular velocity of the current rotate operation\n\n\t\t//parameters\n\n\t\t/**\n\t\t * If set to `true`, the camera's near and far values will be adjusted every time zoom is\n\t\t * performed trying to maintain the same visible portion given by initial near and far\n\t\t * values. Only works with perspective cameras.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.adjustNearFar = false;\n\n\t\t/**\n\t\t * The scaling factor used when performing zoom operation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.1\n\t\t */\n\t\tthis.scaleFactor = 1.1;\n\n\t\t/**\n\t\t * The damping inertia used if 'enableAnimations` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 25\n\t\t */\n\t\tthis.dampingFactor = 25;\n\n\t\t/**\n\t\t * Maximum angular velocity allowed on rotation animation start.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 20\n\t\t */\n\t\tthis.wMax = 20;\n\n\t\t/**\n\t\t * Set to `true` to enable animations for rotation (damping) and focus operation.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableAnimations = true;\n\n\t\t/**\n\t\t * If set to `true`, a grid will appear when panning operation is being performed\n\t\t * (desktop interaction only).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enableGrid = false;\n\n\t\t/**\n\t\t * Set to `true` to make zoom become cursor centered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.cursorZoom = false;\n\n\t\t/**\n\t\t * The minimum FOV in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 5\n\t\t */\n\t\tthis.minFov = 5;\n\n\t\t/**\n\t\t * The maximum FOV in degrees.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 90\n\t\t */\n\t\tthis.maxFov = 90;\n\n\t\t/**\n\t\t * Speed of rotation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.rotateSpeed = 1;\n\n\t\t/**\n\t\t * Enable or disable camera panning.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enablePan = true;\n\n\t\t/**\n\t\t * Enable or disable camera rotation.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableRotate = true;\n\n\t\t/**\n\t\t * Enable or disable camera zoom.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableZoom = true;\n\n\t\t/**\n\t\t * Enable or disable gizmos.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableGizmos = true;\n\n\t\t/**\n\t\t * Enable or disable camera focusing on double-tap (or click) operations.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableFocus = true;\n\n\t\t/**\n\t\t * How far you can dolly in. For perspective cameras only.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minDistance = 0;\n\n\t\t/**\n\t\t * How far you can dolly out. For perspective cameras only.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxDistance = Infinity;\n\n\t\t/**\n\t\t * How far you can zoom in. For orthographic cameras only.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minZoom = 0;\n\n\t\t/**\n\t\t * How far you can zoom out. For orthographic cameras only.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxZoom = Infinity;\n\n\t\t//trackball parameters\n\t\tthis._tbRadius = 1;\n\n\t\t//FSA\n\t\tthis._state = STATE.IDLE;\n\n\t\tthis.setCamera( camera );\n\n\t\tif ( this.scene != null ) {\n\n\t\t\tthis.scene.add( this._gizmos );\n\n\t\t}\n\n\t\tthis.initializeMouseActions();\n\n\t\t// event listeners\n\n\t\tthis._onContextMenu = onContextMenu.bind( this );\n\t\tthis._onWheel = onWheel.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerCancel = onPointerCancel.bind( this );\n\t\tthis._onWindowResize = onWindowResize.bind( this );\n\n\t\tif ( domElement !== null ) {\n\n\t\t\tthis.connect( domElement );\n\n\t\t}\n\n\t}\n\n\tconnect( element ) {\n\n\t\tsuper.connect( element );\n\n\t\tthis.domElement.style.touchAction = 'none';\n\t\tthis._devPxRatio = window.devicePixelRatio;\n\n\t\tthis.domElement.addEventListener( 'contextmenu', this._onContextMenu );\n\t\tthis.domElement.addEventListener( 'wheel', this._onWheel, { passive: false } );\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointercancel', this._onPointerCancel );\n\n\t\twindow.addEventListener( 'resize', this._onWindowResize );\n\n\t}\n\n\tdisconnect() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointercancel', this._onPointerCancel );\n\t\tthis.domElement.removeEventListener( 'wheel', this._onWheel );\n\t\tthis.domElement.removeEventListener( 'contextmenu', this._onContextMenu );\n\n\t\twindow.removeEventListener( 'pointermove', this._onPointerMove );\n\t\twindow.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\twindow.removeEventListener( 'resize', this._onWindowResize );\n\n\t}\n\n\tonSinglePanStart( event, operation ) {\n\n\t\tif ( this.enabled ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tthis.setCenter( event.clientX, event.clientY );\n\n\t\t\tswitch ( operation ) {\n\n\t\t\t\tcase 'PAN':\n\n\t\t\t\t\tif ( ! this.enablePan ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._animationId != - 1 ) {\n\n\t\t\t\t\t\tcancelAnimationFrame( this._animationId );\n\t\t\t\t\t\tthis._animationId = - 1;\n\t\t\t\t\t\tthis._timeStart = - 1;\n\n\t\t\t\t\t\tthis.activateGizmos( false );\n\t\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.PAN, true );\n\t\t\t\t\tthis._startCursorPosition.copy( this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement ) );\n\t\t\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\t\t\tthis.drawGrid();\n\t\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ROTATE':\n\n\t\t\t\t\tif ( ! this.enableRotate ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._animationId != - 1 ) {\n\n\t\t\t\t\t\tcancelAnimationFrame( this._animationId );\n\t\t\t\t\t\tthis._animationId = - 1;\n\t\t\t\t\t\tthis._timeStart = - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.ROTATE, true );\n\t\t\t\t\tthis._startCursorPosition.copy( this.unprojectOnTbSurface( this.object, _center.x, _center.y, this.domElement, this._tbRadius ) );\n\t\t\t\t\tthis.activateGizmos( true );\n\t\t\t\t\tif ( this.enableAnimations ) {\n\n\t\t\t\t\t\tthis._timePrev = this._timeCurrent = performance.now();\n\t\t\t\t\t\tthis._angleCurrent = this._anglePrev = 0;\n\t\t\t\t\t\tthis._cursorPosPrev.copy( this._startCursorPosition );\n\t\t\t\t\t\tthis._cursorPosCurr.copy( this._cursorPosPrev );\n\t\t\t\t\t\tthis._wCurr = 0;\n\t\t\t\t\t\tthis._wPrev = this._wCurr;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'FOV':\n\n\t\t\t\t\tif ( ! this.object.isPerspectiveCamera || ! this.enableZoom ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._animationId != - 1 ) {\n\n\t\t\t\t\t\tcancelAnimationFrame( this._animationId );\n\t\t\t\t\t\tthis._animationId = - 1;\n\t\t\t\t\t\tthis._timeStart = - 1;\n\n\t\t\t\t\t\tthis.activateGizmos( false );\n\t\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.FOV, true );\n\t\t\t\t\tthis._startCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\t\t\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZOOM':\n\n\t\t\t\t\tif ( ! this.enableZoom ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._animationId != - 1 ) {\n\n\t\t\t\t\t\tcancelAnimationFrame( this._animationId );\n\t\t\t\t\t\tthis._animationId = - 1;\n\t\t\t\t\t\tthis._timeStart = - 1;\n\n\t\t\t\t\t\tthis.activateGizmos( false );\n\t\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.SCALE, true );\n\t\t\t\t\tthis._startCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\t\t\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tonSinglePanMove( event, opState ) {\n\n\t\tif ( this.enabled ) {\n\n\t\t\tconst restart = opState != this._state;\n\t\t\tthis.setCenter( event.clientX, event.clientY );\n\n\t\t\tswitch ( opState ) {\n\n\t\t\t\tcase STATE.PAN:\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tif ( restart ) {\n\n\t\t\t\t\t\t\t//switch to pan operation\n\n\t\t\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\t\t\t\t\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\t\t\t\t\tthis.updateTbState( opState, true );\n\t\t\t\t\t\t\tthis._startCursorPosition.copy( this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement ) );\n\t\t\t\t\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\t\t\t\t\tthis.drawGrid();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.activateGizmos( false );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t//continue with pan operation\n\t\t\t\t\t\t\tthis._currentCursorPosition.copy( this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement ) );\n\t\t\t\t\t\t\tthis.applyTransformMatrix( this.pan( this._startCursorPosition, this._currentCursorPosition ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.ROTATE:\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tif ( restart ) {\n\n\t\t\t\t\t\t\t//switch to rotate operation\n\n\t\t\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\t\t\t\t\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\t\t\t\t\tthis.updateTbState( opState, true );\n\t\t\t\t\t\t\tthis._startCursorPosition.copy( this.unprojectOnTbSurface( this.object, _center.x, _center.y, this.domElement, this._tbRadius ) );\n\n\t\t\t\t\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\t\t\t\t\tthis.disposeGrid();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.activateGizmos( true );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t//continue with rotate operation\n\t\t\t\t\t\t\tthis._currentCursorPosition.copy( this.unprojectOnTbSurface( this.object, _center.x, _center.y, this.domElement, this._tbRadius ) );\n\n\t\t\t\t\t\t\tconst distance = this._startCursorPosition.distanceTo( this._currentCursorPosition );\n\t\t\t\t\t\t\tconst angle = this._startCursorPosition.angleTo( this._currentCursorPosition );\n\t\t\t\t\t\t\tconst amount = Math.max( distance / this._tbRadius, angle ) * this.rotateSpeed; //effective rotation angle\n\n\t\t\t\t\t\t\tthis.applyTransformMatrix( this.rotate( this.calculateRotationAxis( this._startCursorPosition, this._currentCursorPosition ), amount ) );\n\n\t\t\t\t\t\t\tif ( this.enableAnimations ) {\n\n\t\t\t\t\t\t\t\tthis._timePrev = this._timeCurrent;\n\t\t\t\t\t\t\t\tthis._timeCurrent = performance.now();\n\t\t\t\t\t\t\t\tthis._anglePrev = this._angleCurrent;\n\t\t\t\t\t\t\t\tthis._angleCurrent = amount;\n\t\t\t\t\t\t\t\tthis._cursorPosPrev.copy( this._cursorPosCurr );\n\t\t\t\t\t\t\t\tthis._cursorPosCurr.copy( this._currentCursorPosition );\n\t\t\t\t\t\t\t\tthis._wPrev = this._wCurr;\n\t\t\t\t\t\t\t\tthis._wCurr = this.calculateAngularSpeed( this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.SCALE:\n\n\t\t\t\t\tif ( this.enableZoom ) {\n\n\t\t\t\t\t\tif ( restart ) {\n\n\t\t\t\t\t\t\t//switch to zoom operation\n\n\t\t\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\t\t\t\t\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\t\t\t\t\tthis.updateTbState( opState, true );\n\t\t\t\t\t\t\tthis._startCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\t\t\t\t\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\n\t\t\t\t\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\t\t\t\t\tthis.disposeGrid();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.activateGizmos( false );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t//continue with zoom operation\n\t\t\t\t\t\t\tconst screenNotches = 8;\t//how many wheel notches corresponds to a full screen pan\n\t\t\t\t\t\t\tthis._currentCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\n\t\t\t\t\t\t\tconst movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n\n\t\t\t\t\t\t\tlet size = 1;\n\n\t\t\t\t\t\t\tif ( movement < 0 ) {\n\n\t\t\t\t\t\t\t\tsize = 1 / ( Math.pow( this.scaleFactor, - movement * screenNotches ) );\n\n\t\t\t\t\t\t\t} else if ( movement > 0 ) {\n\n\t\t\t\t\t\t\t\tsize = Math.pow( this.scaleFactor, movement * screenNotches );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis._v3_1.setFromMatrixPosition( this._gizmoMatrixState );\n\n\t\t\t\t\t\t\tthis.applyTransformMatrix( this.scale( size, this._v3_1 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.FOV:\n\n\t\t\t\t\tif ( this.enableZoom && this.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t\tif ( restart ) {\n\n\t\t\t\t\t\t\t//switch to fov operation\n\n\t\t\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\t\t\t\t\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\t\t\t\t\tthis.updateTbState( opState, true );\n\t\t\t\t\t\t\tthis._startCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\t\t\t\t\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\n\t\t\t\t\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\t\t\t\t\tthis.disposeGrid();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.activateGizmos( false );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t//continue with fov operation\n\t\t\t\t\t\t\tconst screenNotches = 8;\t//how many wheel notches corresponds to a full screen pan\n\t\t\t\t\t\t\tthis._currentCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\n\t\t\t\t\t\t\tconst movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n\n\t\t\t\t\t\t\tlet size = 1;\n\n\t\t\t\t\t\t\tif ( movement < 0 ) {\n\n\t\t\t\t\t\t\t\tsize = 1 / ( Math.pow( this.scaleFactor, - movement * screenNotches ) );\n\n\t\t\t\t\t\t\t} else if ( movement > 0 ) {\n\n\t\t\t\t\t\t\t\tsize = Math.pow( this.scaleFactor, movement * screenNotches );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis._v3_1.setFromMatrixPosition( this._cameraMatrixState );\n\t\t\t\t\t\t\tconst x = this._v3_1.distanceTo( this._gizmos.position );\n\t\t\t\t\t\t\tlet xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n\n\t\t\t\t\t\t\t//check min and max distance\n\t\t\t\t\t\t\txNew = MathUtils.clamp( xNew, this.minDistance, this.maxDistance );\n\n\t\t\t\t\t\t\tconst y = x * Math.tan( MathUtils.DEG2RAD * this._fovState * 0.5 );\n\n\t\t\t\t\t\t\t//calculate new fov\n\t\t\t\t\t\t\tlet newFov = MathUtils.RAD2DEG * ( Math.atan( y / xNew ) * 2 );\n\n\t\t\t\t\t\t\t//check min and max fov\n\t\t\t\t\t\t\tnewFov = MathUtils.clamp( newFov, this.minFov, this.maxFov );\n\n\t\t\t\t\t\t\tconst newDistance = y / Math.tan( MathUtils.DEG2RAD * ( newFov / 2 ) );\n\t\t\t\t\t\t\tsize = x / newDistance;\n\t\t\t\t\t\t\tthis._v3_2.setFromMatrixPosition( this._gizmoMatrixState );\n\n\t\t\t\t\t\t\tthis.setFov( newFov );\n\t\t\t\t\t\t\tthis.applyTransformMatrix( this.scale( size, this._v3_2, false ) );\n\n\t\t\t\t\t\t\t//adjusting distance\n\t\t\t\t\t\t\t_offset.copy( this._gizmos.position ).sub( this.object.position ).normalize().multiplyScalar( newDistance / x );\n\t\t\t\t\t\t\tthis._m4_1.makeTranslation( _offset.x, _offset.y, _offset.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n\tonSinglePanEnd() {\n\n\t\tif ( this._state == STATE.ROTATE ) {\n\n\n\t\t\tif ( ! this.enableRotate ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.enableAnimations ) {\n\n\t\t\t\t//perform rotation animation\n\t\t\t\tconst deltaTime = ( performance.now() - this._timeCurrent );\n\t\t\t\tif ( deltaTime < 120 ) {\n\n\t\t\t\t\tconst w = Math.abs( ( this._wPrev + this._wCurr ) / 2 );\n\n\t\t\t\t\tconst self = this;\n\t\t\t\t\tthis._animationId = window.requestAnimationFrame( function ( t ) {\n\n\t\t\t\t\t\tself.updateTbState( STATE.ANIMATION_ROTATE, true );\n\t\t\t\t\t\tconst rotationAxis = self.calculateRotationAxis( self._cursorPosPrev, self._cursorPosCurr );\n\n\t\t\t\t\t\tself.onRotationAnim( t, rotationAxis, Math.min( w, self.wMax ) );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//cursor has been standing still for over 120 ms since last movement\n\t\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\t\t\t\t\tthis.activateGizmos( false );\n\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\t\t\t\tthis.activateGizmos( false );\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t}\n\n\t\t} else if ( this._state == STATE.PAN || this._state == STATE.IDLE ) {\n\n\t\t\tthis.updateTbState( STATE.IDLE, false );\n\n\t\t\tif ( this.enableGrid ) {\n\n\t\t\t\tthis.disposeGrid();\n\n\t\t\t}\n\n\t\t\tthis.activateGizmos( false );\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\n\t\t}\n\n\t\tthis.dispatchEvent( _endEvent );\n\n\t}\n\n\tonDoubleTap( event ) {\n\n\t\tif ( this.enabled && this.enablePan && this.enableFocus && this.scene != null ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tthis.setCenter( event.clientX, event.clientY );\n\t\t\tconst hitP = this.unprojectOnObj( this.getCursorNDC( _center.x, _center.y, this.domElement ), this.object );\n\n\t\t\tif ( hitP != null && this.enableAnimations ) {\n\n\t\t\t\tconst self = this;\n\t\t\t\tif ( this._animationId != - 1 ) {\n\n\t\t\t\t\twindow.cancelAnimationFrame( this._animationId );\n\n\t\t\t\t}\n\n\t\t\t\tthis._timeStart = - 1;\n\t\t\t\tthis._animationId = window.requestAnimationFrame( function ( t ) {\n\n\t\t\t\t\tself.updateTbState( STATE.ANIMATION_FOCUS, true );\n\t\t\t\t\tself.onFocusAnim( t, hitP, self._cameraMatrixState, self._gizmoMatrixState );\n\n\t\t\t\t} );\n\n\t\t\t} else if ( hitP != null && ! this.enableAnimations ) {\n\n\t\t\t\tthis.updateTbState( STATE.FOCUS, true );\n\t\t\t\tthis.focus( hitP, this.scaleFactor );\n\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _endEvent );\n\n\t}\n\n\tonDoublePanStart() {\n\n\t\tif ( this.enabled && this.enablePan ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tthis.updateTbState( STATE.PAN, true );\n\n\t\t\tthis.setCenter( ( this._touchCurrent[ 0 ].clientX + this._touchCurrent[ 1 ].clientX ) / 2, ( this._touchCurrent[ 0 ].clientY + this._touchCurrent[ 1 ].clientY ) / 2 );\n\t\t\tthis._startCursorPosition.copy( this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement, true ) );\n\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\n\t\t\tthis.activateGizmos( false );\n\n\t\t}\n\n\t}\n\n\tonDoublePanMove() {\n\n\t\tif ( this.enabled && this.enablePan ) {\n\n\t\t\tthis.setCenter( ( this._touchCurrent[ 0 ].clientX + this._touchCurrent[ 1 ].clientX ) / 2, ( this._touchCurrent[ 0 ].clientY + this._touchCurrent[ 1 ].clientY ) / 2 );\n\n\t\t\tif ( this._state != STATE.PAN ) {\n\n\t\t\t\tthis.updateTbState( STATE.PAN, true );\n\t\t\t\tthis._startCursorPosition.copy( this._currentCursorPosition );\n\n\t\t\t}\n\n\t\t\tthis._currentCursorPosition.copy( this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement, true ) );\n\t\t\tthis.applyTransformMatrix( this.pan( this._startCursorPosition, this._currentCursorPosition, true ) );\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n\tonDoublePanEnd() {\n\n\t\tthis.updateTbState( STATE.IDLE, false );\n\t\tthis.dispatchEvent( _endEvent );\n\n\t}\n\n\tonRotateStart() {\n\n\t\tif ( this.enabled && this.enableRotate ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tthis.updateTbState( STATE.ZROTATE, true );\n\n\t\t\t//this._startFingerRotation = event.rotation;\n\n\t\t\tthis._startFingerRotation = this.getAngle( this._touchCurrent[ 1 ], this._touchCurrent[ 0 ] ) + this.getAngle( this._touchStart[ 1 ], this._touchStart[ 0 ] );\n\t\t\tthis._currentFingerRotation = this._startFingerRotation;\n\n\t\t\tthis.object.getWorldDirection( this._rotationAxis ); //rotation axis\n\n\t\t\tif ( ! this.enablePan && ! this.enableZoom ) {\n\n\t\t\t\tthis.activateGizmos( true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tonRotateMove() {\n\n\t\tif ( this.enabled && this.enableRotate ) {\n\n\t\t\tthis.setCenter( ( this._touchCurrent[ 0 ].clientX + this._touchCurrent[ 1 ].clientX ) / 2, ( this._touchCurrent[ 0 ].clientY + this._touchCurrent[ 1 ].clientY ) / 2 );\n\t\t\tlet rotationPoint;\n\n\t\t\tif ( this._state != STATE.ZROTATE ) {\n\n\t\t\t\tthis.updateTbState( STATE.ZROTATE, true );\n\t\t\t\tthis._startFingerRotation = this._currentFingerRotation;\n\n\t\t\t}\n\n\t\t\t//this._currentFingerRotation = event.rotation;\n\t\t\tthis._currentFingerRotation = this.getAngle( this._touchCurrent[ 1 ], this._touchCurrent[ 0 ] ) + this.getAngle( this._touchStart[ 1 ], this._touchStart[ 0 ] );\n\n\t\t\tif ( ! this.enablePan ) {\n\n\t\t\t\trotationPoint = new Vector3().setFromMatrixPosition( this._gizmoMatrixState );\n\n\t\t\t} else {\n\n\t\t\t\tthis._v3_2.setFromMatrixPosition( this._gizmoMatrixState );\n\t\t\t\trotationPoint = this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement ).applyQuaternion( this.object.quaternion ).multiplyScalar( 1 / this.object.zoom ).add( this._v3_2 );\n\n\t\t\t}\n\n\t\t\tconst amount = MathUtils.DEG2RAD * ( this._startFingerRotation - this._currentFingerRotation );\n\n\t\t\tthis.applyTransformMatrix( this.zRotate( rotationPoint, amount ) );\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n\tonRotateEnd() {\n\n\t\tthis.updateTbState( STATE.IDLE, false );\n\t\tthis.activateGizmos( false );\n\t\tthis.dispatchEvent( _endEvent );\n\n\t}\n\n\tonPinchStart() {\n\n\t\tif ( this.enabled && this.enableZoom ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\t\t\tthis.updateTbState( STATE.SCALE, true );\n\n\t\t\tthis._startFingerDistance = this.calculatePointersDistance( this._touchCurrent[ 0 ], this._touchCurrent[ 1 ] );\n\t\t\tthis._currentFingerDistance = this._startFingerDistance;\n\n\t\t\tthis.activateGizmos( false );\n\n\t\t}\n\n\t}\n\n\tonPinchMove() {\n\n\t\tif ( this.enabled && this.enableZoom ) {\n\n\t\t\tthis.setCenter( ( this._touchCurrent[ 0 ].clientX + this._touchCurrent[ 1 ].clientX ) / 2, ( this._touchCurrent[ 0 ].clientY + this._touchCurrent[ 1 ].clientY ) / 2 );\n\t\t\tconst minDistance = 12; //minimum distance between fingers (in css pixels)\n\n\t\t\tif ( this._state != STATE.SCALE ) {\n\n\t\t\t\tthis._startFingerDistance = this._currentFingerDistance;\n\t\t\t\tthis.updateTbState( STATE.SCALE, true );\n\n\t\t\t}\n\n\t\t\tthis._currentFingerDistance = Math.max( this.calculatePointersDistance( this._touchCurrent[ 0 ], this._touchCurrent[ 1 ] ), minDistance * this._devPxRatio );\n\t\t\tconst amount = this._currentFingerDistance / this._startFingerDistance;\n\n\t\t\tlet scalePoint;\n\n\t\t\tif ( ! this.enablePan ) {\n\n\t\t\t\tscalePoint = this._gizmos.position;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t\t\tscalePoint = this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement )\n\t\t\t\t\t\t.applyQuaternion( this.object.quaternion )\n\t\t\t\t\t\t.multiplyScalar( 1 / this.object.zoom )\n\t\t\t\t\t\t.add( this._gizmos.position );\n\n\t\t\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t\tscalePoint = this.unprojectOnTbPlane( this.object, _center.x, _center.y, this.domElement )\n\t\t\t\t\t\t.applyQuaternion( this.object.quaternion )\n\t\t\t\t\t\t.add( this._gizmos.position );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.applyTransformMatrix( this.scale( amount, scalePoint ) );\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n\tonPinchEnd() {\n\n\t\tthis.updateTbState( STATE.IDLE, false );\n\t\tthis.dispatchEvent( _endEvent );\n\n\t}\n\n\tonTriplePanStart() {\n\n\t\tif ( this.enabled && this.enableZoom ) {\n\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tthis.updateTbState( STATE.SCALE, true );\n\n\t\t\t//const center = event.center;\n\t\t\tlet clientX = 0;\n\t\t\tlet clientY = 0;\n\t\t\tconst nFingers = this._touchCurrent.length;\n\n\t\t\tfor ( let i = 0; i < nFingers; i ++ ) {\n\n\t\t\t\tclientX += this._touchCurrent[ i ].clientX;\n\t\t\t\tclientY += this._touchCurrent[ i ].clientY;\n\n\t\t\t}\n\n\t\t\tthis.setCenter( clientX / nFingers, clientY / nFingers );\n\n\t\t\tthis._startCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\t\t\tthis._currentCursorPosition.copy( this._startCursorPosition );\n\n\t\t}\n\n\t}\n\n\tonTriplePanMove() {\n\n\t\tif ( this.enabled && this.enableZoom ) {\n\n\t\t\t//\t  fov / 2\n\t\t\t//\t\t|\\\n\t\t\t//\t\t| \\\n\t\t\t//\t\t|  \\\n\t\t\t//\tx\t|\t\\\n\t\t\t//\t\t| \t \\\n\t\t\t//\t\t| \t  \\\n\t\t\t//\t\t| _ _ _\\\n\t\t\t//\t\t\ty\n\n\t\t\t//const center = event.center;\n\t\t\tlet clientX = 0;\n\t\t\tlet clientY = 0;\n\t\t\tconst nFingers = this._touchCurrent.length;\n\n\t\t\tfor ( let i = 0; i < nFingers; i ++ ) {\n\n\t\t\t\tclientX += this._touchCurrent[ i ].clientX;\n\t\t\t\tclientY += this._touchCurrent[ i ].clientY;\n\n\t\t\t}\n\n\t\t\tthis.setCenter( clientX / nFingers, clientY / nFingers );\n\n\t\t\tconst screenNotches = 8;\t//how many wheel notches corresponds to a full screen pan\n\t\t\tthis._currentCursorPosition.setY( this.getCursorNDC( _center.x, _center.y, this.domElement ).y * 0.5 );\n\n\t\t\tconst movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n\n\t\t\tlet size = 1;\n\n\t\t\tif ( movement < 0 ) {\n\n\t\t\t\tsize = 1 / ( Math.pow( this.scaleFactor, - movement * screenNotches ) );\n\n\t\t\t} else if ( movement > 0 ) {\n\n\t\t\t\tsize = Math.pow( this.scaleFactor, movement * screenNotches );\n\n\t\t\t}\n\n\t\t\tthis._v3_1.setFromMatrixPosition( this._cameraMatrixState );\n\t\t\tconst x = this._v3_1.distanceTo( this._gizmos.position );\n\t\t\tlet xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n\n\t\t\t//check min and max distance\n\t\t\txNew = MathUtils.clamp( xNew, this.minDistance, this.maxDistance );\n\n\t\t\tconst y = x * Math.tan( MathUtils.DEG2RAD * this._fovState * 0.5 );\n\n\t\t\t//calculate new fov\n\t\t\tlet newFov = MathUtils.RAD2DEG * ( Math.atan( y / xNew ) * 2 );\n\n\t\t\t//check min and max fov\n\t\t\tnewFov = MathUtils.clamp( newFov, this.minFov, this.maxFov );\n\n\t\t\tconst newDistance = y / Math.tan( MathUtils.DEG2RAD * ( newFov / 2 ) );\n\t\t\tsize = x / newDistance;\n\t\t\tthis._v3_2.setFromMatrixPosition( this._gizmoMatrixState );\n\n\t\t\tthis.setFov( newFov );\n\t\t\tthis.applyTransformMatrix( this.scale( size, this._v3_2, false ) );\n\n\t\t\t//adjusting distance\n\t\t\t_offset.copy( this._gizmos.position ).sub( this.object.position ).normalize().multiplyScalar( newDistance / x );\n\t\t\tthis._m4_1.makeTranslation( _offset.x, _offset.y, _offset.z );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n\tonTriplePanEnd() {\n\n\t\tthis.updateTbState( STATE.IDLE, false );\n\t\tthis.dispatchEvent( _endEvent );\n\t\t//this.dispatchEvent( _changeEvent );\n\n\t}\n\n\t/**\n\t * Set _center's x/y coordinates.\n\t *\n\t * @private\n\t * @param {number} clientX - The x coordinate.\n\t * @param {number} clientY - The y coordinate.\n\t */\n\tsetCenter( clientX, clientY ) {\n\n\t\t_center.x = clientX;\n\t\t_center.y = clientY;\n\n\t}\n\n\t/**\n\t * Set default mouse actions.\n\t *\n\t * @private\n\t */\n\tinitializeMouseActions() {\n\n\t\tthis.setMouseAction( 'PAN', 0, 'CTRL' );\n\t\tthis.setMouseAction( 'PAN', 2 );\n\n\t\tthis.setMouseAction( 'ROTATE', 0 );\n\n\t\tthis.setMouseAction( 'ZOOM', 'WHEEL' );\n\t\tthis.setMouseAction( 'ZOOM', 1 );\n\n\t\tthis.setMouseAction( 'FOV', 'WHEEL', 'SHIFT' );\n\t\tthis.setMouseAction( 'FOV', 1, 'SHIFT' );\n\n\n\t}\n\n\t/**\n\t * Compare two mouse actions.\n\t *\n\t * @private\n\t * @param {Object} action1 - The first mouse action.\n\t * @param {Object} action2 - The second mouse action.\n\t * @returns {boolean} `true` if action1 and action 2 are the same mouse action, `false` otherwise.\n\t */\n\tcompareMouseAction( action1, action2 ) {\n\n\t\tif ( action1.operation == action2.operation ) {\n\n\t\t\tif ( action1.mouse == action2.mouse && action1.key == action2.key ) {\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one.\n\t *\n\t * @param {'PAN'|'ROTATE'|'ZOOM'|'FOV'} operation - The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV').\n\t * @param {0|1|2|'WHEEL'} mouse - A mouse button (0, 1, 2) or 'WHEEL' for wheel notches.\n\t * @param {'CTRL'|'SHIFT'|null} [key=null] - The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed.\n\t * @returns {boolean} `true` if the mouse action has been successfully added, `false` otherwise.\n\t */\n\tsetMouseAction( operation, mouse, key = null ) {\n\n\t\tconst operationInput = [ 'PAN', 'ROTATE', 'ZOOM', 'FOV' ];\n\t\tconst mouseInput = [ 0, 1, 2, 'WHEEL' ];\n\t\tconst keyInput = [ 'CTRL', 'SHIFT', null ];\n\t\tlet state;\n\n\t\tif ( ! operationInput.includes( operation ) || ! mouseInput.includes( mouse ) || ! keyInput.includes( key ) ) {\n\n\t\t\t//invalid parameters\n\t\t\treturn false;\n\n\t\t}\n\n\t\tif ( mouse == 'WHEEL' ) {\n\n\t\t\tif ( operation != 'ZOOM' && operation != 'FOV' ) {\n\n\t\t\t\t//cannot associate 2D operation to 1D input\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tswitch ( operation ) {\n\n\t\t\tcase 'PAN':\n\n\t\t\t\tstate = STATE.PAN;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ROTATE':\n\n\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZOOM':\n\n\t\t\t\tstate = STATE.SCALE;\n\t\t\t\tbreak;\n\n\t\t\tcase 'FOV':\n\n\t\t\t\tstate = STATE.FOV;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst action = {\n\n\t\t\toperation: operation,\n\t\t\tmouse: mouse,\n\t\t\tkey: key,\n\t\t\tstate: state\n\n\t\t};\n\n\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\tif ( this.mouseActions[ i ].mouse == action.mouse && this.mouseActions[ i ].key == action.key ) {\n\n\t\t\t\tthis.mouseActions.splice( i, 1, action );\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.mouseActions.push( action );\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Remove a mouse action by specifying its mouse/key combination.\n\t *\n\t * @param {0|1|2|'WHEEL'} mouse - A mouse button (0, 1, 2) or 'WHEEL' for wheel notches.\n\t * @param {'CTRL'|'SHIFT'|null} key - The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed.\n\t * @returns {boolean} `true` if the operation has been successfully removed, `false` otherwise.\n\t */\n\tunsetMouseAction( mouse, key = null ) {\n\n\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\tif ( this.mouseActions[ i ].mouse == mouse && this.mouseActions[ i ].key == key ) {\n\n\t\t\t\tthis.mouseActions.splice( i, 1 );\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Return the operation associated to a mouse/keyboard combination.\n\t *\n\t * @private\n\t * @param {0|1|2|'WHEEL'} mouse - Mouse button index (0, 1, 2) or 'WHEEL' for wheel notches.\n\t * @param {'CTRL'|'SHIFT'|null} key - Keyboard modifier.\n\t * @returns {'PAN'|'ROTATE'|'ZOOM'|'FOV'|null} The operation if it has been found, `null` otherwise.\n\t */\n\tgetOpFromAction( mouse, key ) {\n\n\t\tlet action;\n\n\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\taction = this.mouseActions[ i ];\n\t\t\tif ( action.mouse == mouse && action.key == key ) {\n\n\t\t\t\treturn action.operation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( key != null ) {\n\n\t\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\t\taction = this.mouseActions[ i ];\n\t\t\t\tif ( action.mouse == mouse && action.key == null ) {\n\n\t\t\t\t\treturn action.operation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Get the operation associated to mouse and key combination and returns the corresponding FSA state.\n\t *\n\t * @private\n\t * @param {0|1|2} mouse - Mouse button index (0, 1, 2)\n\t * @param {'CTRL'|'SHIFT'|null} key - Keyboard modifier\n\t * @returns {?STATE} The FSA state obtained from the operation associated to mouse/keyboard combination.\n\t */\n\tgetOpStateFromAction( mouse, key ) {\n\n\t\tlet action;\n\n\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\taction = this.mouseActions[ i ];\n\t\t\tif ( action.mouse == mouse && action.key == key ) {\n\n\t\t\t\treturn action.state;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( key != null ) {\n\n\t\t\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\t\t\taction = this.mouseActions[ i ];\n\t\t\t\tif ( action.mouse == mouse && action.key == null ) {\n\n\t\t\t\t\treturn action.state;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Calculate the angle between two pointers.\n\t *\n\t * @private\n\t * @param {PointerEvent} p1 - The first pointer event.\n\t * @param {PointerEvent} p2 - The second pointer event.\n\t * @returns {number} The angle between two pointers in degrees.\n\t */\n\tgetAngle( p1, p2 ) {\n\n\t\treturn Math.atan2( p2.clientY - p1.clientY, p2.clientX - p1.clientX ) * 180 / Math.PI;\n\n\t}\n\n\t/**\n\t * Updates a PointerEvent inside current pointerevents array.\n\t *\n\t * @private\n\t * @param {PointerEvent} event - The pointer event.\n\t */\n\tupdateTouchEvent( event ) {\n\n\t\tfor ( let i = 0; i < this._touchCurrent.length; i ++ ) {\n\n\t\t\tif ( this._touchCurrent[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\tthis._touchCurrent.splice( i, 1, event );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Applies a transformation matrix, to the camera and gizmos.\n\t *\n\t * @private\n\t * @param {Object} transformation - Object containing matrices to apply to camera and gizmos.\n\t */\n\tapplyTransformMatrix( transformation ) {\n\n\t\tif ( transformation.camera != null ) {\n\n\t\t\tthis._m4_1.copy( this._cameraMatrixState ).premultiply( transformation.camera );\n\t\t\tthis._m4_1.decompose( this.object.position, this.object.quaternion, this.object.scale );\n\t\t\tthis.object.updateMatrix();\n\n\t\t\t//update camera up vector\n\t\t\tif ( this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE ) {\n\n\t\t\t\tthis.object.up.copy( this._upState ).applyQuaternion( this.object.quaternion );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( transformation.gizmos != null ) {\n\n\t\t\tthis._m4_1.copy( this._gizmoMatrixState ).premultiply( transformation.gizmos );\n\t\t\tthis._m4_1.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\t\t\tthis._gizmos.updateMatrix();\n\n\t\t}\n\n\t\tif ( this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS ) {\n\n\t\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\n\t\t\tif ( this.adjustNearFar ) {\n\n\t\t\t\tconst cameraDistance = this.object.position.distanceTo( this._gizmos.position );\n\n\t\t\t\tconst bb = new Box3();\n\t\t\t\tbb.setFromObject( this._gizmos );\n\t\t\t\tconst sphere = new Sphere();\n\t\t\t\tbb.getBoundingSphere( sphere );\n\n\t\t\t\tconst adjustedNearPosition = Math.max( this._nearPos0, sphere.radius + sphere.center.length() );\n\t\t\t\tconst regularNearPosition = cameraDistance - this._initialNear;\n\n\t\t\t\tconst minNearPos = Math.min( adjustedNearPosition, regularNearPosition );\n\t\t\t\tthis.object.near = cameraDistance - minNearPos;\n\n\n\t\t\t\tconst adjustedFarPosition = Math.min( this._farPos0, - sphere.radius + sphere.center.length() );\n\t\t\t\tconst regularFarPosition = cameraDistance - this._initialFar;\n\n\t\t\t\tconst minFarPos = Math.min( adjustedFarPosition, regularFarPosition );\n\t\t\t\tthis.object.far = cameraDistance - minFarPos;\n\n\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t} else {\n\n\t\t\t\tlet update = false;\n\n\t\t\t\tif ( this.object.near != this._initialNear ) {\n\n\t\t\t\t\tthis.object.near = this._initialNear;\n\t\t\t\t\tupdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.object.far != this._initialFar ) {\n\n\t\t\t\t\tthis.object.far = this._initialFar;\n\t\t\t\t\tupdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( update ) {\n\n\t\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calculates the angular speed.\n\t *\n\t * @private\n\t * @param {number} p0 - Position at t0.\n\t * @param {number} p1 - Position at t1.\n\t * @param {number} t0 - Initial time in milliseconds.\n\t * @param {number} t1 - Ending time in milliseconds.\n\t * @returns {number} The angular speed.\n\t */\n\tcalculateAngularSpeed( p0, p1, t0, t1 ) {\n\n\t\tconst s = p1 - p0;\n\t\tconst t = ( t1 - t0 ) / 1000;\n\t\tif ( t == 0 ) {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\treturn s / t;\n\n\t}\n\n\t/**\n\t * Calculates the distance between two pointers.\n\t *\n\t * @private\n\t * @param {PointerEvent} p0 - The first pointer.\n\t * @param {PointerEvent} p1 - The second pointer.\n\t * @returns {number} The distance between the two pointers.\n\t */\n\tcalculatePointersDistance( p0, p1 ) {\n\n\t\treturn Math.sqrt( Math.pow( p1.clientX - p0.clientX, 2 ) + Math.pow( p1.clientY - p0.clientY, 2 ) );\n\n\t}\n\n\t/**\n\t * Calculates the rotation axis as the vector perpendicular between two vectors.\n\t *\n\t * @private\n\t * @param {Vector3} vec1 - The first vector.\n\t * @param {Vector3} vec2 - The second vector.\n\t * @returns {Vector3} The normalized rotation axis.\n\t */\n\tcalculateRotationAxis( vec1, vec2 ) {\n\n\t\tthis._rotationMatrix.extractRotation( this._cameraMatrixState );\n\t\tthis._quat.setFromRotationMatrix( this._rotationMatrix );\n\n\t\tthis._rotationAxis.crossVectors( vec1, vec2 ).applyQuaternion( this._quat );\n\t\treturn this._rotationAxis.normalize().clone();\n\n\t}\n\n\t/**\n\t * Calculates the trackball radius so that gizmo's diameter will be 2/3 of the minimum side of the camera frustum.\n\t *\n\t * @private\n\t * @param {Camera} camera - The camera.\n\t * @returns {number} The trackball radius.\n\t */\n\tcalculateTbRadius( camera ) {\n\n\t\tconst distance = camera.position.distanceTo( this._gizmos.position );\n\n\t\tif ( camera.type == 'PerspectiveCamera' ) {\n\n\t\t\tconst halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\t\t\tconst halfFovH = Math.atan( ( camera.aspect ) * Math.tan( halfFovV ) ); //horizontal fov/2 in radians\n\t\t\treturn Math.tan( Math.min( halfFovV, halfFovH ) ) * distance * this.radiusFactor;\n\n\t\t} else if ( camera.type == 'OrthographicCamera' ) {\n\n\t\t\treturn Math.min( camera.top, camera.right ) * this.radiusFactor;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in.\n\t *\n\t * @private\n\t * @param {Vector3} point - The point of interest.\n\t * @param {number} size - Scale factor.\n\t * @param {number} [amount=1] - Amount of operation to be completed (used for focus animations, default is complete full operation).\n\t */\n\tfocus( point, size, amount = 1 ) {\n\n\t\t//move center of camera (along with gizmos) towards point of interest\n\t\t_offset.copy( point ).sub( this._gizmos.position ).multiplyScalar( amount );\n\t\tthis._translationMatrix.makeTranslation( _offset.x, _offset.y, _offset.z );\n\n\t\t_gizmoMatrixStateTemp.copy( this._gizmoMatrixState );\n\t\tthis._gizmoMatrixState.premultiply( this._translationMatrix );\n\t\tthis._gizmoMatrixState.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\n\t\t_cameraMatrixStateTemp.copy( this._cameraMatrixState );\n\t\tthis._cameraMatrixState.premultiply( this._translationMatrix );\n\t\tthis._cameraMatrixState.decompose( this.object.position, this.object.quaternion, this.object.scale );\n\n\t\t//apply zoom\n\t\tif ( this.enableZoom ) {\n\n\t\t\tthis.applyTransformMatrix( this.scale( size, this._gizmos.position ) );\n\n\t\t}\n\n\t\tthis._gizmoMatrixState.copy( _gizmoMatrixStateTemp );\n\t\tthis._cameraMatrixState.copy( _cameraMatrixStateTemp );\n\n\t}\n\n\t/**\n\t * Creates a grid if necessary and adds it to the scene.\n\t *\n\t * @private\n\t */\n\tdrawGrid() {\n\n\t\tif ( this.scene != null ) {\n\n\t\t\tconst color = 0x888888;\n\t\t\tconst multiplier = 3;\n\t\t\tlet size, divisions, maxLength, tick;\n\n\t\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t\tconst width = this.object.right - this.object.left;\n\t\t\t\tconst height = this.object.bottom - this.object.top;\n\n\t\t\t\tmaxLength = Math.max( width, height );\n\t\t\t\ttick = maxLength / 20;\n\n\t\t\t\tsize = maxLength / this.object.zoom * multiplier;\n\t\t\t\tdivisions = size / tick * this.object.zoom;\n\n\t\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\tconst distance = this.object.position.distanceTo( this._gizmos.position );\n\t\t\t\tconst halfFovV = MathUtils.DEG2RAD * this.object.fov * 0.5;\n\t\t\t\tconst halfFovH = Math.atan( ( this.object.aspect ) * Math.tan( halfFovV ) );\n\n\t\t\t\tmaxLength = Math.tan( Math.max( halfFovV, halfFovH ) ) * distance * 2;\n\t\t\t\ttick = maxLength / 20;\n\n\t\t\t\tsize = maxLength * multiplier;\n\t\t\t\tdivisions = size / tick;\n\n\t\t\t}\n\n\t\t\tif ( this._grid == null ) {\n\n\t\t\t\tthis._grid = new GridHelper( size, divisions, color, color );\n\t\t\t\tthis._grid.position.copy( this._gizmos.position );\n\t\t\t\tthis._gridPosition.copy( this._grid.position );\n\t\t\t\tthis._grid.quaternion.copy( this.object.quaternion );\n\t\t\t\tthis._grid.rotateX( Math.PI * 0.5 );\n\n\t\t\t\tthis.scene.add( this._grid );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this._animationId != - 1 ) {\n\n\t\t\twindow.cancelAnimationFrame( this._animationId );\n\n\t\t}\n\n\t\tthis.disconnect();\n\n\t\tif ( this.scene !== null ) this.scene.remove( this._gizmos );\n\t\tthis.disposeGrid();\n\n\t}\n\n\t/**\n\t * Removes the grid from the scene.\n\t */\n\tdisposeGrid() {\n\n\t\tif ( this._grid != null && this.scene != null ) {\n\n\t\t\tthis.scene.remove( this._grid );\n\t\t\tthis._grid = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Computes the easing out cubic function for ease out effect in animation.\n\t *\n\t * @private\n\t * @param {number} t - The absolute progress of the animation in the bound of `0` (beginning of the) and `1` (ending of animation).\n\t * @returns {number} Result of easing out cubic at time `t`.\n\t */\n\teaseOutCubic( t ) {\n\n\t\treturn 1 - Math.pow( 1 - t, 3 );\n\n\t}\n\n\t/**\n\t * Makes rotation gizmos more or less visible.\n\t *\n\t * @param {boolean} isActive - If set to `true`, gizmos are more visible.\n\t */\n\tactivateGizmos( isActive ) {\n\n\t\tconst gizmoX = this._gizmos.children[ 0 ];\n\t\tconst gizmoY = this._gizmos.children[ 1 ];\n\t\tconst gizmoZ = this._gizmos.children[ 2 ];\n\n\t\tif ( isActive ) {\n\n\t\t\tgizmoX.material.setValues( { opacity: 1 } );\n\t\t\tgizmoY.material.setValues( { opacity: 1 } );\n\t\t\tgizmoZ.material.setValues( { opacity: 1 } );\n\n\t\t} else {\n\n\t\t\tgizmoX.material.setValues( { opacity: 0.6 } );\n\t\t\tgizmoY.material.setValues( { opacity: 0.6 } );\n\t\t\tgizmoZ.material.setValues( { opacity: 0.6 } );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Calculates the cursor position in NDC.\n\t *\n\t * @private\n\t * @param {number} cursorX - Cursor horizontal coordinate within the canvas.\n\t * @param {number} cursorY - Cursor vertical coordinate within the canvas.\n\t * @param {HTMLElement} canvas - The canvas where the renderer draws its output.\n\t * @returns {Vector2} Cursor normalized position inside the canvas.\n\t */\n\tgetCursorNDC( cursorX, cursorY, canvas ) {\n\n\t\tconst canvasRect = canvas.getBoundingClientRect();\n\t\tthis._v2_1.setX( ( ( cursorX - canvasRect.left ) / canvasRect.width ) * 2 - 1 );\n\t\tthis._v2_1.setY( ( ( canvasRect.bottom - cursorY ) / canvasRect.height ) * 2 - 1 );\n\t\treturn this._v2_1.clone();\n\n\t}\n\n\t/**\n\t * Calculates the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas.\n\t *\n\t * @private\n\t * @param {number} cursorX - Cursor horizontal coordinate within the canvas.\n\t * @param {number} cursorY - Cursor vertical coordinate within the canvas.\n\t * @param {HTMLElement} canvas - The canvas where the renderer draws its output.\n\t * @returns {Vector2} Cursor position inside the canvas.\n\t */\n\tgetCursorPosition( cursorX, cursorY, canvas ) {\n\n\t\tthis._v2_1.copy( this.getCursorNDC( cursorX, cursorY, canvas ) );\n\t\tthis._v2_1.x *= ( this.object.right - this.object.left ) * 0.5;\n\t\tthis._v2_1.y *= ( this.object.top - this.object.bottom ) * 0.5;\n\t\treturn this._v2_1.clone();\n\n\t}\n\n\t/**\n\t * Sets the camera to be controlled.  Must be called in order to set a new camera to be controlled.\n\t *\n\t * @param {Camera} camera - The camera to be controlled.\n\t */\n\tsetCamera( camera ) {\n\n\t\tcamera.lookAt( this.target );\n\t\tcamera.updateMatrix();\n\n\t\t//setting state\n\t\tif ( camera.type == 'PerspectiveCamera' ) {\n\n\t\t\tthis._fov0 = camera.fov;\n\t\t\tthis._fovState = camera.fov;\n\n\t\t}\n\n\t\tthis._cameraMatrixState0.copy( camera.matrix );\n\t\tthis._cameraMatrixState.copy( this._cameraMatrixState0 );\n\t\tthis._cameraProjectionState.copy( camera.projectionMatrix );\n\t\tthis._zoom0 = camera.zoom;\n\t\tthis._zoomState = this._zoom0;\n\n\t\tthis._initialNear = camera.near;\n\t\tthis._nearPos0 = camera.position.distanceTo( this.target ) - camera.near;\n\t\tthis._nearPos = this._initialNear;\n\n\t\tthis._initialFar = camera.far;\n\t\tthis._farPos0 = camera.position.distanceTo( this.target ) - camera.far;\n\t\tthis._farPos = this._initialFar;\n\n\t\tthis._up0.copy( camera.up );\n\t\tthis._upState.copy( camera.up );\n\n\t\tthis.object = camera;\n\t\tthis.object.updateProjectionMatrix();\n\n\t\t//making gizmos\n\t\tthis._tbRadius = this.calculateTbRadius( camera );\n\t\tthis.makeGizmos( this.target, this._tbRadius );\n\n\t}\n\n\t/**\n\t * Sets gizmos visibility.\n\t *\n\t * @param {boolean} value - Value of gizmos visibility.\n\t */\n\tsetGizmosVisible( value ) {\n\n\t\tthis._gizmos.visible = value;\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t}\n\n\t/**\n\t * Sets gizmos radius factor and redraws gizmos.\n\t *\n\t * @param {number} value - Value of radius factor.\n\t */\n\tsetTbRadius( value ) {\n\n\t\tthis.radiusFactor = value;\n\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\n\t\tconst curve = new EllipseCurve( 0, 0, this._tbRadius, this._tbRadius );\n\t\tconst points = curve.getPoints( this._curvePts );\n\t\tconst curveGeometry = new BufferGeometry().setFromPoints( points );\n\n\n\t\tfor ( const gizmo in this._gizmos.children ) {\n\n\t\t\tthis._gizmos.children[ gizmo ].geometry = curveGeometry;\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t}\n\n\t/**\n\t * Creates the rotation gizmos matching trackball center and radius.\n\t *\n\t * @private\n\t * @param {Vector3} tbCenter - The trackball center.\n\t * @param {number} tbRadius - The trackball radius.\n\t */\n\tmakeGizmos( tbCenter, tbRadius ) {\n\n\t\tconst curve = new EllipseCurve( 0, 0, tbRadius, tbRadius );\n\t\tconst points = curve.getPoints( this._curvePts );\n\n\t\t//geometry\n\t\tconst curveGeometry = new BufferGeometry().setFromPoints( points );\n\n\t\t//material\n\t\tconst curveMaterialX = new LineBasicMaterial( { color: 0xff8080, fog: false, transparent: true, opacity: 0.6 } );\n\t\tconst curveMaterialY = new LineBasicMaterial( { color: 0x80ff80, fog: false, transparent: true, opacity: 0.6 } );\n\t\tconst curveMaterialZ = new LineBasicMaterial( { color: 0x8080ff, fog: false, transparent: true, opacity: 0.6 } );\n\n\t\t//line\n\t\tconst gizmoX = new Line( curveGeometry, curveMaterialX );\n\t\tconst gizmoY = new Line( curveGeometry, curveMaterialY );\n\t\tconst gizmoZ = new Line( curveGeometry, curveMaterialZ );\n\n\t\tconst rotation = Math.PI * 0.5;\n\t\tgizmoX.rotation.x = rotation;\n\t\tgizmoY.rotation.y = rotation;\n\n\n\t\t//setting state\n\t\tthis._gizmoMatrixState0.identity().setPosition( tbCenter );\n\t\tthis._gizmoMatrixState.copy( this._gizmoMatrixState0 );\n\n\t\tif ( this.object.zoom !== 1 ) {\n\n\t\t\t//adapt gizmos size to camera zoom\n\t\t\tconst size = 1 / this.object.zoom;\n\t\t\tthis._scaleMatrix.makeScale( size, size, size );\n\t\t\tthis._translationMatrix.makeTranslation( - tbCenter.x, - tbCenter.y, - tbCenter.z );\n\n\t\t\tthis._gizmoMatrixState.premultiply( this._translationMatrix ).premultiply( this._scaleMatrix );\n\t\t\tthis._translationMatrix.makeTranslation( tbCenter.x, tbCenter.y, tbCenter.z );\n\t\t\tthis._gizmoMatrixState.premultiply( this._translationMatrix );\n\n\t\t}\n\n\t\tthis._gizmoMatrixState.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\n\t\t//\n\n\t\tthis._gizmos.traverse( function ( object ) {\n\n\t\t\tif ( object.isLine ) {\n\n\t\t\t\tobject.geometry.dispose();\n\t\t\t\tobject.material.dispose();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis._gizmos.clear();\n\n\t\t//\n\n\t\tthis._gizmos.add( gizmoX );\n\t\tthis._gizmos.add( gizmoY );\n\t\tthis._gizmos.add( gizmoZ );\n\n\t}\n\n\t/**\n\t * Performs animation for focus operation.\n\t *\n\t * @private\n\t * @param {number} time - Instant in which this function is called as performance.now().\n\t * @param {Vector3} point - Point of interest for focus operation.\n\t * @param {Matrix4} cameraMatrix - Camera matrix.\n\t * @param {Matrix4} gizmoMatrix - Gizmos matrix.\n\t */\n\tonFocusAnim( time, point, cameraMatrix, gizmoMatrix ) {\n\n\t\tif ( this._timeStart == - 1 ) {\n\n\t\t\t//animation start\n\t\t\tthis._timeStart = time;\n\n\t\t}\n\n\t\tif ( this._state == STATE.ANIMATION_FOCUS ) {\n\n\t\t\tconst deltaTime = time - this._timeStart;\n\t\t\tconst animTime = deltaTime / this.focusAnimationTime;\n\n\t\t\tthis._gizmoMatrixState.copy( gizmoMatrix );\n\n\t\t\tif ( animTime >= 1 ) {\n\n\t\t\t\t//animation end\n\n\t\t\t\tthis._gizmoMatrixState.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\n\t\t\t\tthis.focus( point, this.scaleFactor );\n\n\t\t\t\tthis._timeStart = - 1;\n\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\t\t\t\tthis.activateGizmos( false );\n\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconst amount = this.easeOutCubic( animTime );\n\t\t\t\tconst size = ( ( 1 - amount ) + ( this.scaleFactor * amount ) );\n\n\t\t\t\tthis._gizmoMatrixState.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\t\t\t\tthis.focus( point, size, amount );\n\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\t\tconst self = this;\n\t\t\t\tthis._animationId = window.requestAnimationFrame( function ( t ) {\n\n\t\t\t\t\tself.onFocusAnim( t, point, cameraMatrix, gizmoMatrix.clone() );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t//interrupt animation\n\n\t\t\tthis._animationId = - 1;\n\t\t\tthis._timeStart = - 1;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs animation for rotation operation.\n\t *\n\t * @private\n\t * @param {number} time - Instant in which this function is called as performance.now().\n\t * @param {Vector3} rotationAxis - Rotation axis.\n\t * @param {number} w0 - Initial angular velocity.\n\t */\n\tonRotationAnim( time, rotationAxis, w0 ) {\n\n\t\tif ( this._timeStart == - 1 ) {\n\n\t\t\t//animation start\n\t\t\tthis._anglePrev = 0;\n\t\t\tthis._angleCurrent = 0;\n\t\t\tthis._timeStart = time;\n\n\t\t}\n\n\t\tif ( this._state == STATE.ANIMATION_ROTATE ) {\n\n\t\t\t//w = w0 + alpha * t\n\t\t\tconst deltaTime = ( time - this._timeStart ) / 1000;\n\t\t\tconst w = w0 + ( ( - this.dampingFactor ) * deltaTime );\n\n\t\t\tif ( w > 0 ) {\n\n\t\t\t\t//tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n\t\t\t\tthis._angleCurrent = 0.5 * ( - this.dampingFactor ) * Math.pow( deltaTime, 2 ) + w0 * deltaTime + 0;\n\t\t\t\tthis.applyTransformMatrix( this.rotate( rotationAxis, this._angleCurrent ) );\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\t\tconst self = this;\n\t\t\t\tthis._animationId = window.requestAnimationFrame( function ( t ) {\n\n\t\t\t\t\tself.onRotationAnim( t, rotationAxis, w0 );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\tthis._animationId = - 1;\n\t\t\t\tthis._timeStart = - 1;\n\n\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\t\t\t\tthis.activateGizmos( false );\n\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t//interrupt animation\n\n\t\t\tthis._animationId = - 1;\n\t\t\tthis._timeStart = - 1;\n\n\t\t\tif ( this._state != STATE.ROTATE ) {\n\n\t\t\t\tthis.activateGizmos( false );\n\t\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Performs pan operation moving camera between two points.\n\t *\n\t * @private\n\t * @param {Vector3} p0 - Initial point.\n\t * @param {Vector3} p1 - Ending point.\n\t * @param {boolean} [adjust=false] - If movement should be adjusted considering camera distance (Perspective only).\n\t * @returns {Object}\n\t */\n\tpan( p0, p1, adjust = false ) {\n\n\t\tconst movement = p0.clone().sub( p1 );\n\n\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t//adjust movement amount\n\t\t\tmovement.multiplyScalar( 1 / this.object.zoom );\n\n\t\t} else if ( this.object.isPerspectiveCamera && adjust ) {\n\n\t\t\t//adjust movement amount\n\t\t\tthis._v3_1.setFromMatrixPosition( this._cameraMatrixState0 );\t//camera's initial position\n\t\t\tthis._v3_2.setFromMatrixPosition( this._gizmoMatrixState0 );\t//gizmo's initial position\n\t\t\tconst distanceFactor = this._v3_1.distanceTo( this._v3_2 ) / this.object.position.distanceTo( this._gizmos.position );\n\t\t\tmovement.multiplyScalar( 1 / distanceFactor );\n\n\t\t}\n\n\t\tthis._v3_1.set( movement.x, movement.y, 0 ).applyQuaternion( this.object.quaternion );\n\n\t\tthis._m4_1.makeTranslation( this._v3_1.x, this._v3_1.y, this._v3_1.z );\n\n\t\tthis.setTransformationMatrices( this._m4_1, this._m4_1 );\n\t\treturn _transformation;\n\n\t}\n\n\t/**\n\t * Resets the controls.\n\t */\n\treset() {\n\n\t\tthis.target.copy( this._target0 );\n\t\tthis.object.zoom = this._zoom0;\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\tthis.object.fov = this._fov0;\n\n\t\t}\n\n\t\tthis.object.near = this._nearPos;\n\t\tthis.object.far = this._farPos;\n\t\tthis._cameraMatrixState.copy( this._cameraMatrixState0 );\n\t\tthis._cameraMatrixState.decompose( this.object.position, this.object.quaternion, this.object.scale );\n\t\tthis.object.up.copy( this._up0 );\n\n\t\tthis.object.updateMatrix();\n\t\tthis.object.updateProjectionMatrix();\n\n\t\tthis._gizmoMatrixState.copy( this._gizmoMatrixState0 );\n\t\tthis._gizmoMatrixState0.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\t\tthis._gizmos.updateMatrix();\n\n\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\t\tthis.makeGizmos( this._gizmos.position, this._tbRadius );\n\n\t\tthis.object.lookAt( this._gizmos.position );\n\n\t\tthis.updateTbState( STATE.IDLE, false );\n\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t}\n\n\t/**\n\t * Rotates the camera around an axis passing by trackball's center.\n\t *\n\t * @private\n\t * @param {Vector3} axis - Rotation axis.\n\t * @param {number} angle - Angle in radians.\n\t * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera.\n\t */\n\trotate( axis, angle ) {\n\n\t\tconst point = this._gizmos.position; //rotation center\n\t\tthis._translationMatrix.makeTranslation( - point.x, - point.y, - point.z );\n\t\tthis._rotationMatrix.makeRotationAxis( axis, - angle );\n\n\t\t//rotate camera\n\t\tthis._m4_1.makeTranslation( point.x, point.y, point.z );\n\t\tthis._m4_1.multiply( this._rotationMatrix );\n\t\tthis._m4_1.multiply( this._translationMatrix );\n\n\t\tthis.setTransformationMatrices( this._m4_1 );\n\n\t\treturn _transformation;\n\n\t}\n\n\t/**\n\t * Copy the current state to clipboard (as a readable JSON text).\n\t */\n\tcopyState() {\n\n\t\tlet state;\n\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\tstate = JSON.stringify( {\n\t\t\t\tarcballState: {\n\t\t\t\t\tcameraFar: this.object.far,\n\t\t\t\t\tcameraMatrix: this.object.matrix,\n\t\t\t\t\tcameraNear: this.object.near,\n\t\t\t\t\tcameraUp: this.object.up,\n\t\t\t\t\tcameraZoom: this.object.zoom,\n\t\t\t\t\tgizmoMatrix: this._gizmos.matrix,\n\t\t\t\t\ttarget: this.target\n\n\t\t\t\t}\n\t\t\t} );\n\n\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\tstate = JSON.stringify( {\n\t\t\t\tarcballState: {\n\t\t\t\t\tcameraFar: this.object.far,\n\t\t\t\t\tcameraFov: this.object.fov,\n\t\t\t\t\tcameraMatrix: this.object.matrix,\n\t\t\t\t\tcameraNear: this.object.near,\n\t\t\t\t\tcameraUp: this.object.up,\n\t\t\t\t\tcameraZoom: this.object.zoom,\n\t\t\t\t\tgizmoMatrix: this._gizmos.matrix,\n\t\t\t\t\ttarget: this.target\n\n\t\t\t\t}\n\t\t\t} );\n\n\t\t}\n\n\t\tnavigator.clipboard.writeText( state );\n\n\t}\n\n\t/**\n\t * Set the controls state from the clipboard, assumes that the clipboard stores a JSON\n\t * text as saved from `copyState()`.\n\t */\n\tpasteState() {\n\n\t\tconst self = this;\n\t\tnavigator.clipboard.readText().then( function resolved( value ) {\n\n\t\t\tself.setStateFromJSON( value );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Saves the current state of the control. This can later be recover with `reset()`.\n\t */\n\tsaveState() {\n\n\t\tthis.object.updateMatrix();\n\t\tthis._gizmos.updateMatrix();\n\n\t\tthis._target0.copy( this.target );\n\t\tthis._cameraMatrixState0.copy( this.object.matrix );\n\t\tthis._gizmoMatrixState0.copy( this._gizmos.matrix );\n\t\tthis._nearPos = this.object.near;\n\t\tthis._farPos = this.object.far;\n\t\tthis._zoom0 = this.object.zoom;\n\t\tthis._up0.copy( this.object.up );\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\tthis._fov0 = this.object.fov;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs uniform scale operation around a given point.\n\t *\n\t * @private\n\t * @param {number} size - Scale factor.\n\t * @param {Vector3} point - Point around which scale.\n\t * @param {boolean} scaleGizmos - If gizmos should be scaled (Perspective only).\n\t * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos.\n\t */\n\tscale( size, point, scaleGizmos = true ) {\n\n\t\t_scalePointTemp.copy( point );\n\t\tlet sizeInverse = 1 / size;\n\n\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t//camera zoom\n\t\t\tthis.object.zoom = this._zoomState;\n\t\t\tthis.object.zoom *= size;\n\n\t\t\t//check min and max zoom\n\t\t\tif ( this.object.zoom > this.maxZoom ) {\n\n\t\t\t\tthis.object.zoom = this.maxZoom;\n\t\t\t\tsizeInverse = this._zoomState / this.maxZoom;\n\n\t\t\t} else if ( this.object.zoom < this.minZoom ) {\n\n\t\t\t\tthis.object.zoom = this.minZoom;\n\t\t\t\tsizeInverse = this._zoomState / this.minZoom;\n\n\t\t\t}\n\n\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\tthis._v3_1.setFromMatrixPosition( this._gizmoMatrixState );\t//gizmos position\n\n\t\t\t//scale gizmos so they appear in the same spot having the same dimension\n\t\t\tthis._scaleMatrix.makeScale( sizeInverse, sizeInverse, sizeInverse );\n\t\t\tthis._translationMatrix.makeTranslation( - this._v3_1.x, - this._v3_1.y, - this._v3_1.z );\n\n\t\t\tthis._m4_2.makeTranslation( this._v3_1.x, this._v3_1.y, this._v3_1.z ).multiply( this._scaleMatrix );\n\t\t\tthis._m4_2.multiply( this._translationMatrix );\n\n\n\t\t\t//move camera and gizmos to obtain pinch effect\n\t\t\t_scalePointTemp.sub( this._v3_1 );\n\n\t\t\tconst amount = _scalePointTemp.clone().multiplyScalar( sizeInverse );\n\t\t\t_scalePointTemp.sub( amount );\n\n\t\t\tthis._m4_1.makeTranslation( _scalePointTemp.x, _scalePointTemp.y, _scalePointTemp.z );\n\t\t\tthis._m4_2.premultiply( this._m4_1 );\n\n\t\t\tthis.setTransformationMatrices( this._m4_1, this._m4_2 );\n\t\t\treturn _transformation;\n\n\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\tthis._v3_1.setFromMatrixPosition( this._cameraMatrixState );\n\t\t\tthis._v3_2.setFromMatrixPosition( this._gizmoMatrixState );\n\n\t\t\t//move camera\n\t\t\tlet distance = this._v3_1.distanceTo( _scalePointTemp );\n\t\t\tlet amount = distance - ( distance * sizeInverse );\n\n\t\t\t//check min and max distance\n\t\t\tconst newDistance = distance - amount;\n\t\t\tif ( newDistance < this.minDistance ) {\n\n\t\t\t\tsizeInverse = this.minDistance / distance;\n\t\t\t\tamount = distance - ( distance * sizeInverse );\n\n\t\t\t} else if ( newDistance > this.maxDistance ) {\n\n\t\t\t\tsizeInverse = this.maxDistance / distance;\n\t\t\t\tamount = distance - ( distance * sizeInverse );\n\n\t\t\t}\n\n\t\t\t_offset.copy( _scalePointTemp ).sub( this._v3_1 ).normalize().multiplyScalar( amount );\n\n\t\t\tthis._m4_1.makeTranslation( _offset.x, _offset.y, _offset.z );\n\n\n\t\t\tif ( scaleGizmos ) {\n\n\t\t\t\t//scale gizmos so they appear in the same spot having the same dimension\n\t\t\t\tconst pos = this._v3_2;\n\n\t\t\t\tdistance = pos.distanceTo( _scalePointTemp );\n\t\t\t\tamount = distance - ( distance * sizeInverse );\n\t\t\t\t_offset.copy( _scalePointTemp ).sub( this._v3_2 ).normalize().multiplyScalar( amount );\n\n\t\t\t\tthis._translationMatrix.makeTranslation( pos.x, pos.y, pos.z );\n\t\t\t\tthis._scaleMatrix.makeScale( sizeInverse, sizeInverse, sizeInverse );\n\n\t\t\t\tthis._m4_2.makeTranslation( _offset.x, _offset.y, _offset.z ).multiply( this._translationMatrix );\n\t\t\t\tthis._m4_2.multiply( this._scaleMatrix );\n\n\t\t\t\tthis._translationMatrix.makeTranslation( - pos.x, - pos.y, - pos.z );\n\n\t\t\t\tthis._m4_2.multiply( this._translationMatrix );\n\t\t\t\tthis.setTransformationMatrices( this._m4_1, this._m4_2 );\n\n\n\t\t\t} else {\n\n\t\t\t\tthis.setTransformationMatrices( this._m4_1 );\n\n\t\t\t}\n\n\t\t\treturn _transformation;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets camera fov.\n\t *\n\t * @private\n\t * @param {number} value - The FOV to be set.\n\t */\n\tsetFov( value ) {\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\tthis.object.fov = MathUtils.clamp( value, this.minFov, this.maxFov );\n\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets values in transformation object.\n\t *\n\t * @private\n\t * @param {Matrix4} [camera=null] - Transformation to be applied to the camera.\n\t * @param {Matrix4} [gizmos=null] - Transformation to be applied to gizmos.\n\t */\n\tsetTransformationMatrices( camera = null, gizmos = null ) {\n\n\t\tif ( camera != null ) {\n\n\t\t\tif ( _transformation.camera != null ) {\n\n\t\t\t\t_transformation.camera.copy( camera );\n\n\t\t\t} else {\n\n\t\t\t\t_transformation.camera = camera.clone();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_transformation.camera = null;\n\n\t\t}\n\n\t\tif ( gizmos != null ) {\n\n\t\t\tif ( _transformation.gizmos != null ) {\n\n\t\t\t\t_transformation.gizmos.copy( gizmos );\n\n\t\t\t} else {\n\n\t\t\t\t_transformation.gizmos = gizmos.clone();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_transformation.gizmos = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Rotates camera around its direction axis passing by a given point by a given angle.\n\t *\n\t * @private\n\t * @param {Vector3} point - The point where the rotation axis is passing trough.\n\t * @param {number} angle - Angle in radians.\n\t * @returns {Object} The computed transformation matrix.\n\t */\n\tzRotate( point, angle ) {\n\n\t\tthis._rotationMatrix.makeRotationAxis( this._rotationAxis, angle );\n\t\tthis._translationMatrix.makeTranslation( - point.x, - point.y, - point.z );\n\n\t\tthis._m4_1.makeTranslation( point.x, point.y, point.z );\n\t\tthis._m4_1.multiply( this._rotationMatrix );\n\t\tthis._m4_1.multiply( this._translationMatrix );\n\n\t\tthis._v3_1.setFromMatrixPosition( this._gizmoMatrixState ).sub( point );\t//vector from rotation center to gizmos position\n\t\tthis._v3_2.copy( this._v3_1 ).applyAxisAngle( this._rotationAxis, angle );\t//apply rotation\n\t\tthis._v3_2.sub( this._v3_1 );\n\n\t\tthis._m4_2.makeTranslation( this._v3_2.x, this._v3_2.y, this._v3_2.z );\n\n\t\tthis.setTransformationMatrices( this._m4_1, this._m4_2 );\n\t\treturn _transformation;\n\n\t}\n\n\t/**\n\t * Returns the raycaster that is used for user interaction. This object is shared between all\n\t * instances of `ArcballControls`.\n\t *\n\t * @returns {Raycaster} The internal raycaster.\n\t */\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\n\t/**\n\t * Unprojects the cursor on the 3D object surface.\n\t *\n\t * @private\n\t * @param {Vector2} cursor - Cursor coordinates in NDC.\n\t * @param {Camera} camera - Virtual camera.\n\t * @returns {?Vector3} The point of intersection with the model, if exist, null otherwise.\n\t */\n\tunprojectOnObj( cursor, camera ) {\n\n\t\tconst raycaster = this.getRaycaster();\n\t\traycaster.near = camera.near;\n\t\traycaster.far = camera.far;\n\t\traycaster.setFromCamera( cursor, camera );\n\n\t\tconst intersect = raycaster.intersectObjects( this.scene.children, true );\n\n\t\tfor ( let i = 0; i < intersect.length; i ++ ) {\n\n\t\t\tif ( intersect[ i ].object.uuid != this._gizmos.uuid && intersect[ i ].face != null ) {\n\n\t\t\t\treturn intersect[ i ].point.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Unproject the cursor on the trackball surface.\n\t *\n\t * @private\n\t * @param {Camera} camera - The virtual camera.\n\t * @param {number} cursorX - Cursor horizontal coordinate on screen.\n\t * @param {number} cursorY - Cursor vertical coordinate on screen.\n\t * @param {HTMLElement} canvas - The canvas where the renderer draws its output.\n\t * @param {number} tbRadius - The trackball radius.\n\t * @returns {Vector3} The unprojected point on the trackball surface.\n\t */\n\tunprojectOnTbSurface( camera, cursorX, cursorY, canvas, tbRadius ) {\n\n\t\tif ( camera.type == 'OrthographicCamera' ) {\n\n\t\t\tthis._v2_1.copy( this.getCursorPosition( cursorX, cursorY, canvas ) );\n\t\t\tthis._v3_1.set( this._v2_1.x, this._v2_1.y, 0 );\n\n\t\t\tconst x2 = Math.pow( this._v2_1.x, 2 );\n\t\t\tconst y2 = Math.pow( this._v2_1.y, 2 );\n\t\t\tconst r2 = Math.pow( this._tbRadius, 2 );\n\n\t\t\tif ( x2 + y2 <= r2 * 0.5 ) {\n\n\t\t\t\t//intersection with sphere\n\t\t\t\tthis._v3_1.setZ( Math.sqrt( r2 - ( x2 + y2 ) ) );\n\n\t\t\t} else {\n\n\t\t\t\t//intersection with hyperboloid\n\t\t\t\tthis._v3_1.setZ( ( r2 * 0.5 ) / ( Math.sqrt( x2 + y2 ) ) );\n\n\t\t\t}\n\n\t\t\treturn this._v3_1;\n\n\t\t} else if ( camera.type == 'PerspectiveCamera' ) {\n\n\t\t\t//unproject cursor on the near plane\n\t\t\tthis._v2_1.copy( this.getCursorNDC( cursorX, cursorY, canvas ) );\n\n\t\t\tthis._v3_1.set( this._v2_1.x, this._v2_1.y, - 1 );\n\t\t\tthis._v3_1.applyMatrix4( camera.projectionMatrixInverse );\n\n\t\t\tconst rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\t\t\tconst cameraGizmoDistance = camera.position.distanceTo( this._gizmos.position );\n\t\t\tconst radius2 = Math.pow( tbRadius, 2 );\n\n\t\t\t//\t  camera\n\t\t\t//\t\t|\\\n\t\t\t//\t\t| \\\n\t\t\t//\t\t|  \\\n\t\t\t//\th\t|\t\\\n\t\t\t//\t\t| \t \\\n\t\t\t//\t\t| \t  \\\n\t\t\t//\t_ _ | _ _ _\\ _ _  near plane\n\t\t\t//\t\t\tl\n\n\t\t\tconst h = this._v3_1.z;\n\t\t\tconst l = Math.sqrt( Math.pow( this._v3_1.x, 2 ) + Math.pow( this._v3_1.y, 2 ) );\n\n\t\t\tif ( l == 0 ) {\n\n\t\t\t\t//ray aligned with camera\n\t\t\t\trayDir.set( this._v3_1.x, this._v3_1.y, tbRadius );\n\t\t\t\treturn rayDir;\n\n\t\t\t}\n\n\t\t\tconst m = h / l;\n\t\t\tconst q = cameraGizmoDistance;\n\n\t\t\t/*\n\t\t\t * calculate intersection point between unprojected ray and trackball surface\n\t\t\t *|y = m * x + q\n\t\t\t *|x^2 + y^2 = r^2\n\t\t\t *\n\t\t\t * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n\t\t\t */\n\t\t\tlet a = Math.pow( m, 2 ) + 1;\n\t\t\tlet b = 2 * m * q;\n\t\t\tlet c = Math.pow( q, 2 ) - radius2;\n\t\t\tlet delta = Math.pow( b, 2 ) - ( 4 * a * c );\n\n\t\t\tif ( delta >= 0 ) {\n\n\t\t\t\t//intersection with sphere\n\t\t\t\tthis._v2_1.setX( ( - b - Math.sqrt( delta ) ) / ( 2 * a ) );\n\t\t\t\tthis._v2_1.setY( m * this._v2_1.x + q );\n\n\t\t\t\tconst angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n\t\t\t\tif ( angle >= 45 ) {\n\n\t\t\t\t\t//if angle between intersection point and X' axis is >= 45°, return that point\n\t\t\t\t\t//otherwise, calculate intersection point with hyperboloid\n\n\t\t\t\t\tconst rayLength = Math.sqrt( Math.pow( this._v2_1.x, 2 ) + Math.pow( ( cameraGizmoDistance - this._v2_1.y ), 2 ) );\n\t\t\t\t\trayDir.multiplyScalar( rayLength );\n\t\t\t\t\trayDir.z += cameraGizmoDistance;\n\t\t\t\t\treturn rayDir;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//intersection with hyperboloid\n\t\t\t/*\n\t\t\t *|y = m * x + q\n\t\t\t *|y = (1 / x) * (r^2 / 2)\n\t\t\t *\n\t\t\t * m * x^2 + q * x - r^2 / 2 = 0\n\t\t\t */\n\n\t\t\ta = m;\n\t\t\tb = q;\n\t\t\tc = - radius2 * 0.5;\n\t\t\tdelta = Math.pow( b, 2 ) - ( 4 * a * c );\n\t\t\tthis._v2_1.setX( ( - b - Math.sqrt( delta ) ) / ( 2 * a ) );\n\t\t\tthis._v2_1.setY( m * this._v2_1.x + q );\n\n\t\t\tconst rayLength = Math.sqrt( Math.pow( this._v2_1.x, 2 ) + Math.pow( ( cameraGizmoDistance - this._v2_1.y ), 2 ) );\n\n\t\t\trayDir.multiplyScalar( rayLength );\n\t\t\trayDir.z += cameraGizmoDistance;\n\t\t\treturn rayDir;\n\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Unprojects the cursor on the plane passing through the center of the trackball orthogonal to the camera.\n\t *\n\t * @private\n\t * @param {Camera} camera - The virtual camera.\n\t * @param {number} cursorX - Cursor horizontal coordinate on screen.\n\t * @param {number} cursorY - Cursor vertical coordinate on screen.\n\t * @param {HTMLElement} canvas - The canvas where the renderer draws its output.\n\t * @param {boolean} [initialDistance=false] - If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only).\n\t * @returns {Vector3} The unprojected point on the trackball plane.\n\t */\n\tunprojectOnTbPlane( camera, cursorX, cursorY, canvas, initialDistance = false ) {\n\n\t\tif ( camera.type == 'OrthographicCamera' ) {\n\n\t\t\tthis._v2_1.copy( this.getCursorPosition( cursorX, cursorY, canvas ) );\n\t\t\tthis._v3_1.set( this._v2_1.x, this._v2_1.y, 0 );\n\n\t\t\treturn this._v3_1.clone();\n\n\t\t} else if ( camera.type == 'PerspectiveCamera' ) {\n\n\t\t\tthis._v2_1.copy( this.getCursorNDC( cursorX, cursorY, canvas ) );\n\n\t\t\t//unproject cursor on the near plane\n\t\t\tthis._v3_1.set( this._v2_1.x, this._v2_1.y, - 1 );\n\t\t\tthis._v3_1.applyMatrix4( camera.projectionMatrixInverse );\n\n\t\t\tconst rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\t\t\t//\t  camera\n\t\t\t//\t\t|\\\n\t\t\t//\t\t| \\\n\t\t\t//\t\t|  \\\n\t\t\t//\th\t|\t\\\n\t\t\t//\t\t| \t \\\n\t\t\t//\t\t| \t  \\\n\t\t\t//\t_ _ | _ _ _\\ _ _  near plane\n\t\t\t//\t\t\tl\n\n\t\t\tconst h = this._v3_1.z;\n\t\t\tconst l = Math.sqrt( Math.pow( this._v3_1.x, 2 ) + Math.pow( this._v3_1.y, 2 ) );\n\t\t\tlet cameraGizmoDistance;\n\n\t\t\tif ( initialDistance ) {\n\n\t\t\t\tcameraGizmoDistance = this._v3_1.setFromMatrixPosition( this._cameraMatrixState0 ).distanceTo( this._v3_2.setFromMatrixPosition( this._gizmoMatrixState0 ) );\n\n\t\t\t} else {\n\n\t\t\t\tcameraGizmoDistance = camera.position.distanceTo( this._gizmos.position );\n\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * calculate intersection point between unprojected ray and the plane\n\t\t\t *|y = mx + q\n\t\t\t *|y = 0\n\t\t\t *\n\t\t\t * x = -q/m\n\t\t\t*/\n\t\t\tif ( l == 0 ) {\n\n\t\t\t\t//ray aligned with camera\n\t\t\t\trayDir.set( 0, 0, 0 );\n\t\t\t\treturn rayDir;\n\n\t\t\t}\n\n\t\t\tconst m = h / l;\n\t\t\tconst q = cameraGizmoDistance;\n\t\t\tconst x = - q / m;\n\n\t\t\tconst rayLength = Math.sqrt( Math.pow( q, 2 ) + Math.pow( x, 2 ) );\n\t\t\trayDir.multiplyScalar( rayLength );\n\t\t\trayDir.z = 0;\n\t\t\treturn rayDir;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates camera and gizmos state.\n\t *\n\t * @private\n\t */\n\tupdateMatrixState() {\n\n\t\t//update camera and gizmos state\n\t\tthis._cameraMatrixState.copy( this.object.matrix );\n\t\tthis._gizmoMatrixState.copy( this._gizmos.matrix );\n\n\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\tthis._cameraProjectionState.copy( this.object.projectionMatrix );\n\t\t\tthis.object.updateProjectionMatrix();\n\t\t\tthis._zoomState = this.object.zoom;\n\n\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\tthis._fovState = this.object.fov;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the trackball FSA.\n\t *\n\t * @private\n\t * @param {STATE} newState - New state of the FSA.\n\t * @param {boolean} updateMatrices - If matrices state should be updated.\n\t */\n\tupdateTbState( newState, updateMatrices ) {\n\n\t\tthis._state = newState;\n\t\tif ( updateMatrices ) {\n\n\t\t\tthis.updateMatrixState();\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this.target.equals( this._currentTarget ) === false ) {\n\n\t\t\tthis._gizmos.position.copy( this.target );\t//for correct radius calculation\n\t\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\t\t\tthis.makeGizmos( this.target, this._tbRadius );\n\t\t\tthis._currentTarget.copy( this.target );\n\n\t\t}\n\n\t\t//check min/max parameters\n\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t//check zoom\n\t\t\tif ( this.object.zoom > this.maxZoom || this.object.zoom < this.minZoom ) {\n\n\t\t\t\tconst newZoom = MathUtils.clamp( this.object.zoom, this.minZoom, this.maxZoom );\n\t\t\t\tthis.applyTransformMatrix( this.scale( newZoom / this.object.zoom, this._gizmos.position, true ) );\n\n\t\t\t}\n\n\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\t//check distance\n\t\t\tconst distance = this.object.position.distanceTo( this._gizmos.position );\n\n\t\t\tif ( distance > this.maxDistance + _EPS || distance < this.minDistance - _EPS ) {\n\n\t\t\t\tconst newDistance = MathUtils.clamp( distance, this.minDistance, this.maxDistance );\n\t\t\t\tthis.applyTransformMatrix( this.scale( newDistance / distance, this._gizmos.position ) );\n\t\t\t\tthis.updateMatrixState();\n\n\t\t\t}\n\n\t\t\t//check fov\n\t\t\tif ( this.object.fov < this.minFov || this.object.fov > this.maxFov ) {\n\n\t\t\t\tthis.object.fov = MathUtils.clamp( this.object.fov, this.minFov, this.maxFov );\n\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tconst oldRadius = this._tbRadius;\n\t\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\n\t\t\tif ( oldRadius < this._tbRadius - _EPS || oldRadius > this._tbRadius + _EPS ) {\n\n\t\t\t\tconst scale = ( this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z ) / 3;\n\t\t\t\tconst newRadius = this._tbRadius / scale;\n\t\t\t\tconst curve = new EllipseCurve( 0, 0, newRadius, newRadius );\n\t\t\t\tconst points = curve.getPoints( this._curvePts );\n\t\t\t\tconst curveGeometry = new BufferGeometry().setFromPoints( points );\n\n\t\t\t\tfor ( const gizmo in this._gizmos.children ) {\n\n\t\t\t\t\tthis._gizmos.children[ gizmo ].geometry = curveGeometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.object.lookAt( this._gizmos.position );\n\n\t}\n\n\tsetStateFromJSON( json ) {\n\n\t\tconst state = JSON.parse( json );\n\n\t\tif ( state.arcballState != undefined ) {\n\n\t\t\tthis.target.fromArray( state.arcballState.target );\n\n\t\t\tthis._cameraMatrixState.fromArray( state.arcballState.cameraMatrix.elements );\n\t\t\tthis._cameraMatrixState.decompose( this.object.position, this.object.quaternion, this.object.scale );\n\n\t\t\tthis.object.up.copy( state.arcballState.cameraUp );\n\t\t\tthis.object.near = state.arcballState.cameraNear;\n\t\t\tthis.object.far = state.arcballState.cameraFar;\n\n\t\t\tthis.object.zoom = state.arcballState.cameraZoom;\n\n\t\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\tthis.object.fov = state.arcballState.cameraFov;\n\n\t\t\t}\n\n\t\t\tthis._gizmoMatrixState.fromArray( state.arcballState.gizmoMatrix.elements );\n\t\t\tthis._gizmoMatrixState.decompose( this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale );\n\n\t\t\tthis.object.updateMatrix();\n\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\tthis._gizmos.updateMatrix();\n\n\t\t\tthis._tbRadius = this.calculateTbRadius( this.object );\n\t\t\tconst gizmoTmp = new Matrix4().copy( this._gizmoMatrixState0 );\n\t\t\tthis.makeGizmos( this._gizmos.position, this._tbRadius );\n\t\t\tthis._gizmoMatrixState0.copy( gizmoTmp );\n\n\t\t\tthis.object.lookAt( this._gizmos.position );\n\t\t\tthis.updateTbState( STATE.IDLE, false );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t}\n\n\t}\n\n}\n\n//listeners\n\nfunction onWindowResize() {\n\n\tconst scale = ( this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z ) / 3;\n\tthis._tbRadius = this.calculateTbRadius( this.object );\n\n\tconst newRadius = this._tbRadius / scale;\n\tconst curve = new EllipseCurve( 0, 0, newRadius, newRadius );\n\tconst points = curve.getPoints( this._curvePts );\n\tconst curveGeometry = new BufferGeometry().setFromPoints( points );\n\n\n\tfor ( const gizmo in this._gizmos.children ) {\n\n\t\tthis._gizmos.children[ gizmo ].geometry = curveGeometry;\n\n\t}\n\n\tthis.dispatchEvent( _changeEvent );\n\n}\n\nfunction onContextMenu( event ) {\n\n\tif ( ! this.enabled ) {\n\n\t\treturn;\n\n\t}\n\n\tfor ( let i = 0; i < this.mouseActions.length; i ++ ) {\n\n\t\tif ( this.mouseActions[ i ].mouse == 2 ) {\n\n\t\t\t//prevent only if button 2 is actually used\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\nfunction onPointerCancel() {\n\n\tthis._touchStart.splice( 0, this._touchStart.length );\n\tthis._touchCurrent.splice( 0, this._touchCurrent.length );\n\tthis._input = INPUT.NONE;\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( event.button == 0 && event.isPrimary ) {\n\n\t\tthis._downValid = true;\n\t\tthis._downEvents.push( event );\n\t\tthis._downStart = performance.now();\n\n\t} else {\n\n\t\tthis._downValid = false;\n\n\t}\n\n\tif ( event.pointerType == 'touch' && this._input != INPUT.CURSOR ) {\n\n\t\tthis._touchStart.push( event );\n\t\tthis._touchCurrent.push( event );\n\n\t\tswitch ( this._input ) {\n\n\t\t\tcase INPUT.NONE:\n\n\t\t\t\t//singleStart\n\t\t\t\tthis._input = INPUT.ONE_FINGER;\n\t\t\t\tthis.onSinglePanStart( event, 'ROTATE' );\n\n\t\t\t\twindow.addEventListener( 'pointermove', this._onPointerMove );\n\t\t\t\twindow.addEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.ONE_FINGER:\n\t\t\tcase INPUT.ONE_FINGER_SWITCHED:\n\n\t\t\t\t//doubleStart\n\t\t\t\tthis._input = INPUT.TWO_FINGER;\n\n\t\t\t\tthis.onRotateStart();\n\t\t\t\tthis.onPinchStart();\n\t\t\t\tthis.onDoublePanStart();\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.TWO_FINGER:\n\n\t\t\t\t//multipleStart\n\t\t\t\tthis._input = INPUT.MULT_FINGER;\n\t\t\t\tthis.onTriplePanStart( event );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} else if ( event.pointerType != 'touch' && this._input == INPUT.NONE ) {\n\n\t\tlet modifier = null;\n\n\t\tif ( event.ctrlKey || event.metaKey ) {\n\n\t\t\tmodifier = 'CTRL';\n\n\t\t} else if ( event.shiftKey ) {\n\n\t\t\tmodifier = 'SHIFT';\n\n\t\t}\n\n\t\tthis._mouseOp = this.getOpFromAction( event.button, modifier );\n\t\tif ( this._mouseOp != null ) {\n\n\t\t\twindow.addEventListener( 'pointermove', this._onPointerMove );\n\t\t\twindow.addEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\t//singleStart\n\t\t\tthis._input = INPUT.CURSOR;\n\t\t\tthis._button = event.button;\n\t\t\tthis.onSinglePanStart( event, this._mouseOp );\n\n\t\t}\n\n\t}\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( event.pointerType == 'touch' && this._input != INPUT.CURSOR ) {\n\n\t\tswitch ( this._input ) {\n\n\t\t\tcase INPUT.ONE_FINGER:\n\n\t\t\t\t//singleMove\n\t\t\t\tthis.updateTouchEvent( event );\n\n\t\t\t\tthis.onSinglePanMove( event, STATE.ROTATE );\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.ONE_FINGER_SWITCHED:\n\n\t\t\t\tconst movement = this.calculatePointersDistance( this._touchCurrent[ 0 ], event ) * this._devPxRatio;\n\n\t\t\t\tif ( movement >= this._switchSensibility ) {\n\n\t\t\t\t\t//singleMove\n\t\t\t\t\tthis._input = INPUT.ONE_FINGER;\n\t\t\t\t\tthis.updateTouchEvent( event );\n\n\t\t\t\t\tthis.onSinglePanStart( event, 'ROTATE' );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.TWO_FINGER:\n\n\t\t\t\t//rotate/pan/pinchMove\n\t\t\t\tthis.updateTouchEvent( event );\n\n\t\t\t\tthis.onRotateMove();\n\t\t\t\tthis.onPinchMove();\n\t\t\t\tthis.onDoublePanMove();\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.MULT_FINGER:\n\n\t\t\t\t//multMove\n\t\t\t\tthis.updateTouchEvent( event );\n\n\t\t\t\tthis.onTriplePanMove( event );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} else if ( event.pointerType != 'touch' && this._input == INPUT.CURSOR ) {\n\n\t\tlet modifier = null;\n\n\t\tif ( event.ctrlKey || event.metaKey ) {\n\n\t\t\tmodifier = 'CTRL';\n\n\t\t} else if ( event.shiftKey ) {\n\n\t\t\tmodifier = 'SHIFT';\n\n\t\t}\n\n\t\tconst mouseOpState = this.getOpStateFromAction( this._button, modifier );\n\n\t\tif ( mouseOpState != null ) {\n\n\t\t\tthis.onSinglePanMove( event, mouseOpState );\n\n\t\t}\n\n\t}\n\n\t//checkDistance\n\tif ( this._downValid ) {\n\n\t\tconst movement = this.calculatePointersDistance( this._downEvents[ this._downEvents.length - 1 ], event ) * this._devPxRatio;\n\t\tif ( movement > this._movementThreshold ) {\n\n\t\t\tthis._downValid = false;\n\n\t\t}\n\n\t}\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( event.pointerType == 'touch' && this._input != INPUT.CURSOR ) {\n\n\t\tconst nTouch = this._touchCurrent.length;\n\n\t\tfor ( let i = 0; i < nTouch; i ++ ) {\n\n\t\t\tif ( this._touchCurrent[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\tthis._touchCurrent.splice( i, 1 );\n\t\t\t\tthis._touchStart.splice( i, 1 );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tswitch ( this._input ) {\n\n\t\t\tcase INPUT.ONE_FINGER:\n\t\t\tcase INPUT.ONE_FINGER_SWITCHED:\n\n\t\t\t\t//singleEnd\n\t\t\t\twindow.removeEventListener( 'pointermove', this._onPointerMove );\n\t\t\t\twindow.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\t\tthis._input = INPUT.NONE;\n\t\t\t\tthis.onSinglePanEnd();\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.TWO_FINGER:\n\n\t\t\t\t//doubleEnd\n\t\t\t\tthis.onDoublePanEnd( event );\n\t\t\t\tthis.onPinchEnd( event );\n\t\t\t\tthis.onRotateEnd( event );\n\n\t\t\t\t//switching to singleStart\n\t\t\t\tthis._input = INPUT.ONE_FINGER_SWITCHED;\n\n\t\t\t\tbreak;\n\n\t\t\tcase INPUT.MULT_FINGER:\n\n\t\t\t\tif ( this._touchCurrent.length == 0 ) {\n\n\t\t\t\t\twindow.removeEventListener( 'pointermove', this._onPointerMove );\n\t\t\t\t\twindow.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\t\t\t//multCancel\n\t\t\t\t\tthis._input = INPUT.NONE;\n\t\t\t\t\tthis.onTriplePanEnd();\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} else if ( event.pointerType != 'touch' && this._input == INPUT.CURSOR ) {\n\n\t\twindow.removeEventListener( 'pointermove', this._onPointerMove );\n\t\twindow.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis._input = INPUT.NONE;\n\t\tthis.onSinglePanEnd();\n\t\tthis._button = - 1;\n\n\t}\n\n\tif ( event.isPrimary ) {\n\n\t\tif ( this._downValid ) {\n\n\t\t\tconst downTime = event.timeStamp - this._downEvents[ this._downEvents.length - 1 ].timeStamp;\n\n\t\t\tif ( downTime <= this._maxDownTime ) {\n\n\t\t\t\tif ( this._nclicks == 0 ) {\n\n\t\t\t\t\t//first valid click detected\n\t\t\t\t\tthis._nclicks = 1;\n\t\t\t\t\tthis._clickStart = performance.now();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst clickInterval = event.timeStamp - this._clickStart;\n\t\t\t\t\tconst movement = this.calculatePointersDistance( this._downEvents[ 1 ], this._downEvents[ 0 ] ) * this._devPxRatio;\n\n\t\t\t\t\tif ( clickInterval <= this._maxInterval && movement <= this._posThreshold ) {\n\n\t\t\t\t\t\t//second valid click detected\n\t\t\t\t\t\t//fire double tap and reset values\n\t\t\t\t\t\tthis._nclicks = 0;\n\t\t\t\t\t\tthis._downEvents.splice( 0, this._downEvents.length );\n\t\t\t\t\t\tthis.onDoubleTap( event );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t//new 'first click'\n\t\t\t\t\t\tthis._nclicks = 1;\n\t\t\t\t\t\tthis._downEvents.shift();\n\t\t\t\t\t\tthis._clickStart = performance.now();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis._downValid = false;\n\t\t\t\tthis._nclicks = 0;\n\t\t\t\tthis._downEvents.splice( 0, this._downEvents.length );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis._nclicks = 0;\n\t\t\tthis._downEvents.splice( 0, this._downEvents.length );\n\n\t\t}\n\n\t}\n\n}\n\nfunction onWheel( event ) {\n\n\tif ( this.enabled && this.enableZoom ) {\n\n\t\tlet modifier = null;\n\n\t\tif ( event.ctrlKey || event.metaKey ) {\n\n\t\t\tmodifier = 'CTRL';\n\n\t\t} else if ( event.shiftKey ) {\n\n\t\t\tmodifier = 'SHIFT';\n\n\t\t}\n\n\t\tconst mouseOp = this.getOpFromAction( 'WHEEL', modifier );\n\n\t\tif ( mouseOp != null ) {\n\n\t\t\tevent.preventDefault();\n\t\t\tthis.dispatchEvent( _startEvent );\n\n\t\t\tconst notchDeltaY = 125; //distance of one notch of mouse wheel\n\t\t\tlet sgn = event.deltaY / notchDeltaY;\n\n\t\t\tlet size = 1;\n\n\t\t\tif ( sgn > 0 ) {\n\n\t\t\t\tsize = 1 / this.scaleFactor;\n\n\t\t\t} else if ( sgn < 0 ) {\n\n\t\t\t\tsize = this.scaleFactor;\n\n\t\t\t}\n\n\t\t\tswitch ( mouseOp ) {\n\n\t\t\t\tcase 'ZOOM':\n\n\t\t\t\t\tthis.updateTbState( STATE.SCALE, true );\n\n\t\t\t\t\tif ( sgn > 0 ) {\n\n\t\t\t\t\t\tsize = 1 / ( Math.pow( this.scaleFactor, sgn ) );\n\n\t\t\t\t\t} else if ( sgn < 0 ) {\n\n\t\t\t\t\t\tsize = Math.pow( this.scaleFactor, - sgn );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.cursorZoom && this.enablePan ) {\n\n\t\t\t\t\t\tlet scalePoint;\n\n\t\t\t\t\t\tif ( this.object.isOrthographicCamera ) {\n\n\t\t\t\t\t\t\tscalePoint = this.unprojectOnTbPlane( this.object, event.clientX, event.clientY, this.domElement ).applyQuaternion( this.object.quaternion ).multiplyScalar( 1 / this.object.zoom ).add( this._gizmos.position );\n\n\t\t\t\t\t\t} else if ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t\t\tscalePoint = this.unprojectOnTbPlane( this.object, event.clientX, event.clientY, this.domElement ).applyQuaternion( this.object.quaternion ).add( this._gizmos.position );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.applyTransformMatrix( this.scale( size, scalePoint ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.applyTransformMatrix( this.scale( size, this._gizmos.position ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._grid != null ) {\n\n\t\t\t\t\t\tthis.disposeGrid();\n\t\t\t\t\t\tthis.drawGrid();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\n\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'FOV':\n\n\t\t\t\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t\tthis.updateTbState( STATE.FOV, true );\n\n\n\t\t\t\t\t\t//Vertigo effect\n\n\t\t\t\t\t\t//\t  fov / 2\n\t\t\t\t\t\t//\t\t|\\\n\t\t\t\t\t\t//\t\t| \\\n\t\t\t\t\t\t//\t\t|  \\\n\t\t\t\t\t\t//\tx\t|\t\\\n\t\t\t\t\t\t//\t\t| \t \\\n\t\t\t\t\t\t//\t\t| \t  \\\n\t\t\t\t\t\t//\t\t| _ _ _\\\n\t\t\t\t\t\t//\t\t\ty\n\n\t\t\t\t\t\t//check for iOs shift shortcut\n\t\t\t\t\t\tif ( event.deltaX != 0 ) {\n\n\t\t\t\t\t\t\tsgn = event.deltaX / notchDeltaY;\n\n\t\t\t\t\t\t\tsize = 1;\n\n\t\t\t\t\t\t\tif ( sgn > 0 ) {\n\n\t\t\t\t\t\t\t\tsize = 1 / ( Math.pow( this.scaleFactor, sgn ) );\n\n\t\t\t\t\t\t\t} else if ( sgn < 0 ) {\n\n\t\t\t\t\t\t\t\tsize = Math.pow( this.scaleFactor, - sgn );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._v3_1.setFromMatrixPosition( this._cameraMatrixState );\n\t\t\t\t\t\tconst x = this._v3_1.distanceTo( this._gizmos.position );\n\t\t\t\t\t\tlet xNew = x / size;\t//distance between camera and gizmos if scale(size, scalepoint) would be performed\n\n\t\t\t\t\t\t//check min and max distance\n\t\t\t\t\t\txNew = MathUtils.clamp( xNew, this.minDistance, this.maxDistance );\n\n\t\t\t\t\t\tconst y = x * Math.tan( MathUtils.DEG2RAD * this.object.fov * 0.5 );\n\n\t\t\t\t\t\t//calculate new fov\n\t\t\t\t\t\tlet newFov = MathUtils.RAD2DEG * ( Math.atan( y / xNew ) * 2 );\n\n\t\t\t\t\t\t//check min and max fov\n\t\t\t\t\t\tif ( newFov > this.maxFov ) {\n\n\t\t\t\t\t\t\tnewFov = this.maxFov;\n\n\t\t\t\t\t\t} else if ( newFov < this.minFov ) {\n\n\t\t\t\t\t\t\tnewFov = this.minFov;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newDistance = y / Math.tan( MathUtils.DEG2RAD * ( newFov / 2 ) );\n\t\t\t\t\t\tsize = x / newDistance;\n\n\t\t\t\t\t\tthis.setFov( newFov );\n\t\t\t\t\t\tthis.applyTransformMatrix( this.scale( size, this._gizmos.position, false ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this._grid != null ) {\n\n\t\t\t\t\t\tthis.disposeGrid();\n\t\t\t\t\t\tthis.drawGrid();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.updateTbState( STATE.IDLE, false );\n\n\t\t\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\t\t\tthis.dispatchEvent( _endEvent );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { ArcballControls };\n"],"mappings":"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","ignoreList":[]}