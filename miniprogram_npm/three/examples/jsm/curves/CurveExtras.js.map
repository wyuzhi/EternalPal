{"version":3,"file":"node_modules/three/examples/jsm/curves/CurveExtras.js","names":["Curve","Vector3","GrannyKnot","getPoint","t","optionalTarget","point","Math","PI","x","cos","sin","y","z","set","multiplyScalar","HeartCurve","constructor","scale","super","this","pow","VivianiCurve","a","KnotCurve","HelixCurve","t2","TrefoilKnot","TorusKnot","CinquefoilKnot","TrefoilPolynomialKnot","scaleTo","FigureEightPolynomialKnot","DecoratedTorusKnot4a","DecoratedTorusKnot4b","fi","DecoratedTorusKnot5a","DecoratedTorusKnot5c"],"sources":["node_modules/three/examples/jsm/curves/CurveExtras.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3\n} from 'three';\n\n/**\n * A bunch of parametric curves\n *\n * Formulas collected from various sources\n * http://mathworld.wolfram.com/HeartCurve.html\n * http://en.wikipedia.org/wiki/Viviani%27s_curve\n * http://www.mi.sanu.ac.rs/vismath/taylorapril2011/Taylor.pdf\n * https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\n/**\n * A Granny Knot curve.\n *\n * @augments Curve\n * @three_import import { GrannyKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass GrannyKnot extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = 2 * Math.PI * t;\n\n\t\tconst x = - 0.22 * Math.cos( t ) - 1.28 * Math.sin( t ) - 0.44 * Math.cos( 3 * t ) - 0.78 * Math.sin( 3 * t );\n\t\tconst y = - 0.1 * Math.cos( 2 * t ) - 0.27 * Math.sin( 2 * t ) + 0.38 * Math.cos( 4 * t ) + 0.46 * Math.sin( 4 * t );\n\t\tconst z = 0.7 * Math.cos( 3 * t ) - 0.4 * Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( 20 );\n\n\t}\n\n}\n\n/**\n * A heart curve.\n *\n * @augments Curve\n * @three_import import { HeartCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HeartCurve extends Curve {\n\n\t/**\n\t * Constructs a new heart curve.\n\t *\n\t * @param {number} [scale=5] - The curve's scale.\n\t */\n\tconstructor( scale = 5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 5\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= 2 * Math.PI;\n\n\t\tconst x = 16 * Math.pow( Math.sin( t ), 3 );\n\t\tconst y = 13 * Math.cos( t ) - 5 * Math.cos( 2 * t ) - 2 * Math.cos( 3 * t ) - Math.cos( 4 * t );\n\t\tconst z = 0;\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Viviani curve.\n *\n * @augments Curve\n * @three_import import { VivianiCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass VivianiCurve extends Curve {\n\n\t/**\n\t * Constructs a new Viviani curve.\n\t *\n\t * @param {number} [scale=70] - The curve's scale.\n\t */\n\tconstructor( scale = 70 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 70\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = t * 4 * Math.PI; // normalized to 0..1\n\t\tconst a = this.scale / 2;\n\n\t\tconst x = a * ( 1 + Math.cos( t ) );\n\t\tconst y = a * Math.sin( t );\n\t\tconst z = 2 * a * Math.sin( t / 2 );\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A knot curve.\n *\n * @augments Curve\n * @three_import import { KnotCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass KnotCurve extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= 2 * Math.PI;\n\n\t\tconst R = 10;\n\t\tconst s = 50;\n\n\t\tconst x = s * Math.sin( t );\n\t\tconst y = Math.cos( t ) * ( R + s * Math.cos( t ) );\n\t\tconst z = Math.sin( t ) * ( R + s * Math.cos( t ) );\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A helix curve.\n *\n * @augments Curve\n * @three_import import { HelixCurve } from 'three/addons/curves/CurveExtras.js';\n */\nclass HelixCurve extends Curve {\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 30; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 30;\n\n\t\tconst x = Math.cos( t2 ) * a;\n\t\tconst y = Math.sin( t2 ) * a;\n\t\tconst z = b * t;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n/**\n * A Trefoil Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilKnot extends Curve {\n\n\t/**\n\t * Constructs a new Trefoil Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( 3 * t ) ) * Math.cos( 2 * t );\n\t\tconst y = ( 2 + Math.cos( 3 * t ) ) * Math.sin( 2 * t );\n\t\tconst z = Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A torus knot.\n *\n * @augments Curve\n * @three_import import { TorusKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TorusKnot extends Curve {\n\n\t/**\n\t * Constructs a new torus knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst p = 3;\n\t\tconst q = 4;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( q * t ) ) * Math.cos( p * t );\n\t\tconst y = ( 2 + Math.cos( q * t ) ) * Math.sin( p * t );\n\t\tconst z = Math.sin( q * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Cinquefoil Knot.\n *\n * @augments Curve\n * @three_import import { CinquefoilKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass CinquefoilKnot extends Curve {\n\n\t/**\n\t * Constructs a new Cinquefoil Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst p = 2;\n\t\tconst q = 5;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = ( 2 + Math.cos( q * t ) ) * Math.cos( p * t );\n\t\tconst y = ( 2 + Math.cos( q * t ) ) * Math.sin( p * t );\n\t\tconst z = Math.sin( q * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Trefoil Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { TrefoilPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass TrefoilPolynomialKnot extends Curve {\n\n\t/**\n\t * Constructs a new Trefoil Polynomial Knot.\n\t *\n\t * @param {number} [scale=10] - The curve's scale.\n\t */\n\tconstructor( scale = 10 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = t * 4 - 2;\n\n\t\tconst x = Math.pow( t, 3 ) - 3 * t;\n\t\tconst y = Math.pow( t, 4 ) - 4 * t * t;\n\t\tconst z = 1 / 5 * Math.pow( t, 5 ) - 2 * t;\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\nfunction scaleTo( x, y, t ) {\n\n\tconst r = y - x;\n\treturn t * r + x;\n\n}\n\n/**\n * A Figure Eight Polynomial Knot.\n *\n * @augments Curve\n * @three_import import { FigureEightPolynomialKnot } from 'three/addons/curves/CurveExtras.js';\n */\nclass FigureEightPolynomialKnot extends Curve {\n\n\t/**\n\t * Constructs a new Figure Eight Polynomial Knot.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 1 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = scaleTo( - 4, 4, t );\n\n\t\tconst x = 2 / 5 * t * ( t * t - 7 ) * ( t * t - 10 );\n\t\tconst y = Math.pow( t, 4 ) - 13 * t * t;\n\t\tconst z = 1 / 10 * t * ( t * t - 4 ) * ( t * t - 9 ) * ( t * t - 12 );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 4a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4a extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 4a.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt *= Math.PI * 2;\n\n\t\tconst x = Math.cos( 2 * t ) * ( 1 + 0.6 * ( Math.cos( 5 * t ) + 0.75 * Math.cos( 10 * t ) ) );\n\t\tconst y = Math.sin( 2 * t ) * ( 1 + 0.6 * ( Math.cos( 5 * t ) + 0.75 * Math.cos( 10 * t ) ) );\n\t\tconst z = 0.35 * Math.sin( 5 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 4b.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot4b } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot4b extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 4b.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 2 * fi ) * ( 1 + 0.45 * Math.cos( 3 * fi ) + 0.4 * Math.cos( 9 * fi ) );\n\t\tconst y = Math.sin( 2 * fi ) * ( 1 + 0.45 * Math.cos( 3 * fi ) + 0.4 * Math.cos( 9 * fi ) );\n\t\tconst z = 0.2 * Math.sin( 9 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 5a.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5a } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5a extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 5a.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 3 * fi ) * ( 1 + 0.3 * Math.cos( 5 * fi ) + 0.5 * Math.cos( 10 * fi ) );\n\t\tconst y = Math.sin( 3 * fi ) * ( 1 + 0.3 * Math.cos( 5 * fi ) + 0.5 * Math.cos( 10 * fi ) );\n\t\tconst z = 0.2 * Math.sin( 20 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\n/**\n * A Decorated Torus Knot 5c.\n *\n * @augments Curve\n * @three_import import { DecoratedTorusKnot5c } from 'three/addons/curves/CurveExtras.js';\n */\nclass DecoratedTorusKnot5c extends Curve {\n\n\t/**\n\t * Constructs a new Decorated Torus Knot 5c.\n\t *\n\t * @param {number} [scale=1] - The curve's scale.\n\t */\n\tconstructor( scale = 40 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The curve's scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 40\n\t\t */\n\t\tthis.scale = scale;\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst fi = t * Math.PI * 2;\n\n\t\tconst x = Math.cos( 4 * fi ) * ( 1 + 0.5 * ( Math.cos( 5 * fi ) + 0.4 * Math.cos( 20 * fi ) ) );\n\t\tconst y = Math.sin( 4 * fi ) * ( 1 + 0.5 * ( Math.cos( 5 * fi ) + 0.4 * Math.cos( 20 * fi ) ) );\n\t\tconst z = 0.35 * Math.sin( 15 * fi );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( this.scale );\n\n\t}\n\n}\n\nexport {\n\tGrannyKnot,\n\tHeartCurve,\n\tVivianiCurve,\n\tKnotCurve,\n\tHelixCurve,\n\tTrefoilKnot,\n\tTorusKnot,\n\tCinquefoilKnot,\n\tTrefoilPolynomialKnot,\n\tFigureEightPolynomialKnot,\n\tDecoratedTorusKnot4a,\n\tDecoratedTorusKnot4b,\n\tDecoratedTorusKnot5a,\n\tDecoratedTorusKnot5c\n};\n"],"mappings":"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","ignoreList":[]}