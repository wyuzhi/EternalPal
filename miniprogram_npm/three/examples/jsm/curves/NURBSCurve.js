import{Curve,Vector3,Vector4}from"three";import*as NURBSUtils from"../curves/NURBSUtils.js";class NURBSCurve extends Curve{constructor(t,s,o,n,e){super();const r=s?s.length-1:0,i=o?o.length:0;this.degree=t,this.knots=s,this.controlPoints=[],this.startKnot=n||0,this.endKnot=e||r;for(let t=0;t<i;++t){const s=o[t];this.controlPoints[t]=new Vector4(s.x,s.y,s.z,s.w)}}getPoint(t,s=new Vector3){const o=s,n=this.knots[this.startKnot]+t*(this.knots[this.endKnot]-this.knots[this.startKnot]),e=NURBSUtils.calcBSplinePoint(this.degree,this.knots,this.controlPoints,n);return 1!==e.w&&e.divideScalar(e.w),o.set(e.x,e.y,e.z)}getTangent(t,s=new Vector3){const o=s,n=this.knots[0]+t*(this.knots[this.knots.length-1]-this.knots[0]),e=NURBSUtils.calcNURBSDerivatives(this.degree,this.knots,this.controlPoints,n,1);return o.copy(e[1]).normalize(),o}toJSON(){const t=super.toJSON();return t.degree=this.degree,t.knots=[...this.knots],t.controlPoints=this.controlPoints.map((t=>t.toArray())),t.startKnot=this.startKnot,t.endKnot=this.endKnot,t}fromJSON(t){return super.fromJSON(t),this.degree=t.degree,this.knots=[...t.knots],this.controlPoints=t.controlPoints.map((t=>new Vector4(t[0],t[1],t[2],t[3]))),this.startKnot=t.startKnot,this.endKnot=t.endKnot,this}}export{NURBSCurve};
//# sourceMappingURL=NURBSCurve.js.map