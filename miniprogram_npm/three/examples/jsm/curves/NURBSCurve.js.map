{"version":3,"file":"node_modules/three/examples/jsm/curves/NURBSCurve.js","names":["Curve","Vector3","Vector4","NURBSUtils","NURBSCurve","constructor","degree","knots","controlPoints","startKnot","endKnot","super","knotsLength","length","pointsLength","this","i","point","x","y","z","w","getPoint","t","optionalTarget","u","hpoint","calcBSplinePoint","divideScalar","set","getTangent","tangent","ders","calcNURBSDerivatives","copy","normalize","toJSON","data","map","p","toArray","fromJSON","json"],"sources":["node_modules/three/examples/jsm/curves/NURBSCurve.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3,\n\tVector4\n} from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * This class represents a NURBS curve.\n *\n * Implementation is based on `(x, y [, z=0 [, w=1]])` control points with `w=weight`.\n *\n * @augments Curve\n * @three_import import { NURBSCurve } from 'three/addons/curves/NURBSCurve.js';\n */\nclass NURBSCurve extends Curve {\n\n\t/**\n\t * Constructs a new NURBS curve.\n\t *\n\t * @param {number} degree - The NURBS degree.\n\t * @param {Array<number>} knots - The knots as a flat array of numbers.\n\t * @param {Array<Vector2|Vector3|Vector4>} controlPoints - An array holding control points.\n\t * @param {number} [startKnot] - Index of the start knot into the `knots` array.\n\t * @param {number} [endKnot] - Index of the end knot into the `knots` array.\n\t */\n\tconstructor( degree, knots, controlPoints, startKnot, endKnot ) {\n\n\t\tsuper();\n\n\t\tconst knotsLength = knots ? knots.length - 1 : 0;\n\t\tconst pointsLength = controlPoints ? controlPoints.length : 0;\n\n\t\t/**\n\t\t * The NURBS degree.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.degree = degree;\n\n\t\t/**\n\t\t * The knots as a flat array of numbers.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.knots = knots;\n\n\t\t/**\n\t\t * An array of control points.\n\t\t *\n\t\t * @type {Array<Vector4>}\n\t\t */\n\t\tthis.controlPoints = [];\n\n\t\t/**\n\t\t * Index of the start knot into the `knots` array.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.startKnot = startKnot || 0;\n\n\t\t/**\n\t\t * Index of the end knot into the `knots` array.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.endKnot = endKnot || knotsLength;\n\n\t\tfor ( let i = 0; i < pointsLength; ++ i ) {\n\n\t\t\t// ensure Vector4 for control points\n\t\t\tconst point = controlPoints[ i ];\n\t\t\tthis.controlPoints[ i ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\n\n\t\t// following results in (wx, wy, wz, w) homogeneous point\n\t\tconst hpoint = NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\n\n\t\tif ( hpoint.w !== 1.0 ) {\n\n\t\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n\t\t\thpoint.divideScalar( hpoint.w );\n\n\t\t}\n\n\t\treturn point.set( hpoint.x, hpoint.y, hpoint.z );\n\n\t}\n\n\t/**\n\t * Returns a unit vector tangent for the given interpolation factor.\n\t *\n\t * @param {number} t - The interpolation factor.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The tangent vector.\n\t */\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\tconst tangent = optionalTarget;\n\n\t\tconst u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\n\t\tconst ders = NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\n\t\ttangent.copy( ders[ 1 ] ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.degree = this.degree;\n\t\tdata.knots = [ ...this.knots ];\n\t\tdata.controlPoints = this.controlPoints.map( p => p.toArray() );\n\t\tdata.startKnot = this.startKnot;\n\t\tdata.endKnot = this.endKnot;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.degree = json.degree;\n\t\tthis.knots = [ ...json.knots ];\n\t\tthis.controlPoints = json.controlPoints.map( p => new Vector4( p[ 0 ], p[ 1 ], p[ 2 ], p[ 3 ] ) );\n\t\tthis.startKnot = json.startKnot;\n\t\tthis.endKnot = json.endKnot;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { NURBSCurve };\n"],"mappings":"OACCA,MACAC,QACAC,YACM,kBACKC,eAAgB,0BAU5B,MAAMC,mBAAmBJ,MAWxB,WAAAK,CAAaC,EAAQC,EAAOC,EAAeC,EAAWC,GAErDC,QAEA,MAAMC,EAAcL,EAAQA,EAAMM,OAAS,EAAI,EACzCC,EAAeN,EAAgBA,EAAcK,OAAS,EAO5DE,KAAKT,OAASA,EAOdS,KAAKR,MAAQA,EAObQ,KAAKP,cAAgB,GAOrBO,KAAKN,UAAYA,GAAa,EAO9BM,KAAKL,QAAUA,GAAWE,EAE1B,IAAM,IAAII,EAAI,EAAGA,EAAIF,IAAiBE,EAAI,CAGzC,MAAMC,EAAQT,EAAeQ,GAC7BD,KAAKP,cAAeQ,GAAM,IAAId,QAASe,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,EAAGH,EAAMI,EAEzE,CAED,CASA,QAAAC,CAAUC,EAAGC,EAAiB,IAAIvB,SAEjC,MAAMgB,EAAQO,EAERC,EAAIV,KAAKR,MAAOQ,KAAKN,WAAcc,GAAMR,KAAKR,MAAOQ,KAAKL,SAAYK,KAAKR,MAAOQ,KAAKN,YAGvFiB,EAASvB,WAAWwB,iBAAkBZ,KAAKT,OAAQS,KAAKR,MAAOQ,KAAKP,cAAeiB,GASzF,OAPkB,IAAbC,EAAOL,GAGXK,EAAOE,aAAcF,EAAOL,GAItBJ,EAAMY,IAAKH,EAAOR,EAAGQ,EAAOP,EAAGO,EAAON,EAE9C,CASA,UAAAU,CAAYP,EAAGC,EAAiB,IAAIvB,SAEnC,MAAM8B,EAAUP,EAEVC,EAAIV,KAAKR,MAAO,GAAMgB,GAAMR,KAAKR,MAAOQ,KAAKR,MAAMM,OAAS,GAAME,KAAKR,MAAO,IAC9EyB,EAAO7B,WAAW8B,qBAAsBlB,KAAKT,OAAQS,KAAKR,MAAOQ,KAAKP,cAAeiB,EAAG,GAG9F,OAFAM,EAAQG,KAAMF,EAAM,IAAMG,YAEnBJ,CAER,CAEA,MAAAK,GAEC,MAAMC,EAAO1B,MAAMyB,SAQnB,OANAC,EAAK/B,OAASS,KAAKT,OACnB+B,EAAK9B,MAAQ,IAAKQ,KAAKR,OACvB8B,EAAK7B,cAAgBO,KAAKP,cAAc8B,KAAKC,GAAKA,EAAEC,YACpDH,EAAK5B,UAAYM,KAAKN,UACtB4B,EAAK3B,QAAUK,KAAKL,QAEb2B,CAER,CAEA,QAAAI,CAAUC,GAUT,OARA/B,MAAM8B,SAAUC,GAEhB3B,KAAKT,OAASoC,EAAKpC,OACnBS,KAAKR,MAAQ,IAAKmC,EAAKnC,OACvBQ,KAAKP,cAAgBkC,EAAKlC,cAAc8B,KAAKC,GAAK,IAAIrC,QAASqC,EAAG,GAAKA,EAAG,GAAKA,EAAG,GAAKA,EAAG,MAC1FxB,KAAKN,UAAYiC,EAAKjC,UACtBM,KAAKL,QAAUgC,EAAKhC,QAEbK,IAER,SAIQX","ignoreList":[]}