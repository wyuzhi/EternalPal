import{Vector3,Vector4}from"three";function findSpan(t,c,n){const e=n.length-t-1;if(c>=n[e])return e-1;if(c<=n[t])return t;let l=t,o=e,i=Math.floor((l+o)/2);for(;c<n[i]||c>=n[i+1];)c<n[i]?o=i:l=i,i=Math.floor((l+o)/2);return i}function calcBasisFunctions(t,c,n,e){const l=[],o=[],i=[];l[0]=1;for(let r=1;r<=n;++r){o[r]=c-e[t+1-r],i[r]=e[t+r]-c;let n=0;for(let t=0;t<r;++t){const c=i[t+1],e=o[r-t],a=l[t]/(c+e);l[t]=n+c*a,n=e*a}l[r]=n}return l}function calcBSplinePoint(t,c,n,e){const l=findSpan(t,e,c),o=calcBasisFunctions(l,e,t,c),i=new Vector4(0,0,0,0);for(let c=0;c<=t;++c){const e=n[l-t+c],r=o[c],a=e.w*r;i.x+=e.x*a,i.y+=e.y*a,i.z+=e.z*a,i.w+=e.w*r}return i}function calcBasisFunctionDerivatives(t,c,n,e,l){const o=[];for(let t=0;t<=n;++t)o[t]=0;const i=[];for(let t=0;t<=e;++t)i[t]=o.slice(0);const r=[];for(let t=0;t<=n;++t)r[t]=o.slice(0);r[0][0]=1;const a=o.slice(0),s=o.slice(0);for(let e=1;e<=n;++e){a[e]=c-l[t+1-e],s[e]=l[t+e]-c;let n=0;for(let t=0;t<e;++t){const c=s[t+1],l=a[e-t];r[e][t]=c+l;const o=r[t][e-1]/r[e][t];r[t][e]=n+c*o,n=l*o}r[e][e]=n}for(let t=0;t<=n;++t)i[0][t]=r[t][n];for(let t=0;t<=n;++t){let c=0,l=1;const a=[];for(let t=0;t<=n;++t)a[t]=o.slice(0);a[0][0]=1;for(let o=1;o<=e;++o){let e=0;const s=t-o,f=n-o;t>=o&&(a[l][0]=a[c][0]/r[f+1][s],e=a[l][0]*r[s][f]);const u=t-1<=f?o-1:n-t;for(let t=s>=-1?1:-s;t<=u;++t)a[l][t]=(a[c][t]-a[c][t-1])/r[f+1][s+t],e+=a[l][t]*r[s+t][f];t<=f&&(a[l][o]=-a[c][o-1]/r[f+1][t],e+=a[l][o]*r[t][f]),i[o][t]=e;const v=c;c=l,l=v}}let f=n;for(let t=1;t<=e;++t){for(let c=0;c<=n;++c)i[t][c]*=f;f*=n-t}return i}function calcBSplineDerivatives(t,c,n,e,l){const o=l<t?l:t,i=[],r=findSpan(t,e,c),a=calcBasisFunctionDerivatives(r,e,t,o,c),s=[];for(let t=0;t<n.length;++t){const c=n[t].clone(),e=c.w;c.x*=e,c.y*=e,c.z*=e,s[t]=c}for(let c=0;c<=o;++c){const n=s[r-t].clone().multiplyScalar(a[c][0]);for(let e=1;e<=t;++e)n.add(s[r-t+e].clone().multiplyScalar(a[c][e]));i[c]=n}for(let t=o+1;t<=l+1;++t)i[t]=new Vector4(0,0,0);return i}function calcKoverI(t,c){let n=1;for(let c=2;c<=t;++c)n*=c;let e=1;for(let t=2;t<=c;++t)e*=t;for(let n=2;n<=t-c;++n)e*=n;return n/e}function calcRationalCurveDerivatives(t){const c=t.length,n=[],e=[];for(let l=0;l<c;++l){const c=t[l];n[l]=new Vector3(c.x,c.y,c.z),e[l]=c.w}const l=[];for(let t=0;t<c;++t){const c=n[t].clone();for(let n=1;n<=t;++n)c.sub(l[t-n].clone().multiplyScalar(calcKoverI(t,n)*e[n]));l[t]=c.divideScalar(e[0])}return l}function calcNURBSDerivatives(t,c,n,e,l){return calcRationalCurveDerivatives(calcBSplineDerivatives(t,c,n,e,l))}function calcSurfacePoint(t,c,n,e,l,o,i,r){const a=findSpan(t,o,n),s=findSpan(c,i,e),f=calcBasisFunctions(a,o,t,n),u=calcBasisFunctions(s,i,c,e),v=[];for(let n=0;n<=c;++n){v[n]=new Vector4(0,0,0,0);for(let e=0;e<=t;++e){const o=l[a-t+e][s-c+n].clone(),i=o.w;o.x*=i,o.y*=i,o.z*=i,v[n].add(o.multiplyScalar(f[e]))}}const S=new Vector4(0,0,0,0);for(let t=0;t<=c;++t)S.add(v[t].multiplyScalar(u[t]));S.divideScalar(S.w),r.set(S.x,S.y,S.z)}function calcVolumePoint(t,c,n,e,l,o,i,r,a,s,f){const u=findSpan(t,r,e),v=findSpan(c,a,l),S=findSpan(n,s,o),d=calcBasisFunctions(u,r,t,e),p=calcBasisFunctions(v,a,c,l),B=calcBasisFunctions(S,s,n,o),w=[];for(let e=0;e<=n;++e){w[e]=[];for(let l=0;l<=c;++l){w[e][l]=new Vector4(0,0,0,0);for(let o=0;o<=t;++o){const r=i[u-t+o][v-c+l][S-n+e].clone(),a=r.w;r.x*=a,r.y*=a,r.z*=a,w[e][l].add(r.multiplyScalar(d[o]))}}}const y=new Vector4(0,0,0,0);for(let t=0;t<=n;++t)for(let n=0;n<=c;++n)y.add(w[t][n].multiplyScalar(B[t]).multiplyScalar(p[n]));y.divideScalar(y.w),f.set(y.x,y.y,y.z)}export{findSpan,calcBasisFunctions,calcBSplinePoint,calcBasisFunctionDerivatives,calcBSplineDerivatives,calcKoverI,calcRationalCurveDerivatives,calcNURBSDerivatives,calcSurfacePoint,calcVolumePoint};
//# sourceMappingURL=NURBSUtils.js.map