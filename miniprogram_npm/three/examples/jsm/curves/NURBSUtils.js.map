{"version":3,"file":"node_modules/three/examples/jsm/curves/NURBSUtils.js","names":["Vector3","Vector4","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set","calcVolumePoint","W","wspan","Nw","m"],"sources":["node_modules/three/examples/jsm/curves/NURBSUtils.js"],"sourcesContent":["import {\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * @module NURBSUtils\n * @three_import import * as NURBSUtils from 'three/addons/curves/NURBSUtils.js';\n */\n\n/**\n * Finds knot vector span.\n *\n * @param {number} p - The degree.\n * @param {number} u - The parametric value.\n * @param {Array<number>} U - The knot vector.\n * @return {number} The span.\n */\nfunction findSpan( p, u, U ) {\n\n\tconst n = U.length - p - 1;\n\n\tif ( u >= U[ n ] ) {\n\n\t\treturn n - 1;\n\n\t}\n\n\tif ( u <= U[ p ] ) {\n\n\t\treturn p;\n\n\t}\n\n\tlet low = p;\n\tlet high = n;\n\tlet mid = Math.floor( ( low + high ) / 2 );\n\n\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\tif ( u < U[ mid ] ) {\n\n\t\t\thigh = mid;\n\n\t\t} else {\n\n\t\t\tlow = mid;\n\n\t\t}\n\n\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t}\n\n\treturn mid;\n\n}\n\n/**\n * Calculates basis functions. See The NURBS Book, page 70, algorithm A2.2.\n *\n * @param {number} span - The span in which `u` lies.\n * @param {number} u - The parametric value.\n * @param {number} p - The degree.\n * @param {Array<number>} U - The knot vector.\n * @return {Array<number>} Array[p+1] with basis functions values.\n */\nfunction calcBasisFunctions( span, u, p, U ) {\n\n\tconst N = [];\n\tconst left = [];\n\tconst right = [];\n\tN[ 0 ] = 1.0;\n\n\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\tright[ j ] = U[ span + j ] - u;\n\n\t\tlet saved = 0.0;\n\n\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\tconst rv = right[ r + 1 ];\n\t\t\tconst lv = left[ j - r ];\n\t\t\tconst temp = N[ r ] / ( rv + lv );\n\t\t\tN[ r ] = saved + rv * temp;\n\t\t\tsaved = lv * temp;\n\n\t\t}\n\n\t\tN[ j ] = saved;\n\n\t}\n\n\treturn N;\n\n}\n\n/**\n * Calculates B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n *\n * @param {number} p - The degree of the B-Spline.\n * @param {Array<number>} U - The knot vector.\n * @param {Array<Vector4>} P - The control points\n * @param {number} u - The parametric point.\n * @return {Vector4} The point for given `u`.\n */\nfunction calcBSplinePoint( p, U, P, u ) {\n\n\tconst span = findSpan( p, u, U );\n\tconst N = calcBasisFunctions( span, u, p, U );\n\tconst C = new Vector4( 0, 0, 0, 0 );\n\n\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\tconst point = P[ span - p + j ];\n\t\tconst Nj = N[ j ];\n\t\tconst wNj = point.w * Nj;\n\t\tC.x += point.x * wNj;\n\t\tC.y += point.y * wNj;\n\t\tC.z += point.z * wNj;\n\t\tC.w += point.w * Nj;\n\n\t}\n\n\treturn C;\n\n}\n\n/**\n * Calculates basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n *\n * @param {number} span - The span in which `u` lies.\n * @param {number} u - The parametric point.\n * @param {number} p - The degree.\n * @param {number} n - number of derivatives to calculate\n * @param {Array<number>} U - The knot vector.\n * @return {Array<Array<number>>} An array[n+1][p+1] with basis functions derivatives.\n */\nfunction calcBasisFunctionDerivatives( span, u, p, n, U ) {\n\n\tconst zeroArr = [];\n\tfor ( let i = 0; i <= p; ++ i )\n\t\tzeroArr[ i ] = 0.0;\n\n\tconst ders = [];\n\n\tfor ( let i = 0; i <= n; ++ i )\n\t\tders[ i ] = zeroArr.slice( 0 );\n\n\tconst ndu = [];\n\n\tfor ( let i = 0; i <= p; ++ i )\n\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\tndu[ 0 ][ 0 ] = 1.0;\n\n\tconst left = zeroArr.slice( 0 );\n\tconst right = zeroArr.slice( 0 );\n\n\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\tright[ j ] = U[ span + j ] - u;\n\n\t\tlet saved = 0.0;\n\n\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\tconst rv = right[ r + 1 ];\n\t\t\tconst lv = left[ j - r ];\n\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\tconst temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\tsaved = lv * temp;\n\n\t\t}\n\n\t\tndu[ j ][ j ] = saved;\n\n\t}\n\n\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t}\n\n\tfor ( let r = 0; r <= p; ++ r ) {\n\n\t\tlet s1 = 0;\n\t\tlet s2 = 1;\n\n\t\tconst a = [];\n\t\tfor ( let i = 0; i <= p; ++ i ) {\n\n\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t}\n\n\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\t\tlet d = 0.0;\n\t\t\tconst rk = r - k;\n\t\t\tconst pk = p - k;\n\n\t\t\tif ( r >= k ) {\n\n\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t}\n\n\t\t\tconst j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\tconst j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\tfor ( let j = j1; j <= j2; ++ j ) {\n\n\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t}\n\n\t\t\tif ( r <= pk ) {\n\n\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t}\n\n\t\t\tders[ k ][ r ] = d;\n\n\t\t\tconst j = s1;\n\t\t\ts1 = s2;\n\t\t\ts2 = j;\n\n\t\t}\n\n\t}\n\n\tlet r = p;\n\n\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\t\tders[ k ][ j ] *= r;\n\n\t\t}\n\n\t\tr *= p - k;\n\n\t}\n\n\treturn ders;\n\n}\n\n/**\n * Calculates derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n *\n * @param {number} p - The degree.\n * @param {Array<number>} U - The knot vector.\n * @param {Array<Vector4>} P - The control points\n * @param {number} u - The parametric point.\n * @param {number} nd - The number of derivatives.\n * @return {Array<Vector4>} An array[d+1] with derivatives.\n */\nfunction calcBSplineDerivatives( p, U, P, u, nd ) {\n\n\tconst du = nd < p ? nd : p;\n\tconst CK = [];\n\tconst span = findSpan( p, u, U );\n\tconst nders = calcBasisFunctionDerivatives( span, u, p, du, U );\n\tconst Pw = [];\n\n\tfor ( let i = 0; i < P.length; ++ i ) {\n\n\t\tconst point = P[ i ].clone();\n\t\tconst w = point.w;\n\n\t\tpoint.x *= w;\n\t\tpoint.y *= w;\n\t\tpoint.z *= w;\n\n\t\tPw[ i ] = point;\n\n\t}\n\n\tfor ( let k = 0; k <= du; ++ k ) {\n\n\t\tconst point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t}\n\n\t\tCK[ k ] = point;\n\n\t}\n\n\tfor ( let k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\tCK[ k ] = new Vector4( 0, 0, 0 );\n\n\t}\n\n\treturn CK;\n\n}\n\n/**\n * Calculates \"K over I\".\n *\n * @param {number} k - The K value.\n * @param {number} i - The I value.\n * @return {number} k!/(i!(k-i)!)\n */\nfunction calcKoverI( k, i ) {\n\n\tlet nom = 1;\n\n\tfor ( let j = 2; j <= k; ++ j ) {\n\n\t\tnom *= j;\n\n\t}\n\n\tlet denom = 1;\n\n\tfor ( let j = 2; j <= i; ++ j ) {\n\n\t\tdenom *= j;\n\n\t}\n\n\tfor ( let j = 2; j <= k - i; ++ j ) {\n\n\t\tdenom *= j;\n\n\t}\n\n\treturn nom / denom;\n\n}\n\n/**\n * Calculates derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n *\n * @param {Array<Vector4>} Pders - Array with derivatives.\n * @return {Array<Vector3>} An array with derivatives for rational curve.\n */\nfunction calcRationalCurveDerivatives( Pders ) {\n\n\tconst nd = Pders.length;\n\tconst Aders = [];\n\tconst wders = [];\n\n\tfor ( let i = 0; i < nd; ++ i ) {\n\n\t\tconst point = Pders[ i ];\n\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\n\t\twders[ i ] = point.w;\n\n\t}\n\n\tconst CK = [];\n\n\tfor ( let k = 0; k < nd; ++ k ) {\n\n\t\tconst v = Aders[ k ].clone();\n\n\t\tfor ( let i = 1; i <= k; ++ i ) {\n\n\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t}\n\n\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t}\n\n\treturn CK;\n\n}\n\n/**\n * Calculates NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n *\n * @param {number} p - The degree.\n * @param {Array<number>} U - The knot vector.\n * @param {Array<Vector4>} P - The control points in homogeneous space.\n * @param {number} u - The parametric point.\n * @param {number} nd - The number of derivatives.\n * @return {Array<Vector3>} array with derivatives for rational curve.\n */\nfunction calcNURBSDerivatives( p, U, P, u, nd ) {\n\n\tconst Pders = calcBSplineDerivatives( p, U, P, u, nd );\n\treturn calcRationalCurveDerivatives( Pders );\n\n}\n\n/**\n * Calculates a rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n *\n * @param {number} p - The first degree of B-Spline surface.\n * @param {number} q - The second degree of B-Spline surface.\n * @param {Array<number>} U - The first knot vector.\n * @param {Array<number>} V - The second knot vector.\n * @param {Array<Array<Vector4>>} P - The control points in homogeneous space.\n * @param {number} u - The first parametric point.\n * @param {number} v - The second parametric point.\n * @param {Vector3} target - The target vector.\n */\nfunction calcSurfacePoint( p, q, U, V, P, u, v, target ) {\n\n\tconst uspan = findSpan( p, u, U );\n\tconst vspan = findSpan( q, v, V );\n\tconst Nu = calcBasisFunctions( uspan, u, p, U );\n\tconst Nv = calcBasisFunctions( vspan, v, q, V );\n\tconst temp = [];\n\n\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\n\t\tfor ( let k = 0; k <= p; ++ k ) {\n\n\t\t\tconst point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\tconst w = point.w;\n\t\t\tpoint.x *= w;\n\t\t\tpoint.y *= w;\n\t\t\tpoint.z *= w;\n\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t}\n\n\t}\n\n\tconst Sw = new Vector4( 0, 0, 0, 0 );\n\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t}\n\n\tSw.divideScalar( Sw.w );\n\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n}\n\n/**\n * Calculates a rational B-Spline volume point. See The NURBS Book, page 134, algorithm A4.3.\n *\n * @param {number} p - The first degree of B-Spline surface.\n * @param {number} q - The second degree of B-Spline surface.\n * @param {number} r - The third degree of B-Spline surface.\n * @param {Array<number>} U - The first knot vector.\n * @param {Array<number>} V - The second knot vector.\n * @param {Array<number>} W - The third knot vector.\n * @param {Array<Array<Array<Vector4>>>} P - The control points in homogeneous space.\n * @param {number} u - The first parametric point.\n * @param {number} v - The second parametric point.\n * @param {number} w - The third parametric point.\n * @param {Vector3} target - The target vector.\n */\nfunction calcVolumePoint( p, q, r, U, V, W, P, u, v, w, target ) {\n\n\tconst uspan = findSpan( p, u, U );\n\tconst vspan = findSpan( q, v, V );\n\tconst wspan = findSpan( r, w, W );\n\tconst Nu = calcBasisFunctions( uspan, u, p, U );\n\tconst Nv = calcBasisFunctions( vspan, v, q, V );\n\tconst Nw = calcBasisFunctions( wspan, w, r, W );\n\tconst temp = [];\n\n\tfor ( let m = 0; m <= r; ++ m ) {\n\n\t\ttemp[ m ] = [];\n\n\t\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\t\ttemp[ m ][ l ] = new Vector4( 0, 0, 0, 0 );\n\t\t\tfor ( let k = 0; k <= p; ++ k ) {\n\n\t\t\t\tconst point = P[ uspan - p + k ][ vspan - q + l ][ wspan - r + m ].clone();\n\t\t\t\tconst w = point.w;\n\t\t\t\tpoint.x *= w;\n\t\t\t\tpoint.y *= w;\n\t\t\t\tpoint.z *= w;\n\t\t\t\ttemp[ m ][ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst Sw = new Vector4( 0, 0, 0, 0 );\n\tfor ( let m = 0; m <= r; ++ m ) {\n\n\t\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\t\tSw.add( temp[ m ][ l ].multiplyScalar( Nw[ m ] ).multiplyScalar( Nv[ l ] ) );\n\n\t\t}\n\n\t}\n\n\tSw.divideScalar( Sw.w );\n\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n}\n\nexport {\n\tfindSpan,\n\tcalcBasisFunctions,\n\tcalcBSplinePoint,\n\tcalcBasisFunctionDerivatives,\n\tcalcBSplineDerivatives,\n\tcalcKoverI,\n\tcalcRationalCurveDerivatives,\n\tcalcNURBSDerivatives,\n\tcalcSurfacePoint,\n\tcalcVolumePoint,\n};\n"],"mappings":"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","ignoreList":[]}