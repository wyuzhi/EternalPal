{"version":3,"file":"node_modules/three/examples/jsm/curves/NURBSVolume.js","names":["Vector4","NURBSUtils","NURBSVolume","constructor","degree1","degree2","degree3","knots1","knots2","knots3","controlPoints","this","len1","length","len2","len3","i","j","k","point","x","y","z","w","getPoint","t1","t2","t3","target","u","v","calcVolumePoint"],"sources":["node_modules/three/examples/jsm/curves/NURBSVolume.js"],"sourcesContent":["import {\n\tVector4\n} from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * This class represents a NURBS volume.\n *\n * Implementation is based on `(x, y [, z=0 [, w=1]])` control points with `w=weight`.\n *\n * @three_import import { NURBSVolume } from 'three/addons/curves/NURBSVolume.js';\n */\nclass NURBSVolume {\n\n\t/**\n\t * Constructs a new NURBS surface.\n\t *\n\t * @param {number} degree1 - The first NURBS degree.\n\t * @param {number} degree2 - The second NURBS degree.\n\t * @param {number} degree3 - The third NURBS degree.\n\t * @param {Array<number>} knots1 - The first knots as a flat array of numbers.\n\t * @param {Array<number>} knots2 - The second knots as a flat array of numbers.\n\t * @param {Array<number>} knots3 - The third knots as a flat array of numbers.\n\t * @param {Array<Array<Array<Vector2|Vector3|Vector4>>>} controlPoints - An array^3 holding control points.\n\t */\n\tconstructor( degree1, degree2, degree3, knots1, knots2, knots3 /* arrays of reals */, controlPoints /* array^3 of Vector(2|3|4) */ ) {\n\n\t\tthis.degree1 = degree1;\n\t\tthis.degree2 = degree2;\n\t\tthis.degree3 = degree3;\n\t\tthis.knots1 = knots1;\n\t\tthis.knots2 = knots2;\n\t\tthis.knots3 = knots3;\n\t\tthis.controlPoints = [];\n\n\t\tconst len1 = knots1.length - degree1 - 1;\n\t\tconst len2 = knots2.length - degree2 - 1;\n\t\tconst len3 = knots3.length - degree3 - 1;\n\n\t\t// ensure Vector4 for control points\n\t\tfor ( let i = 0; i < len1; ++ i ) {\n\n\t\t\tthis.controlPoints[ i ] = [];\n\n\t\t\tfor ( let j = 0; j < len2; ++ j ) {\n\n\t\t\t\tthis.controlPoints[ i ][ j ] = [];\n\n\t\t\t\tfor ( let k = 0; k < len3; ++ k ) {\n\n\t\t\t\t\tconst point = controlPoints[ i ][ j ][ k ];\n\t\t\t\t\tthis.controlPoints[ i ][ j ][ k ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method returns a vector in 3D space for the given interpolation factor. This vector lies within the NURBS volume.\n\t *\n\t * @param {number} t1 - The first interpolation factor representing the `u` position within the volume. Must be in the range `[0,1]`.\n\t * @param {number} t2 - The second interpolation factor representing the `v` position within the volume. Must be in the range `[0,1]`.\n\t * @param {number} t3 - The third interpolation factor representing the `w` position within the volume. Must be in the range `[0,1]`.\n\t * @param {Vector3} target - The target vector the result is written to.\n\t */\n\tgetPoint( t1, t2, t3, target ) {\n\n\t\tconst u = this.knots1[ 0 ] + t1 * ( this.knots1[ this.knots1.length - 1 ] - this.knots1[ 0 ] ); // linear mapping t1->u\n\t\tconst v = this.knots2[ 0 ] + t2 * ( this.knots2[ this.knots2.length - 1 ] - this.knots2[ 0 ] ); // linear mapping t2->v\n\t\tconst w = this.knots3[ 0 ] + t3 * ( this.knots3[ this.knots3.length - 1 ] - this.knots3[ 0 ] ); // linear mapping t3->w\n\n\t\tNURBSUtils.calcVolumePoint( this.degree1, this.degree2, this.degree3, this.knots1, this.knots2, this.knots3, this.controlPoints, u, v, w, target );\n\n\t}\n\n}\n\nexport { NURBSVolume };\n"],"mappings":"OACCA,YACM,kBACKC,eAAgB,0BAS5B,MAAMC,YAaL,WAAAC,CAAaC,EAASC,EAASC,EAASC,EAAQC,EAAQC,EAA8BC,GAErFC,KAAKP,QAAUA,EACfO,KAAKN,QAAUA,EACfM,KAAKL,QAAUA,EACfK,KAAKJ,OAASA,EACdI,KAAKH,OAASA,EACdG,KAAKF,OAASA,EACdE,KAAKD,cAAgB,GAErB,MAAME,EAAOL,EAAOM,OAAST,EAAU,EACjCU,EAAON,EAAOK,OAASR,EAAU,EACjCU,EAAON,EAAOI,OAASP,EAAU,EAGvC,IAAM,IAAIU,EAAI,EAAGA,EAAIJ,IAASI,EAAI,CAEjCL,KAAKD,cAAeM,GAAM,GAE1B,IAAM,IAAIC,EAAI,EAAGA,EAAIH,IAASG,EAAI,CAEjCN,KAAKD,cAAeM,GAAKC,GAAM,GAE/B,IAAM,IAAIC,EAAI,EAAGA,EAAIH,IAASG,EAAI,CAEjC,MAAMC,EAAQT,EAAeM,GAAKC,GAAKC,GACvCP,KAAKD,cAAeM,GAAKC,GAAKC,GAAM,IAAIlB,QAASmB,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,EAAGH,EAAMI,EAEnF,CAED,CAED,CAED,CAUA,QAAAC,CAAUC,EAAIC,EAAIC,EAAIC,GAErB,MAAMC,EAAIlB,KAAKJ,OAAQ,GAAMkB,GAAOd,KAAKJ,OAAQI,KAAKJ,OAAOM,OAAS,GAAMF,KAAKJ,OAAQ,IACnFuB,EAAInB,KAAKH,OAAQ,GAAMkB,GAAOf,KAAKH,OAAQG,KAAKH,OAAOK,OAAS,GAAMF,KAAKH,OAAQ,IACnFe,EAAIZ,KAAKF,OAAQ,GAAMkB,GAAOhB,KAAKF,OAAQE,KAAKF,OAAOI,OAAS,GAAMF,KAAKF,OAAQ,IAEzFR,WAAW8B,gBAAiBpB,KAAKP,QAASO,KAAKN,QAASM,KAAKL,QAASK,KAAKJ,OAAQI,KAAKH,OAAQG,KAAKF,OAAQE,KAAKD,cAAemB,EAAGC,EAAGP,EAAGK,EAE3I,SAIQ1B","ignoreList":[]}