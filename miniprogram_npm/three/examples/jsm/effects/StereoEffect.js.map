{"version":3,"file":"node_modules/three/examples/jsm/effects/StereoEffect.js","names":["StereoCamera","Vector2","StereoEffect","constructor","renderer","_stereo","aspect","size","this","setEyeSeparation","eyeSep","setSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","currentAutoClear","autoClear","getSize","clear","setScissorTest","setScissor","setViewport","cameraL","cameraR"],"sources":["node_modules/three/examples/jsm/effects/StereoEffect.js"],"sourcesContent":["import {\n\tStereoCamera,\n\tVector2\n} from 'three';\n\n/**\n * A class that creates an stereo effect.\n *\n * Note that this class can only be used with {@link WebGLRenderer}.\n * When using {@link WebGPURenderer}, use {@link StereoPassNode}.\n *\n * @three_import import { StereoEffect } from 'three/addons/effects/StereoEffect.js';\n */\nclass StereoEffect {\n\n\t/**\n\t * Constructs a new stereo effect.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t */\n\tconstructor( renderer ) {\n\n\t\tconst _stereo = new StereoCamera();\n\t\t_stereo.aspect = 0.5;\n\t\tconst size = new Vector2();\n\n\t\t/**\n\t\t * Sets the given eye separation.\n\t\t *\n\t\t * @param {number} eyeSep - The eye separation to set.\n\t\t */\n\t\tthis.setEyeSeparation = function ( eyeSep ) {\n\n\t\t\t_stereo.eyeSep = eyeSep;\n\n\t\t};\n\n\t\t/**\n\t\t * Resizes the effect.\n\t\t *\n\t\t * @param {number} width - The width of the effect in logical pixels.\n\t\t * @param {number} height - The height of the effect in logical pixels.\n\t\t */\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t};\n\n\t\t/**\n\t\t * When using this effect, this method should be called instead of the\n\t\t * default {@link WebGLRenderer#render}.\n\t\t *\n\t\t * @param {Object3D} scene - The scene to render.\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\tconst currentAutoClear = renderer.autoClear;\n\t\t\trenderer.getSize( size );\n\n\t\t\trenderer.autoClear = false;\n\t\t\trenderer.clear();\n\n\t\t\trenderer.setScissorTest( true );\n\n\t\t\trenderer.setScissor( 0, 0, size.width / 2, size.height );\n\t\t\trenderer.setViewport( 0, 0, size.width / 2, size.height );\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setScissor( size.width / 2, 0, size.width / 2, size.height );\n\t\t\trenderer.setViewport( size.width / 2, 0, size.width / 2, size.height );\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setScissorTest( false );\n\n\t\t\trenderer.autoClear = currentAutoClear;\n\n\t\t};\n\n\t}\n\n}\n\nexport { StereoEffect };\n"],"mappings":"OACCA,aACAC,YACM,QAUP,MAAMC,aAOL,WAAAC,CAAaC,GAEZ,MAAMC,EAAU,IAAIL,aACpBK,EAAQC,OAAS,GACjB,MAAMC,EAAO,IAAIN,QAOjBO,KAAKC,iBAAmB,SAAWC,GAElCL,EAAQK,OAASA,CAElB,EAQAF,KAAKG,QAAU,SAAWC,EAAOC,GAEhCT,EAASO,QAASC,EAAOC,EAE1B,EASAL,KAAKM,OAAS,SAAWC,EAAOC,IAEM,IAAhCD,EAAME,uBAAiCF,EAAMG,oBAE3B,OAAlBF,EAAOG,SAAoD,IAAjCH,EAAOC,uBAAiCD,EAAOE,oBAE9Eb,EAAQe,OAAQJ,GAEhB,MAAMK,EAAmBjB,EAASkB,UAClClB,EAASmB,QAAShB,GAElBH,EAASkB,WAAY,EACrBlB,EAASoB,QAETpB,EAASqB,gBAAgB,GAEzBrB,EAASsB,WAAY,EAAG,EAAGnB,EAAKK,MAAQ,EAAGL,EAAKM,QAChDT,EAASuB,YAAa,EAAG,EAAGpB,EAAKK,MAAQ,EAAGL,EAAKM,QACjDT,EAASU,OAAQC,EAAOV,EAAQuB,SAEhCxB,EAASsB,WAAYnB,EAAKK,MAAQ,EAAG,EAAGL,EAAKK,MAAQ,EAAGL,EAAKM,QAC7DT,EAASuB,YAAapB,EAAKK,MAAQ,EAAG,EAAGL,EAAKK,MAAQ,EAAGL,EAAKM,QAC9DT,EAASU,OAAQC,EAAOV,EAAQwB,SAEhCzB,EAASqB,gBAAgB,GAEzBrB,EAASkB,UAAYD,CAEtB,CAED,SAIQnB","ignoreList":[]}