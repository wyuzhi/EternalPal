import{BackSide,BoxGeometry,InstancedMesh,Mesh,MeshLambertMaterial,MeshStandardMaterial,PointLight,Scene,Object3D}from"three";class RoomEnvironment extends Scene{constructor(){super();const t=new BoxGeometry;t.deleteAttribute("uv");const e=new MeshStandardMaterial({side:BackSide}),s=new MeshStandardMaterial,a=new PointLight(16777215,900,28,2);a.position.set(.418,16.199,.3),this.add(a);const i=new Mesh(t,e);i.position.set(-.757,13.219,.717),i.scale.set(31.713,28.305,28.591),this.add(i);const o=new InstancedMesh(t,s,6),r=new Object3D;r.position.set(-10.906,2.009,1.846),r.rotation.set(0,-.195,0),r.scale.set(2.328,7.905,4.651),r.updateMatrix(),o.setMatrixAt(0,r.matrix),r.position.set(-5.607,-.754,-.758),r.rotation.set(0,.994,0),r.scale.set(1.97,1.534,3.955),r.updateMatrix(),o.setMatrixAt(1,r.matrix),r.position.set(6.167,.857,7.803),r.rotation.set(0,.561,0),r.scale.set(3.927,6.285,3.687),r.updateMatrix(),o.setMatrixAt(2,r.matrix),r.position.set(-2.017,.018,6.124),r.rotation.set(0,.333,0),r.scale.set(2.002,4.566,2.064),r.updateMatrix(),o.setMatrixAt(3,r.matrix),r.position.set(2.291,-.756,-2.621),r.rotation.set(0,-.286,0),r.scale.set(1.546,1.552,1.496),r.updateMatrix(),o.setMatrixAt(4,r.matrix),r.position.set(-2.193,-.369,-5.547),r.rotation.set(0,.516,0),r.scale.set(3.875,3.487,2.986),r.updateMatrix(),o.setMatrixAt(5,r.matrix),this.add(o);const n=new Mesh(t,createAreaLightMaterial(50));n.position.set(-16.116,14.37,8.208),n.scale.set(.1,2.428,2.739),this.add(n);const c=new Mesh(t,createAreaLightMaterial(50));c.position.set(-16.109,18.021,-8.207),c.scale.set(.1,2.425,2.751),this.add(c);const d=new Mesh(t,createAreaLightMaterial(17));d.position.set(14.904,12.198,-1.832),d.scale.set(.15,4.265,6.331),this.add(d);const M=new Mesh(t,createAreaLightMaterial(43));M.position.set(-.462,8.89,14.52),M.scale.set(4.38,5.441,.088),this.add(M);const h=new Mesh(t,createAreaLightMaterial(20));h.position.set(3.235,11.486,-12.541),h.scale.set(2.5,2,.1),this.add(h);const l=new Mesh(t,createAreaLightMaterial(100));l.position.set(0,20,0),l.scale.set(1,.1,1),this.add(l)}dispose(){const t=new Set;this.traverse((e=>{e.isMesh&&(t.add(e.geometry),t.add(e.material))}));for(const e of t)e.dispose()}}function createAreaLightMaterial(t){return new MeshLambertMaterial({color:0,emissive:16777215,emissiveIntensity:t})}export{RoomEnvironment};
//# sourceMappingURL=RoomEnvironment.js.map