{"version":3,"file":"node_modules/three/examples/jsm/exporters/EXRExporter.js","names":["FloatType","HalfFloatType","RGBAFormat","DataUtils","fflate","textEncoder","TextEncoder","NO_COMPRESSION","ZIPS_COMPRESSION","ZIP_COMPRESSION","EXRExporter","parse","arg1","arg2","arg3","isWebGLRenderer","isWebGPURenderer","isDataTexture","Error","renderer","renderTarget","options","supportedRTT","info","buildInfoRTT","fillData","compressData","reorganizeDataBuffer","getPixelData","texture","supportedDT","buildInfoDT","image","data","isRenderTarget","isWebGLCubeRenderTarget","isWebGL3DRenderTarget","isWebGLArrayRenderTarget","type","format","constructor","name","WIDTH","width","HEIGHT","height","TYPE","FORMAT","COMPRESSION","undefined","compression","OUT_TYPE","COMPRESSION_SIZE","blockLines","dataType","dataSize","numBlocks","Math","ceil","numInputChannels","numOutputChannels","async","rtt","dataBuffer","Float32Array","Uint16Array","readRenderTargetPixelsAsync","inBuffer","w","h","dec","r","g","b","a","offset","value","cOffset","getValue","getFloat32","getFloat16","setValue","setFloat16","setFloat32","outBuffer","Uint8Array","dv","DataView","buffer","y","x","i","line","decodeLinear","compress","tmpBuffer","sum","chunks","Array","totalSize","size","compressNONE","compressZIP","block","subarray","length","push","dataChunk","t1","t2","floor","s","stop","p","t","d","zlibSync","fillHeader","setUint32","setString","setUint8","setUint64","TableSize","HeaderSize","set","setUint16","toHalfFloat","setBigUint64","BigInt","string","tmp","encode","decodeFloat16","binary","exponent","fraction","NaN","Infinity","pow","arr"],"sources":["node_modules/three/examples/jsm/exporters/EXRExporter.js"],"sourcesContent":["import {\n\tFloatType,\n\tHalfFloatType,\n\tRGBAFormat,\n\tDataUtils,\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\nconst textEncoder = new TextEncoder();\n\nconst NO_COMPRESSION = 0;\nconst ZIPS_COMPRESSION = 2;\nconst ZIP_COMPRESSION = 3;\n\n/**\n * An exporter for EXR.\n *\n * EXR ( Extended Dynamic Range) is an [open format specification]{@link https://github.com/AcademySoftwareFoundation/openexr}\n * for professional-grade image storage format of the motion picture industry. The purpose of\n * format is to accurately and efficiently represent high-dynamic-range scene-linear image data\n * and associated metadata. The library is widely used in host application software where accuracy\n * is critical, such as photorealistic rendering, texture access, image compositing, deep compositing,\n * and DI.\n *\n * ```js\n * const exporter = new EXRExporter();\n * const result = await exporter.parse( renderer, options );\n * ```\n *\n * @three_import import { EXRExporter } from 'three/addons/exporters/EXRExporter.js';\n */\nclass EXRExporter {\n\n\t/**\n\t * This method has two variants.\n\t *\n\t * - When exporting a data texture, it receives two parameters. The texture and the exporter options.\n\t * - When exporting a render target (e.g. a PMREM), it receives three parameters. The renderer, the\n\t * render target and the exporter options.\n\t *\n\t * @async\n\t * @param {(DataTexture|WebGPURenderer|WebGLRenderer)} arg1 - The data texture to export or a renderer.\n\t * @param {(EXRExporter~Options|RenderTarget)} arg2 - The exporter options or a render target.\n\t * @param {EXRExporter~Options} [arg3] - The exporter options.\n\t * @return {Promise<Uint8Array>} A Promise that resolves with the exported EXR.\n\t */\n\tasync parse( arg1, arg2, arg3 ) {\n\n\t\tif ( ! arg1 || ! ( arg1.isWebGLRenderer || arg1.isWebGPURenderer || arg1.isDataTexture ) ) {\n\n\t\t\tthrow Error( 'EXRExporter.parse: Unsupported first parameter, expected instance of WebGLRenderer, WebGPURenderer or DataTexture.' );\n\n\t\t} else if ( arg1.isWebGLRenderer || arg1.isWebGPURenderer ) {\n\n\t\t\tconst renderer = arg1, renderTarget = arg2, options = arg3;\n\n\t\t\tsupportedRTT( renderTarget );\n\n\t\t\tconst info = buildInfoRTT( renderTarget, options ),\n\t\t\t\tdataBuffer = await getPixelData( renderer, renderTarget, info ),\n\t\t\t\trawContentBuffer = reorganizeDataBuffer( dataBuffer, info ),\n\t\t\t\tchunks = compressData( rawContentBuffer, info );\n\n\t\t\treturn fillData( chunks, info );\n\n\t\t} else if ( arg1.isDataTexture ) {\n\n\t\t\tconst texture = arg1, options = arg2;\n\n\t\t\tsupportedDT( texture );\n\n\t\t\tconst info = buildInfoDT( texture, options ),\n\t\t\t\tdataBuffer = texture.image.data,\n\t\t\t\trawContentBuffer = reorganizeDataBuffer( dataBuffer, info ),\n\t\t\t\tchunks = compressData( rawContentBuffer, info );\n\n\t\t\treturn fillData( chunks, info );\n\n\t\t}\n\n\t}\n\n}\n\nfunction supportedRTT( renderTarget ) {\n\n\tif ( ! renderTarget || ! renderTarget.isRenderTarget ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported second parameter, expected instance of WebGLRenderTarget.' );\n\n\t}\n\n\tif ( renderTarget.isWebGLCubeRenderTarget || renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported render target type, expected instance of WebGLRenderTarget.' );\n\n\t}\n\n\tif ( renderTarget.texture.type !== FloatType && renderTarget.texture.type !== HalfFloatType ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported WebGLRenderTarget texture type.' );\n\n\t}\n\n\tif ( renderTarget.texture.format !== RGBAFormat ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported WebGLRenderTarget texture format, expected RGBAFormat.' );\n\n\t}\n\n}\n\nfunction supportedDT( texture ) {\n\n\tif ( texture.type !== FloatType && texture.type !== HalfFloatType ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported DataTexture texture type.' );\n\n\t}\n\n\tif ( texture.format !== RGBAFormat ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Unsupported DataTexture texture format, expected RGBAFormat.' );\n\n\t}\n\n\tif ( ! texture.image.data ) {\n\n\t\tthrow Error( 'EXRExporter.parse: Invalid DataTexture image data.' );\n\n\t}\n\n\tif ( texture.type === FloatType && texture.image.data.constructor.name !== 'Float32Array' ) {\n\n\t\tthrow Error( 'EXRExporter.parse: DataTexture image data doesn\\'t match type, expected \\'Float32Array\\'.' );\n\n\t}\n\n\tif ( texture.type === HalfFloatType && texture.image.data.constructor.name !== 'Uint16Array' ) {\n\n\t\tthrow Error( 'EXRExporter.parse: DataTexture image data doesn\\'t match type, expected \\'Uint16Array\\'.' );\n\n\t}\n\n}\n\nfunction buildInfoRTT( renderTarget, options = {} ) {\n\n\tconst compressionSizes = {\n\t\t0: 1,\n\t\t2: 1,\n\t\t3: 16\n\t};\n\n\tconst WIDTH = renderTarget.width,\n\t\tHEIGHT = renderTarget.height,\n\t\tTYPE = renderTarget.texture.type,\n\t\tFORMAT = renderTarget.texture.format,\n\t\tCOMPRESSION = ( options.compression !== undefined ) ? options.compression : ZIP_COMPRESSION,\n\t\tEXPORTER_TYPE = ( options.type !== undefined ) ? options.type : HalfFloatType,\n\t\tOUT_TYPE = ( EXPORTER_TYPE === FloatType ) ? 2 : 1,\n\t\tCOMPRESSION_SIZE = compressionSizes[ COMPRESSION ],\n\t\tNUM_CHANNELS = 4;\n\n\treturn {\n\t\twidth: WIDTH,\n\t\theight: HEIGHT,\n\t\ttype: TYPE,\n\t\tformat: FORMAT,\n\t\tcompression: COMPRESSION,\n\t\tblockLines: COMPRESSION_SIZE,\n\t\tdataType: OUT_TYPE,\n\t\tdataSize: 2 * OUT_TYPE,\n\t\tnumBlocks: Math.ceil( HEIGHT / COMPRESSION_SIZE ),\n\t\tnumInputChannels: 4,\n\t\tnumOutputChannels: NUM_CHANNELS,\n\t};\n\n}\n\nfunction buildInfoDT( texture, options = {} ) {\n\n\tconst compressionSizes = {\n\t\t0: 1,\n\t\t2: 1,\n\t\t3: 16\n\t};\n\n\tconst WIDTH = texture.image.width,\n\t\tHEIGHT = texture.image.height,\n\t\tTYPE = texture.type,\n\t\tFORMAT = texture.format,\n\t\tCOMPRESSION = ( options.compression !== undefined ) ? options.compression : ZIP_COMPRESSION,\n\t\tEXPORTER_TYPE = ( options.type !== undefined ) ? options.type : HalfFloatType,\n\t\tOUT_TYPE = ( EXPORTER_TYPE === FloatType ) ? 2 : 1,\n\t\tCOMPRESSION_SIZE = compressionSizes[ COMPRESSION ],\n\t\tNUM_CHANNELS = 4;\n\n\treturn {\n\t\twidth: WIDTH,\n\t\theight: HEIGHT,\n\t\ttype: TYPE,\n\t\tformat: FORMAT,\n\t\tcompression: COMPRESSION,\n\t\tblockLines: COMPRESSION_SIZE,\n\t\tdataType: OUT_TYPE,\n\t\tdataSize: 2 * OUT_TYPE,\n\t\tnumBlocks: Math.ceil( HEIGHT / COMPRESSION_SIZE ),\n\t\tnumInputChannels: 4,\n\t\tnumOutputChannels: NUM_CHANNELS,\n\t};\n\n}\n\nasync function getPixelData( renderer, rtt, info ) {\n\n\tlet dataBuffer;\n\n\tif ( renderer.isWebGLRenderer ) {\n\n\t\tif ( info.type === FloatType ) {\n\n\t\t\tdataBuffer = new Float32Array( info.width * info.height * info.numInputChannels );\n\n\t\t} else {\n\n\t\t\tdataBuffer = new Uint16Array( info.width * info.height * info.numInputChannels );\n\n\t\t}\n\n\t\tawait renderer.readRenderTargetPixelsAsync( rtt, 0, 0, info.width, info.height, dataBuffer );\n\n\t} else {\n\n\t\tdataBuffer = await renderer.readRenderTargetPixelsAsync( rtt, 0, 0, info.width, info.height );\n\n\t}\n\n\treturn dataBuffer;\n\n}\n\nfunction reorganizeDataBuffer( inBuffer, info ) {\n\n\tconst w = info.width,\n\t\th = info.height,\n\t\tdec = { r: 0, g: 0, b: 0, a: 0 },\n\t\toffset = { value: 0 },\n\t\tcOffset = ( info.numOutputChannels == 4 ) ? 1 : 0,\n\t\tgetValue = ( info.type == FloatType ) ? getFloat32 : getFloat16,\n\t\tsetValue = ( info.dataType == 1 ) ? setFloat16 : setFloat32,\n\t\toutBuffer = new Uint8Array( info.width * info.height * info.numOutputChannels * info.dataSize ),\n\t\tdv = new DataView( outBuffer.buffer );\n\n\tfor ( let y = 0; y < h; ++ y ) {\n\n\t\tfor ( let x = 0; x < w; ++ x ) {\n\n\t\t\tconst i = y * w * 4 + x * 4;\n\n\t\t\tconst r = getValue( inBuffer, i );\n\t\t\tconst g = getValue( inBuffer, i + 1 );\n\t\t\tconst b = getValue( inBuffer, i + 2 );\n\t\t\tconst a = getValue( inBuffer, i + 3 );\n\n\t\t\tconst line = ( h - y - 1 ) * w * ( 3 + cOffset ) * info.dataSize;\n\n\t\t\tdecodeLinear( dec, r, g, b, a );\n\n\t\t\toffset.value = line + x * info.dataSize;\n\t\t\tsetValue( dv, dec.a, offset );\n\n\t\t\toffset.value = line + ( cOffset ) * w * info.dataSize + x * info.dataSize;\n\t\t\tsetValue( dv, dec.b, offset );\n\n\t\t\toffset.value = line + ( 1 + cOffset ) * w * info.dataSize + x * info.dataSize;\n\t\t\tsetValue( dv, dec.g, offset );\n\n\t\t\toffset.value = line + ( 2 + cOffset ) * w * info.dataSize + x * info.dataSize;\n\t\t\tsetValue( dv, dec.r, offset );\n\n\t\t}\n\n\t}\n\n\treturn outBuffer;\n\n}\n\nfunction compressData( inBuffer, info ) {\n\n\tlet compress,\n\t\ttmpBuffer,\n\t\tsum = 0;\n\n\tconst chunks = { data: new Array(), totalSize: 0 },\n\t\tsize = info.width * info.numOutputChannels * info.blockLines * info.dataSize;\n\n\tswitch ( info.compression ) {\n\n\t\tcase 0:\n\t\t\tcompress = compressNONE;\n\t\t\tbreak;\n\n\t\tcase 2:\n\t\tcase 3:\n\t\t\tcompress = compressZIP;\n\t\t\tbreak;\n\n\t}\n\n\tif ( info.compression !== 0 ) {\n\n\t\ttmpBuffer = new Uint8Array( size );\n\n\t}\n\n\tfor ( let i = 0; i < info.numBlocks; ++ i ) {\n\n\t\tconst arr = inBuffer.subarray( size * i, size * ( i + 1 ) );\n\n\t\tconst block = compress( arr, tmpBuffer );\n\n\t\tsum += block.length;\n\n\t\tchunks.data.push( { dataChunk: block, size: block.length } );\n\n\t}\n\n\tchunks.totalSize = sum;\n\n\treturn chunks;\n\n}\n\nfunction compressNONE( data ) {\n\n\treturn data;\n\n}\n\nfunction compressZIP( data, tmpBuffer ) {\n\n\t//\n\t// Reorder the pixel data.\n\t//\n\n\tlet t1 = 0,\n\t\tt2 = Math.floor( ( data.length + 1 ) / 2 ),\n\t\ts = 0;\n\n\tconst stop = data.length - 1;\n\n\twhile ( true ) {\n\n\t\tif ( s > stop ) break;\n\t\ttmpBuffer[ t1 ++ ] = data[ s ++ ];\n\n\t\tif ( s > stop ) break;\n\t\ttmpBuffer[ t2 ++ ] = data[ s ++ ];\n\n\t}\n\n\t//\n\t// Predictor.\n\t//\n\n\tlet p = tmpBuffer[ 0 ];\n\n\tfor ( let t = 1; t < tmpBuffer.length; t ++ ) {\n\n\t\tconst d = tmpBuffer[ t ] - p + ( 128 + 256 );\n\t\tp = tmpBuffer[ t ];\n\t\ttmpBuffer[ t ] = d;\n\n\t}\n\n\tconst deflate = fflate.zlibSync( tmpBuffer );\n\n\treturn deflate;\n\n}\n\nfunction fillHeader( outBuffer, chunks, info ) {\n\n\tconst offset = { value: 0 };\n\tconst dv = new DataView( outBuffer.buffer );\n\n\tsetUint32( dv, 20000630, offset ); // magic\n\tsetUint32( dv, 2, offset ); // mask\n\n\t// = HEADER =\n\n\tsetString( dv, 'compression', offset );\n\tsetString( dv, 'compression', offset );\n\tsetUint32( dv, 1, offset );\n\tsetUint8( dv, info.compression, offset );\n\n\tsetString( dv, 'screenWindowCenter', offset );\n\tsetString( dv, 'v2f', offset );\n\tsetUint32( dv, 8, offset );\n\tsetUint32( dv, 0, offset );\n\tsetUint32( dv, 0, offset );\n\n\tsetString( dv, 'screenWindowWidth', offset );\n\tsetString( dv, 'float', offset );\n\tsetUint32( dv, 4, offset );\n\tsetFloat32( dv, 1.0, offset );\n\n\tsetString( dv, 'pixelAspectRatio', offset );\n\tsetString( dv, 'float', offset );\n\tsetUint32( dv, 4, offset );\n\tsetFloat32( dv, 1.0, offset );\n\n\tsetString( dv, 'lineOrder', offset );\n\tsetString( dv, 'lineOrder', offset );\n\tsetUint32( dv, 1, offset );\n\tsetUint8( dv, 0, offset );\n\n\tsetString( dv, 'dataWindow', offset );\n\tsetString( dv, 'box2i', offset );\n\tsetUint32( dv, 16, offset );\n\tsetUint32( dv, 0, offset );\n\tsetUint32( dv, 0, offset );\n\tsetUint32( dv, info.width - 1, offset );\n\tsetUint32( dv, info.height - 1, offset );\n\n\tsetString( dv, 'displayWindow', offset );\n\tsetString( dv, 'box2i', offset );\n\tsetUint32( dv, 16, offset );\n\tsetUint32( dv, 0, offset );\n\tsetUint32( dv, 0, offset );\n\tsetUint32( dv, info.width - 1, offset );\n\tsetUint32( dv, info.height - 1, offset );\n\n\tsetString( dv, 'channels', offset );\n\tsetString( dv, 'chlist', offset );\n\tsetUint32( dv, info.numOutputChannels * 18 + 1, offset );\n\n\tsetString( dv, 'A', offset );\n\tsetUint32( dv, info.dataType, offset );\n\toffset.value += 4;\n\tsetUint32( dv, 1, offset );\n\tsetUint32( dv, 1, offset );\n\n\tsetString( dv, 'B', offset );\n\tsetUint32( dv, info.dataType, offset );\n\toffset.value += 4;\n\tsetUint32( dv, 1, offset );\n\tsetUint32( dv, 1, offset );\n\n\tsetString( dv, 'G', offset );\n\tsetUint32( dv, info.dataType, offset );\n\toffset.value += 4;\n\tsetUint32( dv, 1, offset );\n\tsetUint32( dv, 1, offset );\n\n\tsetString( dv, 'R', offset );\n\tsetUint32( dv, info.dataType, offset );\n\toffset.value += 4;\n\tsetUint32( dv, 1, offset );\n\tsetUint32( dv, 1, offset );\n\n\tsetUint8( dv, 0, offset );\n\n\t// null-byte\n\tsetUint8( dv, 0, offset );\n\n\t// = OFFSET TABLE =\n\n\tlet sum = offset.value + info.numBlocks * 8;\n\n\tfor ( let i = 0; i < chunks.data.length; ++ i ) {\n\n\t\tsetUint64( dv, sum, offset );\n\n\t\tsum += chunks.data[ i ].size + 8;\n\n\t}\n\n}\n\nfunction fillData( chunks, info ) {\n\n\tconst TableSize = info.numBlocks * 8,\n\t\tHeaderSize = 259 + ( 18 * info.numOutputChannels ), // 259 + 18 * chlist\n\t\toffset = { value: HeaderSize + TableSize },\n\t\toutBuffer = new Uint8Array( HeaderSize + TableSize + chunks.totalSize + info.numBlocks * 8 ),\n\t\tdv = new DataView( outBuffer.buffer );\n\n\tfillHeader( outBuffer, chunks, info );\n\n\tfor ( let i = 0; i < chunks.data.length; ++ i ) {\n\n\t\tconst data = chunks.data[ i ].dataChunk;\n\t\tconst size = chunks.data[ i ].size;\n\n\t\tsetUint32( dv, i * info.blockLines, offset );\n\t\tsetUint32( dv, size, offset );\n\n\t\toutBuffer.set( data, offset.value );\n\t\toffset.value += size;\n\n\t}\n\n\treturn outBuffer;\n\n}\n\nfunction decodeLinear( dec, r, g, b, a ) {\n\n\tdec.r = r;\n\tdec.g = g;\n\tdec.b = b;\n\tdec.a = a;\n\n}\n\n// function decodeSRGB( dec, r, g, b, a ) {\n\n// \tdec.r = r > 0.04045 ? Math.pow( r * 0.9478672986 + 0.0521327014, 2.4 ) : r * 0.0773993808;\n// \tdec.g = g > 0.04045 ? Math.pow( g * 0.9478672986 + 0.0521327014, 2.4 ) : g * 0.0773993808;\n// \tdec.b = b > 0.04045 ? Math.pow( b * 0.9478672986 + 0.0521327014, 2.4 ) : b * 0.0773993808;\n// \tdec.a = a;\n\n// }\n\n\nfunction setUint8( dv, value, offset ) {\n\n\tdv.setUint8( offset.value, value );\n\n\toffset.value += 1;\n\n}\n\nfunction setUint32( dv, value, offset ) {\n\n\tdv.setUint32( offset.value, value, true );\n\n\toffset.value += 4;\n\n}\n\nfunction setFloat16( dv, value, offset ) {\n\n\tdv.setUint16( offset.value, DataUtils.toHalfFloat( value ), true );\n\n\toffset.value += 2;\n\n}\n\nfunction setFloat32( dv, value, offset ) {\n\n\tdv.setFloat32( offset.value, value, true );\n\n\toffset.value += 4;\n\n}\n\nfunction setUint64( dv, value, offset ) {\n\n\tdv.setBigUint64( offset.value, BigInt( value ), true );\n\n\toffset.value += 8;\n\n}\n\nfunction setString( dv, string, offset ) {\n\n\tconst tmp = textEncoder.encode( string + '\\0' );\n\n\tfor ( let i = 0; i < tmp.length; ++ i ) {\n\n\t\tsetUint8( dv, tmp[ i ], offset );\n\n\t}\n\n}\n\nfunction decodeFloat16( binary ) {\n\n\tconst exponent = ( binary & 0x7C00 ) >> 10,\n\t\tfraction = binary & 0x03FF;\n\n\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\texponent ?\n\t\t\t(\n\t\t\t\texponent === 0x1F ?\n\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t) :\n\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t);\n\n}\n\nfunction getFloat16( arr, i ) {\n\n\treturn decodeFloat16( arr[ i ] );\n\n}\n\nfunction getFloat32( arr, i ) {\n\n\treturn arr[ i ];\n\n}\n\n/**\n * Export options of `EXRExporter`.\n *\n * @typedef {Object} EXRExporter~Options\n * @property {(HalfFloatType|FloatType)} [type=HalfFloatType] - Output data type.\n * @property {(NO_COMPRESSION|ZIP_COMPRESSION|ZIPS_COMPRESSION)} [type=ZIP_COMPRESSION] - The compression algorithm.\n **/\n\nexport { EXRExporter, NO_COMPRESSION, ZIP_COMPRESSION, ZIPS_COMPRESSION };\n"],"mappings":"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","ignoreList":[]}