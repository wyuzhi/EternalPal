{"version":3,"file":"node_modules/three/examples/jsm/exporters/KTX2Exporter.js","names":["ColorManagement","FloatType","HalfFloatType","UnsignedByteType","RGBAFormat","RGFormat","RGIntegerFormat","RedFormat","RedIntegerFormat","NoColorSpace","LinearSRGBColorSpace","SRGBColorSpace","SRGBTransfer","DataTexture","REVISION","write","KTX2Container","KHR_DF_CHANNEL_RGBSDA_ALPHA","KHR_DF_CHANNEL_RGBSDA_BLUE","KHR_DF_CHANNEL_RGBSDA_GREEN","KHR_DF_CHANNEL_RGBSDA_RED","KHR_DF_MODEL_RGBSDA","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_SAMPLE_DATATYPE_FLOAT","KHR_DF_SAMPLE_DATATYPE_LINEAR","KHR_DF_SAMPLE_DATATYPE_SIGNED","KHR_DF_TRANSFER_LINEAR","KHR_DF_TRANSFER_SRGB","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_MAP","KHR_DF_CHANNEL_MAP","KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER","ERROR_INPUT","ERROR_FORMAT","ERROR_TYPE","ERROR_COLOR_SPACE","KTX2Exporter","parse","arg1","arg2","texture","isDataTexture","isData3DTexture","isWebGLRenderer","isWebGPURenderer","isRenderTarget","Error","toDataTexture","undefined","format","type","colorSpace","array","image","data","channelCount","getChannelCount","container","vkFormat","typeSize","BYTES_PER_ELEMENT","pixelWidth","width","pixelHeight","height","pixelDepth","depth","basicDesc","dataFormatDescriptor","colorModel","colorPrimaries","transferFunction","getTransfer","texelBlockDimension","bytesPlane","i","channelType","samples","push","bitOffset","bitLength","samplePosition","sampleLower","sampleUpper","levels","levelData","Uint8Array","buffer","byteOffset","byteLength","uncompressedByteLength","keyValue","keepWriter","async","renderer","rtt","view","Float32Array","Uint16Array","readRenderTargetPixelsAsync"],"sources":["node_modules/three/examples/jsm/exporters/KTX2Exporter.js"],"sourcesContent":["import {\n\tColorManagement,\n\tFloatType,\n\tHalfFloatType,\n\tUnsignedByteType,\n\tRGBAFormat,\n\tRGFormat,\n\tRGIntegerFormat,\n\tRedFormat,\n\tRedIntegerFormat,\n\tNoColorSpace,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace,\n\tSRGBTransfer,\n\tDataTexture,\n\tREVISION,\n} from 'three';\n\nimport {\n\twrite,\n\tKTX2Container,\n\tKHR_DF_CHANNEL_RGBSDA_ALPHA,\n\tKHR_DF_CHANNEL_RGBSDA_BLUE,\n\tKHR_DF_CHANNEL_RGBSDA_GREEN,\n\tKHR_DF_CHANNEL_RGBSDA_RED,\n\tKHR_DF_MODEL_RGBSDA,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_PRIMARIES_UNSPECIFIED,\n\tKHR_DF_SAMPLE_DATATYPE_FLOAT,\n\tKHR_DF_SAMPLE_DATATYPE_LINEAR,\n\tKHR_DF_SAMPLE_DATATYPE_SIGNED,\n\tKHR_DF_TRANSFER_LINEAR,\n\tKHR_DF_TRANSFER_SRGB,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n} from '../libs/ktx-parse.module.js';\n\n/**\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html\n * - https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html\n * - https://github.com/donmccurdy/KTX-Parse\n */\n\nconst VK_FORMAT_MAP = {\n\n\t[ RGBAFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32G32B32A32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32G32B32A32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16G16B16A16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16G16B16A16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8G8B8A8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8G8B8A8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8G8B8A8_SRGB,\n\t\t},\n\t},\n\n\t[ RGFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32G32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32G32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16G16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16G16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8G8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8G8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8G8_SRGB,\n\t\t},\n\t},\n\n\t[ RedFormat ]: {\n\t\t[ FloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R32_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R32_SFLOAT,\n\t\t},\n\t\t[ HalfFloatType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R16_SFLOAT,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R16_SFLOAT,\n\t\t},\n\t\t[ UnsignedByteType ]: {\n\t\t\t[ NoColorSpace ]: VK_FORMAT_R8_UNORM,\n\t\t\t[ LinearSRGBColorSpace ]: VK_FORMAT_R8_UNORM,\n\t\t\t[ SRGBColorSpace ]: VK_FORMAT_R8_SRGB,\n\t\t},\n\t},\n\n};\n\nconst KHR_DF_CHANNEL_MAP = [\n\n\tKHR_DF_CHANNEL_RGBSDA_RED,\n\tKHR_DF_CHANNEL_RGBSDA_GREEN,\n\tKHR_DF_CHANNEL_RGBSDA_BLUE,\n\tKHR_DF_CHANNEL_RGBSDA_ALPHA,\n\n];\n\n// TODO: sampleLower and sampleUpper may change based on color space.\nconst KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER = {\n\n\t[ FloatType ]: [ 0xbf800000, 0x3f800000 ],\n\t[ HalfFloatType ]: [ 0xbf800000, 0x3f800000 ],\n\t[ UnsignedByteType ]: [ 0, 255 ],\n\n};\n\nconst ERROR_INPUT = 'THREE.KTX2Exporter: Supported inputs are DataTexture, Data3DTexture, or WebGLRenderer and WebGLRenderTarget.';\nconst ERROR_FORMAT = 'THREE.KTX2Exporter: Supported formats are RGBAFormat, RGFormat, or RedFormat.';\nconst ERROR_TYPE = 'THREE.KTX2Exporter: Supported types are FloatType, HalfFloatType, or UnsignedByteType.\"';\nconst ERROR_COLOR_SPACE = 'THREE.KTX2Exporter: Supported color spaces are SRGBColorSpace (UnsignedByteType only), LinearSRGBColorSpace, or NoColorSpace.';\n\n/**\n * An exporter for KTX2.\n *\n * ```js\n * const exporter = new KTX2Exporter();\n * const result = await exporter.parse( dataTexture );\n * ```\n *\n * @three_import import { KTX2Exporter } from 'three/addons/exporters/KTX2Exporter.js';\n */\nexport class KTX2Exporter {\n\n\t/**\n\t * This method has two variants.\n\t *\n\t * - When exporting a data texture, it receives one parameter. The data or 3D data texture.\n\t * - When exporting a render target (e.g. a PMREM), it receives two parameters. The renderer and the\n\t * render target.\n\t *\n\t * @async\n\t * @param {(DataTexture|Data3DTexture|WebGPURenderer|WebGLRenderer)} arg1 - The data texture to export or a renderer.\n\t * @param {RenderTarget} [arg2] - The render target that should be exported\n\t * @return {Promise<Uint8Array>} A Promise that resolves with the exported KTX2.\n\t */\n\tasync parse( arg1, arg2 ) {\n\n\t\tlet texture;\n\n\t\tif ( arg1.isDataTexture || arg1.isData3DTexture ) {\n\n\t\t\ttexture = arg1;\n\n\t\t} else if ( ( arg1.isWebGLRenderer || arg1.isWebGPURenderer ) && arg2.isRenderTarget ) {\n\n\t\t\ttexture = await toDataTexture( arg1, arg2 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( ERROR_INPUT );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_FORMAT );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ][ texture.type ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_TYPE );\n\n\t\t}\n\n\t\tif ( VK_FORMAT_MAP[ texture.format ][ texture.type ][ texture.colorSpace ] === undefined ) {\n\n\t\t\tthrow new Error( ERROR_COLOR_SPACE );\n\n\t\t}\n\n\t\t//\n\n\t\tconst array = texture.image.data;\n\t\tconst channelCount = getChannelCount( texture );\n\t\tconst container = new KTX2Container();\n\n\t\tcontainer.vkFormat = VK_FORMAT_MAP[ texture.format ][ texture.type ][ texture.colorSpace ];\n\t\tcontainer.typeSize = array.BYTES_PER_ELEMENT;\n\t\tcontainer.pixelWidth = texture.image.width;\n\t\tcontainer.pixelHeight = texture.image.height;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tcontainer.pixelDepth = texture.image.depth;\n\n\t\t}\n\n\t\t//\n\n\t\tconst basicDesc = container.dataFormatDescriptor[ 0 ];\n\n\t\tbasicDesc.colorModel = KHR_DF_MODEL_RGBSDA;\n\t\tbasicDesc.colorPrimaries = texture.colorSpace === NoColorSpace\n\t\t\t? KHR_DF_PRIMARIES_UNSPECIFIED\n\t\t\t: KHR_DF_PRIMARIES_BT709;\n\t\tbasicDesc.transferFunction = ColorManagement.getTransfer( texture.colorSpace ) === SRGBTransfer\n\t\t\t? KHR_DF_TRANSFER_SRGB\n\t\t\t: KHR_DF_TRANSFER_LINEAR;\n\n\t\tbasicDesc.texelBlockDimension = [ 0, 0, 0, 0 ];\n\n\t\tbasicDesc.bytesPlane = [\n\n\t\t\tcontainer.typeSize * channelCount, 0, 0, 0, 0, 0, 0, 0,\n\n\t\t];\n\n\t\tfor ( let i = 0; i < channelCount; ++ i ) {\n\n\t\t\tlet channelType = KHR_DF_CHANNEL_MAP[ i ];\n\n\t\t\t// Assign KHR_DF_SAMPLE_DATATYPE_LINEAR if the channel is linear _and_ differs from the transfer function.\n\t\t\tif ( channelType === KHR_DF_CHANNEL_RGBSDA_ALPHA && basicDesc.transferFunction !== KHR_DF_TRANSFER_LINEAR ) {\n\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_LINEAR;\n\n\t\t\t}\n\n\t\t\tif ( texture.type === FloatType || texture.type === HalfFloatType ) {\n\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_FLOAT;\n\t\t\t\tchannelType |= KHR_DF_SAMPLE_DATATYPE_SIGNED;\n\n\t\t\t}\n\n\t\t\tbasicDesc.samples.push( {\n\n\t\t\t\tchannelType: channelType,\n\t\t\t\tbitOffset: i * array.BYTES_PER_ELEMENT * 8,\n\t\t\t\tbitLength: array.BYTES_PER_ELEMENT * 8 - 1,\n\t\t\t\tsamplePosition: [ 0, 0, 0, 0 ],\n\t\t\t\tsampleLower: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[ texture.type ][ 0 ],\n\t\t\t\tsampleUpper: KHR_DF_CHANNEL_SAMPLE_LOWER_UPPER[ texture.type ][ 1 ],\n\n\t\t\t} );\n\n\t\t}\n\n\t\t//\n\n\t\tcontainer.levels = [ {\n\n\t\t\tlevelData: new Uint8Array( array.buffer, array.byteOffset, array.byteLength ),\n\t\t\tuncompressedByteLength: array.byteLength,\n\n\t\t} ];\n\n\t\t//\n\n\t\tcontainer.keyValue[ 'KTXwriter' ] = `three.js ${ REVISION }`;\n\n\t\t//\n\n\t\treturn write( container, { keepWriter: true } );\n\n\t}\n\n}\n\nasync function toDataTexture( renderer, rtt ) {\n\n\tconst channelCount = getChannelCount( rtt.texture );\n\n\tlet view;\n\n\tif ( renderer.isWebGLRenderer ) {\n\n\t\tif ( rtt.texture.type === FloatType ) {\n\n\t\t\tview = new Float32Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else if ( rtt.texture.type === HalfFloatType ) {\n\n\t\t\tview = new Uint16Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else if ( rtt.texture.type === UnsignedByteType ) {\n\n\t\t\tview = new Uint8Array( rtt.width * rtt.height * channelCount );\n\n\t\t} else {\n\n\t\t\tthrow new Error( ERROR_TYPE );\n\n\t\t}\n\n\t\tawait renderer.readRenderTargetPixelsAsync( rtt, 0, 0, rtt.width, rtt.height, view );\n\n\t} else {\n\n\t\tview = await renderer.readRenderTargetPixelsAsync( rtt, 0, 0, rtt.width, rtt.height );\n\n\t}\n\n\tconst texture = new DataTexture( view, rtt.width, rtt.height, rtt.texture.format, rtt.texture.type );\n\n\ttexture.colorSpace = rtt.texture.colorSpace;\n\n\treturn texture;\n\n}\n\nfunction getChannelCount( texture ) {\n\n\tswitch ( texture.format ) {\n\n\t\tcase RGBAFormat:\n\n\t\t\treturn 4;\n\n\t\tcase RGFormat:\n\t\tcase RGIntegerFormat:\n\n\t\t\treturn 2;\n\n\t\tcase RedFormat:\n\t\tcase RedIntegerFormat:\n\n\t\t\treturn 1;\n\n\t\tdefault:\n\n\t\t\tthrow new Error( ERROR_FORMAT );\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]}