{"version":3,"file":"node_modules/three/examples/jsm/exporters/STLExporter.js","names":["Vector3","STLExporter","parse","scene","options","binary","Object","assign","objects","output","triangles","traverse","object","isMesh","geometry","index","positionAttribute","getAttribute","count","push","object3d","offset","arrayBuffer","ArrayBuffer","DataView","setUint32","vA","vB","vC","cb","ab","normal","i","il","length","j","writeFace","getX","a","b","c","fromBufferAttribute","isSkinnedMesh","applyBoneTransform","applyMatrix4","matrixWorld","subVectors","cross","normalize","copy","setFloat32","x","y","z","writeNormal","writeVertex","setUint16","vertex"],"sources":["node_modules/three/examples/jsm/exporters/STLExporter.js"],"sourcesContent":["import { Vector3 } from 'three';\n\n/**\n * An exporter for STL.\n *\n * STL files describe only the surface geometry of a three-dimensional object without\n * any representation of color, texture or other common model attributes. The STL format\n * specifies both ASCII and binary representations, with binary being more compact.\n * STL files contain no scale information or indexes, and the units are arbitrary.\n *\n * ```js\n * const exporter = new STLExporter();\n * const data = exporter.parse( mesh, { binary: true } );\n * ```\n *\n * @three_import import { STLExporter } from 'three/addons/exporters/STLExporter.js';\n */\nclass STLExporter {\n\n\t/**\n\t * Parses the given 3D object and generates the STL output.\n\t *\n\t * If the 3D object is composed of multiple children and geometry, they are merged into a single mesh in the file.\n\t *\n\t * @param {Object3D} scene - A scene, mesh or any other 3D object containing meshes to encode.\n\t * @param {STLExporter~Options} options - The export options.\n\t * @return {string|ArrayBuffer} The exported STL.\n\t */\n\tparse( scene, options = {} ) {\n\n\t\toptions = Object.assign( {\n\t\t\tbinary: false\n\t\t}, options );\n\n\t\tconst binary = options.binary;\n\n\t\t//\n\n\t\tconst objects = [];\n\t\tlet triangles = 0;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tconst geometry = object.geometry;\n\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t\ttriangles += ( index !== null ) ? ( index.count / 3 ) : ( positionAttribute.count / 3 );\n\n\t\t\t\tobjects.push( {\n\t\t\t\t\tobject3d: object,\n\t\t\t\t\tgeometry: geometry\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tlet output;\n\t\tlet offset = 80; // skip header\n\n\t\tif ( binary === true ) {\n\n\t\t\tconst bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n\t\t\tconst arrayBuffer = new ArrayBuffer( bufferLength );\n\t\t\toutput = new DataView( arrayBuffer );\n\t\t\toutput.setUint32( offset, triangles, true ); offset += 4;\n\n\t\t} else {\n\n\t\t\toutput = '';\n\t\t\toutput += 'solid exported\\n';\n\n\t\t}\n\n\t\tconst vA = new Vector3();\n\t\tconst vB = new Vector3();\n\t\tconst vC = new Vector3();\n\t\tconst cb = new Vector3();\n\t\tconst ab = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tfor ( let i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\tconst object = objects[ i ].object3d;\n\t\t\tconst geometry = objects[ i ].geometry;\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed geometry\n\n\t\t\t\tfor ( let j = 0; j < index.count; j += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( j + 0 );\n\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\twriteFace( a, b, c, positionAttribute, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed geometry\n\n\t\t\t\tfor ( let j = 0; j < positionAttribute.count; j += 3 ) {\n\n\t\t\t\t\tconst a = j + 0;\n\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\twriteFace( a, b, c, positionAttribute, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( binary === false ) {\n\n\t\t\toutput += 'endsolid exported\\n';\n\n\t\t}\n\n\t\treturn output;\n\n\t\tfunction writeFace( a, b, c, positionAttribute, object ) {\n\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\n\n\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\tobject.applyBoneTransform( a, vA );\n\t\t\t\tobject.applyBoneTransform( b, vB );\n\t\t\t\tobject.applyBoneTransform( c, vC );\n\n\t\t\t}\n\n\t\t\tvA.applyMatrix4( object.matrixWorld );\n\t\t\tvB.applyMatrix4( object.matrixWorld );\n\t\t\tvC.applyMatrix4( object.matrixWorld );\n\n\t\t\twriteNormal( vA, vB, vC );\n\n\t\t\twriteVertex( vA );\n\t\t\twriteVertex( vB );\n\t\t\twriteVertex( vC );\n\n\t\t\tif ( binary === true ) {\n\n\t\t\t\toutput.setUint16( offset, 0, true ); offset += 2;\n\n\t\t\t} else {\n\n\t\t\t\toutput += '\\t\\tendloop\\n';\n\t\t\t\toutput += '\\tendfacet\\n';\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction writeNormal( vA, vB, vC ) {\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab ).normalize();\n\n\t\t\tnormal.copy( cb ).normalize();\n\n\t\t\tif ( binary === true ) {\n\n\t\t\t\toutput.setFloat32( offset, normal.x, true ); offset += 4;\n\t\t\t\toutput.setFloat32( offset, normal.y, true ); offset += 4;\n\t\t\t\toutput.setFloat32( offset, normal.z, true ); offset += 4;\n\n\t\t\t} else {\n\n\t\t\t\toutput += '\\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n\t\t\t\toutput += '\\t\\touter loop\\n';\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction writeVertex( vertex ) {\n\n\t\t\tif ( binary === true ) {\n\n\t\t\t\toutput.setFloat32( offset, vertex.x, true ); offset += 4;\n\t\t\t\toutput.setFloat32( offset, vertex.y, true ); offset += 4;\n\t\t\t\toutput.setFloat32( offset, vertex.z, true ); offset += 4;\n\n\t\t\t} else {\n\n\t\t\t\toutput += '\\t\\t\\tvertex ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Export options of `STLExporter`.\n *\n * @typedef {Object} STLExporter~Options\n * @property {boolean} [binary=false] - Whether to export in binary format or ASCII.\n **/\n\nexport { STLExporter };\n"],"mappings":"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","ignoreList":[]}