{"version":3,"file":"node_modules/three/examples/jsm/exporters/USDZExporter.js","names":["NoColorSpace","DoubleSide","Color","strToU8","zipSync","USDNode","constructor","name","type","metadata","properties","this","children","addMetadata","key","value","push","addProperty","property","addChild","child","toString","indent","pad","repeat","formattedMetadata","map","item","Array","isArray","lines","forEach","line","join","meta","length","l","m","c","bodyLines","i","bodyContent","USDZExporter","textureUtils","setTextureUtils","utils","parse","scene","onDone","onError","options","parseAsync","then","catch","Object","assign","ar","anchoring","planeAnchoring","alignment","includeAnchoringProperties","onlyVisible","quickLookCompatible","maxTextureSize","usedNames","Set","files","modelFileName","root","scenesNode","sceneName","sceneNode","output","materials","textures","buildHierarchy","materialsNode","buildMaterials","buildHeader","id","texture","isCompressedTexture","Error","decompress","canvas","imageToCanvas","image","flipY","blob","Promise","resolve","toBlob","Uint8Array","arrayBuffer","offset","filename","file","offsetMod64","padding","extra","level","getName","object","namesSet","replace","test","isCamera","has","add","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","translate","drawImage","PRECISION","parentNode","visible","childNode","isMesh","geometry","material","isMeshStandardMaterial","geometryFileName","meshObject","buildMeshObject","uuid","buildMesh","console","warn","buildCamera","buildXform","transform","buildMatrix","matrix","determinant","node","array","elements","buildMatrixRow","meshNode","buildMeshNode","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","attribute","undefined","buildVector2Array","colorAttribute","color","index","fill","getX","x","y","getY","z","getZ","toPrecision","buildMaterial","materialNode","buildTextureNodes","mapType","source","uv","channel","WRAPPINGS","clone","rotation","xRotationOffset","sin","yRotationOffset","cos","primvarReaderNode","transform2dNode","PI","toFixed","buildVector2","textureNode","buildColor4","colorSpace","wrapS","wrapT","transparent","alphaTest","side","previewSurfaceNode","buildColor","emissiveMap","emissiveColor","emissive","r","emissiveIntensity","g","b","getHex","normalMap","aoMap","aoColor","aoMapIntensity","roughnessMap","roughnessColor","roughness","metalnessMap","metalnessColor","metalness","alphaMap","opacity","isMeshPhysicalMaterial","clearcoatMap","clearcoatColor","clearcoat","clearcoatRoughnessMap","clearcoatRoughnessColor","clearcoatRoughness","ior","vector","camera","projection","isOrthographicCamera","clippingRange","near","far","horizontalAperture","verticalAperture","abs","left","right","getFilmWidth","top","bottom","getFilmHeight","isPerspectiveCamera","focalLength","getFocalLength","focusDistance","focus"],"sources":["node_modules/three/examples/jsm/exporters/USDZExporter.js"],"sourcesContent":["import {\n\tNoColorSpace,\n\tDoubleSide,\n\tColor,\n} from 'three';\n\nimport {\n\tstrToU8,\n\tzipSync,\n} from '../libs/fflate.module.js';\n\nclass USDNode {\n\n\tconstructor( name, type = '', metadata = [], properties = [] ) {\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t\tthis.properties = properties;\n\t\tthis.children = [];\n\n\t}\n\n\taddMetadata( key, value ) {\n\n\t\tthis.metadata.push( { key, value } );\n\n\t}\n\n\taddProperty( property, metadata = [] ) {\n\n\t\tthis.properties.push( { property, metadata } );\n\n\t}\n\n\taddChild( child ) {\n\n\t\tthis.children.push( child );\n\n\t}\n\n\ttoString( indent = 0 ) {\n\n\t\tconst pad = '\\t'.repeat( indent );\n\n\t\tconst formattedMetadata = this.metadata.map( ( item ) => {\n\n\t\t\tconst key = item.key;\n\t\t\tconst value = item.value;\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tconst lines = [];\n\t\t\t\tlines.push( `${key} = {` );\n\t\t\t\tvalue.forEach( ( line ) => {\n\n\t\t\t\t\tlines.push( `${pad}\\t\\t${line}` );\n\n\t\t\t\t} );\n\t\t\t\tlines.push( `${pad}\\t}` );\n\t\t\t\treturn lines.join( '\\n' );\n\n\t\t\t} else {\n\n\t\t\t\treturn `${key} = ${value}`;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst meta = formattedMetadata.length\n\t\t\t? ` (\\n${formattedMetadata\n\t\t\t\t.map( ( l ) => `${pad}\\t${l}` )\n\t\t\t\t.join( '\\n' )}\\n${pad})`\n\t\t\t: '';\n\n\t\tconst properties = this.properties.map( ( l ) => {\n\n\t\t\tconst property = l.property;\n\t\t\tconst metadata = l.metadata.length\n\t\t\t\t? ` (\\n${l.metadata.map( ( m ) => `${pad}\\t\\t${m}` ).join( '\\n' )}\\n${pad}\\t)`\n\t\t\t\t: '';\n\t\t\treturn `${pad}\\t${property}${metadata}`;\n\n\t\t} );\n\t\tconst children = this.children.map( ( c ) => c.toString( indent + 1 ) );\n\n\t\tconst bodyLines = [];\n\n\t\tif ( properties.length > 0 ) {\n\n\t\t\tbodyLines.push( ...properties );\n\n\t\t}\n\n\t\tif ( children.length > 0 ) {\n\n\t\t\tif ( properties.length > 0 ) {\n\n\t\t\t\tbodyLines.push( '' );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tbodyLines.push( children[ i ] );\n\t\t\t\tif ( i < children.length - 1 ) {\n\n\t\t\t\t\tbodyLines.push( '' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bodyContent = bodyLines.join( '\\n' );\n\n\t\tconst type = this.type ? this.type + ' ' : '';\n\n\t\treturn `${pad}def ${type}\"${this.name}\"${meta}\\n${pad}{\\n${bodyContent}\\n${pad}}`;\n\n\t}\n\n}\n\n/**\n * An exporter for USDZ.\n *\n * ```js\n * const exporter = new USDZExporter();\n * const arraybuffer = await exporter.parseAsync( scene );\n * ```\n *\n * @three_import import { USDZExporter } from 'three/addons/exporters/USDZExporter.js';\n */\nclass USDZExporter {\n\n\t/**\n\t * Constructs a new USDZ exporter.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A reference to a texture utils module.\n\t\t *\n\t\t * @type {?(WebGLTextureUtils|WebGPUTextureUtils)}\n\t\t * @default null\n\t\t */\n\t\tthis.textureUtils = null;\n\n\t}\n\n\t/**\n\t * Sets the texture utils for this exporter. Only relevant when compressed textures have to be exported.\n\t *\n\t * Depending on whether you use {@link WebGLRenderer} or {@link WebGPURenderer}, you must inject the\n\t * corresponding texture utils {@link WebGLTextureUtils} or {@link WebGPUTextureUtils}.\n\t *\n\t * @param {WebGLTextureUtils|WebGPUTextureUtils} utils - The texture utils.\n\t */\n\tsetTextureUtils( utils ) {\n\n\t\tthis.textureUtils = utils;\n\n\t}\n\n\t/**\n\t * Parse the given 3D object and generates the USDZ output.\n\t *\n\t * @param {Object3D} scene - The 3D object to export.\n\t * @param {USDZExporter~OnDone} onDone - A callback function that is executed when the export has finished.\n\t * @param {USDZExporter~OnError} onError - A callback function that is executed when an error happens.\n\t * @param {USDZExporter~Options} options - The export options.\n\t */\n\tparse( scene, onDone, onError, options ) {\n\n\t\tthis.parseAsync( scene, options ).then( onDone ).catch( onError );\n\n\t}\n\n\t/**\n\t * Async version of {@link USDZExporter#parse}.\n\t *\n\t * @async\n\t * @param {Object3D} scene - The 3D object to export.\n\t * @param {USDZExporter~Options} options - The export options.\n\t * @return {Promise<ArrayBuffer>} A Promise that resolved with the exported USDZ data.\n\t */\n\tasync parseAsync( scene, options = {} ) {\n\n\t\toptions = Object.assign(\n\t\t\t{\n\t\t\t\tar: {\n\t\t\t\t\tanchoring: { type: 'plane' },\n\t\t\t\t\tplaneAnchoring: { alignment: 'horizontal' },\n\t\t\t\t},\n\t\t\t\tincludeAnchoringProperties: true,\n\t\t\t\tonlyVisible: true,\n\t\t\t\tquickLookCompatible: false,\n\t\t\t\tmaxTextureSize: 1024,\n\t\t\t},\n\t\t\toptions\n\t\t);\n\n\t\tconst usedNames = new Set();\n\n\t\tconst files = {};\n\t\tconst modelFileName = 'model.usda';\n\n\t\t// model file should be first in USDZ archive so we init it here\n\t\tfiles[ modelFileName ] = null;\n\n\t\tconst root = new USDNode( 'Root', 'Xform' );\n\t\tconst scenesNode = new USDNode( 'Scenes', 'Scope' );\n\t\tscenesNode.addMetadata( 'kind', '\"sceneLibrary\"' );\n\t\troot.addChild( scenesNode );\n\n\t\tconst sceneName = 'Scene';\n\t\tconst sceneNode = new USDNode( sceneName, 'Xform' );\n\t\tsceneNode.addMetadata( 'customData', [\n\t\t\t'bool preliminary_collidesWithEnvironment = 0',\n\t\t\t`string sceneName = \"${sceneName}\"`,\n\t\t] );\n\t\tsceneNode.addMetadata( 'sceneName', `\"${sceneName}\"` );\n\t\tif ( options.includeAnchoringProperties ) {\n\n\t\t\tsceneNode.addProperty(\n\t\t\t\t`token preliminary:anchoring:type = \"${options.ar.anchoring.type}\"`\n\t\t\t);\n\t\t\tsceneNode.addProperty(\n\t\t\t\t`token preliminary:planeAnchoring:alignment = \"${options.ar.planeAnchoring.alignment}\"`\n\t\t\t);\n\n\t\t}\n\n\t\tscenesNode.addChild( sceneNode );\n\n\t\tlet output;\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tbuildHierarchy( scene, sceneNode, materials, usedNames, files, options );\n\n\t\tconst materialsNode = buildMaterials(\n\t\t\tmaterials,\n\t\t\ttextures,\n\t\t\toptions.quickLookCompatible\n\t\t);\n\n\t\toutput =\n\t\t\tbuildHeader() +\n\t\t\t'\\n' +\n\t\t\troot.toString() +\n\t\t\t'\\n\\n' +\n\t\t\tmaterialsNode.toString();\n\n\t\tfiles[ modelFileName ] = strToU8( output );\n\t\toutput = null;\n\n\t\tfor ( const id in textures ) {\n\n\t\t\tlet texture = textures[ id ];\n\n\t\t\tif ( texture.isCompressedTexture === true ) {\n\n\t\t\t\tif ( this.textureUtils === null ) {\n\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'THREE.USDZExporter: setTextureUtils() must be called to process compressed textures.'\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = await this.textureUtils.decompress( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst canvas = imageToCanvas(\n\t\t\t\ttexture.image,\n\t\t\t\ttexture.flipY,\n\t\t\t\toptions.maxTextureSize\n\t\t\t);\n\t\t\tconst blob = await new Promise( ( resolve ) =>\n\t\t\t\tcanvas.toBlob( resolve, 'image/png', 1 )\n\t\t\t);\n\n\t\t\tfiles[ `textures/Texture_${id}.png` ] = new Uint8Array(\n\t\t\t\tawait blob.arrayBuffer()\n\t\t\t);\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nfunction getName( object, namesSet ) {\n\n\tlet name = object.name;\n\tname = name.replace( /[^A-Za-z0-9_]/g, '' );\n\tif ( /^[0-9]/.test( name ) ) {\n\n\t\tname = '_' + name;\n\n\t}\n\n\tif ( name === '' ) {\n\n\t\tif ( object.isCamera ) {\n\n\t\t\tname = 'Camera';\n\n\t\t} else {\n\n\t\t\tname = 'Object';\n\n\t\t}\n\n\t}\n\n\tif ( namesSet.has( name ) ) {\n\n\t\tname = name + '_' + object.id;\n\n\t}\n\n\tnamesSet.add( name );\n\n\treturn name;\n\n}\n\nfunction imageToCanvas( image, flipY, maxTextureSize ) {\n\n\tif (\n\t\t( typeof HTMLImageElement !== 'undefined' &&\n\t\t\timage instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' &&\n\t\t\timage instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' &&\n\t\t\timage instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap )\n\t) {\n\n\t\tconst scale = maxTextureSize / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\n\t\t// TODO: We should be able to do this in the UsdTransform2d?\n\n\t\tif ( flipY === true ) {\n\n\t\t\tcontext.translate( 0, canvas.height );\n\t\t\tcontext.scale( 1, - 1 );\n\n\t\t}\n\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\treturn canvas;\n\n\t} else {\n\n\t\tthrow new Error(\n\t\t\t'THREE.USDZExporter: No valid image data found. Unable to process texture.'\n\t\t);\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n\tcustomLayerData = {\n\t\tstring creator = \"Three.js USDZExporter\"\n\t}\n\tdefaultPrim = \"Root\"\n\tmetersPerUnit = 1\n\tupAxis = \"Y\"\n)\n`;\n\n}\n\n// Xform\n\nfunction buildHierarchy( object, parentNode, materials, usedNames, files, options ) {\n\n\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\tconst child = object.children[ i ];\n\n\t\tif ( child.visible === false && options.onlyVisible === true ) continue;\n\n\t\tlet childNode;\n\n\t\tif ( child.isMesh ) {\n\n\t\t\tconst geometry = child.geometry;\n\t\t\tconst material = child.material;\n\n\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\tconst geometryFileName = 'geometries/Geometry_' + geometry.id + '.usda';\n\n\t\t\t\tif ( ! ( geometryFileName in files ) ) {\n\n\t\t\t\t\tconst meshObject = buildMeshObject( geometry );\n\t\t\t\t\tfiles[ geometryFileName ] = strToU8(\n\t\t\t\t\t\tbuildHeader() + '\\n' + meshObject.toString()\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( material.uuid in materials ) ) {\n\n\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t}\n\n\t\t\t\tchildNode = buildMesh(\n\t\t\t\t\tchild,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tmaterials[ material.uuid ],\n\t\t\t\t\tusedNames\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.USDZExporter: Unsupported material type (USDZ only supports MeshStandardMaterial)',\n\t\t\t\t\tchild\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t} else if ( child.isCamera ) {\n\n\t\t\tchildNode = buildCamera( child, usedNames );\n\n\t\t} else {\n\n\t\t\tchildNode = buildXform( child, usedNames );\n\n\t\t}\n\n\t\tif ( childNode ) {\n\n\t\t\tparentNode.addChild( childNode );\n\t\t\tbuildHierarchy( child, childNode, materials, usedNames, files, options );\n\n\t\t}\n\n\t}\n\n}\n\nfunction buildXform( object, usedNames ) {\n\n\tconst name = getName( object, usedNames );\n\tconst transform = buildMatrix( object.matrix );\n\n\tif ( object.matrix.determinant() < 0 ) {\n\n\t\tconsole.warn(\n\t\t\t'THREE.USDZExporter: USDZ does not support negative scales',\n\t\t\tobject\n\t\t);\n\n\t}\n\n\tconst node = new USDNode( name, 'Xform' );\n\n\tnode.addProperty( `matrix4d xformOp:transform = ${transform}` );\n\tnode.addProperty( 'uniform token[] xformOpOrder = [\"xformOp:transform\"]' );\n\n\treturn node;\n\n}\n\nfunction buildMesh( object, geometry, material, usedNames ) {\n\n\tconst node = buildXform( object, usedNames );\n\n\tnode.addMetadata(\n\t\t'prepend references',\n\t\t`@./geometries/Geometry_${geometry.id}.usda@</Geometry>`\n\t);\n\tnode.addMetadata( 'prepend apiSchemas', '[\"MaterialBindingAPI\"]' );\n\n\tnode.addProperty(\n\t\t`rel material:binding = </Materials/Material_${material.id}>`\n\t);\n\n\treturn node;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${buildMatrixRow( array, 0 )}, ${buildMatrixRow(\n\t\tarray,\n\t\t4\n\t)}, ${buildMatrixRow( array, 8 )}, ${buildMatrixRow( array, 12 )} )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${array[ offset + 0 ]}, ${array[ offset + 1 ]}, ${array[ offset + 2 ]}, ${\n\t\tarray[ offset + 3 ]\n\t})`;\n\n}\n\n// Mesh\n\nfunction buildMeshObject( geometry ) {\n\n\tconst node = new USDNode( 'Geometry' );\n\n\tconst meshNode = buildMeshNode( geometry );\n\tnode.addChild( meshNode );\n\n\treturn node;\n\n}\n\nfunction buildMeshNode( geometry ) {\n\n\tconst name = 'Geometry';\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\tconst node = new USDNode( name, 'Mesh' );\n\n\tnode.addProperty(\n\t\t`int[] faceVertexCounts = [${buildMeshVertexCount( geometry )}]`\n\t);\n\tnode.addProperty(\n\t\t`int[] faceVertexIndices = [${buildMeshVertexIndices( geometry )}]`\n\t);\n\tnode.addProperty(\n\t\t`normal3f[] normals = [${buildVector3Array( attributes.normal, count )}]`,\n\t\t[ 'interpolation = \"vertex\"' ]\n\t);\n\tnode.addProperty(\n\t\t`point3f[] points = [${buildVector3Array( attributes.position, count )}]`\n\t);\n\n\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\tconst id = i > 0 ? i : '';\n\t\tconst attribute = attributes[ 'uv' + id ];\n\t\tif ( attribute !== undefined ) {\n\n\t\t\tnode.addProperty(\n\t\t\t\t`texCoord2f[] primvars:st${id} = [${buildVector2Array( attribute )}]`,\n\t\t\t\t[ 'interpolation = \"vertex\"' ]\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tconst colorAttribute = attributes.color;\n\tif ( colorAttribute !== undefined ) {\n\n\t\tnode.addProperty(\n\t\t\t`color3f[] primvars:displayColor = [${buildVector3Array(\n\t\t\t\tcolorAttribute,\n\t\t\t\tcount\n\t\t\t)}]`,\n\t\t\t[ 'interpolation = \"vertex\"' ]\n\t\t);\n\n\t}\n\n\tnode.addProperty( 'uniform token subdivisionScheme = \"none\"' );\n\n\treturn node;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count =\n\t\tgeometry.index !== null\n\t\t\t? geometry.index.count\n\t\t\t: geometry.attributes.position.count;\n\n\treturn Array( count / 3 )\n\t\t.fill( 3 )\n\t\t.join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tconst index = geometry.index;\n\tconst array = [];\n\n\tif ( index !== null ) {\n\n\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\tarray.push( index.getX( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst length = geometry.attributes.position.count;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tarray.push( i );\n\n\t\t}\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\t\tconst z = attribute.getZ( i );\n\n\t\tarray.push(\n\t\t\t`(${x.toPrecision( PRECISION )}, ${y.toPrecision(\n\t\t\t\tPRECISION\n\t\t\t)}, ${z.toPrecision( PRECISION )})`\n\t\t);\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute ) {\n\n\tconst array = [];\n\n\tfor ( let i = 0; i < attribute.count; i ++ ) {\n\n\t\tconst x = attribute.getX( i );\n\t\tconst y = attribute.getY( i );\n\n\t\tarray.push(\n\t\t\t`(${x.toPrecision( PRECISION )}, ${1 - y.toPrecision( PRECISION )})`\n\t\t);\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\n// Materials\n\nfunction buildMaterials( materials, textures, quickLookCompatible = false ) {\n\n\tconst materialsNode = new USDNode( 'Materials' );\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tmaterialsNode.addChild(\n\t\t\tbuildMaterial( material, textures, quickLookCompatible )\n\t\t);\n\n\t}\n\n\treturn materialsNode;\n\n}\n\nfunction buildMaterial( material, textures, quickLookCompatible = false ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst materialNode = new USDNode( `Material_${material.id}`, 'Material' );\n\n\tfunction buildTextureNodes( texture, mapType, color ) {\n\n\t\tconst id = texture.source.id + '_' + texture.flipY;\n\n\t\ttextures[ id ] = texture;\n\n\t\tconst uv = texture.channel > 0 ? 'st' + texture.channel : 'st';\n\n\t\tconst WRAPPINGS = {\n\t\t\t1000: 'repeat', // RepeatWrapping\n\t\t\t1001: 'clamp', // ClampToEdgeWrapping\n\t\t\t1002: 'mirror', // MirroredRepeatWrapping\n\t\t};\n\n\t\tconst repeat = texture.repeat.clone();\n\t\tconst offset = texture.offset.clone();\n\t\tconst rotation = texture.rotation;\n\n\t\t// rotation is around the wrong point. after rotation we need to shift offset again so that we're rotating around the right spot\n\t\tconst xRotationOffset = Math.sin( rotation );\n\t\tconst yRotationOffset = Math.cos( rotation );\n\n\t\t// texture coordinates start in the opposite corner, need to correct\n\t\toffset.y = 1 - offset.y - repeat.y;\n\n\t\t// turns out QuickLook is buggy and interprets texture repeat inverted/applies operations in a different order.\n\t\t// Apple Feedback: \tFB10036297 and FB11442287\n\t\tif ( quickLookCompatible ) {\n\n\t\t\t// This is NOT correct yet in QuickLook, but comes close for a range of models.\n\t\t\t// It becomes more incorrect the bigger the offset is\n\n\t\t\toffset.x = offset.x / repeat.x;\n\t\t\toffset.y = offset.y / repeat.y;\n\n\t\t\toffset.x += xRotationOffset / repeat.x;\n\t\t\toffset.y += yRotationOffset - 1;\n\n\t\t} else {\n\n\t\t\t// results match glTF results exactly. verified correct in usdview.\n\t\t\toffset.x += xRotationOffset * repeat.x;\n\t\t\toffset.y += ( 1 - yRotationOffset ) * repeat.y;\n\n\t\t}\n\n\t\tconst primvarReaderNode = new USDNode( `PrimvarReader_${mapType}`, 'Shader' );\n\t\tprimvarReaderNode.addProperty(\n\t\t\t'uniform token info:id = \"UsdPrimvarReader_float2\"'\n\t\t);\n\t\tprimvarReaderNode.addProperty( 'float2 inputs:fallback = (0.0, 0.0)' );\n\t\tprimvarReaderNode.addProperty( `token inputs:varname = \"${uv}\"` );\n\t\tprimvarReaderNode.addProperty( 'float2 outputs:result' );\n\n\t\tconst transform2dNode = new USDNode( `Transform2d_${mapType}`, 'Shader' );\n\t\ttransform2dNode.addProperty( 'uniform token info:id = \"UsdTransform2d\"' );\n\t\ttransform2dNode.addProperty(\n\t\t\t`token inputs:in.connect = </Materials/Material_${material.id}/PrimvarReader_${mapType}.outputs:result>`\n\t\t);\n\t\ttransform2dNode.addProperty(\n\t\t\t`float inputs:rotation = ${( rotation * ( 180 / Math.PI ) ).toFixed(\n\t\t\t\tPRECISION\n\t\t\t)}`\n\t\t);\n\t\ttransform2dNode.addProperty(\n\t\t\t`float2 inputs:scale = ${buildVector2( repeat )}`\n\t\t);\n\t\ttransform2dNode.addProperty(\n\t\t\t`float2 inputs:translation = ${buildVector2( offset )}`\n\t\t);\n\t\ttransform2dNode.addProperty( 'float2 outputs:result' );\n\n\t\tconst textureNode = new USDNode(\n\t\t\t`Texture_${texture.id}_${mapType}`,\n\t\t\t'Shader'\n\t\t);\n\t\ttextureNode.addProperty( 'uniform token info:id = \"UsdUVTexture\"' );\n\t\ttextureNode.addProperty( `asset inputs:file = @textures/Texture_${id}.png@` );\n\t\ttextureNode.addProperty(\n\t\t\t`float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>`\n\t\t);\n\n\t\tif ( color !== undefined ) {\n\n\t\t\ttextureNode.addProperty( `float4 inputs:scale = ${buildColor4( color )}` );\n\n\t\t}\n\n\t\ttextureNode.addProperty(\n\t\t\t`token inputs:sourceColorSpace = \"${\n\t\t\t\ttexture.colorSpace === NoColorSpace ? 'raw' : 'sRGB'\n\t\t\t}\"`\n\t\t);\n\t\ttextureNode.addProperty(\n\t\t\t`token inputs:wrapS = \"${WRAPPINGS[ texture.wrapS ]}\"`\n\t\t);\n\t\ttextureNode.addProperty(\n\t\t\t`token inputs:wrapT = \"${WRAPPINGS[ texture.wrapT ]}\"`\n\t\t);\n\t\ttextureNode.addProperty( 'float outputs:r' );\n\t\ttextureNode.addProperty( 'float outputs:g' );\n\t\ttextureNode.addProperty( 'float outputs:b' );\n\t\ttextureNode.addProperty( 'float3 outputs:rgb' );\n\n\t\tif ( material.transparent || material.alphaTest > 0.0 ) {\n\n\t\t\ttextureNode.addProperty( 'float outputs:a' );\n\n\t\t}\n\n\t\treturn [ primvarReaderNode, transform2dNode, textureNode ];\n\n\t}\n\n\tif ( material.side === DoubleSide ) {\n\n\t\tconsole.warn(\n\t\t\t'THREE.USDZExporter: USDZ does not support double sided materials',\n\t\t\tmaterial\n\t\t);\n\n\t}\n\n\tconst previewSurfaceNode = new USDNode( 'PreviewSurface', 'Shader' );\n\tpreviewSurfaceNode.addProperty( 'uniform token info:id = \"UsdPreviewSurface\"' );\n\n\tif ( material.map !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`\n\t\t);\n\n\t\tif ( material.transparent ) {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`\n\t\t\t);\n\n\t\t} else if ( material.alphaTest > 0.0 ) {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:a>`\n\t\t\t);\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:opacityThreshold = ${material.alphaTest}`\n\t\t\t);\n\n\t\t}\n\n\t\tconst textureNodes = buildTextureNodes(\n\t\t\tmaterial.map,\n\t\t\t'diffuse',\n\t\t\tmaterial.color\n\t\t);\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t} else {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`color3f inputs:diffuseColor = ${buildColor( material.color )}`\n\t\t);\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`\n\t\t);\n\n\t\tconst emissiveColor = new Color(\n\t\t\tmaterial.emissive.r * material.emissiveIntensity,\n\t\t\tmaterial.emissive.g * material.emissiveIntensity,\n\t\t\tmaterial.emissive.b * material.emissiveIntensity\n\t\t);\n\t\tconst textureNodes = buildTextureNodes(\n\t\t\tmaterial.emissiveMap,\n\t\t\t'emissive',\n\t\t\temissiveColor\n\t\t);\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`color3f inputs:emissiveColor = ${buildColor( material.emissive )}`\n\t\t);\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`\n\t\t);\n\n\t\tconst textureNodes = buildTextureNodes( material.normalMap, 'normal' );\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`\n\t\t);\n\n\t\tconst aoColor = new Color(\n\t\t\tmaterial.aoMapIntensity,\n\t\t\tmaterial.aoMapIntensity,\n\t\t\tmaterial.aoMapIntensity\n\t\t);\n\t\tconst textureNodes = buildTextureNodes(\n\t\t\tmaterial.aoMap,\n\t\t\t'occlusion',\n\t\t\taoColor\n\t\t);\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t}\n\n\tif ( material.roughnessMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`\n\t\t);\n\n\t\tconst roughnessColor = new Color(\n\t\t\tmaterial.roughness,\n\t\t\tmaterial.roughness,\n\t\t\tmaterial.roughness\n\t\t);\n\t\tconst textureNodes = buildTextureNodes(\n\t\t\tmaterial.roughnessMap,\n\t\t\t'roughness',\n\t\t\troughnessColor\n\t\t);\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t} else {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:roughness = ${material.roughness}`\n\t\t);\n\n\t}\n\n\tif ( material.metalnessMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`\n\t\t);\n\n\t\tconst metalnessColor = new Color(\n\t\t\tmaterial.metalness,\n\t\t\tmaterial.metalness,\n\t\t\tmaterial.metalness\n\t\t);\n\t\tconst textureNodes = buildTextureNodes(\n\t\t\tmaterial.metalnessMap,\n\t\t\t'metallic',\n\t\t\tmetalnessColor\n\t\t);\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t} else {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:metallic = ${material.metalness}`\n\t\t);\n\n\t}\n\n\tif ( material.alphaMap !== null ) {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:opacity.connect = </Materials/Material_${material.id}/Texture_${material.alphaMap.id}_opacity.outputs:r>`\n\t\t);\n\t\tpreviewSurfaceNode.addProperty( 'float inputs:opacityThreshold = 0.0001' );\n\n\t\tconst textureNodes = buildTextureNodes( material.alphaMap, 'opacity' );\n\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t} else {\n\n\t\tpreviewSurfaceNode.addProperty(\n\t\t\t`float inputs:opacity = ${material.opacity}`\n\t\t);\n\n\t}\n\n\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\tif ( material.clearcoatMap !== null ) {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:clearcoat.connect = </Materials/Material_${material.id}/Texture_${material.clearcoatMap.id}_clearcoat.outputs:r>`\n\t\t\t);\n\n\t\t\tconst clearcoatColor = new Color(\n\t\t\t\tmaterial.clearcoat,\n\t\t\t\tmaterial.clearcoat,\n\t\t\t\tmaterial.clearcoat\n\t\t\t);\n\t\t\tconst textureNodes = buildTextureNodes(\n\t\t\t\tmaterial.clearcoatMap,\n\t\t\t\t'clearcoat',\n\t\t\t\tclearcoatColor\n\t\t\t);\n\t\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t\t} else {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:clearcoat = ${material.clearcoat}`\n\t\t\t);\n\n\t\t}\n\n\t\tif ( material.clearcoatRoughnessMap !== null ) {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:clearcoatRoughness.connect = </Materials/Material_${material.id}/Texture_${material.clearcoatRoughnessMap.id}_clearcoatRoughness.outputs:g>`\n\t\t\t);\n\n\t\t\tconst clearcoatRoughnessColor = new Color(\n\t\t\t\tmaterial.clearcoatRoughness,\n\t\t\t\tmaterial.clearcoatRoughness,\n\t\t\t\tmaterial.clearcoatRoughness\n\t\t\t);\n\t\t\tconst textureNodes = buildTextureNodes(\n\t\t\t\tmaterial.clearcoatRoughnessMap,\n\t\t\t\t'clearcoatRoughness',\n\t\t\t\tclearcoatRoughnessColor\n\t\t\t);\n\t\t\ttextureNodes.forEach( ( node ) => materialNode.addChild( node ) );\n\n\t\t} else {\n\n\t\t\tpreviewSurfaceNode.addProperty(\n\t\t\t\t`float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`\n\t\t\t);\n\n\t\t}\n\n\t\tpreviewSurfaceNode.addProperty( `float inputs:ior = ${material.ior}` );\n\n\t}\n\n\tpreviewSurfaceNode.addProperty( 'int inputs:useSpecularWorkflow = 0' );\n\tpreviewSurfaceNode.addProperty( 'token outputs:surface' );\n\n\tmaterialNode.addChild( previewSurfaceNode );\n\n\tmaterialNode.addProperty(\n\t\t`token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>`\n\t);\n\n\treturn materialNode;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${color.r}, ${color.g}, ${color.b})`;\n\n}\n\nfunction buildColor4( color ) {\n\n\treturn `(${color.r}, ${color.g}, ${color.b}, 1.0)`;\n\n}\n\nfunction buildVector2( vector ) {\n\n\treturn `(${vector.x}, ${vector.y})`;\n\n}\n\nfunction buildCamera( camera, usedNames ) {\n\n\tconst name = getName( camera, usedNames );\n\n\tconst transform = buildMatrix( camera.matrix );\n\n\tif ( camera.matrix.determinant() < 0 ) {\n\n\t\tconsole.warn(\n\t\t\t'THREE.USDZExporter: USDZ does not support negative scales',\n\t\t\tcamera\n\t\t);\n\n\t}\n\n\tconst node = new USDNode( name, 'Camera' );\n\tnode.addProperty( `matrix4d xformOp:transform = ${transform}` );\n\tnode.addProperty( 'uniform token[] xformOpOrder = [\"xformOp:transform\"]' );\n\n\tconst projection = camera.isOrthographicCamera\n\t\t? 'orthographic'\n\t\t: 'perspective';\n\tnode.addProperty( `token projection = \"${projection}\"` );\n\n\tconst clippingRange = `(${camera.near.toPrecision(\n\t\tPRECISION\n\t)}, ${camera.far.toPrecision( PRECISION )})`;\n\tnode.addProperty( `float2 clippingRange = ${clippingRange}` );\n\n\tlet horizontalAperture;\n\tif ( camera.isOrthographicCamera ) {\n\n\t\thorizontalAperture = (\n\t\t\t( Math.abs( camera.left ) + Math.abs( camera.right ) ) *\n\t\t\t10\n\t\t).toPrecision( PRECISION );\n\n\t} else {\n\n\t\thorizontalAperture = camera.getFilmWidth().toPrecision( PRECISION );\n\n\t}\n\n\tnode.addProperty( `float horizontalAperture = ${horizontalAperture}` );\n\n\tlet verticalAperture;\n\tif ( camera.isOrthographicCamera ) {\n\n\t\tverticalAperture = (\n\t\t\t( Math.abs( camera.top ) + Math.abs( camera.bottom ) ) *\n\t\t\t10\n\t\t).toPrecision( PRECISION );\n\n\t} else {\n\n\t\tverticalAperture = camera.getFilmHeight().toPrecision( PRECISION );\n\n\t}\n\n\tnode.addProperty( `float verticalAperture = ${verticalAperture}` );\n\n\tif ( camera.isPerspectiveCamera ) {\n\n\t\tconst focalLength = camera.getFocalLength().toPrecision( PRECISION );\n\t\tnode.addProperty( `float focalLength = ${focalLength}` );\n\n\t\tconst focusDistance = camera.focus.toPrecision( PRECISION );\n\t\tnode.addProperty( `float focusDistance = ${focusDistance}` );\n\n\t}\n\n\treturn node;\n\n}\n\n/**\n * Export options of `USDZExporter`.\n *\n * @typedef {Object} USDZExporter~Options\n * @property {number} [maxTextureSize=1024] - The maximum texture size that is going to be exported.\n * @property {boolean} [includeAnchoringProperties=true] - Whether to include anchoring properties or not.\n * @property {boolean} [onlyVisible=true] - Export only visible 3D objects.\n * @property {Object} [ar] - If `includeAnchoringProperties` is set to `true`, the anchoring type and alignment\n * can be configured via `ar.anchoring.type` and `ar.planeAnchoring.alignment`.\n * @property {boolean} [quickLookCompatible=false] - Whether to make the exported USDZ compatible to QuickLook\n * which means the asset is modified to accommodate the bugs FB10036297 and FB11442287 (Apple Feedback).\n **/\n\n/**\n * onDone callback of `USDZExporter`.\n *\n * @callback USDZExporter~OnDone\n * @param {ArrayBuffer} result - The generated USDZ.\n */\n\n/**\n * onError callback of `USDZExporter`.\n *\n * @callback USDZExporter~OnError\n * @param {Error} error - The error object.\n */\n\nexport { USDZExporter };\n"],"mappings":"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","ignoreList":[]}