{"version":3,"file":"node_modules/three/examples/jsm/geometries/ConvexGeometry.js","names":["BufferGeometry","Float32BufferAttribute","ConvexHull","ConvexGeometry","constructor","points","super","vertices","normals","faces","setFromPoints","i","length","face","edge","point","head","push","x","y","z","normal","next","this","setAttribute"],"sources":["node_modules/three/examples/jsm/geometries/ConvexGeometry.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute\n} from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\n/**\n * This class can be used to generate a convex hull for a given array of 3D points.\n * The average time complexity for this task is considered to be O(nlog(n)).\n *\n * ```js\n * const geometry = new ConvexGeometry( points );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n * @three_import import { ConvexGeometry } from 'three/addons/geometries/ConvexGeometry.js';\n */\nclass ConvexGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new convex geometry.\n\t *\n\t * @param {Array<Vector3>} points - An array of points in 3D space which should be enclosed by the convex hull.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t// buffers\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\n\t\tconst convexHull = new ConvexHull().setFromPoints( points );\n\n\t\t// generate vertices and normals\n\n\t\tconst faces = convexHull.faces;\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\t\t\tlet edge = face.edge;\n\n\t\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n\t\t\tdo {\n\n\t\t\t\tconst point = edge.head().point;\n\n\t\t\t\tvertices.push( point.x, point.y, point.z );\n\t\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\n\n\t\t\t\tedge = edge.next;\n\n\t\t\t} while ( edge !== face.edge );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n}\n\nexport { ConvexGeometry };\n"],"mappings":"OACCA,eACAC,2BACM,eACEC,eAAkB,wBAgB3B,MAAMC,uBAAuBH,eAO5B,WAAAI,CAAaC,EAAS,IAErBC,QAIA,MAAMC,EAAW,GACXC,EAAU,GAMVC,GAJa,IAAIP,YAAaQ,cAAeL,GAI1BI,MAEzB,IAAM,IAAIE,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAO,CAEzC,MAAME,EAAOJ,EAAOE,GACpB,IAAIG,EAAOD,EAAKC,KAIhB,EAAG,CAEF,MAAMC,EAAQD,EAAKE,OAAOD,MAE1BR,EAASU,KAAMF,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMK,GACvCZ,EAAQS,KAAMJ,EAAKQ,OAAOH,EAAGL,EAAKQ,OAAOF,EAAGN,EAAKQ,OAAOD,GAExDN,EAAOA,EAAKQ,IAEb,OAAUR,IAASD,EAAKC,KAEzB,CAIAS,KAAKC,aAAc,WAAY,IAAIvB,uBAAwBM,EAAU,IACrEgB,KAAKC,aAAc,SAAU,IAAIvB,uBAAwBO,EAAS,GAEnE,SAIQL","ignoreList":[]}