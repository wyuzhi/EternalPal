{"version":3,"file":"node_modules/three/examples/jsm/geometries/RoundedBoxGeometry.js","names":["BoxGeometry","Vector3","_tempNormal","getUv","faceDirVector","normal","uvAxis","projectionAxis","radius","sideLength","totArcLength","Math","PI","centerLength","max","halfArc","copy","normalize","arcUvRatio","arcAngleRatio","angleTo","sign","RoundedBoxGeometry","constructor","width","height","depth","segments","totalSegments","min","super","this","type","parameters","geometry2","toNonIndexed","index","attributes","position","uv","box","divideScalar","subScalar","positions","array","normals","uvs","faceTris","length","halfSegmentSize","i","j","fromArray","x","y","z","floor","set","fromJSON","data"],"sources":["node_modules/three/examples/jsm/geometries/RoundedBoxGeometry.js"],"sourcesContent":["import {\n\tBoxGeometry,\n\tVector3\n} from 'three';\n\nconst _tempNormal = new Vector3();\n\nfunction getUv( faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength ) {\n\n\tconst totArcLength = 2 * Math.PI * radius / 4;\n\n\t// length of the planes between the arcs on each axis\n\tconst centerLength = Math.max( sideLength - 2 * radius, 0 );\n\tconst halfArc = Math.PI / 4;\n\n\t// Get the vector projected onto the Y plane\n\t_tempNormal.copy( normal );\n\t_tempNormal[ projectionAxis ] = 0;\n\t_tempNormal.normalize();\n\n\t// total amount of UV space alloted to a single arc\n\tconst arcUvRatio = 0.5 * totArcLength / ( totArcLength + centerLength );\n\n\t// the distance along one arc the point is at\n\tconst arcAngleRatio = 1.0 - ( _tempNormal.angleTo( faceDirVector ) / halfArc );\n\n\tif ( Math.sign( _tempNormal[ uvAxis ] ) === 1 ) {\n\n\t\treturn arcAngleRatio * arcUvRatio;\n\n\t} else {\n\n\t\t// total amount of UV space alloted to the plane between the arcs\n\t\tconst lenUv = centerLength / ( totArcLength + centerLength );\n\t\treturn lenUv + arcUvRatio + arcUvRatio * ( 1.0 - arcAngleRatio );\n\n\t}\n\n}\n\n/**\n * A special type of box geometry with rounded corners and edges.\n *\n * ```js\n * const geometry = new THREE.RoundedBoxGeometry();\n * const material = new THREE.MeshStandardMaterial( { color: 0x00ff00 } );\n * const cube = new THREE.Mesh( geometry, material );\n * scene.add( cube );\n * ```\n *\n * @augments BoxGeometry\n * @three_import import { RoundedBoxGeometry } from 'three/addons/geometries/RoundedBoxGeometry.js';\n */\nclass RoundedBoxGeometry extends BoxGeometry {\n\n\t/**\n\t * Constructs a new rounded box geometry.\n\t *\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\n\t * @param {number} [segments=2] - Number of segments that form the rounded corners.\n\t * @param {number} [radius=0.1] - The radius of the rounded corners.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1, segments = 2, radius = 0.1 ) {\n\n\t\t// calculate total segments needed &\n\t\t// ensure it's odd so that we have a plane connecting the rounded corners\n\t\tconst totalSegments = segments * 2 + 1;\n\n\t\t// ensure radius isn't bigger than shortest side\n\t\tradius = Math.min( width / 2, height / 2, depth / 2, radius );\n\n\t\t// start with a unit box geometry, its vertices will be modified to form the rounded box\n\t\tsuper( 1, 1, 1, totalSegments, totalSegments, totalSegments );\n\n\t\tthis.type = 'RoundedBoxGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\tsegments: segments,\n\t\t\tradius: radius,\n\t\t};\n\n\t\t// if totalSegments is 1, no rounding is needed - return regular box\n\t\tif ( totalSegments === 1 ) return;\n\n\t\tconst geometry2 = this.toNonIndexed();\n\n\t\tthis.index = null;\n\t\tthis.attributes.position = geometry2.attributes.position;\n\t\tthis.attributes.normal = geometry2.attributes.normal;\n\t\tthis.attributes.uv = geometry2.attributes.uv;\n\n\t\t//\n\n\t\tconst position = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst box = new Vector3( width, height, depth ).divideScalar( 2 ).subScalar( radius );\n\n\t\tconst positions = this.attributes.position.array;\n\t\tconst normals = this.attributes.normal.array;\n\t\tconst uvs = this.attributes.uv.array;\n\n\t\tconst faceTris = positions.length / 6;\n\t\tconst faceDirVector = new Vector3();\n\t\tconst halfSegmentSize = 0.5 / totalSegments;\n\n\t\tfor ( let i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tposition.fromArray( positions, i );\n\t\t\tnormal.copy( position );\n\t\t\tnormal.x -= Math.sign( normal.x ) * halfSegmentSize;\n\t\t\tnormal.y -= Math.sign( normal.y ) * halfSegmentSize;\n\t\t\tnormal.z -= Math.sign( normal.z ) * halfSegmentSize;\n\t\t\tnormal.normalize();\n\n\t\t\tpositions[ i + 0 ] = box.x * Math.sign( position.x ) + normal.x * radius;\n\t\t\tpositions[ i + 1 ] = box.y * Math.sign( position.y ) + normal.y * radius;\n\t\t\tpositions[ i + 2 ] = box.z * Math.sign( position.z ) + normal.z * radius;\n\n\t\t\tnormals[ i + 0 ] = normal.x;\n\t\t\tnormals[ i + 1 ] = normal.y;\n\t\t\tnormals[ i + 2 ] = normal.z;\n\n\t\t\tconst side = Math.floor( i / faceTris );\n\n\t\t\tswitch ( side ) {\n\n\t\t\t\tcase 0: // right\n\n\t\t\t\t\t// generate UVs along Z then Y\n\t\t\t\t\tfaceDirVector.set( 1, 0, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = getUv( faceDirVector, normal, 'z', 'y', radius, depth );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'z', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // left\n\n\t\t\t\t\t// generate UVs along Z then Y\n\t\t\t\t\tfaceDirVector.set( - 1, 0, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'z', 'y', radius, depth );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'z', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // top\n\n\t\t\t\t\t// generate UVs along X then Z\n\t\t\t\t\tfaceDirVector.set( 0, 1, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'z', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = getUv( faceDirVector, normal, 'z', 'x', radius, depth );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // bottom\n\n\t\t\t\t\t// generate UVs along X then Z\n\t\t\t\t\tfaceDirVector.set( 0, - 1, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'z', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'z', 'x', radius, depth );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4: // front\n\n\t\t\t\t\t// generate UVs along X then Y\n\t\t\t\t\tfaceDirVector.set( 0, 0, 1 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'y', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'x', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5: // back\n\n\t\t\t\t\t// generate UVs along X then Y\n\t\t\t\t\tfaceDirVector.set( 0, 0, - 1 );\n\t\t\t\t\tuvs[ j + 0 ] = getUv( faceDirVector, normal, 'x', 'y', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'x', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @returns {RoundedBoxGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new RoundedBoxGeometry(\n\t\t\tdata.width,\n\t\t\tdata.height,\n\t\t\tdata.depth,\n\t\t\tdata.segments,\n\t\t\tdata.radius\n\t\t);\n\n\t}\n\n\n}\n\nexport { RoundedBoxGeometry };\n"],"mappings":"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","ignoreList":[]}