{"version":3,"file":"node_modules/three/examples/jsm/helpers/LightProbeHelperGPU.js","names":["Mesh","NodeMaterial","SphereGeometry","float","Fn","getShIrradianceAt","normalWorld","uniformArray","uniform","vec4","LightProbeHelper","constructor","lightProbe","size","sh","coefficients","intensity","RECIPROCAL_PI","Math","PI","fragmentNode","irradiance","outgoingLight","mul","material","super","this","type","_intensity","_sh","onBeforeRender","dispose","geometry","position","copy","scale","set","multiplyScalar","value","array"],"sources":["node_modules/three/examples/jsm/helpers/LightProbeHelperGPU.js"],"sourcesContent":["import {\n\tMesh,\n\tNodeMaterial,\n\tSphereGeometry\n} from 'three';\nimport { float, Fn, getShIrradianceAt, normalWorld, uniformArray, uniform, vec4 } from 'three/tsl';\n\n/**\n * Renders a sphere to visualize a light probe in the scene.\n *\n * This helper can only be used with {@link WebGPURenderer}.\n * When using {@link WebGLRenderer}, import from `LightProbeHelper.js`.\n *\n * ```js\n * const helper = new LightProbeHelper( lightProbe );\n * scene.add( helper );\n * ```\n *\n * @private\n * @augments Mesh\n * @three_import import { LightProbeHelper } from 'three/addons/helpers/LightProbeHelperGPU.js';\n */\nclass LightProbeHelper extends Mesh {\n\n\t/**\n\t * Constructs a new light probe helper.\n\t *\n\t * @param {LightProbe} lightProbe - The light probe to visualize.\n\t * @param {number} [size=1] - The size of the helper.\n\t */\n\tconstructor( lightProbe, size = 1 ) {\n\n\t\tconst sh = uniformArray( lightProbe.sh.coefficients );\n\t\tconst intensity = uniform( lightProbe.intensity );\n\n\t\tconst RECIPROCAL_PI = float( 1 / Math.PI );\n\n\t\tconst fragmentNode = Fn( () => {\n\n\t\t\tconst irradiance = getShIrradianceAt( normalWorld, sh );\n\n\t\t\tconst outgoingLight = RECIPROCAL_PI.mul( irradiance ).mul( intensity );\n\n\t\t\treturn vec4( outgoingLight, 1.0 );\n\n\t\t} )();\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.fragmentNode = fragmentNode;\n\n\t\tconst geometry = new SphereGeometry( 1, 32, 16 );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * The light probe to visualize.\n\t\t *\n\t\t * @type {LightProbe}\n\t\t */\n\t\tthis.lightProbe = lightProbe;\n\n\t\t/**\n\t\t * The size of the helper.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.size = size;\n\t\tthis.type = 'LightProbeHelper';\n\n\t\tthis._intensity = intensity;\n\t\tthis._sh = sh;\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tonBeforeRender() {\n\n\t\tthis.position.copy( this.lightProbe.position );\n\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\n\n\t\tthis._intensity.value = this.lightProbe.intensity;\n\t\tthis._sh.array = this.lightProbe.sh.coefficients;\n\n\t}\n\n}\n\nexport { LightProbeHelper };\n"],"mappings":"OACCA,KACAC,aACAC,mBACM,eACEC,MAAOC,GAAIC,kBAAmBC,YAAaC,aAAcC,QAASC,SAAY,YAiBvF,MAAMC,yBAAyBV,KAQ9B,WAAAW,CAAaC,EAAYC,EAAO,GAE/B,MAAMC,EAAKP,aAAcK,EAAWE,GAAGC,cACjCC,EAAYR,QAASI,EAAWI,WAEhCC,EAAgBd,MAAO,EAAIe,KAAKC,IAEhCC,EAAehB,IAAI,KAExB,MAAMiB,EAAahB,kBAAmBC,YAAaQ,GAE7CQ,EAAgBL,EAAcM,IAAKF,GAAaE,IAAKP,GAE3D,OAAOP,KAAMa,EAAe,EAAK,GANblB,GAUfoB,EAAW,IAAIvB,aACrBuB,EAASJ,aAAeA,EAIxBK,MAFiB,IAAIvB,eAAgB,EAAG,GAAI,IAE3BsB,GAOjBE,KAAKd,WAAaA,EAQlBc,KAAKb,KAAOA,EACZa,KAAKC,KAAO,mBAEZD,KAAKE,WAAaZ,EAClBU,KAAKG,IAAMf,EAEXY,KAAKI,gBAEN,CAMA,OAAAC,GAECL,KAAKM,SAASD,UACdL,KAAKF,SAASO,SAEf,CAEA,cAAAD,GAECJ,KAAKO,SAASC,KAAMR,KAAKd,WAAWqB,UAEpCP,KAAKS,MAAMC,IAAK,EAAG,EAAG,GAAIC,eAAgBX,KAAKb,MAE/Ca,KAAKE,WAAWU,MAAQZ,KAAKd,WAAWI,UACxCU,KAAKG,IAAIU,MAAQb,KAAKd,WAAWE,GAAGC,YAErC,SAIQL","ignoreList":[]}