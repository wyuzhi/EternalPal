import{BoxGeometry,BufferAttribute,DoubleSide,Mesh,PlaneGeometry,ShaderMaterial,Vector3}from"three";import{mergeGeometries}from"../utils/BufferGeometryUtils.js";class TextureHelper extends Mesh{constructor(e,t=1,r=1,a=1){const u=new ShaderMaterial({type:"TextureHelperMaterial",side:DoubleSide,transparent:!0,uniforms:{map:{value:e},alpha:{value:getAlpha(e)}},vertexShader:["attribute vec3 uvw;","varying vec3 vUvw;","void main() {","\tvUvw = uvw;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["precision highp float;","precision highp sampler2DArray;","precision highp sampler3D;","uniform {samplerType} map;","uniform float alpha;","varying vec3 vUvw;","vec4 textureHelper( in sampler2D map ) { return texture( map, vUvw.xy ); }","vec4 textureHelper( in sampler2DArray map ) { return texture( map, vUvw ); }","vec4 textureHelper( in sampler3D map ) { return texture( map, vUvw ); }","vec4 textureHelper( in samplerCube map ) { return texture( map, vUvw ); }","void main() {","\tgl_FragColor = linearToOutputTexel( vec4( textureHelper( map ).xyz, alpha ) );","}"].join("\n").replace("{samplerType}",getSamplerType(e))});super(e.isCubeTexture?createCubeGeometry(t,r,a):createSliceGeometry(e,t,r,a),u),this.texture=e,this.type="TextureHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}function getSamplerType(e){return e.isCubeTexture?"samplerCube":e.isDataArrayTexture||e.isCompressedArrayTexture?"sampler2DArray":e.isData3DTexture||e.isCompressed3DTexture?"sampler3D":"sampler2D"}function getImageCount(e){return e.isCubeTexture?6:e.isDataArrayTexture||e.isCompressedArrayTexture||e.isData3DTexture||e.isCompressed3DTexture?e.image.depth:1}function getAlpha(e){return e.isCubeTexture?1:e.isDataArrayTexture||e.isCompressedArrayTexture||e.isData3DTexture||e.isCompressed3DTexture?Math.max(1/e.image.depth,.25):1}function createCubeGeometry(e,t,r){const a=new BoxGeometry(e,t,r),u=a.attributes.position,i=a.attributes.uv,s=new BufferAttribute(new Float32Array(3*i.count),3),o=new Vector3;for(let e=0,t=i.count;e<t;++e){o.fromBufferAttribute(u,e).normalize();const t=o.x,r=o.y,a=o.z;s.setXYZ(e,t,r,a)}return a.deleteAttribute("uv"),a.setAttribute("uvw",s),a}function createSliceGeometry(e,t,r,a){const u=getImageCount(e),i=[];for(let s=0;s<u;++s){const o=new PlaneGeometry(t,r);u>1&&o.translate(0,0,a*(s/(u-1)-.5));const p=o.attributes.uv,n=new BufferAttribute(new Float32Array(3*p.count),3);for(let t=0,r=p.count;t<r;++t){const r=p.getX(t),a=e.flipY?p.getY(t):1-p.getY(t),i=1===u?1:e.isDataArrayTexture||e.isCompressedArrayTexture?s:s/(u-1);n.setXYZ(t,r,a,i)}o.deleteAttribute("uv"),o.setAttribute("uvw",n),i.push(o)}return mergeGeometries(i)}export{TextureHelper};
//# sourceMappingURL=TextureHelper.js.map