import{NodeMaterial,BoxGeometry,BufferAttribute,Mesh,PlaneGeometry,DoubleSide,Vector3}from"three";import{texture as textureNode,cubeTexture,texture3D,float,vec4,attribute}from"three/tsl";import{mergeGeometries}from"../utils/BufferGeometryUtils.js";class TextureHelper extends Mesh{constructor(e,t=1,r=1,u=1){const s=new NodeMaterial;let o;s.side=DoubleSide,s.transparent=!0,s.name="TextureHelper";const a=attribute("uvw");o=e.isCubeTexture?cubeTexture(e).sample(a):e.isData3DTexture||e.isCompressed3DTexture?texture3D(e).sample(a):e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture?textureNode(e).sample(a.xy).depth(a.z):textureNode(e);const i=float(getAlpha(e));s.colorNode=vec4(o.rgb,i);super(e.isCubeTexture?createCubeGeometry(t,r,u):createSliceGeometry(e,t,r,u),s),this.texture=e,this.type="TextureHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}function getImageCount(e){return e.isCubeTexture?6:e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture||e.isData3DTexture||e.isCompressed3DTexture?e.image.depth:1}function getAlpha(e){return e.isCubeTexture?1:e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture||e.isData3DTexture||e.isCompressed3DTexture?Math.max(1/e.image.depth,.25):1}function createCubeGeometry(e,t,r){const u=new BoxGeometry(e,t,r),s=u.attributes.position,o=u.attributes.uv,a=new BufferAttribute(new Float32Array(3*o.count),3),i=new Vector3;for(let e=0,t=o.count;e<t;++e){i.fromBufferAttribute(s,e).normalize();const t=i.x,r=i.y,u=i.z;a.setXYZ(e,t,r,u)}return u.deleteAttribute("uv"),u.setAttribute("uvw",a),u}function createSliceGeometry(e,t,r,u){const s=getImageCount(e),o=[];for(let a=0;a<s;++a){const i=new PlaneGeometry(t,r);s>1&&i.translate(0,0,u*(a/(s-1)-.5));const n=i.attributes.uv,x=new BufferAttribute(new Float32Array(3*n.count),3);for(let t=0,r=n.count;t<r;++t){const r=n.getX(t),u=e.flipY?n.getY(t):1-n.getY(t),o=1===s?1:e.isArrayTexture||e.isDataArrayTexture||e.isCompressedArrayTexture?a:a/(s-1);x.setXYZ(t,r,u,o)}i.deleteAttribute("uv"),i.setAttribute("uvw",x),o.push(i)}return mergeGeometries(o)}export{TextureHelper};
//# sourceMappingURL=TextureHelperGPU.js.map