{"version":3,"file":"node_modules/three/examples/jsm/helpers/TextureHelperGPU.js","names":["NodeMaterial","BoxGeometry","BufferAttribute","Mesh","PlaneGeometry","DoubleSide","Vector3","textureNode","cubeTexture","texture3D","float","vec4","attribute","mergeGeometries","TextureHelper","constructor","texture","width","height","depth","material","colorNode","side","transparent","name","uvw","isCubeTexture","sample","isData3DTexture","isCompressed3DTexture","isArrayTexture","isDataArrayTexture","isCompressedArrayTexture","xy","z","alphaNode","getAlpha","rgb","super","createCubeGeometry","createSliceGeometry","this","type","dispose","geometry","getImageCount","image","Math","max","position","attributes","uv","Float32Array","count","_direction","j","jl","fromBufferAttribute","normalize","u","x","v","y","w","setXYZ","deleteAttribute","setAttribute","sliceCount","geometries","i","translate","getX","flipY","getY","push"],"sources":["node_modules/three/examples/jsm/helpers/TextureHelperGPU.js"],"sourcesContent":["import {\n\tNodeMaterial,\n\tBoxGeometry,\n\tBufferAttribute,\n\tMesh,\n\tPlaneGeometry,\n\tDoubleSide,\n\tVector3,\n} from 'three';\nimport { texture as textureNode, cubeTexture, texture3D, float, vec4, attribute } from 'three/tsl';\nimport { mergeGeometries } from '../utils/BufferGeometryUtils.js';\n\n/**\n * A helper that can be used to display any type of texture for\n * debugging purposes. Depending on the type of texture (2D, 3D, Array),\n * the helper becomes a plane or box mesh.\n *\n * This helper can only be used with {@link WebGPURenderer}.\n * When using {@link WebGLRenderer}, import from `TextureHelper.js`.\n *\n * @private\n * @augments Mesh\n * @three_import import { TextureHelper } from 'three/addons/helpers/TextureHelperGPU.js';\n */\nclass TextureHelper extends Mesh {\n\n\t/**\n\t * Constructs a new texture helper.\n\t *\n\t * @param {Texture} texture - The texture to visualize.\n\t * @param {number} [width=1] - The helper's width.\n\t * @param {number} [height=1] - The helper's height.\n\t * @param {number} [depth=1] - The helper's depth.\n\t */\n\tconstructor( texture, width = 1, height = 1, depth = 1 ) {\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.side = DoubleSide;\n\t\tmaterial.transparent = true;\n\t\tmaterial.name = 'TextureHelper';\n\n\t\tlet colorNode;\n\n\t\tconst uvw = attribute( 'uvw' );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tcolorNode = cubeTexture( texture ).sample( uvw );\n\n\t\t} else if ( texture.isData3DTexture || texture.isCompressed3DTexture ) {\n\n\t\t\tcolorNode = texture3D( texture ).sample( uvw );\n\n\t\t} else if ( texture.isArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\tcolorNode = textureNode( texture ).sample( uvw.xy ).depth( uvw.z );\n\n\t\t} else {\n\n\t\t\tcolorNode = textureNode( texture );\n\n\t\t}\n\n\t\tconst alphaNode = float( getAlpha( texture ) );\n\n\t\tmaterial.colorNode = vec4( colorNode.rgb, alphaNode );\n\n\t\tconst geometry = texture.isCubeTexture\n\t\t\t? createCubeGeometry( width, height, depth )\n\t\t\t: createSliceGeometry( texture, width, height, depth );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * The texture to visualize.\n\t\t *\n\t\t * @type {Texture}\n\t\t */\n\t\tthis.texture = texture;\n\t\tthis.type = 'TextureHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nfunction getImageCount( texture ) {\n\n\tif ( texture.isCubeTexture ) {\n\n\t\treturn 6;\n\n\t} else if ( texture.isArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\treturn texture.image.depth;\n\n\t} else if ( texture.isData3DTexture || texture.isCompressed3DTexture ) {\n\n\t\treturn texture.image.depth;\n\n\t} else {\n\n\t\treturn 1;\n\n\t}\n\n}\n\nfunction getAlpha( texture ) {\n\n\tif ( texture.isCubeTexture ) {\n\n\t\treturn 1;\n\n\t} else if ( texture.isArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\treturn Math.max( 1 / texture.image.depth, 0.25 );\n\n\t} else if ( texture.isData3DTexture || texture.isCompressed3DTexture ) {\n\n\t\treturn Math.max( 1 / texture.image.depth, 0.25 );\n\n\t} else {\n\n\t\treturn 1;\n\n\t}\n\n}\n\nfunction createCubeGeometry( width, height, depth ) {\n\n\tconst geometry = new BoxGeometry( width, height, depth );\n\n\tconst position = geometry.attributes.position;\n\tconst uv = geometry.attributes.uv;\n\tconst uvw = new BufferAttribute( new Float32Array( uv.count * 3 ), 3 );\n\n\tconst _direction = new Vector3();\n\n\tfor ( let j = 0, jl = uv.count; j < jl; ++ j ) {\n\n\t\t_direction.fromBufferAttribute( position, j ).normalize();\n\n\t\tconst u = _direction.x;\n\t\tconst v = _direction.y;\n\t\tconst w = _direction.z;\n\n\t\tuvw.setXYZ( j, u, v, w );\n\n\t}\n\n\tgeometry.deleteAttribute( 'uv' );\n\tgeometry.setAttribute( 'uvw', uvw );\n\n\treturn geometry;\n\n}\n\nfunction createSliceGeometry( texture, width, height, depth ) {\n\n\tconst sliceCount = getImageCount( texture );\n\n\tconst geometries = [];\n\n\tfor ( let i = 0; i < sliceCount; ++ i ) {\n\n\t\tconst geometry = new PlaneGeometry( width, height );\n\n\t\tif ( sliceCount > 1 ) {\n\n\t\t\tgeometry.translate( 0, 0, depth * ( i / ( sliceCount - 1 ) - 0.5 ) );\n\n\t\t}\n\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uvw = new BufferAttribute( new Float32Array( uv.count * 3 ), 3 );\n\n\t\tfor ( let j = 0, jl = uv.count; j < jl; ++ j ) {\n\n\t\t\tconst u = uv.getX( j );\n\t\t\tconst v = texture.flipY ? uv.getY( j ) : 1 - uv.getY( j );\n\t\t\tconst w = sliceCount === 1\n\t\t\t\t? 1\n\t\t\t\t: texture.isArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture\n\t\t\t\t\t? i\n\t\t\t\t\t: i / ( sliceCount - 1 );\n\n\t\t\tuvw.setXYZ( j, u, v, w );\n\n\t\t}\n\n\t\tgeometry.deleteAttribute( 'uv' );\n\t\tgeometry.setAttribute( 'uvw', uvw );\n\n\t\tgeometries.push( geometry );\n\n\t}\n\n\treturn mergeGeometries( geometries );\n\n}\n\nexport { TextureHelper };\n"],"mappings":"OACCA,aACAC,YACAC,gBACAC,KACAC,cACAC,WACAC,YACM,0BACaC,YAAaC,YAAaC,UAAWC,MAAOC,KAAMC,cAAiB,mBAC9EC,oBAAuB,kCAchC,MAAMC,sBAAsBX,KAU3B,WAAAY,CAAaC,EAASC,EAAQ,EAAGC,EAAS,EAAGC,EAAQ,GAEpD,MAAMC,EAAW,IAAIpB,aAKrB,IAAIqB,EAJJD,EAASE,KAAOjB,WAChBe,EAASG,aAAc,EACvBH,EAASI,KAAO,gBAIhB,MAAMC,EAAMb,UAAW,OAItBS,EAFIL,EAAQU,cAEAlB,YAAaQ,GAAUW,OAAQF,GAEhCT,EAAQY,iBAAmBZ,EAAQa,sBAElCpB,UAAWO,GAAUW,OAAQF,GAE9BT,EAAQc,gBAAkBd,EAAQe,oBAAsBf,EAAQgB,yBAE/DzB,YAAaS,GAAUW,OAAQF,EAAIQ,IAAKd,MAAOM,EAAIS,GAInD3B,YAAaS,GAI1B,MAAMmB,EAAYzB,MAAO0B,SAAUpB,IAEnCI,EAASC,UAAYV,KAAMU,EAAUgB,IAAKF,GAM1CG,MAJiBtB,EAAQU,cACtBa,mBAAoBtB,EAAOC,EAAQC,GACnCqB,oBAAqBxB,EAASC,EAAOC,EAAQC,GAE/BC,GAOjBqB,KAAKzB,QAAUA,EACfyB,KAAKC,KAAO,eAEb,CAMA,OAAAC,GAECF,KAAKG,SAASD,UACdF,KAAKrB,SAASuB,SAEf,EAID,SAASE,cAAe7B,GAEvB,OAAKA,EAAQU,cAEL,EAEIV,EAAQc,gBAAkBd,EAAQe,oBAAsBf,EAAQgB,0BAIhEhB,EAAQY,iBAAmBZ,EAAQa,sBAFvCb,EAAQ8B,MAAM3B,MAQd,CAIT,CAEA,SAASiB,SAAUpB,GAElB,OAAKA,EAAQU,cAEL,EAEIV,EAAQc,gBAAkBd,EAAQe,oBAAsBf,EAAQgB,0BAIhEhB,EAAQY,iBAAmBZ,EAAQa,sBAFvCkB,KAAKC,IAAK,EAAIhC,EAAQ8B,MAAM3B,MAAO,KAQnC,CAIT,CAEA,SAASoB,mBAAoBtB,EAAOC,EAAQC,GAE3C,MAAMyB,EAAW,IAAI3C,YAAagB,EAAOC,EAAQC,GAE3C8B,EAAWL,EAASM,WAAWD,SAC/BE,EAAKP,EAASM,WAAWC,GACzB1B,EAAM,IAAIvB,gBAAiB,IAAIkD,aAAyB,EAAXD,EAAGE,OAAa,GAE7DC,EAAa,IAAIhD,QAEvB,IAAM,IAAIiD,EAAI,EAAGC,EAAKL,EAAGE,MAAOE,EAAIC,IAAOD,EAAI,CAE9CD,EAAWG,oBAAqBR,EAAUM,GAAIG,YAE9C,MAAMC,EAAIL,EAAWM,EACfC,EAAIP,EAAWQ,EACfC,EAAIT,EAAWpB,EAErBT,EAAIuC,OAAQT,EAAGI,EAAGE,EAAGE,EAEtB,CAKA,OAHAnB,EAASqB,gBAAiB,MAC1BrB,EAASsB,aAAc,MAAOzC,GAEvBmB,CAER,CAEA,SAASJ,oBAAqBxB,EAASC,EAAOC,EAAQC,GAErD,MAAMgD,EAAatB,cAAe7B,GAE5BoD,EAAa,GAEnB,IAAM,IAAIC,EAAI,EAAGA,EAAIF,IAAeE,EAAI,CAEvC,MAAMzB,EAAW,IAAIxC,cAAea,EAAOC,GAEtCiD,EAAa,GAEjBvB,EAAS0B,UAAW,EAAG,EAAGnD,GAAUkD,GAAMF,EAAa,GAAM,KAI9D,MAAMhB,EAAKP,EAASM,WAAWC,GACzB1B,EAAM,IAAIvB,gBAAiB,IAAIkD,aAAyB,EAAXD,EAAGE,OAAa,GAEnE,IAAM,IAAIE,EAAI,EAAGC,EAAKL,EAAGE,MAAOE,EAAIC,IAAOD,EAAI,CAE9C,MAAMI,EAAIR,EAAGoB,KAAMhB,GACbM,EAAI7C,EAAQwD,MAAQrB,EAAGsB,KAAMlB,GAAM,EAAIJ,EAAGsB,KAAMlB,GAChDQ,EAAmB,IAAfI,EACP,EACAnD,EAAQc,gBAAkBd,EAAQe,oBAAsBf,EAAQgB,yBAC/DqC,EACAA,GAAMF,EAAa,GAEvB1C,EAAIuC,OAAQT,EAAGI,EAAGE,EAAGE,EAEtB,CAEAnB,EAASqB,gBAAiB,MAC1BrB,EAASsB,aAAc,MAAOzC,GAE9B2C,EAAWM,KAAM9B,EAElB,CAEA,OAAO/B,gBAAiBuD,EAEzB,QAEStD","ignoreList":[]}