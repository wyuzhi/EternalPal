import{Group,Raycaster,Vector2}from"three";const _pointer=new Vector2,_event={type:"",data:_pointer},_events={move:"mousemove",select:"click",selectstart:"mousedown",selectend:"mouseup"},_raycaster=new Raycaster;class InteractiveGroup extends Group{constructor(){super(),this.raycaster=new Raycaster,this.element=null,this.camera=null,this.controllers=[],this._onPointerEvent=this.onPointerEvent.bind(this),this._onXRControllerEvent=this.onXRControllerEvent.bind(this)}onPointerEvent(e){e.stopPropagation();const t=this.element.getBoundingClientRect();_pointer.x=(e.clientX-t.left)/t.width*2-1,_pointer.y=-(e.clientY-t.top)/t.height*2+1,this.raycaster.setFromCamera(_pointer,this.camera);const n=this.raycaster.intersectObjects(this.children,!1);if(n.length>0){const t=n[0],o=t.object,s=t.uv;_event.type=e.type,_event.data.set(s.x,1-s.y),o.dispatchEvent(_event)}}onXRControllerEvent(e){const t=e.target;_raycaster.setFromXRController(t);const n=_raycaster.intersectObjects(this.children,!1);if(n.length>0){const t=n[0],o=t.object,s=t.uv;_event.type=_events[e.type],_event.data.set(s.x,1-s.y),o.dispatchEvent(_event)}}listenToPointerEvents(e,t){this.camera=t,this.element=e.domElement,this.element.addEventListener("pointerdown",this._onPointerEvent),this.element.addEventListener("pointerup",this._onPointerEvent),this.element.addEventListener("pointermove",this._onPointerEvent),this.element.addEventListener("mousedown",this._onPointerEvent),this.element.addEventListener("mouseup",this._onPointerEvent),this.element.addEventListener("mousemove",this._onPointerEvent),this.element.addEventListener("click",this._onPointerEvent)}disconnectionPointerEvents(){null!==this.element&&(this.element.removeEventListener("pointerdown",this._onPointerEvent),this.element.removeEventListener("pointerup",this._onPointerEvent),this.element.removeEventListener("pointermove",this._onPointerEvent),this.element.removeEventListener("mousedown",this._onPointerEvent),this.element.removeEventListener("mouseup",this._onPointerEvent),this.element.removeEventListener("mousemove",this._onPointerEvent),this.element.removeEventListener("click",this._onPointerEvent))}listenToXRControllerEvents(e){this.controllers.push(e),e.addEventListener("move",this._onXRControllerEvent),e.addEventListener("select",this._onXRControllerEvent),e.addEventListener("selectstart",this._onXRControllerEvent),e.addEventListener("selectend",this._onXRControllerEvent)}disconnectXrControllerEvents(){for(const e of this.controllers)e.removeEventListener("move",this._onXRControllerEvent),e.removeEventListener("select",this._onXRControllerEvent),e.removeEventListener("selectstart",this._onXRControllerEvent),e.removeEventListener("selectend",this._onXRControllerEvent)}disconnect(){this.disconnectionPointerEvents(),this.disconnectXrControllerEvents(),this.camera=null,this.element=null,this.controllers=[]}}export{InteractiveGroup};
//# sourceMappingURL=InteractiveGroup.js.map