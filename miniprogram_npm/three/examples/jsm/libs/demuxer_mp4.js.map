{"version":3,"file":"node_modules/three/examples/jsm/libs/demuxer_mp4.js","names":["MP4Box","MP4FileSink","setStatus","file","offset","constructor","this","write","chunk","buffer","ArrayBuffer","byteLength","Uint8Array","set","fileStart","toFixed","appendBuffer","close","flush","MP4Demuxer","onConfig","onChunk","uri","createFile","onError","error","onReady","bind","onSamples","fileSink","fetch","then","response","body","pipeTo","WritableStream","highWaterMark","description","track","trak","getTrackById","id","entry","mdia","minf","stbl","stsd","entries","box","avcC","hvcC","vpcC","av1C","stream","DataStream","undefined","BIG_ENDIAN","Error","info","videoTracks","codec","startsWith","codedHeight","video","height","codedWidth","width","setExtractionOptions","start","track_id","ref","samples","sample","EncodedVideoChunk","type","is_sync","timestamp","cts","timescale","duration","data"],"sources":["node_modules/three/examples/jsm/libs/demuxer_mp4.js"],"sourcesContent":["import MP4Box from 'https://cdn.jsdelivr.net/npm/mp4box@0.5.3/+esm';\n\n// From: https://w3c.github.io/webcodecs/samples/video-decode-display/\n\n// Wraps an MP4Box File as a WritableStream underlying sink.\nclass MP4FileSink {\n  #setStatus = null;\n  #file = null;\n  #offset = 0;\n\n  constructor(file, setStatus) {\n    this.#file = file;\n    this.#setStatus = setStatus;\n  }\n\n  write(chunk) {\n    // MP4Box.js requires buffers to be ArrayBuffers, but we have a Uint8Array.\n    const buffer = new ArrayBuffer(chunk.byteLength);\n    new Uint8Array(buffer).set(chunk);\n\n    // Inform MP4Box where in the file this chunk is from.\n    buffer.fileStart = this.#offset;\n    this.#offset += buffer.byteLength;\n\n    // Append chunk.\n    this.#setStatus(\"fetch\", (this.#offset / (1024 ** 2)).toFixed(1) + \" MiB\");\n    this.#file.appendBuffer(buffer);\n  }\n\n  close() {\n    this.#setStatus(\"fetch\", \"Done\");\n    this.#file.flush();\n  }\n}\n\n// Demuxes the first video track of an MP4 file using MP4Box, calling\n// `onConfig()` and `onChunk()` with appropriate WebCodecs objects.\nexport class MP4Demuxer {\n  #onConfig = null;\n  #onChunk = null;\n  #setStatus = null;\n  #file = null;\n\n  constructor(uri, {onConfig, onChunk, setStatus}) {\n    this.#onConfig = onConfig;\n    this.#onChunk = onChunk;\n    this.#setStatus = setStatus;\n\n    // Configure an MP4Box File for demuxing.\n    this.#file = MP4Box.createFile();\n    this.#file.onError = error => setStatus(\"demux\", error);\n    this.#file.onReady = this.#onReady.bind(this);\n    this.#file.onSamples = this.#onSamples.bind(this);\n\n    // Fetch the file and pipe the data through.\n    const fileSink = new MP4FileSink(this.#file, setStatus);\n    fetch(uri).then(response => {\n      // highWaterMark should be large enough for smooth streaming, but lower is\n      // better for memory usage.\n      response.body.pipeTo(new WritableStream(fileSink, {highWaterMark: 2}));\n    });\n  }\n\n  // Get the appropriate `description` for a specific track. Assumes that the\n  // track is H.264, H.265, VP8, VP9, or AV1.\n  #description(track) {\n    const trak = this.#file.getTrackById(track.id);\n    for (const entry of trak.mdia.minf.stbl.stsd.entries) {\n      const box = entry.avcC || entry.hvcC || entry.vpcC || entry.av1C;\n      if (box) {\n        const stream = new MP4Box.DataStream(undefined, 0, MP4Box.DataStream.BIG_ENDIAN);\n        box.write(stream);\n        return new Uint8Array(stream.buffer, 8);  // Remove the box header.\n      }\n    }\n    throw new Error(\"avcC, hvcC, vpcC, or av1C box not found\");\n  }\n\n  #onReady(info) {\n    this.#setStatus(\"demux\", \"Ready\");\n    const track = info.videoTracks[0];\n\n    // Generate and emit an appropriate VideoDecoderConfig.\n    this.#onConfig({\n      // Browser doesn't support parsing full vp8 codec (eg: `vp08.00.41.08`),\n      // they only support `vp8`.\n      codec: track.codec.startsWith('vp08') ? 'vp8' : track.codec,\n      codedHeight: track.video.height,\n      codedWidth: track.video.width,\n      description: this.#description(track),\n    });\n\n    // Start demuxing.\n    this.#file.setExtractionOptions(track.id);\n    this.#file.start();\n  }\n\n  #onSamples(track_id, ref, samples) {\n    // Generate and emit an EncodedVideoChunk for each demuxed sample.\n    for (const sample of samples) {\n      this.#onChunk(new EncodedVideoChunk({\n        type: sample.is_sync ? \"key\" : \"delta\",\n        timestamp: 1e6 * sample.cts / sample.timescale,\n        duration: 1e6 * sample.duration / sample.timescale,\n        data: sample.data\n      }));\n    }\n  }\n}\n"],"mappings":"OAAOA,WAAY,iDAKnB,MAAMC,YACJC,GAAa,KACbC,GAAQ,KACRC,GAAU,EAEV,WAAAC,CAAYF,EAAMD,GAChBI,MAAKH,EAAQA,EACbG,MAAKJ,EAAaA,CACpB,CAEA,KAAAK,CAAMC,GAEJ,MAAMC,EAAS,IAAIC,YAAYF,EAAMG,YACrC,IAAIC,WAAWH,GAAQI,IAAIL,GAG3BC,EAAOK,UAAYR,MAAKF,EACxBE,MAAKF,GAAWK,EAAOE,WAGvBL,MAAKJ,EAAW,SAAUI,MAAKF,EAAU,SAAaW,QAAQ,GAAK,QACnET,MAAKH,EAAMa,aAAaP,EAC1B,CAEA,KAAAQ,GACEX,MAAKJ,EAAW,QAAS,QACzBI,MAAKH,EAAMe,OACb,SAKK,MAAMC,WACXC,GAAY,KACZC,GAAW,KACXnB,GAAa,KACbC,GAAQ,KAER,WAAAE,CAAYiB,GAAKF,SAACA,EAAQC,QAAEA,EAAOnB,UAAEA,IACnCI,MAAKc,EAAYA,EACjBd,MAAKe,EAAWA,EAChBf,MAAKJ,EAAaA,EAGlBI,MAAKH,EAAQH,OAAOuB,aACpBjB,MAAKH,EAAMqB,QAAUC,GAASvB,EAAU,QAASuB,GACjDnB,MAAKH,EAAMuB,QAAUpB,MAAKoB,EAASC,KAAKrB,MACxCA,MAAKH,EAAMyB,UAAYtB,MAAKsB,EAAWD,KAAKrB,MAG5C,MAAMuB,EAAW,IAAI5B,YAAYK,MAAKH,EAAOD,GAC7C4B,MAAMR,GAAKS,MAAKC,IAGdA,EAASC,KAAKC,OAAO,IAAIC,eAAeN,EAAU,CAACO,cAAe,IAAI,GAE1E,CAIA,EAAAC,CAAaC,GACX,MAAMC,EAAOjC,MAAKH,EAAMqC,aAAaF,EAAMG,IAC3C,IAAK,MAAMC,KAASH,EAAKI,KAAKC,KAAKC,KAAKC,KAAKC,QAAS,CACpD,MAAMC,EAAMN,EAAMO,MAAQP,EAAMQ,MAAQR,EAAMS,MAAQT,EAAMU,KAC5D,GAAIJ,EAAK,CACP,MAAMK,EAAS,IAAIrD,OAAOsD,gBAAWC,EAAW,EAAGvD,OAAOsD,WAAWE,YAErE,OADAR,EAAIzC,MAAM8C,GACH,IAAIzC,WAAWyC,EAAO5C,OAAQ,EACvC,CACF,CACA,MAAM,IAAIgD,MAAM,0CAClB,CAEA,EAAA/B,CAASgC,GACPpD,MAAKJ,EAAW,QAAS,SACzB,MAAMoC,EAAQoB,EAAKC,YAAY,GAG/BrD,MAAKc,EAAU,CAGbwC,MAAOtB,EAAMsB,MAAMC,WAAW,QAAU,MAAQvB,EAAMsB,MACtDE,YAAaxB,EAAMyB,MAAMC,OACzBC,WAAY3B,EAAMyB,MAAMG,MACxB7B,YAAa/B,MAAK+B,EAAaC,KAIjChC,MAAKH,EAAMgE,qBAAqB7B,EAAMG,IACtCnC,MAAKH,EAAMiE,OACb,CAEA,EAAAxC,CAAWyC,EAAUC,EAAKC,GAExB,IAAK,MAAMC,KAAUD,EACnBjE,MAAKe,EAAS,IAAIoD,kBAAkB,CAClCC,KAAMF,EAAOG,QAAU,MAAQ,QAC/BC,UAAW,IAAMJ,EAAOK,IAAML,EAAOM,UACrCC,SAAU,IAAMP,EAAOO,SAAWP,EAAOM,UACzCE,KAAMR,EAAOQ,OAGnB","ignoreList":[]}