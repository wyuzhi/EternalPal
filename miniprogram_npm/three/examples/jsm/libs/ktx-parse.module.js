const t=0,e=1,n=2,i=3,s=0,a=0,r=2,o=0,l=1,f=160,h=161,U=162,c=163,_=166,p=0,g=1,y=0,x=1,u=2,b=3,d=4,w=5,m=6,D=7,B=8,L=9,v=10,A=11,k=12,V=13,I=14,S=15,F=16,O=17,E=18,T=0,C=1,M=2,P=3,z=4,W=5,H=6,N=7,K=8,X=9,R=10,Y=11,j=0,q=1,G=2,J=13,Q=14,Z=15,$=128,tt=64,et=32,nt=16,it=0,st=1,at=2,rt=3,ot=4,lt=5,ft=6,ht=7,Ut=8,ct=9,_t=10,pt=13,gt=14,yt=15,xt=16,ut=17,bt=20,dt=21,wt=22,mt=23,Dt=24,Bt=27,Lt=28,vt=29,At=30,kt=31,Vt=34,It=35,St=36,Ft=37,Ot=38,Et=41,Tt=42,Ct=43,Mt=44,Pt=45,zt=48,Wt=49,Ht=50,Nt=58,Kt=59,Xt=62,Rt=63,Yt=64,jt=65,qt=68,Gt=69,Jt=70,Qt=71,Zt=74,$t=75,te=76,ee=77,ne=78,ie=81,se=82,ae=83,re=84,oe=85,le=88,fe=89,he=90,Ue=91,ce=92,_e=95,pe=96,ge=97,ye=98,xe=99,ue=100,be=101,de=102,we=103,me=104,De=105,Be=106,Le=107,ve=108,Ae=109,ke=110,Ve=111,Ie=112,Se=113,Fe=114,Oe=115,Ee=116,Te=117,Ce=118,Me=119,Pe=120,ze=121,We=122,He=123,Ne=124,Ke=125,Xe=126,Re=127,Ye=128,je=129,qe=130,Ge=131,Je=132,Qe=133,Ze=134,$e=135,tn=136,en=137,nn=138,sn=139,an=140,rn=141,on=142,ln=143,fn=144,hn=145,Un=146,cn=147,_n=148,pn=149,gn=150,yn=151,xn=152,un=153,bn=154,dn=155,wn=156,mn=157,Dn=158,Bn=159,Ln=160,vn=161,An=162,kn=163,Vn=164,In=165,Sn=166,Fn=167,On=168,En=169,Tn=170,Cn=171,Mn=172,Pn=173,zn=174,Wn=175,Hn=176,Nn=177,Kn=178,Xn=179,Rn=180,Yn=181,jn=182,qn=183,Gn=184,Jn=1000156007,Qn=1000156008,Zn=1000156009,$n=1000156010,ti=1000156011,ei=1000156017,ni=1000156018,ii=1000156019,si=1000156020,ai=1000156021,ri=1000054e3,oi=1000054001,li=1000054002,fi=1000054003,hi=1000054004,Ui=1000054005,ci=1000054006,_i=1000054007,pi=1000066e3,gi=1000066001,yi=1000066002,xi=1000066003,ui=1000066004,bi=1000066005,di=1000066006,wi=1000066007,mi=1000066008,Di=1000066009,Bi=1000066010,Li=1000066011,vi=1000066012,Ai=1000066013,ki=100034e4,Vi=1000340001;class Ii{constructor(){this.vkFormat=0,this.typeSize=1,this.pixelWidth=0,this.pixelHeight=0,this.pixelDepth=0,this.layerCount=0,this.faceCount=1,this.supercompressionScheme=0,this.levels=[],this.dataFormatDescriptor=[{vendorId:0,descriptorType:0,descriptorBlockSize:0,versionNumber:2,colorModel:0,colorPrimaries:1,transferFunction:2,flags:0,texelBlockDimension:[0,0,0,0],bytesPlane:[0,0,0,0,0,0,0,0],samples:[]}],this.keyValue={},this.globalData=null}}class Si{constructor(_,t,e,n){this._dataView=void 0,this._littleEndian=void 0,this._offset=void 0,this._dataView=new DataView(_.buffer,_.byteOffset+t,e),this._littleEndian=n,this._offset=0}_nextUint8(){const _=this._dataView.getUint8(this._offset);return this._offset+=1,_}_nextUint16(){const _=this._dataView.getUint16(this._offset,this._littleEndian);return this._offset+=2,_}_nextUint32(){const _=this._dataView.getUint32(this._offset,this._littleEndian);return this._offset+=4,_}_nextUint64(){const _=this._dataView.getUint32(this._offset,this._littleEndian)+2**32*this._dataView.getUint32(this._offset+4,this._littleEndian);return this._offset+=8,_}_nextInt32(){const _=this._dataView.getInt32(this._offset,this._littleEndian);return this._offset+=4,_}_nextUint8Array(_){const t=new Uint8Array(this._dataView.buffer,this._dataView.byteOffset+this._offset,_);return this._offset+=_,t}_skip(_){return this._offset+=_,this}_scan(_,t){void 0===t&&(t=0);const e=this._offset;let n=0;for(;this._dataView.getUint8(this._offset)!==t&&n<_;)n++,this._offset++;return n<_&&this._offset++,new Uint8Array(this._dataView.buffer,this._dataView.byteOffset+e,n)}}const Fi=new Uint8Array([0]),Oi=[171,75,84,88,32,50,48,187,13,10,26,10];function Ei(_){return(new TextEncoder).encode(_)}function Ti(_){return(new TextDecoder).decode(_)}function Ci(_){let t=0;for(const e of _)t+=e.byteLength;const e=new Uint8Array(t);let n=0;for(const t of _)e.set(new Uint8Array(t),n),n+=t.byteLength;return e}function Mi(_,t){return void 0===t&&(t=4),Math.ceil(_/t)*t-_}function Pi(_){const t=new Uint8Array(_.buffer,_.byteOffset,Oi.length);if(t[0]!==Oi[0]||t[1]!==Oi[1]||t[2]!==Oi[2]||t[3]!==Oi[3]||t[4]!==Oi[4]||t[5]!==Oi[5]||t[6]!==Oi[6]||t[7]!==Oi[7]||t[8]!==Oi[8]||t[9]!==Oi[9]||t[10]!==Oi[10]||t[11]!==Oi[11])throw new Error("Missing KTX 2.0 identifier.");const e=new Ii,n=17*Uint32Array.BYTES_PER_ELEMENT,s=new Si(_,Oi.length,n,!0);e.vkFormat=s._nextUint32(),e.typeSize=s._nextUint32(),e.pixelWidth=s._nextUint32(),e.pixelHeight=s._nextUint32(),e.pixelDepth=s._nextUint32(),e.layerCount=s._nextUint32(),e.faceCount=s._nextUint32();const R=s._nextUint32();e.supercompressionScheme=s._nextUint32();const a=s._nextUint32(),i=s._nextUint32(),A=s._nextUint32(),O=s._nextUint32(),T=s._nextUint64(),K=s._nextUint64(),F=new Si(_,Oi.length+n,3*R*8,!0);for(let t=0;t<R;t++)e.levels.push({levelData:new Uint8Array(_.buffer,_.byteOffset+F._nextUint64(),F._nextUint64()),uncompressedByteLength:F._nextUint64()});const M=new Si(_,a,i,!0),r={vendorId:M._skip(4)._nextUint16(),descriptorType:M._nextUint16(),versionNumber:M._nextUint16(),descriptorBlockSize:M._nextUint16(),colorModel:M._nextUint8(),colorPrimaries:M._nextUint8(),transferFunction:M._nextUint8(),flags:M._nextUint8(),texelBlockDimension:[M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8()],bytesPlane:[M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8()],samples:[]},B=(r.descriptorBlockSize/4-6)/4;for(let _=0;_<B;_++){const t={bitOffset:M._nextUint16(),bitLength:M._nextUint8(),channelType:M._nextUint8(),samplePosition:[M._nextUint8(),M._nextUint8(),M._nextUint8(),M._nextUint8()],sampleLower:-1/0,sampleUpper:1/0};64&t.channelType?(t.sampleLower=M._nextInt32(),t.sampleUpper=M._nextInt32()):(t.sampleLower=M._nextUint32(),t.sampleUpper=M._nextUint32()),r.samples[_]=t}e.dataFormatDescriptor.length=0,e.dataFormatDescriptor.push(r);const o=new Si(_,A,O,!0);for(;o._offset<O;){const _=o._nextUint32(),t=o._scan(_),n=Ti(t);if(e.keyValue[n]=o._nextUint8Array(_-t.byteLength-1),n.match(/^ktx/i)){const _=Ti(e.keyValue[n]);e.keyValue[n]=_.substring(0,_.lastIndexOf("\0"))}o._skip(_%4?4-_%4:0)}if(K<=0)return e;const U=new Si(_,T,K,!0),S=U._nextUint16(),C=U._nextUint16(),l=U._nextUint32(),V=U._nextUint32(),L=U._nextUint32(),N=U._nextUint32(),f=[];for(let _=0;_<R;_++)f.push({imageFlags:U._nextUint32(),rgbSliceByteOffset:U._nextUint32(),rgbSliceByteLength:U._nextUint32(),alphaSliceByteOffset:U._nextUint32(),alphaSliceByteLength:U._nextUint32()});const D=T+U._offset,G=D+l,E=G+V,h=E+L,c=new Uint8Array(_.buffer,_.byteOffset+D,l),x=new Uint8Array(_.buffer,_.byteOffset+G,V),I=new Uint8Array(_.buffer,_.byteOffset+E,L),P=new Uint8Array(_.buffer,_.byteOffset+h,N);return e.globalData={endpointCount:S,selectorCount:C,imageDescs:f,endpointsData:c,selectorsData:x,tablesData:I,extendedData:P},e}const zi={keepWriter:!1};function Wi(_,t){void 0===t&&(t={}),t={...zi,...t};let e=new ArrayBuffer(0);if(_.globalData){const t=new ArrayBuffer(20+5*_.globalData.imageDescs.length*4),n=new DataView(t);n.setUint16(0,_.globalData.endpointCount,!0),n.setUint16(2,_.globalData.selectorCount,!0),n.setUint32(4,_.globalData.endpointsData.byteLength,!0),n.setUint32(8,_.globalData.selectorsData.byteLength,!0),n.setUint32(12,_.globalData.tablesData.byteLength,!0),n.setUint32(16,_.globalData.extendedData.byteLength,!0);for(let t=0;t<_.globalData.imageDescs.length;t++){const e=_.globalData.imageDescs[t];n.setUint32(20+5*t*4+0,e.imageFlags,!0),n.setUint32(20+5*t*4+4,e.rgbSliceByteOffset,!0),n.setUint32(20+5*t*4+8,e.rgbSliceByteLength,!0),n.setUint32(20+5*t*4+12,e.alphaSliceByteOffset,!0),n.setUint32(20+5*t*4+16,e.alphaSliceByteLength,!0)}e=Ci([t,_.globalData.endpointsData,_.globalData.selectorsData,_.globalData.tablesData,_.globalData.extendedData])}const n=[];let s=_.keyValue;t.keepWriter||(s={..._.keyValue,KTXwriter:"KTX-Parse v0.7.1"});for(const _ in s){const t=s[_],e=Ei(_),R="string"==typeof t?Ci([Ei(t),Fi]):t,a=e.byteLength+1+R.byteLength,i=Mi(a,4);n.push(Ci([new Uint32Array([a]),e,Fi,R,new Uint8Array(i).fill(0)]))}const R=Ci(n);if(1!==_.dataFormatDescriptor.length||0!==_.dataFormatDescriptor[0].descriptorType)throw new Error("Only BASICFORMAT Data Format Descriptor output supported.");const a=_.dataFormatDescriptor[0],i=new ArrayBuffer(28+16*a.samples.length),A=new DataView(i),O=24+16*a.samples.length;if(A.setUint32(0,i.byteLength,!0),A.setUint16(4,a.vendorId,!0),A.setUint16(6,a.descriptorType,!0),A.setUint16(8,a.versionNumber,!0),A.setUint16(10,O,!0),A.setUint8(12,a.colorModel),A.setUint8(13,a.colorPrimaries),A.setUint8(14,a.transferFunction),A.setUint8(15,a.flags),!Array.isArray(a.texelBlockDimension))throw new Error("texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.");A.setUint8(16,a.texelBlockDimension[0]),A.setUint8(17,a.texelBlockDimension[1]),A.setUint8(18,a.texelBlockDimension[2]),A.setUint8(19,a.texelBlockDimension[3]);for(let _=0;_<8;_++)A.setUint8(20+_,a.bytesPlane[_]);for(let _=0;_<a.samples.length;_++){const t=a.samples[_],e=28+16*_;if(t.channelID)throw new Error("channelID has been renamed to channelType.");A.setUint16(e+0,t.bitOffset,!0),A.setUint8(e+2,t.bitLength),A.setUint8(e+3,t.channelType),A.setUint8(e+4,t.samplePosition[0]),A.setUint8(e+5,t.samplePosition[1]),A.setUint8(e+6,t.samplePosition[2]),A.setUint8(e+7,t.samplePosition[3]),64&t.channelType?(A.setInt32(e+8,t.sampleLower,!0),A.setInt32(e+12,t.sampleUpper,!0)):(A.setUint32(e+8,t.sampleLower,!0),A.setUint32(e+12,t.sampleUpper,!0))}const T=Oi.length+68+3*_.levels.length*8,K=T+i.byteLength;let F=e.byteLength>0?K+R.byteLength:0;F%8&&(F+=8-F%8);const M=[],r=new DataView(new ArrayBuffer(3*_.levels.length*8)),B=new Uint32Array(_.levels.length);let o=0;0===_.supercompressionScheme&&(o=function(_,t){const e=Math.max(_,4),n=Math.min(_,4);let s=e;for(;s%n!=0;)s+=e;return s}(function(_){return _.levels[0].levelData.byteLength/function(_,t){let e=1;const n=[_.pixelWidth,_.pixelHeight,_.pixelDepth],s=function(_){const[t,e,n]=_.dataFormatDescriptor[0].texelBlockDimension;return[t+1,e+1,n+1]}(_);for(let _=0;_<3;_++)if(n[_]>0){const t=Math.ceil(Math.floor(n[_]*Math.pow(2,-0))/s[_]);e*=Math.max(1,t)}return _.layerCount>0&&(e*=_.layerCount),_.faceCount>0&&(e*=_.faceCount),e}(_)}(_)));let U=(F||K+R.byteLength)+e.byteLength;for(let t=_.levels.length-1;t>=0;t--){if(U%o){const _=Mi(U,o);M.push(new Uint8Array(_)),U+=_}const e=_.levels[t];M.push(e.levelData),B[t]=U,U+=e.levelData.byteLength}for(let t=0;t<_.levels.length;t++){const e=_.levels[t];r.setBigUint64(24*t+0,BigInt(B[t]),!0),r.setBigUint64(24*t+8,BigInt(e.levelData.byteLength),!0),r.setBigUint64(24*t+16,BigInt(e.uncompressedByteLength),!0)}const S=new ArrayBuffer(68),C=new DataView(S);return C.setUint32(0,_.vkFormat,!0),C.setUint32(4,_.typeSize,!0),C.setUint32(8,_.pixelWidth,!0),C.setUint32(12,_.pixelHeight,!0),C.setUint32(16,_.pixelDepth,!0),C.setUint32(20,_.layerCount,!0),C.setUint32(24,_.faceCount,!0),C.setUint32(28,_.levels.length,!0),C.setUint32(32,_.supercompressionScheme,!0),C.setUint32(36,T,!0),C.setUint32(40,i.byteLength,!0),C.setUint32(44,K,!0),C.setUint32(48,R.byteLength,!0),C.setBigUint64(52,BigInt(e.byteLength>0?F:0),!0),C.setBigUint64(60,BigInt(e.byteLength),!0),new Uint8Array(Ci([new Uint8Array(Oi).buffer,S,r.buffer,i,R,F>0?new ArrayBuffer(F-(K+R.byteLength)):new ArrayBuffer(0),e,...M]))}export{Z as KHR_DF_CHANNEL_RGBSDA_ALPHA,G as KHR_DF_CHANNEL_RGBSDA_BLUE,Q as KHR_DF_CHANNEL_RGBSDA_DEPTH,q as KHR_DF_CHANNEL_RGBSDA_GREEN,j as KHR_DF_CHANNEL_RGBSDA_RED,J as KHR_DF_CHANNEL_RGBSDA_STENCIL,g as KHR_DF_FLAG_ALPHA_PREMULTIPLIED,p as KHR_DF_FLAG_ALPHA_STRAIGHT,s as KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,U as KHR_DF_MODEL_ASTC,f as KHR_DF_MODEL_ETC1,c as KHR_DF_MODEL_ETC1S,h as KHR_DF_MODEL_ETC2,l as KHR_DF_MODEL_RGBSDA,_ as KHR_DF_MODEL_UASTC,o as KHR_DF_MODEL_UNSPECIFIED,H as KHR_DF_PRIMARIES_ACES,N as KHR_DF_PRIMARIES_ACESCC,Y as KHR_DF_PRIMARIES_ADOBERGB,z as KHR_DF_PRIMARIES_BT2020,M as KHR_DF_PRIMARIES_BT601_EBU,P as KHR_DF_PRIMARIES_BT601_SMPTE,C as KHR_DF_PRIMARIES_BT709,W as KHR_DF_PRIMARIES_CIEXYZ,R as KHR_DF_PRIMARIES_DISPLAYP3,K as KHR_DF_PRIMARIES_NTSC1953,X as KHR_DF_PRIMARIES_PAL525,T as KHR_DF_PRIMARIES_UNSPECIFIED,et as KHR_DF_SAMPLE_DATATYPE_EXPONENT,$ as KHR_DF_SAMPLE_DATATYPE_FLOAT,nt as KHR_DF_SAMPLE_DATATYPE_LINEAR,tt as KHR_DF_SAMPLE_DATATYPE_SIGNED,F as KHR_DF_TRANSFER_ACESCC,O as KHR_DF_TRANSFER_ACESCCT,E as KHR_DF_TRANSFER_ADOBERGB,D as KHR_DF_TRANSFER_BT1886,k as KHR_DF_TRANSFER_DCIP3,L as KHR_DF_TRANSFER_HLG_EOTF,B as KHR_DF_TRANSFER_HLG_OETF,b as KHR_DF_TRANSFER_ITU,x as KHR_DF_TRANSFER_LINEAR,d as KHR_DF_TRANSFER_NTSC,I as KHR_DF_TRANSFER_PAL625_EOTF,V as KHR_DF_TRANSFER_PAL_OETF,v as KHR_DF_TRANSFER_PQ_EOTF,A as KHR_DF_TRANSFER_PQ_OETF,w as KHR_DF_TRANSFER_SLOG,m as KHR_DF_TRANSFER_SLOG2,u as KHR_DF_TRANSFER_SRGB,S as KHR_DF_TRANSFER_ST240,y as KHR_DF_TRANSFER_UNSPECIFIED,a as KHR_DF_VENDORID_KHRONOS,r as KHR_DF_VERSION,e as KHR_SUPERCOMPRESSION_BASISLZ,t as KHR_SUPERCOMPRESSION_NONE,i as KHR_SUPERCOMPRESSION_ZLIB,n as KHR_SUPERCOMPRESSION_ZSTD,Ii as KTX2Container,Ut as VK_FORMAT_A1R5G5B5_UNORM_PACK16,Gt as VK_FORMAT_A2B10G10R10_SINT_PACK32,jt as VK_FORMAT_A2B10G10R10_SNORM_PACK32,qt as VK_FORMAT_A2B10G10R10_UINT_PACK32,Yt as VK_FORMAT_A2B10G10R10_UNORM_PACK32,Rt as VK_FORMAT_A2R10G10B10_SINT_PACK32,Kt as VK_FORMAT_A2R10G10B10_SNORM_PACK32,Xt as VK_FORMAT_A2R10G10B10_UINT_PACK32,Nt as VK_FORMAT_A2R10G10B10_UNORM_PACK32,Vi as VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT,ki as VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,Li as VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,Rn as VK_FORMAT_ASTC_10x10_SRGB_BLOCK,Xn as VK_FORMAT_ASTC_10x10_UNORM_BLOCK,mi as VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,zn as VK_FORMAT_ASTC_10x5_SRGB_BLOCK,Pn as VK_FORMAT_ASTC_10x5_UNORM_BLOCK,Di as VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,Hn as VK_FORMAT_ASTC_10x6_SRGB_BLOCK,Wn as VK_FORMAT_ASTC_10x6_UNORM_BLOCK,Bi as VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,Kn as VK_FORMAT_ASTC_10x8_SRGB_BLOCK,Nn as VK_FORMAT_ASTC_10x8_UNORM_BLOCK,vi as VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,jn as VK_FORMAT_ASTC_12x10_SRGB_BLOCK,Yn as VK_FORMAT_ASTC_12x10_UNORM_BLOCK,Ai as VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,Gn as VK_FORMAT_ASTC_12x12_SRGB_BLOCK,qn as VK_FORMAT_ASTC_12x12_UNORM_BLOCK,pi as VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,Dn as VK_FORMAT_ASTC_4x4_SRGB_BLOCK,mn as VK_FORMAT_ASTC_4x4_UNORM_BLOCK,gi as VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,Ln as VK_FORMAT_ASTC_5x4_SRGB_BLOCK,Bn as VK_FORMAT_ASTC_5x4_UNORM_BLOCK,yi as VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,An as VK_FORMAT_ASTC_5x5_SRGB_BLOCK,vn as VK_FORMAT_ASTC_5x5_UNORM_BLOCK,xi as VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,Vn as VK_FORMAT_ASTC_6x5_SRGB_BLOCK,kn as VK_FORMAT_ASTC_6x5_UNORM_BLOCK,ui as VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,Sn as VK_FORMAT_ASTC_6x6_SRGB_BLOCK,In as VK_FORMAT_ASTC_6x6_UNORM_BLOCK,bi as VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,On as VK_FORMAT_ASTC_8x5_SRGB_BLOCK,Fn as VK_FORMAT_ASTC_8x5_UNORM_BLOCK,di as VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,Tn as VK_FORMAT_ASTC_8x6_SRGB_BLOCK,En as VK_FORMAT_ASTC_8x6_UNORM_BLOCK,wi as VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,Mn as VK_FORMAT_ASTC_8x8_SRGB_BLOCK,Cn as VK_FORMAT_ASTC_8x8_UNORM_BLOCK,We as VK_FORMAT_B10G11R11_UFLOAT_PACK32,ti as VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,ai as VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,rt as VK_FORMAT_B4G4R4A4_UNORM_PACK16,ht as VK_FORMAT_B5G5R5A1_UNORM_PACK16,lt as VK_FORMAT_B5G6R5_UNORM_PACK16,Wt as VK_FORMAT_B8G8R8A8_SINT,Pt as VK_FORMAT_B8G8R8A8_SNORM,Ht as VK_FORMAT_B8G8R8A8_SRGB,zt as VK_FORMAT_B8G8R8A8_UINT,Mt as VK_FORMAT_B8G8R8A8_UNORM,It as VK_FORMAT_B8G8R8_SINT,kt as VK_FORMAT_B8G8R8_SNORM,St as VK_FORMAT_B8G8R8_SRGB,Vt as VK_FORMAT_B8G8R8_UINT,At as VK_FORMAT_B8G8R8_UNORM,Ze as VK_FORMAT_BC1_RGBA_SRGB_BLOCK,Qe as VK_FORMAT_BC1_RGBA_UNORM_BLOCK,Je as VK_FORMAT_BC1_RGB_SRGB_BLOCK,Ge as VK_FORMAT_BC1_RGB_UNORM_BLOCK,tn as VK_FORMAT_BC2_SRGB_BLOCK,$e as VK_FORMAT_BC2_UNORM_BLOCK,nn as VK_FORMAT_BC3_SRGB_BLOCK,en as VK_FORMAT_BC3_UNORM_BLOCK,an as VK_FORMAT_BC4_SNORM_BLOCK,sn as VK_FORMAT_BC4_UNORM_BLOCK,on as VK_FORMAT_BC5_SNORM_BLOCK,rn as VK_FORMAT_BC5_UNORM_BLOCK,fn as VK_FORMAT_BC6H_SFLOAT_BLOCK,ln as VK_FORMAT_BC6H_UFLOAT_BLOCK,Un as VK_FORMAT_BC7_SRGB_BLOCK,hn as VK_FORMAT_BC7_UNORM_BLOCK,Ne as VK_FORMAT_D16_UNORM,Ye as VK_FORMAT_D16_UNORM_S8_UINT,je as VK_FORMAT_D24_UNORM_S8_UINT,Xe as VK_FORMAT_D32_SFLOAT,qe as VK_FORMAT_D32_SFLOAT_S8_UINT,He as VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,wn as VK_FORMAT_EAC_R11G11_SNORM_BLOCK,dn as VK_FORMAT_EAC_R11G11_UNORM_BLOCK,bn as VK_FORMAT_EAC_R11_SNORM_BLOCK,un as VK_FORMAT_EAC_R11_UNORM_BLOCK,gn as VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,pn as VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,xn as VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,yn as VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,_n as VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,cn as VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,$n as VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,si as VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,hi as VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,ri as VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,Ui as VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,oi as VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,ci as VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,li as VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,_i as VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,fi as VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,Zn as VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,Qn as VK_FORMAT_R10X6G10X6_UNORM_2PACK16,Jn as VK_FORMAT_R10X6_UNORM_PACK16,ii as VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,ni as VK_FORMAT_R12X4G12X4_UNORM_2PACK16,ei as VK_FORMAT_R12X4_UNORM_PACK16,ge as VK_FORMAT_R16G16B16A16_SFLOAT,pe as VK_FORMAT_R16G16B16A16_SINT,ce as VK_FORMAT_R16G16B16A16_SNORM,_e as VK_FORMAT_R16G16B16A16_UINT,Ue as VK_FORMAT_R16G16B16A16_UNORM,he as VK_FORMAT_R16G16B16_SFLOAT,fe as VK_FORMAT_R16G16B16_SINT,oe as VK_FORMAT_R16G16B16_SNORM,le as VK_FORMAT_R16G16B16_UINT,re as VK_FORMAT_R16G16B16_UNORM,ae as VK_FORMAT_R16G16_SFLOAT,se as VK_FORMAT_R16G16_SINT,ne as VK_FORMAT_R16G16_SNORM,ie as VK_FORMAT_R16G16_UINT,ee as VK_FORMAT_R16G16_UNORM,te as VK_FORMAT_R16_SFLOAT,$t as VK_FORMAT_R16_SINT,Qt as VK_FORMAT_R16_SNORM,Zt as VK_FORMAT_R16_UINT,Jt as VK_FORMAT_R16_UNORM,Ae as VK_FORMAT_R32G32B32A32_SFLOAT,ve as VK_FORMAT_R32G32B32A32_SINT,Le as VK_FORMAT_R32G32B32A32_UINT,Be as VK_FORMAT_R32G32B32_SFLOAT,De as VK_FORMAT_R32G32B32_SINT,me as VK_FORMAT_R32G32B32_UINT,we as VK_FORMAT_R32G32_SFLOAT,de as VK_FORMAT_R32G32_SINT,be as VK_FORMAT_R32G32_UINT,ue as VK_FORMAT_R32_SFLOAT,xe as VK_FORMAT_R32_SINT,ye as VK_FORMAT_R32_UINT,at as VK_FORMAT_R4G4B4A4_UNORM_PACK16,st as VK_FORMAT_R4G4_UNORM_PACK8,ft as VK_FORMAT_R5G5B5A1_UNORM_PACK16,ot as VK_FORMAT_R5G6B5_UNORM_PACK16,ze as VK_FORMAT_R64G64B64A64_SFLOAT,Pe as VK_FORMAT_R64G64B64A64_SINT,Me as VK_FORMAT_R64G64B64A64_UINT,Ce as VK_FORMAT_R64G64B64_SFLOAT,Te as VK_FORMAT_R64G64B64_SINT,Ee as VK_FORMAT_R64G64B64_UINT,Oe as VK_FORMAT_R64G64_SFLOAT,Fe as VK_FORMAT_R64G64_SINT,Se as VK_FORMAT_R64G64_UINT,Ie as VK_FORMAT_R64_SFLOAT,Ve as VK_FORMAT_R64_SINT,ke as VK_FORMAT_R64_UINT,Tt as VK_FORMAT_R8G8B8A8_SINT,Ot as VK_FORMAT_R8G8B8A8_SNORM,Ct as VK_FORMAT_R8G8B8A8_SRGB,Et as VK_FORMAT_R8G8B8A8_UINT,Ft as VK_FORMAT_R8G8B8A8_UNORM,Lt as VK_FORMAT_R8G8B8_SINT,Dt as VK_FORMAT_R8G8B8_SNORM,vt as VK_FORMAT_R8G8B8_SRGB,Bt as VK_FORMAT_R8G8B8_UINT,mt as VK_FORMAT_R8G8B8_UNORM,dt as VK_FORMAT_R8G8_SINT,ut as VK_FORMAT_R8G8_SNORM,wt as VK_FORMAT_R8G8_SRGB,bt as VK_FORMAT_R8G8_UINT,xt as VK_FORMAT_R8G8_UNORM,gt as VK_FORMAT_R8_SINT,_t as VK_FORMAT_R8_SNORM,yt as VK_FORMAT_R8_SRGB,pt as VK_FORMAT_R8_UINT,ct as VK_FORMAT_R8_UNORM,Re as VK_FORMAT_S8_UINT,it as VK_FORMAT_UNDEFINED,Ke as VK_FORMAT_X8_D24_UNORM_PACK32,Pi as read,Wi as write};
//# sourceMappingURL=ktx-parse.module.js.map