{"version":3,"file":"node_modules/three/examples/jsm/libs/motion-controllers.module.js","names":["Constants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","async","fetchJsonFile","path","response","fetch","ok","json","Error","statusText","fetchProfilesList","basePath","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","Math","sqrt","theta","atan2","cos","sin","normalizedXAxis","normalizedYAxis","VisualResponse","constructor","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push"],"sources":["node_modules/three/examples/jsm/libs/motion-controllers.module.js"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n"],"mappings":"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","ignoreList":[]}