{"version":3,"file":"node_modules/three/examples/jsm/libs/potpack.module.js","names":["potpack","boxes","area","maxWidth","box","w","h","Math","max","sort","a","b","spaces","x","y","ceil","sqrt","Infinity","width","height","i","length","space","last","pop","push","fill"],"sources":["node_modules/three/examples/jsm/libs/potpack.module.js"],"sourcesContent":["/**\n * potpack - by [@mourner](https://github.com/mourner)\n * \n * A tiny JavaScript function for packing 2D rectangles into a near-square container, \n * which is useful for generating CSS sprites and WebGL textures. Similar to \n * [shelf-pack](https://github.com/mapbox/shelf-pack), but static (you can't add items \n * once a layout is generated), and aims for maximal space utilization.\n *\n * A variation of algorithms used in [rectpack2D](https://github.com/TeamHypersomnia/rectpack2D)\n * and [bin-pack](https://github.com/bryanburgers/bin-pack), which are in turn based \n * on [this article by Blackpawn](http://blackpawn.com/texts/lightmaps/default.html).\n * \n * @license\n * ISC License\n * \n * Copyright (c) 2018, Mapbox\n * \n * Permission to use, copy, modify, and/or distribute this software for any purpose\n * with or without fee is hereby granted, provided that the above copyright notice\n * and this permission notice appear in all copies.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n * THIS SOFTWARE.\n */\n\nfunction potpack(boxes) {\n\n\t// calculate total box area and maximum box width\n\tlet area = 0;\n\tlet maxWidth = 0;\n\t\n\tfor (const box of boxes) {\n\t\tarea += box.w * box.h;\n\t\tmaxWidth = Math.max(maxWidth, box.w);\n\t}\n\t\n\t// sort the boxes for insertion by height, descending\n\tboxes.sort((a, b) => b.h - a.h);\n\t\n\t// aim for a squarish resulting container,\n\t// slightly adjusted for sub-100% space utilization\n\tconst startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\t\n\t// start with a single empty space, unbounded at the bottom\n\tconst spaces = [{x: 0, y: 0, w: startWidth, h: Infinity}];\n\t\n\tlet width = 0;\n\tlet height = 0;\n\t\n\tfor (const box of boxes) {\n\t\t// look through spaces backwards so that we check smaller spaces first\n\t\tfor (let i = spaces.length - 1; i >= 0; i--) {\n\t\t\tconst space = spaces[i];\n\t\t\t\n\t\t\t// look for empty spaces that can accommodate the current box\n\t\t\tif (box.w > space.w || box.h > space.h) continue;\n\t\t\t\n\t\t\t// found the space; add the box to its top-left corner\n\t\t\t// |-------|-------|\n\t\t\t// |  box  |       |\n\t\t\t// |_______|       |\n\t\t\t// |         space |\n\t\t\t// |_______________|\n\t\t\tbox.x = space.x;\n\t\t\tbox.y = space.y;\n\t\t\t\n\t\t\theight = Math.max(height, box.y + box.h);\n\t\t\twidth = Math.max(width, box.x + box.w);\n\t\t\t\n\t\t\tif (box.w === space.w && box.h === space.h) {\n\t\t\t\t// space matches the box exactly; remove it\n\t\t\t\tconst last = spaces.pop();\n\t\t\t\tif (i < spaces.length) spaces[i] = last;\n\t\t\t\n\t\t\t} else if (box.h === space.h) {\n\t\t\t\t// space matches the box height; update it accordingly\n\t\t\t\t// |-------|---------------|\n\t\t\t\t// |  box  | updated space |\n\t\t\t\t// |_______|_______________|\n\t\t\t\tspace.x += box.w;\n\t\t\t\tspace.w -= box.w;\n\t\t\t\n\t\t\t} else if (box.w === space.w) {\n\t\t\t\t// space matches the box width; update it accordingly\n\t\t\t\t// |---------------|\n\t\t\t\t// |      box      |\n\t\t\t\t// |_______________|\n\t\t\t\t// | updated space |\n\t\t\t\t// |_______________|\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t\n\t\t\t} else {\n\t\t\t\t// otherwise the box splits the space into two spaces\n\t\t\t\t// |-------|-----------|\n\t\t\t\t// |  box  | new space |\n\t\t\t\t// |_______|___________|\n\t\t\t\t// | updated space     |\n\t\t\t\t// |___________________|\n\t\t\t\tspaces.push({\n\t\t\t\t\tx: space.x + box.w,\n\t\t\t\t\ty: space.y,\n\t\t\t\t\tw: space.w - box.w,\n\t\t\t\t\th: box.h\n\t\t\t\t});\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn {\n\t\tw: width, // container width\n\t\th: height, // container height\n\t\tfill: (area / (width * height)) || 0 // space utilization\n\t};\n}\n\nexport { potpack };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASA,QAAQC,GAGhB,IAAIC,EAAO,EACPC,EAAW,EAEf,IAAK,MAAMC,KAAOH,EACjBC,GAAQE,EAAIC,EAAID,EAAIE,EACpBH,EAAWI,KAAKC,IAAIL,EAAUC,EAAIC,GAInCJ,EAAMQ,MAAK,CAACC,EAAGC,IAAMA,EAAEL,EAAII,EAAEJ,IAI7B,MAGMM,EAAS,CAAC,CAACC,EAAG,EAAGC,EAAG,EAAGT,EAHVE,KAAKC,IAAID,KAAKQ,KAAKR,KAAKS,KAAKd,EAAO,MAAQC,GAGnBG,EAAGW,MAE/C,IAAIC,EAAQ,EACRC,EAAS,EAEb,IAAK,MAAMf,KAAOH,EAEjB,IAAK,IAAImB,EAAIR,EAAOS,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC5C,MAAME,EAAQV,EAAOQ,GAGrB,KAAIhB,EAAIC,EAAIiB,EAAMjB,GAAKD,EAAIE,EAAIgB,EAAMhB,GAArC,CAcA,GANAF,EAAIS,EAAIS,EAAMT,EACdT,EAAIU,EAAIQ,EAAMR,EAEdK,EAASZ,KAAKC,IAAIW,EAAQf,EAAIU,EAAIV,EAAIE,GACtCY,EAAQX,KAAKC,IAAIU,EAAOd,EAAIS,EAAIT,EAAIC,GAEhCD,EAAIC,IAAMiB,EAAMjB,GAAKD,EAAIE,IAAMgB,EAAMhB,EAAG,CAE3C,MAAMiB,EAAOX,EAAOY,MAChBJ,EAAIR,EAAOS,SAAQT,EAAOQ,GAAKG,EAEpC,MAAWnB,EAAIE,IAAMgB,EAAMhB,GAK1BgB,EAAMT,GAAKT,EAAIC,EACfiB,EAAMjB,GAAKD,EAAIC,GAELD,EAAIC,IAAMiB,EAAMjB,GAO1BiB,EAAMR,GAAKV,EAAIE,EACfgB,EAAMhB,GAAKF,EAAIE,IASfM,EAAOa,KAAK,CACXZ,EAAGS,EAAMT,EAAIT,EAAIC,EACjBS,EAAGQ,EAAMR,EACTT,EAAGiB,EAAMjB,EAAID,EAAIC,EACjBC,EAAGF,EAAIE,IAERgB,EAAMR,GAAKV,EAAIE,EACfgB,EAAMhB,GAAKF,EAAIE,GAEhB,KArDgD,CAsDjD,CAGD,MAAO,CACND,EAAGa,EACHZ,EAAGa,EACHO,KAAOxB,GAAQgB,EAAQC,IAAY,EAErC,QAESnB","ignoreList":[]}