{"version":3,"file":"node_modules/three/examples/jsm/lines/LineGeometry.js","names":["LineSegmentsGeometry","LineGeometry","constructor","super","this","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","setFromPoints","positions","x","y","z","fromLine","line","geometry","attributes","position"],"sources":["node_modules/three/examples/jsm/lines/LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\n/**\n * A chain of vertices, forming a polyline.\n *\n * This is used in {@link Line2} to describe the shape.\n *\n * ```js\n * const points = [\n * \tnew THREE.Vector3( - 10, 0, 0 ),\n * \tnew THREE.Vector3( 0, 5, 0 ),\n * \tnew THREE.Vector3( 10, 0, 0 ),\n * ];\n *\n * const geometry = new LineGeometry();\n * geometry.setFromPoints( points );\n * ```\n *\n * @augments LineSegmentsGeometry\n * @three_import import { LineLineGeometry2 } from 'three/addons/lines/LineGeometry.js';\n */\nclass LineGeometry extends LineSegmentsGeometry {\n\n\t/**\n\t * Constructs a new line geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineGeometry = true;\n\n\t\tthis.type = 'LineGeometry';\n\n\t}\n\n\t/**\n\t * Sets the given line positions for this geometry.\n\t *\n\t * @param {Float32Array|Array<number>} array - The position data to set.\n\t * @return {LineGeometry} A reference to this geometry.\n\t */\n\tsetPositions( array ) {\n\n\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst points = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setPositions( points );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given line colors for this geometry.\n\t *\n\t * @param {Float32Array|Array<number>} array - The position data to set.\n\t * @return {LineGeometry} A reference to this geometry.\n\t */\n\tsetColors( array ) {\n\n\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst colors = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setColors( colors );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Setups this line segments geometry from the given sequence of points.\n\t *\n\t * @param {Array<Vector3|Vector2>} points - An array of points in 2D or 3D space.\n\t * @return {LineGeometry} A reference to this geometry.\n\t */\n\tsetFromPoints( points ) {\n\n\t\t// converts a vector3 or vector2 array to pairs format\n\n\t\tconst length = points.length - 1;\n\t\tconst positions = new Float32Array( 6 * length );\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tpositions[ 6 * i ] = points[ i ].x;\n\t\t\tpositions[ 6 * i + 1 ] = points[ i ].y;\n\t\t\tpositions[ 6 * i + 2 ] = points[ i ].z || 0;\n\n\t\t\tpositions[ 6 * i + 3 ] = points[ i + 1 ].x;\n\t\t\tpositions[ 6 * i + 4 ] = points[ i + 1 ].y;\n\t\t\tpositions[ 6 * i + 5 ] = points[ i + 1 ].z || 0;\n\n\t\t}\n\n\t\tsuper.setPositions( positions );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Setups this line segments geometry from the given line.\n\t *\n\t * @param {Line} line - The line that should be used as a data source for this geometry.\n\t * @return {LineGeometry} A reference to this geometry.\n\t */\n\tfromLine( line ) {\n\n\t\tconst geometry = line.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineGeometry };\n"],"mappings":"OAASA,yBAA4B,mCAqBrC,MAAMC,qBAAqBD,qBAK1B,WAAAE,GAECC,QASAC,KAAKC,gBAAiB,EAEtBD,KAAKE,KAAO,cAEb,CAQA,YAAAC,CAAcC,GAIb,MAAMC,EAASD,EAAMC,OAAS,EACxBC,EAAS,IAAIC,aAAc,EAAIF,GAErC,IAAM,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAEjCF,EAAQ,EAAIE,GAAMJ,EAAOI,GACzBF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GAEjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GACjCF,EAAQ,EAAIE,EAAI,GAAMJ,EAAOI,EAAI,GAMlC,OAFAT,MAAMI,aAAcG,GAEbN,IAER,CAQA,SAAAS,CAAWL,GAIV,MAAMC,EAASD,EAAMC,OAAS,EACxBK,EAAS,IAAIH,aAAc,EAAIF,GAErC,IAAM,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAEjCE,EAAQ,EAAIF,GAAMJ,EAAOI,GACzBE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GAEjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GACjCE,EAAQ,EAAIF,EAAI,GAAMJ,EAAOI,EAAI,GAMlC,OAFAT,MAAMU,UAAWC,GAEVV,IAER,CAQA,aAAAW,CAAeL,GAId,MAAMD,EAASC,EAAOD,OAAS,EACzBO,EAAY,IAAIL,aAAc,EAAIF,GAExC,IAAM,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,IAE5BI,EAAW,EAAIJ,GAAMF,EAAQE,GAAIK,EACjCD,EAAW,EAAIJ,EAAI,GAAMF,EAAQE,GAAIM,EACrCF,EAAW,EAAIJ,EAAI,GAAMF,EAAQE,GAAIO,GAAK,EAE1CH,EAAW,EAAIJ,EAAI,GAAMF,EAAQE,EAAI,GAAIK,EACzCD,EAAW,EAAIJ,EAAI,GAAMF,EAAQE,EAAI,GAAIM,EACzCF,EAAW,EAAIJ,EAAI,GAAMF,EAAQE,EAAI,GAAIO,GAAK,EAM/C,OAFAhB,MAAMI,aAAcS,GAEbZ,IAER,CAQA,QAAAgB,CAAUC,GAET,MAAMC,EAAWD,EAAKC,SAMtB,OAJAlB,KAAKG,aAAce,EAASC,WAAWC,SAAShB,OAIzCJ,IAER,SAIQH","ignoreList":[]}