{"version":3,"file":"node_modules/three/examples/jsm/lines/Wireframe.js","names":["InstancedInterleavedBuffer","InterleavedBufferAttribute","Mesh","Vector3","Vector4","LineSegmentsGeometry","LineMaterial","_start","_end","_viewport","Wireframe","constructor","geometry","material","color","Math","random","super","this","isWireframe","type","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute","onBeforeRender","renderer","uniforms","resolution","getViewport","value","set","z","w"],"sources":["node_modules/three/examples/jsm/lines/Wireframe.js"],"sourcesContent":["import {\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tMesh,\n\tVector3,\n\tVector4\n} from 'three';\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nimport { LineMaterial } from '../lines/LineMaterial.js';\n\nconst _start = new Vector3();\nconst _end = new Vector3();\nconst _viewport = new Vector4();\n\n/**\n * A class for creating wireframes based on wide lines.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * import the class from `lines/webgpu/Wireframe.js`.\n *\n * ```js\n * const geometry = new THREE.IcosahedronGeometry();\n * const wireframeGeometry = new WireframeGeometry2( geo );\n *\n * const wireframe = new Wireframe( wireframeGeometry, material );\n * scene.add( wireframe );\n * ```\n *\n * @augments Mesh\n * @three_import import { Wireframe } from 'three/addons/lines/Wireframe.js';\n */\nclass Wireframe extends Mesh {\n\n\t/**\n\t * Constructs a new wireframe.\n\t *\n\t * @param {LineSegmentsGeometry} [geometry] - The line geometry.\n\t * @param {LineMaterial} [material] - The line material.\n\t */\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWireframe = true;\n\n\t\tthis.type = 'Wireframe';\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Wireframe} A reference to this instance.\n\t */\n\tcomputeLineDistances() {\n\n\t\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n\tonBeforeRender( renderer ) {\n\n\t\tconst uniforms = this.material.uniforms;\n\n\t\tif ( uniforms && uniforms.resolution ) {\n\n\t\t\trenderer.getViewport( _viewport );\n\t\t\tthis.material.uniforms.resolution.value.set( _viewport.z, _viewport.w );\n\n\t\t}\n\n\t}\n\n}\n\nexport { Wireframe };\n"],"mappings":"OACCA,2BACAC,2BACAC,KACAC,QACAC,YACM,eACEC,yBAA4B,0CAC5BC,iBAAoB,2BAE7B,MAAMC,OAAS,IAAIJ,QACbK,KAAO,IAAIL,QACXM,UAAY,IAAIL,QAmBtB,MAAMM,kBAAkBR,KAQvB,WAAAS,CAAaC,EAAW,IAAIP,qBAAwBQ,EAAW,IAAIP,aAAc,CAAEQ,MAAuB,SAAhBC,KAAKC,YAE9FC,MAAOL,EAAUC,GASjBK,KAAKC,aAAc,EAEnBD,KAAKE,KAAO,WAEb,CASA,oBAAAC,GAIC,MAAMT,EAAWM,KAAKN,SAEhBU,EAAgBV,EAASW,WAAWD,cACpCE,EAAcZ,EAASW,WAAWC,YAClCC,EAAgB,IAAIC,aAAc,EAAIJ,EAAcK,OAE1D,IAAM,IAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAIR,EAAcK,MAAOC,EAAIE,EAAGF,IAAMC,GAAK,EAElEtB,OAAOwB,oBAAqBT,EAAeM,GAC3CpB,KAAKuB,oBAAqBP,EAAaI,GAEvCH,EAAeI,GAAc,IAANA,EAAY,EAAIJ,EAAeI,EAAI,GAC1DJ,EAAeI,EAAI,GAAMJ,EAAeI,GAAMtB,OAAOyB,WAAYxB,MAIlE,MAAMyB,EAAyB,IAAIjC,2BAA4ByB,EAAe,EAAG,GAKjF,OAHAb,EAASsB,aAAc,wBAAyB,IAAIjC,2BAA4BgC,EAAwB,EAAG,IAC3GrB,EAASsB,aAAc,sBAAuB,IAAIjC,2BAA4BgC,EAAwB,EAAG,IAElGf,IAER,CAEA,cAAAiB,CAAgBC,GAEf,MAAMC,EAAWnB,KAAKL,SAASwB,SAE1BA,GAAYA,EAASC,aAEzBF,EAASG,YAAa9B,WACtBS,KAAKL,SAASwB,SAASC,WAAWE,MAAMC,IAAKhC,UAAUiC,EAAGjC,UAAUkC,GAItE,SAIQjC","ignoreList":[]}