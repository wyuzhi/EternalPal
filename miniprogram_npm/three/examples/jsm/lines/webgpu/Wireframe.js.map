{"version":3,"file":"node_modules/three/examples/jsm/lines/webgpu/Wireframe.js","names":["InstancedInterleavedBuffer","InterleavedBufferAttribute","Line2NodeMaterial","Mesh","Vector3","LineSegmentsGeometry","_start","_end","Wireframe","constructor","geometry","material","color","Math","random","super","this","isWireframe","type","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute"],"sources":["node_modules/three/examples/jsm/lines/webgpu/Wireframe.js"],"sourcesContent":["import {\n\tInstancedInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tLine2NodeMaterial,\n\tMesh,\n\tVector3\n} from 'three/webgpu';\n\nimport { LineSegmentsGeometry } from '../../lines/LineSegmentsGeometry.js';\n\nconst _start = new Vector3();\nconst _end = new Vector3();\n\n/**\n * A class for creating wireframes based on wide lines.\n *\n * This module can only be used with {@link WebGPURenderer}. When using {@link WebGLRenderer},\n * import the class from `lines/Wireframe.js`.\n *\n * @augments Mesh\n * @three_import import { Wireframe } from 'three/addons/lines/webgpu/Wireframe.js';\n */\nclass Wireframe extends Mesh {\n\n\t/**\n\t * Constructs a new wireframe.\n\t *\n\t * @param {LineSegmentsGeometry} [geometry] - The line geometry.\n\t * @param {Line2NodeMaterial} [material] - The line material.\n\t */\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new Line2NodeMaterial( { color: Math.random() * 0xffffff } ) ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWireframe = true;\n\n\t\tthis.type = 'Wireframe';\n\n\t}\n\n\t/**\n\t * Computes an array of distance values which are necessary for rendering dashed lines.\n\t * For each vertex in the geometry, the method calculates the cumulative length from the\n\t * current point to the very beginning of the line.\n\t *\n\t * @return {Wireframe} A reference to this instance.\n\t */\n\tcomputeLineDistances() {\n\n\t\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst instanceStart = geometry.attributes.instanceStart;\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\n\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\n\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\n\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\n\n\t\t}\n\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\n\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { Wireframe };\n"],"mappings":"OACCA,2BACAC,2BACAC,kBACAC,KACAC,YACM,sBAEEC,yBAA4B,sCAErC,MAAMC,OAAS,IAAIF,QACbG,KAAO,IAAIH,QAWjB,MAAMI,kBAAkBL,KAQvB,WAAAM,CAAaC,EAAW,IAAIL,qBAAwBM,EAAW,IAAIT,kBAAmB,CAAEU,MAAuB,SAAhBC,KAAKC,YAEnGC,MAAOL,EAAUC,GASjBK,KAAKC,aAAc,EAEnBD,KAAKE,KAAO,WAEb,CASA,oBAAAC,GAIC,MAAMT,EAAWM,KAAKN,SAEhBU,EAAgBV,EAASW,WAAWD,cACpCE,EAAcZ,EAASW,WAAWC,YAClCC,EAAgB,IAAIC,aAAc,EAAIJ,EAAcK,OAE1D,IAAM,IAAIC,EAAI,EAAGC,EAAI,EAAGC,EAAIR,EAAcK,MAAOC,EAAIE,EAAGF,IAAMC,GAAK,EAElErB,OAAOuB,oBAAqBT,EAAeM,GAC3CnB,KAAKsB,oBAAqBP,EAAaI,GAEvCH,EAAeI,GAAc,IAANA,EAAY,EAAIJ,EAAeI,EAAI,GAC1DJ,EAAeI,EAAI,GAAMJ,EAAeI,GAAMrB,OAAOwB,WAAYvB,MAIlE,MAAMwB,EAAyB,IAAI/B,2BAA4BuB,EAAe,EAAG,GAKjF,OAHAb,EAASsB,aAAc,wBAAyB,IAAI/B,2BAA4B8B,EAAwB,EAAG,IAC3GrB,EAASsB,aAAc,sBAAuB,IAAI/B,2BAA4B8B,EAAwB,EAAG,IAElGf,IAER,SAIQR","ignoreList":[]}