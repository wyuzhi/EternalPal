import{BufferGeometryLoader,CanvasTexture,ClampToEdgeWrapping,Color,DirectionalLight,DoubleSide,FileLoader,LinearFilter,Line,LineBasicMaterial,Loader,Matrix4,Mesh,MeshPhysicalMaterial,MeshStandardMaterial,Object3D,PointLight,Points,PointsMaterial,RectAreaLight,RepeatWrapping,SpotLight,Sprite,SpriteMaterial,TextureLoader}from"three";import{EXRLoader}from"../loaders/EXRLoader.js";const _taskCache=new WeakMap;class Rhino3dmLoader extends Loader{constructor(e){super(e),this.libraryPath="",this.libraryPending=null,this.libraryBinary=null,this.libraryConfig={},this.url="",this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.workerConfig={},this.materials=[],this.warnings=[]}setLibraryPath(e){return this.libraryPath=e,this}setWorkerLimit(e){return this.workerLimit=e,this}load(e,t,r,s){const a=new FileLoader(this.manager);a.setPath(this.path),a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),this.url=e,a.load(e,(r=>{if(_taskCache.has(r)){return _taskCache.get(r).promise.then(t).catch(s)}this.decodeObjects(r,e).then((e=>{e.userData.warnings=this.warnings,t(e)})).catch((e=>s(e)))}),r,s)}debug(){console.log("Task load: ",this.workerPool.map((e=>e._taskLoad)))}decodeObjects(e,t){let r,s;const a=e.byteLength,n=this._getWorker(a).then((t=>(r=t,s=this.workerNextTaskID++,new Promise(((t,a)=>{r._callbacks[s]={resolve:t,reject:a},r.postMessage({type:"decode",id:s,buffer:e},[e])}))))).then((e=>this._createGeometry(e.data))).catch((e=>{throw e}));return n.catch((()=>!0)).then((()=>{r&&s&&this._releaseTask(r,s)})),_taskCache.set(e,{url:t,promise:n}),n}parse(e,t,r){this.decodeObjects(e,"").then((e=>{e.userData.warnings=this.warnings,t(e)})).catch((e=>r(e)))}_compareMaterials(e){const t={};t.name=e.name,t.color={},t.color.r=e.color.r,t.color.g=e.color.g,t.color.b=e.color.b,t.type=e.type,t.vertexColors=e.vertexColors;const r=JSON.stringify(t);for(let e=0;e<this.materials.length;e++){const t=this.materials[e],s={};if(s.name=t.name,s.color={},s.color.r=t.color.r,s.color.g=t.color.g,s.color.b=t.color.b,s.type=t.type,s.vertexColors=t.vertexColors,JSON.stringify(s)===r)return t}return this.materials.push(e),e}_createMaterial(e,t){if(void 0===e)return new MeshStandardMaterial({color:new Color(1,1,1),metalness:.8,name:Loader.DEFAULT_MATERIAL_NAME,side:DoubleSide});const r=new MeshPhysicalMaterial({color:new Color(e.diffuseColor.r/255,e.diffuseColor.g/255,e.diffuseColor.b/255),emissive:new Color(e.emissionColor.r,e.emissionColor.g,e.emissionColor.b),flatShading:e.disableLighting,ior:e.indexOfRefraction,name:e.name,reflectivity:e.reflectivity,opacity:1-e.transparency,side:DoubleSide,specularColor:e.specularColor,transparent:e.transparency>0});if(r.userData.id=e.id,e.pbrSupported){const t=e.pbr;r.anisotropy=t.anisotropic,r.anisotropyRotation=t.anisotropicRotation,r.color=new Color(t.baseColor.r,t.baseColor.g,t.baseColor.b),r.clearcoat=t.clearcoat,r.clearcoatRoughness=t.clearcoatRoughness,r.metalness=t.metallic,r.transmission=1-t.opacity,r.roughness=t.roughness,r.sheen=t.sheen,r.specularIntensity=t.specular,r.thickness=t.subsurface}e.pbrSupported&&0===e.pbr.opacity&&1===e.transparency&&(r.opacity=.2,r.transmission=1);const s=new TextureLoader;for(let t=0;t<e.textures.length;t++){const a=e.textures[t];if(null!==a.image){const e=s.load(a.image);switch(a.type){case"Bump":r.bumpMap=e;break;case"Diffuse":case"PBR_BaseColor":r.map=e;break;case"Emap":r.envMap=e;break;case"Opacity":r.transmissionMap=e;break;case"Transparency":case"PBR_Alpha":r.alphaMap=e,r.transparent=!0;break;case"PBR_AmbientOcclusion":r.aoMap=e;break;case"PBR_Anisotropic":r.anisotropyMap=e;break;case"PBR_Clearcoat":r.clearcoatMap=e;break;case"PBR_ClearcoatBump":r.clearcoatNormalMap=e;break;case"PBR_ClearcoatRoughness":r.clearcoatRoughnessMap=e;break;case"PBR_Displacement":r.displacementMap=e;break;case"PBR_Emission":r.emissiveMap=e;break;case"PBR_Metallic":r.metalnessMap=e;break;case"PBR_Roughness":r.roughnessMap=e;break;case"PBR_Sheen":r.sheenColorMap=e;break;case"PBR_Specular":r.specularColorMap=e;break;case"PBR_Subsurface":r.thicknessMap=e;break;default:this.warnings.push({message:`THREE.3DMLoader: No conversion exists for 3dm ${a.type}.`,type:"no conversion"})}e.wrapS=0===a.wrapU?RepeatWrapping:ClampToEdgeWrapping,e.wrapT=0===a.wrapV?RepeatWrapping:ClampToEdgeWrapping,a.repeat&&e.repeat.set(a.repeat[0],a.repeat[1])}}return t&&(new EXRLoader).load(t.image,(function(e){e.mapping=THREE.EquirectangularReflectionMapping,r.envMap=e})),r}_createGeometry(e){const t=new Object3D,r=[],s=[],a=[];t.userData.layers=e.layers,t.userData.groups=e.groups,t.userData.settings=e.settings,t.userData.settings.renderSettings=e.renderSettings,t.userData.objectType="File3dm",t.userData.materials=null,t.name=this.url;let n=e.objects;const o=e.materials;for(let i=0;i<n.length;i++){const c=n[i],l=c.attributes;switch(c.objectType){case"InstanceDefinition":s.push(c);break;case"InstanceReference":a.push(c);break;default:let n=null;switch(l.materialSource.name){case"ObjectMaterialSource_MaterialFromLayer":l.layerIndex>=0&&(n=e.layers[l.layerIndex].renderMaterialIndex);break;case"ObjectMaterialSource_MaterialFromObject":l.materialIndex>=0&&(n=l.materialIndex)}let i=null;if(n>=0){const t=o[n];i=this._createMaterial(t,e.renderEnvironment)}const d=this._createObject(c,i);if(void 0===d)continue;const p=e.layers[l.layerIndex];d.visible=!p||e.layers[l.layerIndex].visible,l.isInstanceDefinitionObject?r.push(d):t.add(d)}}for(let e=0;e<s.length;e++){const o=s[e];n=[];for(let e=0;e<o.attributes.objectIds.length;e++){const t=o.attributes.objectIds[e];for(let e=0;e<r.length;e++){t===r[e].userData.attributes.id&&n.push(r[e])}}for(let e=0;e<a.length;e++){const r=a[e];if(r.geometry.parentIdefId===o.attributes.id){const e=new Object3D,s=r.geometry.xform.array,a=new Matrix4;a.set(...s),e.applyMatrix4(a);for(let t=0;t<n.length;t++)e.add(n[t].clone(!0));t.add(e)}}}return t.userData.materials=this.materials,t.name="",t}_createObject(e,t){const r=new BufferGeometryLoader,s=e.attributes;let a,n,o,i;switch(e.objectType){case"Point":case"PointSet":a=r.parse(e.geometry),a.attributes.hasOwnProperty("color")?n=new PointsMaterial({vertexColors:!0,sizeAttenuation:!1,size:2}):(o=s.drawColor,i=new Color(o.r/255,o.g/255,o.b/255),n=new PointsMaterial({color:i,sizeAttenuation:!1,size:2})),n=this._compareMaterials(n);const c=new Points(a,n);return c.userData.attributes=s,c.userData.objectType=e.objectType,s.name&&(c.name=s.name),c;case"Mesh":case"Extrusion":case"SubD":case"Brep":if(null===e.geometry)return;a=r.parse(e.geometry),null===t&&(t=this._createMaterial()),a.attributes.hasOwnProperty("color")&&(t.vertexColors=!0),t=this._compareMaterials(t);const l=new Mesh(a,t);return l.castShadow=s.castsShadows,l.receiveShadow=s.receivesShadows,l.userData.attributes=s,l.userData.objectType=e.objectType,s.name&&(l.name=s.name),l;case"Curve":a=r.parse(e.geometry),o=s.drawColor,i=new Color(o.r/255,o.g/255,o.b/255),n=new LineBasicMaterial({color:i}),n=this._compareMaterials(n);const d=new Line(a,n);return d.userData.attributes=s,d.userData.objectType=e.objectType,s.name&&(d.name=s.name),d;case"TextDot":a=e.geometry;const p=document.createElement("canvas").getContext("2d"),u=`${a.fontHeight}px ${a.fontFace}`;p.font=u;const g=p.measureText(a.text).width+10,h=a.fontHeight+10,m=window.devicePixelRatio;p.canvas.width=g*m,p.canvas.height=h*m,p.canvas.style.width=g+"px",p.canvas.style.height=h+"px",p.setTransform(m,0,0,m,0,0),p.font=u,p.textBaseline="middle",p.textAlign="center",i=s.drawColor,p.fillStyle=`rgba(${i.r},${i.g},${i.b},${i.a})`,p.fillRect(0,0,g,h),p.fillStyle="white",p.fillText(a.text,g/2,h/2);const y=new CanvasTexture(p.canvas);y.minFilter=LinearFilter,y.generateMipmaps=!1,y.wrapS=ClampToEdgeWrapping,y.wrapT=ClampToEdgeWrapping,n=new SpriteMaterial({map:y,depthTest:!1});const b=new Sprite(n);return b.position.set(a.point[0],a.point[1],a.point[2]),b.scale.set(g/10,h/10,1),b.userData.attributes=s,b.userData.objectType=e.objectType,s.name&&(b.name=s.name),b;case"Light":let f;switch(a=e.geometry,a.lightStyle.name){case"LightStyle_WorldPoint":f=new PointLight,f.castShadow=s.castsShadows,f.position.set(a.location[0],a.location[1],a.location[2]),f.shadow.normalBias=.1;break;case"LightStyle_WorldSpot":f=new SpotLight,f.castShadow=s.castsShadows,f.position.set(a.location[0],a.location[1],a.location[2]),f.target.position.set(a.direction[0],a.direction[1],a.direction[2]),f.angle=a.spotAngleRadians,f.shadow.normalBias=.1;break;case"LightStyle_WorldRectangular":f=new RectAreaLight;const e=Math.abs(a.width[2]),t=Math.abs(a.length[0]);f.position.set(a.location[0]-t/2,a.location[1],a.location[2]-e/2),f.height=t,f.width=e,f.lookAt(a.direction[0],a.direction[1],a.direction[2]);break;case"LightStyle_WorldDirectional":f=new DirectionalLight,f.castShadow=s.castsShadows,f.position.set(a.location[0],a.location[1],a.location[2]),f.target.position.set(a.direction[0],a.direction[1],a.direction[2]),f.shadow.normalBias=.1}return f&&(f.intensity=a.intensity,o=a.diffuse,i=new Color(o.r/255,o.g/255,o.b/255),f.color=i,f.userData.attributes=s,f.userData.objectType=e.objectType),f}}_initLibrary(){if(!this.libraryPending){const e=new FileLoader(this.manager);e.setPath(this.libraryPath);const t=new Promise(((t,r)=>{e.load("rhino3dm.js",t,void 0,r)})),r=new FileLoader(this.manager);r.setPath(this.libraryPath),r.setResponseType("arraybuffer");const s=new Promise(((e,t)=>{r.load("rhino3dm.wasm",e,void 0,t)}));this.libraryPending=Promise.all([t,s]).then((([e,t])=>{this.libraryConfig.wasmBinary=t;const r=Rhino3dmWorker.toString(),s=["/* rhino3dm.js */",e,"/* worker */",r.substring(r.indexOf("{")+1,r.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([s]))}))}return this.libraryPending}_getWorker(e){return this._initLibrary().then((()=>{if(this.workerPool.length<this.workerLimit){const e=new Worker(this.workerSourceURL);e._callbacks={},e._taskCosts={},e._taskLoad=0,e.postMessage({type:"init",libraryConfig:this.libraryConfig}),e.onmessage=t=>{const r=t.data;switch(r.type){case"warning":this.warnings.push(r.data),console.warn(r.data);break;case"decode":e._callbacks[r.id].resolve(r);break;case"error":e._callbacks[r.id].reject(r);break;default:console.error('THREE.Rhino3dmLoader: Unexpected message, "'+r.type+'"')}},this.workerPool.push(e)}else this.workerPool.sort((function(e,t){return e._taskLoad>t._taskLoad?-1:1}));const t=this.workerPool[this.workerPool.length-1];return t._taskLoad+=e,t}))}_releaseTask(e,t){e._taskLoad-=e._taskCosts[t],delete e._callbacks[t],delete e._taskCosts[t]}dispose(){for(let e=0;e<this.workerPool.length;++e)this.workerPool[e].terminate();this.workerPool.length=0}}function Rhino3dmWorker(){let e,t,r,s;function a(e,t,r){const s=[];for(let a=0;a<t.length;a++){const o=e.getTexture(t[a]);if(o){let e=t[a].constructor.name;e=e.substring(12,e.length);const i=n(o,e,r);s.push(i),o.delete()}}return s}function n(e,t,r){const a={type:t},n=r.getEmbeddedFileAsBase64(e.fileName);a.wrapU=e.wrapU,a.wrapV=e.wrapV,a.wrapW=e.wrapW;const o=e.uvwTransform.toFloatArray(!0);return a.repeat=[o[0],o[5]],n?a.image="data:image/png;base64,"+n:(self.postMessage({type:"warning",id:s,data:{message:`THREE.3DMLoader: Image for ${t} texture not embedded in file.`,type:"missing resource"}}),a.image=null),a}function o(e,t){const a=e.geometry(),n=e.attributes();let o,l,d,p,u,g=a.objectType;switch(g){case r.ObjectType.Curve:const e=c(a,100);d={},l={},p={},d.itemSize=3,d.type="Float32Array",d.array=[];for(let t=0;t<e.length;t++)d.array.push(e[t][0]),d.array.push(e[t][1]),d.array.push(e[t][2]);l.position=d,p.attributes=l,o={data:p};break;case r.ObjectType.Point:const h=a.location;d={};const m={};l={},p={},d.itemSize=3,d.type="Float32Array",d.array=[h[0],h[1],h[2]];const y=n.drawColor(t);m.itemSize=3,m.type="Float32Array",m.array=[y.r/255,y.g/255,y.b/255],l.position=d,l.color=m,p.attributes=l,o={data:p};break;case r.ObjectType.PointSet:case r.ObjectType.Mesh:o=a.toThreejsJSON();break;case r.ObjectType.Brep:const b=a.faces();u=new r.Mesh;for(let e=0;e<b.count;e++){const t=b.get(e),s=t.getMesh(r.MeshType.Any);s&&(u.append(s),s.delete()),t.delete()}u.faces().count>0&&(u.compact(),o=u.toThreejsJSON(),b.delete()),u.delete();break;case r.ObjectType.Extrusion:u=a.getMesh(r.MeshType.Any),u&&(o=u.toThreejsJSON(),u.delete());break;case r.ObjectType.TextDot:o=i(a);break;case r.ObjectType.Light:o=i(a),"LightStyle_WorldLinear"===o.lightStyle.name&&self.postMessage({type:"warning",id:s,data:{message:`THREE.3DMLoader: No conversion exists for ${g.constructor.name} ${o.lightStyle.name}`,type:"no conversion",guid:n.id}});break;case r.ObjectType.InstanceReference:o=i(a),o.xform=i(a.xform),o.xform.array=a.xform.toFloatArray(!0);break;case r.ObjectType.SubD:a.subdivide(3),u=r.Mesh.createFromSubDControlNet(a,!1),u&&(o=u.toThreejsJSON(),u.delete());break;default:self.postMessage({type:"warning",id:s,data:{message:`THREE.3DMLoader: Conversion not implemented for ${g.constructor.name}`,type:"not implemented",guid:n.id}})}if(o)return l=i(n),l.geometry=i(a),n.groupCount>0&&(l.groupIds=n.getGroupList()),n.userStringCount>0&&(l.userStrings=n.getUserStrings()),a.userStringCount>0&&(l.geometry.userStrings=a.getUserStrings()),n.decals().count>0&&self.postMessage({type:"warning",id:s,data:{message:"THREE.3DMLoader: No conversion exists for the decals associated with this object.",type:"no conversion",guid:n.id}}),l.drawColor=n.drawColor(t),g=g.constructor.name,g=g.substring(11,g.length),{geometry:o,attributes:l,objectType:g};self.postMessage({type:"warning",id:s,data:{message:`THREE.3DMLoader: ${g.constructor.name} has no associated mesh geometry.`,type:"missing mesh",guid:n.id}})}function i(e){const t={};for(const r in e){const s=e[r];"function"!=typeof s&&("object"==typeof s&&null!==s&&s.hasOwnProperty("constructor")?t[r]={name:s.constructor.name,value:s.value}:t[r]="object"==typeof s&&null!==s?i(s):s)}return t}function c(e,t){let s=t,a=[];const n=[];if(e instanceof r.LineCurve)return[e.pointAtStart,e.pointAtEnd];if(e instanceof r.PolylineCurve){s=e.pointCount;for(let t=0;t<s;t++)a.push(e.point(t));return a}if(e instanceof r.PolyCurve){const t=e.segmentCount;for(let r=0;r<t;r++){const t=e.segmentCurve(r),n=c(t,s);a=a.concat(n),t.delete()}return a}if(e instanceof r.ArcCurve&&(s=Math.floor(e.angleDegrees/5),s=s<2?2:s),e instanceof r.NurbsCurve&&1===e.degree){const t=e.tryGetPolyline();for(let e=0;e<t.count;e++)a.push(t.get(e));return t.delete(),a}const o=e.domain,i=s-1;for(let t=0;t<s;t++){const r=o[0]+t/i*(o[1]-o[0]);if(r===o[0]||r===o[1]){n.push(r);continue}const s=e.tangentAt(r),a=e.tangentAt(n.slice(-1)[0]),c=s[0]*s[0]+s[1]*s[1]+s[2]*s[2],l=a[0]*a[0]+a[1]*a[1]+a[2]*a[2],d=Math.sqrt(c*l);let p;if(0===d)p=Math.PI/2;else{const e=(s.x*a.x+s.y*a.y+s.z*a.z)/d;p=Math.acos(Math.max(-1,Math.min(1,e)))}p<.1||n.push(r)}return a=n.map((t=>e.pointAt(t))),a}onmessage=function(n){const c=n.data;switch(c.type){case"init":t=c.libraryConfig;const n=t.wasmBinary;let l;e=new Promise((function(e){l={wasmBinary:n,onRuntimeInitialized:e},rhino3dm(l)})).then((()=>{r=l}));break;case"decode":s=c.id;const d=c.buffer;e.then((()=>{try{const e=function(e,t){const r=new Uint8Array(t),s=e.File3dm.fromByteArray(r),n=[],c=[],l=[],d=[],p=[],u=[],g=[],h=s.objects(),m=h.count;for(let e=0;e<m;e++){const t=h.get(e),r=o(t,s);t.delete(),r&&n.push(r)}for(let e=0;e<s.instanceDefinitions().count;e++){const t=s.instanceDefinitions().get(e),r=i(t);r.objectIds=t.getObjectIds(),n.push({geometry:null,attributes:r,objectType:"InstanceDefinition"})}const y=[e.TextureType.Diffuse,e.TextureType.Bump,e.TextureType.Transparency,e.TextureType.Opacity,e.TextureType.Emap],b=[e.TextureType.PBR_BaseColor,e.TextureType.PBR_Subsurface,e.TextureType.PBR_SubsurfaceScattering,e.TextureType.PBR_SubsurfaceScatteringRadius,e.TextureType.PBR_Metallic,e.TextureType.PBR_Specular,e.TextureType.PBR_SpecularTint,e.TextureType.PBR_Roughness,e.TextureType.PBR_Anisotropic,e.TextureType.PBR_Anisotropic_Rotation,e.TextureType.PBR_Sheen,e.TextureType.PBR_SheenTint,e.TextureType.PBR_Clearcoat,e.TextureType.PBR_ClearcoatBump,e.TextureType.PBR_ClearcoatRoughness,e.TextureType.PBR_OpacityIor,e.TextureType.PBR_OpacityRoughness,e.TextureType.PBR_Emission,e.TextureType.PBR_AmbientOcclusion,e.TextureType.PBR_Displacement];for(let e=0;e<s.materials().count;e++){const t=s.materials().get(e),r=i(t),n=[];n.push(...a(t,y,s)),r.pbrSupported=t.physicallyBased().supported,r.pbrSupported&&(n.push(...a(t,b,s)),r.pbr=i(t.physicallyBased())),r.textures=n,c.push(r),t.delete()}for(let e=0;e<s.layers().count;e++){const t=s.layers().get(e),r=i(t);l.push(r),t.delete()}for(let e=0;e<s.views().count;e++){const t=s.views().get(e),r=i(t);d.push(r),t.delete()}for(let e=0;e<s.namedViews().count;e++){const t=s.namedViews().get(e),r=i(t);p.push(r),t.delete()}for(let e=0;e<s.groups().count;e++){const t=s.groups().get(e),r=i(t);u.push(r),t.delete()}const f=i(s.settings()),w=s.strings().count;for(let e=0;e<w;e++)g.push(s.strings().get(e));const T=s.settings().renderSettings().renderEnvironments.reflectionId,S=s.renderContent();let k=null;for(let e=0;e<S.count;e++){const t=S.get(e);switch(t.kind){case"environment":if(t.id!==T)break;const e=t.findChild("texture").fileName;for(let t=0;t<s.embeddedFiles().count;t++){if(e===s.embeddedFiles().get(t).fileName){k={type:"renderEnvironment",image:"data:image/png;base64,"+s.getEmbeddedFileAsBase64(e),name:e}}}}}const M={ambientLight:s.settings().renderSettings().ambientLight,backgroundColorTop:s.settings().renderSettings().backgroundColorTop,backgroundColorBottom:s.settings().renderSettings().backgroundColorBottom,useHiddenLights:s.settings().renderSettings().useHiddenLights,depthCue:s.settings().renderSettings().depthCue,flatShade:s.settings().renderSettings().flatShade,renderBackFaces:s.settings().renderSettings().renderBackFaces,renderPoints:s.settings().renderSettings().renderPoints,renderCurves:s.settings().renderSettings().renderCurves,renderIsoParams:s.settings().renderSettings().renderIsoParams,renderMeshEdges:s.settings().renderSettings().renderMeshEdges,renderAnnotations:s.settings().renderSettings().renderAnnotations,useViewportSize:s.settings().renderSettings().useViewportSize,scaleBackgroundToFit:s.settings().renderSettings().scaleBackgroundToFit,transparentBackground:s.settings().renderSettings().transparentBackground,imageDpi:s.settings().renderSettings().imageDpi,shadowMapLevel:s.settings().renderSettings().shadowMapLevel,namedView:s.settings().renderSettings().namedView,snapShot:s.settings().renderSettings().snapShot,specificViewport:s.settings().renderSettings().specificViewport,groundPlane:i(s.settings().renderSettings().groundPlane),safeFrame:i(s.settings().renderSettings().safeFrame),dithering:i(s.settings().renderSettings().dithering),skylight:i(s.settings().renderSettings().skylight),linearWorkflow:i(s.settings().renderSettings().linearWorkflow),renderChannels:i(s.settings().renderSettings().renderChannels),sun:i(s.settings().renderSettings().sun),renderEnvironments:i(s.settings().renderSettings().renderEnvironments),postEffects:i(s.settings().renderSettings().postEffects)};return s.delete(),{objects:n,materials:c,layers:l,views:d,namedViews:p,groups:u,strings:g,settings:f,renderSettings:M,renderEnvironment:k}}(r,d);self.postMessage({type:"decode",id:c.id,data:e})}catch(e){self.postMessage({type:"error",id:c.id,error:e})}}))}}}export{Rhino3dmLoader};
//# sourceMappingURL=3DMLoader.js.map