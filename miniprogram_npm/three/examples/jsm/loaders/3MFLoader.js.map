{"version":3,"file":"node_modules/three/examples/jsm/loaders/3MFLoader.js","names":["BufferAttribute","BufferGeometry","ClampToEdgeWrapping","Color","FileLoader","Float32BufferAttribute","Group","LinearFilter","LinearMipmapLinearFilter","Loader","Matrix4","Mesh","MeshPhongMaterial","MeshStandardMaterial","MirroredRepeatWrapping","NearestFilter","RepeatWrapping","TextureLoader","SRGBColorSpace","fflate","COLOR_SPACE_3MF","ThreeMFLoader","constructor","manager","super","this","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","parseRelsXml","relsFileText","relationships","relsNodes","DOMParser","parseFromString","querySelectorAll","i","length","relsNode","relationship","target","getAttribute","id","type","push","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialData","parseBasematerialNode","index","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","color","setStyle","substring","r","g","b","parseImplicitIONode","implicitIONode","portNodes","children","portArguments","args","nodeName","j","attributes","attrib","specified","name","value","parseImplicitFunctionNode","implicitFunctionNode","implicitFunctionData","displayname","functionNodes","operations","operatorNode","inputNodes","op","identifier","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","basematerialNode","parseComponentNode","componentNode","componentData","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","triangleProperty","parseInt","Object","keys","Uint32Array","parseMeshNode","componentsNode","components","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","unit","metadataNodes","metadataData","metadataNode","indexOf","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","texture2DData","texture2DNode","contenttype","tilestyleu","tilestylev","filter","colorGroupNodes","implicitFunctionNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","objects","textureData","texture2d","resources","blob","Blob","sourceURI","URL","createObjectURL","texture","revokeObjectURL","colorSpace","wrapS","wrapT","magFilter","minFilter","generateMipmaps","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","DEFAULT_MATERIAL_NAME","getResourceType","buildGroup","group","resourceMap","objectPid","analyzeObject","il","resourceId","newMeshes","buildMeshes","add","builder","build","materialData","pbmetallicdisplayproperties","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","extensions","modelXml","ns","extension","apply","applyExtensions","implicitfunction","warn","data3mf","relsName","modelRelsName","zip","file","modelPartNames","texturesPartNames","modelRels","modelParts","texturesParts","textDecoder","TextDecoder","unzipSync","Uint8Array","ReferenceError","rootModelFile","match","Error","relsView","rels","decode","modelPart","view","fileText","xmlData","documentElement","toLowerCase","attr","RegExp","$1","texturesPartName","model","printTicket","loadDocument","modelsData","modelsKeys","modelRel","textureKey","objectIds","buildObjects","rel","pop","fetch3DModelPart","addExtension"],"sources":["node_modules/three/examples/jsm/loaders/3MFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tMatrix4,\n\tMesh,\n\tMeshPhongMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tRepeatWrapping,\n\tTextureLoader,\n\tSRGBColorSpace\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\nconst COLOR_SPACE_3MF = SRGBColorSpace;\n\n/**\n * A loader for the [3D Manufacturing Format (3MF)]{@link https://3mf.io/specification/} format.\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n *\n * ```js\n * const loader = new ThreeMFLoader();\n *\n * const object = await loader.loadAsync( './models/3mf/truck.3mf' );\n * object.rotation.set( - Math.PI / 2, 0, 0 ); // z-up conversion\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { ThreeMFLoader } from 'three/addons/loaders/3MFLoader.js';\n */\nclass ThreeMFLoader extends Loader {\n\n\t/**\n\t * Constructs a new 3MF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * An array of available extensions.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.availableExtensions = [];\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded 3MF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Group)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given 3MF data and returns the resulting group.\n\t *\n\t * @param {ArrayBuffer} data - The raw 3MF asset data as an array buffer.\n\t * @return {Group} A group representing the parsed asset.\n\t */\n\tparse( data ) {\n\n\t\tconst scope = this;\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet zip = null;\n\t\t\tlet file = null;\n\n\t\t\tlet relsName;\n\t\t\tlet modelRelsName;\n\t\t\tconst modelPartNames = [];\n\t\t\tconst texturesPartNames = [];\n\n\t\t\tlet modelRels;\n\t\t\tconst modelParts = {};\n\t\t\tconst printTicketParts = {};\n\t\t\tconst texturesParts = {};\n\n\t\t\tconst textDecoder = new TextDecoder();\n\n\t\t\ttry {\n\n\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet rootModelFile = null;\n\n\t\t\tfor ( file in zip ) {\n\n\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\trelsName = file;\n\n\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t} else if ( file.match( /^3D\\/[^\\/]*\\.model$/ ) ) {\n\n\t\t\t\t\trootModelFile = file;\n\n\t\t\t\t} else if ( file.match( /^3D\\/.*\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\tmodelPartNames.push( file ); // sub models\n\n\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmodelPartNames.push( rootModelFile ); // push root model at the end so it is processed after the sub models\n\n\t\t\tif ( relsName === undefined ) throw new Error( 'THREE.ThreeMFLoader: Cannot find relationship file `rels` in 3MF archive.' );\n\n\t\t\t//\n\n\t\t\tconst relsView = zip[ relsName ];\n\t\t\tconst relsFileText = textDecoder.decode( relsView );\n\t\t\tconst rels = parseRelsXml( relsFileText );\n\n\t\t\t//\n\n\t\t\tif ( modelRelsName ) {\n\n\t\t\t\tconst relsView = zip[ modelRelsName ];\n\t\t\t\tconst relsFileText = textDecoder.decode( relsView );\n\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\tconst modelPart = modelPartNames[ i ];\n\t\t\t\tconst view = zip[ modelPart ];\n\n\t\t\t\tconst fileText = textDecoder.decode( view );\n\t\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t}\n\n\t\t\t\tconst modelNode = xmlData.querySelector( 'model' );\n\t\t\t\tconst extensions = {};\n\n\t\t\t\tfor ( let i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\tconst attr = modelNode.attributes[ i ];\n\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst modelData = parseModelNode( modelNode );\n\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t}\n\n\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\tconst texturesPartName = texturesPartNames[ i ];\n\t\t\t\ttexturesParts[ texturesPartName ] = zip[ texturesPartName ].buffer;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trels: rels,\n\t\t\t\tmodelRels: modelRels,\n\t\t\t\tmodel: modelParts,\n\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\ttexture: texturesParts\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\tconst relationships = [];\n\n\t\t\tconst relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\tconst relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\tfor ( let i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\tconst relsNode = relsNodes[ i ];\n\n\t\t\t\tconst relationship = {\n\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t};\n\n\t\t\t\trelationships.push( relationship );\n\n\t\t\t}\n\n\t\t\treturn relationships;\n\n\t\t}\n\n\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\tconst metadataData = {};\n\n\t\t\tfor ( let i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\tconst metadataNode = metadataNodes[ i ];\n\t\t\t\tconst name = metadataNode.getAttribute( 'name' );\n\t\t\t\tconst validNames = [\n\t\t\t\t\t'Title',\n\t\t\t\t\t'Designer',\n\t\t\t\t\t'Description',\n\t\t\t\t\t'Copyright',\n\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t'Rating',\n\t\t\t\t\t'CreationDate',\n\t\t\t\t\t'ModificationDate'\n\t\t\t\t];\n\n\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn metadataData;\n\n\t\t}\n\n\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\tconst basematerialsData = {\n\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\tbasematerials: []\n\t\t\t};\n\n\t\t\tconst basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\tfor ( let i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialNode = basematerialNodes[ i ];\n\t\t\t\tconst basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t}\n\n\t\t\treturn basematerialsData;\n\n\t\t}\n\n\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\tconst texture2dData = {\n\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t};\n\n\t\t\treturn texture2dData;\n\n\t\t}\n\n\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\tconst texture2DGroupData = {\n\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\tconst uvs = [];\n\n\t\t\tfor ( let i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\tconst tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\tconst u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\tconst v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t}\n\n\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\treturn texture2DGroupData;\n\n\t\t}\n\n\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\tconst colorGroupData = {\n\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\tconst colors = [];\n\t\t\tconst colorObject = new Color();\n\n\t\t\tfor ( let i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\tconst colorNode = colorNodes[ i ];\n\t\t\t\tconst color = colorNode.getAttribute( 'color' );\n\n\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ), COLOR_SPACE_3MF );\n\n\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t}\n\n\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\treturn colorGroupData;\n\n\t\t}\n\n\t\tfunction parseImplicitIONode( implicitIONode ) {\n\n\t\t\tconst portNodes = implicitIONode.children;\n\t\t\tconst portArguments = {};\n\t\t\tfor ( let i = 0; i < portNodes.length; i ++ ) {\n\n\t\t\t\tconst args = { type: portNodes[ i ].nodeName.substring( 2 ) };\n\t\t\t\tfor ( let j = 0; j < portNodes[ i ].attributes.length; j ++ ) {\n\n\t\t\t\t\tconst attrib = portNodes[ i ].attributes[ j ];\n\t\t\t\t\tif ( attrib.specified ) {\n\n\t\t \t\t\t\targs[ attrib.name ] = attrib.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tportArguments[ portNodes[ i ].getAttribute( 'identifier' ) ] = args;\n\n\t\t\t}\n\n\t\t\treturn portArguments;\n\n\t\t}\n\n\t\tfunction parseImplicitFunctionNode( implicitFunctionNode ) {\n\n\t\t\tconst implicitFunctionData = {\n\t\t\t\tid: implicitFunctionNode.getAttribute( 'id' ),\n\t\t\t\tdisplayname: implicitFunctionNode.getAttribute( 'displayname' )\n\t\t\t};\n\n\t\t\tconst functionNodes = implicitFunctionNode.children;\n\n\t\t\tconst operations = {};\n\n\t\t\tfor ( let i = 0; i < functionNodes.length; i ++ ) {\n\n\t\t\t\tconst operatorNode = functionNodes[ i ];\n\n\t\t\t\tif ( operatorNode.nodeName === 'i:in' || operatorNode.nodeName === 'i:out' ) {\n\n\t\t\t\t\toperations[ operatorNode.nodeName === 'i:in' ? 'inputs' : 'outputs' ] = parseImplicitIONode( operatorNode );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst inputNodes = operatorNode.children;\n\t\t\t\t\tconst portArguments = { 'op': operatorNode.nodeName.substring( 2 ), 'identifier': operatorNode.getAttribute( 'identifier' ) };\n\t\t\t\t\tfor ( let i = 0; i < inputNodes.length; i ++ ) {\n\n\t\t\t\t\t\tportArguments[ inputNodes[ i ].nodeName.substring( 2 ) ] = parseImplicitIONode( inputNodes[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toperations[ portArguments[ 'identifier' ] ] = portArguments;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\timplicitFunctionData[ 'operations' ] = operations;\n\n\t\t\treturn implicitFunctionData;\n\n\t\t}\n\n\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\tconst metallicDisplaypropertiesData = {\n\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t};\n\n\t\t\tconst metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\tconst metallicData = [];\n\n\t\t\tfor ( let i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\tconst metallicNode = metallicNodes[ i ];\n\n\t\t\t\tmetallicData.push( {\n\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t}\n\n\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\tconst basematerialData = {};\n\n\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\treturn basematerialData;\n\n\t\t}\n\n\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\tconst meshData = {};\n\n\t\t\tconst vertices = [];\n\t\t\tconst vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\tfor ( let i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\tconst vertexNode = vertexNodes[ i ];\n\t\t\t\tconst x = vertexNode.getAttribute( 'x' );\n\t\t\t\tconst y = vertexNode.getAttribute( 'y' );\n\t\t\t\tconst z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t}\n\n\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\tconst triangleProperties = [];\n\t\t\tconst triangles = [];\n\t\t\tconst triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\tfor ( let i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\tconst triangleNode = triangleNodes[ i ];\n\t\t\t\tconst v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\tconst v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\tconst v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\tconst p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\tconst p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\tconst p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\tconst pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\tconst triangleProperty = {};\n\n\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t// optional\n\n\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\treturn meshData;\n\n\t\t}\n\n\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\tconst components = [];\n\n\t\t\tconst componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\tfor ( let i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\tconst componentNode = componentNodes[ i ];\n\t\t\t\tconst componentData = parseComponentNode( componentNode );\n\t\t\t\tcomponents.push( componentData );\n\n\t\t\t}\n\n\t\t\treturn components;\n\n\t\t}\n\n\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\tconst componentData = {};\n\n\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\tconst transform = componentNode.getAttribute( 'transform' );\n\n\t\t\tif ( transform ) {\n\n\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t}\n\n\t\t\treturn componentData;\n\n\t\t}\n\n\t\tfunction parseTransform( transform ) {\n\n\t\t\tconst t = [];\n\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t} );\n\n\t\t\tconst matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\treturn matrix;\n\n\t\t}\n\n\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\tconst objectData = {\n\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t};\n\n\t\t\tconst id = objectNode.getAttribute( 'id' );\n\n\t\t\tif ( id ) {\n\n\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t}\n\n\t\t\tconst pid = objectNode.getAttribute( 'pid' );\n\n\t\t\tif ( pid ) {\n\n\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t}\n\n\t\t\tconst pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\tif ( pindex ) {\n\n\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t}\n\n\t\t\tconst thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\tif ( thumbnail ) {\n\n\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t}\n\n\t\t\tconst partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\tif ( partnumber ) {\n\n\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t}\n\n\t\t\tconst name = objectNode.getAttribute( 'name' );\n\n\t\t\tif ( name ) {\n\n\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t}\n\n\t\t\tconst meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\tif ( meshNode ) {\n\n\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t}\n\n\t\t\tconst componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\tif ( componentsNode ) {\n\n\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t}\n\n\t\t\treturn objectData;\n\n\t\t}\n\n\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\tconst resourcesData = {};\n\n\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\tconst basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\tfor ( let i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\tconst basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\tconst textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\tfor ( let i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DNode = textures2DNodes[ i ];\n\t\t\t\tconst texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\tconst colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\tfor ( let i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\tconst colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst implicitFunctionNodes = resourcesNode.querySelectorAll( 'implicitfunction' );\n\n\t\t\tif ( implicitFunctionNodes.length > 0 ) {\n\n\t\t\t\tresourcesData[ 'implicitfunction' ] = {};\n\n\t\t\t}\n\n\n\t\t\tfor ( let i = 0; i < implicitFunctionNodes.length; i ++ ) {\n\n\t\t\t\tconst implicitFunctionNode = implicitFunctionNodes[ i ];\n\t\t\t\tconst implicitFunctionData = parseImplicitFunctionNode( implicitFunctionNode );\n\t\t\t\tresourcesData[ 'implicitfunction' ][ implicitFunctionData[ 'id' ] ] = implicitFunctionData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\tconst pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\tfor ( let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\tconst pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\tconst pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\tconst textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\tfor ( let i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\tconst textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'object' ] = {};\n\t\t\tconst objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\tfor ( let i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\tconst objectNode = objectNodes[ i ];\n\t\t\t\tconst objectData = parseObjectNode( objectNode );\n\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t}\n\n\t\t\treturn resourcesData;\n\n\t\t}\n\n\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\tconst buildData = [];\n\t\t\tconst itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\tfor ( let i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\tconst itemNode = itemNodes[ i ];\n\t\t\t\tconst buildItem = {\n\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t};\n\t\t\t\tconst transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t}\n\n\t\t\treturn buildData;\n\n\t\t}\n\n\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\tconst modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\tconst metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\tif ( metadataNodes ) {\n\n\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t}\n\n\t\t\tconst resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\tif ( resourcesNode ) {\n\n\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t}\n\n\t\t\tconst buildNode = modelNode.querySelector( 'build' );\n\n\t\t\tif ( buildNode ) {\n\n\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t}\n\n\t\t\treturn modelData;\n\n\t\t}\n\n\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\tconst texid = texture2dgroup.texid;\n\t\t\tconst texture2ds = modelData.resources.texture2d;\n\t\t\tconst texture2d = texture2ds[ texid ];\n\n\t\t\tif ( texture2d ) {\n\n\t\t\t\tconst data = textureData[ texture2d.path ];\n\t\t\t\tconst type = texture2d.contenttype;\n\n\t\t\t\tconst blob = new Blob( [ data ], { type: type } );\n\t\t\t\tconst sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\tconst texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t} );\n\n\t\t\t\ttexture.colorSpace = COLOR_SPACE_3MF;\n\n\t\t\t\t// texture parameters\n\n\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapS = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapT = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst objectPindex = objectData.pindex;\n\n\t\t\tconst materialMap = {};\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tconst pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst keys = Object.keys( materialMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialIndex = keys[ i ];\n\t\t\t\tconst trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\tconst basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\tconst material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t//\n\n\t\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\t\tconst positionData = [];\n\n\t\t\t\tconst vertices = meshData.vertices;\n\n\t\t\t\tfor ( let j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t//\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst uvData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst uvs = texture2dgroup.uvs;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t// material\n\n\t\t\tconst texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\tconst material = new MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst colorData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst colors = colorgroup.colors;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tconst v1 = triangleProperty.v1;\n\t\t\t\tconst v2 = triangleProperty.v2;\n\t\t\t\tconst v3 = triangleProperty.v3;\n\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tconst p1 = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectData.pindex;\n\t\t\t\tconst p2 = ( triangleProperty.p2 !== undefined ) ? triangleProperty.p2 : p1;\n\t\t\t\tconst p3 = ( triangleProperty.p3 !== undefined ) ? triangleProperty.p3 : p1;\n\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 2 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t// material\n\n\t\t\tconst material = new MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\tconst material = new MeshPhongMaterial( {\n\t\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tflatShading: true\n\t\t\t} );\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst keys = Object.keys( resourceMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tconst resourceId = keys[ i ];\n\t\t\t\tconst triangleProperties = resourceMap[ resourceId ];\n\t\t\t\tconst resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tconst basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\tconst newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tconst texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tconst colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'default':\n\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tfor ( let i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tmeshes[ i ].name = objectData.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'texture';\n\n\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'material';\n\n\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'vertexColors';\n\n\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\treturn 'default';\n\n\t\t\t} else {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction analyzeObject( meshData, objectData ) {\n\n\t\t\tconst resourceMap = {};\n\n\t\t\tconst triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\tconst objectPid = objectData.pid;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tlet pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\treturn resourceMap;\n\n\t\t}\n\n\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst resourceMap = analyzeObject( meshData, objectData );\n\t\t\tconst meshes = buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData );\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\tif ( ! extensions ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst availableExtensions = [];\n\t\t\tconst keys = Object.keys( extensions );\n\n\t\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\tconst ns = keys[ i ];\n\n\t\t\t\tfor ( let j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\tconst extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\tconst extension = availableExtensions[ i ];\n\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\tlet material;\n\n\t\t\tconst displaypropertiesid = materialData.displaypropertiesid;\n\t\t\tconst pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\tconst pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\tconst metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\tmaterial = new MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t}\n\n\t\t\tmaterial.name = materialData.name;\n\n\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\tconst displaycolor = materialData.displaycolor;\n\n\t\t\tconst color = displaycolor.substring( 0, 7 );\n\t\t\tmaterial.color.setStyle( color, COLOR_SPACE_3MF );\n\n\t\t\t// process alpha if set\n\n\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\tconst composite = new Group();\n\n\t\t\tfor ( let j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\tconst component = compositeData[ j ];\n\t\t\t\tlet build = objects[ component.objectId ];\n\n\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t}\n\n\t\t\t\tconst object3D = build.clone();\n\n\t\t\t\t// apply component transform\n\n\t\t\t\tconst transform = component.transform;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tcomposite.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn composite;\n\n\t\t}\n\n\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\tconst objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\tconst meshData = objectData[ 'mesh' ];\n\n\t\t\t\tconst extensions = modelData[ 'extensions' ];\n\t\t\t\tconst modelXml = modelData[ 'xml' ];\n\n\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t} else {\n\n\t\t\t\tconst compositeData = objectData[ 'components' ];\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tobjects[ objectData.id ].name = objectData.name;\n\n\t\t\t}\n\n\t\t\tif ( modelData.resources.implicitfunction ) {\n\n\t\t\t\tconsole.warn( 'THREE.ThreeMFLoader: Implicit Functions are implemented in data-only.', modelData.resources.implicitfunction );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildObjects( data3mf ) {\n\n\t\t\tconst modelsData = data3mf.model;\n\t\t\tconst modelRels = data3mf.modelRels;\n\t\t\tconst objects = {};\n\t\t\tconst modelsKeys = Object.keys( modelsData );\n\t\t\tconst textureData = {};\n\n\t\t\t// evaluate model relationships to textures\n\n\t\t\tif ( modelRels ) {\n\n\t\t\t\tfor ( let i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst modelRel = modelRels[ i ];\n\t\t\t\t\tconst textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// start build\n\n\t\t\tfor ( let i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\tconst modelsKey = modelsKeys[ i ];\n\t\t\t\tconst modelData = modelsData[ modelsKey ];\n\n\t\t\t\tconst objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\tfor ( let j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\tconst objectId = objectIds[ j ];\n\n\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction fetch3DModelPart( rels ) {\n\n\t\t\tfor ( let i = 0; i < rels.length; i ++ ) {\n\n\t\t\t\tconst rel = rels[ i ];\n\t\t\t\tconst extension = rel.target.split( '.' ).pop();\n\n\t\t\t\tif ( extension.toLowerCase() === 'model' ) return rel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction build( objects, data3mf ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst relationship = fetch3DModelPart( data3mf[ 'rels' ] );\n\t\t\tconst buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\tfor ( let i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\tconst buildItem = buildData[ i ];\n\t\t\t\tconst object3D = objects[ buildItem[ 'objectId' ] ].clone();\n\n\t\t\t\t// apply transform\n\n\t\t\t\tconst transform = buildItem[ 'transform' ];\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tgroup.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tconst data3mf = loadDocument( data );\n\t\tconst objects = buildObjects( data3mf );\n\n\t\treturn build( objects, data3mf );\n\n\t}\n\n\t/**\n\t * Adds a 3MF extension.\n\t *\n\t * @param {Object} extension - The extension to add.\n\t */\n\taddExtension( extension ) {\n\n\t\tthis.availableExtensions.push( extension );\n\n\t}\n\n}\n\nexport { ThreeMFLoader };\n"],"mappings":"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","ignoreList":[]}