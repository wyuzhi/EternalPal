{"version":3,"file":"node_modules/three/examples/jsm/loaders/AMFLoader.js","names":["BufferGeometry","Color","FileLoader","Float32BufferAttribute","Group","Loader","Mesh","MeshPhongMaterial","fflate","AMFLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadMaterials","node","matName","matId","attributes","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","nodeName","undefined","type","value","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialId","currVolumeNode","firstElementChild","materialid","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","xmlData","view","DataView","String","fromCharCode","getUint8","zip","file","log","unzipSync","Uint8Array","ReferenceError","toLowerCase","slice","buffer","fileText","TextDecoder","decode","DOMParser","parseFromString","documentElement","loadDocument","amfName","amfAuthor","amfScale","scale","unit","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","DEFAULT_MATERIAL_NAME","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["node_modules/three/examples/jsm/loaders/AMFLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLoader,\n\tMesh,\n\tMeshPhongMaterial\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * A loader for the AMF format.\n *\n * The loader supports materials, color and ZIP compressed files.\n * No constellation support (yet).\n *\n * ```js\n * const loader = new AMFLoader();\n *\n * const object = await loader.loadAsync( './models/amf/rook.amf' );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { AMFLoader } from 'three/addons/loaders/AMFLoader.js';\n */\nclass AMFLoader extends Loader {\n\n\t/**\n\t * Constructs a new AMF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded AMF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Group)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given AMF data and returns the resulting group.\n\t *\n\t * @param {ArrayBuffer} data - The raw AMF asset data as an array buffer.\n\t * @return {Group} A group representing the parsed asset.\n\t */\n\tparse( data ) {\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet view = new DataView( data );\n\t\t\tconst magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\n\n\t\t\tif ( magic === 'PK' ) {\n\n\t\t\t\tlet zip = null;\n\t\t\t\tlet file = null;\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( file in zip ) {\n\n\t\t\t\t\tif ( file.toLowerCase().slice( - 4 ) === '.amf' ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\n\t\t\t\tview = new DataView( zip[ file ].buffer );\n\n\t\t\t}\n\n\t\t\tconst fileText = new TextDecoder().decode( view );\n\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\n\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn xmlData;\n\n\t\t}\n\n\t\tfunction loadDocumentScale( node ) {\n\n\t\t\tlet scale = 1.0;\n\t\t\tlet unit = 'millimeter';\n\n\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\n\n\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\n\n\t\t\t}\n\n\t\t\tconst scaleUnits = {\n\t\t\t\tmillimeter: 1.0,\n\t\t\t\tinch: 25.4,\n\t\t\t\tfeet: 304.8,\n\t\t\t\tmeter: 1000.0,\n\t\t\t\tmicron: 0.001\n\t\t\t};\n\n\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\n\n\t\t\t\tscale = scaleUnits[ unit ];\n\n\t\t\t}\n\n\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\n\t\t\treturn scale;\n\n\t\t}\n\n\t\tfunction loadMaterials( node ) {\n\n\t\t\tlet matName = 'AMF Material';\n\t\t\tconst matId = node.attributes.id.textContent;\n\t\t\tlet color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tlet loadedMaterial = null;\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matChildEl = node.childNodes[ i ];\n\n\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tmatName = matChildEl.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\n\n\t\t\t\t\tcolor = loadColor( matChildEl );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tloadedMaterial = new MeshPhongMaterial( {\n\t\t\t\tflatShading: true,\n\t\t\t\tcolor: new Color( color.r, color.g, color.b ),\n\t\t\t\tname: matName\n\t\t\t} );\n\n\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\tloadedMaterial.transparent = true;\n\t\t\t\tloadedMaterial.opacity = color.a;\n\n\t\t\t}\n\n\t\t\treturn { id: matId, material: loadedMaterial };\n\n\t\t}\n\n\t\tfunction loadColor( node ) {\n\n\t\t\tconst color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\n\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\n\n\t\t\t\tconst matColor = node.childNodes[ i ];\n\n\t\t\t\tif ( matColor.nodeName === 'r' ) {\n\n\t\t\t\t\tcolor.r = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\n\n\t\t\t\t\tcolor.g = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\n\n\t\t\t\t\tcolor.b = matColor.textContent;\n\n\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\n\n\t\t\t\t\tcolor.a = matColor.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tfunction loadMeshVolume( node ) {\n\n\t\t\tconst volume = { name: '', triangles: [], materialId: null };\n\n\t\t\tlet currVolumeNode = node.firstElementChild;\n\n\t\t\tif ( node.attributes.materialid !== undefined ) {\n\n\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\n\n\t\t\t}\n\n\t\t\twhile ( currVolumeNode ) {\n\n\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\n\n\t\t\t\t\tconst v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\n\t\t\t\t\tconst v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\n\t\t\t\t\tconst v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\n\n\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn volume;\n\n\t\t}\n\n\t\tfunction loadMeshVertices( node ) {\n\n\t\t\tconst vertArray = [];\n\t\t\tconst normalArray = [];\n\t\t\tlet currVerticesNode = node.firstElementChild;\n\n\t\t\twhile ( currVerticesNode ) {\n\n\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\n\n\t\t\t\t\tlet vNode = currVerticesNode.firstElementChild;\n\n\t\t\t\t\twhile ( vNode ) {\n\n\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\n\n\t\t\t\t\t\t\tconst x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tvertArray.push( x, y, z );\n\n\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\n\n\t\t\t\t\t\t\tconst nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\n\t\t\t\t\t\t\tconst nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\n\n\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvNode = vNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\n\n\t\t}\n\n\t\tfunction loadObject( node ) {\n\n\t\t\tconst objId = node.attributes.id.textContent;\n\t\t\tconst loadedObject = { name: 'amfobject', meshes: [] };\n\t\t\tlet currColor = null;\n\t\t\tlet currObjNode = node.firstElementChild;\n\n\t\t\twhile ( currObjNode ) {\n\n\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\n\n\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\n\n\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\n\n\t\t\t\t\tcurrColor = loadColor( currObjNode );\n\n\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\n\n\t\t\t\t\tlet currMeshNode = currObjNode.firstElementChild;\n\t\t\t\t\tconst mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n\n\t\t\t\t\twhile ( currMeshNode ) {\n\n\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\n\n\t\t\t\t\t\t\tconst loadedVertices = loadMeshVertices( currMeshNode );\n\n\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\n\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\n\n\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\n\n\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tloadedObject.meshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\n\n\t\t\t}\n\n\t\t\treturn { 'id': objId, 'obj': loadedObject };\n\n\t\t}\n\n\t\tconst xmlData = loadDocument( data );\n\t\tlet amfName = '';\n\t\tlet amfAuthor = '';\n\t\tconst amfScale = loadDocumentScale( xmlData );\n\t\tconst amfMaterials = {};\n\t\tconst amfObjects = {};\n\t\tconst childNodes = xmlData.documentElement.childNodes;\n\n\t\tlet i, j;\n\n\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\n\n\t\t\tconst child = childNodes[ i ];\n\n\t\t\tif ( child.nodeName === 'metadata' ) {\n\n\t\t\t\tif ( child.attributes.type !== undefined ) {\n\n\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\n\n\t\t\t\t\t\tamfName = child.textContent;\n\n\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\n\n\t\t\t\t\t\tamfAuthor = child.textContent;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( child.nodeName === 'material' ) {\n\n\t\t\t\tconst loadedMaterial = loadMaterials( child );\n\n\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\n\n\t\t\t} else if ( child.nodeName === 'object' ) {\n\n\t\t\t\tconst loadedObject = loadObject( child );\n\n\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst sceneObject = new Group();\n\t\tconst defaultMaterial = new MeshPhongMaterial( {\n\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\tcolor: 0xaaaaff,\n\t\t\tflatShading: true\n\t\t} );\n\n\t\tsceneObject.name = amfName;\n\t\tsceneObject.userData.author = amfAuthor;\n\t\tsceneObject.userData.loader = 'AMF';\n\n\t\tfor ( const id in amfObjects ) {\n\n\t\t\tconst part = amfObjects[ id ];\n\t\t\tconst meshes = part.meshes;\n\t\t\tconst newObject = new Group();\n\t\t\tnewObject.name = part.name || '';\n\n\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\tlet objDefaultMaterial = defaultMaterial;\n\t\t\t\tconst mesh = meshes[ i ];\n\t\t\t\tconst vertices = new Float32BufferAttribute( mesh.vertices, 3 );\n\t\t\t\tlet normals = null;\n\n\t\t\t\tif ( mesh.normals.length ) {\n\n\t\t\t\t\tnormals = new Float32BufferAttribute( mesh.normals, 3 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( mesh.color ) {\n\n\t\t\t\t\tconst color = mesh.color;\n\n\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\n\t\t\t\t\tobjDefaultMaterial.color = new Color( color.r, color.g, color.b );\n\n\t\t\t\t\tif ( color.a !== 1.0 ) {\n\n\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\n\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst volumes = mesh.volumes;\n\n\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\n\n\t\t\t\t\tconst volume = volumes[ j ];\n\t\t\t\t\tconst newGeometry = new BufferGeometry();\n\t\t\t\t\tlet material = objDefaultMaterial;\n\n\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\n\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\n\n\t\t\t\t\tif ( normals ) {\n\n\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\n\n\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\n\t\t\t\t\tnewObject.add( new Mesh( newGeometry, material.clone() ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tsceneObject.add( newObject );\n\n\t\t}\n\n\t\treturn sceneObject;\n\n\t}\n\n}\n\nexport { AMFLoader };\n"],"mappings":"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","ignoreList":[]}