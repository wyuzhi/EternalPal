import{CompressedTextureLoader,RGBAFormat,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,RGB_ETC1_Format,RGB_S3TC_DXT1_Format,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format}from"three";class DDSLoader extends CompressedTextureLoader{constructor(r){super(r)}parse(r,t){const e={mipmaps:[],width:0,height:0,format:null,mipmapCount:1};function a(r){return r.charCodeAt(0)+(r.charCodeAt(1)<<8)+(r.charCodeAt(2)<<16)+(r.charCodeAt(3)<<24)}function o(r,t,e,a){const o=e*a*4,n=new Uint8Array(r,t,o),m=new Uint8Array(o);let s=0,c=0;for(let r=0;r<a;r++)for(let r=0;r<e;r++){const r=n[c];c++;const t=n[c];c++;const e=n[c];c++;const a=n[c];c++,m[s]=e,s++,m[s]=t,s++,m[s]=r,s++,m[s]=a,s++}return m}function n(r,t,e,a){const o=new Uint8Array(r,t,e*a*3),n=new Uint8Array(e*a*4);let m=0,s=0;for(let r=0;r<a;r++)for(let r=0;r<e;r++){const r=o[s];s++;const t=o[s];s++;const e=o[s];s++,n[m]=e,m++,n[m]=t,m++,n[m]=r,m++,n[m]=255,m++}return n}const m=a("DXT1"),s=a("DXT3"),c=a("DXT5"),i=a("ETC1"),_=a("DX10"),p=new Int32Array(r,0,31);if(542327876!==p[0])return console.error("THREE.DDSLoader.parse: Invalid magic number in DDS header."),e;let u;const C=p[21];let d=!1,D=!1,T=p[1]+4;switch(C){case m:u=8,e.format=RGB_S3TC_DXT1_Format;break;case s:u=16,e.format=RGBA_S3TC_DXT3_Format;break;case c:u=16,e.format=RGBA_S3TC_DXT5_Format;break;case i:u=8,e.format=RGB_ETC1_Format;break;case _:T+=20;const t=new Int32Array(r,128,5)[0];switch(t){case 96:u=16,e.format=RGB_BPTC_SIGNED_Format;break;case 95:u=16,e.format=RGB_BPTC_UNSIGNED_Format;break;default:return console.error("THREE.DDSLoader.parse: Unsupported DXGI_FORMAT code ",t),e}break;default:if(32===p[22]&&16711680&p[23]&&65280&p[24]&&255&p[25]&&4278190080&p[26])d=!0,u=64,e.format=RGBAFormat;else{if(!(24===p[22]&&16711680&p[23]&&65280&p[24]&&255&p[25]))return console.error("THREE.DDSLoader.parse: Unsupported FourCC code ",(h=C,String.fromCharCode(255&h,h>>8&255,h>>16&255,h>>24&255))),e;D=!0,u=64,e.format=RGBAFormat}}var h;e.mipmapCount=1,131072&p[2]&&!1!==t&&(e.mipmapCount=Math.max(1,p[7]));const f=p[28];if(e.isCubemap=!!(512&f),e.isCubemap&&(!(1024&f)||!(2048&f)||!(4096&f)||!(8192&f)||!(16384&f)||!(32768&f)))return console.error("THREE.DDSLoader.parse: Incomplete cubemap faces"),e;e.width=p[4],e.height=p[3];const l=e.isCubemap?6:1;for(let t=0;t<l;t++){let t=e.width,a=e.height;for(let m=0;m<e.mipmapCount;m++){let m,s;d?(m=o(r,T,t,a),s=m.length):D?(m=n(r,T,t,a),s=t*a*3):(s=Math.max(4,t)/4*Math.max(4,a)/4*u,m=new Uint8Array(r,T,s));const c={data:m,width:t,height:a};e.mipmaps.push(c),T+=s,t=Math.max(t>>1,1),a=Math.max(a>>1,1)}}return e}}export{DDSLoader};
//# sourceMappingURL=DDSLoader.js.map