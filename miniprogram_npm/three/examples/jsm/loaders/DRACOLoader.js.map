{"version":3,"file":"node_modules/three/examples/jsm/loaders/DRACOLoader.js","names":["BufferAttribute","BufferGeometry","Color","ColorManagement","FileLoader","Loader","LinearSRGBColorSpace","SRGBColorSpace","_taskCache","WeakMap","DRACOLoader","constructor","manager","super","this","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","load","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","decodeDracoFile","catch","callback","attributeIDs","attributeTypes","vertexColorSpace","taskConfig","useUniqueIDs","decodeGeometry","then","taskKey","JSON","stringify","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","result","name","itemSize","attribute","_assignVertexColorSpace","normalized","Float32Array","setAttribute","inputColorSpace","_color","il","count","fromBufferAttribute","colorSpaceToWorking","setXYZ","r","g","b","_loadLibrary","responseType","undefined","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","console","error","sort","a","debug","log","map","dispose","terminate","revokeObjectURL","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","numComponents","num_components","numValues","num_points","BYTES_PER_ELEMENT","dataType","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","HEAPF32","slice","_free","onModuleLoaded","DracoDecoderModule","module","Decoder","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeArrayToMesh","POINT_CLOUD","PointCloud","DecodeArrayToPointCloud","ok","error_msg","self","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","attributeResult","numFaces","num_faces","numIndices","GetTrianglesUInt32Array","decodeIndex","destroy","buffers","attr"],"sources":["node_modules/three/examples/jsm/loaders/DRACOLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tColorManagement,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\n/**\n * A loader for the Draco format.\n *\n * [Draco]{@link https://google.github.io/draco/} is an open source library for compressing\n * and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller,\n * at the cost of additional decoding time on the client device.\n *\n * Standalone Draco files have a `.drc` extension, and contain vertex positions, normals, colors,\n * and other attributes. Draco files do not contain materials, textures, animation, or node hierarchies â€“\n * to use these features, embed Draco geometry inside of a glTF file. A normal glTF file can be converted\n * to a Draco-compressed glTF file using [glTF-Pipeline]{@link https://github.com/CesiumGS/gltf-pipeline}.\n * When using Draco with glTF, an instance of `DRACOLoader` will be used internally by {@link GLTFLoader}.\n *\n * It is recommended to create one DRACOLoader instance and reuse it to avoid loading and creating\n * multiple decoder instances.\n *\n * `DRACOLoader` will automatically use either the JS or the WASM decoding library, based on\n * browser capabilities.\n *\n * ```js\n * const loader = new DRACOLoader();\n * loader.setDecoderPath( '/examples/jsm/libs/draco/' );\n *\n * const geometry = await dracoLoader.loadAsync( 'models/draco/bunny.drc' );\n * geometry.computeVertexNormals(); // optional\n *\n * dracoLoader.dispose();\n * ```\n *\n * @augments Loader\n * @three_import import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';\n */\nclass DRACOLoader extends Loader {\n\n\t/**\n\t * Constructs a new Draco loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {string} path - The decoder path.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Provides configuration for the decoder libraries. Configuration cannot be changed after decoding begins.\n\t *\n\t * @param {{type:('js'|'wasm')}} config - The decoder config.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be used during decoding.\n\t * A lower limit may be preferable if workers are also for other tasks in the application.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {DRACOLoader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Draco asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given Draco data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw Draco data as an array buffer.\n\t * @param {function(BufferGeometry)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace, onError ).catch( onError );\n\n\t}\n\n\t//\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i );\n\t\t\tColorManagement.colorSpaceToWorking( _color, SRGBColorSpace );\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n"],"mappings":"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","ignoreList":[]}