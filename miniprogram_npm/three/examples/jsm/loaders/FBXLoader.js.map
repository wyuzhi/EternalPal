{"version":3,"file":"node_modules/three/examples/jsm/loaders/FBXLoader.js","names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","ColorManagement","DirectionalLight","EquirectangularReflectionMapping","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","Loader","LoaderUtils","MathUtils","Matrix3","Matrix4","Mesh","MeshLambertMaterial","MeshPhongMaterial","NumberKeyframeTrack","Object3D","PerspectiveCamera","PointLight","PropertyBinding","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","SRGBColorSpace","ShapeUtils","Skeleton","SkinnedMesh","SpotLight","Texture","TextureLoader","Uint16BufferAttribute","Vector2","Vector3","Vector4","VectorKeyframeTrack","fflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","id","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","Translation","offset","FileName","loaderPath","length","indexOf","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","colorSpaceToWorking","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","opacity","TransparencyFactor","Opacity","TransparentColor","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","add","bindSkeleton","addGlobalSceneSettings","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","originalName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","DEFAULT_MATERIAL_NAME","attributes","vertexColors","groups","needsDefaultMaterial","il","group","materialIndex","defaultMaterial","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","setRGB","unitScaleFactor","UnitScaleFactor","negativeMaterialIndices","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","mappingType","prevMaterialIndex","startIndex","currentIndex","addGroup","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","Colors","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","getNormalNewell","vertices","current","next","z","normalize","getNormalTangentAndBitangent","normalVector","tangent","abs","cross","bitangent","clone","flattenVertex","normalTangent","normalBitangent","dot","triangles","positions","baseVertexPositions","triangulationInput","triangulateShape","i0","i1","i2","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","basePositions","baseIndices","morphPositionsSparse","morphIndices","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","ColorIndex","c","toArray","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","toString","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","result","interpolateRotations","defaultEulerOrder","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","w","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","curvex","curvey","curvez","initialValueRad","currentValueRad","valuesSpan","absoluteSpan","numSubIntervals","E1","E2","Q1","Q2","initialTime","timeSpan","Q","E","t","slerp","setFromQuaternion","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","elem","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","_textDecoder","TextDecoder","low","high","nullByte","decode","CORRECT","cursor","read","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM_inv","setFromMatrixScale","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums"],"sources":["node_modules/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tColorManagement,\n\tDirectionalLight,\n\tEquirectangularReflectionMapping,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tPerspectiveCamera,\n\tPointLight,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSRGBColorSpace,\n\tShapeUtils,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tUint16BufferAttribute,\n\tVector2,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack\n} from 'three';\n\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\n/**\n * A loader for the FBX format.\n *\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format.\n * Versions lower than this may load but will probably have errors.\n *\n * Needs Support:\n * - Morph normals / blend shape normals\n *\n * FBX format references:\n * - [C++ SDK reference]{@link https://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html}\n *\n * Binary format specification:\n * - [FBX binary file format specification]{@link https://code.blender.org/2013/08/fbx-binary-file-format-specification/}\n *\n * ```js\n * const loader = new FBXLoader();\n * const object = await loader.loadAsync( 'models/fbx/stanford-bunny.fbx' );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { FBXLoader } from 'three/addons/loaders/FBXLoader.js';\n */\nclass FBXLoader extends Loader {\n\n\t/**\n\t * Constructs a new FBX loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded FBX asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Group)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given FBX data and returns the resulting group.\n\t *\n\t * @param {ArrayBuffer} FBXBuffer - The raw FBX data as an array buffer.\n\t * @param {string} path - The URL base path.\n\t * @return {Group} An object representing the parsed asset.\n\t */\n\tparse( FBXBuffer, path ) {\n\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t} else {\n\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t}\n\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t}\n\n\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t}\n\n\t\t// console.log( fbxTree );\n\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t}\n\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n\n\tconstructor( textureLoader, manager ) {\n\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse() {\n\n\t\tconnections = this.parseConnections();\n\n\t\tconst images = this.parseImages();\n\t\tconst textures = this.parseTextures( images );\n\t\tconst materials = this.parseMaterials( textures );\n\t\tconst deformers = this.parseDeformers();\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\n\n\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\treturn sceneGraph;\n\n\t}\n\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t// and details the connection type\n\tparseConnections() {\n\n\t\tconst connectionMap = new Map();\n\n\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\n\n\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\tconst fromID = rawConnection[ 0 ];\n\t\t\t\tconst toID = rawConnection[ 1 ];\n\t\t\t\tconst relationship = rawConnection[ 2 ];\n\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn connectionMap;\n\n\t}\n\n\t// Parse FBXTree.Objects.Video for embedded image data\n\t// These images are connected to textures in FBXTree.Objects.Textures\n\t// via FBXTree.Connections.\n\tparseImages() {\n\n\t\tconst images = {};\n\t\tconst blobs = {};\n\n\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\n\n\t\t\tfor ( const nodeID in videoNodes ) {\n\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\n\n\t\t\t\tconst id = parseInt( nodeID );\n\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const id in images ) {\n\n\t\t\tconst filename = images[ id ];\n\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\t// Parse embedded image data in FBXTree.Video.Content\n\tparseImage( videoNode ) {\n\n\t\tconst content = videoNode.Content;\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\tlet type;\n\n\t\tswitch ( extension ) {\n\n\t\t\tcase 'bmp':\n\n\t\t\t\ttype = 'image/bmp';\n\t\t\t\tbreak;\n\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\n\t\t\t\ttype = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\n\t\t\t\ttype = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tif':\n\n\t\t\t\ttype = 'image/tiff';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tga':\n\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t}\n\n\t\t\t\ttype = 'image/tga';\n\t\t\t\tbreak;\n\n\t\t\tcase 'webp':\n\n\t\t\t\ttype = 'image/webp';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t} else { // Binary Format\n\n\t\t\tconst array = new Uint8Array( content );\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t}\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Texture\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t// to images in FBXTree.Objects.Video\n\tparseTextures( images ) {\n\n\t\tconst textureMap = new Map();\n\n\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\n\t\t\tfor ( const nodeID in textureNodes ) {\n\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureMap;\n\n\t}\n\n\t// Parse individual node in FBXTree.Objects.Texture\n\tparseTexture( textureNode, images ) {\n\n\t\tconst texture = this.loadTexture( textureNode, images );\n\n\t\ttexture.ID = textureNode.id;\n\n\t\ttexture.name = textureNode.attrName;\n\n\t\tconst wrapModeU = textureNode.WrapModeU;\n\t\tconst wrapModeV = textureNode.WrapModeV;\n\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t// 0: repeat(default), 1: clamp\n\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\tconst values = textureNode.Scaling.value;\n\n\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t}\n\n\t\tif ( 'Translation' in textureNode ) {\n\n\t\t\tconst values = textureNode.Translation.value;\n\n\t\t\ttexture.offset.x = values[ 0 ];\n\t\t\ttexture.offset.y = values[ 1 ];\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\tloadTexture( textureNode, images ) {\n\n\t\tconst extension = textureNode.FileName.split( '.' ).pop().toLowerCase();\n\n\t\tlet loader = this.manager.getHandler( `.${extension}` );\n\t\tif ( loader === null ) loader = this.textureLoader;\n\n\t\tconst loaderPath = loader.path;\n\n\t\tif ( ! loaderPath ) {\n\n\t\t\tloader.setPath( this.textureLoader.path );\n\n\t\t}\n\n\t\tconst children = connections.get( textureNode.id ).children;\n\n\t\tlet fileName;\n\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\tloader.setPath( undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( fileName === undefined ) {\n\n\t\t\tconsole.warn( 'FBXLoader: Undefined filename, creating placeholder texture.' );\n\t\t\treturn new Texture();\n\n\t\t}\n\n\t\tconst texture = loader.load( fileName );\n\n\t\t// revert to initial path\n\t\tloader.setPath( loaderPath );\n\n\t\treturn texture;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Material\n\tparseMaterials( textureMap ) {\n\n\t\tconst materialMap = new Map();\n\n\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\n\n\t\t\tfor ( const nodeID in materialNodes ) {\n\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materialMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Material\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t// FBX format currently only supports Lambert and Phong shading models\n\tparseMaterial( materialNode, textureMap ) {\n\n\t\tconst ID = materialNode.id;\n\t\tconst name = materialNode.attrName;\n\t\tlet type = materialNode.ShadingModel;\n\n\t\t// Case where FBX wraps shading model in property object.\n\t\tif ( typeof type === 'object' ) {\n\n\t\t\ttype = type.value;\n\n\t\t}\n\n\t\t// Ignore unused materials which don't have any connections.\n\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\tlet material;\n\n\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\tcase 'phong':\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\t\t\tcase 'lambert':\n\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.setValues( parameters );\n\t\tmaterial.name = name;\n\n\t\treturn material;\n\n\t}\n\n\t// Parse FBX material and return parameters suitable for a three.js material\n\t// Also parse the texture map and return any textures associated with the material\n\tparseParameters( materialNode, textureMap, ID ) {\n\n\t\tconst parameters = {};\n\n\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Diffuse ) {\n\n\t\t\tparameters.color = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.Diffuse.value ), SRGBColorSpace );\n\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\tparameters.color = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.DiffuseColor.value ), SRGBColorSpace );\n\n\t\t}\n\n\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Emissive ) {\n\n\t\t\tparameters.emissive = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.Emissive.value ), SRGBColorSpace );\n\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\tparameters.emissive = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.EmissiveColor.value ), SRGBColorSpace );\n\n\t\t}\n\n\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t}\n\n\t\t// the transparency handling is implemented based on Blender/Unity's approach: https://github.com/sobotka/blender-addons/blob/7d80f2f97161fc8e353a657b179b9aa1f8e5280b/io_scene_fbx/import_fbx.py#L1444-L1459\n\n\t\tparameters.opacity = 1 - ( materialNode.TransparencyFactor ? parseFloat( materialNode.TransparencyFactor.value ) : 0 );\n\n\t\tif ( parameters.opacity === 1 || parameters.opacity === 0 ) {\n\n\t\t\tparameters.opacity = ( materialNode.Opacity ? parseFloat( materialNode.Opacity.value ) : null );\n\n\t\t\tif ( parameters.opacity === null ) {\n\n\t\t\t\tparameters.opacity = 1 - ( materialNode.TransparentColor ? parseFloat( materialNode.TransparentColor.value[ 0 ] ) : 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\tparameters.transparent = true;\n\n\t\t}\n\n\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Shininess ) {\n\n\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t}\n\n\t\tif ( materialNode.Specular ) {\n\n\t\t\tparameters.specular = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.Specular.value ), SRGBColorSpace );\n\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\tparameters.specular = ColorManagement.colorSpaceToWorking( new Color().fromArray( materialNode.SpecularColor.value ), SRGBColorSpace );\n\n\t\t}\n\n\t\tconst scope = this;\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\tconst type = child.relationship;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Bump':\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DiffuseColor':\n\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.map !== undefined ) {\n\n\t\t\t\t\t\tparameters.map.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.emissiveMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NormalMap':\n\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.specularMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TransparentColor':\n\t\t\t\tcase 'TransparencyFactor':\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientColor':\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn parameters;\n\n\t}\n\n\t// get a texture from the textureMap for use by a material.\n\tgetTexture( textureMap, id ) {\n\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t}\n\n\t\treturn textureMap.get( id );\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Deformer\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\tparseDeformers() {\n\n\t\tconst skeletons = {};\n\t\tconst morphTargets = {};\n\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\tfor ( const nodeID in DeformerNodes ) {\n\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\tconst morphTarget = {\n\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t};\n\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tskeletons: skeletons,\n\t\t\tmorphTargets: morphTargets,\n\n\t\t};\n\n\t}\n\n\t// Parse single nodes in FBXTree.Objects.Deformer\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t// Each skin node represents a skeleton and each cluster node represents a bone\n\tparseSkeleton( relationships, deformerNodes ) {\n\n\t\tconst rawBones = [];\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\n\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\tconst rawBone = {\n\n\t\t\t\tID: child.ID,\n\t\t\t\tindices: [],\n\t\t\t\tweights: [],\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t};\n\n\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t}\n\n\t\t\trawBones.push( rawBone );\n\n\t\t} );\n\n\t\treturn {\n\n\t\t\trawBones: rawBones,\n\t\t\tbones: []\n\n\t\t};\n\n\t}\n\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\tparseMorphTargets( relationships, deformerNodes ) {\n\n\t\tconst rawMorphTargets = [];\n\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\tconst child = relationships.children[ i ];\n\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\tconst rawMorphTarget = {\n\n\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\tid: morphTargetNode.id,\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t};\n\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t} )[ 0 ].ID;\n\n\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t}\n\n\t\treturn rawMorphTargets;\n\n\t}\n\n\t// create the main Group() to be returned by the loader\n\tparseScene( deformers, geometryMap, materialMap ) {\n\n\t\tsceneGraph = new Group();\n\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tconst scope = this;\n\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\tconst modelNode = modelNodes[ model.ID ];\n\t\t\tscope.setLookAtProperties( model, modelNode );\n\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\n\n\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\tconst parent = modelMap.get( connection.ID );\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t} );\n\n\t\t\tif ( model.parent === null ) {\n\n\t\t\t\tsceneGraph.add( model );\n\n\t\t\t}\n\n\n\t\t} );\n\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\tthis.addGlobalSceneSettings();\n\n\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\tif ( node.parent ) {\n\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n\n\t\t\t\t}\n\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\n\n\t\t\t\tnode.applyMatrix4( transform );\n\t\t\t\tnode.updateWorldMatrix();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst animations = new AnimationParser().parse();\n\n\t\t// if all the models where already combined in a single group, just return that\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t}\n\n\t\tsceneGraph.animations = animations;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.Model\n\tparseModels( skeletons, geometryMap, materialMap ) {\n\n\t\tconst modelMap = new Map();\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tfor ( const nodeID in modelNodes ) {\n\n\t\t\tconst id = parseInt( nodeID );\n\t\t\tconst node = modelNodes[ nodeID ];\n\t\t\tconst relationships = connections.get( id );\n\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\tif ( ! model ) {\n\n\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\tmodel = new Bone();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Null':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodel = new Group();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\t\t\t\tmodel.userData.originalName = node.attrName;\n\n\t\t\t\tmodel.ID = id;\n\n\t\t\t}\n\n\t\t\tthis.getTransformData( model, node );\n\t\t\tmodelMap.set( id, model );\n\n\t\t}\n\n\t\treturn modelMap;\n\n\t}\n\n\tbuildSkeleton( relationships, skeletons, id, name ) {\n\n\t\tlet bone = null;\n\n\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\tfor ( const ID in skeletons ) {\n\n\t\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\tconst subBone = bone;\n\t\t\t\t\t\tbone = new Bone();\n\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\tbone.userData.originalName = name;\n\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t// duplicate the bone here and add it as a child of the first bone\n\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn bone;\n\n\t}\n\n\t// create a PerspectiveCamera or OrthographicCamera\n\tcreateCamera( relationships ) {\n\n\t\tlet model;\n\t\tlet cameraAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tcameraAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type = 0;\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\ttype = 1;\n\n\t\t\t}\n\n\t\t\tlet nearClippingPlane = 1;\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t}\n\n\t\t\tlet farClippingPlane = 1000;\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t}\n\n\n\t\t\tlet width = window.innerWidth;\n\t\t\tlet height = window.innerHeight;\n\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t}\n\n\t\t\tconst aspect = width / height;\n\n\t\t\tlet fov = 45;\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t}\n\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Perspective\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Orthographic cameras not supported yet.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\t// Create a DirectionalLight, PointLight or SpotLight\n\tcreateLight( relationships ) {\n\n\t\tlet model;\n\t\tlet lightAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tlightAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( lightAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type;\n\n\t\t\t// LightType can be undefined for Point lights\n\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\ttype = 0;\n\n\t\t\t} else {\n\n\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t}\n\n\t\t\tlet color = 0xffffff;\n\n\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\tcolor = ColorManagement.colorSpaceToWorking( new Color().fromArray( lightAttribute.Color.value ), SRGBColorSpace );\n\n\t\t\t}\n\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t// light disabled\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\tintensity = 0;\n\n\t\t\t}\n\n\t\t\tlet distance = 0;\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\tdistance = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\tconst decay = 1;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Point\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Directional\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // Spot\n\t\t\t\t\tlet angle = Math.PI / 3;\n\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet penumbra = 0;\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\n\t\t\t\t\tmodel = new PointLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\tmodel.castShadow = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateMesh( relationships, geometryMap, materialMap ) {\n\n\t\tlet model;\n\t\tlet geometry = null;\n\t\tlet material = null;\n\t\tconst materials = [];\n\n\t\t// get geometry and materials(s) from connections\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t}\n\n\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( materials.length > 1 ) {\n\n\t\t\tmaterial = materials;\n\n\t\t} else if ( materials.length > 0 ) {\n\n\t\t\tmaterial = materials[ 0 ];\n\n\t\t} else {\n\n\t\t\tmaterial = new MeshPhongMaterial( {\n\t\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\t\tcolor: 0xcccccc\n\t\t\t} );\n\t\t\tmaterials.push( material );\n\n\t\t}\n\n\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\t// Sanitization: If geometry has groups, then it must match the provided material array.\n\t\t// If not, we need to clean up the `group.materialIndex` properties inside the groups and point at a (new) default material.\n\t\t// This isn't well defined; Unity creates default material, while Blender implicitly uses the previous material in the list.\n\t\tif ( geometry.groups.length > 0 ) {\n\n\t\t\tlet needsDefaultMaterial = false;\n\n\t\t\tfor ( let i = 0, il = geometry.groups.length; i < il; i ++ ) {\n\n\t\t\t\tconst group = geometry.groups[ i ];\n\n\t\t\t\tif ( group.materialIndex < 0 || group.materialIndex >= materials.length ) {\n\n\t\t\t\t\tgroup.materialIndex = materials.length;\n\t\t\t\t\tneedsDefaultMaterial = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( needsDefaultMaterial ) {\n\n\t\t\t\tconst defaultMaterial = new MeshPhongMaterial();\n\t\t\t\tmaterials.push( defaultMaterial );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\tmodel = new SkinnedMesh( geometry, material );\n\t\t\tmodel.normalizeSkinWeights();\n\n\t\t} else {\n\n\t\t\tmodel = new Mesh( geometry, material );\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateCurve( relationships, geometryMap ) {\n\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\treturn geo;\n\n\t\t}, null );\n\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\tconst material = new LineBasicMaterial( {\n\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\tcolor: 0x3300ff,\n\t\t\tlinewidth: 1\n\t\t} );\n\t\treturn new Line( geometry, material );\n\n\t}\n\n\t// parse the model node for transform data\n\tgetTransformData( model, modelNode ) {\n\n\t\tconst transformData = {};\n\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\telse transformData.eulerOrder = getEulerOrder( 0 );\n\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\tmodel.userData.transformData = transformData;\n\n\t}\n\n\tsetLookAtProperties( model, modelNode ) {\n\n\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\tconst children = connections.get( model.ID ).children;\n\n\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\n\n\t\tconst bindMatrices = this.parsePoseNodes();\n\n\t\tfor ( const ID in skeletons ) {\n\n\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\tconst geoID = parent.ID;\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\n\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tparsePoseNodes() {\n\n\t\tconst bindMatrices = {};\n\n\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\tfor ( const nodeID in BindPoseNode ) {\n\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\n\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindMatrices;\n\n\t}\n\n\taddGlobalSceneSettings() {\n\n\t\tif ( 'GlobalSettings' in fbxTree ) {\n\n\t\t\tif ( 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\t// Parse ambient color - if it's not set to black (default), create an ambient light\n\n\t\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tconst r = ambientColor[ 0 ];\n\t\t\t\tconst g = ambientColor[ 1 ];\n\t\t\t\tconst b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tconst color = new Color().setRGB( r, g, b, SRGBColorSpace );\n\t\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( 'UnitScaleFactor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tsceneGraph.userData.unitScaleFactor = fbxTree.GlobalSettings.UnitScaleFactor.value;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n\n\tconstructor() {\n\n\t\tthis.negativeMaterialIndices = false;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Geometry\n\tparse( deformers ) {\n\n\t\tconst geometryMap = new Map();\n\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\tfor ( const nodeID in geoNodes ) {\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// report warnings\n\n\t\tif ( this.negativeMaterialIndices === true ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.' );\n\n\t\t}\n\n\t\treturn geometryMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Geometry\n\tparseGeometry( relationships, geoNode, deformers ) {\n\n\t\tswitch ( geoNode.attrType ) {\n\n\t\t\tcase 'Mesh':\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\tbreak;\n\n\t\t\tcase 'NurbsCurve':\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\n\n\t\tconst skeletons = deformers.skeletons;\n\t\tconst morphTargets = [];\n\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t} );\n\n\t\t// don't create geometry if it is not associated with any models\n\t\tif ( modelNodes.length === 0 ) return;\n\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\treturn skeleton;\n\n\t\t}, null );\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Assume one model and get the preRotation from that\n\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\tconst modelNode = modelNodes[ 0 ];\n\n\t\tconst transformData = {};\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\tconst transform = generateTransform( transformData );\n\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t}\n\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\tconst geo = new BufferGeometry();\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\tconst buffers = this.genBuffers( geoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t}\n\n\t\tif ( skeleton ) {\n\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t// used later to bind the skeleton to the model\n\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t}\n\n\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\n\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t}\n\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\tconst name = i === 0 ? 'uv' : `uv${ i }`;\n\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t} );\n\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\tlet startIndex = 0;\n\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t// using one of them\n\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\treturn geo;\n\n\t}\n\n\tparseGeoNode( geoNode, skeleton ) {\n\n\t\tconst geoInfo = {};\n\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\tif ( geoNode.LayerElementColor && geoNode.LayerElementColor[ 0 ].Colors ) {\n\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\tgeoInfo.uv = [];\n\n\t\t\tlet i = 0;\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeoInfo.weightTable = {};\n\n\t\tif ( skeleton !== null ) {\n\n\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geoInfo;\n\n\t}\n\n\tgenBuffers( geoInfo ) {\n\n\t\tconst buffers = {\n\t\t\tvertex: [],\n\t\t\tnormal: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\t\t\tmaterialIndex: [],\n\t\t\tvertexWeights: [],\n\t\t\tweightsIndices: [],\n\t\t};\n\n\t\tlet polygonIndex = 0;\n\t\tlet faceLength = 0;\n\t\tlet displayedWeightsWarning = false;\n\n\t\t// these will hold data for a single face\n\t\tlet facePositionIndexes = [];\n\t\tlet faceNormals = [];\n\t\tlet faceColors = [];\n\t\tlet faceUVs = [];\n\t\tlet faceWeights = [];\n\t\tlet faceWeightIndices = [];\n\n\t\tconst scope = this;\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\tlet materialIndex;\n\t\t\tlet endOfFace = false;\n\n\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t// A cube with quad faces looks like this:\n\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t//  }\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\tendOfFace = true;\n\n\t\t\t}\n\n\t\t\tlet weightIndices = [];\n\t\t\tlet weights = [];\n\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t} );\n\n\n\t\t\t\t}\n\n\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\tlet currentWeight = weight;\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\tweights = Weight;\n\n\t\t\t\t}\n\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\tif ( materialIndex < 0 ) {\n\n\t\t\t\t\tscope.negativeMaterialIndices = true;\n\t\t\t\t\tmaterialIndex = 0; // fallback\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfaceLength ++;\n\n\t\t\tif ( endOfFace ) {\n\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\tpolygonIndex ++;\n\t\t\t\tfaceLength = 0;\n\n\t\t\t\t// reset arrays for the next face\n\t\t\t\tfacePositionIndexes = [];\n\t\t\t\tfaceNormals = [];\n\t\t\t\tfaceColors = [];\n\t\t\t\tfaceUVs = [];\n\t\t\t\tfaceWeights = [];\n\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn buffers;\n\n\t}\n\n\t// See https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal\n\tgetNormalNewell( vertices ) {\n\n\t\tconst normal = new Vector3( 0.0, 0.0, 0.0 );\n\n\t\tfor ( let i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tconst current = vertices[ i ];\n\t\t\tconst next = vertices[ ( i + 1 ) % vertices.length ];\n\n\t\t\tnormal.x += ( current.y - next.y ) * ( current.z + next.z );\n\t\t\tnormal.y += ( current.z - next.z ) * ( current.x + next.x );\n\t\t\tnormal.z += ( current.x - next.x ) * ( current.y + next.y );\n\n\t\t}\n\n\t\tnormal.normalize();\n\n\t\treturn normal;\n\n\t}\n\n\tgetNormalTangentAndBitangent( vertices ) {\n\n\t\tconst normalVector = this.getNormalNewell( vertices );\n\t\t// Avoid up being equal or almost equal to normalVector\n\t\tconst up = Math.abs( normalVector.z ) > 0.5 ? new Vector3( 0.0, 1.0, 0.0 ) : new Vector3( 0.0, 0.0, 1.0 );\n\t\tconst tangent = up.cross( normalVector ).normalize();\n\t\tconst bitangent = normalVector.clone().cross( tangent ).normalize();\n\n\t\treturn {\n\t\t\tnormal: normalVector,\n\t\t\ttangent: tangent,\n\t\t\tbitangent: bitangent\n\t\t};\n\n\t}\n\n\tflattenVertex( vertex, normalTangent, normalBitangent ) {\n\n\t\treturn new Vector2(\n\t\t\tvertex.dot( normalTangent ),\n\t\t\tvertex.dot( normalBitangent )\n\t\t);\n\n\t}\n\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\tlet triangles;\n\n\t\tif ( faceLength > 3 ) {\n\n\t\t\t// Triangulate n-gon using earcut\n\n\t\t\tconst vertices = [];\n\t\t\t// in morphing scenario vertexPositions represent morphPositions\n\t\t\t// while baseVertexPositions represent the original geometry's positions\n\t\t\tconst positions = geoInfo.baseVertexPositions || geoInfo.vertexPositions;\n\t\t\tfor ( let i = 0; i < facePositionIndexes.length; i += 3 ) {\n\n\t\t\t\tvertices.push(\n\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\tpositions[ facePositionIndexes[ i ] ],\n\t\t\t\t\t\tpositions[ facePositionIndexes[ i + 1 ] ],\n\t\t\t\t\t\tpositions[ facePositionIndexes[ i + 2 ] ]\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tconst { tangent, bitangent } = this.getNormalTangentAndBitangent( vertices );\n\t\t\tconst triangulationInput = [];\n\n\t\t\tfor ( const vertex of vertices ) {\n\n\t\t\t\ttriangulationInput.push( this.flattenVertex( vertex, tangent, bitangent ) );\n\n\t\t\t}\n\n\t\t\t// When vertices is an array of [0,0,0] elements (which is the case for vertices not participating in morph)\n\t\t\t// the triangulationInput will be an array of [0,0] elements\n\t\t\t// resulting in an array of 0 triangles being returned from ShapeUtils.triangulateShape\n\t\t\t// leading to not pushing into buffers.vertex the redundant vertices (the vertices that are not morphed).\n\t\t\t// That's why, in order to support morphing scenario, \"positions\" is looking first for baseVertexPositions,\n\t\t\t// so that we don't end up with an array of 0 triangles for the faces not participating in morph.\n\t\t\ttriangles = ShapeUtils.triangulateShape( triangulationInput, [] );\n\n\t\t} else {\n\n\t\t\t// Regular triangle, skip earcut triangulation step\n\t\t\ttriangles = [[ 0, 1, 2 ]];\n\n\t\t}\n\n\t\tfor ( const [ i0, i1, i2 ] of triangles ) {\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 2 ] ] );\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 3 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 + 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\tif ( morphTargets.length === 0 ) return;\n\n\t\tparentGeo.morphTargetsRelative = true;\n\n\t\tparentGeo.morphAttributes.position = [];\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\tconst scope = this;\n\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\tconst basePositions = parentGeoNode.Vertices !== undefined ? parentGeoNode.Vertices.a : [];\n\t\tconst baseIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\tconst morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n\t\tconst morphIndices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n\n\t\tconst length = parentGeo.attributes.position.count * 3;\n\t\tconst morphPositions = new Float32Array( length );\n\n\t\tfor ( let i = 0; i < morphIndices.length; i ++ ) {\n\n\t\t\tconst morphIndex = morphIndices[ i ] * 3;\n\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t}\n\n\t\t// TODO: add morph normal support\n\t\tconst morphGeoInfo = {\n\t\t\tvertexIndices: baseIndices,\n\t\t\tvertexPositions: morphPositions,\n\t\t\tbaseVertexPositions: basePositions\n\t\t};\n\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t}\n\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\tparseNormals( NormalNode ) {\n\n\t\tconst mappingType = NormalNode.MappingInformationType;\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\n\t\tconst buffer = NormalNode.Normals.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 3,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\tparseUVs( UVNode ) {\n\n\t\tconst mappingType = UVNode.MappingInformationType;\n\t\tconst referenceType = UVNode.ReferenceInformationType;\n\t\tconst buffer = UVNode.UV.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 2,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\tparseVertexColors( ColorNode ) {\n\n\t\tconst mappingType = ColorNode.MappingInformationType;\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\n\t\tconst buffer = ColorNode.Colors.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t}\n\n\t\tfor ( let i = 0, c = new Color(); i < buffer.length; i += 4 ) {\n\n\t\t\tc.fromArray( buffer, i );\n\t\t\tColorManagement.colorSpaceToWorking( c, SRGBColorSpace );\n\t\t\tc.toArray( buffer, i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 4,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\tparseMaterialIndices( MaterialNode ) {\n\n\t\tconst mappingType = MaterialNode.MappingInformationType;\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\n\n\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: [ 0 ],\n\t\t\t\tindices: [ 0 ],\n\t\t\t\tmappingType: 'AllSame',\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}\n\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t// for conforming with the other functions we've written for other data.\n\t\tconst materialIndices = [];\n\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\tmaterialIndices.push( i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 1,\n\t\t\tbuffer: materialIndexBuffer,\n\t\t\tindices: materialIndices,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\tparseNurbsGeometry( geoNode ) {\n\n\t\tconst order = parseInt( geoNode.Order );\n\n\t\tif ( isNaN( order ) ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst degree = order - 1;\n\n\t\tconst knots = geoNode.KnotVector.a;\n\t\tconst controlPoints = [];\n\t\tconst pointsValues = geoNode.Points.a;\n\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\n\n\t\t}\n\n\t\tlet startKnot, endKnot;\n\n\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\tstartKnot = degree;\n\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\n\n\t\treturn new BufferGeometry().setFromPoints( points );\n\n\t}\n\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n\n\t// take raw animation clips and turn them into three.js animation clips\n\tparse() {\n\n\t\tconst animationClips = [];\n\n\t\tconst rawClips = this.parseClips();\n\n\t\tif ( rawClips !== undefined ) {\n\n\t\t\tfor ( const key in rawClips ) {\n\n\t\t\t\tconst rawClip = rawClips[ key ];\n\n\t\t\t\tconst clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animationClips;\n\n\t}\n\n\tparseClips() {\n\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t// if this is undefined we can safely assume there are no animations\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\n\n\t\treturn rawClips;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t// and is referenced by an AnimationLayer\n\tparseAnimationCurveNodes() {\n\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\tconst curveNodesMap = new Map();\n\n\t\tfor ( const nodeID in rawCurveNodes ) {\n\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\tconst curveNode = {\n\n\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\tcurves: {},\n\n\t\t\t\t};\n\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn curveNodesMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t// axis ( e.g. times and values of x rotation)\n\tparseAnimationCurves( curveNodesMap ) {\n\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t// clearly, this should be optimised to\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\tfor ( const nodeID in rawCurves ) {\n\n\t\t\tconst animationCurve = {\n\n\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t};\n\n\t\t\tconst relationships = connections.get( animationCurve.id );\n\n\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\tparseAnimationLayers( curveNodesMap ) {\n\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\tconst layersMap = new Map();\n\n\t\tfor ( const nodeID in rawLayers ) {\n\n\t\t\tconst layerCurveNodes = [];\n\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\n\n\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\tconst children = connection.children;\n\n\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn layersMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t// hierarchy. Each Stack node will be used to create an AnimationClip\n\tparseAnimStacks( layersMap ) {\n\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t// connect the stacks (clips) up to the layers\n\t\tconst rawClips = {};\n\n\t\tfor ( const nodeID in rawStacks ) {\n\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t}\n\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\tlayer: layer,\n\n\t\t\t};\n\n\t\t}\n\n\t\treturn rawClips;\n\n\t}\n\n\taddClip( rawClip ) {\n\n\t\tlet tracks = [];\n\n\t\tconst scope = this;\n\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\n\n\t\t} );\n\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\n\n\t}\n\n\tgenerateTracks( rawTracks ) {\n\n\t\tconst tracks = [];\n\n\t\tlet initialPosition = new Vector3();\n\t\tlet initialScale = new Vector3();\n\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, new Quaternion(), initialScale );\n\n\t\tinitialPosition = initialPosition.toArray();\n\t\tinitialScale = initialScale.toArray();\n\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t}\n\n\tgenerateRotationTrack( modelName, curves, preRotation, postRotation, eulerOrder ) {\n\n\t\tlet times;\n\t\tlet values;\n\n\t\tif ( curves.x !== undefined && curves.y !== undefined && curves.z !== undefined ) {\n\n\t\t\tconst result = this.interpolateRotations( curves.x, curves.y, curves.z, eulerOrder );\n\n\t\t\ttimes = result[ 0 ];\n\t\t\tvalues = result[ 1 ];\n\n\t\t}\n\n\t\t// For Maya models using \"Joint Orient\", Euler order only applies to rotation, not pre/post-rotations\n\t\tconst defaultEulerOrder = getEulerOrder( 0 );\n\n\t\tif ( preRotation !== undefined ) {\n\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\n\t\t\tpreRotation.push( defaultEulerOrder );\n\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\n\n\t\t}\n\n\t\tif ( postRotation !== undefined ) {\n\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\n\t\t\tpostRotation.push( defaultEulerOrder );\n\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\n\n\t\t}\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst euler = new Euler();\n\n\t\tconst quaternionValues = [];\n\n\t\tif ( ! values || ! times ) return new QuaternionKeyframeTrack( modelName + '.quaternion', [ 0 ], [ 0 ] );\n\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\n\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\t// Check unroll\n\t\t\tif ( i > 2 ) {\n\n\t\t\t\tconst prevQuat = new Quaternion().fromArray(\n\t\t\t\t\tquaternionValues,\n\t\t\t\t\t( ( i - 3 ) / 3 ) * 4\n\t\t\t\t);\n\n\t\t\t\tif ( prevQuat.dot( quaternion ) < 0 ) {\n\n\t\t\t\t\tquaternion.set( - quaternion.x, - quaternion.y, - quaternion.z, - quaternion.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t}\n\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t}\n\n\tgenerateMorphTrack( rawTracks ) {\n\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\n\t\tconst values = curves.values.map( function ( val ) {\n\n\t\t\treturn val / 100;\n\n\t\t} );\n\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t}\n\n\t// For all animated objects, times are defined separately for each axis\n\t// Here we'll combine the times into one sorted array without duplicates\n\tgetTimesForAllAxes( curves ) {\n\n\t\tlet times = [];\n\n\t\t// first join together the times for each axis, if defined\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t// then sort them\n\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t} );\n\n\t\t// and remove duplicates\n\t\tif ( times.length > 1 ) {\n\n\t\t\tlet targetIndex = 1;\n\t\t\tlet lastValue = times[ 0 ];\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\n\n\t\t\t\tconst currentValue = times[ i ];\n\t\t\t\tif ( currentValue !== lastValue ) {\n\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\n\t\t\t\t\tlastValue = currentValue;\n\t\t\t\t\ttargetIndex ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttimes = times.slice( 0, targetIndex );\n\n\t\t}\n\n\t\treturn times;\n\n\t}\n\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\n\n\t\tconst prevValue = initialValue;\n\n\t\tconst values = [];\n\n\t\tlet xIndex = - 1;\n\t\tlet yIndex = - 1;\n\t\tlet zIndex = - 1;\n\n\t\ttimes.forEach( function ( time ) {\n\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t// if there is an x value defined for this frame, use that\n\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\n\t\t\t\tvalues.push( xValue );\n\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\n\t\t\t\tvalues.push( yValue );\n\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\n\t\t\t\tvalues.push( zValue );\n\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn values;\n\n\t}\n\n\t// Rotations are defined as Euler angles which can have values  of any size\n\t// These will be converted to quaternions which don't support values greater than\n\t// PI, so we'll interpolate large rotations\n\tinterpolateRotations( curvex, curvey, curvez, eulerOrder ) {\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\t// Add first frame\n\t\ttimes.push( curvex.times[ 0 ] );\n\t\tvalues.push( MathUtils.degToRad( curvex.values[ 0 ] ) );\n\t\tvalues.push( MathUtils.degToRad( curvey.values[ 0 ] ) );\n\t\tvalues.push( MathUtils.degToRad( curvez.values[ 0 ] ) );\n\n\t\tfor ( let i = 1; i < curvex.values.length; i ++ ) {\n\n\t\t\tconst initialValue = [\n\t\t\t\tcurvex.values[ i - 1 ],\n\t\t\t\tcurvey.values[ i - 1 ],\n\t\t\t\tcurvez.values[ i - 1 ],\n\t\t\t];\n\n\t\t\tif ( isNaN( initialValue[ 0 ] ) || isNaN( initialValue[ 1 ] ) || isNaN( initialValue[ 2 ] ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst initialValueRad = initialValue.map( MathUtils.degToRad );\n\n\t\t\tconst currentValue = [\n\t\t\t\tcurvex.values[ i ],\n\t\t\t\tcurvey.values[ i ],\n\t\t\t\tcurvez.values[ i ],\n\t\t\t];\n\n\t\t\tif ( isNaN( currentValue[ 0 ] ) || isNaN( currentValue[ 1 ] ) || isNaN( currentValue[ 2 ] ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValueRad = currentValue.map( MathUtils.degToRad );\n\n\t\t\tconst valuesSpan = [\n\t\t\t\tcurrentValue[ 0 ] - initialValue[ 0 ],\n\t\t\t\tcurrentValue[ 1 ] - initialValue[ 1 ],\n\t\t\t\tcurrentValue[ 2 ] - initialValue[ 2 ],\n\t\t\t];\n\n\t\t\tconst absoluteSpan = [\n\t\t\t\tMath.abs( valuesSpan[ 0 ] ),\n\t\t\t\tMath.abs( valuesSpan[ 1 ] ),\n\t\t\t\tMath.abs( valuesSpan[ 2 ] ),\n\t\t\t];\n\n\t\t\tif ( absoluteSpan[ 0 ] >= 180 || absoluteSpan[ 1 ] >= 180 || absoluteSpan[ 2 ] >= 180 ) {\n\n\t\t\t\tconst maxAbsSpan = Math.max( ...absoluteSpan );\n\n\t\t\t\tconst numSubIntervals = maxAbsSpan / 180;\n\n\t\t\t\tconst E1 = new Euler( ...initialValueRad, eulerOrder );\n\t\t\t\tconst E2 = new Euler( ...currentValueRad, eulerOrder );\n\n\t\t\t\tconst Q1 = new Quaternion().setFromEuler( E1 );\n\t\t\t\tconst Q2 = new Quaternion().setFromEuler( E2 );\n\n\t\t\t\t// Check unroll\n\t\t\t\tif ( Q1.dot( Q2 ) ) {\n\n\t\t\t\t\tQ2.set( - Q2.x, - Q2.y, - Q2.z, - Q2.w );\n\n\t\t\t\t}\n\n\t\t\t\t// Interpolate\n\t\t\t\tconst initialTime = curvex.times[ i - 1 ];\n\t\t\t\tconst timeSpan = curvex.times[ i ] - initialTime;\n\n\t\t\t\tconst Q = new Quaternion();\n\t\t\t\tconst E = new Euler();\n\t\t\t\tfor ( let t = 0; t < 1; t += 1 / numSubIntervals ) {\n\n\t\t\t\t\tQ.copy( Q1.clone().slerp( Q2.clone(), t ) );\n\n\t\t\t\t\ttimes.push( initialTime + t * timeSpan );\n\t\t\t\t\tE.setFromQuaternion( Q, eulerOrder );\n\n\t\t\t\t\tvalues.push( E.x );\n\t\t\t\t\tvalues.push( E.y );\n\t\t\t\t\tvalues.push( E.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttimes.push( curvex.times[ i ] );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvex.values[ i ] ) );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvey.values[ i ] ) );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvez.values[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn [ times, values ];\n\n\t}\n\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n\n\tgetPrevNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t}\n\n\tgetCurrentNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t}\n\n\tgetCurrentProp() {\n\n\t\treturn this.currentProp;\n\n\t}\n\n\tpushStack( node ) {\n\n\t\tthis.nodeStack.push( node );\n\t\tthis.currentIndent += 1;\n\n\t}\n\n\tpopStack() {\n\n\t\tthis.nodeStack.pop();\n\t\tthis.currentIndent -= 1;\n\n\t}\n\n\tsetCurrentProp( val, name ) {\n\n\t\tthis.currentProp = val;\n\t\tthis.currentPropName = name;\n\n\t}\n\n\tparse( text ) {\n\n\t\tthis.currentIndent = 0;\n\n\t\tthis.allNodes = new FBXTree();\n\t\tthis.nodeStack = [];\n\t\tthis.currentProp = [];\n\t\tthis.currentPropName = '';\n\n\t\tconst scope = this;\n\n\t\tconst split = text.split( /[\\r\\n]+/ );\n\n\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\n\n\t\t\tif ( matchBeginning ) {\n\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\n\n\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\tscope.popStack();\n\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\tscope.parseNodePropertyContinued( line );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.allNodes;\n\n\t}\n\n\tparseNodeBegin( line, property ) {\n\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t} );\n\n\t\tconst node = { name: nodeName };\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\t// a top node\n\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t} else { // a subnode\n\n\t\t\t// if the subnode already exists, append it\n\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\tthis.pushStack( node );\n\n\t}\n\n\tparseNodeAttr( attrs ) {\n\n\t\tlet id = attrs[ 0 ];\n\n\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet name = '', type = '';\n\n\t\tif ( attrs.length > 1 ) {\n\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\ttype = attrs[ 2 ];\n\n\t\t}\n\n\t\treturn { id: id, name: name, type: type };\n\n\t}\n\n\tparseNodeProperty( line, property, contentLine ) {\n\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t//\tContent: ,\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t}\n\n\t\tconst currentNode = this.getCurrentNode();\n\t\tconst parentName = currentNode.name;\n\n\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Connections\n\t\tif ( propName === 'C' ) {\n\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\n\t\t\tconst from = parseInt( connProps[ 0 ] );\n\t\t\tconst to = parseInt( connProps[ 1 ] );\n\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t} );\n\n\t\t\tpropName = 'connections';\n\t\t\tpropValue = [ from, to ];\n\t\t\tappend( propValue, rest );\n\n\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Node\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t// connections\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t} else {\n\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\telse currentNode.a = propValue;\n\n\t\t}\n\n\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t}\n\n\t}\n\n\tparseNodePropertyContinued( line ) {\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\tcurrentNode.a += line;\n\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t// so convert the string to an array\n\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t}\n\n\t}\n\n\t// parse \"Property70\"\n\tparseNodeSpecialProperty( line, propName, propValue ) {\n\n\t\t// split this\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t// into array like below\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t} );\n\n\t\tconst innerPropName = props[ 0 ];\n\t\tconst innerPropType1 = props[ 1 ];\n\t\tconst innerPropType2 = props[ 2 ];\n\t\tconst innerPropFlag = props[ 3 ];\n\t\tlet innerPropValue = props[ 4 ];\n\n\t\t// cast values where needed, otherwise leave as strings\n\t\tswitch ( innerPropType1 ) {\n\n\t\t\tcase 'int':\n\t\t\tcase 'enum':\n\t\t\tcase 'bool':\n\t\t\tcase 'ULongLong':\n\t\t\tcase 'double':\n\t\t\tcase 'Number':\n\t\t\tcase 'FieldOfView':\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t\tcase 'Color':\n\t\t\tcase 'ColorRGB':\n\t\t\tcase 'Vector3D':\n\t\t\tcase 'Lcl_Translation':\n\t\t\tcase 'Lcl_Rotation':\n\t\t\tcase 'Lcl_Scaling':\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// CAUTION: these props must append to parent's parent\n\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t'type': innerPropType1,\n\t\t\t'type2': innerPropType2,\n\t\t\t'flag': innerPropFlag,\n\t\t\t'value': innerPropValue\n\n\t\t};\n\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t}\n\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n\n\tparse( buffer ) {\n\n\t\tconst reader = new BinaryReader( buffer );\n\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\tconst version = reader.getUint32();\n\n\t\tif ( version < 6400 ) {\n\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\n\n\t\t}\n\n\t\tconst allNodes = new FBXTree();\n\n\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\tconst node = this.parseNode( reader, version );\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t}\n\n\t\treturn allNodes;\n\n\t}\n\n\t// Check if reader has reached the end of content.\n\tendOfContent( reader ) {\n\n\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t// - 16bytes: magic\n\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t// - 4bytes: magic\n\t\t// - 4bytes: version\n\t\t// - 120bytes: zero\n\t\t// - 16bytes: magic\n\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t} else {\n\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t}\n\n\t}\n\n\t// recursively parse nodes until the end of the file is reached\n\tparseNode( reader, version ) {\n\n\t\tconst node = {};\n\n\t\t// The first three data sizes depends on version.\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n\t\tconst nameLen = reader.getUint8();\n\t\tconst name = reader.getString( nameLen );\n\n\t\t// Regards this node as NULL-record if endOffset is zero\n\t\tif ( endOffset === 0 ) return null;\n\n\t\tconst propertyList = [];\n\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\n\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t}\n\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t// check if this node represents just a single property\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\tconst subNode = this.parseNode( reader, version );\n\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t}\n\n\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\tif ( typeof id === 'number' ) node.id = id;\n\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\tif ( name !== '' ) node.name = name;\n\n\t\treturn node;\n\n\t}\n\n\tparseSubNode( name, node, subNode ) {\n\n\t\t// special case: child node is single property\n\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\tconst value = subNode.propertyList[ 0 ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\tsubNode.a = value;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t}\n\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\tconst array = [];\n\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t} );\n\n\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\tnode.connections = [];\n\n\t\t\t}\n\n\t\t\tnode.connections.push( array );\n\n\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\tconst keys = Object.keys( subNode );\n\n\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t} );\n\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\tlet innerPropValue;\n\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\tinnerPropValue = [\n\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t}\n\n\t\t\t// this will be copied to parent, see above\n\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t}\n\n\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tparseProperty( reader ) {\n\n\t\tconst type = reader.getString( 1 );\n\t\tlet length;\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 'C':\n\t\t\t\treturn reader.getBoolean();\n\n\t\t\tcase 'D':\n\t\t\t\treturn reader.getFloat64();\n\n\t\t\tcase 'F':\n\t\t\t\treturn reader.getFloat32();\n\n\t\t\tcase 'I':\n\t\t\t\treturn reader.getInt32();\n\n\t\t\tcase 'L':\n\t\t\t\treturn reader.getInt64();\n\n\t\t\tcase 'R':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\tcase 'S':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getString( length );\n\n\t\t\tcase 'Y':\n\t\t\t\treturn reader.getInt16();\n\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase 'f':\n\t\t\tcase 'i':\n\t\t\tcase 'l':\n\n\t\t\t\tconst arrayLength = reader.getUint32();\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\tconst compressedLength = reader.getUint32();\n\n\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) );\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\tcase 'i':\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t}\n\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t}\n\n\t}\n\n}\n\nclass BinaryReader {\n\n\tconstructor( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\t\tthis._textDecoder = new TextDecoder();\n\n\t}\n\n\tgetOffset() {\n\n\t\treturn this.offset;\n\n\t}\n\n\tsize() {\n\n\t\treturn this.dv.buffer.byteLength;\n\n\t}\n\n\tskip( length ) {\n\n\t\tthis.offset += length;\n\n\t}\n\n\t// seems like true/false representation depends on exporter.\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t// then sees LSB.\n\tgetBoolean() {\n\n\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t}\n\n\tgetBooleanArray( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getBoolean() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint8() {\n\n\t\tconst value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t}\n\n\tgetInt16() {\n\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t}\n\n\tgetInt32() {\n\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetInt32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint32() {\n\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t// There's a possibility that this method returns wrong value if the value\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t// TODO: safely handle 64-bit integer\n\tgetInt64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\t// calculate negative value\n\t\tif ( high & 0x80000000 ) {\n\n\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetInt64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// Note: see getInt64() comment\n\tgetUint64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetFloat32() {\n\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetFloat32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetFloat64() {\n\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t}\n\n\tgetFloat64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetArrayBuffer( size ) {\n\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\tthis.offset += size;\n\t\treturn value;\n\n\t}\n\n\tgetString( size ) {\n\n\t\tconst start = this.offset;\n\t\tlet a = new Uint8Array( this.dv.buffer, start, size );\n\n\t\tthis.skip( size );\n\n\t\tconst nullByte = a.indexOf( 0 );\n\t\tif ( nullByte >= 0 ) a = new Uint8Array( this.dv.buffer, start, nullByte );\n\n\t\treturn this._textDecoder.decode( a );\n\n\t}\n\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n\n\tadd( key, val ) {\n\n\t\tthis[ key ] = val;\n\n\t}\n\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary( buffer ) {\n\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n}\n\nfunction isFbxFormatASCII( text ) {\n\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\tlet cursor = 0;\n\n\tfunction read( offset ) {\n\n\t\tconst result = text[ offset - 1 ];\n\t\ttext = text.slice( cursor + offset );\n\t\tcursor ++;\n\t\treturn result;\n\n\t}\n\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\n\n\t\tconst num = read( 1 );\n\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction getFbxVersion( text ) {\n\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\n\tconst match = text.match( versionRegExp );\n\n\tif ( match ) {\n\n\t\tconst version = parseInt( match[ 1 ] );\n\t\treturn version;\n\n\t}\n\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds( time ) {\n\n\treturn time / 46186158000;\n\n}\n\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\tlet index;\n\n\tswitch ( infoObject.mappingType ) {\n\n\t\tcase 'ByPolygonVertex' :\n\t\t\tindex = polygonVertexIndex;\n\t\t\tbreak;\n\t\tcase 'ByPolygon' :\n\t\t\tindex = polygonIndex;\n\t\t\tbreak;\n\t\tcase 'ByVertice' :\n\t\t\tindex = vertexIndex;\n\t\t\tbreak;\n\t\tcase 'AllSame' :\n\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t}\n\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\tconst from = index * infoObject.dataSize;\n\tconst to = from + infoObject.dataSize;\n\n\treturn slice( dataArray, infoObject.buffer, from, to );\n\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform( transformData ) {\n\n\tconst lTranslationM = new Matrix4();\n\tconst lPreRotationM = new Matrix4();\n\tconst lRotationM = new Matrix4();\n\tconst lPostRotationM = new Matrix4();\n\n\tconst lScalingM = new Matrix4();\n\tconst lScalingPivotM = new Matrix4();\n\tconst lScalingOffsetM = new Matrix4();\n\tconst lRotationOffsetM = new Matrix4();\n\tconst lRotationPivotM = new Matrix4();\n\n\tconst lParentGX = new Matrix4();\n\tconst lParentLX = new Matrix4();\n\tconst lGlobalT = new Matrix4();\n\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\t// For Maya models using \"Joint Orient\", Euler order only applies to rotation, not pre/post-rotations\n\tconst defaultEulerOrder = getEulerOrder( 0 );\n\n\tif ( transformData.preRotation ) {\n\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\n\t\tarray.push( defaultEulerOrder );\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.rotation ) {\n\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || defaultEulerOrder );\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.postRotation ) {\n\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\n\t\tarray.push( defaultEulerOrder );\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\t\tlPostRotationM.invert();\n\n\t}\n\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t// Pivots and offsets\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t// parent transform\n\tif ( transformData.parentMatrixWorld ) {\n\n\t\tlParentLX.copy( transformData.parentMatrix );\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\n\n\t}\n\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\n\t// Global Rotation\n\tconst lParentGRM = new Matrix4();\n\tlParentGRM.extractRotation( lParentGX );\n\n\t// Global Shear*Scaling\n\tconst lParentTM = new Matrix4();\n\tlParentTM.copyPosition( lParentGX );\n\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\n\tconst lLSM = lScalingM;\n\n\tconst lGlobalRS = new Matrix4();\n\n\tif ( inheritType === 0 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t} else if ( inheritType === 1 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t} else {\n\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t}\n\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\n\t// Calculate the local transform matrix\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\n\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\n\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\n\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\n\n\t// from global to local\n\tlTransform.premultiply( lParentGX.invert() );\n\n\treturn lTransform;\n\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder( order ) {\n\n\torder = order || 0;\n\n\tconst enums = [\n\t\t'ZYX', // -> XYZ extrinsic\n\t\t'YZX', // -> XZY extrinsic\n\t\t'XZY', // -> YZX extrinsic\n\t\t'ZXY', // -> YXZ extrinsic\n\t\t'YXZ', // -> ZXY extrinsic\n\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t];\n\n\tif ( order === 6 ) {\n\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\treturn enums[ 0 ];\n\n\t}\n\n\treturn enums[ order ];\n\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray( value ) {\n\n\tconst array = value.split( ',' ).map( function ( val ) {\n\n\t\treturn parseFloat( val );\n\n\t} );\n\n\treturn array;\n\n}\n\nfunction convertArrayBufferToString( buffer, from, to ) {\n\n\tif ( from === undefined ) from = 0;\n\tif ( to === undefined ) to = buffer.byteLength;\n\n\treturn new TextDecoder().decode( new Uint8Array( buffer, from, to ) );\n\n}\n\nfunction append( a, b ) {\n\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n}\n\nfunction slice( a, b, from, to ) {\n\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n\treturn a;\n\n}\n\n\nexport { FBXLoader };\n"],"mappings":"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","ignoreList":[]}