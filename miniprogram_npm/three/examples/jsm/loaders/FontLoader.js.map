{"version":3,"file":"node_modules/three/examples/jsm/loaders/FontLoader.js","names":["FileLoader","Loader","ShapePath","FontLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","font","parse","JSON","json","Font","data","isFont","type","generateShapes","size","shapes","paths","createPaths","p","pl","length","push","toShapes","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["node_modules/three/examples/jsm/loaders/FontLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\n/**\n * A loader for loading fonts.\n *\n * You can convert fonts online using [facetype.js]{@link https://gero3.github.io/facetype.js/}.\n *\n * ```js\n * const loader = new FontLoader();\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\n * ```\n *\n * @augments Loader\n * @three_import import { FontLoader } from 'three/addons/loaders/FontLoader.js';\n */\nclass FontLoader extends Loader {\n\n\t/**\n\t * Constructs a new font loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded font\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Font)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given font data and returns the resulting font.\n\t *\n\t * @param {Object} json - The raw font data as a JSON object.\n\t * @return {Font} The font.\n\t */\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n/**\n * Class representing a font.\n */\nclass Font {\n\n\t/**\n\t * Constructs a new font.\n\t *\n\t * @param {Object} data - The font data as JSON.\n\t */\n\tconstructor( data ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\t/**\n\t\t * The font data as JSON.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.data = data;\n\n\t}\n\n\t/**\n\t * Generates geometry shapes from the given text and size. The result of this method\n\t * should be used with {@link ShapeGeometry} to generate the actual geometry data.\n\t *\n\t * @param {string} text - The text.\n\t * @param {number} [size=100] - The text size.\n\t * @return {Array<Shape>} An array of shapes representing the text.\n\t */\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n"],"mappings":"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","ignoreList":[]}