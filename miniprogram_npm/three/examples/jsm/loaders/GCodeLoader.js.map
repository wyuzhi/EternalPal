{"version":3,"file":"node_modules/three/examples/jsm/loaders/GCodeLoader.js","names":["BufferGeometry","FileLoader","Float32BufferAttribute","Group","LineBasicMaterial","LineSegments","Loader","GCodeLoader","constructor","manager","super","this","splitLayer","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","state","x","y","z","f","extruding","relative","layers","currentLayer","pathMaterial","color","name","extrudingMaterial","newLayer","line","vertex","pathVertex","push","delta","v1","v2","absolute","lines","replace","split","i","length","tokens","cmd","toUpperCase","args","splice","forEach","token","undefined","key","toLowerCase","value","parseFloat","substring","p1","p2","addObject","geometry","setAttribute","segments","object","add","layer","layerVertex","layerPathVertex","j","rotation","set","Math","PI"],"sources":["node_modules/three/examples/jsm/loaders/GCodeLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader\n} from 'three';\n\n/**\n * A loader for the GCode format.\n *\n * GCode files are usually used for 3D printing or CNC applications.\n *\n * ```js\n * const loader = new GCodeLoader();\n * const object = await loader.loadAsync( 'models/gcode/benchy.gcode' );\n * scene.add( object );\n * ```\n *\n * @augments Loader\n * @three_import import { GCodeLoader } from 'three/addons/loaders/GCodeLoader.js';\n */\nclass GCodeLoader extends Loader {\n\n\t/**\n\t * Constructs a new GCode loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Whether to split layers or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.splitLayer = false;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded GCode asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Group)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given GCode data and returns a group with lines.\n\t *\n\t * @param {string} data - The raw Gcode data as a string.\n\t * @return {Group} The parsed GCode asset.\n\t */\n\tparse( data ) {\n\n\t\tlet state = { x: 0, y: 0, z: 0, e: 0, f: 0, extruding: false, relative: false };\n\t\tconst layers = [];\n\n\t\tlet currentLayer = undefined;\n\n\t\tconst pathMaterial = new LineBasicMaterial( { color: 0xFF0000 } );\n\t\tpathMaterial.name = 'path';\n\n\t\tconst extrudingMaterial = new LineBasicMaterial( { color: 0x00FF00 } );\n\t\textrudingMaterial.name = 'extruded';\n\n\t\tfunction newLayer( line ) {\n\n\t\t\tcurrentLayer = { vertex: [], pathVertex: [], z: line.z };\n\t\t\tlayers.push( currentLayer );\n\n\t\t}\n\n\t\t//Create lie segment between p1 and p2\n\t\tfunction addSegment( p1, p2 ) {\n\n\t\t\tif ( currentLayer === undefined ) {\n\n\t\t\t\tnewLayer( p1 );\n\n\t\t\t}\n\n\t\t\tif ( state.extruding ) {\n\n\t\t\t\tcurrentLayer.vertex.push( p1.x, p1.y, p1.z );\n\t\t\t\tcurrentLayer.vertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t} else {\n\n\t\t\t\tcurrentLayer.pathVertex.push( p1.x, p1.y, p1.z );\n\t\t\t\tcurrentLayer.pathVertex.push( p2.x, p2.y, p2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction delta( v1, v2 ) {\n\n\t\t\treturn state.relative ? v2 : v2 - v1;\n\n\t\t}\n\n\t\tfunction absolute( v1, v2 ) {\n\n\t\t\treturn state.relative ? v1 + v2 : v2;\n\n\t\t}\n\n\t\tconst lines = data.replace( /;.+/g, '' ).split( '\\n' );\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tconst tokens = lines[ i ].split( ' ' );\n\t\t\tconst cmd = tokens[ 0 ].toUpperCase();\n\n\t\t\t//Arguments\n\t\t\tconst args = {};\n\t\t\ttokens.splice( 1 ).forEach( function ( token ) {\n\n\t\t\t\tif ( token[ 0 ] !== undefined ) {\n\n\t\t\t\t\tconst key = token[ 0 ].toLowerCase();\n\t\t\t\t\tconst value = parseFloat( token.substring( 1 ) );\n\t\t\t\t\targs[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t//Process commands\n\t\t\t//G0/G1 â€“ Linear Movement\n\t\t\tif ( cmd === 'G0' || cmd === 'G1' ) {\n\n\t\t\t\tconst line = {\n\t\t\t\t\tx: args.x !== undefined ? absolute( state.x, args.x ) : state.x,\n\t\t\t\t\ty: args.y !== undefined ? absolute( state.y, args.y ) : state.y,\n\t\t\t\t\tz: args.z !== undefined ? absolute( state.z, args.z ) : state.z,\n\t\t\t\t\te: args.e !== undefined ? absolute( state.e, args.e ) : state.e,\n\t\t\t\t\tf: args.f !== undefined ? absolute( state.f, args.f ) : state.f,\n\t\t\t\t};\n\n\t\t\t\t//Layer change detection is or made by watching Z, it's made by watching when we extrude at a new Z position\n\t\t\t\tif ( delta( state.e, line.e ) > 0 ) {\n\n\t\t\t\t\tstate.extruding = delta( state.e, line.e ) > 0;\n\n\t\t\t\t\tif ( currentLayer == undefined || line.z != currentLayer.z ) {\n\n\t\t\t\t\t\tnewLayer( line );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\taddSegment( state, line );\n\t\t\t\tstate = line;\n\n\t\t\t} else if ( cmd === 'G2' || cmd === 'G3' ) {\n\n\t\t\t\t//G2/G3 - Arc Movement ( G2 clock wise and G3 counter clock wise )\n\t\t\t\t//console.warn( 'THREE.GCodeLoader: Arc command not supported' );\n\n\t\t\t} else if ( cmd === 'G90' ) {\n\n\t\t\t\t//G90: Set to Absolute Positioning\n\t\t\t\tstate.relative = false;\n\n\t\t\t} else if ( cmd === 'G91' ) {\n\n\t\t\t\t//G91: Set to state.relative Positioning\n\t\t\t\tstate.relative = true;\n\n\t\t\t} else if ( cmd === 'G92' ) {\n\n\t\t\t\t//G92: Set Position\n\t\t\t\tconst line = state;\n\t\t\t\tline.x = args.x !== undefined ? args.x : line.x;\n\t\t\t\tline.y = args.y !== undefined ? args.y : line.y;\n\t\t\t\tline.z = args.z !== undefined ? args.z : line.z;\n\t\t\t\tline.e = args.e !== undefined ? args.e : line.e;\n\n\t\t\t} else {\n\n\t\t\t\t//console.warn( 'THREE.GCodeLoader: Command not supported:' + cmd );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addObject( vertex, extruding, i ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertex, 3 ) );\n\t\t\tconst segments = new LineSegments( geometry, extruding ? extrudingMaterial : pathMaterial );\n\t\t\tsegments.name = 'layer' + i;\n\t\t\tobject.add( segments );\n\n\t\t}\n\n\t\tconst object = new Group();\n\t\tobject.name = 'gcode';\n\n\t\tif ( this.splitLayer ) {\n\n\t\t\tfor ( let i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\tconst layer = layers[ i ];\n\t\t\t\taddObject( layer.vertex, true, i );\n\t\t\t\taddObject( layer.pathVertex, false, i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst vertex = [],\n\t\t\t\tpathVertex = [];\n\n\t\t\tfor ( let i = 0; i < layers.length; i ++ ) {\n\n\t\t\t\tconst layer = layers[ i ];\n\t\t\t\tconst layerVertex = layer.vertex;\n\t\t\t\tconst layerPathVertex = layer.pathVertex;\n\n\t\t\t\tfor ( let j = 0; j < layerVertex.length; j ++ ) {\n\n\t\t\t\t\tvertex.push( layerVertex[ j ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < layerPathVertex.length; j ++ ) {\n\n\t\t\t\t\tpathVertex.push( layerPathVertex[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\taddObject( vertex, true, layers.length );\n\t\t\taddObject( pathVertex, false, layers.length );\n\n\t\t}\n\n\t\tobject.rotation.set( - Math.PI / 2, 0, 0 );\n\n\t\treturn object;\n\n\t}\n\n}\n\nexport { GCodeLoader };\n"],"mappings":"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","ignoreList":[]}