{"version":3,"file":"node_modules/three/examples/jsm/loaders/IESLoader.js","names":["DataTexture","FileLoader","FloatType","RedFormat","MathUtils","Loader","UnsignedByteType","LinearFilter","HalfFloatType","DataUtils","IESLoader","constructor","manager","super","this","type","_getIESValues","iesLamp","data","Array","width","interpolateCandelaValues","phi","theta","phiIndex","thetaIndex","startTheta","endTheta","startPhi","endPhi","i","numHorAngles","horAngles","numVerAngles","verAngles","deltaTheta","deltaPhi","t1","t2","nextThetaIndex","v1","lerp","candelaValues","v2","Math","floor","result","Uint8Array","from","map","v","min","Uint16Array","toHalfFloat","Float32Array","console","error","load","url","onLoad","onProgress","onError","loader","setResponseType","setCrossOrigin","crossOrigin","setWithCredentials","withCredentials","setPath","path","setRequestHeader","requestHeader","text","parse","IESLamp","texture","minFilter","magFilter","needsUpdate","_self","textArray","split","line","lineNumber","textToArray","replace","readArray","count","array","lineData","length","push","Number","tiltData","angles","mulFactors","includes","lampToLumGeometry","numAngles","readTilt","values","lumens","multiplier","gonioType","units","height","readLampValues","ballFactor","blpFactor","inputWatts","readLampFactors","j","maxVal","value"],"sources":["node_modules/three/examples/jsm/loaders/IESLoader.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tRedFormat,\n\tMathUtils,\n\tLoader,\n\tUnsignedByteType,\n\tLinearFilter,\n\tHalfFloatType,\n\tDataUtils\n} from 'three';\n\n/**\n * A loader for the IES format.\n *\n * The loaded texture should be assigned to {@link IESSpotLight#map}.\n *\n * ```js\n * const loader = new IESLoader();\n * const texture = await loader.loadAsync( 'ies/007cfb11e343e2f42e3b476be4ab684e.ies' );\n *\n * const spotLight = new THREE.IESSpotLight( 0xff0000, 500 );\n * spotLight.iesMap = texture;\n * ```\n *\n * @augments Loader\n * @three_import import { IESLoader } from 'three/addons/loaders/IESLoader.js';\n */\nclass IESLoader extends Loader {\n\n\t/**\n\t * Constructs a new IES loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(HalfFloatType|FloatType)}\n\t\t * @default HalfFloatType\n\t\t */\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t_getIESValues( iesLamp, type ) {\n\n\t\tconst width = 360;\n\t\tconst height = 180;\n\t\tconst size = width * height;\n\n\t\tconst data = new Array( size );\n\n\t\tfunction interpolateCandelaValues( phi, theta ) {\n\n\t\t\tlet phiIndex = 0, thetaIndex = 0;\n\t\t\tlet startTheta = 0, endTheta = 0, startPhi = 0, endPhi = 0;\n\n\t\t\tfor ( let i = 0; i < iesLamp.numHorAngles - 1; ++ i ) { // numHorAngles = horAngles.length-1 because of extra padding, so this wont cause an out of bounds error\n\n\t\t\t\tif ( theta < iesLamp.horAngles[ i + 1 ] || i == iesLamp.numHorAngles - 2 ) {\n\n\t\t\t\t\tthetaIndex = i;\n\t\t\t\t\tstartTheta = iesLamp.horAngles[ i ];\n\t\t\t\t\tendTheta = iesLamp.horAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < iesLamp.numVerAngles - 1; ++ i ) {\n\n\t\t\t\tif ( phi < iesLamp.verAngles[ i + 1 ] || i == iesLamp.numVerAngles - 2 ) {\n\n\t\t\t\t\tphiIndex = i;\n\t\t\t\t\tstartPhi = iesLamp.verAngles[ i ];\n\t\t\t\t\tendPhi = iesLamp.verAngles[ i + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst deltaTheta = endTheta - startTheta;\n\t\t\tconst deltaPhi = endPhi - startPhi;\n\n\t\t\tif ( deltaPhi === 0 ) // Outside range\n\t\t\t\treturn 0;\n\n\t\t\tconst t1 = deltaTheta === 0 ? 0 : ( theta - startTheta ) / deltaTheta;\n\t\t\tconst t2 = ( phi - startPhi ) / deltaPhi;\n\n\t\t\tconst nextThetaIndex = deltaTheta === 0 ? thetaIndex : thetaIndex + 1;\n\n\t\t\tconst v1 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex ], t1 );\n\t\t\tconst v2 = MathUtils.lerp( iesLamp.candelaValues[ thetaIndex ][ phiIndex + 1 ], iesLamp.candelaValues[ nextThetaIndex ][ phiIndex + 1 ], t1 );\n\t\t\tconst v = MathUtils.lerp( v1, v2, t2 );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t\tconst startTheta = iesLamp.horAngles[ 0 ], endTheta = iesLamp.horAngles[ iesLamp.numHorAngles - 1 ];\n\n\t\tfor ( let i = 0; i < size; ++ i ) {\n\n\t\t\tlet theta = i % width;\n\t\t\tconst phi = Math.floor( i / width );\n\n\t\t\tif ( endTheta - startTheta !== 0 && ( theta < startTheta || theta >= endTheta ) ) { // Handle symmetry for hor angles\n\n\t\t\t\ttheta %= endTheta * 2;\n\n\t\t\t\tif ( theta > endTheta )\n\t\t\t\t\ttheta = endTheta * 2 - theta;\n\n\t\t\t}\n\n\t\t\tdata[ phi + theta * height ] = interpolateCandelaValues( phi, theta );\n\n\t\t}\n\n\t\tlet result = null;\n\n\t\tif ( type === UnsignedByteType ) result = Uint8Array.from( data.map( v => Math.min( v * 0xFF, 0xFF ) ) );\n\t\telse if ( type === HalfFloatType ) result = Uint16Array.from( data.map( v => DataUtils.toHalfFloat( v ) ) );\n\t\telse if ( type === FloatType ) result = Float32Array.from( data );\n\t\telse console.error( 'IESLoader: Unsupported type:', type );\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded IES texture\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tloader.load( url, text => {\n\n\t\t\tonLoad( this.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given IES data.\n\t *\n\t * @param {string} text - The raw IES data.\n\t * @return {DataTexture} THE IES data as a texture.\n\t */\n\tparse( text ) {\n\n\t\tconst type = this.type;\n\n\t\tconst iesLamp = new IESLamp( text );\n\t\tconst data = this._getIESValues( iesLamp, type );\n\n\t\tconst texture = new DataTexture( data, 180, 1, RedFormat, type );\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n}\n\n\nfunction IESLamp( text ) {\n\n\tconst _self = this;\n\n\tconst textArray = text.split( '\\n' );\n\n\tlet lineNumber = 0;\n\tlet line;\n\n\t_self.verAngles = [ ];\n\t_self.horAngles = [ ];\n\n\t_self.candelaValues = [ ];\n\n\t_self.tiltData = { };\n\t_self.tiltData.angles = [ ];\n\t_self.tiltData.mulFactors = [ ];\n\n\tfunction textToArray( text ) {\n\n\t\ttext = text.replace( /^\\s+|\\s+$/g, '' ); // remove leading or trailing spaces\n\t\ttext = text.replace( /,/g, ' ' ); // replace commas with spaces\n\t\ttext = text.replace( /\\s\\s+/g, ' ' ); // replace white space/tabs etc by single whitespace\n\n\t\tconst array = text.split( ' ' );\n\n\t\treturn array;\n\n\t}\n\n\tfunction readArray( count, array ) {\n\n\t\twhile ( true ) {\n\n\t\t\tconst line = textArray[ lineNumber ++ ];\n\t\t\tconst lineData = textToArray( line );\n\n\t\t\tfor ( let i = 0; i < lineData.length; ++ i ) {\n\n\t\t\t\tarray.push( Number( lineData[ i ] ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length === count )\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction readTilt() {\n\n\t\tlet line = textArray[ lineNumber ++ ];\n\t\tlet lineData = textToArray( line );\n\n\t\t_self.tiltData.lampToLumGeometry = Number( lineData[ 0 ] );\n\n\t\tline = textArray[ lineNumber ++ ];\n\t\tlineData = textToArray( line );\n\n\t\t_self.tiltData.numAngles = Number( lineData[ 0 ] );\n\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.angles );\n\t\treadArray( _self.tiltData.numAngles, _self.tiltData.mulFactors );\n\n\t}\n\n\tfunction readLampValues() {\n\n\t\tconst values = [ ];\n\t\treadArray( 10, values );\n\n\t\t_self.count = Number( values[ 0 ] );\n\t\t_self.lumens = Number( values[ 1 ] );\n\t\t_self.multiplier = Number( values[ 2 ] );\n\t\t_self.numVerAngles = Number( values[ 3 ] );\n\t\t_self.numHorAngles = Number( values[ 4 ] );\n\t\t_self.gonioType = Number( values[ 5 ] );\n\t\t_self.units = Number( values[ 6 ] );\n\t\t_self.width = Number( values[ 7 ] );\n\t\t_self.length = Number( values[ 8 ] );\n\t\t_self.height = Number( values[ 9 ] );\n\n\t}\n\n\tfunction readLampFactors() {\n\n\t\tconst values = [ ];\n\t\treadArray( 3, values );\n\n\t\t_self.ballFactor = Number( values[ 0 ] );\n\t\t_self.blpFactor = Number( values[ 1 ] );\n\t\t_self.inputWatts = Number( values[ 2 ] );\n\n\t}\n\n\twhile ( true ) {\n\n\t\tline = textArray[ lineNumber ++ ];\n\n\t\tif ( line.includes( 'TILT' ) ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tif ( ! line.includes( 'NONE' ) ) {\n\n\t\tif ( line.includes( 'INCLUDE' ) ) {\n\n\t\t\treadTilt();\n\n\t\t} else {\n\n\t\t\t// TODO:: Read tilt data from a file\n\n\t\t}\n\n\t}\n\n\treadLampValues();\n\n\treadLampFactors();\n\n\t// Initialize candela value array\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t_self.candelaValues.push( [ ] );\n\n\t}\n\n\t// Parse Angles\n\treadArray( _self.numVerAngles, _self.verAngles );\n\treadArray( _self.numHorAngles, _self.horAngles );\n\n\t// Parse Candela values\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\treadArray( _self.numVerAngles, _self.candelaValues[ i ] );\n\n\t}\n\n\t// Calculate actual candela values, and normalize.\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t_self.candelaValues[ i ][ j ] *= _self.candelaValues[ i ][ j ] * _self.multiplier\n\t\t\t\t* _self.ballFactor * _self.blpFactor;\n\n\t\t}\n\n\t}\n\n\tlet maxVal = - 1;\n\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\tconst value = _self.candelaValues[ i ][ j ];\n\t\t\tmaxVal = maxVal < value ? value : maxVal;\n\n\t\t}\n\n\t}\n\n\tconst bNormalize = true;\n\tif ( bNormalize && maxVal > 0 ) {\n\n\t\tfor ( let i = 0; i < _self.numHorAngles; ++ i ) {\n\n\t\t\tfor ( let j = 0; j < _self.numVerAngles; ++ j ) {\n\n\t\t\t\t_self.candelaValues[ i ][ j ] /= maxVal;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { IESLoader };\n"],"mappings":"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","ignoreList":[]}