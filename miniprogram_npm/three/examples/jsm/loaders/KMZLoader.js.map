{"version":3,"file":"node_modules/three/examples/jsm/loaders/KMZLoader.js","names":["FileLoader","Group","Loader","LoadingManager","ColladaLoader","fflate","KMZLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","setURLModifier","image","zip","slice","length","findFile","log","blob","Blob","buffer","type","URL","createObjectURL","unzipSync","Uint8Array","model","DOMParser","parseFromString","strFromU8","querySelector","textContent","warn","split","pop","toLowerCase","scene"],"sources":["node_modules/three/examples/jsm/loaders/KMZLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tGroup,\n\tLoader,\n\tLoadingManager\n} from 'three';\nimport { ColladaLoader } from '../loaders/ColladaLoader.js';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n * A loader for the KMZ format.\n *\n * ```js\n * const loader = new KMZLoader();\n * const kmz = await loader.loadAsync( './models/kmz/Box.kmz' );\n *\n * scene.add( kmz.scene );\n * ```\n *\n * @augments Loader\n * @three_import import { KMZLoader } from 'three/addons/loaders/KMZLoader.js';\n */\nclass KMZLoader extends Loader {\n\n\t/**\n\t * Constructs a new KMZ loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded KMZ asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function({scene:Group})} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given KMZ data and returns an object holding the scene.\n\t *\n\t * @param {ArrayBuffer} data - The raw KMZ data as an array buffer.\n\t * @return {{scene:Group}} The parsed KMZ asset.\n\t */\n\tparse( data ) {\n\n\t\tfunction findFile( url ) {\n\n\t\t\tfor ( const path in zip ) {\n\n\t\t\t\tif ( path.slice( - url.length ) === url ) {\n\n\t\t\t\t\treturn zip[ path ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst manager = new LoadingManager();\n\t\tmanager.setURLModifier( function ( url ) {\n\n\t\t\tconst image = findFile( url );\n\n\t\t\tif ( image ) {\n\n\t\t\t\tconsole.log( 'Loading', url );\n\n\t\t\t\tconst blob = new Blob( [ image.buffer ], { type: 'application/octet-stream' } );\n\t\t\t\treturn URL.createObjectURL( blob );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t} );\n\n\t\t//\n\n\t\tconst zip = fflate.unzipSync( new Uint8Array( data ) );\n\n\t\tif ( zip[ 'doc.kml' ] ) {\n\n\t\t\tconst xml = new DOMParser().parseFromString( fflate.strFromU8( zip[ 'doc.kml' ] ), 'application/xml' );\n\n\t\t\tconst model = xml.querySelector( 'Placemark Model Link href' );\n\n\t\t\tif ( model ) {\n\n\t\t\t\tconst loader = new ColladaLoader( manager );\n\t\t\t\treturn loader.parse( fflate.strFromU8( zip[ model.textContent ] ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'KMZLoader: Missing doc.kml file.' );\n\n\t\t\tfor ( const path in zip ) {\n\n\t\t\t\tconst extension = path.split( '.' ).pop().toLowerCase();\n\n\t\t\t\tif ( extension === 'dae' ) {\n\n\t\t\t\t\tconst loader = new ColladaLoader( manager );\n\t\t\t\t\treturn loader.parse( fflate.strFromU8( zip[ path ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'KMZLoader: Couldn\\'t find .dae file.' );\n\t\treturn { scene: new Group() };\n\n\t}\n\n}\n\nexport { KMZLoader };\n"],"mappings":"OACCA,WACAC,MACAC,OACAC,mBACM,eACEC,kBAAqB,wCAClBC,WAAY,2BAexB,MAAMC,kBAAkBJ,OAOvB,WAAAK,CAAaC,GAEZC,MAAOD,EAER,CAWA,IAAAE,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAQC,KAERC,EAAS,IAAIjB,WAAYe,EAAMP,SACrCS,EAAOC,QAASH,EAAMI,MACtBF,EAAOG,gBAAiB,eACxBH,EAAOI,iBAAkBN,EAAMO,eAC/BL,EAAOM,mBAAoBR,EAAMS,iBACjCP,EAAOP,KAAMC,GAAK,SAAWc,GAE5B,IAECb,EAAQG,EAAMW,MAAOD,GAEtB,CAAE,MAAQE,GAEJb,EAEJA,EAASa,GAITC,QAAQC,MAAOF,GAIhBZ,EAAMP,QAAQsB,UAAWnB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,CAQA,KAAAY,CAAOK,GAgBN,MAAMvB,EAAU,IAAIL,eACpBK,EAAQwB,gBAAgB,SAAWrB,GAElC,MAAMsB,EAjBP,SAAmBtB,GAElB,IAAM,MAAMQ,KAAQe,EAEnB,GAAKf,EAAKgB,OAASxB,EAAIyB,UAAazB,EAEnC,OAAOuB,EAAKf,EAMf,CAKekB,CAAU1B,GAExB,GAAKsB,EAAQ,CAEZL,QAAQU,IAAK,UAAW3B,GAExB,MAAM4B,EAAO,IAAIC,KAAM,CAAEP,EAAMQ,QAAU,CAAEC,KAAM,6BACjD,OAAOC,IAAIC,gBAAiBL,EAE7B,CAEA,OAAO5B,CAER,IAIA,MAAMuB,EAAM7B,OAAOwC,UAAW,IAAIC,WAAYf,IAE9C,GAAKG,EAAK,WAAc,CAEvB,MAEMa,GAFM,IAAIC,WAAYC,gBAAiB5C,OAAO6C,UAAWhB,EAAK,YAAe,mBAEjEiB,cAAe,6BAEjC,GAAKJ,EAAQ,CAGZ,OADe,IAAI3C,cAAeI,GACpBkB,MAAOrB,OAAO6C,UAAWhB,EAAKa,EAAMK,cAEnD,CAED,KAAO,CAENxB,QAAQyB,KAAM,oCAEd,IAAM,MAAMlC,KAAQe,EAAM,CAIzB,GAAmB,QAFDf,EAAKmC,MAAO,KAAMC,MAAMC,cAEf,CAG1B,OADe,IAAIpD,cAAeI,GACpBkB,MAAOrB,OAAO6C,UAAWhB,EAAKf,IAE7C,CAED,CAED,CAGA,OADAS,QAAQC,MAAO,uCACR,CAAE4B,MAAO,IAAIxD,MAErB,SAIQK","ignoreList":[]}