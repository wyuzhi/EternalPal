{"version":3,"file":"node_modules/three/examples/jsm/loaders/KTX2Loader.js","names":["CompressedArrayTexture","CompressedCubeTexture","CompressedTexture","Data3DTexture","DataTexture","FileLoader","FloatType","HalfFloatType","LinearFilter","LinearMipmapLinearFilter","LinearSRGBColorSpace","Loader","NoColorSpace","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_ASTC_6x6_Format","RGBA_BPTC_Format","RGBA_S3TC_DXT3_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT5_Format","RGB_BPTC_UNSIGNED_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","RGFormat","RedFormat","SRGBColorSpace","UnsignedByteType","WorkerPool","read","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_TRANSFER_SRGB","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_4x4_SRGB_BLOCK","VK_FORMAT_ASTC_4x4_UNORM_BLOCK","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","VK_FORMAT_BC1_RGBA_SRGB_BLOCK","VK_FORMAT_BC1_RGBA_UNORM_BLOCK","VK_FORMAT_BC1_RGB_SRGB_BLOCK","VK_FORMAT_BC1_RGB_UNORM_BLOCK","VK_FORMAT_BC3_SRGB_BLOCK","VK_FORMAT_BC3_UNORM_BLOCK","VK_FORMAT_BC5_SNORM_BLOCK","VK_FORMAT_BC5_UNORM_BLOCK","VK_FORMAT_BC7_SRGB_BLOCK","VK_FORMAT_BC7_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","VK_FORMAT_UNDEFINED","ZSTDDecoder","DisplayP3ColorSpace","LinearDisplayP3ColorSpace","_taskCache","WeakMap","_zstd","_activeLoaders","KTX2Loader","constructor","manager","super","this","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","workerLimit","detectSupportAsync","renderer","astcSupported","hasFeatureAsync","astcHDRSupported","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","detectSupport","isWebGPURenderer","hasFeature","extensions","has","get","getSupportedProfiles","includes","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","EngineType","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","setCrossOrigin","crossOrigin","buffer","parse","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","messageType","error","data","faces","width","height","format","dfdFlags","reject","faceCount","mipmaps","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","parseColorSpace","premultiplyAlpha","Uint8Array","isBasisHDR","vkFormat","dataFormatDescriptor","colorModel","createRawTexture","taskConfig","texturePending","e","set","dispose","revokeObjectURL","ETC1S","UASTC","UASTC_HDR","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BC6H","RGB_HALF","RGBA_HALF","BasisModule","_EngineFormat","_EngineType","_TranscoderFormat","_BasisFormat","self","addEventListener","message","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","undefined","KTX2File","buffers","hasAlpha","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","isETC1S","isHDR","getWidth","getHeight","getLayers","levelCount","getLevels","getFaces","getHasAlpha","getDFDFlags","transcoderFormat","engineFormat","engineType","options","OPTIONS","i","opt","if","needsPowerOfTwo","isPowerOfTwo","getTranscoderFormat","startTranscoding","face","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","Uint16Array","byteOffset","byteLength","BYTES_PER_ELEMENT","push","mipData","concat","transcode","id","FORMAT_OPTIONS","priorityETC1S","Infinity","priorityUASTC","priorityHDR","filter","sort","a","b","value","arrays","totalByteLength","result","array","UNCOMPRESSED_FORMATS","Set","FORMAT_MAP","TYPE_MAP","async","zstd","supercompressionScheme","levelIndex","levels","levelWidth","Math","max","pixelWidth","levelHeight","pixelHeight","levelDepth","pixelDepth","level","levelData","decode","uncompressedByteLength","Float32Array","depth","dfd","colorPrimaries","transferFunction"],"sources":["node_modules/three/examples/jsm/loaders/KTX2Loader.js"],"sourcesContent":["import {\n\tCompressedArrayTexture,\n\tCompressedCubeTexture,\n\tCompressedTexture,\n\tData3DTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearSRGBColorSpace,\n\tLoader,\n\tNoColorSpace,\n\tRGBAFormat,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_ASTC_6x6_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_S3TC_DXT3_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGB_BPTC_UNSIGNED_Format,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tRGFormat,\n\tRedFormat,\n\tSRGBColorSpace,\n\tUnsignedByteType\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport {\n\tread,\n\tKHR_DF_FLAG_ALPHA_PREMULTIPLIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_PRIMARIES_DISPLAYP3,\n\tKHR_DF_PRIMARIES_UNSPECIFIED,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tKHR_SUPERCOMPRESSION_ZSTD,\n\tVK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,\n\tVK_FORMAT_ASTC_4x4_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_4x4_UNORM_BLOCK,\n\tVK_FORMAT_ASTC_6x6_SRGB_BLOCK,\n\tVK_FORMAT_ASTC_6x6_UNORM_BLOCK,\n\tVK_FORMAT_BC1_RGBA_SRGB_BLOCK,\n\tVK_FORMAT_BC1_RGBA_UNORM_BLOCK,\n\tVK_FORMAT_BC1_RGB_SRGB_BLOCK,\n\tVK_FORMAT_BC1_RGB_UNORM_BLOCK,\n\tVK_FORMAT_BC3_SRGB_BLOCK,\n\tVK_FORMAT_BC3_UNORM_BLOCK,\n\tVK_FORMAT_BC5_SNORM_BLOCK,\n\tVK_FORMAT_BC5_UNORM_BLOCK,\n\tVK_FORMAT_BC7_SRGB_BLOCK,\n\tVK_FORMAT_BC7_UNORM_BLOCK,\n\tVK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,\n\tVK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,\n\tVK_FORMAT_R16G16B16A16_SFLOAT,\n\tVK_FORMAT_R16G16_SFLOAT,\n\tVK_FORMAT_R16_SFLOAT,\n\tVK_FORMAT_R32G32B32A32_SFLOAT,\n\tVK_FORMAT_R32G32_SFLOAT,\n\tVK_FORMAT_R32_SFLOAT,\n\tVK_FORMAT_R8G8B8A8_SRGB,\n\tVK_FORMAT_R8G8B8A8_UNORM,\n\tVK_FORMAT_R8G8_SRGB,\n\tVK_FORMAT_R8G8_UNORM,\n\tVK_FORMAT_R8_SRGB,\n\tVK_FORMAT_R8_UNORM,\n\tVK_FORMAT_UNDEFINED\n} from '../libs/ktx-parse.module.js';\nimport { ZSTDDecoder } from '../libs/zstddec.module.js';\nimport { DisplayP3ColorSpace, LinearDisplayP3ColorSpace } from '../math/ColorSpaces.js';\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\n/**\n * A loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader supports Basis Universal GPU textures,\n * which can be quickly transcoded to a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and transcodes to a supported GPU compressed texture format.\n * The required WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n *\n * This loader relies on Web Assembly which is not supported in older browsers.\n *\n * References:\n * - [KTX specification]{@link http://github.khronos.org/KTX-Specification/}\n * - [DFD]{@link https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor}\n * - [BasisU HDR]{@link https://github.com/BinomialLLC/basis_universal/wiki/UASTC-HDR-Texture-Specification-v1.0}\n *\n * ```js\n * const loader = new KTX2Loader();\n * loader.setTranscoderPath( 'examples/jsm/libs/basis/' );\n * loader.detectSupport( renderer );\n * const texture = loader.loadAsync( 'diffuse.ktx2' );\n * ```\n *\n * @augments Loader\n * @three_import import { KTX2Loader } from 'three/addons/loaders/KTX2Loader.js';\n */\nclass KTX2Loader extends Loader {\n\n\t/**\n\t * Constructs a new KTX2 loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the transcoder path.\n\t *\n\t * The WASM transcoder and JS wrapper are available from the `examples/jsm/libs/basis` directory.\n\t *\n\t * @param {string} path - The transcoder path to set.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum number of Web Workers to be allocated by this instance.\n\t *\n\t * @param {number} workerLimit - The worker limit.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerPool.setWorkerLimit( workerLimit );\n\n\t\treturn this;\n\n\t}\n\n\n\t/**\n\t * Async version of {@link KTX2Loader#detectSupport}.\n\t *\n\t * @async\n\t * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the support has been detected.\n\t */\n\tasync detectSupportAsync( renderer ) {\n\n\t\tthis.workerConfig = {\n\t\t\tastcSupported: await renderer.hasFeatureAsync( 'texture-compression-astc' ),\n\t\t\tastcHDRSupported: false, // https://github.com/gpuweb/gpuweb/issues/3856\n\t\t\tetc1Supported: await renderer.hasFeatureAsync( 'texture-compression-etc1' ),\n\t\t\tetc2Supported: await renderer.hasFeatureAsync( 'texture-compression-etc2' ),\n\t\t\tdxtSupported: await renderer.hasFeatureAsync( 'texture-compression-bc' ),\n\t\t\tbptcSupported: await renderer.hasFeatureAsync( 'texture-compression-bptc' ),\n\t\t\tpvrtcSupported: await renderer.hasFeatureAsync( 'texture-compression-pvrtc' )\n\t\t};\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Detects hardware support for available compressed texture formats, to determine\n\t * the output format for the transcoder. Must be called before loading a texture.\n\t *\n\t * @param {WebGPURenderer|WebGLRenderer} renderer - The renderer.\n\t * @return {KTX2Loader} A reference to this loader.\n\t */\n\tdetectSupport( renderer ) {\n\n\t\tif ( renderer.isWebGPURenderer === true ) {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.hasFeature( 'texture-compression-astc' ),\n\t\t\t\tastcHDRSupported: false, // https://github.com/gpuweb/gpuweb/issues/3856\n\t\t\t\tetc1Supported: renderer.hasFeature( 'texture-compression-etc1' ),\n\t\t\t\tetc2Supported: renderer.hasFeature( 'texture-compression-etc2' ),\n\t\t\t\tdxtSupported: renderer.hasFeature( 'texture-compression-bc' ),\n\t\t\t\tbptcSupported: renderer.hasFeature( 'texture-compression-bptc' ),\n\t\t\t\tpvrtcSupported: renderer.hasFeature( 'texture-compression-pvrtc' )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tthis.workerConfig = {\n\t\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\t\tastcHDRSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' )\n\t\t\t\t\t&& renderer.extensions.get( 'WEBGL_compressed_texture_astc' ).getSupportedProfiles().includes( 'hdr' ),\n\t\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t\t};\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// TODO: Make this method private\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _EngineType = ' + JSON.stringify( KTX2Loader.EngineType ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded KTX2 texture\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given KTX2 data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw KTX2 data as an array buffer.\n\t * @param {function(CompressedTexture)} onLoad - Executed when the loading/parsing process has been finished.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @returns {Promise} A Promise that resolves when the parsing has been finished.\n\t */\n\tparse( buffer, onLoad, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t}\n\n\t\tthis._createTexture( buffer )\n\t\t\t.then( ( texture ) => onLoad ? onLoad( texture ) : null )\n\t\t\t.catch( onError );\n\n\t}\n\n\t_createTextureFrom( transcodeResult, container ) {\n\n\t\tconst { type: messageType, error, data: { faces, width, height, format, type, dfdFlags } } = transcodeResult;\n\n\t\tif ( messageType === 'error' ) return Promise.reject( error );\n\n\t\tlet texture;\n\n\t\tif ( container.faceCount === 6 ) {\n\n\t\t\ttexture = new CompressedCubeTexture( faces, format, type );\n\n\t\t} else {\n\n\t\t\tconst mipmaps = faces[ 0 ].mipmaps;\n\n\t\t\ttexture = container.layerCount > 1\n\t\t\t\t? new CompressedArrayTexture( mipmaps, width, height, container.layerCount, format, type )\n\t\t\t\t: new CompressedTexture( mipmaps, width, height, format, type );\n\n\t\t}\n\n\t\ttexture.minFilter = faces[ 0 ].mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\n\t\ttexture.needsUpdate = true;\n\t\ttexture.colorSpace = parseColorSpace( container );\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @private\n\t * @param {ArrayBuffer} buffer\n\t * @param {?Object} config\n\t * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n\t */\n\tasync _createTexture( buffer, config = {} ) {\n\n\t\tconst container = read( new Uint8Array( buffer ) );\n\n\t\t// Basis UASTC HDR is a subset of ASTC, which can be transcoded efficiently\n\t\t// to BC6H. To detect whether a KTX2 file uses Basis UASTC HDR, or default\n\t\t// ASTC, inspect the DFD color model.\n\t\t//\n\t\t// Source: https://github.com/BinomialLLC/basis_universal/issues/381\n\t\tconst isBasisHDR = container.vkFormat === VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT\n\t\t\t&& container.dataFormatDescriptor[ 0 ].colorModel === 0xA7;\n\n\t\t// If the device supports ASTC, Basis UASTC HDR requires no transcoder.\n\t\tconst needsTranscoder = container.vkFormat === VK_FORMAT_UNDEFINED\n\t\t\t|| isBasisHDR && ! this.workerConfig.astcHDRSupported;\n\n\t\tif ( ! needsTranscoder ) {\n\n\t\t\treturn createRawTexture( container );\n\n\t\t}\n\n\t\t//\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffer, taskConfig: taskConfig }, [ buffer ] );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data, container ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\t/**\n\t * Frees internal resources. This method should be called\n\t * when the loader is no longer required.\n\t */\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC: 1,\n\tUASTC_HDR: 2,\n};\n\n// Source: https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture_test/index.html\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n\tBC6H: 22,\n\tRGB_HALF: 24,\n\tRGBA_HALF: 25,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGB_BPTC_UNSIGNED_Format: RGB_BPTC_UNSIGNED_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT1_Format: RGBA_S3TC_DXT1_Format,\n};\n\nKTX2Loader.EngineType = {\n\tUnsignedByteType: UnsignedByteType,\n\tHalfFloatType: HalfFloatType,\n\tFloatType: FloatType,\n};\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst EngineType = _EngineType; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { faces, buffers, width, height, hasAlpha, format, type, dfdFlags } = transcode( message.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, data: { faces, width, height, hasAlpha, format, type, dfdFlags } }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tlet basisFormat;\n\n\t\tif ( ktx2File.isUASTC() ) {\n\n\t\t\tbasisFormat = BasisFormat.UASTC;\n\n\t\t} else if ( ktx2File.isETC1S() ) {\n\n\t\t\tbasisFormat = BasisFormat.ETC1S;\n\n\t\t} else if ( ktx2File.isHDR() ) {\n\n\t\t\tbasisFormat = BasisFormat.UASTC_HDR;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Unknown Basis encoding' );\n\n\t\t}\n\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst layerCount = ktx2File.getLayers() || 1;\n\t\tconst levelCount = ktx2File.getLevels();\n\t\tconst faceCount = ktx2File.getFaces();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat, engineType } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levelCount ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst faces = [];\n\t\tconst buffers = [];\n\n\t\tfor ( let face = 0; face < faceCount; face ++ ) {\n\n\t\t\tconst mipmaps = [];\n\n\t\t\tfor ( let mip = 0; mip < levelCount; mip ++ ) {\n\n\t\t\t\tconst layerMips = [];\n\n\t\t\t\tlet mipWidth, mipHeight;\n\n\t\t\t\tfor ( let layer = 0; layer < layerCount; layer ++ ) {\n\n\t\t\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, layer, face );\n\n\t\t\t\t\tif ( face === 0 && mip === 0 && layer === 0 && ( levelInfo.origWidth % 4 !== 0 || levelInfo.origHeight % 4 !== 0 ) ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( levelCount > 1 ) {\n\n\t\t\t\t\t\tmipWidth = levelInfo.origWidth;\n\t\t\t\t\t\tmipHeight = levelInfo.origHeight;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Handles non-multiple-of-four dimensions in textures without mipmaps. Textures with\n\t\t\t\t\t\t// mipmaps must use multiple-of-four dimensions, for some texture formats and APIs.\n\t\t\t\t\t\t// See mrdoob/three.js#25908.\n\t\t\t\t\t\tmipWidth = levelInfo.width;\n\t\t\t\t\t\tmipHeight = levelInfo.height;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, layer, 0, transcoderFormat ) );\n\t\t\t\t\tconst status = ktx2File.transcodeImage( dst, mip, layer, face, transcoderFormat, 0, - 1, - 1 );\n\n\t\t\t\t\tif ( engineType === EngineType.HalfFloatType ) {\n\n\t\t\t\t\t\tdst = new Uint16Array( dst.buffer, dst.byteOffset, dst.byteLength / Uint16Array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! status ) {\n\n\t\t\t\t\t\tcleanup();\n\t\t\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayerMips.push( dst );\n\n\t\t\t\t}\n\n\t\t\t\tconst mipData = concat( layerMips );\n\n\t\t\t\tmipmaps.push( { data: mipData, width: mipWidth, height: mipHeight } );\n\t\t\t\tbuffers.push( mipData.buffer );\n\n\t\t\t}\n\n\t\t\tfaces.push( { mipmaps, width, height, format: engineFormat, type: engineType } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { faces, buffers, width, height, hasAlpha, dfdFlags, format: engineFormat, type: engineType };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S, UASTC, or\n\t// UASTC HDR), device capabilities, and texture dimensions. The list below ranks the formats\n\t// separately for each format. Currently, priority is assigned based on:\n\t//\n\t//   high quality > low quality > uncompressed\n\t//\n\t// Prioritization may be revisited, or exposed for configuration, in the future.\n\t//\n\t// Reference: https://github.com/KhronosGroup/3D-Formats-Guidelines/blob/main/KTXDeveloperGuide.md\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tengineType: [ EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_HDR ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC6H ],\n\t\t\tengineFormat: [ EngineFormat.RGB_BPTC_UNSIGNED_Format ],\n\t\t\tengineType: [ EngineType.HalfFloatType ],\n\t\t\tpriorityHDR: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\n\t\t// Uncompressed fallbacks.\n\n\t\t{\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.RGBA32, TranscoderFormat.RGBA32 ],\n\t\t\tengineFormat: [ EngineFormat.RGBAFormat, EngineFormat.RGBAFormat ],\n\t\t\tengineType: [ EngineType.UnsignedByteType, EngineType.UnsignedByteType ],\n\t\t\tpriorityETC1S: 100,\n\t\t\tpriorityUASTC: 100,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tbasisFormat: [ BasisFormat.UASTC_HDR ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.RGBA_HALF ],\n\t\t\tengineFormat: [ EngineFormat.RGBAFormat ],\n\t\t\tengineType: [ EngineType.HalfFloatType ],\n\t\t\tpriorityHDR: 100,\n\t\t\tneedsPowerOfTwo: false,\n\t\t}\n\t];\n\n\tconst OPTIONS = {\n\t\t// TODO: For ETC1S we intentionally sort by _UASTC_ priority, preserving\n\t\t// a historical accident shown to avoid performance pitfalls for Linux with\n\t\t// Firefox & AMD GPU (RadeonSI). Further work needed.\n\t\t// See https://github.com/mrdoob/three.js/pull/29730.\n\t\t[ BasisFormat.ETC1S ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.ETC1S ) )\n\t\t\t.sort( ( a, b ) => a.priorityUASTC - b.priorityUASTC ),\n\n\t\t[ BasisFormat.UASTC ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.UASTC ) )\n\t\t\t.sort( ( a, b ) => a.priorityUASTC - b.priorityUASTC ),\n\n\t\t[ BasisFormat.UASTC_HDR ]: FORMAT_OPTIONS\n\t\t\t.filter( ( opt ) => opt.basisFormat.includes( BasisFormat.UASTC_HDR ) )\n\t\t\t.sort( ( a, b ) => a.priorityHDR - b.priorityHDR ),\n\t};\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tconst options = OPTIONS[ basisFormat ];\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( opt.if && ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\tconst transcoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tconst engineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tconst engineType = opt.engineType[ 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat, engineType };\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Failed to identify transcoding target.' );\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n\t/**\n\t * Concatenates N byte arrays.\n\t *\n\t * @param {Uint8Array[]} arrays\n\t * @return {Uint8Array}\n\t */\n\tfunction concat( arrays ) {\n\n\t\tif ( arrays.length === 1 ) return arrays[ 0 ];\n\n\t\tlet totalByteLength = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\ttotalByteLength += array.byteLength;\n\n\t\t}\n\n\t\tconst result = new Uint8Array( totalByteLength );\n\n\t\tlet byteOffset = 0;\n\n\t\tfor ( let i = 0; i < arrays.length; i ++ ) {\n\n\t\t\tconst array = arrays[ i ];\n\t\t\tresult.set( array, byteOffset );\n\n\t\t\tbyteOffset += array.byteLength;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n};\n\n// Parsing for non-Basis textures. These textures may have supercompression\n// like Zstd, but they do not require transcoding.\n\nconst UNCOMPRESSED_FORMATS = new Set( [ RGBAFormat, RGFormat, RedFormat ] );\n\nconst FORMAT_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: RGBAFormat,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: RGBAFormat,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: RGFormat,\n\t[ VK_FORMAT_R8G8_UNORM ]: RGFormat,\n\t[ VK_FORMAT_R8G8_SRGB ]: RGFormat,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R16_SFLOAT ]: RedFormat,\n\t[ VK_FORMAT_R8_SRGB ]: RedFormat,\n\t[ VK_FORMAT_R8_UNORM ]: RedFormat,\n\n\t[ VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK ]: RGB_ETC2_Format,\n\t[ VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK ]: RGBA_ETC2_EAC_Format,\n\n\t[ VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_4x4_SRGB_BLOCK ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_4x4_UNORM_BLOCK ]: RGBA_ASTC_4x4_Format,\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: RGBA_ASTC_6x6_Format,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: RGBA_ASTC_6x6_Format,\n\n\t[ VK_FORMAT_BC1_RGBA_UNORM_BLOCK ]: RGBA_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGBA_SRGB_BLOCK ]: RGBA_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGB_UNORM_BLOCK ]: RGB_S3TC_DXT1_Format,\n\t[ VK_FORMAT_BC1_RGB_SRGB_BLOCK ]: RGB_S3TC_DXT1_Format,\n\n\t[ VK_FORMAT_BC3_SRGB_BLOCK ]: RGBA_S3TC_DXT3_Format,\n\t[ VK_FORMAT_BC3_UNORM_BLOCK ]: RGBA_S3TC_DXT3_Format,\n\n\t[ VK_FORMAT_BC5_SNORM_BLOCK ]: RGBA_S3TC_DXT5_Format,\n\t[ VK_FORMAT_BC5_UNORM_BLOCK ]: RGBA_S3TC_DXT5_Format,\n\n\t[ VK_FORMAT_BC7_SRGB_BLOCK ]: RGBA_BPTC_Format,\n\t[ VK_FORMAT_BC7_UNORM_BLOCK ]: RGBA_BPTC_Format,\n\n};\n\nconst TYPE_MAP = {\n\n\t[ VK_FORMAT_R32G32B32A32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16B16A16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8B8A8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8B8A8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32G32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16G16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8G8_UNORM ]: UnsignedByteType,\n\t[ VK_FORMAT_R8G8_SRGB ]: UnsignedByteType,\n\n\t[ VK_FORMAT_R32_SFLOAT ]: FloatType,\n\t[ VK_FORMAT_R16_SFLOAT ]: HalfFloatType,\n\t[ VK_FORMAT_R8_SRGB ]: UnsignedByteType,\n\t[ VK_FORMAT_R8_UNORM ]: UnsignedByteType,\n\n\t[ VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK ]: UnsignedByteType,\n\t[ VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK ]: UnsignedByteType,\n\n\t[ VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT ]: HalfFloatType,\n\t[ VK_FORMAT_ASTC_6x6_SRGB_BLOCK ]: UnsignedByteType,\n\t[ VK_FORMAT_ASTC_6x6_UNORM_BLOCK ]: UnsignedByteType,\n\n};\n\nasync function createRawTexture( container ) {\n\n\tconst { vkFormat } = container;\n\n\tif ( FORMAT_MAP[ vkFormat ] === undefined ) {\n\n\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported vkFormat.' );\n\n\t}\n\n\t//\n\n\tlet zstd;\n\n\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\tif ( ! _zstd ) {\n\n\t\t\t_zstd = new Promise( async ( resolve ) => {\n\n\t\t\t\tconst zstd = new ZSTDDecoder();\n\t\t\t\tawait zstd.init();\n\t\t\t\tresolve( zstd );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tzstd = await _zstd;\n\n\t}\n\n\t//\n\n\tconst mipmaps = [];\n\n\n\tfor ( let levelIndex = 0; levelIndex < container.levels.length; levelIndex ++ ) {\n\n\t\tconst levelWidth = Math.max( 1, container.pixelWidth >> levelIndex );\n\t\tconst levelHeight = Math.max( 1, container.pixelHeight >> levelIndex );\n\t\tconst levelDepth = container.pixelDepth ? Math.max( 1, container.pixelDepth >> levelIndex ) : 0;\n\n\t\tconst level = container.levels[ levelIndex ];\n\n\t\tlet levelData;\n\n\t\tif ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE ) {\n\n\t\t\tlevelData = level.levelData;\n\n\t\t} else if ( container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD ) {\n\n\t\t\tlevelData = zstd.decode( level.levelData, level.uncompressedByteLength );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Unsupported supercompressionScheme.' );\n\n\t\t}\n\n\t\tlet data;\n\n\t\tif ( TYPE_MAP[ vkFormat ] === FloatType ) {\n\n\t\t\tdata = new Float32Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else if ( TYPE_MAP[ vkFormat ] === HalfFloatType ) {\n\n\t\t\tdata = new Uint16Array(\n\n\t\t\t\tlevelData.buffer,\n\t\t\t\tlevelData.byteOffset,\n\t\t\t\tlevelData.byteLength / Uint16Array.BYTES_PER_ELEMENT\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tdata = levelData;\n\n\t\t}\n\n\t\tmipmaps.push( {\n\n\t\t\tdata: data,\n\t\t\twidth: levelWidth,\n\t\t\theight: levelHeight,\n\t\t\tdepth: levelDepth,\n\n\t\t} );\n\n\t}\n\n\tlet texture;\n\n\tif ( UNCOMPRESSED_FORMATS.has( FORMAT_MAP[ vkFormat ] ) ) {\n\n\t\ttexture = container.pixelDepth === 0\n\t\t\t? new DataTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight )\n\t\t\t: new Data3DTexture( mipmaps[ 0 ].data, container.pixelWidth, container.pixelHeight, container.pixelDepth );\n\n\t} else {\n\n\t\tif ( container.pixelDepth > 0 ) throw new Error( 'THREE.KTX2Loader: Unsupported pixelDepth.' );\n\n\t\ttexture = new CompressedTexture( mipmaps, container.pixelWidth, container.pixelHeight );\n\n\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\n\t}\n\n\ttexture.mipmaps = mipmaps;\n\n\ttexture.type = TYPE_MAP[ vkFormat ];\n\ttexture.format = FORMAT_MAP[ vkFormat ];\n\ttexture.colorSpace = parseColorSpace( container );\n\ttexture.needsUpdate = true;\n\n\t//\n\n\treturn Promise.resolve( texture );\n\n}\n\nfunction parseColorSpace( container ) {\n\n\tconst dfd = container.dataFormatDescriptor[ 0 ];\n\n\tif ( dfd.colorPrimaries === KHR_DF_PRIMARIES_BT709 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_DISPLAYP3 ) {\n\n\t\treturn dfd.transferFunction === KHR_DF_TRANSFER_SRGB ? DisplayP3ColorSpace : LinearDisplayP3ColorSpace;\n\n\t} else if ( dfd.colorPrimaries === KHR_DF_PRIMARIES_UNSPECIFIED ) {\n\n\t\treturn NoColorSpace;\n\n\t} else {\n\n\t\tconsole.warn( `THREE.KTX2Loader: Unsupported color primaries, \"${ dfd.colorPrimaries }\"` );\n\t\treturn NoColorSpace;\n\n\t}\n\n}\n\nexport { KTX2Loader };\n"],"mappings":"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","ignoreList":[]}