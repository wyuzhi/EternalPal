{"version":3,"file":"node_modules/three/examples/jsm/loaders/KTXLoader.js","names":["CompressedTextureLoader","KTXLoader","constructor","manager","super","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","HEADER_LEN","COMPRESSED_2D","arrayBuffer","facesExpected","this","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","littleEndian","getUint32","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","Math","max","loadType","warn","dataOffset","level","imageSize","Int32Array","face","byteArray","push","data"],"sources":["node_modules/three/examples/jsm/loaders/KTXLoader.js"],"sourcesContent":["import {\n\tCompressedTextureLoader\n} from 'three';\n\n/**\n * A loader for the KTX texture compression format.\n *\n * References:\n * - [The KTX File Format and Tools]{@link https://www.khronos.org/opengles/sdk/tools/KTX/}\n * - [Babylon.JS khronosTextureContainer.ts]{@link https://github.com/BabylonJS/Babylon.js/blob/master/src/Misc/khronosTextureContainer.ts}\n *\n * ```js\n * const loader = new KTXLoader();\n *\n * const map = loader.load( 'textures/compressed/lensflare_ASTC8x8.ktx' )\n * map.colorSpace = THREE.SRGBColorSpace; // only for color textures\n * ```\n *\n * @augments CompressedTextureLoader\n * @three_import import { KTXLoader } from 'three/addons/loaders/KTXLoader.js';\n */\nclass KTXLoader extends CompressedTextureLoader {\n\n\t/**\n\t * Constructs a new KTX loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Parses the given KTX texture data.\n\t *\n\t * @param {ArrayBuffer} buffer - The raw texture data.\n\t * @param {boolean} loadMipmaps - Whether to load mipmaps or not.\n\t * @return {CompressedTextureLoader~TexData} An object representing the parsed texture data.\n\t */\n\tparse( buffer, loadMipmaps ) {\n\n\t\tconst ktx = new KhronosTextureContainer( buffer, 1 );\n\n\t\treturn {\n\t\t\tmipmaps: ktx.mipmaps( loadMipmaps ),\n\t\t\twidth: ktx.pixelWidth,\n\t\t\theight: ktx.pixelHeight,\n\t\t\tformat: ktx.glInternalFormat,\n\t\t\tisCubemap: ktx.numberOfFaces === 6,\n\t\t\tmipmapCount: ktx.numberOfMipmapLevels\n\t\t};\n\n\t}\n\n}\n\nconst HEADER_LEN = 12 + ( 13 * 4 ); // identifier + header elements (not including key value meta-data pairs)\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n//const COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n//const TEX_2D = 2; // uses a gl.texImage2D()\n//const TEX_3D = 3; // uses a gl.texImage3D()\n\nclass KhronosTextureContainer {\n\n\t/**\n\t * @private\n\t * @param {ArrayBuffer} arrayBuffer - contents of the KTX container file\n\t * @param {number} facesExpected - should be either 1 or 6, based whether a cube texture or or\n\t * @param {boolean} threeDExpected - provision for indicating that data should be a 3D texture, not implemented\n\t * @param {boolean} textureArrayExpected - provision for indicating that data should be a texture array, not implemented\n\t */\n\tconstructor( arrayBuffer, facesExpected /*, threeDExpected, textureArrayExpected */ ) {\n\n\t\tthis.arrayBuffer = arrayBuffer;\n\n\t\t// Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n\t\t// '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t\t// 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\t\tconst identifier = new Uint8Array( this.arrayBuffer, 0, 12 );\n\t\tif ( identifier[ 0 ] !== 0xAB ||\n\t\t\tidentifier[ 1 ] !== 0x4B ||\n\t\t\tidentifier[ 2 ] !== 0x54 ||\n\t\t\tidentifier[ 3 ] !== 0x58 ||\n\t\t\tidentifier[ 4 ] !== 0x20 ||\n\t\t\tidentifier[ 5 ] !== 0x31 ||\n\t\t\tidentifier[ 6 ] !== 0x31 ||\n\t\t\tidentifier[ 7 ] !== 0xBB ||\n\t\t\tidentifier[ 8 ] !== 0x0D ||\n\t\t\tidentifier[ 9 ] !== 0x0A ||\n\t\t\tidentifier[ 10 ] !== 0x1A ||\n\t\t\tidentifier[ 11 ] !== 0x0A ) {\n\n\t\t\tconsole.error( 'texture missing KTX identifier' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// load the reset of the header in native 32 bit uint\n\t\tconst dataSize = Uint32Array.BYTES_PER_ELEMENT;\n\t\tconst headerDataView = new DataView( this.arrayBuffer, 12, 13 * dataSize );\n\t\tconst endianness = headerDataView.getUint32( 0, true );\n\t\tconst littleEndian = endianness === 0x04030201;\n\n\t\tthis.glType = headerDataView.getUint32( 1 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\tthis.glTypeSize = headerDataView.getUint32( 2 * dataSize, littleEndian ); // must be 1 for compressed textures\n\t\tthis.glFormat = headerDataView.getUint32( 3 * dataSize, littleEndian ); // must be 0 for compressed textures\n\t\tthis.glInternalFormat = headerDataView.getUint32( 4 * dataSize, littleEndian ); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\t\tthis.glBaseInternalFormat = headerDataView.getUint32( 5 * dataSize, littleEndian ); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\t\tthis.pixelWidth = headerDataView.getUint32( 6 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\t\tthis.pixelHeight = headerDataView.getUint32( 7 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\t\tthis.pixelDepth = headerDataView.getUint32( 8 * dataSize, littleEndian ); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\t\tthis.numberOfArrayElements = headerDataView.getUint32( 9 * dataSize, littleEndian ); // used for texture arrays\n\t\tthis.numberOfFaces = headerDataView.getUint32( 10 * dataSize, littleEndian ); // used for cubemap textures, should either be 1 or 6\n\t\tthis.numberOfMipmapLevels = headerDataView.getUint32( 11 * dataSize, littleEndian ); // number of levels; disregard possibility of 0 for compressed textures\n\t\tthis.bytesOfKeyValueData = headerDataView.getUint32( 12 * dataSize, littleEndian ); // the amount of space after the header for meta-data\n\n\t\t// Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\t\tif ( this.glType !== 0 ) {\n\n\t\t\tconsole.warn( 'only compressed formats currently supported' );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n\t\t\tthis.numberOfMipmapLevels = Math.max( 1, this.numberOfMipmapLevels );\n\n\t\t}\n\n\t\tif ( this.pixelHeight === 0 || this.pixelDepth !== 0 ) {\n\n\t\t\tconsole.warn( 'only 2D textures currently supported' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.numberOfArrayElements !== 0 ) {\n\n\t\t\tconsole.warn( 'texture arrays not currently supported' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.numberOfFaces !== facesExpected ) {\n\n\t\t\tconsole.warn( 'number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// we now have a completely validated file, so could use existence of loadType as success\n\t\t// would need to make this more elaborate & adjust checks above to support more than one load type\n\t\tthis.loadType = COMPRESSED_2D;\n\n\t}\n\n\tmipmaps( loadMipmaps ) {\n\n\t\tconst mipmaps = [];\n\n\t\t// initialize width & height for level 1\n\t\tlet dataOffset = HEADER_LEN + this.bytesOfKeyValueData;\n\t\tlet width = this.pixelWidth;\n\t\tlet height = this.pixelHeight;\n\t\tconst mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n\t\tfor ( let level = 0; level < mipmapCount; level ++ ) {\n\n\t\t\tconst imageSize = new Int32Array( this.arrayBuffer, dataOffset, 1 )[ 0 ]; // size per face, since not supporting array cubemaps\n\t\t\tdataOffset += 4; // size of the image + 4 for the imageSize field\n\n\t\t\tfor ( let face = 0; face < this.numberOfFaces; face ++ ) {\n\n\t\t\t\tconst byteArray = new Uint8Array( this.arrayBuffer, dataOffset, imageSize );\n\n\t\t\t\tmipmaps.push( { 'data': byteArray, 'width': width, 'height': height } );\n\n\t\t\t\tdataOffset += imageSize;\n\t\t\t\tdataOffset += 3 - ( ( imageSize + 3 ) % 4 ); // add padding for odd sized image\n\n\t\t\t}\n\n\t\t\twidth = Math.max( 1.0, width * 0.5 );\n\t\t\theight = Math.max( 1.0, height * 0.5 );\n\n\t\t}\n\n\t\treturn mipmaps;\n\n\t}\n\n}\n\nexport { KTXLoader };\n"],"mappings":"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","ignoreList":[]}