{"version":3,"file":"node_modules/three/examples/jsm/loaders/LUT3dlLoader.js","names":["ClampToEdgeWrapping","Data3DTexture","FileLoader","LinearFilter","Loader","RGBAFormat","UnsignedByteType","LUT3dlLoader","constructor","manager","super","this","type","setType","load","url","onLoad","onProgress","onError","loader","setPath","path","setResponseType","text","parse","e","console","error","itemError","input","regExpDataPoints","result","exec","Error","gridLines","trim","split","map","Number","gridStep","size","length","sizeSq","i","l","dataFloat","Float32Array","maxValue","index","r","g","b","Math","max","d4","floor","bits","ceil","log2","maxBitValue","pow","data","Uint8Array","scale","i1","i2","i3","texture3D","image","width","height","depth","format","magFilter","minFilter","wrapS","wrapT","wrapR","generateMipmaps","needsUpdate"],"sources":["node_modules/three/examples/jsm/loaders/LUT3dlLoader.js"],"sourcesContent":["import {\n\tClampToEdgeWrapping,\n\tData3DTexture,\n\tFileLoader,\n\tLinearFilter,\n\tLoader,\n\tRGBAFormat,\n\tUnsignedByteType,\n} from 'three';\n\n/**\n * A loader for the 3DL LUT format.\n *\n * References:\n * - [3D LUTs]{@link http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492}\n * - [Format Spec for .3dl]{@link https://community.foundry.com/discuss/topic/103636/format-spec-for-3dl?mode=Post&postID=895258}\n *\n * ```js\n * const loader = new LUT3dlLoader();\n * const map = loader.loadAsync( 'luts/Presetpro-Cinematic.3dl' );\n * ```\n *\n * @augments Loader\n * @three_import import { LUT3dlLoader } from 'three/addons/loaders/LUT3dlLoader.js';\n */\nexport class LUT3dlLoader extends Loader {\n\n\t/**\n\t * Constructs a new 3DL LUT loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * The texture type.\n\t\t *\n\t\t * @type {(UnsignedByteType|FloatType)}\n\t\t * @default UnsignedByteType\n\t\t */\n\t\tthis.type = UnsignedByteType;\n\n\t}\n\n\t/**\n\t * Sets the texture type.\n\t *\n\t * @param {(UnsignedByteType|FloatType)} type - The texture type to set.\n\t * @return {LUT3dlLoader} A reference to this loader.\n\t */\n\tsetType( type ) {\n\n\t\tthis.type = type;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded 3DL LUT asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function({size:number,texture3D:Data3DTexture})} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.load( url, text => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given 3DL LUT data and returns the resulting 3D data texture.\n\t *\n\t * @param {string} input - The raw 3DL LUT data as a string.\n\t * @return {{size:number,texture3D:Data3DTexture}} The parsed 3DL LUT.\n\t */\n\tparse( input ) {\n\n\t\tconst regExpGridInfo = /^[\\d ]+$/m;\n\t\tconst regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n\n\t\t// The first line describes the positions of values on the LUT grid.\n\t\tlet result = regExpGridInfo.exec( input );\n\n\t\tif ( result === null ) {\n\n\t\t\tthrow new Error( 'LUT3dlLoader: Missing grid information' );\n\n\t\t}\n\n\t\tconst gridLines = result[ 0 ].trim().split( /\\s+/g ).map( Number );\n\t\tconst gridStep = gridLines[ 1 ] - gridLines[ 0 ];\n\t\tconst size = gridLines.length;\n\t\tconst sizeSq = size ** 2;\n\n\t\tfor ( let i = 1, l = gridLines.length; i < l; ++ i ) {\n\n\t\t\tif ( gridStep !== ( gridLines[ i ] - gridLines[ i - 1 ] ) ) {\n\n\t\t\t\tthrow new Error( 'LUT3dlLoader: Inconsistent grid size' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst dataFloat = new Float32Array( size ** 3 * 4 );\n\t\tlet maxValue = 0.0;\n\t\tlet index = 0;\n\n\t\twhile ( ( result = regExpDataPoints.exec( input ) ) !== null ) {\n\n\t\t\tconst r = Number( result[ 1 ] );\n\t\t\tconst g = Number( result[ 2 ] );\n\t\t\tconst b = Number( result[ 3 ] );\n\n\t\t\tmaxValue = Math.max( maxValue, r, g, b );\n\n\t\t\tconst bLayer = index % size;\n\t\t\tconst gLayer = Math.floor( index / size ) % size;\n\t\t\tconst rLayer = Math.floor( index / ( sizeSq ) ) % size;\n\n\t\t\t// b grows first, then g, then r.\n\t\t\tconst d4 = ( bLayer * sizeSq + gLayer * size + rLayer ) * 4;\n\t\t\tdataFloat[ d4 + 0 ] = r;\n\t\t\tdataFloat[ d4 + 1 ] = g;\n\t\t\tdataFloat[ d4 + 2 ] = b;\n\n\t\t\t++ index;\n\n\t\t}\n\n\t\t// Determine the bit depth to scale the values to [0.0, 1.0].\n\t\tconst bits = Math.ceil( Math.log2( maxValue ) );\n\t\tconst maxBitValue = Math.pow( 2, bits );\n\n\t\tconst data = this.type === UnsignedByteType ? new Uint8Array( dataFloat.length ) : dataFloat;\n\t\tconst scale = this.type === UnsignedByteType ? 255 : 1;\n\n\t\tfor ( let i = 0, l = data.length; i < l; i += 4 ) {\n\n\t\t\tconst i1 = i + 1;\n\t\t\tconst i2 = i + 2;\n\t\t\tconst i3 = i + 3;\n\n\t\t\t// Note: data is dataFloat when type is FloatType.\n\t\t\tdata[ i ] = dataFloat[ i ] / maxBitValue * scale;\n\t\t\tdata[ i1 ] = dataFloat[ i1 ] / maxBitValue * scale;\n\t\t\tdata[ i2 ] = dataFloat[ i2 ] / maxBitValue * scale;\n\t\t\tdata[ i3 ] = scale;\n\n\t\t}\n\n\t\tconst texture3D = new Data3DTexture();\n\t\ttexture3D.image.data = data;\n\t\ttexture3D.image.width = size;\n\t\ttexture3D.image.height = size;\n\t\ttexture3D.image.depth = size;\n\t\ttexture3D.format = RGBAFormat;\n\t\ttexture3D.type = this.type;\n\t\ttexture3D.magFilter = LinearFilter;\n\t\ttexture3D.minFilter = LinearFilter;\n\t\ttexture3D.wrapS = ClampToEdgeWrapping;\n\t\ttexture3D.wrapT = ClampToEdgeWrapping;\n\t\ttexture3D.wrapR = ClampToEdgeWrapping;\n\t\ttexture3D.generateMipmaps = false;\n\t\ttexture3D.needsUpdate = true;\n\n\t\treturn {\n\t\t\tsize,\n\t\t\ttexture3D,\n\t\t};\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]}