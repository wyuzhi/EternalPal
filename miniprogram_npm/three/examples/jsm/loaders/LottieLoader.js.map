{"version":3,"file":"node_modules/three/examples/jsm/loaders/LottieLoader.js","names":["FileLoader","Loader","CanvasTexture","NearestFilter","SRGBColorSpace","lottie","LottieLoader","constructor","manager","super","console","warn","setQuality","value","this","_quality","load","url","onLoad","onProgress","onError","quality","texture","minFilter","generateMipmaps","colorSpace","loader","setPath","path","setWithCredentials","withCredentials","text","data","JSON","parse","container","document","createElement","style","width","w","height","h","body","appendChild","animation","loadAnimation","animType","loop","autoplay","animationData","rendererSettings","dpr","image","addEventListener","needsUpdate","display","undefined"],"sources":["node_modules/three/examples/jsm/loaders/LottieLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tCanvasTexture,\n\tNearestFilter,\n\tSRGBColorSpace\n} from 'three';\n\nimport lottie from '../libs/lottie_canvas.module.js';\n\n/**\n * A loader for the Lottie texture animation format.\n *\n * The loader returns an instance of {@link CanvasTexture} to represent\n * the animated texture. Two additional properties are added to each texture:\n * - `animation`: The return value of `lottie.loadAnimation()` which is an object\n * with an API for controlling the animation's playback.\n * - `image`: The image container.\n *\n * ```js\n * const loader = new LottieLoader();\n * loader.setQuality( 2 );\n * const texture = await loader.loadAsync( 'textures/lottie/24017-lottie-logo-animation.json' );\n *\n * const geometry = new THREE.BoxGeometry();\n * const material = new THREE.MeshBasicMaterial( { map: texture } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments Loader\n * @three_import import { LottieLoader } from 'three/addons/loaders/LottieLoader.js';\n */\nclass LottieLoader extends Loader {\n\n\t/**\n\t * Constructs a new Lottie loader.\n\t *\n\t * @deprecated The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tconsole.warn( 'THREE.LottieLoader: The loader has been deprecated and will be removed with r186. Use lottie-web instead and create your animated texture manually.' );\n\n\t}\n\n\t/**\n\t * Sets the texture quality.\n\t *\n\t * @param {number} value - The texture quality.\n\t */\n\tsetQuality( value ) {\n\n\t\tthis._quality = value;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded Lottie asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(CanvasTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @returns {CanvasTexture} The Lottie texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst quality = this._quality || 1;\n\n\t\tconst texture = new CanvasTexture();\n\t\ttexture.minFilter = NearestFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst data = JSON.parse( text );\n\n\t\t\t// lottie uses container.offsetWidth and offsetHeight\n\t\t\t// to define width/height\n\n\t\t\tconst container = document.createElement( 'div' );\n\t\t\tcontainer.style.width = data.w + 'px';\n\t\t\tcontainer.style.height = data.h + 'px';\n\t\t\tdocument.body.appendChild( container );\n\n\t\t\tconst animation = lottie.loadAnimation( {\n\t\t\t\tcontainer: container,\n\t\t\t\tanimType: 'canvas',\n\t\t\t\tloop: true,\n\t\t\t\tautoplay: true,\n\t\t\t\tanimationData: data,\n\t\t\t\trendererSettings: { dpr: quality }\n\t\t\t} );\n\n\t\t\ttexture.animation = animation;\n\t\t\ttexture.image = animation.container;\n\n\t\t\tanimation.addEventListener( 'enterFrame', function () {\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t} );\n\n\t\t\tcontainer.style.display = 'none';\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { LottieLoader };\n"],"mappings":"OACCA,WACAC,OACAC,cACAC,cACAC,mBACM,eAEAC,WAAY,kCAyBnB,MAAMC,qBAAqBL,OAQ1B,WAAAM,CAAaC,GAEZC,MAAOD,GAEPE,QAAQC,KAAM,sJAEf,CAOA,UAAAC,CAAYC,GAEXC,KAAKC,SAAWF,CAEjB,CAYA,IAAAG,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAUP,KAAKC,UAAY,EAE3BO,EAAU,IAAIpB,cACpBoB,EAAQC,UAAYpB,cACpBmB,EAAQE,iBAAkB,EAC1BF,EAAQG,WAAarB,eAErB,MAAMsB,EAAS,IAAI1B,WAAYc,KAAKN,SA4CpC,OA3CAkB,EAAOC,QAASb,KAAKc,MACrBF,EAAOG,mBAAoBf,KAAKgB,iBAEhCJ,EAAOV,KAAMC,GAAK,SAAWc,GAE5B,MAAMC,EAAOC,KAAKC,MAAOH,GAKnBI,EAAYC,SAASC,cAAe,OAC1CF,EAAUG,MAAMC,MAAQP,EAAKQ,EAAI,KACjCL,EAAUG,MAAMG,OAAST,EAAKU,EAAI,KAClCN,SAASO,KAAKC,YAAaT,GAE3B,MAAMU,EAAYxC,OAAOyC,cAAe,CACvCX,UAAWA,EACXY,SAAU,SACVC,MAAM,EACNC,UAAU,EACVC,cAAelB,EACfmB,iBAAkB,CAAEC,IAAK/B,KAG1BC,EAAQuB,UAAYA,EACpBvB,EAAQ+B,MAAQR,EAAUV,UAE1BU,EAAUS,iBAAkB,cAAc,WAEzChC,EAAQiC,aAAc,CAEvB,IAEApB,EAAUG,MAAMkB,QAAU,YAEVC,IAAXvC,GAEJA,EAAQI,EAIV,GAAGH,EAAYC,GAERE,CAER,SAIQhB","ignoreList":[]}