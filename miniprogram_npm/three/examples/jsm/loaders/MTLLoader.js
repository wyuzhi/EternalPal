import{Color,ColorManagement,DefaultLoadingManager,FileLoader,FrontSide,Loader,LoaderUtils,MeshPhongMaterial,RepeatWrapping,TextureLoader,Vector2,SRGBColorSpace}from"three";class MTLLoader extends Loader{constructor(e){super(e)}load(e,t,a,s){const r=this,o=""===this.path?LoaderUtils.extractUrlBase(e):this.path,i=new FileLoader(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(function(a){try{t(r.parse(a,o))}catch(t){s?s(t):console.error(t),r.manager.itemError(e)}}),a,s)}setMaterialOptions(e){return this.materialOptions=e,this}parse(e,t){const a=e.split("\n");let s={};const r=/\s+/,o={};for(let e=0;e<a.length;e++){let t=a[e];if(t=t.trim(),0===t.length||"#"===t.charAt(0))continue;const i=t.indexOf(" ");let n=i>=0?t.substring(0,i):t;n=n.toLowerCase();let l=i>=0?t.substring(i+1):"";if(l=l.trim(),"newmtl"===n)s={name:l},o[l]=s;else if("ka"===n||"kd"===n||"ks"===n||"ke"===n){const e=l.split(r,3);s[n]=[parseFloat(e[0]),parseFloat(e[1]),parseFloat(e[2])]}else s[n]=l}const i=new MaterialCreator(this.resourcePath||t,this.materialOptions);return i.setCrossOrigin(this.crossOrigin),i.setManager(this.manager),i.setMaterials(o),i}}class MaterialCreator{constructor(e="",t={}){this.baseUrl=e,this.options=t,this.materialsInfo={},this.materials={},this.materialsArray=[],this.nameLookup={},this.crossOrigin="anonymous",this.side=void 0!==this.options.side?this.options.side:FrontSide,this.wrap=void 0!==this.options.wrap?this.options.wrap:RepeatWrapping}setCrossOrigin(e){return this.crossOrigin=e,this}setManager(e){this.manager=e}setMaterials(e){this.materialsInfo=this.convert(e),this.materials={},this.materialsArray=[],this.nameLookup={}}convert(e){if(!this.options)return e;const t={};for(const a in e){const s=e[a],r={};t[a]=r;for(const e in s){let t=!0,a=s[e];const o=e.toLowerCase();switch(o){case"kd":case"ka":case"ks":this.options&&this.options.normalizeRGB&&(a=[a[0]/255,a[1]/255,a[2]/255]),this.options&&this.options.ignoreZeroRGBs&&0===a[0]&&0===a[1]&&0===a[2]&&(t=!1)}t&&(r[o]=a)}}return t}preload(){for(const e in this.materialsInfo)this.create(e)}getIndex(e){return this.nameLookup[e]}getAsArray(){let e=0;for(const t in this.materialsInfo)this.materialsArray[e]=this.create(t),this.nameLookup[t]=e,e++;return this.materialsArray}create(e){return void 0===this.materials[e]&&this.createMaterial_(e),this.materials[e]}createMaterial_(e){const t=this,a=this.materialsInfo[e],s={name:e,side:this.side};function r(e,a){if(s[e])return;const r=t.getTextureParams(a,s),o=t.loadTexture((i=t.baseUrl,"string"!=typeof(n=r.url)||""===n?"":/^https?:\/\//i.test(n)?n:i+n));var i,n;o.repeat.copy(r.scale),o.offset.copy(r.offset),o.wrapS=t.wrap,o.wrapT=t.wrap,"map"!==e&&"emissiveMap"!==e||(o.colorSpace=SRGBColorSpace),s[e]=o}for(const e in a){const t=a[e];let o;if(""!==t)switch(e.toLowerCase()){case"kd":s.color=ColorManagement.colorSpaceToWorking((new Color).fromArray(t),SRGBColorSpace);break;case"ks":s.specular=ColorManagement.colorSpaceToWorking((new Color).fromArray(t),SRGBColorSpace);break;case"ke":s.emissive=ColorManagement.colorSpaceToWorking((new Color).fromArray(t),SRGBColorSpace);break;case"map_kd":r("map",t);break;case"map_ks":r("specularMap",t);break;case"map_ke":r("emissiveMap",t);break;case"norm":r("normalMap",t);break;case"map_bump":case"bump":r("bumpMap",t);break;case"disp":r("displacementMap",t);break;case"map_d":r("alphaMap",t),s.transparent=!0;break;case"ns":s.shininess=parseFloat(t);break;case"d":o=parseFloat(t),o<1&&(s.opacity=o,s.transparent=!0);break;case"tr":o=parseFloat(t),this.options&&this.options.invertTrProperty&&(o=1-o),o>0&&(s.opacity=1-o,s.transparent=!0)}}return this.materials[e]=new MeshPhongMaterial(s),this.materials[e]}getTextureParams(e,t){const a={scale:new Vector2(1,1),offset:new Vector2(0,0)},s=e.split(/\s+/);let r;return r=s.indexOf("-bm"),r>=0&&(t.bumpScale=parseFloat(s[r+1]),s.splice(r,2)),r=s.indexOf("-mm"),r>=0&&(t.displacementBias=parseFloat(s[r+1]),t.displacementScale=parseFloat(s[r+2]),s.splice(r,3)),r=s.indexOf("-s"),r>=0&&(a.scale.set(parseFloat(s[r+1]),parseFloat(s[r+2])),s.splice(r,4)),r=s.indexOf("-o"),r>=0&&(a.offset.set(parseFloat(s[r+1]),parseFloat(s[r+2])),s.splice(r,4)),a.url=s.join(" ").trim(),a}loadTexture(e,t,a,s,r){const o=void 0!==this.manager?this.manager:DefaultLoadingManager;let i=o.getHandler(e);null===i&&(i=new TextureLoader(o)),i.setCrossOrigin&&i.setCrossOrigin(this.crossOrigin);const n=i.load(e,a,s,r);return void 0!==t&&(n.mapping=t),n}}export{MTLLoader};
//# sourceMappingURL=MTLLoader.js.map