{"version":3,"file":"node_modules/three/examples/jsm/loaders/MTLLoader.js","names":["Color","ColorManagement","DefaultLoadingManager","FileLoader","FrontSide","Loader","LoaderUtils","MeshPhongMaterial","RepeatWrapping","TextureLoader","Vector2","SRGBColorSpace","MTLLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterialOptions","value","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","undefined","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","colorSpace","n","color","colorSpaceToWorking","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","displacementBias","displacementScale","set","join","mapping","getHandler","texture"],"sources":["node_modules/three/examples/jsm/loaders/MTLLoader.js"],"sourcesContent":["import {\n\tColor,\n\tColorManagement,\n\tDefaultLoadingManager,\n\tFileLoader,\n\tFrontSide,\n\tLoader,\n\tLoaderUtils,\n\tMeshPhongMaterial,\n\tRepeatWrapping,\n\tTextureLoader,\n\tVector2,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * A loader for the MTL format.\n *\n * The Material Template Library format (MTL) or .MTL File Format is a companion file format\n * to OBJ that describes surface shading (material) properties of objects within one or more\n * OBJ files.\n *\n * ```js\n * const loader = new MTLLoader();\n * const materials = await loader.loadAsync( 'models/obj/male02/male02.mtl' );\n *\n * const objLoader = new OBJLoader();\n * objLoader.setMaterials( materials );\n * ```\n *\n * @augments Loader\n * @three_import import { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\n */\nclass MTLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded MTL asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(MaterialCreator)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Sets the material options.\n\t *\n\t * @param {MTLLoader~MaterialOptions} value - The material options.\n\t * @return {MTLLoader} A reference to this loader.\n\t */\n\tsetMaterialOptions( value ) {\n\n\t\tthis.materialOptions = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parses the given MTL data and returns the resulting material creator.\n\t *\n\t * @param {string} text - The raw MTL data as a string.\n\t * @param {string} path - The URL base path.\n\t * @return {MaterialCreator} The material creator.\n\t */\n\tparse( text, path ) {\n\n\t\tconst lines = text.split( '\\n' );\n\t\tlet info = {};\n\t\tconst delimiter_pattern = /\\s+/;\n\t\tconst materialsInfo = {};\n\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlet line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst pos = line.indexOf( ' ' );\n\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\n\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n}\n\n/**\n * Material options of `MTLLoader`.\n *\n * @typedef {Object} MTLLoader~MaterialOptions\n * @property {(FrontSide|BackSide|DoubleSide)} [side=FrontSide] - Which side to apply the material.\n * @property {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)} [wrap=RepeatWrapping] - What type of wrapping to apply for textures.\n * @property {boolean} [normalizeRGB=false] - Whether RGB colors should be normalized to `0-1` from `0-255`.\n * @property {boolean} [ignoreZeroRGBs=false] - Ignore values of RGBs (Ka,Kd,Ks) that are all 0's.\n */\n\nclass MaterialCreator {\n\n\tconstructor( baseUrl = '', options = {} ) {\n\n\t\tthis.baseUrl = baseUrl;\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.crossOrigin = 'anonymous';\n\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\n\n\t}\n\n\tsetCrossOrigin( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t}\n\n\tsetManager( value ) {\n\n\t\tthis.manager = value;\n\n\t}\n\n\tsetMaterials( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t}\n\n\tconvert( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tconst converted = {};\n\n\t\tfor ( const mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tconst mat = materialsInfo[ mn ];\n\n\t\t\tconst covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( const prop in mat ) {\n\n\t\t\t\tlet save = true;\n\t\t\t\tlet value = mat[ prop ];\n\t\t\t\tconst lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t}\n\n\tpreload() {\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t}\n\n\tgetIndex( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t}\n\n\tgetAsArray() {\n\n\t\tlet index = 0;\n\n\t\tfor ( const mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t}\n\n\tcreate( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tcreateMaterial_( materialName ) {\n\n\t\t// Create material\n\n\t\tconst scope = this;\n\t\tconst mat = this.materialsInfo[ materialName ];\n\t\tconst params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tconst texParams = scope.getTextureParams( value, params );\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\n\n\t\t\t\tmap.colorSpace = SRGBColorSpace;\n\n\t\t\t}\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( const prop in mat ) {\n\n\t\t\tconst value = mat[ prop ];\n\t\t\tlet n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ke':\n\n\t\t\t\t\t// Emissive using RGB values\n\t\t\t\t\tparams.emissive = ColorManagement.colorSpaceToWorking( new Color().fromArray( value ), SRGBColorSpace );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( 'map', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( 'specularMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ke':\n\n\t\t\t\t\t// Emissive map\n\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( 'normalMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'disp':\n\n\t\t\t\t\t// Displacement texture map\n\n\t\t\t\t\tsetMapForType( 'displacementMap', value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_d':\n\n\t\t\t\t\t// Alpha map\n\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\n\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat( value );\n\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t}\n\n\tgetTextureParams( value, matParams ) {\n\n\t\tconst texParams = {\n\n\t\t\tscale: new Vector2( 1, 1 ),\n\t\t\toffset: new Vector2( 0, 0 )\n\n\t\t };\n\n\t\tconst items = value.split( /\\s+/ );\n\t\tlet pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-mm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.displacementBias = parseFloat( items[ pos + 1 ] );\n\t\t\tmatParams.displacementScale = parseFloat( items[ pos + 2 ] );\n\t\t\titems.splice( pos, 3 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t}\n\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\n\t\tlet loader = manager.getHandler( url );\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { MTLLoader };\n"],"mappings":"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","ignoreList":[]}