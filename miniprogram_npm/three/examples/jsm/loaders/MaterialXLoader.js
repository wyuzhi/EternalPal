import{FileLoader,Loader,TextureLoader,RepeatWrapping,MeshBasicNodeMaterial,MeshPhysicalNodeMaterial,DoubleSide}from"three/webgpu";import{float,bool,int,vec2,vec3,vec4,color,texture,positionLocal,positionWorld,uv,vertexColor,normalLocal,normalWorld,tangentLocal,tangentWorld,mul,abs,sign,floor,ceil,round,sin,cos,tan,asin,acos,sqrt,exp,clamp,min,max,normalize,length,dot,cross,normalMap,remap,smoothstep,luminance,mx_rgbtohsv,mx_hsvtorgb,mix,saturation,transpose,determinant,inverse,log,reflect,refract,element,mx_ramplr,mx_ramptb,mx_splitlr,mx_splittb,mx_fractal_noise_float,mx_noise_float,mx_cell_noise_float,mx_worley_noise_float,mx_transform_uv,mx_safepower,mx_contrast,mx_srgb_texture_to_lin_rec709,mx_add,mx_atan2,mx_divide,mx_modulo,mx_multiply,mx_power,mx_subtract,mx_timer,mx_frame,mat3,mx_ramp4,mx_invert,mx_ifgreater,mx_ifgreatereq,mx_ifequal,distance,mx_separate,mx_place2d,mx_rotate2d,mx_rotate3d,mx_heighttonormal,mx_unifiednoise2d,mx_unifiednoise3d}from"three/tsl";const colorSpaceLib={mx_srgb_texture_to_lin_rec709:mx_srgb_texture_to_lin_rec709};class MXElement{constructor(e,t,n=[]){this.name=e,this.nodeFunc=t,this.params=n}}const MXElements=[new MXElement("add",mx_add,["in1","in2"]),new MXElement("subtract",mx_subtract,["in1","in2"]),new MXElement("multiply",mx_multiply,["in1","in2"]),new MXElement("divide",mx_divide,["in1","in2"]),new MXElement("modulo",mx_modulo,["in1","in2"]),new MXElement("absval",abs,["in1","in2"]),new MXElement("sign",sign,["in1","in2"]),new MXElement("floor",floor,["in1","in2"]),new MXElement("ceil",ceil,["in1","in2"]),new MXElement("round",round,["in1","in2"]),new MXElement("power",mx_power,["in1","in2"]),new MXElement("sin",sin,["in"]),new MXElement("cos",cos,["in"]),new MXElement("tan",tan,["in"]),new MXElement("asin",asin,["in"]),new MXElement("acos",acos,["in"]),new MXElement("atan2",mx_atan2,["in1","in2"]),new MXElement("sqrt",sqrt,["in"]),new MXElement("ln",log,["in"]),new MXElement("exp",exp,["in"]),new MXElement("clamp",clamp,["in","low","high"]),new MXElement("min",min,["in1","in2"]),new MXElement("max",max,["in1","in2"]),new MXElement("normalize",normalize,["in"]),new MXElement("magnitude",length,["in1","in2"]),new MXElement("dotproduct",dot,["in1","in2"]),new MXElement("crossproduct",cross,["in"]),new MXElement("distance",distance,["in1","in2"]),new MXElement("invert",mx_invert,["in","amount"]),new MXElement("transformmatrix",mul,["in1","in2"]),new MXElement("normalmap",normalMap,["in","scale"]),new MXElement("transpose",transpose,["in"]),new MXElement("determinant",determinant,["in"]),new MXElement("invertmatrix",inverse,["in"]),new MXElement("creatematrix",mat3,["in1","in2","in3"]),new MXElement("length",length,["in"]),new MXElement("crossproduct",cross,["in1","in2"]),new MXElement("floor",floor,["in"]),new MXElement("ceil",ceil,["in"]),new MXElement("remap",remap,["in","inlow","inhigh","outlow","outhigh"]),new MXElement("smoothstep",smoothstep,["in","low","high"]),new MXElement("luminance",luminance,["in","lumacoeffs"]),new MXElement("rgbtohsv",mx_rgbtohsv,["in"]),new MXElement("hsvtorgb",mx_hsvtorgb,["in"]),new MXElement("mix",mix,["bg","fg","mix"]),new MXElement("combine2",vec2,["in1","in2"]),new MXElement("combine3",vec3,["in1","in2","in3"]),new MXElement("combine4",vec4,["in1","in2","in3","in4"]),new MXElement("ramplr",mx_ramplr,["valuel","valuer","texcoord"]),new MXElement("ramptb",mx_ramptb,["valuet","valueb","texcoord"]),new MXElement("ramp4",mx_ramp4,["valuetl","valuetr","valuebl","valuebr","texcoord"]),new MXElement("splitlr",mx_splitlr,["valuel","valuer","texcoord"]),new MXElement("splittb",mx_splittb,["valuet","valueb","texcoord"]),new MXElement("noise2d",mx_noise_float,["texcoord","amplitude","pivot"]),new MXElement("noise3d",mx_noise_float,["texcoord","amplitude","pivot"]),new MXElement("fractal3d",mx_fractal_noise_float,["position","octaves","lacunarity","diminish","amplitude"]),new MXElement("cellnoise2d",mx_cell_noise_float,["texcoord"]),new MXElement("cellnoise3d",mx_cell_noise_float,["texcoord"]),new MXElement("worleynoise2d",mx_worley_noise_float,["texcoord","jitter"]),new MXElement("worleynoise3d",mx_worley_noise_float,["texcoord","jitter"]),new MXElement("unifiednoise2d",mx_unifiednoise2d,["type","texcoord","freq","offset","jitter","outmin","outmax","clampoutput","octaves","lacunarity","diminish"]),new MXElement("unifiednoise3d",mx_unifiednoise3d,["type","texcoord","freq","offset","jitter","outmin","outmax","clampoutput","octaves","lacunarity","diminish"]),new MXElement("place2d",mx_place2d,["texcoord","pivot","scale","rotate","offset","operationorder"]),new MXElement("safepower",mx_safepower,["in1","in2"]),new MXElement("contrast",mx_contrast,["in","amount","pivot"]),new MXElement("saturate",saturation,["in","amount"]),new MXElement("extract",element,["in","index"]),new MXElement("separate2",mx_separate,["in"]),new MXElement("separate3",mx_separate,["in"]),new MXElement("separate4",mx_separate,["in"]),new MXElement("reflect",reflect,["in","normal"]),new MXElement("refract",refract,["in","normal","ior"]),new MXElement("time",mx_timer),new MXElement("frame",mx_frame),new MXElement("ifgreater",mx_ifgreater,["value1","value2","in1","in2"]),new MXElement("ifgreatereq",mx_ifgreatereq,["value1","value2","in1","in2"]),new MXElement("ifequal",mx_ifequal,["value1","value2","in1","in2"]),new MXElement("rotate2d",mx_rotate2d,["in","amount"]),new MXElement("rotate3d",mx_rotate3d,["in","amount","axis"]),new MXElement("heighttonormal",mx_heighttonormal,["in","scale","texcoord"])],MtlXLibrary={};MXElements.forEach((e=>MtlXLibrary[e.name]=e));class MaterialXLoader extends Loader{constructor(e){super(e)}load(e,t,n,o){const i=function(e){o?o(e):console.error(e)};return new FileLoader(this.manager).setPath(this.path).load(e,(async e=>{try{t(this.parse(e))}catch(e){i(e)}}),n,i),this}parse(e){return new MaterialX(this.manager,this.path).parse(e)}}class MaterialXNode{constructor(e,t,n=""){e&&"object"==typeof e||console.warn("MaterialXNode: materialX argument is not an object!",{materialX:e,nodeXML:t,nodePath:n}),this.materialX=e,this.nodeXML=t,this.nodePath=n?n+"/"+this.name:this.name,this.parent=null,this.node=null,this.children=[]}get element(){return this.nodeXML.nodeName}get nodeGraph(){return this.getAttribute("nodegraph")}get nodeName(){return this.getAttribute("nodename")}get interfaceName(){return this.getAttribute("interfacename")}get output(){return this.getAttribute("output")}get name(){return this.getAttribute("name")}get type(){return this.getAttribute("type")}get value(){return this.getAttribute("value")}getNodeGraph(){let e=this;for(;null!==e&&"nodegraph"!==e.element;)e=e.parent;return e}getRoot(){let e=this;for(;null!==e.parent;)e=e.parent;return e}get referencePath(){let e=null;return null!==this.nodeGraph&&null!==this.output?e=this.nodeGraph+"/"+this.output:null===this.nodeName&&null===this.interfaceName||(e=this.getNodeGraph().nodePath+"/"+(this.nodeName||this.interfaceName)),e}get hasReference(){return null!==this.referencePath}get isConst(){return"input"===this.element&&null!==this.value&&"filename"!==this.type}getColorSpaceNode(){const e=this.getAttribute("colorspace"),t=this.getRoot().getAttribute("colorspace");return colorSpaceLib[`mx_${e}_to_${t}`]}getTexture(){const e=this.getRecursiveAttribute("fileprefix")||"";let t=this.materialX.textureLoader;const n=e+this.value;if(n){const e=this.materialX.manager.getHandler(n);null!==e&&(t=e)}const o=t.load(n);return o.wrapS=o.wrapT=RepeatWrapping,o.flipY=!1,o}getClassFromType(e){let t=null;return"integer"===e?t=int:"float"===e?t=float:"vector2"===e?t=vec2:"vector3"===e?t=vec3:"vector4"===e||"color4"===e?t=vec4:"color3"===e?t=color:"boolean"===e&&(t=bool),t}getNode(e=null){let t=this.node;if(null!==t&&null===e)return t;if("input"===this.element&&"texcoord"===this.name&&"vector2"===this.type){let e=0;const n=this.getAttribute("defaultgeomprop");n&&/^UV(\d+)$/.test(n)&&(e=parseInt(n.match(/^UV(\d+)$/)[1],10)),t=uv(e)}if(("separate3"===this.element||"separate2"===this.element||"separate4"===this.element)&&e&&"string"==typeof e&&e.startsWith("out")){const t=this.getNodeByName("in");return mx_separate(t,e)}const n=this.type;if(this.isConst){t=this.getClassFromType(n)(...this.getVector())}else if(this.hasReference)"output"===this.element&&this.output&&null===e&&(e=this.output),t=this.materialX.getMaterialXNode(this.referencePath).getNode(e);else{const o=this.element;if("convert"===o){t=this.getClassFromType(n)(this.getNodeByName("in"))}else if("constant"===o)t=this.getNodeByName("value");else if("position"===o){t="world"===this.getAttribute("space")?positionWorld:positionLocal}else if("normal"===o){t="world"===this.getAttribute("space")?normalWorld:normalLocal}else if("tangent"===o){t="world"===this.getAttribute("space")?tangentWorld:tangentLocal}else if("texcoord"===o){const e=this.getChildByName("index"),n=e?parseInt(e.value):0;t=uv(n)}else if("geomcolor"===o){const e=this.getChildByName("index"),n=e?parseInt(e.value):0;t=vertexColor(n)}else if("tiledimage"===o){const e=this.getChildByName("file"),n=e.getTexture(),o=mx_transform_uv(...this.getNodesByNames(["uvtiling","uvoffset"]));t=texture(n,o);const i=e.getColorSpaceNode();i&&(t=i(t))}else if("image"===o){const e=this.getChildByName("file"),n=this.getNodeByName("texcoord"),o=e.getTexture();t=texture(o,n);const i=e.getColorSpaceNode();i&&(t=i(t))}else if(void 0!==MtlXLibrary[o]){const n=MtlXLibrary[o];if(!n)throw new Error(`THREE.MaterialXLoader: Unexpected node ${(new XMLSerializer).serializeToString(this.nodeXML)}.`);if(!n.nodeFunc)throw new Error(`THREE.MaterialXLoader: Unexpected node 2 ${(new XMLSerializer).serializeToString(this.nodeXML)}.`);t=null!==e?n.nodeFunc(...this.getNodesByNames(...n.params),e):n.nodeFunc(...this.getNodesByNames(...n.params))}}null===t&&(console.warn(`THREE.MaterialXLoader: Unexpected node ${(new XMLSerializer).serializeToString(this.nodeXML)}.`),t=float(0));const o=this.getClassFromType(n);return null!==o?t=o(t):(console.warn(`THREE.MaterialXLoader: Unexpected node ${(new XMLSerializer).serializeToString(this.nodeXML)}.`),t=float(0)),t.name=this.name,this.node=t,t}getChildByName(e){for(const t of this.children)if(t.name===e)return t}getNodes(){const e={};for(const t of this.children){const n=t.getNode();e[n.name]=n}return e}getNodeByName(e){const t=this.getChildByName(e);return t?t.getNode(t.output):void 0}getNodesByNames(...e){const t=[];for(const n of e){const e=this.getNodeByName(n);e&&t.push(e)}return t}getValue(){return this.value.trim()}getVector(){const e=[];for(const t of this.getValue().split(/[,|\s]/))""!==t&&e.push(Number(t.trim()));return e}getAttribute(e){return this.nodeXML.getAttribute(e)}getRecursiveAttribute(e){let t=this.nodeXML.getAttribute(e);return null===t&&null!==this.parent&&(t=this.parent.getRecursiveAttribute(e)),t}setStandardSurfaceToGltfPBR(e){const t=this.getNodes();let n=null;t.base&&t.base_color?n=mul(t.base,t.base_color):t.base?n=t.base:t.base_color&&(n=t.base_color);let o=null;t.opacity&&(o=t.opacity);let i=null;t.specular_roughness&&(i=t.specular_roughness);let r=null;t.metalness&&(r=t.metalness);let a=null;t.specular&&(a=t.specular);let l=null;t.specular_color&&(l=t.specular_color);let s=null;t.ior&&(s=t.ior);let m=null,c=null;t.specular_anisotropy&&(m=t.specular_anisotropy),t.specular_rotation&&(c=t.specular_rotation);let u=null,d=null;t.transmission&&(u=t.transmission),t.transmission_color&&(d=t.transmission_color);let h=null,p=null;t.thin_film_thickness&&(h=t.thin_film_thickness),t.thin_film_ior&&(p=clamp(t.thin_film_ior,float(1),float(2.333)));let f=null,g=null,_=null;t.sheen&&(f=t.sheen),t.sheen_color&&(g=t.sheen_color),t.sheen_roughness&&(_=t.sheen_roughness);let x=null,M=null;t.coat&&(x=t.coat),t.coat_roughness&&(M=t.coat_roughness),t.coat_color&&(n=n?mul(n,t.coat_color):n);let X=null;t.normal&&(X=t.normal);let w=null;t.emission&&(w=t.emission),t.emissionColor&&(w=w?mul(w,t.emissionColor):w),e.colorNode=n||color(.8,.8,.8),e.opacityNode=o||float(1),e.roughnessNode=i||float(.2),e.metalnessNode=r||float(0),e.specularIntensityNode=a||float(.5),e.specularColorNode=l||color(1,1,1),e.iorNode=s||float(1.5),e.anisotropyNode=m||float(0),e.anisotropyRotationNode=c||float(0),e.transmissionNode=u||float(0),e.transmissionColorNode=d||color(1,1,1),e.thinFilmThicknessNode=h||float(0),e.thinFilmIorNode=p||float(1.5),e.sheenNode=f||float(0),e.sheenColorNode=g||color(1,1,1),e.sheenRoughnessNode=_||float(.5),e.clearcoatNode=x||float(0),e.clearcoatRoughnessNode=M||float(0),X&&(e.normalNode=X),w&&(e.emissiveNode=w),h&&void 0!==h.value&&h.value>0&&(e.iridescence=1),null!==o&&(e.transparent=!0),null!==u&&(e.side=DoubleSide,e.transparent=!0)}setMaterial(e){const t=this.element;"gltf_pbr"===t||"standard_surface"===t&&this.setStandardSurfaceToGltfPBR(e)}toBasicMaterial(){const e=new MeshBasicNodeMaterial;e.name=this.name;for(const t of this.children.toReversed())if("out"===t.name){e.colorNode=t.getNode();break}return e}toPhysicalMaterial(){const e=new MeshPhysicalNodeMaterial;e.name=this.name;for(const t of this.children){this.materialX.getMaterialXNode(t.nodeName).setMaterial(e)}return e}toMaterials(){const e={};let t=!0;for(const n of this.children)if("surfacematerial"===n.element){const o=n.toPhysicalMaterial();e[o.name]=o,t=!1}if(t)for(const t of this.children)if("nodegraph"===t.element){const n=t.toBasicMaterial();e[n.name]=n}return e}add(e){e.parent=this,this.children.push(e)}}class MaterialX{constructor(e,t){this.manager=e,this.path=t,this.resourcePath="",this.nodesXLib=new Map,this.textureLoader=new TextureLoader(e)}addMaterialXNode(e){this.nodesXLib.set(e.nodePath,e)}getMaterialXNode(...e){return this.nodesXLib.get(e.join("/"))}parseNode(e,t=""){const n=new MaterialXNode(this,e,t);n.nodePath&&this.addMaterialXNode(n);for(const t of e.children){const e=this.parseNode(t,n.nodePath);n.add(e)}return n}parse(e){const t=(new DOMParser).parseFromString(e,"application/xml").documentElement;this.textureLoader.setPath(this.path);return{materials:this.parseNode(t).toMaterials()}}}export{MaterialXLoader};
//# sourceMappingURL=MaterialXLoader.js.map