{"version":3,"file":"node_modules/three/examples/jsm/loaders/PDBLoader.js","names":["BufferGeometry","FileLoader","Float32BufferAttribute","Loader","Color","SRGBColorSpace","PDBLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","trim","replace","capitalize","charAt","toUpperCase","slice","toLowerCase","parseBond","start","length","satom","i","eatom","parseInt","lines","h","s","Math","min","max","undefined","_bhash","_bonds","push","CPK","he","li","be","b","c","n","o","f","ne","na","mg","al","si","p","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","y","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cn","uut","uuq","uup","uuh","uus","uuo","atoms","_atomMap","split","l","x","parseFloat","z","index","atomData","build","geometryAtoms","geometryBonds","json","verticesAtoms","colorsAtoms","verticesBonds","atom","r","g","setRGB","bond","end","startAtom","endAtom","setAttribute","buildGeometry"],"sources":["node_modules/three/examples/jsm/loaders/PDBLoader.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tColor,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * A loader for the PDB format.\n *\n * The [Protein Data Bank]{@link https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)}\n * file format is a textual file describing the three-dimensional structures of molecules.\n *\n * ```js\n * const loader = new PDBLoader();\n * const pdb = await loader.loadAsync( 'models/pdb/ethanol.pdb' );\n *\n * const geometryAtoms = pdb.geometryAtoms;\n * const geometryBonds = pdb.geometryBonds;\n * const json = pdb.json;\n * ```\n *\n * @augments Loader\n * @three_import import { PDBLoader } from 'three/addons/loaders/PDBLoader.js';\n */\nclass PDBLoader extends Loader {\n\n\t/**\n\t * Constructs a new PDB loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded PDB asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given PDB data and returns an object holding the atoms and\n\t * bond geometries as well as the raw atom data as JSON.\n\t *\n\t * @param {string} text - The raw PDB data as a string.\n\t * @return {Object} The result object.\n\t */\n\tparse( text ) {\n\n\t\t// Based on CanvasMol PDB parser\n\n\t\tfunction trim( text ) {\n\n\t\t\treturn text.replace( /^\\s\\s*/, '' ).replace( /\\s\\s*$/, '' );\n\n\t\t}\n\n\t\tfunction capitalize( text ) {\n\n\t\t\treturn text.charAt( 0 ).toUpperCase() + text.slice( 1 ).toLowerCase();\n\n\t\t}\n\n\t\tfunction hash( s, e ) {\n\n\t\t\treturn 's' + Math.min( s, e ) + 'e' + Math.max( s, e );\n\n\t\t}\n\n\t\tfunction parseBond( start, length, satom, i ) {\n\n\t\t\tconst eatom = parseInt( lines[ i ].slice( start, start + length ) );\n\n\t\t\tif ( eatom ) {\n\n\t\t\t\tconst h = hash( satom, eatom );\n\n\t\t\t\tif ( _bhash[ h ] === undefined ) {\n\n\t\t\t\t\t_bonds.push( [ satom - 1, eatom - 1, 1 ] );\n\t\t\t\t\t_bhash[ h ] = _bonds.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// doesn't really work as almost all PDBs\n\t\t\t\t\t// have just normal bonds appearing multiple\n\t\t\t\t\t// times instead of being double/triple bonds\n\t\t\t\t\t// bonds[bhash[h]][2] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry() {\n\n\t\t\tconst build = {\n\t\t\t\tgeometryAtoms: new BufferGeometry(),\n\t\t\t\tgeometryBonds: new BufferGeometry(),\n\t\t\t\tjson: {\n\t\t\t\t\tatoms: atoms\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst geometryAtoms = build.geometryAtoms;\n\t\t\tconst geometryBonds = build.geometryBonds;\n\n\t\t\tconst verticesAtoms = [];\n\t\t\tconst colorsAtoms = [];\n\t\t\tconst verticesBonds = [];\n\n\t\t\t// atoms\n\n\t\t\tconst c = new Color();\n\n\t\t\tfor ( let i = 0, l = atoms.length; i < l; i ++ ) {\n\n\t\t\t\tconst atom = atoms[ i ];\n\n\t\t\t\tconst x = atom[ 0 ];\n\t\t\t\tconst y = atom[ 1 ];\n\t\t\t\tconst z = atom[ 2 ];\n\n\t\t\t\tverticesAtoms.push( x, y, z );\n\n\t\t\t\tconst r = atom[ 3 ][ 0 ] / 255;\n\t\t\t\tconst g = atom[ 3 ][ 1 ] / 255;\n\t\t\t\tconst b = atom[ 3 ][ 2 ] / 255;\n\n\t\t\t\tc.setRGB( r, g, b, SRGBColorSpace );\n\n\t\t\t\tcolorsAtoms.push( c.r, c.g, c.b );\n\n\t\t\t}\n\n\t\t\t// bonds\n\n\t\t\tfor ( let i = 0, l = _bonds.length; i < l; i ++ ) {\n\n\t\t\t\tconst bond = _bonds[ i ];\n\n\t\t\t\tconst start = bond[ 0 ];\n\t\t\t\tconst end = bond[ 1 ];\n\n\t\t\t\tconst startAtom = _atomMap[ start ];\n\t\t\t\tconst endAtom = _atomMap[ end ];\n\n\t\t\t\tlet x = startAtom[ 0 ];\n\t\t\t\tlet y = startAtom[ 1 ];\n\t\t\t\tlet z = startAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t\tx = endAtom[ 0 ];\n\t\t\t\ty = endAtom[ 1 ];\n\t\t\t\tz = endAtom[ 2 ];\n\n\t\t\t\tverticesBonds.push( x, y, z );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tgeometryAtoms.setAttribute( 'position', new Float32BufferAttribute( verticesAtoms, 3 ) );\n\t\t\tgeometryAtoms.setAttribute( 'color', new Float32BufferAttribute( colorsAtoms, 3 ) );\n\n\t\t\tgeometryBonds.setAttribute( 'position', new Float32BufferAttribute( verticesBonds, 3 ) );\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tconst CPK = { h: [ 255, 255, 255 ], he: [ 217, 255, 255 ], li: [ 204, 128, 255 ], be: [ 194, 255, 0 ], b: [ 255, 181, 181 ], c: [ 144, 144, 144 ], n: [ 48, 80, 248 ], o: [ 255, 13, 13 ], f: [ 144, 224, 80 ], ne: [ 179, 227, 245 ], na: [ 171, 92, 242 ], mg: [ 138, 255, 0 ], al: [ 191, 166, 166 ], si: [ 240, 200, 160 ], p: [ 255, 128, 0 ], s: [ 255, 255, 48 ], cl: [ 31, 240, 31 ], ar: [ 128, 209, 227 ], k: [ 143, 64, 212 ], ca: [ 61, 255, 0 ], sc: [ 230, 230, 230 ], ti: [ 191, 194, 199 ], v: [ 166, 166, 171 ], cr: [ 138, 153, 199 ], mn: [ 156, 122, 199 ], fe: [ 224, 102, 51 ], co: [ 240, 144, 160 ], ni: [ 80, 208, 80 ], cu: [ 200, 128, 51 ], zn: [ 125, 128, 176 ], ga: [ 194, 143, 143 ], ge: [ 102, 143, 143 ], as: [ 189, 128, 227 ], se: [ 255, 161, 0 ], br: [ 166, 41, 41 ], kr: [ 92, 184, 209 ], rb: [ 112, 46, 176 ], sr: [ 0, 255, 0 ], y: [ 148, 255, 255 ], zr: [ 148, 224, 224 ], nb: [ 115, 194, 201 ], mo: [ 84, 181, 181 ], tc: [ 59, 158, 158 ], ru: [ 36, 143, 143 ], rh: [ 10, 125, 140 ], pd: [ 0, 105, 133 ], ag: [ 192, 192, 192 ], cd: [ 255, 217, 143 ], in: [ 166, 117, 115 ], sn: [ 102, 128, 128 ], sb: [ 158, 99, 181 ], te: [ 212, 122, 0 ], i: [ 148, 0, 148 ], xe: [ 66, 158, 176 ], cs: [ 87, 23, 143 ], ba: [ 0, 201, 0 ], la: [ 112, 212, 255 ], ce: [ 255, 255, 199 ], pr: [ 217, 255, 199 ], nd: [ 199, 255, 199 ], pm: [ 163, 255, 199 ], sm: [ 143, 255, 199 ], eu: [ 97, 255, 199 ], gd: [ 69, 255, 199 ], tb: [ 48, 255, 199 ], dy: [ 31, 255, 199 ], ho: [ 0, 255, 156 ], er: [ 0, 230, 117 ], tm: [ 0, 212, 82 ], yb: [ 0, 191, 56 ], lu: [ 0, 171, 36 ], hf: [ 77, 194, 255 ], ta: [ 77, 166, 255 ], w: [ 33, 148, 214 ], re: [ 38, 125, 171 ], os: [ 38, 102, 150 ], ir: [ 23, 84, 135 ], pt: [ 208, 208, 224 ], au: [ 255, 209, 35 ], hg: [ 184, 184, 208 ], tl: [ 166, 84, 77 ], pb: [ 87, 89, 97 ], bi: [ 158, 79, 181 ], po: [ 171, 92, 0 ], at: [ 117, 79, 69 ], rn: [ 66, 130, 150 ], fr: [ 66, 0, 102 ], ra: [ 0, 125, 0 ], ac: [ 112, 171, 250 ], th: [ 0, 186, 255 ], pa: [ 0, 161, 255 ], u: [ 0, 143, 255 ], np: [ 0, 128, 255 ], pu: [ 0, 107, 255 ], am: [ 84, 92, 242 ], cm: [ 120, 92, 227 ], bk: [ 138, 79, 227 ], cf: [ 161, 54, 212 ], es: [ 179, 31, 212 ], fm: [ 179, 31, 186 ], md: [ 179, 13, 166 ], no: [ 189, 13, 135 ], lr: [ 199, 0, 102 ], rf: [ 204, 0, 89 ], db: [ 209, 0, 79 ], sg: [ 217, 0, 69 ], bh: [ 224, 0, 56 ], hs: [ 230, 0, 46 ], mt: [ 235, 0, 38 ], ds: [ 235, 0, 38 ], rg: [ 235, 0, 38 ], cn: [ 235, 0, 38 ], uut: [ 235, 0, 38 ], uuq: [ 235, 0, 38 ], uup: [ 235, 0, 38 ], uuh: [ 235, 0, 38 ], uus: [ 235, 0, 38 ], uuo: [ 235, 0, 38 ] };\n\n\t\tconst atoms = [];\n\n\t\tconst _bonds = [];\n\t\tconst _bhash = {};\n\t\tconst _atomMap = {};\n\n\t\t// parse\n\n\t\tconst lines = text.split( '\\n' );\n\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tif ( lines[ i ].slice( 0, 4 ) === 'ATOM' || lines[ i ].slice( 0, 6 ) === 'HETATM' ) {\n\n\t\t\t\tconst x = parseFloat( lines[ i ].slice( 30, 37 ) );\n\t\t\t\tconst y = parseFloat( lines[ i ].slice( 38, 45 ) );\n\t\t\t\tconst z = parseFloat( lines[ i ].slice( 46, 53 ) );\n\t\t\t\tconst index = parseInt( lines[ i ].slice( 6, 11 ) ) - 1;\n\n\t\t\t\tlet e = trim( lines[ i ].slice( 76, 78 ) ).toLowerCase();\n\n\t\t\t\tif ( e === '' ) {\n\n\t\t\t\t\te = trim( lines[ i ].slice( 12, 14 ) ).toLowerCase();\n\n\t\t\t\t}\n\n\t\t\t\tconst atomData = [ x, y, z, CPK[ e ], capitalize( e ) ];\n\n\t\t\t\tatoms.push( atomData );\n\t\t\t\t_atomMap[ index ] = atomData;\n\n\t\t\t} else if ( lines[ i ].slice( 0, 6 ) === 'CONECT' ) {\n\n\t\t\t\tconst satom = parseInt( lines[ i ].slice( 6, 11 ) );\n\n\t\t\t\tparseBond( 11, 5, satom, i );\n\t\t\t\tparseBond( 16, 5, satom, i );\n\t\t\t\tparseBond( 21, 5, satom, i );\n\t\t\t\tparseBond( 26, 5, satom, i );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build and return geometry\n\n\t\treturn buildGeometry();\n\n\t}\n\n}\n\nexport { PDBLoader };\n"],"mappings":"OACCA,eACAC,WACAC,uBACAC,OACAC,MACAC,mBACM,QAoBP,MAAMC,kBAAkBH,OAOvB,WAAAI,CAAaC,GAEZC,MAAOD,EAER,CAWA,IAAAE,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAQC,KAERC,EAAS,IAAIhB,WAAYc,EAAMP,SACrCS,EAAOC,QAASH,EAAMI,MACtBF,EAAOG,iBAAkBL,EAAMM,eAC/BJ,EAAOK,mBAAoBP,EAAMQ,iBACjCN,EAAOP,KAAMC,GAAK,SAAWa,GAE5B,IAECZ,EAAQG,EAAMU,MAAOD,GAEtB,CAAE,MAAQE,GAEJZ,EAEJA,EAASY,GAITC,QAAQC,MAAOF,GAIhBX,EAAMP,QAAQqB,UAAWlB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,CASA,KAAAW,CAAOD,GAIN,SAASM,EAAMN,GAEd,OAAOA,EAAKO,QAAS,SAAU,IAAKA,QAAS,SAAU,GAExD,CAEA,SAASC,EAAYR,GAEpB,OAAOA,EAAKS,OAAQ,GAAIC,cAAgBV,EAAKW,MAAO,GAAIC,aAEzD,CAQA,SAASC,EAAWC,EAAOC,EAAQC,EAAOC,GAEzC,MAAMC,EAAQC,SAAUC,EAAOH,GAAIN,MAAOG,EAAOA,EAAQC,IAEzD,GAAKG,EAAQ,CAEZ,MAAMG,GAZOC,EAYGN,EAZAd,EAYOgB,EAVjB,IAAMK,KAAKC,IAAKF,EAAGpB,GAAM,IAAMqB,KAAKE,IAAKH,EAAGpB,SAY7BwB,IAAhBC,EAAQN,KAEZO,EAAOC,KAAM,CAAEb,EAAQ,EAAGE,EAAQ,EAAG,IACrCS,EAAQN,GAAMO,EAAOb,OAAS,EAWhC,CA5BD,IAAeO,EAAGpB,CA8BlB,CAgFA,MAAM4B,EAAM,CAAET,EAAG,CAAE,IAAK,IAAK,KAAOU,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,GAAKC,EAAG,CAAE,IAAK,IAAK,KAAOC,EAAG,CAAE,IAAK,IAAK,KAAOC,EAAG,CAAE,GAAI,GAAI,KAAOC,EAAG,CAAE,IAAK,GAAI,IAAMC,EAAG,CAAE,IAAK,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,IAAK,GAAKC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,EAAG,CAAE,IAAK,IAAK,GAAKtB,EAAG,CAAE,IAAK,IAAK,IAAMuB,GAAI,CAAE,GAAI,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,KAAOC,EAAG,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,GAAI,IAAK,GAAKC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,EAAG,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,GAAKC,GAAI,CAAE,IAAK,GAAI,IAAMC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,EAAG,IAAK,GAAKC,EAAG,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,IAAK,GAAK/D,EAAG,CAAE,IAAK,EAAG,KAAOgE,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,GAAI,KAAOC,GAAI,CAAE,EAAG,IAAK,GAAKC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,IAAMC,GAAI,CAAE,EAAG,IAAK,IAAMC,GAAI,CAAE,EAAG,IAAK,IAAMC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,EAAG,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,GAAI,KAAOC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,IAAK,IAAMC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,IAAK,GAAI,IAAMC,GAAI,CAAE,GAAI,GAAI,IAAMC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,GAAKC,GAAI,CAAE,IAAK,GAAI,IAAMC,GAAI,CAAE,GAAI,IAAK,KAAOC,GAAI,CAAE,GAAI,EAAG,KAAOC,GAAI,CAAE,EAAG,IAAK,GAAKC,GAAI,CAAE,IAAK,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,EAAG,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,EAAG,IAAK,KAAOC,GAAI,CAAE,GAAI,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,GAAI,CAAE,IAAK,GAAI,KAAOC,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","ignoreList":[]}