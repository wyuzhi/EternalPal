import{DataTextureLoader,LinearMipmapLinearFilter}from"three";class TGALoader extends DataTextureLoader{constructor(e){super(e)}parse(e){const r=0,t=1,a=2,o=3,i=9,n=10,s=11,c=48,l=4,h=0,d=1,p=2,f=3;if(e.length<19)throw new Error("THREE.TGALoader: Not enough data to contain header.");let w=0;const E=new Uint8Array(e),_={id_length:E[w++],colormap_type:E[w++],image_type:E[w++],colormap_index:E[w++]|E[w++]<<8,colormap_length:E[w++]|E[w++]<<8,colormap_size:E[w++],origin:[E[w++]|E[w++]<<8,E[w++]|E[w++]<<8],width:E[w++]|E[w++]<<8,height:E[w++]|E[w++]<<8,pixel_size:E[w++],flags:E[w++]};if(function(e){switch(e.image_type){case t:case i:if(e.colormap_length>256||24!==e.colormap_size||1!==e.colormap_type)throw new Error("THREE.TGALoader: Invalid type colormap data for indexed type.");break;case a:case o:case n:case s:if(e.colormap_type)throw new Error("THREE.TGALoader: Invalid type colormap data for colormap type.");break;case r:throw new Error("THREE.TGALoader: No data.");default:throw new Error("THREE.TGALoader: Invalid type "+e.image_type)}if(e.width<=0||e.height<=0)throw new Error("THREE.TGALoader: Invalid image size.");if(8!==e.pixel_size&&16!==e.pixel_size&&24!==e.pixel_size&&32!==e.pixel_size)throw new Error("THREE.TGALoader: Invalid pixel size "+e.pixel_size)}(_),_.id_length+w>e.length)throw new Error("THREE.TGALoader: No data.");w+=_.id_length;let g=!1,m=!1,u=!1;switch(_.image_type){case i:g=!0,m=!0;break;case t:m=!0;break;case n:g=!0;break;case a:break;case s:g=!0,u=!0;break;case o:u=!0}const T=new Uint8Array(_.width*_.height*4),b=function(e,r,t,a,o){let i,n;const s=t.pixel_size>>3,c=t.width*t.height*s;if(r&&(n=o.subarray(a,a+=t.colormap_length*(t.colormap_size>>3))),e){let e,r,t;i=new Uint8Array(c);let n=0;const l=new Uint8Array(s);for(;n<c;)if(e=o[a++],r=1+(127&e),128&e){for(t=0;t<s;++t)l[t]=o[a++];for(t=0;t<r;++t)i.set(l,n+t*s);n+=s*r}else{for(r*=s,t=0;t<r;++t)i[n+t]=o[a++];n+=r}}else i=o.subarray(a,a+=r?t.width*t.height:c);return{pixel_data:i,palettes:n}}(g,m,_,w,E);return function(e,r,t,a,o){let i,n,s,w,E,g;switch((_.flags&c)>>l){default:case p:i=0,s=1,E=r,n=0,w=1,g=t;break;case h:i=0,s=1,E=r,n=t-1,w=-1,g=-1;break;case f:i=r-1,s=-1,E=-1,n=0,w=1,g=t;break;case d:i=r-1,s=-1,E=-1,n=t-1,w=-1,g=-1}if(u)switch(_.pixel_size){case 8:!function(e,r,t,a,o,i,n,s){let c,l,h,d=0;const p=_.width;for(h=r;h!==a;h+=t)for(l=o;l!==n;l+=i,d++)c=s[d],e[4*(l+p*h)+0]=c,e[4*(l+p*h)+1]=c,e[4*(l+p*h)+2]=c,e[4*(l+p*h)+3]=255}(e,n,w,g,i,s,E,a);break;case 16:!function(e,r,t,a,o,i,n,s){let c,l,h=0;const d=_.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,h+=2)e[4*(c+d*l)+0]=s[h+0],e[4*(c+d*l)+1]=s[h+0],e[4*(c+d*l)+2]=s[h+0],e[4*(c+d*l)+3]=s[h+1]}(e,n,w,g,i,s,E,a);break;default:throw new Error("THREE.TGALoader: Format not supported.")}else switch(_.pixel_size){case 8:!function(e,r,t,a,o,i,n,s,c){const l=c;let h,d,p,f=0;const w=_.width;for(p=r;p!==a;p+=t)for(d=o;d!==n;d+=i,f++)h=s[f],e[4*(d+w*p)+3]=255,e[4*(d+w*p)+2]=l[3*h+0],e[4*(d+w*p)+1]=l[3*h+1],e[4*(d+w*p)+0]=l[3*h+2]}(e,n,w,g,i,s,E,a,o);break;case 16:!function(e,r,t,a,o,i,n,s){let c,l,h,d=0;const p=_.width;for(h=r;h!==a;h+=t)for(l=o;l!==n;l+=i,d+=2)c=s[d+0]+(s[d+1]<<8),e[4*(l+p*h)+0]=(31744&c)>>7,e[4*(l+p*h)+1]=(992&c)>>2,e[4*(l+p*h)+2]=(31&c)<<3,e[4*(l+p*h)+3]=32768&c?0:255}(e,n,w,g,i,s,E,a);break;case 24:!function(e,r,t,a,o,i,n,s){let c,l,h=0;const d=_.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,h+=3)e[4*(c+d*l)+3]=255,e[4*(c+d*l)+2]=s[h+0],e[4*(c+d*l)+1]=s[h+1],e[4*(c+d*l)+0]=s[h+2]}(e,n,w,g,i,s,E,a);break;case 32:!function(e,r,t,a,o,i,n,s){let c,l,h=0;const d=_.width;for(l=r;l!==a;l+=t)for(c=o;c!==n;c+=i,h+=4)e[4*(c+d*l)+2]=s[h+0],e[4*(c+d*l)+1]=s[h+1],e[4*(c+d*l)+0]=s[h+2],e[4*(c+d*l)+3]=s[h+3]}(e,n,w,g,i,s,E,a);break;default:throw new Error("THREE.TGALoader: Format not supported.")}}(T,_.width,_.height,b.pixel_data,b.palettes),{data:T,width:_.width,height:_.height,flipY:!0,generateMipmaps:!0,minFilter:LinearMipmapLinearFilter}}}export{TGALoader};
//# sourceMappingURL=TGALoader.js.map