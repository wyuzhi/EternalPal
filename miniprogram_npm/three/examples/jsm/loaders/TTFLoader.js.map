{"version":3,"file":"node_modules/three/examples/jsm/loaders/TTFLoader.js","names":["FileLoader","Loader","opentype","TTFLoader","constructor","manager","super","this","reversed","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","arraybuffer","reverseCommands","commands","paths","forEach","c","type","toLowerCase","push","p","result","x","length","y","i","command","undefined","x2","y2","x1","y1","font","round","Math","glyphs","scale","unitsPerEm","glyphIndexMap","encoding","cmap","unicodes","Object","keys","unicode","glyph","token","ha","advanceWidth","x_min","xMin","x_max","xMax","o","Array","isArray","String","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","boundingBox","head","yMin","yMax","resolution","original_font_information","name","convert"],"sources":["node_modules/three/examples/jsm/loaders/TTFLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader\n} from 'three';\nimport opentype from '../libs/opentype.module.js';\n\n/**\n * A loader for the TTF format.\n *\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n *\n * ```js\n * const loader = new TTFLoader();\n * const json = await loader.loadAsync( 'fonts/ttf/kenpixel.ttf' );\n * const font = new Font( json );\n * ```\n *\n * @augments Loader\n * @three_import import { TTFLoader } from 'three/addons/loaders/TTFLoader.js';\n */\nclass TTFLoader extends Loader {\n\n\t/**\n\t * Constructs a new TTF loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Whether the TTF commands should be reversed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.reversed = false;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded TTF asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Object)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given TTF data and returns a JSON for creating a font.\n\t *\n\t * @param {ArrayBuffer} arraybuffer - The raw TTF data as an array buffer.\n\t * @return {Object} The result JSON.\n\t */\n\tparse( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tconst round = Math.round;\n\n\t\t\tconst glyphs = {};\n\t\t\tconst scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tconst glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tconst unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( let i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tconst unicode = unicodes[ i ];\n\t\t\t\tconst glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tconst token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tif ( Array.isArray( glyph.unicodes ) && glyph.unicodes.length > 0 ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tglyph.unicodes.forEach( function ( unicode ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tglyphs[ String.fromCodePoint( unicode ) ] = token;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} );\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tconst paths = [];\n\t\t\tlet path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tconst result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( let i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tconst command = p[ i ];\n\t\t\t\t\tconst result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n}\n\nexport { TTFLoader };\n"],"mappings":"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","ignoreList":[]}