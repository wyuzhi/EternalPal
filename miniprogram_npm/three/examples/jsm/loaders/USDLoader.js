import{FileLoader,Loader}from"three";import*as fflate from"../libs/fflate.module.js";import{USDAParser}from"./usd/USDAParser.js";import{USDCParser}from"./usd/USDCParser.js";class USDLoader extends Loader{constructor(e){super(e)}load(e,r,t,s){const n=this,a=new FileLoader(n.manager);a.setPath(n.path),a.setResponseType("arraybuffer"),a.setRequestHeader(n.requestHeader),a.setWithCredentials(n.withCredentials),a.load(e,(function(t){try{r(n.parse(t))}catch(r){s?s(r):console.error(r),n.manager.itemError(e)}}),t,s)}parse(e){const r=new USDAParser,t=new USDCParser;function s(e){const r=new Uint8Array([80,88,82,45,85,83,68,67]);if(e.byteLength<r.length)return!1;const t=new Uint8Array(e,0,r.length);for(let e=0;e<r.length;e++)if(t[e]!==r[e])return!1;return!0}if("string"==typeof e)return r.parse(e,{});if(s(e))return t.parse(e);const n=fflate.unzipSync(new Uint8Array(e)),a=function(e){const n={};(new FileLoader).setResponseType("arraybuffer");for(const a in e){if(a.endsWith("png")){const r=new Blob([e[a]],{type:"image/png"});n[a]=URL.createObjectURL(r)}if(a.endsWith("usd")||a.endsWith("usda")||a.endsWith("usdc"))if(s(e[a]))n[a]=t.parse(e[a].buffer,n);else{const t=fflate.strFromU8(e[a]);n[a]=r.parseText(t)}}return n}(n),o=function(e){if(e.length<1)return;const r=Object.keys(e)[0];let t=!1;if(r.endsWith("usda"))return e[r];if(r.endsWith("usdc"))t=!0;else if(r.endsWith("usd")){if(!s(e[r]))return e[r];t=!0}return t?e[r]:void 0}(n),i=fflate.strFromU8(o);return r.parse(i,a)}}export{USDLoader};
//# sourceMappingURL=USDLoader.js.map