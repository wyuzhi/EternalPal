{"version":3,"file":"node_modules/three/examples/jsm/loaders/USDLoader.js","names":["FileLoader","Loader","fflate","USDAParser","USDCParser","USDLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","buffer","usda","usdc","isCrateFile","crateHeader","Uint8Array","byteLength","length","view","i","zip","unzipSync","assets","data","filename","endsWith","blob","Blob","type","URL","createObjectURL","strFromU8","parseText","parseAssets","file","firstFileName","Object","keys","isCrate","findUSD"],"sources":["node_modules/three/examples/jsm/loaders/USDLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader\n} from 'three';\n\nimport * as fflate from '../libs/fflate.module.js';\nimport { USDAParser } from './usd/USDAParser.js';\nimport { USDCParser } from './usd/USDCParser.js';\n\n/**\n * A loader for the USDZ format.\n *\n * USDZ files that use USDC internally are not yet supported, only USDA.\n *\n * ```js\n * const loader = new USDZLoader();\n * const model = await loader.loadAsync( 'saeukkang.usdz' );\n * scene.add( model );\n * ```\n *\n * @augments Loader\n * @three_import import { USDLoader } from 'three/addons/loaders/USDLoader.js';\n */\nclass USDLoader extends Loader {\n\n\t/**\n\t * Constructs a new USDZ loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded USDZ asset\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Group)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given USDZ data and returns the resulting group.\n\t *\n\t * @param {ArrayBuffer|string} buffer - The raw USDZ data as an array buffer.\n\t * @return {Group} The parsed asset as a group.\n\t */\n\tparse( buffer ) {\n\n\t\tconst usda = new USDAParser();\n\t\tconst usdc = new USDCParser();\n\n\t\tfunction parseAssets( zip ) {\n\n\t\t\tconst data = {};\n\t\t\tconst loader = new FileLoader();\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfor ( const filename in zip ) {\n\n\t\t\t\tif ( filename.endsWith( 'png' ) ) {\n\n\t\t\t\t\tconst blob = new Blob( [ zip[ filename ] ], { type: 'image/png' } );\n\t\t\t\t\tdata[ filename ] = URL.createObjectURL( blob );\n\n\t\t\t\t}\n\n\t\t\t\tif ( filename.endsWith( 'usd' ) || filename.endsWith( 'usda' ) || filename.endsWith( 'usdc' ) ) {\n\n\t\t\t\t\tif ( isCrateFile( zip[ filename ] ) ) {\n\n\t\t\t\t\t\tdata[ filename ] = usdc.parse( zip[ filename ].buffer, data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst text = fflate.strFromU8( zip[ filename ] );\n\t\t\t\t\t\tdata[ filename ] = usda.parseText( text );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction isCrateFile( buffer ) {\n\n\t\t\tconst crateHeader = new Uint8Array( [ 0x50, 0x58, 0x52, 0x2D, 0x55, 0x53, 0x44, 0x43 ] ); // PXR-USDC\n\n\t\t\tif ( buffer.byteLength < crateHeader.length ) return false;\n\n\t\t\tconst view = new Uint8Array( buffer, 0, crateHeader.length );\n\n\t\t\tfor ( let i = 0; i < crateHeader.length; i ++ ) {\n\n\t\t\t\tif ( view[ i ] !== crateHeader[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction findUSD( zip ) {\n\n\t\t\tif ( zip.length < 1 ) return undefined;\n\n\t\t\tconst firstFileName = Object.keys( zip )[ 0 ];\n\t\t\tlet isCrate = false;\n\n\t\t\t// As per the USD specification, the first entry in the zip archive is used as the main file (\"UsdStage\").\n\t\t\t// ASCII files can end in either .usda or .usd.\n\t\t\t// See https://openusd.org/release/spec_usdz.html#layout\n\t\t\tif ( firstFileName.endsWith( 'usda' ) ) return zip[ firstFileName ];\n\n\t\t\tif ( firstFileName.endsWith( 'usdc' ) ) {\n\n\t\t\t\tisCrate = true;\n\n\t\t\t} else if ( firstFileName.endsWith( 'usd' ) ) {\n\n\t\t\t\t// If this is not a crate file, we assume it is a plain USDA file.\n\t\t\t\tif ( ! isCrateFile( zip[ firstFileName ] ) ) {\n\n\t\t\t\t\treturn zip[ firstFileName ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tisCrate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isCrate ) {\n\n\t\t\t\treturn zip[ firstFileName ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// USDA\n\n\t\tif ( typeof buffer === 'string' ) {\n\n\t\t\treturn usda.parse( buffer, {} );\n\n\t\t}\n\n\t\t// USDC\n\n\t\tif ( isCrateFile( buffer ) ) {\n\n\t\t\treturn usdc.parse( buffer );\n\n\t\t}\n\n\t\t// USDZ\n\n\t\tconst zip = fflate.unzipSync( new Uint8Array( buffer ) );\n\n\t\tconst assets = parseAssets( zip );\n\n\t\t// console.log( assets );\n\n\t\tconst file = findUSD( zip );\n\n\t\tconst text = fflate.strFromU8( file );\n\n\t\treturn usda.parse( text, assets );\n\n\t}\n\n}\n\nexport { USDLoader };\n"],"mappings":"OACCA,WACAC,WACM,kBAEKC,WAAY,kCACfC,eAAkB,6BAClBC,eAAkB,sBAgB3B,MAAMC,kBAAkBJ,OAOvB,WAAAK,CAAaC,GAEZC,MAAOD,EAER,CAWA,IAAAE,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAQC,KAERC,EAAS,IAAIhB,WAAYc,EAAMP,SACrCS,EAAOC,QAASH,EAAMI,MACtBF,EAAOG,gBAAiB,eACxBH,EAAOI,iBAAkBN,EAAMO,eAC/BL,EAAOM,mBAAoBR,EAAMS,iBACjCP,EAAOP,KAAMC,GAAK,SAAWc,GAE5B,IAECb,EAAQG,EAAMW,MAAOD,GAEtB,CAAE,MAAQE,GAEJb,EAEJA,EAASa,GAITC,QAAQC,MAAOF,GAIhBZ,EAAMP,QAAQsB,UAAWnB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,CAQA,KAAAY,CAAOK,GAEN,MAAMC,EAAO,IAAI5B,WACX6B,EAAO,IAAI5B,WAsCjB,SAAS6B,EAAaH,GAErB,MAAMI,EAAc,IAAIC,WAAY,CAAE,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAEhF,GAAKL,EAAOM,WAAaF,EAAYG,OAAS,OAAO,EAErD,MAAMC,EAAO,IAAIH,WAAYL,EAAQ,EAAGI,EAAYG,QAEpD,IAAM,IAAIE,EAAI,EAAGA,EAAIL,EAAYG,OAAQE,IAExC,GAAKD,EAAMC,KAAQL,EAAaK,GAAM,OAAO,EAI9C,OAAO,CAER,CA2CA,GAAuB,iBAAXT,EAEX,OAAOC,EAAKN,MAAOK,EAAQ,CAAC,GAM7B,GAAKG,EAAaH,GAEjB,OAAOE,EAAKP,MAAOK,GAMpB,MAAMU,EAAMtC,OAAOuC,UAAW,IAAIN,WAAYL,IAExCY,EAjHN,SAAsBF,GAErB,MAAMG,EAAO,CAAC,GACC,IAAI3C,YACZmB,gBAAiB,eAExB,IAAM,MAAMyB,KAAYJ,EAAM,CAE7B,GAAKI,EAASC,SAAU,OAAU,CAEjC,MAAMC,EAAO,IAAIC,KAAM,CAAEP,EAAKI,IAAc,CAAEI,KAAM,cACpDL,EAAMC,GAAaK,IAAIC,gBAAiBJ,EAEzC,CAEA,GAAKF,EAASC,SAAU,QAAWD,EAASC,SAAU,SAAYD,EAASC,SAAU,QAEpF,GAAKZ,EAAaO,EAAKI,IAEtBD,EAAMC,GAAaZ,EAAKP,MAAOe,EAAKI,GAAWd,OAAQa,OAEjD,CAEN,MAAMnB,EAAOtB,OAAOiD,UAAWX,EAAKI,IACpCD,EAAMC,GAAab,EAAKqB,UAAW5B,EAEpC,CAIF,CAEA,OAAOmB,CAER,CA+EeU,CAAab,GAItBc,EA/DN,SAAkBd,GAEjB,GAAKA,EAAIH,OAAS,EAAI,OAEtB,MAAMkB,EAAgBC,OAAOC,KAAMjB,GAAO,GAC1C,IAAIkB,GAAU,EAKd,GAAKH,EAAcV,SAAU,QAAW,OAAOL,EAAKe,GAEpD,GAAKA,EAAcV,SAAU,QAE5Ba,GAAU,OAEJ,GAAKH,EAAcV,SAAU,OAAU,CAG7C,IAAOZ,EAAaO,EAAKe,IAExB,OAAOf,EAAKe,GAIZG,GAAU,CAIZ,CAEA,OAAKA,EAEGlB,EAAKe,QAFb,CAMD,CA0BaI,CAASnB,GAEhBhB,EAAOtB,OAAOiD,UAAWG,GAE/B,OAAOvB,EAAKN,MAAOD,EAAMkB,EAE1B,SAIQrC","ignoreList":[]}