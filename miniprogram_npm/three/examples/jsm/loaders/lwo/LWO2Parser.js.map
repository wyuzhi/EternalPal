{"version":3,"file":"node_modules/three/examples/jsm/loaders/lwo/LWO2Parser.js","names":["LWO2Parser","constructor","IFFParser","this","IFF","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dv","byteLength","getUint16","dataOffset","parseForm","skipped","skip","parseSurfaceLwo2","parseClipLwo2","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","getVariableLengthIndex","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","h","index","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"sources":["node_modules/three/examples/jsm/loaders/lwo/LWO2Parser.js"],"sourcesContent":["class LWO2Parser {\n\n\tconstructor( IFFParser ) {\n\n\t\tthis.IFF = IFFParser;\n\n\t}\n\n\tparseBlock() {\n\n\t\tthis.IFF.debugger.offset = this.IFF.reader.offset;\n\t\tthis.IFF.debugger.closeForms();\n\n\t\tconst blockID = this.IFF.reader.getIDTag();\n\t\tlet length = this.IFF.reader.getUint32(); // size of data in bytes\n\t\tif ( length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset ) {\n\n\t\t\tthis.IFF.reader.offset -= 4;\n\t\t\tlength = this.IFF.reader.getUint16();\n\n\t\t}\n\n\t\tthis.IFF.debugger.dataOffset = this.IFF.reader.offset;\n\t\tthis.IFF.debugger.length = length;\n\n\t\t// Data types may be found in either LWO2 OR LWO3 spec\n\t\tswitch ( blockID ) {\n\n\t\t\tcase 'FORM': // form blocks may consist of sub -chunks or sub-forms\n\t\t\t\tthis.IFF.parseForm( length );\n\t\t\t\tbreak;\n\n\t\t\t// SKIPPED CHUNKS\n\t\t\t// if break; is called directly, the position in the lwoTree is not created\n\t\t\t// any sub chunks and forms are added to the parent form instead\n\t\t\t// MISC skipped\n\t\t\tcase 'ICON': // Thumbnail Icon Image\n\t\t\tcase 'VMPA': // Vertex Map Parameter\n\t\t\tcase 'BBOX': // bounding box\n\t\t\t// case 'VMMD':\n\t\t\t// case 'VTYP':\n\n\t\t\t// normal maps can be specified, normally on models imported from other applications. Currently ignored\n\t\t\tcase 'NORM':\n\n\t\t\t// ENVL FORM skipped\n\t\t\tcase 'PRE ':\n\t\t\tcase 'POST':\n\t\t\tcase 'KEY ':\n\t\t\tcase 'SPAN':\n\n\t\t\t// CLIP FORM skipped\n\t\t\tcase 'TIME':\n\t\t\tcase 'CLRS':\n\t\t\tcase 'CLRA':\n\t\t\tcase 'FILT':\n\t\t\tcase 'DITH':\n\t\t\tcase 'CONT':\n\t\t\tcase 'BRIT':\n\t\t\tcase 'SATR':\n\t\t\tcase 'HUE ':\n\t\t\tcase 'GAMM':\n\t\t\tcase 'NEGA':\n\t\t\tcase 'IFLT':\n\t\t\tcase 'PFLT':\n\n\t\t\t// Image Map Layer skipped\n\t\t\tcase 'PROJ':\n\t\t\tcase 'AXIS':\n\t\t\tcase 'AAST':\n\t\t\tcase 'PIXB':\n\t\t\tcase 'AUVO':\n\t\t\tcase 'STCK':\n\n\t\t\t// Procedural Textures skipped\n\t\t\tcase 'PROC':\n\t\t\tcase 'VALU':\n\t\t\tcase 'FUNC':\n\n\t\t\t// Gradient Textures skipped\n\t\t\tcase 'PNAM':\n\t\t\tcase 'INAM':\n\t\t\tcase 'GRST':\n\t\t\tcase 'GREN':\n\t\t\tcase 'GRPT':\n\t\t\tcase 'FKEY':\n\t\t\tcase 'IKEY':\n\n\t\t\t// Texture Mapping Form skipped\n\t\t\tcase 'CSYS':\n\n\t\t\t// Surface CHUNKs skipped\n\t\t\tcase 'OPAQ': // top level 'opacity' checkbox\n\t\t\tcase 'CMAP': // clip map\n\n\t\t\t// Surface node CHUNKS skipped\n\t\t\t// These mainly specify the node editor setup in LW\n\t\t\tcase 'NLOC':\n\t\t\tcase 'NZOM':\n\t\t\tcase 'NVER':\n\t\t\tcase 'NSRV':\n\t\t\tcase 'NVSK': // unknown\n\t\t\tcase 'NCRD':\n\t\t\tcase 'WRPW': // image wrap w ( for cylindrical and spherical projections)\n\t\t\tcase 'WRPH': // image wrap h\n\t\t\tcase 'NMOD':\n\t\t\tcase 'NSEL':\n\t\t\tcase 'NPRW':\n\t\t\tcase 'NPLA':\n\t\t\tcase 'NODS':\n\t\t\tcase 'VERS':\n\t\t\tcase 'ENUM':\n\t\t\tcase 'TAG ':\n\t\t\tcase 'OPAC':\n\n\t\t\t// Car Material CHUNKS\n\t\t\tcase 'CGMD':\n\t\t\tcase 'CGTY':\n\t\t\tcase 'CGST':\n\t\t\tcase 'CGEN':\n\t\t\tcase 'CGTS':\n\t\t\tcase 'CGTE':\n\t\t\tcase 'OSMP':\n\t\t\tcase 'OMDE':\n\t\t\tcase 'OUTR':\n\t\t\tcase 'FLAG':\n\n\t\t\tcase 'TRNL':\n\t\t\tcase 'GLOW':\n\t\t\tcase 'GVAL': // glow intensity\n\t\t\tcase 'SHRP':\n\t\t\tcase 'RFOP':\n\t\t\tcase 'RSAN':\n\t\t\tcase 'TROP':\n\t\t\tcase 'RBLR':\n\t\t\tcase 'TBLR':\n\t\t\tcase 'CLRH':\n\t\t\tcase 'CLRF':\n\t\t\tcase 'ADTR':\n\t\t\tcase 'LINE':\n\t\t\tcase 'ALPH':\n\t\t\tcase 'VCOL':\n\t\t\tcase 'ENAB':\n\t\t\t\tthis.IFF.debugger.skipped = true;\n\t\t\t\tthis.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'SURF':\n\t\t\t\tthis.IFF.parseSurfaceLwo2( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'CLIP':\n\t\t\t\tthis.IFF.parseClipLwo2( length );\n\t\t\t\tbreak;\n\n\t\t\t// Texture node chunks (not in spec)\n\t\t\tcase 'IPIX': // usePixelBlending\n\t\t\tcase 'IMIP': // useMipMaps\n\t\t\tcase 'IMOD': // imageBlendingMode\n\t\t\tcase 'AMOD': // unknown\n\t\t\tcase 'IINV': // imageInvertAlpha\n\t\t\tcase 'INCR': // imageInvertColor\n\t\t\tcase 'IAXS': // imageAxis ( for non-UV maps)\n\t\t\tcase 'IFOT': // imageFallofType\n\t\t\tcase 'ITIM': // timing for animated textures\n\t\t\tcase 'IWRL':\n\t\t\tcase 'IUTI':\n\t\t\tcase 'IINX':\n\t\t\tcase 'IINY':\n\t\t\tcase 'IINZ':\n\t\t\tcase 'IREF': // possibly a VX for reused texture nodes\n\t\t\t\tif ( length === 4 ) this.IFF.currentNode[ blockID ] = this.IFF.reader.getInt32();\n\t\t\t\telse this.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'OTAG':\n\t\t\t\tthis.IFF.parseObjectTag();\n\t\t\t\tbreak;\n\n\t\t\tcase 'LAYR':\n\t\t\t\tthis.IFF.parseLayer( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'PNTS':\n\t\t\t\tthis.IFF.parsePoints( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'VMAP':\n\t\t\t\tthis.IFF.parseVertexMapping( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'AUVU':\n\t\t\tcase 'AUVN':\n\t\t\t\tthis.IFF.reader.skip( length - 1 );\n\t\t\t\tthis.IFF.reader.getVariableLengthIndex(); // VX\n\t\t\t\tbreak;\n\n\t\t\tcase 'POLS':\n\t\t\t\tthis.IFF.parsePolygonList( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TAGS':\n\t\t\t\tthis.IFF.parseTagStrings( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'PTAG':\n\t\t\t\tthis.IFF.parsePolygonTagMapping( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'VMAD':\n\t\t\t\tthis.IFF.parseVertexMapping( length, true );\n\t\t\t\tbreak;\n\n\t\t\t// Misc CHUNKS\n\t\t\tcase 'DESC': // Description Line\n\t\t\t\tthis.IFF.currentForm.description = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'TEXT':\n\t\t\tcase 'CMNT':\n\t\t\tcase 'NCOM':\n\t\t\t\tthis.IFF.currentForm.comment = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Envelope Form\n\t\t\tcase 'NAME':\n\t\t\t\tthis.IFF.currentForm.channelName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Image Map Layer\n\t\t\tcase 'WRAP':\n\t\t\t\tthis.IFF.currentForm.wrap = { w: this.IFF.reader.getUint16(), h: this.IFF.reader.getUint16() };\n\t\t\t\tbreak;\n\n\t\t\tcase 'IMAG':\n\t\t\t\tconst index = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tthis.IFF.currentForm.imageIndex = index;\n\t\t\t\tbreak;\n\n\t\t\t// Texture Mapping Form\n\t\t\tcase 'OREF':\n\t\t\t\tthis.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'ROID':\n\t\t\t\tthis.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\n\t\t\t// Surface Blocks\n\t\t\tcase 'SSHN':\n\t\t\t\tthis.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'AOVN':\n\t\t\t\tthis.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\t// Nodal Blocks\n\t\t\tcase 'NSTA':\n\t\t\t\tthis.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n\t\t\t\tbreak;\n\n\t\t\tcase 'NRNM':\n\t\t\t\tthis.IFF.currentForm.realName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'NNME':\n\t\t\t\tthis.IFF.currentForm.refName = this.IFF.reader.getString();\n\t\t\t\tthis.IFF.currentSurface.nodes[ this.IFF.currentForm.refName ] = this.IFF.currentForm;\n\t\t\t\tbreak;\n\n\t\t\t// Nodal Blocks : connections\n\t\t\tcase 'INME':\n\t\t\t\tif ( ! this.IFF.currentForm.nodeName ) this.IFF.currentForm.nodeName = [];\n\t\t\t\tthis.IFF.currentForm.nodeName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IINN':\n\t\t\t\tif ( ! this.IFF.currentForm.inputNodeName ) this.IFF.currentForm.inputNodeName = [];\n\t\t\t\tthis.IFF.currentForm.inputNodeName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IINM':\n\t\t\t\tif ( ! this.IFF.currentForm.inputName ) this.IFF.currentForm.inputName = [];\n\t\t\t\tthis.IFF.currentForm.inputName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IONM':\n\t\t\t\tif ( ! this.IFF.currentForm.inputOutputName ) this.IFF.currentForm.inputOutputName = [];\n\t\t\t\tthis.IFF.currentForm.inputOutputName.push( this.IFF.reader.getString() );\n\t\t\t\tbreak;\n\n\t\t\tcase 'FNAM':\n\t\t\t\tthis.IFF.currentForm.fileName = this.IFF.reader.getString();\n\t\t\t\tbreak;\n\n\t\t\tcase 'CHAN': // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n\t\t\t\tif ( length === 4 ) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();\n\t\t\t\telse this.IFF.reader.skip( length );\n\t\t\t\tbreak;\n\n\t\t\t// LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\t\t\tcase 'SMAN':\n\t\t\t\tconst maxSmoothingAngle = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.currentSurface.attributes.smooth = ( maxSmoothingAngle < 0 ) ? false : true;\n\t\t\t\tbreak;\n\n\t\t\t// LWO2: Basic Surface Parameters\n\t\t\tcase 'COLR':\n\t\t\t\tthis.IFF.currentSurface.attributes.Color = { value: this.IFF.reader.getFloat32Array( 3 ) };\n\t\t\t\tthis.IFF.reader.skip( 2 ); // VX: envelope\n\t\t\t\tbreak;\n\n\t\t\tcase 'LUMI':\n\t\t\t\tthis.IFF.currentSurface.attributes.Luminosity = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'SPEC':\n\t\t\t\tthis.IFF.currentSurface.attributes.Specular = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'DIFF':\n\t\t\t\tthis.IFF.currentSurface.attributes.Diffuse = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'REFL':\n\t\t\t\tthis.IFF.currentSurface.attributes.Reflection = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'GLOS':\n\t\t\t\tthis.IFF.currentSurface.attributes.Glossiness = { value: this.IFF.reader.getFloat32() };\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TRAN':\n\t\t\t\tthis.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'BUMP':\n\t\t\t\tthis.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'SIDE':\n\t\t\t\tthis.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n\t\t\t\tbreak;\n\n\t\t\tcase 'RIMG':\n\t\t\t\tthis.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tbreak;\n\n\t\t\tcase 'RIND':\n\t\t\t\tthis.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TIMG':\n\t\t\t\tthis.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n\t\t\t\tbreak;\n\n\t\t\tcase 'IMAP':\n\t\t\t\tthis.IFF.reader.skip( 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 'TMAP':\n\t\t\t\tthis.IFF.debugger.skipped = true;\n\t\t\t\tthis.IFF.reader.skip( length ); // needs implementing\n\t\t\t\tbreak;\n\n\t\t\tcase 'IUVI': // uv channel name\n\t\t\t\tthis.IFF.currentNode.UVChannel = this.IFF.reader.getString( length );\n\t\t\t\tbreak;\n\n\t\t\tcase 'IUTL': // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n\t\t\t\tthis.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\t\t\tcase 'IVTL': // heightWrappingMode\n\t\t\t\tthis.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n\t\t\t\tbreak;\n\n\t\t\t// LWO2 USE\n\t\t\tcase 'BLOK':\n\t\t\t\t// skip\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.IFF.parseUnknownCHUNK( blockID, length );\n\n\t\t}\n\n\t\tif ( blockID != 'FORM' ) {\n\n\t\t\tthis.IFF.debugger.node = 1;\n\t\t\tthis.IFF.debugger.nodeID = blockID;\n\t\t\tthis.IFF.debugger.log();\n\n\t\t}\n\n\t\tif ( this.IFF.reader.offset >= this.IFF.currentFormEnd ) {\n\n\t\t\tthis.IFF.currentForm = this.IFF.parentForm;\n\n\t\t}\n\n\t}\n\n}\n\nexport { LWO2Parser };\n"],"mappings":"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","ignoreList":[]}