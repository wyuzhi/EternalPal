import{Color}from"three";import{attribute,cameraProjectionMatrix,dot,float,Fn,modelViewMatrix,modelViewProjection,NodeMaterial,normalize,positionGeometry,sign,uniform,varyingProperty,vec2,vec4}from"three/tsl";class LDrawConditionalLineMaterial extends NodeMaterial{static get type(){return"LDrawConditionalLineMaterial"}constructor(t){super();const i=Fn((()=>{const t=attribute("control0","vec3"),i=attribute("control1","vec3"),o=attribute("direction","vec3"),e=cameraProjectionMatrix.mul(modelViewMatrix),r=e.mul(vec4(t,1)).toVar(),a=e.mul(vec4(i,1)).toVar(),n=e.mul(vec4(positionGeometry,1)).toVar(),s=e.mul(vec4(positionGeometry.add(o),1)).toVar();r.xy.divAssign(r.w),a.xy.divAssign(a.w),n.xy.divAssign(n.w),s.xy.divAssign(s.w);const l=s.xy.sub(n.xy).toVar(),c=vec2(l.y.negate(),l.x).toVar(),m=r.xy.sub(s.xy).toVar(),u=a.xy.sub(s.xy).toVar(),d=dot(normalize(c),normalize(m)).toVar(),f=dot(normalize(c),normalize(u)).toVar(),y=sign(d).notEqual(sign(f)).select(float(1),float(0));return varyingProperty("float","discardFlag").assign(y),modelViewProjection}))(),o=Fn((()=>(varyingProperty("float","discardFlag").greaterThan(float(.5)).discard(),vec4(this._diffuseUniform,this._opacityUniform))))();this.vertexNode=i,this.fragmentNode=o,this._diffuseUniform=uniform(new Color),this._opacityUniform=uniform(1),Object.defineProperties(this,{opacity:{get:function(){return this._opacityUniform.value},set:function(t){this._opacityUniform.value=t}},color:{get:function(){return this._diffuseUniform.value},set:function(t){this._diffuseUniform.value.copy(t)}}}),this.setValues(t),this.isLDrawConditionalLineMaterial=!0}}export{LDrawConditionalLineMaterial};
//# sourceMappingURL=LDrawConditionalLineNodeMaterial.js.map