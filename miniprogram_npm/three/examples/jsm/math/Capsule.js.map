{"version":3,"file":"node_modules/three/examples/jsm/math/Capsule.js","names":["Vector3","Capsule","constructor","start","end","radius","this","clone","copy","set","capsule","getCenter","target","add","multiplyScalar","translate","v","intersectsBox","box","checkAABBAxis","x","y","min","max","z","p1x","p1y","p2x","p2y","minx","maxx","miny","maxy"],"sources":["node_modules/three/examples/jsm/math/Capsule.js"],"sourcesContent":["import {\n\tVector3\n} from 'three';\n\n/**\n * A capsule is essentially a cylinder with hemispherical caps at both ends.\n * It can be thought of as a swept sphere, where a sphere is moved along a line segment.\n *\n * Capsules are often used as bounding volumes (next to AABBs and bounding spheres).\n *\n * @three_import import { Capsule } from 'three/addons/math/Capsule.js';\n */\nclass Capsule {\n\n\t/**\n\t * Constructs a new capsule.\n\t *\n\t * @param {Vector3} [start] - The start vector.\n\t * @param {Vector3} [end] - The end vector.\n\t * @param {number} [radius=1] - The capsule's radius.\n\t */\n\tconstructor( start = new Vector3( 0, 0, 0 ), end = new Vector3( 0, 1, 0 ), radius = 1 ) {\n\n\t\t/**\n\t\t * The start vector.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.start = start;\n\n\t\t/**\n\t\t * The end vector.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.end = end;\n\n\t\t/**\n\t\t * The capsule's radius.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.radius = radius;\n\n\t}\n\n\t/**\n\t * Returns a new capsule with copied values from this instance.\n\t *\n\t * @return {Capsule} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Sets the capsule components to the given values.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector3} start - The start vector.\n\t * @param {Vector3} end - The end vector\n\t * @param {number} radius - The capsule's radius.\n\t * @return {Capsule} A reference to this capsule.\n\t */\n\tset( start, end, radius ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the values of the given capsule to this instance.\n\t *\n\t * @param {Capsule} capsule - The capsule to copy.\n\t * @return {Capsule} A reference to this capsule.\n\t */\n\tcopy( capsule ) {\n\n\t\tthis.start.copy( capsule.start );\n\t\tthis.end.copy( capsule.end );\n\t\tthis.radius = capsule.radius;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the center point of this capsule.\n\t *\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\n\t * @return {Vector3} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn target.copy( this.end ).add( this.start ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Adds the given offset to this capsule, effectively moving it in 3D space.\n\t *\n\t * @param {Vector3} v - The offset that should be used to translate the capsule.\n\t * @return {Capsule} A reference to this capsule.\n\t */\n\ttranslate( v ) {\n\n\t\tthis.start.add( v );\n\t\tthis.end.add( v );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this capsule.\n\t *\n\t * @param {Box3} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this capsule.\n\t */\n\tintersectsBox( box ) {\n\n\t\treturn (\n\t\t\tcheckAABBAxis(\n\t\t\t\tthis.start.x, this.start.y, this.end.x, this.end.y,\n\t\t\t\tbox.min.x, box.max.x, box.min.y, box.max.y,\n\t\t\t\tthis.radius ) &&\n\t\t\tcheckAABBAxis(\n\t\t\t\tthis.start.x, this.start.z, this.end.x, this.end.z,\n\t\t\t\tbox.min.x, box.max.x, box.min.z, box.max.z,\n\t\t\t\tthis.radius ) &&\n\t\t\tcheckAABBAxis(\n\t\t\t\tthis.start.y, this.start.z, this.end.y, this.end.z,\n\t\t\t\tbox.min.y, box.max.y, box.min.z, box.max.z,\n\t\t\t\tthis.radius )\n\t\t);\n\n\t}\n\n}\n\nfunction checkAABBAxis( p1x, p1y, p2x, p2y, minx, maxx, miny, maxy, radius ) {\n\n\treturn (\n\t\t( minx - p1x < radius || minx - p2x < radius ) &&\n\t\t( p1x - maxx < radius || p2x - maxx < radius ) &&\n\t\t( miny - p1y < radius || miny - p2y < radius ) &&\n\t\t( p1y - maxy < radius || p2y - maxy < radius )\n\t);\n\n}\n\nexport { Capsule };\n"],"mappings":"OACCA,YACM,QAUP,MAAMC,QASL,WAAAC,CAAaC,EAAQ,IAAIH,QAAS,EAAG,EAAG,GAAKI,EAAM,IAAIJ,QAAS,EAAG,EAAG,GAAKK,EAAS,GAOnFC,KAAKH,MAAQA,EAObG,KAAKF,IAAMA,EAQXE,KAAKD,OAASA,CAEf,CAOA,KAAAE,GAEC,OAAO,IAAID,KAAKJ,aAAcM,KAAMF,KAErC,CAWA,GAAAG,CAAKN,EAAOC,EAAKC,GAMhB,OAJAC,KAAKH,MAAMK,KAAML,GACjBG,KAAKF,IAAII,KAAMJ,GACfE,KAAKD,OAASA,EAEPC,IAER,CAQA,IAAAE,CAAME,GAML,OAJAJ,KAAKH,MAAMK,KAAME,EAAQP,OACzBG,KAAKF,IAAII,KAAME,EAAQN,KACvBE,KAAKD,OAASK,EAAQL,OAEfC,IAER,CAQA,SAAAK,CAAWC,GAEV,OAAOA,EAAOJ,KAAMF,KAAKF,KAAMS,IAAKP,KAAKH,OAAQW,eAAgB,GAElE,CAQA,SAAAC,CAAWC,GAKV,OAHAV,KAAKH,MAAMU,IAAKG,GAChBV,KAAKF,IAAIS,IAAKG,GAEPV,IAER,CAQA,aAAAW,CAAeC,GAEd,OACCC,cACCb,KAAKH,MAAMiB,EAAGd,KAAKH,MAAMkB,EAAGf,KAAKF,IAAIgB,EAAGd,KAAKF,IAAIiB,EACjDH,EAAII,IAAIF,EAAGF,EAAIK,IAAIH,EAAGF,EAAII,IAAID,EAAGH,EAAIK,IAAIF,EACzCf,KAAKD,SACNc,cACCb,KAAKH,MAAMiB,EAAGd,KAAKH,MAAMqB,EAAGlB,KAAKF,IAAIgB,EAAGd,KAAKF,IAAIoB,EACjDN,EAAII,IAAIF,EAAGF,EAAIK,IAAIH,EAAGF,EAAII,IAAIE,EAAGN,EAAIK,IAAIC,EACzClB,KAAKD,SACNc,cACCb,KAAKH,MAAMkB,EAAGf,KAAKH,MAAMqB,EAAGlB,KAAKF,IAAIiB,EAAGf,KAAKF,IAAIoB,EACjDN,EAAII,IAAID,EAAGH,EAAIK,IAAIF,EAAGH,EAAII,IAAIE,EAAGN,EAAIK,IAAIC,EACzClB,KAAKD,OAGR,EAID,SAASc,cAAeM,EAAKC,EAAKC,EAAKC,EAAKC,EAAMC,EAAMC,EAAMC,EAAM3B,GAEnE,OACGwB,EAAOJ,EAAMpB,GAAUwB,EAAOF,EAAMtB,KACpCoB,EAAMK,EAAOzB,GAAUsB,EAAMG,EAAOzB,KACpC0B,EAAOL,EAAMrB,GAAU0B,EAAOH,EAAMvB,KACpCqB,EAAMM,EAAO3B,GAAUuB,EAAMI,EAAO3B,EAGxC,QAESJ","ignoreList":[]}