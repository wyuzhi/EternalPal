{"version":3,"file":"node_modules/three/examples/jsm/math/Lut.js","names":["Color","LinearSRGBColorSpace","MathUtils","Lut","constructor","colormap","count","this","isLut","lut","map","n","minV","maxV","setColorMap","set","value","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","minColor","maxColor","length","push","i","alpha","j","setHex","color","lerpColors","getColor","clamp","colorPosition","Math","round","addColorMap","name","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","finalColor","r","g","b","putImageData","cooltowarm","blackbody","grayscale"],"sources":["node_modules/three/examples/jsm/math/Lut.js"],"sourcesContent":["import {\n\tColor,\n\tLinearSRGBColorSpace,\n\tMathUtils\n} from 'three';\n\n/**\n * Represents a lookup table for colormaps. It is used to determine the color\n * values from a range of data values.\n *\n * ```js\n * const lut = new Lut( 'rainbow', 512 );\n * const color = lut.getColor( 0.5 );\n * ```\n *\n * @three_import import { Lut } from 'three/addons/math/Lut.js';\n */\nclass Lut {\n\n\t/**\n\t * Constructs a new Lut.\n\t *\n\t * @param {('rainbow'|'cooltowarm'|'blackbody'|'grayscale')} [colormap='rainbow'] - Sets a colormap from predefined list of colormaps.\n\t * @param {number} [count=32] - Sets the number of colors used to represent the data array.\n\t */\n \tconstructor( colormap, count = 32 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLut = true;\n\n\n\t\t/**\n\t\t * The lookup table for the selected color map\n\t\t *\n\t\t * @type {Array<Color>}\n\t\t */\n\t\tthis.lut = [];\n\n\t\t/**\n\t\t * The currently selected color map.\n\t\t *\n\t\t * @type {Array}\n\t\t */\n\t\tthis.map = [];\n\n\t\t/**\n\t\t * The number of colors of the current selected color map.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 32\n\t\t */\n\t\tthis.n = 0;\n\n\t\t/**\n\t\t * The minimum value to be represented with the lookup table.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minV = 0;\n\n\t\t/**\n\t\t * The maximum value to be represented with the lookup table.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.maxV = 1;\n\n\t\tthis.setColorMap( colormap, count );\n\n\t}\n\n\t/**\n\t * Sets the given LUT.\n\t *\n\t * @param {Lut} value - The LUT to set.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\tset( value ) {\n\n\t\tif ( value.isLut === true ) {\n\n\t\t\tthis.copy( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the minimum value to be represented with this LUT.\n\t *\n\t * @param {number} min - The minimum value to be represented with the lookup table.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\tsetMin( min ) {\n\n\t\tthis.minV = min;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the maximum value to be represented with this LUT.\n\t *\n\t * @param {number} max - The maximum value to be represented with the lookup table.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\tsetMax( max ) {\n\n\t\tthis.maxV = max;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Configure the lookup table for the given color map and number of colors.\n\t *\n\t * @param {string} colormap - The name of the color map.\n\t * @param {number} [count=32] - The number of colors.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\tsetColorMap( colormap, count = 32 ) {\n\n\t\tthis.map = ColorMapKeywords[ colormap ] || ColorMapKeywords.rainbow;\n\t\tthis.n = count;\n\n\t\tconst step = 1.0 / this.n;\n\t\tconst minColor = new Color();\n\t\tconst maxColor = new Color();\n\n\t\tthis.lut.length = 0;\n\n\t\t// sample at 0\n\n\t\tthis.lut.push( new Color( this.map[ 0 ][ 1 ] ) );\n\n\t\t// sample at 1/n, ..., (n-1)/n\n\n\t\tfor ( let i = 1; i < count; i ++ ) {\n\n\t\t\tconst alpha = i * step;\n\n\t\t\tfor ( let j = 0; j < this.map.length - 1; j ++ ) {\n\n\t\t\t\tif ( alpha > this.map[ j ][ 0 ] && alpha <= this.map[ j + 1 ][ 0 ] ) {\n\n\t\t\t\t\tconst min = this.map[ j ][ 0 ];\n\t\t\t\t\tconst max = this.map[ j + 1 ][ 0 ];\n\n\t\t\t\t\tminColor.setHex( this.map[ j ][ 1 ], LinearSRGBColorSpace );\n\t\t\t\t\tmaxColor.setHex( this.map[ j + 1 ][ 1 ], LinearSRGBColorSpace );\n\n\t\t\t\t\tconst color = new Color().lerpColors( minColor, maxColor, ( alpha - min ) / ( max - min ) );\n\n\t\t\t\t\tthis.lut.push( color );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// sample at 1\n\n\t\tthis.lut.push( new Color( this.map[ this.map.length - 1 ][ 1 ] ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given lut.\n\t *\n\t * @param {Lut} lut - The LUT to copy.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\tcopy( lut ) {\n\n\t\tthis.lut = lut.lut;\n\t\tthis.map = lut.map;\n\t\tthis.n = lut.n;\n\t\tthis.minV = lut.minV;\n\t\tthis.maxV = lut.maxV;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns an instance of Color for the given data value.\n\t *\n\t * @param {number} alpha - The value to lookup.\n\t * @return {Color} The color from the LUT.\n\t */\n\tgetColor( alpha ) {\n\n\t\talpha = MathUtils.clamp( alpha, this.minV, this.maxV );\n\n\t\talpha = ( alpha - this.minV ) / ( this.maxV - this.minV );\n\n\t\tconst colorPosition = Math.round( alpha * this.n );\n\n\t\treturn this.lut[ colorPosition ];\n\n\t}\n\n\t/**\n\t * Adds a color map to this Lut instance.\n\t *\n\t * @param {string} name - The name of the color map.\n\t * @param {Array} arrayOfColors - An array of color values. Each value is an array\n\t * holding a threshold and the actual color value as a hexadecimal number.\n\t * @return {Lut} A reference to this LUT.\n\t */\n\taddColorMap( name, arrayOfColors ) {\n\n\t\tColorMapKeywords[ name ] = arrayOfColors;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a canvas in order to visualize the lookup table as a texture.\n\t *\n\t * @return {HTMLCanvasElement} The created canvas.\n\t */\n\tcreateCanvas() {\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 1;\n\t\tcanvas.height = this.n;\n\n\t\tthis.updateCanvas( canvas );\n\n\t\treturn canvas;\n\n\t}\n\n\t/**\n\t * Updates the given canvas with the Lut's data.\n\t *\n\t * @param {HTMLCanvasElement} canvas - The canvas to update.\n\t * @return {HTMLCanvasElement} The updated canvas.\n\t */\n\tupdateCanvas( canvas ) {\n\n\t\tconst ctx = canvas.getContext( '2d', { alpha: false } );\n\n\t\tconst imageData = ctx.getImageData( 0, 0, 1, this.n );\n\n\t\tconst data = imageData.data;\n\n\t\tlet k = 0;\n\n\t\tconst step = 1.0 / this.n;\n\n\t\tconst minColor = new Color();\n\t\tconst maxColor = new Color();\n\t\tconst finalColor = new Color();\n\n\t\tfor ( let i = 1; i >= 0; i -= step ) {\n\n\t\t\tfor ( let j = this.map.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tif ( i < this.map[ j ][ 0 ] && i >= this.map[ j - 1 ][ 0 ] ) {\n\n\t\t\t\t\tconst min = this.map[ j - 1 ][ 0 ];\n\t\t\t\t\tconst max = this.map[ j ][ 0 ];\n\n\t\t\t\t\tminColor.setHex( this.map[ j - 1 ][ 1 ], LinearSRGBColorSpace );\n\t\t\t\t\tmaxColor.setHex( this.map[ j ][ 1 ], LinearSRGBColorSpace );\n\n\t\t\t\t\tfinalColor.lerpColors( minColor, maxColor, ( i - min ) / ( max - min ) );\n\n\t\t\t\t\tdata[ k * 4 ] = Math.round( finalColor.r * 255 );\n\t\t\t\t\tdata[ k * 4 + 1 ] = Math.round( finalColor.g * 255 );\n\t\t\t\t\tdata[ k * 4 + 2 ] = Math.round( finalColor.b * 255 );\n\t\t\t\t\tdata[ k * 4 + 3 ] = 255;\n\n\t\t\t\t\tk += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t}\n\n}\n\nconst ColorMapKeywords = {\n\n\t'rainbow': [[ 0.0, 0x0000FF ], [ 0.2, 0x00FFFF ], [ 0.5, 0x00FF00 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFF0000 ]],\n\t'cooltowarm': [[ 0.0, 0x3C4EC2 ], [ 0.2, 0x9BBCFF ], [ 0.5, 0xDCDCDC ], [ 0.8, 0xF6A385 ], [ 1.0, 0xB40426 ]],\n\t'blackbody': [[ 0.0, 0x000000 ], [ 0.2, 0x780000 ], [ 0.5, 0xE63200 ], [ 0.8, 0xFFFF00 ], [ 1.0, 0xFFFFFF ]],\n\t'grayscale': [[ 0.0, 0x000000 ], [ 0.2, 0x404040 ], [ 0.5, 0x7F7F80 ], [ 0.8, 0xBFBFBF ], [ 1.0, 0xFFFFFF ]]\n\n};\n\nexport { Lut, ColorMapKeywords };\n"],"mappings":"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","ignoreList":[]}