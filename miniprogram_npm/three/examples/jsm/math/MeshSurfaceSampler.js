import{Triangle,Vector2,Vector3}from"three";const _face=new Triangle,_color=new Vector3,_uva=new Vector2,_uvb=new Vector2,_uvc=new Vector2;class MeshSurfaceSampler{constructor(t){this.geometry=t.geometry,this.randomFunction=Math.random,this.indexAttribute=this.geometry.index,this.positionAttribute=this.geometry.getAttribute("position"),this.normalAttribute=this.geometry.getAttribute("normal"),this.colorAttribute=this.geometry.getAttribute("color"),this.uvAttribute=this.geometry.getAttribute("uv"),this.weightAttribute=null,this.distribution=null}setWeightAttribute(t){return this.weightAttribute=t?this.geometry.getAttribute(t):null,this}build(){const t=this.indexAttribute,e=this.positionAttribute,r=this.weightAttribute,i=t?t.count/3:e.count/3,o=new Float32Array(i);for(let u=0;u<i;u++){let i=1,a=3*u,c=3*u+1,s=3*u+2;t&&(a=t.getX(a),c=t.getX(c),s=t.getX(s)),r&&(i=r.getX(a)+r.getX(c)+r.getX(s)),_face.a.fromBufferAttribute(e,a),_face.b.fromBufferAttribute(e,c),_face.c.fromBufferAttribute(e,s),i*=_face.getArea(),o[u]=i}const u=new Float32Array(i);let a=0;for(let t=0;t<i;t++)a+=o[t],u[t]=a;return this.distribution=u,this}setRandomGenerator(t){return this.randomFunction=t,this}sample(t,e,r,i){const o=this._sampleFaceIndex();return this._sampleFace(o,t,e,r,i)}_sampleFaceIndex(){const t=this.distribution[this.distribution.length-1];return this._binarySearch(this.randomFunction()*t)}_binarySearch(t){const e=this.distribution;let r=0,i=e.length-1,o=-1;for(;r<=i;){const u=Math.ceil((r+i)/2);if(0===u||e[u-1]<=t&&e[u]>t){o=u;break}t<e[u]?i=u-1:r=u+1}return o}_sampleFace(t,e,r,i,o){let u=this.randomFunction(),a=this.randomFunction();u+a>1&&(u=1-u,a=1-a);const c=this.indexAttribute;let s=3*t,f=3*t+1,n=3*t+2;return c&&(s=c.getX(s),f=c.getX(f),n=c.getX(n)),_face.a.fromBufferAttribute(this.positionAttribute,s),_face.b.fromBufferAttribute(this.positionAttribute,f),_face.c.fromBufferAttribute(this.positionAttribute,n),e.set(0,0,0).addScaledVector(_face.a,u).addScaledVector(_face.b,a).addScaledVector(_face.c,1-(u+a)),void 0!==r&&(void 0!==this.normalAttribute?(_face.a.fromBufferAttribute(this.normalAttribute,s),_face.b.fromBufferAttribute(this.normalAttribute,f),_face.c.fromBufferAttribute(this.normalAttribute,n),r.set(0,0,0).addScaledVector(_face.a,u).addScaledVector(_face.b,a).addScaledVector(_face.c,1-(u+a)).normalize()):_face.getNormal(r)),void 0!==i&&void 0!==this.colorAttribute&&(_face.a.fromBufferAttribute(this.colorAttribute,s),_face.b.fromBufferAttribute(this.colorAttribute,f),_face.c.fromBufferAttribute(this.colorAttribute,n),_color.set(0,0,0).addScaledVector(_face.a,u).addScaledVector(_face.b,a).addScaledVector(_face.c,1-(u+a)),i.r=_color.x,i.g=_color.y,i.b=_color.z),void 0!==o&&void 0!==this.uvAttribute&&(_uva.fromBufferAttribute(this.uvAttribute,s),_uvb.fromBufferAttribute(this.uvAttribute,f),_uvc.fromBufferAttribute(this.uvAttribute,n),o.set(0,0).addScaledVector(_uva,u).addScaledVector(_uvb,a).addScaledVector(_uvc,1-(u+a))),this}}export{MeshSurfaceSampler};
//# sourceMappingURL=MeshSurfaceSampler.js.map