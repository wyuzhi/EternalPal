{"version":3,"file":"node_modules/three/examples/jsm/math/SimplexNoise.js","names":["SimplexNoise","constructor","r","Math","this","grad3","grad4","p","i","floor","random","perm","simplex","noise","xin","yin","n0","n1","n2","s","sqrt","j","G2","t","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","_dot","t1","t2","noise3d","zin","n3","k","G3","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","_dot3","t3","noise4d","x","y","z","w","F4","G4","n4","l","w0","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","_dot4","t4","g"],"sources":["node_modules/three/examples/jsm/math/SimplexNoise.js"],"sourcesContent":["/**\n * A utility class providing noise functions.\n *\n * The code is based on [Simplex noise demystified]{@link https://web.archive.org/web/20210210162332/http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf}\n * by Stefan Gustavson, 2005.\n *\n * @three_import import { SimplexNoise } from 'three/addons/math/SimplexNoise.js';\n */\nclass SimplexNoise {\n\n\t/**\n\t * Constructs a new simplex noise object.\n\t *\n\t * @param {Object} [r=Math] - A math utility class that holds a `random()` method. This makes it\n\t * possible to pass in custom random number generator.\n\t */\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\t/**\n\t * A 2D simplex noise method.\n\t *\n\t * @param {number} xin - The x coordinate.\n\t * @param {number} yin - The y coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t/**\n\t * A 3D simplex noise method.\n\t *\n\t * @param {number} xin - The x coordinate.\n\t * @param {number} yin - The y coordinate.\n\t * @param {number} zin - The z coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this._dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t/**\n\t * A 4D simplex noise method.\n\t *\n\t * @param {number} x - The x coordinate.\n\t * @param {number} y - The y coordinate.\n\t * @param {number} z - The z coordinate.\n\t * @param {number} w - The w coordinate.\n\t * @return {number} The noise value.\n\t */\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this._dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this._dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this._dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this._dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this._dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n\t// private\n\n\t_dot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\t_dot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\t_dot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n}\n\nexport { SimplexNoise };\n"],"mappings":"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","ignoreList":[]}