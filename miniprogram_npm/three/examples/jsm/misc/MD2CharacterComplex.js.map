{"version":3,"file":"node_modules/three/examples/jsm/misc/MD2CharacterComplex.js","names":["Box3","MathUtils","MeshLambertMaterial","Object3D","TextureLoader","UVMapping","SRGBColorSpace","MD2Loader","MorphBlendMesh","MD2CharacterComplex","constructor","this","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDeceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","undefined","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","textures","load","checkLoadingComplete","mapping","colorSpace","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","clamp","forwardDelta","x","sin","z","cos","rotation","skinMap","color","PI","autoCreateAnimations"],"sources":["node_modules/three/examples/jsm/misc/MD2CharacterComplex.js"],"sourcesContent":["import {\n\tBox3,\n\tMathUtils,\n\tMeshLambertMaterial,\n\tObject3D,\n\tTextureLoader,\n\tUVMapping,\n\tSRGBColorSpace\n} from 'three';\nimport { MD2Loader } from '../loaders/MD2Loader.js';\nimport { MorphBlendMesh } from '../misc/MorphBlendMesh.js';\n\n/**\n * This class represents a management component for animated MD2\n * character assets. It provides a larger API compared to {@link MD2Character}.\n *\n * @three_import import { MD2CharacterComplex } from 'three/addons/misc/MD2CharacterComplex.js';\n */\nclass MD2CharacterComplex {\n\n\t/**\n\t * Constructs a new MD2 character.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * The mesh scale.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.scale = 1;\n\n\t\t/**\n\t\t * The FPS\n\t\t *\n\t\t * @type {number}\n\t\t * @default 6\n\t\t */\n\t\tthis.animationFPS = 6;\n\n\t\t/**\n\t\t * The transition frames.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 15\n\t\t */\n\t\tthis.transitionFrames = 15;\n\n\t\t/**\n\t\t * The character's maximum speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 275\n\t\t */\n\t\tthis.maxSpeed = 275;\n\n\t\t/**\n\t\t * The character's maximum reverse speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default - 275\n\t\t */\n\t\tthis.maxReverseSpeed = - 275;\n\n\t\t/**\n\t\t * The character's front acceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.frontAcceleration = 600;\n\n\t\t/**\n\t\t * The character's back acceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.backAcceleration = 600;\n\n\t\t/**\n\t\t * The character's front deceleration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 600\n\t\t */\n\t\tthis.frontDeceleration = 600;\n\n\t\t/**\n\t\t * The character's angular speed.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2.5\n\t\t */\n\t\tthis.angularSpeed = 2.5;\n\n\t\t/**\n\t\t * The root 3D object\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = new Object3D();\n\n\t\t/**\n\t\t * The body mesh.\n\t\t *\n\t\t * @type {?Mesh}\n\t\t * @default null\n\t\t */\n\t\tthis.meshBody = null;\n\n\t\t/**\n\t\t * The weapon mesh.\n\t\t *\n\t\t * @type {?Mesh}\n\t\t * @default null\n\t\t */\n\t\tthis.meshWeapon = null;\n\n\t\t/**\n\t\t * The movement controls.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.controls = null;\n\n\t\t/**\n\t\t * The body skins.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.skinsBody = [];\n\n\t\t/**\n\t\t * The weapon skins.\n\t\t *\n\t\t * @type {Array<Texture>}\n\t\t */\n\t\tthis.skinsWeapon = [];\n\n\t\t/**\n\t\t * The weapon meshes.\n\t\t *\n\t\t * @type {Array<Mesh>}\n\t\t */\n\t\tthis.weapons = [];\n\n\t\t/**\n\t\t * The current skin.\n\t\t *\n\t\t * @type {Texture}\n\t\t * @default undefined\n\t\t */\n\t\tthis.currentSkin = undefined;\n\n\t\t//\n\n\t\tthis.onLoadComplete = function () {};\n\n\t\t// internals\n\n\t\tthis.meshes = [];\n\t\tthis.animations = {};\n\n\t\tthis.loadCounter = 0;\n\n\t\t// internal movement control variables\n\n\t\tthis.speed = 0;\n\t\tthis.bodyOrientation = 0;\n\n\t\tthis.walkSpeed = this.maxSpeed;\n\t\tthis.crouchSpeed = this.maxSpeed * 0.5;\n\n\t\t// internal animation parameters\n\n\t\tthis.activeAnimation = null;\n\t\tthis.oldAnimation = null;\n\n\t\t// API\n\n\t}\n\n\t/**\n\t * Toggles shadow casting and receiving on the character's meshes.\n\t *\n\t * @param {boolean} enable - Whether to enable shadows or not.\n\t */\n\tenableShadows( enable ) {\n\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].castShadow = enable;\n\t\t\tthis.meshes[ i ].receiveShadow = enable;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Toggles visibility on the character's meshes.\n\t *\n\t * @param {boolean} enable - Whether the character is visible or not.\n\t */\n\tsetVisible( enable ) {\n\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.meshes[ i ].visible = enable;\n\t\t\tthis.meshes[ i ].visible = enable;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Shares certain resources from a different character model.\n\t *\n\t * @param {MD2CharacterComplex} original - The original MD2 character.\n\t */\n\tshareParts( original ) {\n\n\t\tthis.animations = original.animations;\n\t\tthis.walkSpeed = original.walkSpeed;\n\t\tthis.crouchSpeed = original.crouchSpeed;\n\n\t\tthis.skinsBody = original.skinsBody;\n\t\tthis.skinsWeapon = original.skinsWeapon;\n\n\t\t// BODY\n\n\t\tconst mesh = this._createPart( original.meshBody.geometry, this.skinsBody[ 0 ] );\n\t\tmesh.scale.set( this.scale, this.scale, this.scale );\n\n\t\tthis.root.position.y = original.root.position.y;\n\t\tthis.root.add( mesh );\n\n\t\tthis.meshBody = mesh;\n\n\t\tthis.meshes.push( mesh );\n\n\t\t// WEAPONS\n\n\t\tfor ( let i = 0; i < original.weapons.length; i ++ ) {\n\n\t\t\tconst meshWeapon = this._createPart( original.weapons[ i ].geometry, this.skinsWeapon[ i ] );\n\t\t\tmeshWeapon.scale.set( this.scale, this.scale, this.scale );\n\t\t\tmeshWeapon.visible = false;\n\n\t\t\tmeshWeapon.name = original.weapons[ i ].name;\n\n\t\t\tthis.root.add( meshWeapon );\n\n\t\t\tthis.weapons[ i ] = meshWeapon;\n\t\t\tthis.meshWeapon = meshWeapon;\n\n\t\t\tthis.meshes.push( meshWeapon );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Loads the character model for the given config.\n\t *\n\t * @param {Object} config - The config which defines the model and textures paths.\n\t */\n\tloadParts( config ) {\n\n\t\tconst scope = this;\n\n\t\tfunction loadTextures( baseUrl, textureUrls ) {\n\n\t\t\tconst textureLoader = new TextureLoader();\n\t\t\tconst textures = [];\n\n\t\t\tfor ( let i = 0; i < textureUrls.length; i ++ ) {\n\n\t\t\t\ttextures[ i ] = textureLoader.load( baseUrl + textureUrls[ i ], checkLoadingComplete );\n\t\t\t\ttextures[ i ].mapping = UVMapping;\n\t\t\t\ttextures[ i ].name = textureUrls[ i ];\n\t\t\t\ttextures[ i ].colorSpace = SRGBColorSpace;\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t}\n\n\t\tfunction checkLoadingComplete() {\n\n\t\t\tscope.loadCounter -= 1;\n\t\t\tif ( scope.loadCounter === 0 ) \tscope.onLoadComplete();\n\n\t\t}\n\n\t\tthis.animations = config.animations;\n\t\tthis.walkSpeed = config.walkSpeed;\n\t\tthis.crouchSpeed = config.crouchSpeed;\n\n\t\tthis.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n\n\t\tconst weaponsTextures = [];\n\t\tfor ( let i = 0; i < config.weapons.length; i ++ ) weaponsTextures[ i ] = config.weapons[ i ][ 1 ];\n\n\t\t// SKINS\n\n\t\tthis.skinsBody = loadTextures( config.baseUrl + 'skins/', config.skins );\n\t\tthis.skinsWeapon = loadTextures( config.baseUrl + 'skins/', weaponsTextures );\n\n\t\t// BODY\n\n\t\tconst loader = new MD2Loader();\n\n\t\tloader.load( config.baseUrl + config.body, function ( geo ) {\n\n\t\t\tconst boundingBox = new Box3();\n\t\t\tboundingBox.setFromBufferAttribute( geo.attributes.position );\n\n\t\t\tscope.root.position.y = - scope.scale * boundingBox.min.y;\n\n\t\t\tconst mesh = scope._createPart( geo, scope.skinsBody[ 0 ] );\n\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\n\n\t\t\tscope.root.add( mesh );\n\n\t\t\tscope.meshBody = mesh;\n\t\t\tscope.meshes.push( mesh );\n\n\t\t\tcheckLoadingComplete();\n\n\t\t} );\n\n\t\t// WEAPONS\n\n\t\tconst generateCallback = function ( index, name ) {\n\n\t\t\treturn function ( geo ) {\n\n\t\t\t\tconst mesh = scope._createPart( geo, scope.skinsWeapon[ index ] );\n\t\t\t\tmesh.scale.set( scope.scale, scope.scale, scope.scale );\n\t\t\t\tmesh.visible = false;\n\n\t\t\t\tmesh.name = name;\n\n\t\t\t\tscope.root.add( mesh );\n\n\t\t\t\tscope.weapons[ index ] = mesh;\n\t\t\t\tscope.meshWeapon = mesh;\n\t\t\t\tscope.meshes.push( mesh );\n\n\t\t\t\tcheckLoadingComplete();\n\n\t\t\t};\n\n\t\t};\n\n\t\tfor ( let i = 0; i < config.weapons.length; i ++ ) {\n\n\t\t\tloader.load( config.baseUrl + config.weapons[ i ][ 0 ], generateCallback( i, config.weapons[ i ][ 0 ] ) );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the animation playback rate.\n\t *\n\t * @param {number} rate - The playback rate to set.\n\t */\n\tsetPlaybackRate( rate ) {\n\n\t\tif ( this.meshBody ) this.meshBody.duration = this.meshBody.baseDuration / rate;\n\t\tif ( this.meshWeapon ) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n\n\t}\n\n\t/**\n\t * Sets the wireframe material flag.\n\t *\n\t * @param {boolean} wireframeEnabled - Whether to enable wireframe rendering or not.\n\t */\n\tsetWireframe( wireframeEnabled ) {\n\n\t\tif ( wireframeEnabled ) {\n\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialWireframe;\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n\n\t\t} else {\n\n\t\t\tif ( this.meshBody ) this.meshBody.material = this.meshBody.materialTexture;\n\t\t\tif ( this.meshWeapon ) this.meshWeapon.material = this.meshWeapon.materialTexture;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the skin defined by the given skin index. This will result in a different texture\n\t * for the body mesh.\n\t *\n\t * @param {number} index - The skin index.\n\t */\n\tsetSkin( index ) {\n\n\t\tif ( this.meshBody && this.meshBody.material.wireframe === false ) {\n\n\t\t\tthis.meshBody.material.map = this.skinsBody[ index ];\n\t\t\tthis.currentSkin = index;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the weapon defined by the given weapon index. This will result in a different weapon\n\t * hold by the character.\n\t *\n\t * @param {number} index - The weapon index.\n\t */\n\tsetWeapon( index ) {\n\n\t\tfor ( let i = 0; i < this.weapons.length; i ++ ) this.weapons[ i ].visible = false;\n\n\t\tconst activeWeapon = this.weapons[ index ];\n\n\t\tif ( activeWeapon ) {\n\n\t\t\tactiveWeapon.visible = true;\n\t\t\tthis.meshWeapon = activeWeapon;\n\n\t\t\tif ( this.activeAnimation ) {\n\n\t\t\t\tactiveWeapon.playAnimation( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationTime( this.activeAnimation, this.meshBody.getAnimationTime( this.activeAnimation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the defined animation clip as the active animation.\n\t *\n\t * @param {string} animationName - The name of the animation clip.\n\t */\n\tsetAnimation( animationName ) {\n\n\t\tif ( animationName === this.activeAnimation || ! animationName ) return;\n\n\t\tif ( this.meshBody ) {\n\n\t\t\tthis.meshBody.setAnimationWeight( animationName, 0 );\n\t\t\tthis.meshBody.playAnimation( animationName );\n\n\t\t\tthis.oldAnimation = this.activeAnimation;\n\t\t\tthis.activeAnimation = animationName;\n\n\t\t\tthis.blendCounter = this.transitionFrames;\n\n\t\t}\n\n\t\tif ( this.meshWeapon ) {\n\n\t\t\tthis.meshWeapon.setAnimationWeight( animationName, 0 );\n\t\t\tthis.meshWeapon.playAnimation( animationName );\n\n\t\t}\n\n\n\t}\n\n\tupdate( delta ) {\n\n\t\tif ( this.controls ) this.updateMovementModel( delta );\n\n\t\tif ( this.animations ) {\n\n\t\t\tthis.updateBehaviors();\n\t\t\tthis.updateAnimations( delta );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animations of the mesh. Must be called inside the animation loop.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateAnimations( delta ) {\n\n\t\tlet mix = 1;\n\n\t\tif ( this.blendCounter > 0 ) {\n\n\t\t\tmix = ( this.transitionFrames - this.blendCounter ) / this.transitionFrames;\n\t\t\tthis.blendCounter -= 1;\n\n\t\t}\n\n\t\tif ( this.meshBody ) {\n\n\t\t\tthis.meshBody.update( delta );\n\n\t\t\tthis.meshBody.setAnimationWeight( this.activeAnimation, mix );\n\t\t\tthis.meshBody.setAnimationWeight( this.oldAnimation, 1 - mix );\n\n\t\t}\n\n\t\tif ( this.meshWeapon ) {\n\n\t\t\tthis.meshWeapon.update( delta );\n\n\t\t\tthis.meshWeapon.setAnimationWeight( this.activeAnimation, mix );\n\t\t\tthis.meshWeapon.setAnimationWeight( this.oldAnimation, 1 - mix );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animation state based on the control inputs.\n\t */\n\tupdateBehaviors() {\n\n\t\tconst controls = this.controls;\n\t\tconst animations = this.animations;\n\n\t\tlet moveAnimation, idleAnimation;\n\n\t\t// crouch vs stand\n\n\t\tif ( controls.crouch ) {\n\n\t\t\tmoveAnimation = animations[ 'crouchMove' ];\n\t\t\tidleAnimation = animations[ 'crouchIdle' ];\n\n\t\t} else {\n\n\t\t\tmoveAnimation = animations[ 'move' ];\n\t\t\tidleAnimation = animations[ 'idle' ];\n\n\t\t}\n\n\t\t// actions\n\n\t\tif ( controls.jump ) {\n\n\t\t\tmoveAnimation = animations[ 'jump' ];\n\t\t\tidleAnimation = animations[ 'jump' ];\n\n\t\t}\n\n\t\tif ( controls.attack ) {\n\n\t\t\tif ( controls.crouch ) {\n\n\t\t\t\tmoveAnimation = animations[ 'crouchAttack' ];\n\t\t\t\tidleAnimation = animations[ 'crouchAttack' ];\n\n\t\t\t} else {\n\n\t\t\t\tmoveAnimation = animations[ 'attack' ];\n\t\t\t\tidleAnimation = animations[ 'attack' ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// set animations\n\n\t\tif ( controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight ) {\n\n\t\t\tif ( this.activeAnimation !== moveAnimation ) {\n\n\t\t\t\tthis.setAnimation( moveAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif ( Math.abs( this.speed ) < 0.2 * this.maxSpeed && ! ( controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward ) ) {\n\n\t\t\tif ( this.activeAnimation !== idleAnimation ) {\n\n\t\t\t\tthis.setAnimation( idleAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// set animation direction\n\n\t\tif ( controls.moveForward ) {\n\n\t\t\tif ( this.meshBody ) {\n\n\t\t\t\tthis.meshBody.setAnimationDirectionForward( this.activeAnimation );\n\t\t\t\tthis.meshBody.setAnimationDirectionForward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t\tif ( this.meshWeapon ) {\n\n\t\t\t\tthis.meshWeapon.setAnimationDirectionForward( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationDirectionForward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( controls.moveBackward ) {\n\n\t\t\tif ( this.meshBody ) {\n\n\t\t\t\tthis.meshBody.setAnimationDirectionBackward( this.activeAnimation );\n\t\t\t\tthis.meshBody.setAnimationDirectionBackward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t\tif ( this.meshWeapon ) {\n\n\t\t\t\tthis.meshWeapon.setAnimationDirectionBackward( this.activeAnimation );\n\t\t\t\tthis.meshWeapon.setAnimationDirectionBackward( this.oldAnimation );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Transforms the character model based on the control input.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateMovementModel( delta ) {\n\n\t\tfunction exponentialEaseOut( k ) {\n\n\t\t\treturn k === 1 ? 1 : - Math.pow( 2, - 10 * k ) + 1;\n\n\t\t}\n\n\t\tconst controls = this.controls;\n\n\t\t// speed based on controls\n\n\t\tif ( controls.crouch ) \tthis.maxSpeed = this.crouchSpeed;\n\t\telse this.maxSpeed = this.walkSpeed;\n\n\t\tthis.maxReverseSpeed = - this.maxSpeed;\n\n\t\tif ( controls.moveForward ) this.speed = MathUtils.clamp( this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\t\tif ( controls.moveBackward ) this.speed = MathUtils.clamp( this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t// orientation based on controls\n\t\t// (don't just stand while turning)\n\n\t\tconst dir = 1;\n\n\t\tif ( controls.moveLeft ) {\n\n\t\t\tthis.bodyOrientation += delta * this.angularSpeed;\n\t\t\tthis.speed = MathUtils.clamp( this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t}\n\n\t\tif ( controls.moveRight ) {\n\n\t\t\tthis.bodyOrientation -= delta * this.angularSpeed;\n\t\t\tthis.speed = MathUtils.clamp( this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed );\n\n\t\t}\n\n\t\t// speed decay\n\n\t\tif ( ! ( controls.moveForward || controls.moveBackward ) ) {\n\n\t\t\tif ( this.speed > 0 ) {\n\n\t\t\t\tconst k = exponentialEaseOut( this.speed / this.maxSpeed );\n\t\t\t\tthis.speed = MathUtils.clamp( this.speed - k * delta * this.frontDeceleration, 0, this.maxSpeed );\n\n\t\t\t} else {\n\n\t\t\t\tconst k = exponentialEaseOut( this.speed / this.maxReverseSpeed );\n\t\t\t\tthis.speed = MathUtils.clamp( this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// displacement\n\n\t\tconst forwardDelta = this.speed * delta;\n\n\t\tthis.root.position.x += Math.sin( this.bodyOrientation ) * forwardDelta;\n\t\tthis.root.position.z += Math.cos( this.bodyOrientation ) * forwardDelta;\n\n\t\t// steering\n\n\t\tthis.root.rotation.y = this.bodyOrientation;\n\n\t}\n\n\t// internal\n\n\t_createPart( geometry, skinMap ) {\n\n\t\tconst materialWireframe = new MeshLambertMaterial( { color: 0xffaa00, wireframe: true } );\n\t\tconst materialTexture = new MeshLambertMaterial( { color: 0xffffff, wireframe: false, map: skinMap } );\n\n\t\t//\n\n\t\tconst mesh = new MorphBlendMesh( geometry, materialTexture );\n\t\tmesh.rotation.y = - Math.PI / 2;\n\n\t\t//\n\n\t\tmesh.materialTexture = materialTexture;\n\t\tmesh.materialWireframe = materialWireframe;\n\n\t\t//\n\n\t\tmesh.autoCreateAnimations( this.animationFPS );\n\n\t\treturn mesh;\n\n\t}\n\n}\n\nexport { MD2CharacterComplex };\n"],"mappings":"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","ignoreList":[]}