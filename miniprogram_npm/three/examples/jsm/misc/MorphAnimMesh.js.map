{"version":3,"file":"node_modules/three/examples/jsm/misc/MorphAnimMesh.js","names":["AnimationClip","AnimationMixer","Mesh","MorphAnimMesh","constructor","geometry","material","super","this","type","mixer","activeAction","setDirectionForward","timeScale","setDirectionBackward","playAnimation","label","fps","stop","clip","findByName","Error","action","clipAction","tracks","length","duration","play","updateAnimation","delta","update","copy","source","recursive"],"sources":["node_modules/three/examples/jsm/misc/MorphAnimMesh.js"],"sourcesContent":["import {\n\tAnimationClip,\n\tAnimationMixer,\n\tMesh\n} from 'three';\n\n/**\n * A special type of an animated mesh with a simple interface\n * for animation playback. It allows to playback just one animation\n * without any transitions or fading between animation changes.\n *\n * @augments Mesh\n * @three_import import { MorphAnimMesh } from 'three/addons/misc/MorphAnimMesh.js';\n */\nclass MorphAnimMesh extends Mesh {\n\n\t/**\n\t * Constructs a new morph anim mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'MorphAnimMesh';\n\n\t\t/**\n\t\t * The internal animation mixer.\n\t\t *\n\t\t * @type {AnimationMixer}\n\t\t */\n\t\tthis.mixer = new AnimationMixer( this );\n\n\t\t/**\n\t\t * The current active animation action.\n\t\t *\n\t\t * @type {?AnimationAction}\n\t\t * @default null\n\t\t */\n\t\tthis.activeAction = null;\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"forward\".\n\t */\n\tsetDirectionForward() {\n\n\t\tthis.mixer.timeScale = 1.0;\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"backward\".\n\t */\n\tsetDirectionBackward() {\n\n\t\tthis.mixer.timeScale = - 1.0;\n\n\t}\n\n\t/**\n\t * Plays the defined animation clip. The implementation assumes the animation\n\t * clips are stored in {@link Object3D#animations} or the geometry.\n\t *\n\t * @param {string} label - The name of the animation clip.\n\t * @param {number} fps - The FPS of the animation clip.\n\t */\n\tplayAnimation( label, fps ) {\n\n\t\tif ( this.activeAction ) {\n\n\t\t\tthis.activeAction.stop();\n\t\t\tthis.activeAction = null;\n\n\t\t}\n\n\t\tconst clip = AnimationClip.findByName( this, label );\n\n\t\tif ( clip ) {\n\n\t\t\tconst action = this.mixer.clipAction( clip );\n\t\t\taction.timeScale = ( clip.tracks.length * fps ) / clip.duration;\n\t\t\tthis.activeAction = action.play();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.MorphAnimMesh: animations[' + label + '] undefined in .playAnimation()' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animations of the mesh. Must be called inside the animation loop.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdateAnimation( delta ) {\n\n\t\tthis.mixer.update( delta );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.mixer = new AnimationMixer( this );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MorphAnimMesh };\n"],"mappings":"OACCA,cACAC,eACAC,SACM,QAUP,MAAMC,sBAAsBD,KAQ3B,WAAAE,CAAaC,EAAUC,GAEtBC,MAAOF,EAAUC,GAEjBE,KAAKC,KAAO,gBAOZD,KAAKE,MAAQ,IAAIT,eAAgBO,MAQjCA,KAAKG,aAAe,IAErB,CAKA,mBAAAC,GAECJ,KAAKE,MAAMG,UAAY,CAExB,CAKA,oBAAAC,GAECN,KAAKE,MAAMG,WAAc,CAE1B,CASA,aAAAE,CAAeC,EAAOC,GAEhBT,KAAKG,eAETH,KAAKG,aAAaO,OAClBV,KAAKG,aAAe,MAIrB,MAAMQ,EAAOnB,cAAcoB,WAAYZ,KAAMQ,GAE7C,IAAKG,EAQJ,MAAM,IAAIE,MAAO,mCAAqCL,EAAQ,mCARnD,CAEX,MAAMM,EAASd,KAAKE,MAAMa,WAAYJ,GACtCG,EAAOT,UAAcM,EAAKK,OAAOC,OAASR,EAAQE,EAAKO,SACvDlB,KAAKG,aAAeW,EAAOK,MAE5B,CAMD,CAOA,eAAAC,CAAiBC,GAEhBrB,KAAKE,MAAMoB,OAAQD,EAEpB,CAEA,IAAAE,CAAMC,EAAQC,GAMb,OAJA1B,MAAMwB,KAAMC,EAAQC,GAEpBzB,KAAKE,MAAQ,IAAIT,eAAgBO,MAE1BA,IAER,SAIQL","ignoreList":[]}