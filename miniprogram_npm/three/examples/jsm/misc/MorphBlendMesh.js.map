{"version":3,"file":"node_modules/three/examples/jsm/misc/MorphBlendMesh.js","names":["MathUtils","Mesh","MorphBlendMesh","constructor","geometry","material","super","this","animationsMap","animationsList","numFrames","Object","keys","morphTargetDictionary","length","name","endFrame","fps","createAnimation","setAnimationWeight","start","end","animation","duration","lastFrame","currentFrame","active","time","direction","weight","directionBackwards","mirroredLoop","push","autoCreateAnimations","pattern","firstAnimation","frameRanges","i","key","chunks","match","Infinity","range","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","console","warn","stopAnimation","update","delta","il","frameTime","keyframe","clamp","Math","floor","morphTargetInfluences","mix"],"sources":["node_modules/three/examples/jsm/misc/MorphBlendMesh.js"],"sourcesContent":["import {\n\tMathUtils,\n\tMesh\n} from 'three';\n\n/**\n * A special type of an animated mesh with a more advanced interface\n * for animation playback. Unlike {@link MorphAnimMesh}. It allows to\n * playback more than one morph animation at the same time but without\n * fading options.\n *\n * @augments Mesh\n * @three_import import { MorphBlendMesh } from 'three/addons/misc/MorphBlendMesh.js';\n */\nclass MorphBlendMesh extends Mesh {\n\n\t/**\n\t * Constructs a new morph blend mesh.\n\t *\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\n\t * @param {Material|Array<Material>} [material] - The mesh material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * A dictionary of animations.\n\t\t *\n\t\t * @type {Object<string,Object>}\n\t\t */\n\t\tthis.animationsMap = {};\n\n\t\t/**\n\t\t * A list of animations.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.animationsList = [];\n\n\t\t// prepare default animation\n\t\t// (all frames played together in 1 second)\n\n\t\tconst numFrames = Object.keys( this.morphTargetDictionary ).length;\n\n\t\tconst name = '__default';\n\n\t\tconst startFrame = 0;\n\t\tconst endFrame = numFrames - 1;\n\n\t\tconst fps = numFrames / 1;\n\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\n\t\tthis.setAnimationWeight( name, 1 );\n\n\t}\n\n\t/**\n\t * Creates a new animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @param {number} start - The start time.\n\t * @param {number} end - The end time.\n\t * @param {number} fps - The FPS.\n\t */\n\tcreateAnimation( name, start, end, fps ) {\n\n\t\tconst animation = {\n\n\t\t\tstart: start,\n\t\t\tend: end,\n\n\t\t\tlength: end - start + 1,\n\n\t\t\tfps: fps,\n\t\t\tduration: ( end - start ) / fps,\n\n\t\t\tlastFrame: 0,\n\t\t\tcurrentFrame: 0,\n\n\t\t\tactive: false,\n\n\t\t\ttime: 0,\n\t\t\tdirection: 1,\n\t\t\tweight: 1,\n\n\t\t\tdirectionBackwards: false,\n\t\t\tmirroredLoop: false\n\n\t\t};\n\n\t\tthis.animationsMap[ name ] = animation;\n\t\tthis.animationsList.push( animation );\n\n\t}\n\n\t/**\n\t * Automatically creates animations based on the values in\n\t * {@link Mesh#morphTargetDictionary}.\n\t *\n\t * @param {number} fps - The FPS of all animations.\n\t */\n\tautoCreateAnimations( fps ) {\n\n\t\tconst pattern = /([a-z]+)_?(\\d+)/i;\n\n\t\tlet firstAnimation;\n\n\t\tconst frameRanges = {};\n\n\t\tlet i = 0;\n\n\t\tfor ( const key in this.morphTargetDictionary ) {\n\n\t\t\tconst chunks = key.match( pattern );\n\n\t\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\t\tconst name = chunks[ 1 ];\n\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\t\tconst range = frameRanges[ name ];\n\n\t\t\t\tif ( i < range.start ) range.start = i;\n\t\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\tfor ( const name in frameRanges ) {\n\n\t\t\tconst range = frameRanges[ name ];\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t\t}\n\n\t\tthis.firstAnimation = firstAnimation;\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"forward\" for the\n\t * defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t */\n\tsetAnimationDirectionForward( name ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.direction = 1;\n\t\t\tanimation.directionBackwards = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the animation playback direction to \"backward\" for the\n\t * defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t */\n\tsetAnimationDirectionBackward( name ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.direction = - 1;\n\t\t\tanimation.directionBackwards = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the FPS to the given value for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @param {number} fps - The FPS to set.\n\t */\n\tsetAnimationFPS( name, fps ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.fps = fps;\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the duration to the given value for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @param {number} duration - The duration to set.\n\t */\n\tsetAnimationDuration( name, duration ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.duration = duration;\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the weight to the given value for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @param {number} weight - The weight to set.\n\t */\n\tsetAnimationWeight( name, weight ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.weight = weight;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the time to the given value for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @param {number} time - The time to set.\n\t */\n\tsetAnimationTime( name, time ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.time = time;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the time for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @return {number} The time.\n\t */\n\tgetAnimationTime( name ) {\n\n\t\tlet time = 0;\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\ttime = animation.time;\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t/**\n\t * Returns the duration for the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t * @return {number} The duration.\n\t */\n\tgetAnimationDuration( name ) {\n\n\t\tlet duration = - 1;\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tduration = animation.duration;\n\n\t\t}\n\n\t\treturn duration;\n\n\t}\n\n\t/**\n\t * Plays the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t */\n\tplayAnimation( name ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.time = 0;\n\t\t\tanimation.active = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.MorphBlendMesh: animation[' + name + '] undefined in .playAnimation()' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Stops the defined animation.\n\t *\n\t * @param {string} name - The animation name.\n\t */\n\tstopAnimation( name ) {\n\n\t\tconst animation = this.animationsMap[ name ];\n\n\t\tif ( animation ) {\n\n\t\t\tanimation.active = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the animations of the mesh.\n\t *\n\t * @param {number} delta - The delta time in seconds.\n\t */\n\tupdate( delta ) {\n\n\t\tfor ( let i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\t\tconst animation = this.animationsList[ i ];\n\n\t\t\tif ( ! animation.active ) continue;\n\n\t\t\tconst frameTime = animation.duration / animation.length;\n\n\t\t\tanimation.time += animation.direction * delta;\n\n\t\t\tif ( animation.mirroredLoop ) {\n\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t\t}\n\n\t\t\tconst keyframe = animation.start + MathUtils.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\t\tconst weight = animation.weight;\n\n\t\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\t\tanimation.currentFrame = keyframe;\n\n\t\t\t}\n\n\t\t\tlet mix = ( animation.time % frameTime ) / frameTime;\n\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t\t} else {\n\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { MorphBlendMesh };\n"],"mappings":"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","ignoreList":[]}