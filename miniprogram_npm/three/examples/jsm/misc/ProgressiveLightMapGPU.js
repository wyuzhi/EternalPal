import{DoubleSide,FloatType,HalfFloatType,PlaneGeometry,Mesh,RenderTarget,Scene,MeshPhongNodeMaterial,NodeMaterial}from"three/webgpu";import{add,float,mix,output,sub,texture,uniform,uv,vec2,vec4}from"three/tsl";import{potpack}from"../libs/potpack.module.js";class ProgressiveLightMap{constructor(e,t=1024){this.renderer=e,this.resolution=t,this._lightMapContainers=[],this._scene=new Scene,this._buffer1Active=!1,this._labelMesh=null,this._blurringPlane=null;const i=/(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent)?HalfFloatType:FloatType;this._progressiveLightMap1=new RenderTarget(this.resolution,this.resolution,{type:i}),this._progressiveLightMap2=new RenderTarget(this.resolution,this.resolution,{type:i}),this._progressiveLightMap2.texture.channel=1,this._averagingWindow=uniform(100),this._previousShadowMap=texture(this._progressiveLightMap1.texture);const s=uv(1).flipY();this._uvMat=new MeshPhongNodeMaterial,this._uvMat.vertexNode=vec4(sub(s,vec2(.5)).mul(2),1,1),this._uvMat.outputNode=vec4(mix(this._previousShadowMap.sample(uv(1)),output,float(1).div(this._averagingWindow)))}addObjectsToLightMap(e){const t=[],i=3/this.resolution;for(let s=0;s<e.length;s++){const a=e[s];a.isLight?this._scene.attach(a):!1!==a.geometry.hasAttribute("uv")?(null===this._blurringPlane&&this._initializeBlurPlane(),a.material.lightMap=this._progressiveLightMap2.texture,a.material.dithering=!0,a.castShadow=!0,a.receiveShadow=!0,a.renderOrder=1e3+s,t.push({w:1+2*i,h:1+2*i,index:s,x:0,y:0}),this._lightMapContainers.push({basicMat:a.material,object:a})):console.warn("THREE.ProgressiveLightMap: All lightmap objects need uvs.")}const s=potpack(t);t.forEach((t=>{const a=e[t.index].geometry.getAttribute("uv").clone();for(let e=0;e<a.array.length;e+=a.itemSize)a.array[e]=(a.array[e]+t.x+i)/s.w,a.array[e+1]=1-(a.array[e+1]+t.y+i)/s.h;e[t.index].geometry.setAttribute("uv1",a),e[t.index].geometry.getAttribute("uv1").needsUpdate=!0}))}dispose(){this._progressiveLightMap1.dispose(),this._progressiveLightMap2.dispose(),this._uvMat.dispose(),null!==this._blurringPlane&&(this._blurringPlane.geometry.dispose(),this._blurringPlane.material.dispose()),null!==this._labelMesh&&(this._labelMesh.geometry.dispose(),this._labelMesh.material.dispose())}update(e,t=100,i=!0){if(null===this._blurringPlane)return;const s=this.renderer.getRenderTarget();this._blurringPlane.visible=i;for(let e=0;e<this._lightMapContainers.length;e++)this._lightMapContainers[e].object.oldScene=this._lightMapContainers[e].object.parent,this._scene.attach(this._lightMapContainers[e].object);for(let e=0;e<this._lightMapContainers.length;e++)this._averagingWindow.value=t,this._lightMapContainers[e].object.material=this._uvMat,this._lightMapContainers[e].object.oldFrustumCulled=this._lightMapContainers[e].object.frustumCulled,this._lightMapContainers[e].object.frustumCulled=!1;const a=this._buffer1Active?this._progressiveLightMap1:this._progressiveLightMap2,r=this._buffer1Active?this._progressiveLightMap2:this._progressiveLightMap1;this.renderer.setRenderTarget(a),this._previousShadowMap.value=r.texture,this._buffer1Active=!this._buffer1Active,this.renderer.render(this._scene,e);for(let e=0;e<this._lightMapContainers.length;e++)this._lightMapContainers[e].object.frustumCulled=this._lightMapContainers[e].object.oldFrustumCulled,this._lightMapContainers[e].object.material=this._lightMapContainers[e].basicMat,this._lightMapContainers[e].object.oldScene.attach(this._lightMapContainers[e].object);this.renderer.setRenderTarget(s)}showDebugLightmap(e,t=null){if(0!==this._lightMapContainers.length){if(null===this._labelMesh){const e=new NodeMaterial;e.colorNode=texture(this._progressiveLightMap1.texture).sample(uv().flipY()),e.side=DoubleSide;const t=new PlaneGeometry(100,100);this._labelMesh=new Mesh(t,e),this._labelMesh.position.y=250,this._lightMapContainers[0].object.parent.add(this._labelMesh)}null!==t&&this._labelMesh.position.copy(t),this._labelMesh.visible=e}else console.warn("THREE.ProgressiveLightMap: Call .showDebugLightmap() after adding the objects.")}_initializeBlurPlane(){const e=new NodeMaterial;e.polygonOffset=!0,e.polygonOffsetFactor=-1,e.polygonOffsetUnits=3,e.vertexNode=vec4(sub(uv(),vec2(.5)).mul(2),1,1);const t=uv().flipY().toVar(),i=float(.5).div(float(this.resolution)).toVar(),s=add(this._previousShadowMap.sample(t.add(vec2(i,0))),this._previousShadowMap.sample(t.add(vec2(0,i))),this._previousShadowMap.sample(t.add(vec2(0,i.negate()))),this._previousShadowMap.sample(t.add(vec2(i.negate(),0))),this._previousShadowMap.sample(t.add(vec2(i,i))),this._previousShadowMap.sample(t.add(vec2(i.negate(),i))),this._previousShadowMap.sample(t.add(vec2(i,i.negate()))),this._previousShadowMap.sample(t.add(vec2(i.negate(),i.negate())))).div(8);e.fragmentNode=s,this._blurringPlane=new Mesh(new PlaneGeometry(1,1),e),this._blurringPlane.name="Blurring Plane",this._blurringPlane.frustumCulled=!1,this._blurringPlane.renderOrder=0,this._blurringPlane.material.depthWrite=!1,this._scene.add(this._blurringPlane)}}export{ProgressiveLightMap};
//# sourceMappingURL=ProgressiveLightMapGPU.js.map