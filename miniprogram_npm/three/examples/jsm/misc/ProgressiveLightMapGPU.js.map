{"version":3,"file":"node_modules/three/examples/jsm/misc/ProgressiveLightMapGPU.js","names":["DoubleSide","FloatType","HalfFloatType","PlaneGeometry","Mesh","RenderTarget","Scene","MeshPhongNodeMaterial","NodeMaterial","add","float","mix","output","sub","texture","uniform","uv","vec2","vec4","potpack","ProgressiveLightMap","constructor","renderer","resolution","this","_lightMapContainers","_scene","_buffer1Active","_labelMesh","_blurringPlane","type","test","navigator","userAgent","_progressiveLightMap1","_progressiveLightMap2","channel","_averagingWindow","_previousShadowMap","uvNode","flipY","_uvMat","vertexNode","mul","outputNode","sample","div","addObjectsToLightMap","objects","uv_boxes","padding","ob","length","object","isLight","attach","geometry","hasAttribute","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","x","y","basicMat","console","warn","dimensions","forEach","box","uv1","getAttribute","clone","i","array","itemSize","setAttribute","needsUpdate","dispose","update","camera","blendWindow","blurEdges","currentRenderTarget","getRenderTarget","visible","l","oldScene","parent","value","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","setRenderTarget","render","showDebugLightmap","position","labelMaterial","colorNode","side","labelGeometry","copy","blurMaterial","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","toVar","pixelOffset","color","negate","fragmentNode","name","depthWrite"],"sources":["node_modules/three/examples/jsm/misc/ProgressiveLightMapGPU.js"],"sourcesContent":["import { DoubleSide, FloatType, HalfFloatType, PlaneGeometry, Mesh, RenderTarget, Scene, MeshPhongNodeMaterial, NodeMaterial } from 'three/webgpu';\nimport { add, float, mix, output, sub, texture, uniform, uv, vec2, vec4 } from 'three/tsl';\n\nimport { potpack } from '../libs/potpack.module.js';\n\n/**\n * Progressive Light Map Accumulator, by [zalo]{@link https://github.com/zalo/}.\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * This class can only be used with {@link WebGPURenderer}.\n * When using {@link WebGLRenderer}, import from `ProgressiveLightMap.js`.\n *\n * @three_import import { ProgressiveLightMap } from 'three/addons/misc/ProgressiveLightMapGPU.js';\n */\nclass ProgressiveLightMap {\n\n\t/**\n\t * @param {WebGPURenderer} renderer - The renderer.\n\t * @param {number} [resolution=1024] - The side-long dimension of the total lightmap.\n\t */\n\tconstructor( renderer, resolution = 1024 ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {WebGPURenderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * The side-long dimension of the total lightmap.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1024\n\t\t */\n\t\tthis.resolution = resolution;\n\n\t\tthis._lightMapContainers = [];\n\t\tthis._scene = new Scene();\n\t\tthis._buffer1Active = false;\n\t\tthis._labelMesh = null;\n\t\tthis._blurringPlane = null;\n\n\t\t// Create the Progressive LightMap Texture\n\n\t\tconst type = /(Android|iPad|iPhone|iPod)/g.test( navigator.userAgent ) ? HalfFloatType : FloatType;\n\t\tthis._progressiveLightMap1 = new RenderTarget( this.resolution, this.resolution, { type: type } );\n\t\tthis._progressiveLightMap2 = new RenderTarget( this.resolution, this.resolution, { type: type } );\n\t\tthis._progressiveLightMap2.texture.channel = 1;\n\n\t\t// uniforms\n\n\t\tthis._averagingWindow = uniform( 100 );\n\t\tthis._previousShadowMap = texture( this._progressiveLightMap1.texture );\n\n\t\t// materials\n\n\t\tconst uvNode = uv( 1 ).flipY();\n\n\t\tthis._uvMat = new MeshPhongNodeMaterial();\n\t\tthis._uvMat.vertexNode = vec4( sub( uvNode, vec2( 0.5 ) ).mul( 2 ), 1, 1 );\n\t\tthis._uvMat.outputNode = vec4( mix( this._previousShadowMap.sample( uv( 1 ) ), output, float( 1 ).div( this._averagingWindow ) ) );\n\n\t}\n\n\t/**\n\t * Sets these objects' materials' lightmaps and modifies their uv1's.\n\t *\n\t * @param {Array<Object3D>} objects - An array of objects and lights to set up your lightmap.\n\t */\n\taddObjectsToLightMap( objects ) {\n\n\t\t// Prepare list of UV bounding boxes for packing later...\n\t\tconst uv_boxes = [];\n\n\t\tconst padding = 3 / this.resolution;\n\n\t\tfor ( let ob = 0; ob < objects.length; ob ++ ) {\n\n\t\t\tconst object = objects[ ob ];\n\n\t\t\t// If this object is a light, simply add it to the internal scene\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tthis._scene.attach( object ); continue;\n\n\t\t\t}\n\n\t\t\tif ( object.geometry.hasAttribute( 'uv' ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.ProgressiveLightMap: All lightmap objects need uvs.' ); continue;\n\n\t\t\t}\n\n\t\t\tif ( this._blurringPlane === null ) {\n\n\t\t\t\tthis._initializeBlurPlane();\n\n\t\t\t}\n\n\t\t\t// Apply the lightmap to the object\n\t\t\tobject.material.lightMap = this._progressiveLightMap2.texture;\n\t\t\tobject.material.dithering = true;\n\t\t\tobject.castShadow = true;\n\t\t\tobject.receiveShadow = true;\n\t\t\tobject.renderOrder = 1000 + ob;\n\n\t\t\t// Prepare UV boxes for potpack (potpack will update x and y)\n\t\t\t// TODO: Size these by object surface area\n\t\t\tuv_boxes.push( { w: 1 + ( padding * 2 ), h: 1 + ( padding * 2 ), index: ob, x: 0, y: 0 } );\n\n\t\t\tthis._lightMapContainers.push( { basicMat: object.material, object: object } );\n\n\t\t}\n\n\t\t// Pack the objects' lightmap UVs into the same global space\n\t\tconst dimensions = potpack( uv_boxes );\n\t\tuv_boxes.forEach( ( box ) => {\n\n\t\t\tconst uv1 = objects[ box.index ].geometry.getAttribute( 'uv' ).clone();\n\t\t\tfor ( let i = 0; i < uv1.array.length; i += uv1.itemSize ) {\n\n\t\t\t\tuv1.array[ i ] = ( uv1.array[ i ] + box.x + padding ) / dimensions.w;\n\t\t\t\tuv1.array[ i + 1 ] = 1 - ( ( uv1.array[ i + 1 ] + box.y + padding ) / dimensions.h );\n\n\t\t\t}\n\n\t\t\tobjects[ box.index ].geometry.setAttribute( 'uv1', uv1 );\n\t\t\tobjects[ box.index ].geometry.getAttribute( 'uv1' ).needsUpdate = true;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Frees all internal resources.\n\t */\n\tdispose() {\n\n\t\tthis._progressiveLightMap1.dispose();\n\t\tthis._progressiveLightMap2.dispose();\n\n\t\tthis._uvMat.dispose();\n\n\t\tif ( this._blurringPlane !== null ) {\n\n\t\t\tthis._blurringPlane.geometry.dispose();\n\t\t\tthis._blurringPlane.material.dispose();\n\n\t\t}\n\n\t\tif ( this._labelMesh !== null ) {\n\n\t\t\tthis._labelMesh.geometry.dispose();\n\t\t\tthis._labelMesh.material.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This function renders each mesh one at a time into their respective surface maps.\n\t *\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t * @param {number} [blendWindow=100] - When >1, samples will accumulate over time.\n\t * @param {boolean} [blurEdges=true] - Whether to fix UV Edges via blurring.\n\t */\n\tupdate( camera, blendWindow = 100, blurEdges = true ) {\n\n\t\tif ( this._blurringPlane === null ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Store the original Render Target\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\t// The blurring plane applies blur to the seams of the lightmap\n\t\tthis._blurringPlane.visible = blurEdges;\n\n\t\t// Steal the Object3D from the real world to our special dimension\n\t\tfor ( let l = 0; l < this._lightMapContainers.length; l ++ ) {\n\n\t\t\tthis._lightMapContainers[ l ].object.oldScene = this._lightMapContainers[ l ].object.parent;\n\t\t\tthis._scene.attach( this._lightMapContainers[ l ].object );\n\n\t\t}\n\n\t\t// Set each object's material to the UV Unwrapped Surface Mapping Version\n\t\tfor ( let l = 0; l < this._lightMapContainers.length; l ++ ) {\n\n\t\t\tthis._averagingWindow.value = blendWindow;\n\t\t\tthis._lightMapContainers[ l ].object.material = this._uvMat;\n\t\t\tthis._lightMapContainers[ l ].object.oldFrustumCulled = this._lightMapContainers[ l ].object.frustumCulled;\n\t\t\tthis._lightMapContainers[ l ].object.frustumCulled = false;\n\n\t\t}\n\n\t\t// Ping-pong two surface buffers for reading/writing\n\t\tconst activeMap = this._buffer1Active ? this._progressiveLightMap1 : this._progressiveLightMap2;\n\t\tconst inactiveMap = this._buffer1Active ? this._progressiveLightMap2 : this._progressiveLightMap1;\n\n\t\t// Render the object's surface maps\n\t\tthis.renderer.setRenderTarget( activeMap );\n\t\tthis._previousShadowMap.value = inactiveMap.texture;\n\n\t\tthis._buffer1Active = ! this._buffer1Active;\n\t\tthis.renderer.render( this._scene, camera );\n\n\t\t// Restore the object's Real-time Material and add it back to the original world\n\t\tfor ( let l = 0; l < this._lightMapContainers.length; l ++ ) {\n\n\t\t\tthis._lightMapContainers[ l ].object.frustumCulled = this._lightMapContainers[ l ].object.oldFrustumCulled;\n\t\t\tthis._lightMapContainers[ l ].object.material = this._lightMapContainers[ l ].basicMat;\n\t\t\tthis._lightMapContainers[ l ].object.oldScene.attach( this._lightMapContainers[ l ].object );\n\n\t\t}\n\n\t\t// Restore the original Render Target\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\t/**\n\t * Draws the lightmap in the main scene. Call this after adding the objects to it.\n\t *\n\t * @param {boolean} visible - Whether the debug plane should be visible\n\t * @param {Vector3} [position] - Where the debug plane should be drawn\n\t*/\n\tshowDebugLightmap( visible, position = null ) {\n\n\t\tif ( this._lightMapContainers.length === 0 ) {\n\n\t\t\tconsole.warn( 'THREE.ProgressiveLightMap: Call .showDebugLightmap() after adding the objects.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this._labelMesh === null ) {\n\n\t\t\tconst labelMaterial = new NodeMaterial();\n\t\t\tlabelMaterial.colorNode = texture( this._progressiveLightMap1.texture ).sample( uv().flipY() );\n\t\t\tlabelMaterial.side = DoubleSide;\n\n\t\t\tconst labelGeometry = new PlaneGeometry( 100, 100 );\n\n\t\t\tthis._labelMesh = new Mesh( labelGeometry, labelMaterial );\n\t\t\tthis._labelMesh.position.y = 250;\n\n\t\t\tthis._lightMapContainers[ 0 ].object.parent.add( this._labelMesh );\n\n\t\t}\n\n\t\tif ( position !== null ) {\n\n\t\t\tthis._labelMesh.position.copy( position );\n\n\t\t}\n\n\t\tthis._labelMesh.visible = visible;\n\n\t}\n\n\t/**\n\t * Creates the Blurring Plane.\n\t *\n\t * @private\n\t */\n\t_initializeBlurPlane() {\n\n\t\tconst blurMaterial = new NodeMaterial();\n\t\tblurMaterial.polygonOffset = true;\n\t\tblurMaterial.polygonOffsetFactor = - 1;\n\t\tblurMaterial.polygonOffsetUnits = 3;\n\n\t\tblurMaterial.vertexNode = vec4( sub( uv(), vec2( 0.5 ) ).mul( 2 ), 1, 1 );\n\n\t\tconst uvNode = uv().flipY().toVar();\n\t\tconst pixelOffset = float( 0.5 ).div( float( this.resolution ) ).toVar();\n\n\t\tconst color = add(\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset, 0 ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( 0, pixelOffset ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( 0, pixelOffset.negate() ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset.negate(), 0 ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset, pixelOffset ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset.negate(), pixelOffset ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset, pixelOffset.negate() ) ) ),\n\t\t\tthis._previousShadowMap.sample( uvNode.add( vec2( pixelOffset.negate(), pixelOffset.negate() ) ) ),\n\t\t).div( 8 );\n\n\t\tblurMaterial.fragmentNode = color;\n\n\t\tthis._blurringPlane = new Mesh( new PlaneGeometry( 1, 1 ), blurMaterial );\n\t\tthis._blurringPlane.name = 'Blurring Plane';\n\t\tthis._blurringPlane.frustumCulled = false;\n\t\tthis._blurringPlane.renderOrder = 0;\n\t\tthis._blurringPlane.material.depthWrite = false;\n\t\tthis._scene.add( this._blurringPlane );\n\n\t}\n\n}\n\nexport { ProgressiveLightMap };\n"],"mappings":"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","ignoreList":[]}