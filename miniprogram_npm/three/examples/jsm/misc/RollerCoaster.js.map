{"version":3,"file":"node_modules/three/examples/jsm/misc/RollerCoaster.js","names":["BufferAttribute","BufferGeometry","Color","Quaternion","Raycaster","SRGBColorSpace","Vector3","RollerCoasterGeometry","constructor","curve","divisions","super","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","this","setAttribute","Float32Array","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","_color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"sources":["node_modules/three/examples/jsm/misc/RollerCoaster.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tQuaternion,\n\tRaycaster,\n\tSRGBColorSpace,\n\tVector3\n} from 'three';\n\n/**\n * A procedural roller coaster geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = [ 1, 1, 1 ];\n\t\tconst color2 = [ 1, 1, 0 ];\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\t\tconst forward = new Vector3();\n\t\tconst right = new Vector3();\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst prevQuaternion = new Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tconst point = new Vector3();\n\t\tconst prevPoint = new Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\n\t\t// shapes\n\n\t\tconst step = [\n\t\t\tnew Vector3( - 0.225, 0, 0 ),\n\t\t\tnew Vector3( 0, - 0.050, 0 ),\n\t\t\tnew Vector3( 0, - 0.175, 0 ),\n\n\t\t\tnew Vector3( 0, - 0.050, 0 ),\n\t\t\tnew Vector3( 0.225, 0, 0 ),\n\t\t\tnew Vector3( 0, - 0.175, 0 )\n\t\t];\n\n\t\tconst PI2 = Math.PI * 2;\n\n\t\tlet sides = 5;\n\t\tconst tube1 = [];\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\ttube1.push( new Vector3( Math.sin( angle ) * 0.06, Math.cos( angle ) * 0.06, 0 ) );\n\n\t\t}\n\n\t\tsides = 6;\n\t\tconst tube2 = [];\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\ttube2.push( new Vector3( Math.sin( angle ) * 0.025, Math.cos( angle ) * 0.025, 0 ) );\n\n\t\t}\n\n\t\tconst vector = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tfunction drawShape( shape, color ) {\n\n\t\t\tnormal.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( let j = 0; j < shape.length; j ++ ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t\tnormal.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\tfor ( let j = shape.length - 1; j >= 0; j -- ) {\n\n\t\t\t\tvector.copy( shape[ j ] );\n\t\t\t\tvector.applyQuaternion( quaternion );\n\t\t\t\tvector.add( point );\n\n\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tconst normal1 = new Vector3();\n\t\tconst normal2 = new Vector3();\n\t\tconst normal3 = new Vector3();\n\t\tconst normal4 = new Vector3();\n\n\t\tfunction extrudeShape( shape, offset, color ) {\n\n\t\t\tfor ( let j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tconst point1 = shape[ j ];\n\t\t\t\tconst point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 ).add( offset );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( point );\n\n\t\t\t\tvector2.copy( point2 ).add( offset );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( point );\n\n\t\t\t\tvector3.copy( point2 ).add( offset );\n\t\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\t\tvector3.add( prevPoint );\n\n\t\t\t\tvector4.copy( point1 ).add( offset );\n\t\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\t\tvector4.add( prevPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( prevQuaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\t\t\t\tcolors.push( color[ 0 ], color[ 1 ], color[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst offset = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\n\t\t\tup.set( 0, 1, 0 );\n\n\t\t\tforward.subVectors( point, prevPoint ).normalize();\n\t\t\tright.crossVectors( up, forward ).normalize();\n\t\t\tup.crossVectors( forward, right );\n\n\t\t\tconst angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\tdrawShape( step, color2 );\n\n\t\t\t}\n\n\t\t\textrudeShape( tube1, offset.set( 0, - 0.125, 0 ), color2 );\n\t\t\textrudeShape( tube2, offset.set( 0.2, 0, 0 ), color1 );\n\t\t\textrudeShape( tube2, offset.set( - 0.2, 0, 0 ), color1 );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\t// console.log( vertices.length );\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\n\t\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural roller coaster lifters geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterLiftersGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\n\t\tconst quaternion = new Quaternion();\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\n\t\tconst point = new Vector3();\n\t\tconst tangent = new Vector3();\n\n\t\t// shapes\n\n\t\tconst tube1 = [\n\t\t\tnew Vector3( 0, 0.05, - 0.05 ),\n\t\t\tnew Vector3( 0, 0.05, 0.05 ),\n\t\t\tnew Vector3( 0, - 0.05, 0 )\n\t\t];\n\n\t\tconst tube2 = [\n\t\t\tnew Vector3( - 0.05, 0, 0.05 ),\n\t\t\tnew Vector3( - 0.05, 0, - 0.05 ),\n\t\t\tnew Vector3( 0.05, 0, 0 )\n\t\t];\n\n\t\tconst tube3 = [\n\t\t\tnew Vector3( 0.05, 0, - 0.05 ),\n\t\t\tnew Vector3( 0.05, 0, 0.05 ),\n\t\t\tnew Vector3( - 0.05, 0, 0 )\n\t\t];\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tconst normal1 = new Vector3();\n\t\tconst normal2 = new Vector3();\n\t\tconst normal3 = new Vector3();\n\t\tconst normal4 = new Vector3();\n\n\t\tfunction extrudeShape( shape, fromPoint, toPoint ) {\n\n\t\t\tfor ( let j = 0, jl = shape.length; j < jl; j ++ ) {\n\n\t\t\t\tconst point1 = shape[ j ];\n\t\t\t\tconst point2 = shape[ ( j + 1 ) % jl ];\n\n\t\t\t\tvector1.copy( point1 );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( fromPoint );\n\n\t\t\t\tvector2.copy( point2 );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( fromPoint );\n\n\t\t\t\tvector3.copy( point2 );\n\t\t\t\tvector3.applyQuaternion( quaternion );\n\t\t\t\tvector3.add( toPoint );\n\n\t\t\t\tvector4.copy( point1 );\n\t\t\t\tvector4.applyQuaternion( quaternion );\n\t\t\t\tvector4.add( toPoint );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\t\t//\n\n\t\t\t\tnormal1.copy( point1 );\n\t\t\t\tnormal1.applyQuaternion( quaternion );\n\t\t\t\tnormal1.normalize();\n\n\t\t\t\tnormal2.copy( point2 );\n\t\t\t\tnormal2.applyQuaternion( quaternion );\n\t\t\t\tnormal2.normalize();\n\n\t\t\t\tnormal3.copy( point2 );\n\t\t\t\tnormal3.applyQuaternion( quaternion );\n\t\t\t\tnormal3.normalize();\n\n\t\t\t\tnormal4.copy( point1 );\n\t\t\t\tnormal4.applyQuaternion( quaternion );\n\t\t\t\tnormal4.normalize();\n\n\t\t\t\tnormals.push( normal1.x, normal1.y, normal1.z );\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t\tnormals.push( normal2.x, normal2.y, normal2.z );\n\t\t\t\tnormals.push( normal3.x, normal3.y, normal3.z );\n\t\t\t\tnormals.push( normal4.x, normal4.y, normal4.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst fromPoint = new Vector3();\n\t\tconst toPoint = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\ttangent.copy( curve.getTangentAt( i / divisions ) );\n\n\t\t\tconst angle = Math.atan2( tangent.x, tangent.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\t//\n\n\t\t\tif ( point.y > 10 ) {\n\n\t\t\t\tfromPoint.set( - 0.75, - 0.35, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.75, - 0.35, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube1, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( - 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( - 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube2, fromPoint, toPoint );\n\n\t\t\t\tfromPoint.set( 0.7, - 0.3, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0.7, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t} else {\n\n\t\t\t\tfromPoint.set( 0, - 0.2, 0 );\n\t\t\t\tfromPoint.applyQuaternion( quaternion );\n\t\t\t\tfromPoint.add( point );\n\n\t\t\t\ttoPoint.set( 0, - point.y, 0 );\n\t\t\t\ttoPoint.applyQuaternion( quaternion );\n\t\t\t\ttoPoint.add( point );\n\n\t\t\t\textrudeShape( tube3, fromPoint, toPoint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( normals ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural roller coaster shadow geometry.\n *\n * @augments BufferGeometry\n * @three_import import { RollerCoasterShadowGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Curve} curve - The curve to generate the geometry along.\n \t * @param {number} divisions - The number of divisions which defines the detail of the geometry.\n\t */\n\tconstructor( curve, divisions ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\n\t\tconst up = new Vector3( 0, 1, 0 );\n\t\tconst forward = new Vector3();\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst prevQuaternion = new Quaternion();\n\t\tprevQuaternion.setFromAxisAngle( up, Math.PI / 2 );\n\n\t\tconst point = new Vector3();\n\n\t\tconst prevPoint = new Vector3();\n\t\tprevPoint.copy( curve.getPointAt( 0 ) );\n\t\tprevPoint.y = 0;\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tfor ( let i = 1; i <= divisions; i ++ ) {\n\n\t\t\tpoint.copy( curve.getPointAt( i / divisions ) );\n\t\t\tpoint.y = 0;\n\n\t\t\tforward.subVectors( point, prevPoint );\n\n\t\t\tconst angle = Math.atan2( forward.x, forward.z );\n\n\t\t\tquaternion.setFromAxisAngle( up, angle );\n\n\t\t\tvector1.set( - 0.3, 0, 0 );\n\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\tvector1.add( point );\n\n\t\t\tvector2.set( 0.3, 0, 0 );\n\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\tvector2.add( point );\n\n\t\t\tvector3.set( 0.3, 0, 0 );\n\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\tvector3.add( prevPoint );\n\n\t\t\tvector4.set( - 0.3, 0, 0 );\n\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\tvector4.add( prevPoint );\n\n\t\t\tvertices.push( vector1.x, vector1.y, vector1.z );\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tvertices.push( vector2.x, vector2.y, vector2.z );\n\t\t\tvertices.push( vector3.x, vector3.y, vector3.z );\n\t\t\tvertices.push( vector4.x, vector4.y, vector4.z );\n\n\t\t\tprevPoint.copy( point );\n\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural sky geometry.\n *\n * @augments BufferGeometry\n * @three_import import { SkyGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass SkyGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\n\t\tfor ( let i = 0; i < 100; i ++ ) {\n\n\t\t\tconst x = Math.random() * 800 - 400;\n\t\t\tconst y = Math.random() * 50 + 50;\n\t\t\tconst z = Math.random() * 800 - 400;\n\n\t\t\tconst size = Math.random() * 40 + 20;\n\n\t\t\tvertices.push( x - size, y, z - size );\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t\tvertices.push( x + size, y, z - size );\n\t\t\tvertices.push( x + size, y, z + size );\n\t\t\tvertices.push( x - size, y, z + size );\n\n\t\t}\n\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\n\t}\n\n}\n\n/**\n * A procedural trees geometry.\n *\n * @augments BufferGeometry\n * @three_import import { TreesGeometry } from 'three/addons/misc/RollerCoaster.js';\n */\nclass TreesGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new geometry.\n\t *\n\t * @param {Mesh} landscape - A mesh representing the landscape. Trees will be positioned\n\t * randomly on the landscape's surface.\n\t */\n\tconstructor( landscape ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst raycaster = new Raycaster();\n\t\traycaster.ray.direction.set( 0, - 1, 0 );\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0; i < 2000; i ++ ) {\n\n\t\t\tconst x = Math.random() * 500 - 250;\n\t\t\tconst z = Math.random() * 500 - 250;\n\n\t\t\traycaster.ray.origin.set( x, 50, z );\n\n\t\t\tconst intersections = raycaster.intersectObject( landscape );\n\n\t\t\tif ( intersections.length === 0 ) continue;\n\n\t\t\tconst y = intersections[ 0 ].point.y;\n\n\t\t\tconst height = Math.random() * 5 + 0.5;\n\n\t\t\tlet angle = Math.random() * Math.PI * 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tangle += Math.PI / 2;\n\n\t\t\tvertices.push( x + Math.sin( angle ), y, z + Math.cos( angle ) );\n\t\t\tvertices.push( x, y + height, z );\n\t\t\tvertices.push( x + Math.sin( angle + Math.PI ), y, z + Math.cos( angle + Math.PI ) );\n\n\t\t\tconst random = Math.random() * 0.1;\n\n\t\t\tfor ( let j = 0; j < 6; j ++ ) {\n\n\t\t\t\t_color.setRGB( 0.2 + random, 0.4 + random, 0, SRGBColorSpace );\n\n\t\t\t\tcolors.push( _color.r, _color.g, _color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 3 ) );\n\n\t}\n\n}\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };\n"],"mappings":"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","ignoreList":[]}