import{BufferAttribute,BufferGeometry,Color,DynamicDrawUsage,Matrix4,Mesh,MeshStandardMaterial,Vector3}from"three";function TubePainter(){const r=3e6,a=new BufferAttribute(new Float32Array(r),3);a.usage=DynamicDrawUsage;const t=new BufferAttribute(new Float32Array(r),3);t.usage=DynamicDrawUsage;const e=new BufferAttribute(new Float32Array(r),3);e.usage=DynamicDrawUsage;const o=new BufferGeometry;o.setAttribute("position",a),o.setAttribute("normal",t),o.setAttribute("color",e),o.drawRange.count=0;const n=new MeshStandardMaterial({vertexColors:!0}),y=new Mesh(o,n);y.frustumCulled=!1;const c=new Vector3,i=new Vector3,p=new Vector3,u=new Vector3,s=new Color(16777215);let d=1;function l(r,n,y,l){if(0===r.distanceToSquared(n))return;let A=o.drawRange.count;const w=function(r){const a=2*Math.PI,t=[],e=.01*r;for(let r=0;r<10;r++){const o=r/10*a;t.push(new Vector3(Math.sin(o)*e,Math.cos(o)*e,0))}return t}(d);for(let o=0,d=w.length;o<d;o++){const f=w[o],M=w[(o+1)%d];c.copy(f).applyMatrix4(l).add(n),i.copy(M).applyMatrix4(l).add(n),p.copy(M).applyMatrix4(y).add(r),u.copy(f).applyMatrix4(y).add(r),c.toArray(a.array,3*(A+0)),i.toArray(a.array,3*(A+1)),u.toArray(a.array,3*(A+2)),i.toArray(a.array,3*(A+3)),p.toArray(a.array,3*(A+4)),u.toArray(a.array,3*(A+5)),c.copy(f).applyMatrix4(l).normalize(),i.copy(M).applyMatrix4(l).normalize(),p.copy(M).applyMatrix4(y).normalize(),u.copy(f).applyMatrix4(y).normalize(),c.toArray(t.array,3*(A+0)),i.toArray(t.array,3*(A+1)),u.toArray(t.array,3*(A+2)),i.toArray(t.array,3*(A+3)),p.toArray(t.array,3*(A+4)),u.toArray(t.array,3*(A+5)),s.toArray(e.array,3*(A+0)),s.toArray(e.array,3*(A+1)),s.toArray(e.array,3*(A+2)),s.toArray(e.array,3*(A+3)),s.toArray(e.array,3*(A+4)),s.toArray(e.array,3*(A+5)),A+=6}o.drawRange.count=A}const A=new Vector3(0,1,0),w=new Vector3,f=new Vector3,M=new Matrix4,g=new Matrix4;let m=0;return{mesh:y,moveTo:function(r){w.copy(r),M.lookAt(f,w,A),f.copy(r),g.copy(M)},lineTo:function(r){w.copy(r),M.lookAt(f,w,A),l(w,f,M,g),f.copy(w),g.copy(M)},setSize:function(r){d=r},update:function(){const r=m,n=o.drawRange.count;r!==n&&(a.addUpdateRange(3*r,3*(n-r)),a.needsUpdate=!0,t.addUpdateRange(3*r,3*(n-r)),t.needsUpdate=!0,e.addUpdateRange(3*r,3*(n-r)),e.needsUpdate=!0,m=o.drawRange.count)}}}export{TubePainter};
//# sourceMappingURL=TubePainter.js.map