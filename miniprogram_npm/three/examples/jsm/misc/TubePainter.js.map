{"version":3,"file":"node_modules/three/examples/jsm/misc/TubePainter.js","names":["BufferAttribute","BufferGeometry","Color","DynamicDrawUsage","Matrix4","Mesh","MeshStandardMaterial","Vector3","TubePainter","BUFFER_SIZE","positions","Float32Array","usage","normals","colors","geometry","setAttribute","drawRange","count","material","vertexColors","mesh","frustumCulled","vector1","vector2","vector3","vector4","color","size","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","PI2","Math","PI","array","radius","i","angle","push","sin","cos","getPoints","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","addUpdateRange","needsUpdate"],"sources":["node_modules/three/examples/jsm/misc/TubePainter.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tDynamicDrawUsage,\n\tMatrix4,\n\tMesh,\n\tMeshStandardMaterial,\n\tVector3\n} from 'three';\n\n/**\n * @classdesc This module can be used to paint tube-like meshes\n * along a sequence of points. This module is used in a XR\n * painter demo.\n *\n * ```js\n * const painter = new TubePainter();\n * scene.add( painter.mesh );\n * ```\n *\n * @name TubePainter\n * @class\n * @three_import import { TubePainter } from 'three/addons/misc/TubePainter.js';\n */\nfunction TubePainter() {\n\n\tconst BUFFER_SIZE = 1000000 * 3;\n\n\tconst positions = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tpositions.usage = DynamicDrawUsage;\n\n\tconst normals = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tnormals.usage = DynamicDrawUsage;\n\n\tconst colors = new BufferAttribute( new Float32Array( BUFFER_SIZE ), 3 );\n\tcolors.usage = DynamicDrawUsage;\n\n\tconst geometry = new BufferGeometry();\n\tgeometry.setAttribute( 'position', positions );\n\tgeometry.setAttribute( 'normal', normals );\n\tgeometry.setAttribute( 'color', colors );\n\tgeometry.drawRange.count = 0;\n\n\tconst material = new MeshStandardMaterial( {\n\t\tvertexColors: true\n\t} );\n\n\tconst mesh = new Mesh( geometry, material );\n\tmesh.frustumCulled = false;\n\n\t//\n\n\tfunction getPoints( size ) {\n\n\t\tconst PI2 = Math.PI * 2;\n\n\t\tconst sides = 10;\n\t\tconst array = [];\n\t\tconst radius = 0.01 * size;\n\n\t\tfor ( let i = 0; i < sides; i ++ ) {\n\n\t\t\tconst angle = ( i / sides ) * PI2;\n\t\t\tarray.push( new Vector3( Math.sin( angle ) * radius, Math.cos( angle ) * radius, 0 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t//\n\n\tconst vector1 = new Vector3();\n\tconst vector2 = new Vector3();\n\tconst vector3 = new Vector3();\n\tconst vector4 = new Vector3();\n\n\tconst color = new Color( 0xffffff );\n\tlet size = 1;\n\n\tfunction stroke( position1, position2, matrix1, matrix2 ) {\n\n\t\tif ( position1.distanceToSquared( position2 ) === 0 ) return;\n\n\t\tlet count = geometry.drawRange.count;\n\n\t\tconst points = getPoints( size );\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tconst vertex1 = points[ i ];\n\t\t\tconst vertex2 = points[ ( i + 1 ) % il ];\n\n\t\t\t// positions\n\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).add( position2 );\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).add( position2 );\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).add( position1 );\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).add( position1 );\n\n\t\t\tvector1.toArray( positions.array, ( count + 0 ) * 3 );\n\t\t\tvector2.toArray( positions.array, ( count + 1 ) * 3 );\n\t\t\tvector4.toArray( positions.array, ( count + 2 ) * 3 );\n\n\t\t\tvector2.toArray( positions.array, ( count + 3 ) * 3 );\n\t\t\tvector3.toArray( positions.array, ( count + 4 ) * 3 );\n\t\t\tvector4.toArray( positions.array, ( count + 5 ) * 3 );\n\n\t\t\t// normals\n\n\t\t\tvector1.copy( vertex1 ).applyMatrix4( matrix2 ).normalize();\n\t\t\tvector2.copy( vertex2 ).applyMatrix4( matrix2 ).normalize();\n\t\t\tvector3.copy( vertex2 ).applyMatrix4( matrix1 ).normalize();\n\t\t\tvector4.copy( vertex1 ).applyMatrix4( matrix1 ).normalize();\n\n\t\t\tvector1.toArray( normals.array, ( count + 0 ) * 3 );\n\t\t\tvector2.toArray( normals.array, ( count + 1 ) * 3 );\n\t\t\tvector4.toArray( normals.array, ( count + 2 ) * 3 );\n\n\t\t\tvector2.toArray( normals.array, ( count + 3 ) * 3 );\n\t\t\tvector3.toArray( normals.array, ( count + 4 ) * 3 );\n\t\t\tvector4.toArray( normals.array, ( count + 5 ) * 3 );\n\n\t\t\t// colors\n\n\t\t\tcolor.toArray( colors.array, ( count + 0 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 1 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 2 ) * 3 );\n\n\t\t\tcolor.toArray( colors.array, ( count + 3 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 4 ) * 3 );\n\t\t\tcolor.toArray( colors.array, ( count + 5 ) * 3 );\n\n\t\t\tcount += 6;\n\n\t\t}\n\n\t\tgeometry.drawRange.count = count;\n\n\t}\n\n\t//\n\n\tconst up = new Vector3( 0, 1, 0 );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\tconst matrix1 = new Matrix4();\n\tconst matrix2 = new Matrix4();\n\n\tfunction moveTo( position ) {\n\n\t\tpoint1.copy( position );\n\t\tmatrix1.lookAt( point2, point1, up );\n\n\t\tpoint2.copy( position );\n\t\tmatrix2.copy( matrix1 );\n\n\t}\n\n\tfunction lineTo( position ) {\n\n\t\tpoint1.copy( position );\n\t\tmatrix1.lookAt( point2, point1, up );\n\n\t\tstroke( point1, point2, matrix1, matrix2 );\n\n\t\tpoint2.copy( point1 );\n\t\tmatrix2.copy( matrix1 );\n\n\t}\n\n\tfunction setSize( value ) {\n\n\t\tsize = value;\n\n\t}\n\n\t//\n\n\tlet count = 0;\n\n\tfunction update() {\n\n\t\tconst start = count;\n\t\tconst end = geometry.drawRange.count;\n\n\t\tif ( start === end ) return;\n\n\t\tpositions.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tpositions.needsUpdate = true;\n\n\t\tnormals.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tnormals.needsUpdate = true;\n\n\t\tcolors.addUpdateRange( start * 3, ( end - start ) * 3 );\n\t\tcolors.needsUpdate = true;\n\n\t\tcount = geometry.drawRange.count;\n\n\t}\n\n\treturn {\n\t\t/**\n\t\t * The \"painted\" tube mesh. Must be added to the scene.\n\t\t *\n\t\t * @name TubePainter#mesh\n\t\t * @type {Mesh}\n\t\t */\n\t\tmesh: mesh,\n\n\t\t/**\n\t\t * Moves the current painting position to the given value.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#moveTo\n\t\t * @param {Vector3} position The new painting position.\n\t\t */\n\t\tmoveTo: moveTo,\n\n\t\t/**\n\t\t * Draw a stroke from the current position to the given one.\n\t\t * This method extends the tube while drawing with the XR\n\t\t * controllers.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#lineTo\n\t\t * @param {Vector3} position The destination position.\n\t\t */\n\t\tlineTo: lineTo,\n\n\t\t/**\n\t\t * Sets the size of newly rendered tube segments.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#setSize\n\t\t * @param {number} size The size.\n\t\t */\n\t\tsetSize: setSize,\n\n\t\t/**\n\t\t * Updates the internal geometry buffers so the new painted\n\t\t * segments are rendered.\n\t\t *\n\t\t * @method\n\t\t * @name TubePainter#update\n\t\t */\n\t\tupdate: update\n\t};\n\n}\n\nexport { TubePainter };\n"],"mappings":"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","ignoreList":[]}