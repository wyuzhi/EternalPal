{"version":3,"file":"node_modules/three/examples/jsm/misc/Volume.js","names":["Matrix3","Matrix4","Vector3","VolumeSlice","Volume","constructor","xLength","yLength","zLength","type","arrayBuffer","undefined","this","Number","axisOrder","data","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","Float32Array","Float64Array","length","spacing","offset","matrix","identity","inverseMatrix","lowerThreshold","Infinity","Object","defineProperty","get","set","value","sliceList","forEach","slice","geometryNeedsUpdate","upperThreshold","segmentation","RASDimensions","getData","i","j","k","access","reverseAccess","index","z","Math","floor","y","map","functionToMap","context","call","extractPerpendicularPlane","axis","RASIndex","firstSpacing","secondSpacing","positionOffset","IJKIndex","axisInIJK","firstDirection","secondDirection","planeMatrix","volume","dimensions","indexOf","multiply","makeRotationY","PI","setPosition","makeRotationX","applyMatrix4","normalize","arglet","iLength","abs","dot","jLength","planeWidth","planeHeight","round","base","iDirection","find","x","jDirection","kDirection","sliceAccess","si","sj","sk","accessI","accessJ","accessK","extractSlice","push","repaintAllSlices","repaint","computeMinMax","min","max","datasize","isNaN"],"sources":["node_modules/three/examples/jsm/misc/Volume.js"],"sourcesContent":["import {\n\tMatrix3,\n\tMatrix4,\n\tVector3\n} from 'three';\nimport { VolumeSlice } from '../misc/VolumeSlice.js';\n\n/**\n * This class had been written to handle the output of the {@link NRRDLoader}.\n * It contains a volume of data and information about it. For now it only handles 3 dimensional data.\n *\n * @three_import import { Volume } from 'three/addons/misc/Volume.js';\n */\nclass Volume {\n\n\t/**\n\t * Constructs a new volume.\n\t *\n\t * @param {number} [xLength] - Width of the volume.\n\t * @param {number} [yLength] - Length of the volume.\n\t * @param {number} [zLength] - Depth of the volume.\n\t * @param {string} [type] - The type of data (uint8, uint16, ...).\n\t * @param {ArrayBuffer} [arrayBuffer] - The buffer with volume data.\n\t */\n\tconstructor( xLength, yLength, zLength, type, arrayBuffer ) {\n\n\t\tif ( xLength !== undefined ) {\n\n\t\t\t/**\n\t\t\t * Width of the volume in the IJK coordinate system.\n\t\t\t *\n\t\t\t * @type {number}\n\t\t\t * @default 1\n\t\t\t */\n\t\t\tthis.xLength = Number( xLength ) || 1;\n\n\t\t\t/**\n\t\t\t * Height of the volume in the IJK coordinate system.\n\t\t\t *\n\t\t\t * @type {number}\n\t\t\t * @default 1\n\t\t\t */\n\t\t\tthis.yLength = Number( yLength ) || 1;\n\n\t\t\t/**\n\t\t\t * Depth of the volume in the IJK coordinate system.\n\t\t\t *\n\t\t\t * @type {number}\n\t\t\t * @default 1\n\t\t\t */\n\t\t\tthis.zLength = Number( zLength ) || 1;\n\n\t\t\t/**\n\t\t\t * The order of the Axis dictated by the NRRD header\n\t\t\t *\n\t\t\t * @type {Array<string>}\n\t\t\t */\n\t\t\tthis.axisOrder = [ 'x', 'y', 'z' ];\n\n\t\t\t/**\n\t\t\t * The data of the volume.\n\t\t\t *\n\t\t\t * @type {TypedArray}\n\t\t\t */\n\t\t\tthis.data;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Uint8' :\n\t\t\t\tcase 'uint8' :\n\t\t\t\tcase 'uchar' :\n\t\t\t\tcase 'unsigned char' :\n\t\t\t\tcase 'uint8_t' :\n\t\t\t\t\tthis.data = new Uint8Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Int8' :\n\t\t\t\tcase 'int8' :\n\t\t\t\tcase 'signed char' :\n\t\t\t\tcase 'int8_t' :\n\t\t\t\t\tthis.data = new Int8Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Int16' :\n\t\t\t\tcase 'int16' :\n\t\t\t\tcase 'short' :\n\t\t\t\tcase 'short int' :\n\t\t\t\tcase 'signed short' :\n\t\t\t\tcase 'signed short int' :\n\t\t\t\tcase 'int16_t' :\n\t\t\t\t\tthis.data = new Int16Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Uint16' :\n\t\t\t\tcase 'uint16' :\n\t\t\t\tcase 'ushort' :\n\t\t\t\tcase 'unsigned short' :\n\t\t\t\tcase 'unsigned short int' :\n\t\t\t\tcase 'uint16_t' :\n\t\t\t\t\tthis.data = new Uint16Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Int32' :\n\t\t\t\tcase 'int32' :\n\t\t\t\tcase 'int' :\n\t\t\t\tcase 'signed int' :\n\t\t\t\tcase 'int32_t' :\n\t\t\t\t\tthis.data = new Int32Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Uint32' :\n\t\t\t\tcase 'uint32' :\n\t\t\t\tcase 'uint' :\n\t\t\t\tcase 'unsigned int' :\n\t\t\t\tcase 'uint32_t' :\n\t\t\t\t\tthis.data = new Uint32Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'longlong' :\n\t\t\t\tcase 'long long' :\n\t\t\t\tcase 'long long int' :\n\t\t\t\tcase 'signed long long' :\n\t\t\t\tcase 'signed long long int' :\n\t\t\t\tcase 'int64' :\n\t\t\t\tcase 'int64_t' :\n\t\t\t\tcase 'ulonglong' :\n\t\t\t\tcase 'unsigned long long' :\n\t\t\t\tcase 'unsigned long long int' :\n\t\t\t\tcase 'uint64' :\n\t\t\t\tcase 'uint64_t' :\n\t\t\t\t\tthrow new Error( 'Error in Volume constructor : this type is not supported in JavaScript' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Float32' :\n\t\t\t\tcase 'float32' :\n\t\t\t\tcase 'float' :\n\t\t\t\t\tthis.data = new Float32Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Float64' :\n\t\t\t\tcase 'float64' :\n\t\t\t\tcase 'double' :\n\t\t\t\t\tthis.data = new Float64Array( arrayBuffer );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\tthis.data = new Uint8Array( arrayBuffer );\n\n\t\t\t}\n\n\t\t\tif ( this.data.length !== this.xLength * this.yLength * this.zLength ) {\n\n\t\t\t\tthrow new Error( 'Error in Volume constructor, lengths are not matching arrayBuffer size' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Spacing to apply to the volume from IJK to RAS coordinate system\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.spacing = [ 1, 1, 1 ];\n\n\t\t/**\n\t\t * Offset of the volume in the RAS coordinate system\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.offset = [ 0, 0, 0 ];\n\n\t\t/**\n\t\t * The IJK to RAS matrix.\n\t\t *\n\t\t * @type {Martrix3}\n\t\t */\n\t\tthis.matrix = new Matrix3();\n\t\tthis.matrix.identity();\n\n\t\t/**\n\t\t * The RAS to IJK matrix.\n\t\t *\n\t\t * @type {Martrix3}\n\t\t */\n\t\tthis.inverseMatrix = new Matrix3();\n\n\t\tlet lowerThreshold = - Infinity;\n\t\tObject.defineProperty( this, 'lowerThreshold', {\n\t\t\tget: function () {\n\n\t\t\t\treturn lowerThreshold;\n\n\t\t\t},\n\t\t\t/**\n\t\t\t * The voxels with values under this threshold won't appear in the slices.\n\t\t\t * If changed, geometryNeedsUpdate is automatically set to true on all the slices associated to this volume.\n\t\t\t *\n\t\t\t * @name Volume#lowerThreshold\n\t\t\t * @type {number}\n\t\t\t * @param {number} value\n\t\t\t */\n\t\t\tset: function ( value ) {\n\n\t\t\t\tlowerThreshold = value;\n\t\t\t\tthis.sliceList.forEach( function ( slice ) {\n\n\t\t\t\t\tslice.geometryNeedsUpdate = true;\n\n\t\t\t\t} );\n\n\t\t\t}\n\t\t} );\n\n\t\tlet upperThreshold = Infinity;\n\t\tObject.defineProperty( this, 'upperThreshold', {\n\t\t\tget: function () {\n\n\t\t\t\treturn upperThreshold;\n\n\t\t\t},\n\t\t\t/**\n\t\t\t * The voxels with values over this threshold won't appear in the slices.\n\t\t\t * If changed, geometryNeedsUpdate is automatically set to true on all the slices associated to this volume\n\t\t\t *\n\t\t\t * @name Volume#upperThreshold\n\t\t\t * @type {number}\n\t\t\t * @param {number} value\n\t\t\t */\n\t\t\tset: function ( value ) {\n\n\t\t\t\tupperThreshold = value;\n\t\t\t\tthis.sliceList.forEach( function ( slice ) {\n\n\t\t\t\t\tslice.geometryNeedsUpdate = true;\n\n\t\t\t\t} );\n\n\t\t\t}\n\t\t} );\n\n\n\t\t/**\n\t\t * The list of all the slices associated to this volume\n\t\t *\n\t\t * @type {Array}\n\t\t */\n\t\tthis.sliceList = [];\n\n\t\t/**\n\t\t * Whether to use segmentation mode or not.\n\t\t * It can load 16-bits nrrds correctly.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.segmentation = false;\n\n\n\t\t/**\n\t\t * This array holds the dimensions of the volume in the RAS space\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.RASDimensions = [];\n\n\t}\n\n\t/**\n\t * Shortcut for data[access(i,j,k)].\n\t *\n\t * @param {number} i - First coordinate.\n\t * @param {number} j - Second coordinate.\n\t * @param {number} k - Third coordinate.\n\t * @returns {number} The value in the data array.\n\t */\n\tgetData( i, j, k ) {\n\n\t\treturn this.data[ k * this.xLength * this.yLength + j * this.xLength + i ];\n\n\t}\n\n\t/**\n\t * Compute the index in the data array corresponding to the given coordinates in IJK system.\n\t *\n\t * @param {number} i - First coordinate.\n\t * @param {number} j - Second coordinate.\n\t * @param {number} k - Third coordinate.\n\t * @returns {number} The index.\n\t */\n\taccess( i, j, k ) {\n\n\t\treturn k * this.xLength * this.yLength + j * this.xLength + i;\n\n\t}\n\n\t/**\n\t * Retrieve the IJK coordinates of the voxel corresponding of the given index in the data.\n\t *\n\t * @param {number} index - Index of the voxel.\n\t * @returns {Array<number>} The IJK coordinates as `[x,y,z]`.\n\t */\n\treverseAccess( index ) {\n\n\t\tconst z = Math.floor( index / ( this.yLength * this.xLength ) );\n\t\tconst y = Math.floor( ( index - z * this.yLength * this.xLength ) / this.xLength );\n\t\tconst x = index - z * this.yLength * this.xLength - y * this.xLength;\n\t\treturn [ x, y, z ];\n\n\t}\n\n\t/**\n\t * Apply a function to all the voxels, be careful, the value will be replaced.\n\t *\n\t * @param {Function} functionToMap A function to apply to every voxel, will be called with the following parameters:\n\t * value of the voxel, index of the voxel, the data (TypedArray).\n\t * @param {Object} context - You can specify a context in which call the function, default if this Volume.\n\t * @returns {Volume} A reference to this instance.\n\t */\n\tmap( functionToMap, context ) {\n\n\t\tconst length = this.data.length;\n\t\tcontext = context || this;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tthis.data[ i ] = functionToMap.call( context, this.data[ i ], i, this.data );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Compute the orientation of the slice and returns all the information relative to the geometry such as sliceAccess,\n\t * the plane matrix (orientation and position in RAS coordinate) and the dimensions of the plane in both coordinate system.\n\t *\n\t * @param {('x'|'y'|'z')} axis - The normal axis to the slice.\n\t * @param {number} RASIndex - The index of the slice.\n\t * @returns {Object} An object containing all the useful information on the geometry of the slice.\n\t */\n\textractPerpendicularPlane( axis, RASIndex ) {\n\n\t\tlet firstSpacing,\n\t\t\tsecondSpacing,\n\t\t\tpositionOffset,\n\t\t\tIJKIndex;\n\n\t\tconst axisInIJK = new Vector3(),\n\t\t\tfirstDirection = new Vector3(),\n\t\t\tsecondDirection = new Vector3(),\n\t\t\tplaneMatrix = ( new Matrix4() ).identity(),\n\t\t\tvolume = this;\n\n\t\tconst dimensions = new Vector3( this.xLength, this.yLength, this.zLength );\n\n\n\t\tswitch ( axis ) {\n\n\t\t\tcase 'x' :\n\t\t\t\taxisInIJK.set( 1, 0, 0 );\n\t\t\t\tfirstDirection.set( 0, 0, - 1 );\n\t\t\t\tsecondDirection.set( 0, - 1, 0 );\n\t\t\t\tfirstSpacing = this.spacing[ this.axisOrder.indexOf( 'z' ) ];\n\t\t\t\tsecondSpacing = this.spacing[ this.axisOrder.indexOf( 'y' ) ];\n\t\t\t\tIJKIndex = new Vector3( RASIndex, 0, 0 );\n\n\t\t\t\tplaneMatrix.multiply( ( new Matrix4() ).makeRotationY( Math.PI / 2 ) );\n\t\t\t\tpositionOffset = ( volume.RASDimensions[ 0 ] - 1 ) / 2;\n\t\t\t\tplaneMatrix.setPosition( new Vector3( RASIndex - positionOffset, 0, 0 ) );\n\t\t\t\tbreak;\n\t\t\tcase 'y' :\n\t\t\t\taxisInIJK.set( 0, 1, 0 );\n\t\t\t\tfirstDirection.set( 1, 0, 0 );\n\t\t\t\tsecondDirection.set( 0, 0, 1 );\n\t\t\t\tfirstSpacing = this.spacing[ this.axisOrder.indexOf( 'x' ) ];\n\t\t\t\tsecondSpacing = this.spacing[ this.axisOrder.indexOf( 'z' ) ];\n\t\t\t\tIJKIndex = new Vector3( 0, RASIndex, 0 );\n\n\t\t\t\tplaneMatrix.multiply( ( new Matrix4() ).makeRotationX( - Math.PI / 2 ) );\n\t\t\t\tpositionOffset = ( volume.RASDimensions[ 1 ] - 1 ) / 2;\n\t\t\t\tplaneMatrix.setPosition( new Vector3( 0, RASIndex - positionOffset, 0 ) );\n\t\t\t\tbreak;\n\t\t\tcase 'z' :\n\t\t\tdefault :\n\t\t\t\taxisInIJK.set( 0, 0, 1 );\n\t\t\t\tfirstDirection.set( 1, 0, 0 );\n\t\t\t\tsecondDirection.set( 0, - 1, 0 );\n\t\t\t\tfirstSpacing = this.spacing[ this.axisOrder.indexOf( 'x' ) ];\n\t\t\t\tsecondSpacing = this.spacing[ this.axisOrder.indexOf( 'y' ) ];\n\t\t\t\tIJKIndex = new Vector3( 0, 0, RASIndex );\n\n\t\t\t\tpositionOffset = ( volume.RASDimensions[ 2 ] - 1 ) / 2;\n\t\t\t\tplaneMatrix.setPosition( new Vector3( 0, 0, RASIndex - positionOffset ) );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( ! this.segmentation ) {\n\n\t\t\tfirstDirection.applyMatrix4( volume.inverseMatrix ).normalize();\n\t\t\tsecondDirection.applyMatrix4( volume.inverseMatrix ).normalize();\n\t\t\taxisInIJK.applyMatrix4( volume.inverseMatrix ).normalize();\n\n\t\t}\n\n\t\tfirstDirection.arglet = 'i';\n\t\tsecondDirection.arglet = 'j';\n\t\tconst iLength = Math.floor( Math.abs( firstDirection.dot( dimensions ) ) );\n\t\tconst jLength = Math.floor( Math.abs( secondDirection.dot( dimensions ) ) );\n\t\tconst planeWidth = Math.abs( iLength * firstSpacing );\n\t\tconst planeHeight = Math.abs( jLength * secondSpacing );\n\n\t\tIJKIndex = Math.abs( Math.round( IJKIndex.applyMatrix4( volume.inverseMatrix ).dot( axisInIJK ) ) );\n\t\tconst base = [ new Vector3( 1, 0, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ) ];\n\t\tconst iDirection = [ firstDirection, secondDirection, axisInIJK ].find( function ( x ) {\n\n\t\t\treturn Math.abs( x.dot( base[ 0 ] ) ) > 0.9;\n\n\t\t} );\n\t\tconst jDirection = [ firstDirection, secondDirection, axisInIJK ].find( function ( x ) {\n\n\t\t\treturn Math.abs( x.dot( base[ 1 ] ) ) > 0.9;\n\n\t\t} );\n\t\tconst kDirection = [ firstDirection, secondDirection, axisInIJK ].find( function ( x ) {\n\n\t\t\treturn Math.abs( x.dot( base[ 2 ] ) ) > 0.9;\n\n\t\t} );\n\n\t\tfunction sliceAccess( i, j ) {\n\n\t\t\tconst si = ( iDirection === axisInIJK ) ? IJKIndex : ( iDirection.arglet === 'i' ? i : j );\n\t\t\tconst sj = ( jDirection === axisInIJK ) ? IJKIndex : ( jDirection.arglet === 'i' ? i : j );\n\t\t\tconst sk = ( kDirection === axisInIJK ) ? IJKIndex : ( kDirection.arglet === 'i' ? i : j );\n\n\t\t\t// invert indices if necessary\n\n\t\t\tconst accessI = ( iDirection.dot( base[ 0 ] ) > 0 ) ? si : ( volume.xLength - 1 ) - si;\n\t\t\tconst accessJ = ( jDirection.dot( base[ 1 ] ) > 0 ) ? sj : ( volume.yLength - 1 ) - sj;\n\t\t\tconst accessK = ( kDirection.dot( base[ 2 ] ) > 0 ) ? sk : ( volume.zLength - 1 ) - sk;\n\n\t\t\treturn volume.access( accessI, accessJ, accessK );\n\n\t\t}\n\n\t\treturn {\n\t\t\tiLength: iLength,\n\t\t\tjLength: jLength,\n\t\t\tsliceAccess: sliceAccess,\n\t\t\tmatrix: planeMatrix,\n\t\t\tplaneWidth: planeWidth,\n\t\t\tplaneHeight: planeHeight\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns a slice corresponding to the given axis and index.\n\t * The coordinate are given in the Right Anterior Superior coordinate format.\n\t *\n\t * @param {('x'|'y'|'z')} axis - The normal axis to the slice.\n\t * @param {number} index - The index of the slice.\n\t * @returns {VolumeSlice} The extracted slice.\n\t */\n\textractSlice( axis, index ) {\n\n\t\tconst slice = new VolumeSlice( this, index, axis );\n\t\tthis.sliceList.push( slice );\n\t\treturn slice;\n\n\t}\n\n\t/**\n\t * Call repaint on all the slices extracted from this volume.\n\t *\n\t * @see {@link VolumeSlice#repaint}\n\t * @returns {Volume} A reference to this volume.\n\t */\n\trepaintAllSlices() {\n\n\t\tthis.sliceList.forEach( function ( slice ) {\n\n\t\t\tslice.repaint();\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Compute the minimum and the maximum of the data in the volume.\n\t *\n\t * @returns {Array<number>} The min/max data as `[min,max]`.\n\t */\n\tcomputeMinMax() {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\n\t\t// buffer the length\n\t\tconst datasize = this.data.length;\n\n\t\tlet i = 0;\n\n\t\tfor ( i = 0; i < datasize; i ++ ) {\n\n\t\t\tif ( ! isNaN( this.data[ i ] ) ) {\n\n\t\t\t\tconst value = this.data[ i ];\n\t\t\t\tmin = Math.min( min, value );\n\t\t\t\tmax = Math.max( max, value );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t\treturn [ min, max ];\n\n\t}\n\n}\n\nexport { Volume };\n"],"mappings":"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","ignoreList":[]}