{"version":3,"file":"node_modules/three/examples/jsm/modifiers/TessellateModifier.js","names":["BufferGeometry","Color","Float32BufferAttribute","Vector2","Vector3","TessellateModifier","constructor","maxEdgeLength","maxIterations","this","modify","geometry","index","toNonIndexed","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","undefined","normal","hasColors","color","hasUVs","uv","hasUV1s","uv1","positions","position","array","normals","colors","uvs","uv1s","positions2","normals2","colors2","uvs2","uv1s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","r","g","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"sources":["node_modules/three/examples/jsm/modifiers/TessellateModifier.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tColor,\n\tFloat32BufferAttribute,\n\tVector2,\n\tVector3\n} from 'three';\n\n/**\n * This class can be used to modify a geometry by breaking its edges if they\n * are longer than maximum length.\n *\n * ```js\n * const modifier = new TessellateModifier( 8, 6 );\n * geometry = modifier.modify( geometry );\n * ```\n *\n * @three_import import { TessellateModifier } from 'three/addons/modifiers/TessellateModifier.js';\n */\nclass TessellateModifier {\n\n\t/**\n\t * Constructs a new Tessellate modifier.\n\t *\n\t * @param {number} [maxEdgeLength=0.1] - The maximum edge length.\n\t * @param {number} [maxIterations=6] - The number of iterations.\n\t */\n\tconstructor( maxEdgeLength = 0.1, maxIterations = 6 ) {\n\n\t\t/**\n\t\t * The maximum edge length.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.maxEdgeLength = maxEdgeLength;\n\n\t\t/**\n\t\t * The maximum edge length.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.maxIterations = maxIterations;\n\n\t}\n\n\t/**\n\t * Returns a new, modified version of the given geometry by applying a tesselation.\n\t * Please note that the resulting geometry is always non-indexed.\n\t *\n\t * @param {BufferGeometry} geometry - The geometry to modify.\n\t * @return {BufferGeometry} A new, modified geometry.\n\t */\n\tmodify( geometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tgeometry = geometry.toNonIndexed();\n\n\t\t}\n\n\t\t//\n\n\t\tconst maxIterations = this.maxIterations;\n\t\tconst maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n\n\t\tconst va = new Vector3();\n\t\tconst vb = new Vector3();\n\t\tconst vc = new Vector3();\n\t\tconst vm = new Vector3();\n\t\tconst vs = [ va, vb, vc, vm ];\n\n\t\tconst na = new Vector3();\n\t\tconst nb = new Vector3();\n\t\tconst nc = new Vector3();\n\t\tconst nm = new Vector3();\n\t\tconst ns = [ na, nb, nc, nm ];\n\n\t\tconst ca = new Color();\n\t\tconst cb = new Color();\n\t\tconst cc = new Color();\n\t\tconst cm = new Color();\n\t\tconst cs = [ ca, cb, cc, cm ];\n\n\t\tconst ua = new Vector2();\n\t\tconst ub = new Vector2();\n\t\tconst uc = new Vector2();\n\t\tconst um = new Vector2();\n\t\tconst us = [ ua, ub, uc, um ];\n\n\t\tconst u2a = new Vector2();\n\t\tconst u2b = new Vector2();\n\t\tconst u2c = new Vector2();\n\t\tconst u2m = new Vector2();\n\t\tconst u2s = [ u2a, u2b, u2c, u2m ];\n\n\t\tconst attributes = geometry.attributes;\n\t\tconst hasNormals = attributes.normal !== undefined;\n\t\tconst hasColors = attributes.color !== undefined;\n\t\tconst hasUVs = attributes.uv !== undefined;\n\t\tconst hasUV1s = attributes.uv1 !== undefined;\n\n\t\tlet positions = attributes.position.array;\n\t\tlet normals = hasNormals ? attributes.normal.array : null;\n\t\tlet colors = hasColors ? attributes.color.array : null;\n\t\tlet uvs = hasUVs ? attributes.uv.array : null;\n\t\tlet uv1s = hasUV1s ? attributes.uv1.array : null;\n\n\t\tlet positions2 = positions;\n\t\tlet normals2 = normals;\n\t\tlet colors2 = colors;\n\t\tlet uvs2 = uvs;\n\t\tlet uv1s2 = uv1s;\n\n\t\tlet iteration = 0;\n\t\tlet tessellating = true;\n\n\t\tfunction addTriangle( a, b, c ) {\n\n\t\t\tconst v1 = vs[ a ];\n\t\t\tconst v2 = vs[ b ];\n\t\t\tconst v3 = vs[ c ];\n\n\t\t\tpositions2.push( v1.x, v1.y, v1.z );\n\t\t\tpositions2.push( v2.x, v2.y, v2.z );\n\t\t\tpositions2.push( v3.x, v3.y, v3.z );\n\n\t\t\tif ( hasNormals ) {\n\n\t\t\t\tconst n1 = ns[ a ];\n\t\t\t\tconst n2 = ns[ b ];\n\t\t\t\tconst n3 = ns[ c ];\n\n\t\t\t\tnormals2.push( n1.x, n1.y, n1.z );\n\t\t\t\tnormals2.push( n2.x, n2.y, n2.z );\n\t\t\t\tnormals2.push( n3.x, n3.y, n3.z );\n\n\t\t\t}\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tconst c1 = cs[ a ];\n\t\t\t\tconst c2 = cs[ b ];\n\t\t\t\tconst c3 = cs[ c ];\n\n\t\t\t\tcolors2.push( c1.r, c1.g, c1.b );\n\t\t\t\tcolors2.push( c2.r, c2.g, c2.b );\n\t\t\t\tcolors2.push( c3.r, c3.g, c3.b );\n\n\t\t\t}\n\n\t\t\tif ( hasUVs ) {\n\n\t\t\t\tconst u1 = us[ a ];\n\t\t\t\tconst u2 = us[ b ];\n\t\t\t\tconst u3 = us[ c ];\n\n\t\t\t\tuvs2.push( u1.x, u1.y );\n\t\t\t\tuvs2.push( u2.x, u2.y );\n\t\t\t\tuvs2.push( u3.x, u3.y );\n\n\t\t\t}\n\n\t\t\tif ( hasUV1s ) {\n\n\t\t\t\tconst u21 = u2s[ a ];\n\t\t\t\tconst u22 = u2s[ b ];\n\t\t\t\tconst u23 = u2s[ c ];\n\n\t\t\t\tuv1s2.push( u21.x, u21.y );\n\t\t\t\tuv1s2.push( u22.x, u22.y );\n\t\t\t\tuv1s2.push( u23.x, u23.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\twhile ( tessellating && iteration < maxIterations ) {\n\n\t\t\titeration ++;\n\t\t\ttessellating = false;\n\n\t\t\tpositions = positions2;\n\t\t\tpositions2 = [];\n\n\t\t\tif ( hasNormals ) {\n\n\t\t\t\tnormals = normals2;\n\t\t\t\tnormals2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasColors ) {\n\n\t\t\t\tcolors = colors2;\n\t\t\t\tcolors2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasUVs ) {\n\n\t\t\t\tuvs = uvs2;\n\t\t\t\tuvs2 = [];\n\n\t\t\t}\n\n\t\t\tif ( hasUV1s ) {\n\n\t\t\t\tuv1s = uv1s2;\n\t\t\t\tuv1s2 = [];\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6 ) {\n\n\t\t\t\tva.fromArray( positions, i + 0 );\n\t\t\t\tvb.fromArray( positions, i + 3 );\n\t\t\t\tvc.fromArray( positions, i + 6 );\n\n\t\t\t\tif ( hasNormals ) {\n\n\t\t\t\t\tna.fromArray( normals, i + 0 );\n\t\t\t\t\tnb.fromArray( normals, i + 3 );\n\t\t\t\t\tnc.fromArray( normals, i + 6 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasColors ) {\n\n\t\t\t\t\tca.fromArray( colors, i + 0 );\n\t\t\t\t\tcb.fromArray( colors, i + 3 );\n\t\t\t\t\tcc.fromArray( colors, i + 6 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasUVs ) {\n\n\t\t\t\t\tua.fromArray( uvs, i2 + 0 );\n\t\t\t\t\tub.fromArray( uvs, i2 + 2 );\n\t\t\t\t\tuc.fromArray( uvs, i2 + 4 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasUV1s ) {\n\n\t\t\t\t\tu2a.fromArray( uv1s, i2 + 0 );\n\t\t\t\t\tu2b.fromArray( uv1s, i2 + 2 );\n\t\t\t\t\tu2c.fromArray( uv1s, i2 + 4 );\n\n\t\t\t\t}\n\n\t\t\t\tconst dab = va.distanceToSquared( vb );\n\t\t\t\tconst dbc = vb.distanceToSquared( vc );\n\t\t\t\tconst dac = va.distanceToSquared( vc );\n\n\t\t\t\tif ( dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared ) {\n\n\t\t\t\t\ttessellating = true;\n\n\t\t\t\t\tif ( dab >= dbc && dab >= dac ) {\n\n\t\t\t\t\t\tvm.lerpVectors( va, vb, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( na, nb, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( ca, cb, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ua, ub, 0.5 );\n\t\t\t\t\t\tif ( hasUV1s ) u2m.lerpVectors( u2a, u2b, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 3, 2 );\n\t\t\t\t\t\taddTriangle( 3, 1, 2 );\n\n\t\t\t\t\t} else if ( dbc >= dab && dbc >= dac ) {\n\n\t\t\t\t\t\tvm.lerpVectors( vb, vc, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( nb, nc, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( cb, cc, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ub, uc, 0.5 );\n\t\t\t\t\t\tif ( hasUV1s ) u2m.lerpVectors( u2b, u2c, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 1, 3 );\n\t\t\t\t\t\taddTriangle( 3, 2, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvm.lerpVectors( va, vc, 0.5 );\n\t\t\t\t\t\tif ( hasNormals ) nm.lerpVectors( na, nc, 0.5 );\n\t\t\t\t\t\tif ( hasColors ) cm.lerpColors( ca, cc, 0.5 );\n\t\t\t\t\t\tif ( hasUVs ) um.lerpVectors( ua, uc, 0.5 );\n\t\t\t\t\t\tif ( hasUV1s ) u2m.lerpVectors( u2a, u2c, 0.5 );\n\n\t\t\t\t\t\taddTriangle( 0, 1, 3 );\n\t\t\t\t\t\taddTriangle( 3, 1, 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddTriangle( 0, 1, 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\n\t\tif ( hasNormals ) {\n\n\t\t\tgeometry2.setAttribute( 'normal', new Float32BufferAttribute( normals2, 3 ) );\n\n\t\t}\n\n\t\tif ( hasColors ) {\n\n\t\t\tgeometry2.setAttribute( 'color', new Float32BufferAttribute( colors2, 3 ) );\n\n\t\t}\n\n\t\tif ( hasUVs ) {\n\n\t\t\tgeometry2.setAttribute( 'uv', new Float32BufferAttribute( uvs2, 2 ) );\n\n\t\t}\n\n\t\tif ( hasUV1s ) {\n\n\t\t\tgeometry2.setAttribute( 'uv1', new Float32BufferAttribute( uv1s2, 2 ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n}\n\nexport { TessellateModifier };\n"],"mappings":"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","ignoreList":[]}