{"version":3,"file":"node_modules/three/examples/jsm/objects/GroundedSkybox.js","names":["Mesh","MeshBasicMaterial","SphereGeometry","Vector3","GroundedSkybox","constructor","map","height","radius","resolution","Error","geometry","scale","pos","getAttribute","tmp","i","count","fromBufferAttribute","y","y1","f","multiplyScalar","toArray","array","needsUpdate","super","depthWrite"],"sources":["node_modules/three/examples/jsm/objects/GroundedSkybox.js"],"sourcesContent":["import { Mesh, MeshBasicMaterial, SphereGeometry, Vector3 } from 'three';\n\n/**\n * A ground-projected skybox.\n *\n * By default the object is centered at the camera, so it is often helpful to set\n * `skybox.position.y = height` to put the ground at the origin.\n *\n * ```js\n * const height = 15, radius = 100;\n *\n * const skybox = new GroundedSkybox( envMap, height, radius );\n * skybox.position.y = height;\n * scene.add( skybox );\n * ```\n *\n * @augments Mesh\n * @three_import import { GroundedSkybox } from 'three/addons/objects/GroundedSkybox.js';\n */\nclass GroundedSkybox extends Mesh {\n\n\t/**\n\t * Constructs a new ground-projected skybox.\n\t *\n\t * @param {Texture} map - The environment map to use.\n\t * @param {number} height - The height is how far the camera that took the photo was above the ground.\n\t * A larger value will magnify the downward part of the image.\n\t * @param {number} radius - The radius of the skybox. Must be large enough to ensure the scene's camera stays inside.\n\t * @param {number} [resolution=128] - The geometry resolution of the skybox.\n\t */\n\tconstructor( map, height, radius, resolution = 128 ) {\n\n\t\tif ( height <= 0 || radius <= 0 || resolution <= 0 ) {\n\n\t\t\tthrow new Error( 'GroundedSkybox height, radius, and resolution must be positive.' );\n\n\t\t}\n\n\t\tconst geometry = new SphereGeometry( radius, 2 * resolution, resolution );\n\t\tgeometry.scale( 1, 1, - 1 );\n\n\t\tconst pos = geometry.getAttribute( 'position' );\n\t\tconst tmp = new Vector3();\n\n\t\tfor ( let i = 0; i < pos.count; ++ i ) {\n\n\t\t\ttmp.fromBufferAttribute( pos, i );\n\t\t\tif ( tmp.y < 0 ) {\n\n\t\t\t\t// Smooth out the transition from flat floor to sphere:\n\t\t\t\tconst y1 = - height * 3 / 2;\n\t\t\t\tconst f =\n\t\t\t\t\t\ttmp.y < y1 ? - height / tmp.y : ( 1 - tmp.y * tmp.y / ( 3 * y1 * y1 ) );\n\t\t\t\ttmp.multiplyScalar( f );\n\t\t\t\ttmp.toArray( pos.array, 3 * i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tpos.needsUpdate = true;\n\n\t\tsuper( geometry, new MeshBasicMaterial( { map, depthWrite: false } ) );\n\n\t}\n\n}\n\nexport { GroundedSkybox };\n"],"mappings":"OAASA,KAAMC,kBAAmBC,eAAgBC,YAAe,QAmBjE,MAAMC,uBAAuBJ,KAW5B,WAAAK,CAAaC,EAAKC,EAAQC,EAAQC,EAAa,KAE9C,GAAKF,GAAU,GAAKC,GAAU,GAAKC,GAAc,EAEhD,MAAM,IAAIC,MAAO,mEAIlB,MAAMC,EAAW,IAAIT,eAAgBM,EAAQ,EAAIC,EAAYA,GAC7DE,EAASC,MAAO,EAAG,GAAK,GAExB,MAAMC,EAAMF,EAASG,aAAc,YAC7BC,EAAM,IAAIZ,QAEhB,IAAM,IAAIa,EAAI,EAAGA,EAAIH,EAAII,QAAUD,EAGlC,GADAD,EAAIG,oBAAqBL,EAAKG,GACzBD,EAAII,EAAI,EAAI,CAGhB,MAAMC,EAAgB,GAATb,EAAa,EACpBc,EACJN,EAAII,EAAIC,GAAOb,EAASQ,EAAII,EAAM,EAAIJ,EAAII,EAAIJ,EAAII,GAAM,EAAIC,EAAKA,GACnEL,EAAIO,eAAgBD,GACpBN,EAAIQ,QAASV,EAAIW,MAAO,EAAIR,EAE7B,CAIDH,EAAIY,aAAc,EAElBC,MAAOf,EAAU,IAAIV,kBAAmB,CAAEK,MAAKqB,YAAY,IAE5D,SAIQvB","ignoreList":[]}