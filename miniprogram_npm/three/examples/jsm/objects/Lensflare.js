import{AdditiveBlending,Box2,BufferGeometry,Color,FramebufferTexture,InterleavedBuffer,InterleavedBufferAttribute,Mesh,MeshBasicMaterial,RawShaderMaterial,UnsignedByteType,Vector2,Vector3,Vector4}from"three";class Lensflare extends Mesh{constructor(){super(Lensflare.Geometry,new MeshBasicMaterial({opacity:0,transparent:!0})),this.isLensflare=!0,this.type="Lensflare",this.frustumCulled=!1,this.renderOrder=1/0;const t=new Vector3,e=new Vector3,n=new FramebufferTexture(16,16),i=new FramebufferTexture(16,16);let r=UnsignedByteType;const o=Lensflare.Geometry,s=new RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}",depthTest:!0,depthWrite:!1,transparent:!1}),a=new RawShaderMaterial({uniforms:{map:{value:n},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}",depthTest:!1,depthWrite:!1,transparent:!1}),l=new Mesh(o,s),c=[],u=LensflareElement.Shader,v=new RawShaderMaterial({name:u.name,uniforms:{map:{value:null},occlusionMap:{value:i},color:{value:new Color(16777215)},scale:{value:new Vector2},screenPosition:{value:new Vector3}},vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:AdditiveBlending,transparent:!0,depthWrite:!1}),p=new Mesh(o,v);this.addElement=function(t){c.push(t)};const f=new Vector2,d=new Vector2,m=new Box2,y=new Vector4;this.onBeforeRender=function(u,h,x){u.getCurrentViewport(y);const g=u.getRenderTarget(),b=null!==g?g.texture.type:UnsignedByteType;r!==b&&(n.dispose(),i.dispose(),n.type=i.type=b,r=b);const w=y.w/y.z,M=y.z/2,V=y.w/2;let P=16/y.w;if(f.set(P*w,P),m.min.set(y.x,y.y),m.max.set(y.x+(y.z-16),y.y+(y.w-16)),e.setFromMatrixPosition(this.matrixWorld),e.applyMatrix4(x.matrixWorldInverse),!(e.z>0)&&(t.copy(e).applyMatrix4(x.projectionMatrix),d.x=y.x+t.x*M+M-8,d.y=y.y+t.y*V+V-8,m.containsPoint(d))){u.copyFramebufferToTexture(n,d);let e=s.uniforms;e.scale.value=f,e.screenPosition.value=t,u.renderBufferDirect(x,null,o,s,l,null),u.copyFramebufferToTexture(i,d),e=a.uniforms,e.scale.value=f,e.screenPosition.value=t,u.renderBufferDirect(x,null,o,a,l,null);const r=2*-t.x,m=2*-t.y;for(let e=0,n=c.length;e<n;e++){const n=c[e],i=v.uniforms;i.color.value.copy(n.color),i.map.value=n.texture,i.screenPosition.value.x=t.x+r*n.distance,i.screenPosition.value.y=t.y+m*n.distance,P=n.size/y.w;const s=y.w/y.z;i.scale.value.set(P*s,P),v.uniformsNeedUpdate=!0,u.renderBufferDirect(x,null,o,v,p,null)}}},this.dispose=function(){s.dispose(),a.dispose(),v.dispose(),n.dispose(),i.dispose();for(let t=0,e=c.length;t<e;t++)c[t].texture.dispose()}}}class LensflareElement{constructor(t,e=1,n=0,i=new Color(16777215)){this.texture=t,this.size=e,this.distance=n,this.color=i}}LensflareElement.Shader={name:"LensflareElementShader",uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}"},Lensflare.Geometry=function(){const t=new BufferGeometry,e=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),n=new InterleavedBuffer(e,5);return t.setIndex([0,1,2,0,2,3]),t.setAttribute("position",new InterleavedBufferAttribute(n,3,0,!1)),t.setAttribute("uv",new InterleavedBufferAttribute(n,2,3,!1)),t}();export{Lensflare,LensflareElement};
//# sourceMappingURL=Lensflare.js.map