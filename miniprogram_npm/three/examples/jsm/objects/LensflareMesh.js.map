{"version":3,"file":"node_modules/three/examples/jsm/objects/LensflareMesh.js","names":["AdditiveBlending","Box2","BufferGeometry","Color","FramebufferTexture","InterleavedBuffer","InterleavedBufferAttribute","Mesh","MeshBasicNodeMaterial","NodeMaterial","UnsignedByteType","Vector2","Vector3","Vector4","Node","texture","textureLoad","uv","ivec2","vec2","vec4","positionGeometry","reference","varyingProperty","materialReference","Fn","LensflareMesh","constructor","super","Geometry","opacity","transparent","this","isLensflareMesh","type","frustumCulled","renderOrder","Infinity","positionView","tempMap","occlusionMap","currentType","geometry","sharedValues","scale","positionScreen","screenPosition","vertexNode","xy","mul","add","z","material1a","depthTest","depthWrite","fog","colorNode","material1b","flipY","mesh1","elements","elementMeshes","material2","blending","material","pos","toVar","visibility","addAssign","vVisibility","assign","r","div","mulAssign","g","oneMinus","b","color","map","output","a","rgb","addElement","element","push","screenPositionPixels","validArea","viewport","lightsNode","onBeforeRender","renderer","scene","camera","getViewport","multiplyScalar","window","devicePixelRatio","renderTarget","getRenderTarget","dispose","invAspect","w","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderObject","vecX","vecY","i","l","length","mesh2","undefined","convertSRGBToLinear","distance","LensflareElement","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute"],"sources":["node_modules/three/examples/jsm/objects/LensflareMesh.js"],"sourcesContent":["import {\n\tAdditiveBlending,\n\tBox2,\n\tBufferGeometry,\n\tColor,\n\tFramebufferTexture,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tMesh,\n\tMeshBasicNodeMaterial,\n\tNodeMaterial,\n\tUnsignedByteType,\n\tVector2,\n\tVector3,\n\tVector4,\n\tNode\n} from 'three/webgpu';\n\nimport { texture, textureLoad, uv, ivec2, vec2, vec4, positionGeometry, reference, varyingProperty, materialReference, Fn } from 'three/tsl';\n\n/**\n * Creates a simulated lens flare that tracks a light.\n *\n * Note that this class can only be used with {@link WebGPURenderer}.\n * When using {@link WebGLRenderer}, use {@link Lensflare}.\n *\n * ```js\n * const light = new THREE.PointLight( 0xffffff, 1.5, 2000 );\n *\n * const lensflare = new LensflareMesh();\n * lensflare.addElement( new LensflareElement( textureFlare0, 512, 0 ) );\n * lensflare.addElement( new LensflareElement( textureFlare1, 512, 0 ) );\n * lensflare.addElement( new LensflareElement( textureFlare2, 60, 0.6 ) );\n *\n * light.add( lensflare );\n * ```\n *\n * @augments Mesh\n * @three_import import { LensflareMesh } from 'three/addons/objects/LensflareMesh.js';\n */\nclass LensflareMesh extends Mesh {\n\n\t/**\n\t * Constructs a new lensflare mesh.\n\t */\n\tconstructor() {\n\n\t\tsuper( LensflareMesh.Geometry, new MeshBasicNodeMaterial( { opacity: 0, transparent: true } ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLensflareMesh = true;\n\n\t\tthis.type = 'LensflareMesh';\n\n\t\t/**\n\t\t * Overwritten to disable view-frustum culling by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.frustumCulled = false;\n\n\t\t/**\n\t\t * Overwritten to make sure lensflares a rendered last.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.renderOrder = Infinity;\n\n\t\t//\n\n\t\tconst positionView = new Vector3();\n\n\t\t// textures\n\n\t\tconst tempMap = new FramebufferTexture( 16, 16 );\n\t\tconst occlusionMap = new FramebufferTexture( 16, 16 );\n\n\t\tlet currentType = UnsignedByteType;\n\n\t\tconst geometry = LensflareMesh.Geometry;\n\n\t\t// values for shared material uniforms\n\n\t\tconst sharedValues = {\n\t\t\tscale: new Vector2(),\n\t\t\tpositionScreen: new Vector3()\n\t\t};\n\n\t\t// materials\n\n\t\tconst scale = reference( 'scale', 'vec2', sharedValues );\n\t\tconst screenPosition = reference( 'positionScreen', 'vec3', sharedValues );\n\n\t\tconst vertexNode = vec4( positionGeometry.xy.mul( scale ).add( screenPosition.xy ), screenPosition.z, 1.0 );\n\n\t\tconst material1a = new NodeMaterial();\n\n\t\tmaterial1a.depthTest = true;\n\t\tmaterial1a.depthWrite = false;\n\t\tmaterial1a.transparent = false;\n\t\tmaterial1a.fog = false;\n\t\tmaterial1a.type = 'Lensflare-1a';\n\n\t\tmaterial1a.vertexNode = vertexNode;\n\t\tmaterial1a.colorNode = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\tconst material1b = new NodeMaterial();\n\n\t\tmaterial1b.depthTest = false;\n\t\tmaterial1b.depthWrite = false;\n\t\tmaterial1b.transparent = false;\n\t\tmaterial1b.fog = false;\n\t\tmaterial1b.type = 'Lensflare-1b';\n\n\t\tmaterial1b.vertexNode = vertexNode;\n\t\tmaterial1b.colorNode = texture( tempMap, vec2( uv().flipY() ) );\n\n\t\t// the following object is used for occlusionMap generation\n\n\t\tconst mesh1 = new Mesh( geometry, material1a );\n\n\t\t//\n\n\t\tconst elements = [];\n\t\tconst elementMeshes = [];\n\n\t\tconst material2 = new NodeMaterial();\n\n\t\tmaterial2.transparent = true;\n\t\tmaterial2.blending = AdditiveBlending;\n\t\tmaterial2.depthWrite = false;\n\t\tmaterial2.depthTest = false;\n\t\tmaterial2.fog = false;\n\t\tmaterial2.type = 'Lensflare-2';\n\n\t\tmaterial2.screenPosition = new Vector3();\n\t\tmaterial2.scale = new Vector2();\n\t\tmaterial2.occlusionMap = occlusionMap;\n\n\t\tmaterial2.vertexNode = Fn( ( { material } ) => {\n\n\t\t\tconst scale = materialReference( 'scale', 'vec2' );\n\t\t\tconst screenPosition = materialReference( 'screenPosition', 'vec3' );\n\n\t\t\tconst occlusionMap = material.occlusionMap;\n\n\t\t\tconst pos = positionGeometry.xy.toVar();\n\n\t\t\tconst visibility = textureLoad( occlusionMap, ivec2( 2, 2 ) ).toVar();\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 8, 2 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 14, 2 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 14, 8 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 14, 14 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 8, 14 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 2, 14 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 2, 8 ) ) );\n\t\t\tvisibility.addAssign( textureLoad( occlusionMap, ivec2( 8, 8 ) ) );\n\n\t\t\tconst vVisibility = varyingProperty( 'float', 'vVisibility' );\n\n\t\t\tvVisibility.assign( visibility.r.div( 9.0 ) );\n\t\t\tvVisibility.mulAssign( visibility.g.div( 9.0 ).oneMinus() );\n\t\t\tvVisibility.mulAssign( visibility.b.div( 9.0 ) );\n\n\t\t\treturn vec4( ( pos.mul( scale ).add( screenPosition.xy ).xy ), screenPosition.z, 1.0 );\n\n\t\t} )();\n\n\t\tmaterial2.colorNode = Fn( () => {\n\n\t\t\tconst color = reference( 'color', 'color' );\n\t\t\tconst map = reference( 'map', 'texture' );\n\n\t\t\tconst vVisibility = varyingProperty( 'float', 'vVisibility' );\n\n\t\t\tconst output = map.toVar();\n\n\t\t\toutput.a.mulAssign( vVisibility );\n\t\t\toutput.rgb.mulAssign( color );\n\n\t\t\treturn output;\n\n\t\t} )();\n\n\t\t/**\n\t\t * Adds the given lensflare element to this instance.\n\t\t *\n\t\t * @param {LensflareElement} element - The element to add.\n\t\t */\n\t\tthis.addElement = function ( element ) {\n\n\t\t\telements.push( element );\n\n\t\t};\n\n\t\t//\n\n\t\tconst positionScreen = sharedValues.positionScreen;\n\t\tconst screenPositionPixels = new Vector4( 0, 0, 16, 16 );\n\t\tconst validArea = new Box2();\n\t\tconst viewport = new Vector4();\n\n\t\t// dummy node for renderer.renderObject()\n\t\tconst lightsNode = new Node();\n\n\t\tthis.onBeforeRender = ( renderer, scene, camera ) => {\n\n\t\t\trenderer.getViewport( viewport );\n\n\t\t\tviewport.multiplyScalar( window.devicePixelRatio );\n\n\t\t\tconst renderTarget = renderer.getRenderTarget();\n\t\t\tconst type = ( renderTarget !== null ) ? renderTarget.texture.type : UnsignedByteType;\n\n\t\t\tif ( currentType !== type ) {\n\n\t\t\t\ttempMap.dispose();\n\t\t\t\tocclusionMap.dispose();\n\n\t\t\t\ttempMap.type = occlusionMap.type = type;\n\n\t\t\t\tcurrentType = type;\n\n\t\t\t}\n\n\t\t\tconst invAspect = viewport.w / viewport.z;\n\t\t\tconst halfViewportWidth = viewport.z / 2.0;\n\t\t\tconst halfViewportHeight = viewport.w / 2.0;\n\n\t\t\tconst size = 16 / viewport.w;\n\n\t\t\tsharedValues.scale.set( size * invAspect, size );\n\n\t\t\tvalidArea.min.set( viewport.x, viewport.y );\n\t\t\tvalidArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );\n\n\t\t\t// calculate position in screen space\n\n\t\t\tpositionView.setFromMatrixPosition( this.matrixWorld );\n\t\t\tpositionView.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t\tif ( positionView.z > 0 ) return; // lensflare is behind the camera\n\n\t\t\tpositionScreen.copy( positionView ).applyMatrix4( camera.projectionMatrix );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( positionScreen.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y - ( positionScreen.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\trenderer.copyFramebufferToTexture( tempMap, screenPositionPixels );\n\n\t\t\t\t// render pink quad\n\n\t\t\t\trenderer.renderObject( mesh1, scene, camera, geometry, material1a, null, lightsNode );\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\trenderer.copyFramebufferToTexture( occlusionMap, screenPositionPixels );\n\n\t\t\t\t// restore graphics\n\n\t\t\t\trenderer.renderObject( mesh1, scene, camera, geometry, material1b, null, lightsNode );\n\n\t\t\t\t// render elements\n\n\t\t\t\tconst vecX = - positionScreen.x * 2;\n\t\t\t\tconst vecY = - positionScreen.y * 2;\n\n\t\t\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst element = elements[ i ];\n\n\t\t\t\t\tlet mesh2 = elementMeshes[ i ];\n\n\t\t\t\t\tif ( mesh2 === undefined ) {\n\n\t\t\t\t\t\tmesh2 = elementMeshes[ i ] = new Mesh( geometry, material2 );\n\n\t\t\t\t\t\tmesh2.color = element.color.convertSRGBToLinear();\n\t\t\t\t\t\tmesh2.map = element.texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial2.screenPosition.x = positionScreen.x + vecX * element.distance;\n\t\t\t\t\tmaterial2.screenPosition.y = positionScreen.y - vecY * element.distance;\n\t\t\t\t\tmaterial2.screenPosition.z = positionScreen.z;\n\n\t\t\t\t\tconst size = element.size / viewport.w;\n\n\t\t\t\t\tmaterial2.scale.set( size * invAspect, size );\n\n\t\t\t\t\trenderer.renderObject( mesh2, scene, camera, geometry, material2, null, lightsNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Frees the GPU-related resources allocated by this instance. Call this\n\t\t * method whenever this instance is no longer used in your app.\n\t\t */\n\t\tthis.dispose = function () {\n\n\t\t\tmaterial1a.dispose();\n\t\t\tmaterial1b.dispose();\n\t\t\tmaterial2.dispose();\n\n\t\t\ttempMap.dispose();\n\t\t\tocclusionMap.dispose();\n\n\t\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\t\telements[ i ].texture.dispose();\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\n//\n\nclass LensflareElement {\n\n\tconstructor( texture, size = 1, distance = 0, color = new Color( 0xffffff ) ) {\n\n\t\tthis.texture = texture;\n\t\tthis.size = size;\n\t\tthis.distance = distance;\n\t\tthis.color = color;\n\n\t}\n\n}\n\nLensflareMesh.Geometry = ( function () {\n\n\tconst geometry = new BufferGeometry();\n\n\tconst float32Array = new Float32Array( [\n\t\t- 1, - 1, 0, 0, 0,\n\t\t1, - 1, 0, 1, 0,\n\t\t1, 1, 0, 1, 1,\n\t\t- 1, 1, 0, 0, 1\n\t] );\n\n\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\tgeometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\tgeometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\treturn geometry;\n\n} )();\n\nexport { LensflareMesh, LensflareElement };\n"],"mappings":"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","ignoreList":[]}