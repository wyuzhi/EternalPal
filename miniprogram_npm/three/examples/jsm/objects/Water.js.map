{"version":3,"file":"node_modules/three/examples/jsm/objects/Water.js","names":["Color","FrontSide","Matrix4","Mesh","PerspectiveCamera","Plane","ShaderMaterial","UniformsLib","UniformsUtils","Vector3","Vector4","WebGLRenderTarget","Water","constructor","geometry","options","super","this","isWater","scope","textureWidth","undefined","textureHeight","clipBias","alpha","time","normalSampler","waterNormals","sunDirection","sunColor","waterColor","eye","distortionScale","side","fog","mirrorPlane","normal","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","mirrorCamera","renderTarget","mirrorShader","name","uniforms","merge","value","mirrorSampler","size","vertexShader","fragmentShader","material","clone","lights","texture","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","visible","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport"],"sources":["node_modules/three/examples/jsm/objects/Water.js"],"sourcesContent":["import {\n\tColor,\n\tFrontSide,\n\tMatrix4,\n\tMesh,\n\tPerspectiveCamera,\n\tPlane,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector3,\n\tVector4,\n\tWebGLRenderTarget\n} from 'three';\n\n/**\n * A basic flat, reflective water effect.\n *\n * Note that this class can only be used with {@link WebGLRenderer}.\n * When using {@link WebGPURenderer}, use {@link WaterMesh}.\n *\n * References:\n *\n * - [Flat mirror for three.js]{@link https://github.com/Slayvin}\n * - [An implementation of water shader based on the flat mirror]{@link https://home.adelphi.edu/~stemkoski/}\n * - [Water shader explanations in WebGL]{@link http://29a.ch/slides/2012/webglwater/ }\n *\n * @augments Mesh\n * @three_import import { Water } from 'three/addons/objects/Water.js';\n */\nclass Water extends Mesh {\n\n\t/**\n\t * Constructs a new water instance.\n\t *\n\t * @param {BufferGeometry} geometry - The water's geometry.\n\t * @param {Water~Options} [options] - The configuration options.\n\t */\n\tconstructor( geometry, options = {} ) {\n\n\t\tsuper( geometry );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWater = true;\n\n\t\tconst scope = this;\n\n\t\tconst textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n\t\tconst textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n\n\t\tconst clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n\t\tconst alpha = options.alpha !== undefined ? options.alpha : 1.0;\n\t\tconst time = options.time !== undefined ? options.time : 0.0;\n\t\tconst normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n\t\tconst sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3( 0.70707, 0.70707, 0.0 );\n\t\tconst sunColor = new Color( options.sunColor !== undefined ? options.sunColor : 0xffffff );\n\t\tconst waterColor = new Color( options.waterColor !== undefined ? options.waterColor : 0x7F7F7F );\n\t\tconst eye = options.eye !== undefined ? options.eye : new Vector3( 0, 0, 0 );\n\t\tconst distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n\t\tconst side = options.side !== undefined ? options.side : FrontSide;\n\t\tconst fog = options.fog !== undefined ? options.fog : false;\n\n\t\t//\n\n\t\tconst mirrorPlane = new Plane();\n\t\tconst normal = new Vector3();\n\t\tconst mirrorWorldPosition = new Vector3();\n\t\tconst cameraWorldPosition = new Vector3();\n\t\tconst rotationMatrix = new Matrix4();\n\t\tconst lookAtPosition = new Vector3( 0, 0, - 1 );\n\t\tconst clipPlane = new Vector4();\n\n\t\tconst view = new Vector3();\n\t\tconst target = new Vector3();\n\t\tconst q = new Vector4();\n\n\t\tconst textureMatrix = new Matrix4();\n\n\t\tconst mirrorCamera = new PerspectiveCamera();\n\n\t\tconst renderTarget = new WebGLRenderTarget( textureWidth, textureHeight );\n\n\t\tconst mirrorShader = {\n\n\t\t\tname: 'MirrorShader',\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib[ 'fog' ],\n\t\t\t\tUniformsLib[ 'lights' ],\n\t\t\t\t{\n\t\t\t\t\t'normalSampler': { value: null },\n\t\t\t\t\t'mirrorSampler': { value: null },\n\t\t\t\t\t'alpha': { value: 1.0 },\n\t\t\t\t\t'time': { value: 0.0 },\n\t\t\t\t\t'size': { value: 1.0 },\n\t\t\t\t\t'distortionScale': { value: 20.0 },\n\t\t\t\t\t'textureMatrix': { value: new Matrix4() },\n\t\t\t\t\t'sunColor': { value: new Color( 0x7F7F7F ) },\n\t\t\t\t\t'sunDirection': { value: new Vector3( 0.70707, 0.70707, 0 ) },\n\t\t\t\t\t'eye': { value: new Vector3() },\n\t\t\t\t\t'waterColor': { value: new Color( 0x555555 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <colorspace_fragment>\n\t\t\t\t\t#include <fog_fragment>\t\n\t\t\t\t}`\n\n\t\t};\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tname: mirrorShader.name,\n\t\t\tuniforms: UniformsUtils.clone( mirrorShader.uniforms ),\n\t\t\tvertexShader: mirrorShader.vertexShader,\n\t\t\tfragmentShader: mirrorShader.fragmentShader,\n\t\t\tlights: true,\n\t\t\tside: side,\n\t\t\tfog: fog\n\t\t} );\n\n\t\tmaterial.uniforms[ 'mirrorSampler' ].value = renderTarget.texture;\n\t\tmaterial.uniforms[ 'textureMatrix' ].value = textureMatrix;\n\t\tmaterial.uniforms[ 'alpha' ].value = alpha;\n\t\tmaterial.uniforms[ 'time' ].value = time;\n\t\tmaterial.uniforms[ 'normalSampler' ].value = normalSampler;\n\t\tmaterial.uniforms[ 'sunColor' ].value = sunColor;\n\t\tmaterial.uniforms[ 'waterColor' ].value = waterColor;\n\t\tmaterial.uniforms[ 'sunDirection' ].value = sunDirection;\n\t\tmaterial.uniforms[ 'distortionScale' ].value = distortionScale;\n\n\t\tmaterial.uniforms[ 'eye' ].value = eye;\n\n\t\tscope.material = material;\n\n\t\tscope.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\tmirrorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\t\tnormal.set( 0, 0, 1 );\n\t\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\t\tview.subVectors( mirrorWorldPosition, cameraWorldPosition );\n\n\t\t\t// Avoid rendering when mirror is facing away\n\n\t\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\t\tview.reflect( normal ).negate();\n\t\t\tview.add( mirrorWorldPosition );\n\n\t\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\t\ttarget.subVectors( mirrorWorldPosition, lookAtPosition );\n\t\t\ttarget.reflect( normal ).negate();\n\t\t\ttarget.add( mirrorWorldPosition );\n\n\t\t\tmirrorCamera.position.copy( view );\n\t\t\tmirrorCamera.up.set( 0, 1, 0 );\n\t\t\tmirrorCamera.up.applyMatrix4( rotationMatrix );\n\t\t\tmirrorCamera.up.reflect( normal );\n\t\t\tmirrorCamera.lookAt( target );\n\n\t\t\tmirrorCamera.far = camera.far; // Used in WebGLBackground\n\n\t\t\tmirrorCamera.updateMatrixWorld();\n\t\t\tmirrorCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t// Update the texture matrix\n\t\t\ttextureMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\t\t\ttextureMatrix.multiply( mirrorCamera.projectionMatrix );\n\t\t\ttextureMatrix.multiply( mirrorCamera.matrixWorldInverse );\n\n\t\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t\tmirrorPlane.setFromNormalAndCoplanarPoint( normal, mirrorWorldPosition );\n\t\t\tmirrorPlane.applyMatrix4( mirrorCamera.matrixWorldInverse );\n\n\t\t\tclipPlane.set( mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant );\n\n\t\t\tconst projectionMatrix = mirrorCamera.projectionMatrix;\n\n\t\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t\tq.z = - 1.0;\n\t\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t\t// Calculate the scaled plane vector\n\t\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t\t// Replacing the third row of the projection matrix\n\t\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t\teye.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\t// Render\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\t\tscope.visible = false;\n\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n\t\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\t\trenderer.render( scene, mirrorCamera );\n\n\t\t\tscope.visible = true;\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t// Restore viewport\n\n\t\t\tconst viewport = camera.viewport;\n\n\t\t\tif ( viewport !== undefined ) {\n\n\t\t\t\trenderer.state.viewport( viewport );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\n/**\n * Constructor options of `Water`.\n *\n * @typedef {Object} Water~Options\n * @property {number} [textureWidth=512] - The texture width. A higher value results in more clear reflections but is also more expensive.\n * @property {number} [textureHeight=512] - The texture height. A higher value results in more clear reflections but is also more expensive.\n * @property {number} [clipBias=0] - The clip bias.\n * @property {number} [alpha=1] - The alpha value.\n * @property {number} [time=0] - The time value.\n * @property {?Texture} [waterNormals=null] - The water's normal map.\n * @property {Vector3} [sunDirection=(0.70707,0.70707,0.0)] - The sun direction.\n * @property {number|Color|string} [sunColor=0xffffff] - The sun color.\n * @property {number|Color|string} [waterColor=0x7F7F7F] - The water color.\n * @property {Vector3} [eye] - The eye vector.\n * @property {number} [distortionScale=20] - The distortion scale.\n * @property {(FrontSide|BackSide|DoubleSide)} [side=FrontSide] - The water material's `side` property.\n * @property {boolean} [fog=false] - Whether the water should be affected by fog or not.\n **/\n\nexport { Water };\n"],"mappings":"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","ignoreList":[]}