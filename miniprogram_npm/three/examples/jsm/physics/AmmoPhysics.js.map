{"version":3,"file":"node_modules/three/examples/jsm/physics/AmmoPhysics.js","names":["async","AmmoPhysics","window","console","error","AmmoLib","Ammo","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","world","btDiscreteDynamicsWorld","setGravity","btVector3","worldTransform","btTransform","meshes","meshMap","WeakMap","addMesh","mesh","mass","shape","geometry","parameters","type","sx","undefined","width","sy","height","sz","depth","btBoxShape","setMargin","radius","btSphereShape","getShape","isInstancedMesh","array","instanceMatrix","bodies","i","count","index","transform","setFromOpenGLMatrix","slice","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","set","handleInstancedMesh","isMesh","position","quaternion","setIdentity","setOrigin","x","y","z","setRotation","btQuaternion","w","handleMesh","lastTime","setInterval","time","performance","now","delta","stepSimulation","l","length","get","j","getMotionState","getWorldTransform","compose","getOrigin","getRotation","needsUpdate","computeBoundingSphere","addScene","scene","traverse","child","physics","userData","setMeshPosition","setAngularVelocity","setLinearVelocity","setWorldTransform","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"sources":["node_modules/three/examples/jsm/physics/AmmoPhysics.js"],"sourcesContent":["/**\n * @classdesc Can be used to include Ammo.js as a Physics engine into\n * `three.js` apps. Make sure to include `ammo.wasm.js` first:\n * ```\n * <script src=\"jsm/libs/ammo.wasm.js\"></script>\n * ```\n * It is then possible to initialize the API via:\n * ```js\n * const physics = await AmmoPhysics();\n * ```\n *\n * @name AmmoPhysics\n * @class\n * @hideconstructor\n * @three_import import { AmmoPhysics } from 'three/addons/physics/AmmoPhysics.js';\n */\nasync function AmmoPhysics() {\n\n\tif ( 'Ammo' in window === false ) {\n\n\t\tconsole.error( 'AmmoPhysics: Couldn\\'t find Ammo.js' );\n\t\treturn;\n\n\t}\n\n\tconst AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n\tconst frameRate = 60;\n\n\tconst collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n\tconst dispatcher = new AmmoLib.btCollisionDispatcher( collisionConfiguration );\n\tconst broadphase = new AmmoLib.btDbvtBroadphase();\n\tconst solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n\tconst world = new AmmoLib.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );\n\tworld.setGravity( new AmmoLib.btVector3( 0, - 9.8, 0 ) );\n\n\tconst worldTransform = new AmmoLib.btTransform();\n\n\t//\n\n\tfunction getShape( geometry ) {\n\n\t\tconst parameters = geometry.parameters;\n\n\t\t// TODO change type to is*\n\n\t\tif ( geometry.type === 'BoxGeometry' ) {\n\n\t\t\tconst sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n\t\t\tconst sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n\t\t\tconst sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n\n\t\t\tconst shape = new AmmoLib.btBoxShape( new AmmoLib.btVector3( sx, sy, sz ) );\n\t\t\tshape.setMargin( 0.05 );\n\n\t\t\treturn shape;\n\n\t\t} else if ( geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry' ) {\n\n\t\t\tconst radius = parameters.radius !== undefined ? parameters.radius : 1;\n\n\t\t\tconst shape = new AmmoLib.btSphereShape( radius );\n\t\t\tshape.setMargin( 0.05 );\n\n\t\t\treturn shape;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tconst meshes = [];\n\tconst meshMap = new WeakMap();\n\n\tfunction addScene( scene ) {\n\n\t\tscene.traverse( function ( child ) {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tconst physics = child.userData.physics;\n\n\t\t\t\tif ( physics ) {\n\n\t\t\t\t\taddMesh( child, physics.mass );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction addMesh( mesh, mass = 0 ) {\n\n\t\tconst shape = getShape( mesh.geometry );\n\n\t\tif ( shape !== null ) {\n\n\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\thandleInstancedMesh( mesh, mass, shape );\n\n\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\thandleMesh( mesh, mass, shape );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction handleMesh( mesh, mass, shape ) {\n\n\t\tconst position = mesh.position;\n\t\tconst quaternion = mesh.quaternion;\n\n\t\tconst transform = new AmmoLib.btTransform();\n\t\ttransform.setIdentity();\n\t\ttransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\ttransform.setRotation( new AmmoLib.btQuaternion( quaternion.x, quaternion.y, quaternion.z, quaternion.w ) );\n\n\t\tconst motionState = new AmmoLib.btDefaultMotionState( transform );\n\n\t\tconst localInertia = new AmmoLib.btVector3( 0, 0, 0 );\n\t\tshape.calculateLocalInertia( mass, localInertia );\n\n\t\tconst rbInfo = new AmmoLib.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n\n\t\tconst body = new AmmoLib.btRigidBody( rbInfo );\n\t\t// body.setFriction( 4 );\n\t\tworld.addRigidBody( body );\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\t\t\tmeshMap.set( mesh, body );\n\n\t\t}\n\n\n\t}\n\n\tfunction handleInstancedMesh( mesh, mass, shape ) {\n\n\t\tconst array = mesh.instanceMatrix.array;\n\n\t\tconst bodies = [];\n\n\t\tfor ( let i = 0; i < mesh.count; i ++ ) {\n\n\t\t\tconst index = i * 16;\n\n\t\t\tconst transform = new AmmoLib.btTransform();\n\t\t\ttransform.setFromOpenGLMatrix( array.slice( index, index + 16 ) );\n\n\t\t\tconst motionState = new AmmoLib.btDefaultMotionState( transform );\n\n\t\t\tconst localInertia = new AmmoLib.btVector3( 0, 0, 0 );\n\t\t\tshape.calculateLocalInertia( mass, localInertia );\n\n\t\t\tconst rbInfo = new AmmoLib.btRigidBodyConstructionInfo( mass, motionState, shape, localInertia );\n\n\t\t\tconst body = new AmmoLib.btRigidBody( rbInfo );\n\t\t\tworld.addRigidBody( body );\n\n\t\t\tbodies.push( body );\n\n\t\t}\n\n\t\tif ( mass > 0 ) {\n\n\t\t\tmeshes.push( mesh );\n\n\t\t\tmeshMap.set( mesh, bodies );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction setMeshPosition( mesh, position, index = 0 ) {\n\n\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\tconst bodies = meshMap.get( mesh );\n\t\t\tconst body = bodies[ index ];\n\n\t\t\tbody.setAngularVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\t\t\tbody.setLinearVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\n\t\t\tworldTransform.setIdentity();\n\t\t\tworldTransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\t\tbody.setWorldTransform( worldTransform );\n\n\t\t} else if ( mesh.isMesh ) {\n\n\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\tbody.setAngularVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\t\t\tbody.setLinearVelocity( new AmmoLib.btVector3( 0, 0, 0 ) );\n\n\t\t\tworldTransform.setIdentity();\n\t\t\tworldTransform.setOrigin( new AmmoLib.btVector3( position.x, position.y, position.z ) );\n\t\t\tbody.setWorldTransform( worldTransform );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tlet lastTime = 0;\n\n\tfunction step() {\n\n\t\tconst time = performance.now();\n\n\t\tif ( lastTime > 0 ) {\n\n\t\t\tconst delta = ( time - lastTime ) / 1000;\n\n\t\t\tworld.stepSimulation( delta, 10 );\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tconst mesh = meshes[ i ];\n\n\t\t\t\tif ( mesh.isInstancedMesh ) {\n\n\t\t\t\t\tconst array = mesh.instanceMatrix.array;\n\t\t\t\t\tconst bodies = meshMap.get( mesh );\n\n\t\t\t\t\tfor ( let j = 0; j < bodies.length; j ++ ) {\n\n\t\t\t\t\t\tconst body = bodies[ j ];\n\n\t\t\t\t\t\tconst motionState = body.getMotionState();\n\t\t\t\t\t\tmotionState.getWorldTransform( worldTransform );\n\n\t\t\t\t\t\tconst position = worldTransform.getOrigin();\n\t\t\t\t\t\tconst quaternion = worldTransform.getRotation();\n\n\t\t\t\t\t\tcompose( position, quaternion, array, j * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.instanceMatrix.needsUpdate = true;\n\t\t\t\t\tmesh.computeBoundingSphere();\n\n\t\t\t\t} else if ( mesh.isMesh ) {\n\n\t\t\t\t\tconst body = meshMap.get( mesh );\n\n\t\t\t\t\tconst motionState = body.getMotionState();\n\t\t\t\t\tmotionState.getWorldTransform( worldTransform );\n\n\t\t\t\t\tconst position = worldTransform.getOrigin();\n\t\t\t\t\tconst quaternion = worldTransform.getRotation();\n\t\t\t\t\tmesh.position.set( position.x(), position.y(), position.z() );\n\t\t\t\t\tmesh.quaternion.set( quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlastTime = time;\n\n\t}\n\n\t// animate\n\n\tsetInterval( step, 1000 / frameRate );\n\n\treturn {\n\t\t/**\n\t\t * Adds the given scene to this physics simulation. Only meshes with a\n\t\t * `physics` object in their {@link Object3D#userData} field will be honored.\n\t\t * The object can be used to store the mass of the mesh. E.g.:\n\t\t * ```js\n\t\t * box.userData.physics = { mass: 1 };\n\t\t * ```\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#addScene\n\t\t * @param {Object3D} scene The scene or any type of 3D object to add.\n\t\t */\n\t\taddScene: addScene,\n\n\t\t/**\n\t\t * Adds the given mesh to this physics simulation.\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#addMesh\n\t\t * @param {Mesh} mesh The mesh to add.\n\t\t * @param {number} [mass=0] The mass in kg of the mesh.\n\t\t */\n\t\taddMesh: addMesh,\n\n\t\t/**\n\t\t * Set the position of the given mesh which is part of the physics simulation. Calling this\n\t\t * method will reset the current simulated velocity of the mesh.\n\t\t *\n\t\t * @method\n\t\t * @name AmmoPhysics#setMeshPosition\n\t\t * @param {Mesh} mesh The mesh to update the position for.\n\t\t * @param {Vector3} position - The new position.\n\t\t * @param {number} [index=0] - If the mesh is instanced, the index represents the instanced ID.\n\t\t */\n\t\tsetMeshPosition: setMeshPosition\n\t\t// addCompoundMesh\n\t};\n\n}\n\nfunction compose( position, quaternion, array, index ) {\n\n\tconst x = quaternion.x(), y = quaternion.y(), z = quaternion.z(), w = quaternion.w();\n\tconst x2 = x + x, y2 = y + y, z2 = z + z;\n\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\tarray[ index + 0 ] = ( 1 - ( yy + zz ) );\n\tarray[ index + 1 ] = ( xy + wz );\n\tarray[ index + 2 ] = ( xz - wy );\n\tarray[ index + 3 ] = 0;\n\n\tarray[ index + 4 ] = ( xy - wz );\n\tarray[ index + 5 ] = ( 1 - ( xx + zz ) );\n\tarray[ index + 6 ] = ( yz + wx );\n\tarray[ index + 7 ] = 0;\n\n\tarray[ index + 8 ] = ( xz + wy );\n\tarray[ index + 9 ] = ( yz - wx );\n\tarray[ index + 10 ] = ( 1 - ( xx + yy ) );\n\tarray[ index + 11 ] = 0;\n\n\tarray[ index + 12 ] = position.x();\n\tarray[ index + 13 ] = position.y();\n\tarray[ index + 14 ] = position.z();\n\tarray[ index + 15 ] = 1;\n\n}\n\nexport { AmmoPhysics };\n"],"mappings":"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","ignoreList":[]}