{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/AfterimagePass.js","names":["HalfFloatType","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","AfterimageShader","AfterimagePass","constructor","damp","super","this","uniforms","clone","compFsMaterial","vertexShader","fragmentShader","copyFsMaterial","blending","depthTest","depthWrite","_textureComp","window","innerWidth","innerHeight","magFilter","type","_textureOld","_compFsQuad","_copyFsQuad","value","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","material","tDiffuse","renderToScreen","clear","temp","setSize","width","height","dispose"],"sources":["node_modules/three/examples/jsm/postprocessing/AfterimagePass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\n/**\n * Pass for a basic after image effect.\n *\n * ```js\n * const afterimagePass = new AfterimagePass( 0.9 );\n * composer.addPass( afterimagePass );\n * ```\n *\n * @augments Pass\n * @three_import import { AfterimagePass } from 'three/addons/postprocessing/AfterimagePass.js';\n */\nclass AfterimagePass extends Pass {\n\n\t/**\n\t * Constructs a new after image pass.\n\t *\n\t * @param {number} [damp=0.96] - The damping intensity. A higher value means a stronger after image effect.\n\t */\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `damp` value at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.damp.value = 0.9;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( AfterimageShader.uniforms );\n\n\t\tthis.damp = damp;\n\n\t\t/**\n\t\t * The composition material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.compFsMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: AfterimageShader.vertexShader,\n\t\t\tfragmentShader: AfterimageShader.fragmentShader\n\n\t\t} );\n\n\t\t/**\n\t\t * The copy material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.copyFsMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis._compFsQuad = new FullScreenQuad( this.compFsMaterial );\n\t\tthis._copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\n\n\t}\n\n\t/**\n\t * The damping intensity, from 0.0 to 1.0. A higher value means a stronger after image effect.\n\t *\n\t * @type {number}\n\t */\n\tget damp() {\n\n\t\treturn this.uniforms[ 'damp' ].value;\n\n\t}\n\n\tset damp( value ) {\n\n\t\tthis.uniforms[ 'damp' ].value = value;\n\n\t}\n\n\t/**\n\t * Performs the after image pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this._textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this._textureComp );\n\t\tthis._compFsQuad.render( renderer );\n\n\t\tthis._copyFsQuad.material.uniforms.tDiffuse.value = this._textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis._copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this._textureOld;\n\t\tthis._textureOld = this._textureComp;\n\t\tthis._textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._textureComp.setSize( width, height );\n\t\tthis._textureOld.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._textureComp.dispose();\n\t\tthis._textureOld.dispose();\n\n\t\tthis.compFsMaterial.dispose();\n\t\tthis.copyFsMaterial.dispose();\n\n\t\tthis._compFsQuad.dispose();\n\t\tthis._copyFsQuad.dispose();\n\n\t}\n\n}\n\nexport { AfterimagePass };\n"],"mappings":"OACCA,cACAC,cACAC,WACAC,eACAC,cACAC,sBACM,eACEC,KAAMC,mBAAsB,mBAC5BC,eAAkB,kCAClBC,qBAAwB,iCAajC,MAAMC,uBAAuBJ,KAO5B,WAAAK,CAAaC,EAAO,KAEnBC,QAWAC,KAAKC,SAAWX,cAAcY,MAAOP,iBAAiBM,UAEtDD,KAAKF,KAAOA,EAOZE,KAAKG,eAAiB,IAAId,eAAgB,CAEzCY,SAAUD,KAAKC,SACfG,aAAcT,iBAAiBS,aAC/BC,eAAgBV,iBAAiBU,iBASlCL,KAAKM,eAAiB,IAAIjB,eAAgB,CACzCY,SAAUX,cAAcY,MAAOR,WAAWO,UAC1CG,aAAcV,WAAWU,aACzBC,eAAgBX,WAAWW,eAC3BE,SAAUnB,WACVoB,WAAW,EACXC,YAAY,IAKbT,KAAKU,aAAe,IAAInB,kBAAmBoB,OAAOC,WAAYD,OAAOE,YAAa,CACjFC,UAAW3B,cACX4B,KAAM7B,gBAGPc,KAAKgB,YAAc,IAAIzB,kBAAmBoB,OAAOC,WAAYD,OAAOE,YAAa,CAChFC,UAAW3B,cACX4B,KAAM7B,gBAGPc,KAAKiB,YAAc,IAAIxB,eAAgBO,KAAKG,gBAC5CH,KAAKkB,YAAc,IAAIzB,eAAgBO,KAAKM,eAE7C,CAOA,QAAIR,GAEH,OAAOE,KAAKC,SAAiB,KAAEkB,KAEhC,CAEA,QAAIrB,CAAMqB,GAETnB,KAAKC,SAAiB,KAAEkB,MAAQA,CAEjC,CAaA,MAAAC,CAAQC,EAAUC,EAAaC,GAE9BvB,KAAKC,SAAiB,KAAEkB,MAAQnB,KAAKgB,YAAYQ,QACjDxB,KAAKC,SAAiB,KAAEkB,MAAQI,EAAWC,QAE3CH,EAASI,gBAAiBzB,KAAKU,cAC/BV,KAAKiB,YAAYG,OAAQC,GAEzBrB,KAAKkB,YAAYQ,SAASzB,SAAS0B,SAASR,MAAQnB,KAAKU,aAAac,QAEjExB,KAAK4B,gBAETP,EAASI,gBAAiB,MAC1BzB,KAAKkB,YAAYE,OAAQC,KAIzBA,EAASI,gBAAiBH,GAErBtB,KAAK6B,OAAQR,EAASQ,QAE3B7B,KAAKkB,YAAYE,OAAQC,IAK1B,MAAMS,EAAO9B,KAAKgB,YAClBhB,KAAKgB,YAAchB,KAAKU,aACxBV,KAAKU,aAAeoB,CAGrB,CAQA,OAAAC,CAASC,EAAOC,GAEfjC,KAAKU,aAAaqB,QAASC,EAAOC,GAClCjC,KAAKgB,YAAYe,QAASC,EAAOC,EAElC,CAMA,OAAAC,GAEClC,KAAKU,aAAawB,UAClBlC,KAAKgB,YAAYkB,UAEjBlC,KAAKG,eAAe+B,UACpBlC,KAAKM,eAAe4B,UAEpBlC,KAAKiB,YAAYiB,UACjBlC,KAAKkB,YAAYgB,SAElB,SAIQtC","ignoreList":[]}