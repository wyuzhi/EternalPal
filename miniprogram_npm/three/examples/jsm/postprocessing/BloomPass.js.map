{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/BloomPass.js","names":["AdditiveBlending","HalfFloatType","ShaderMaterial","UniformsUtils","Vector2","WebGLRenderTarget","Pass","FullScreenQuad","ConvolutionShader","BloomPass","constructor","strength","kernelSize","sigma","super","this","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","name","vertexShader","fragmentShader","blending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","_renderTargetX","type","texture","_renderTargetY","_fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","setSize","width","height","dispose","tDiffuse","gauss","x","Math","exp","ceil","halfWidth","values","Array","sum","i"],"sources":["node_modules/three/examples/jsm/postprocessing/BloomPass.js"],"sourcesContent":["import {\n\tAdditiveBlending,\n\tHalfFloatType,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\n/**\n * A pass for a basic Bloom effect.\n *\n * {@link UnrealBloomPass} produces a more advanced Bloom but is also\n * more expensive.\n *\n * ```js\n * const effectBloom = new BloomPass( 0.75 );\n * composer.addPass( effectBloom );\n * ```\n *\n * @augments Pass\n * @three_import import { BloomPass } from 'three/addons/postprocessing/BloomPass.js';\n */\nclass BloomPass extends Pass {\n\n\t/**\n\t * Constructs a new Bloom pass.\n\t *\n\t * @param {number} [strength=1] - The Bloom strength.\n\t * @param {number} [kernelSize=25] - The kernel size.\n\t * @param {number} [sigma=4] - The sigma.\n\t */\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4 ) {\n\n\t\tsuper();\n\n\t\t// combine material\n\n\t\t/**\n\t\t * The combine pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.combineUniforms = UniformsUtils.clone( CombineShader.uniforms );\n\t\tthis.combineUniforms[ 'strength' ].value = strength;\n\n\t\t/**\n\t\t * The combine pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.materialCombine = new ShaderMaterial( {\n\n\t\t\tname: CombineShader.name,\n\t\t\tuniforms: this.combineUniforms,\n\t\t\tvertexShader: CombineShader.vertexShader,\n\t\t\tfragmentShader: CombineShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tconst convolutionShader = ConvolutionShader;\n\n\t\t/**\n\t\t * The convolution pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = buildKernel( sigma );\n\n\t\t/**\n\t\t * The convolution pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\t\tname: convolutionShader.name,\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t// internals\n\n\t\tthis._renderTargetX = new WebGLRenderTarget( 1, 1, { type: HalfFloatType } ); // will be resized later\n\t\tthis._renderTargetX.texture.name = 'BloomPass.x';\n\t\tthis._renderTargetY = new WebGLRenderTarget( 1, 1, { type: HalfFloatType } ); // will be resized later\n\t\tthis._renderTargetY.texture.name = 'BloomPass.y';\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Performs the Bloom pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blurred scene into texture (convolution pass 1)\n\n\t\tthis._fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this._renderTargetX );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\n\t\t// Render quad with blurred scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this._renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this._renderTargetY );\n\t\trenderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis._fsQuad.material = this.materialCombine;\n\n\t\tthis.combineUniforms[ 'tDiffuse' ].value = this._renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis._fsQuad.render( renderer );\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._renderTargetX.setSize( width, height );\n\t\tthis._renderTargetY.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._renderTargetX.dispose();\n\t\tthis._renderTargetY.dispose();\n\n\t\tthis.materialCombine.dispose();\n\t\tthis.materialConvolution.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nconst CombineShader = {\n\n\tname: 'CombineShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'strength': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float strength;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = strength * texel;\n\n\t\t}`\n\n};\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\n\nfunction gauss( x, sigma ) {\n\n\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n}\n\nfunction buildKernel( sigma ) {\n\n\t// We loop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\tconst kMaxKernelSize = 25;\n\tlet kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\n\tconst halfWidth = ( kernelSize - 1 ) * 0.5;\n\n\tconst values = new Array( kernelSize );\n\tlet sum = 0.0;\n\tfor ( let i = 0; i < kernelSize; ++ i ) {\n\n\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\tsum += values[ i ];\n\n\t}\n\n\t// normalize the kernel\n\n\tfor ( let i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\treturn values;\n\n}\n\nexport { BloomPass };\n"],"mappings":"OACCA,iBACAC,cACAC,eACAC,cACAC,QACAC,sBACM,eACEC,KAAMC,mBAAsB,mBAC5BC,sBAAyB,kCAgBlC,MAAMC,kBAAkBH,KASvB,WAAAI,CAAaC,EAAW,EAAGC,EAAa,GAAIC,EAAQ,GAEnDC,QASAC,KAAKC,gBAAkBb,cAAcc,MAAOC,cAAcC,UAC1DJ,KAAKC,gBAA4B,SAAEI,MAAQT,EAO3CI,KAAKM,gBAAkB,IAAInB,eAAgB,CAE1CoB,KAAMJ,cAAcI,KACpBH,SAAUJ,KAAKC,gBACfO,aAAcL,cAAcK,aAC5BC,eAAgBN,cAAcM,eAC9BC,SAAUzB,iBACV0B,aAAa,IAMd,MAAMC,EAAoBnB,kBAO1BO,KAAKa,oBAAsBzB,cAAcc,MAAOU,EAAkBR,UAElEJ,KAAKa,oBAAuC,gBAAER,MAAQX,UAAUoB,MAChEd,KAAKa,oBAA+B,QAAER,MAAQU,YAAajB,GAO3DE,KAAKgB,oBAAsB,IAAI7B,eAAgB,CAE9CoB,KAAMK,EAAkBL,KACxBH,SAAUJ,KAAKa,oBACfL,aAAcI,EAAkBJ,aAChCC,eAAgBG,EAAkBH,eAClCQ,QAAS,CACRC,kBAAqBrB,EAAWsB,QAAS,GACzCC,gBAAmBvB,EAAWsB,QAAS,MAWzCnB,KAAKqB,WAAY,EAIjBrB,KAAKsB,eAAiB,IAAIhC,kBAAmB,EAAG,EAAG,CAAEiC,KAAMrC,gBAC3Dc,KAAKsB,eAAeE,QAAQjB,KAAO,cACnCP,KAAKyB,eAAiB,IAAInC,kBAAmB,EAAG,EAAG,CAAEiC,KAAMrC,gBAC3Dc,KAAKyB,eAAeD,QAAQjB,KAAO,cAEnCP,KAAK0B,QAAU,IAAIlC,eAAgB,KAEpC,CAaA,MAAAmC,CAAQC,EAAUC,EAAaC,EAAYC,EAAWC,GAEhDA,GAAaJ,EAASK,MAAMC,QAAQC,QAAQC,SAAS,GAI1DpC,KAAK0B,QAAQW,SAAWrC,KAAKgB,oBAE7BhB,KAAKa,oBAAgC,SAAER,MAAQyB,EAAWN,QAC1DxB,KAAKa,oBAAuC,gBAAER,MAAQX,UAAUoB,MAEhEc,EAASU,gBAAiBtC,KAAKsB,gBAC/BM,EAASW,QACTvC,KAAK0B,QAAQC,OAAQC,GAKrB5B,KAAKa,oBAAgC,SAAER,MAAQL,KAAKsB,eAAeE,QACnExB,KAAKa,oBAAuC,gBAAER,MAAQX,UAAU8C,MAEhEZ,EAASU,gBAAiBtC,KAAKyB,gBAC/BG,EAASW,QACTvC,KAAK0B,QAAQC,OAAQC,GAIrB5B,KAAK0B,QAAQW,SAAWrC,KAAKM,gBAE7BN,KAAKC,gBAA4B,SAAEI,MAAQL,KAAKyB,eAAeD,QAE1DQ,GAAaJ,EAASK,MAAMC,QAAQC,QAAQC,SAAS,GAE1DR,EAASU,gBAAiBR,GACrB9B,KAAKuC,OAAQX,EAASW,QAC3BvC,KAAK0B,QAAQC,OAAQC,EAEtB,CAQA,OAAAa,CAASC,EAAOC,GAEf3C,KAAKsB,eAAemB,QAASC,EAAOC,GACpC3C,KAAKyB,eAAegB,QAASC,EAAOC,EAErC,CAMA,OAAAC,GAEC5C,KAAKsB,eAAesB,UACpB5C,KAAKyB,eAAemB,UAEpB5C,KAAKM,gBAAgBsC,UACrB5C,KAAKgB,oBAAoB4B,UAEzB5C,KAAK0B,QAAQkB,SAEd,EAID,MAAMzC,cAAgB,CAErBI,KAAM,gBAENH,SAAU,CAETyC,SAAY,CAAExC,MAAO,MACrBT,SAAY,CAAES,MAAO,IAItBG,aAAwB,8JAWxBC,eAA0B,uNAqB3B,SAASqC,MAAOC,EAAGjD,GAElB,OAAOkD,KAAKC,KAASF,EAAIA,GAAQ,EAAMjD,EAAQA,GAEhD,CAEA,SAASiB,YAAajB,GAKrB,IAAID,EAAa,EAAImD,KAAKE,KAAc,EAARpD,GAAgB,EAE3CD,EAHkB,KAGYA,EAHZ,IAKvB,MAAMsD,EAAiC,IAAnBtD,EAAa,GAE3BuD,EAAS,IAAIC,MAAOxD,GAC1B,IAAIyD,EAAM,EACV,IAAM,IAAIC,EAAI,EAAGA,EAAI1D,IAAe0D,EAEnCH,EAAQG,GAAMT,MAAOS,EAAIJ,EAAWrD,GACpCwD,GAAOF,EAAQG,GAMhB,IAAM,IAAIA,EAAI,EAAGA,EAAI1D,IAAe0D,EAAIH,EAAQG,IAAOD,EAEvD,OAAOF,CAER,CApCA1D,UAAUoB,MAAQ,IAAIzB,QAAS,WAAa,GAC5CK,UAAU8C,MAAQ,IAAInD,QAAS,EAAK,mBAqC3BK","ignoreList":[]}