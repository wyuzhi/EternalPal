{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/ClearPass.js","names":["Color","Pass","ClearPass","constructor","clearColor","clearAlpha","super","this","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldClearAlpha","getClearColor","getClearAlpha","setClearColor","setRenderTarget","renderToScreen","clear"],"sources":["node_modules/three/examples/jsm/postprocessing/ClearPass.js"],"sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class can be used to force a clear operation for the current read or\n * default framebuffer (when rendering to screen).\n *\n * ```js\n * const clearPass = new ClearPass();\n * composer.addPass( clearPass );\n * ```\n *\n * @augments Pass\n * @three_import import { ClearPass } from 'three/addons/postprocessing/ClearPass.js';\n */\nclass ClearPass extends Pass {\n\n\t/**\n\t * Constructs a new clear pass.\n\t *\n\t * @param {(number|Color|string)} [clearColor=0x000000] - The clear color.\n\t * @param {number} [clearAlpha=0] - The clear alpha.\n\t */\n\tconstructor( clearColor = 0x000000, clearAlpha = 0 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * The clear color.\n\t\t *\n\t\t * @type {(number|Color|string)}\n\t\t * @default 0x000000\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t// internals\n\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs the clear operation. This affects the current read or the default framebuffer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tlet oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\t\trenderer.clear();\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ClearPass };\n"],"mappings":"OACCA,UACM,eACEC,SAAY,YAcrB,MAAMC,kBAAkBD,KAQvB,WAAAE,CAAaC,EAAa,EAAUC,EAAa,GAEhDC,QAQAC,KAAKC,WAAY,EAQjBD,KAAKH,WAAaA,EAQlBG,KAAKF,WAAaA,EAIlBE,KAAKE,eAAiB,IAAIT,KAE3B,CAaA,MAAAU,CAAQC,EAAUC,EAAaC,GAE9B,IAAIC,EAECP,KAAKH,aAETO,EAASI,cAAeR,KAAKE,gBAC7BK,EAAgBH,EAASK,gBAEzBL,EAASM,cAAeV,KAAKH,WAAYG,KAAKF,aAI/CM,EAASO,gBAAiBX,KAAKY,eAAiB,KAAON,GACvDF,EAASS,QAEJb,KAAKH,YAETO,EAASM,cAAeV,KAAKE,eAAgBK,EAI/C,SAIQZ","ignoreList":[]}