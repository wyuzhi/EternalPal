{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/DotScreenPass.js","names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","DotScreenShader","DotScreenPass","constructor","center","angle","scale","super","this","uniforms","clone","undefined","value","copy","material","name","vertexShader","fragmentShader","_fsQuad","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear","dispose"],"sources":["node_modules/three/examples/jsm/postprocessing/DotScreenPass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\n/**\n * Pass for creating a dot-screen effect.\n *\n * ```js\n * const pass = new DotScreenPass( new THREE.Vector2( 0, 0 ), 0.5, 0.8 );\n * composer.addPass( pass );\n * ```\n *\n * @augments Pass\n * @three_import import { DotScreenPass } from 'three/addons/postprocessing/DotScreenPass.js';\n */\nclass DotScreenPass extends Pass {\n\n\t/**\n\t * Constructs a new dot screen pass.\n\t *\n\t * @param {Vector2} center - The center point.\n\t * @param {number} angle - The rotation of the effect in radians.\n\t * @param {number} scale - The scale of the effect. A higher value means smaller dots.\n\t */\n\tconstructor( center, angle, scale ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms. Use this object if you want to update the\n\t\t * `center`, `angle` or `scale` values at runtime.\n\t\t * ```js\n\t\t * pass.uniforms.center.value.copy( center );\n\t\t * pass.uniforms.angle.value = 0;\n\t\t * pass.uniforms.scale.value = 0.5;\n\t\t * ```\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( DotScreenShader.uniforms );\n\n\t\tif ( center !== undefined ) this.uniforms[ 'center' ].value.copy( center );\n\t\tif ( angle !== undefined ) this.uniforms[ 'angle' ].value = angle;\n\t\tif ( scale !== undefined ) this.uniforms[ 'scale' ].value = scale;\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tname: DotScreenShader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: DotScreenShader.vertexShader,\n\t\t\tfragmentShader: DotScreenShader.fragmentShader\n\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Performs the dot screen pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'tSize' ].value.set( readBuffer.width, readBuffer.height );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { DotScreenPass };\n"],"mappings":"OACCA,eACAC,kBACM,eACEC,KAAMC,mBAAsB,mBAC5BC,oBAAuB,gCAahC,MAAMC,sBAAsBH,KAS3B,WAAAI,CAAaC,EAAQC,EAAOC,GAE3BC,QAaAC,KAAKC,SAAWX,cAAcY,MAAOT,gBAAgBQ,eAErCE,IAAXP,GAAuBI,KAAKC,SAAmB,OAAEG,MAAMC,KAAMT,QACnDO,IAAVN,IAAsBG,KAAKC,SAAkB,MAAEG,MAAQP,QAC7CM,IAAVL,IAAsBE,KAAKC,SAAkB,MAAEG,MAAQN,GAO5DE,KAAKM,SAAW,IAAIjB,eAAgB,CAEnCkB,KAAMd,gBAAgBc,KACtBN,SAAUD,KAAKC,SACfO,aAAcf,gBAAgBe,aAC9BC,eAAgBhB,gBAAgBgB,iBAMjCT,KAAKU,QAAU,IAAIlB,eAAgBQ,KAAKM,SAEzC,CAaA,MAAAK,CAAQC,EAAUC,EAAaC,GAE9Bd,KAAKC,SAAqB,SAAEG,MAAQU,EAAWC,QAC/Cf,KAAKC,SAAkB,MAAEG,MAAMY,IAAKF,EAAWG,MAAOH,EAAWI,QAE5DlB,KAAKmB,gBAETP,EAASQ,gBAAiB,MAC1BpB,KAAKU,QAAQC,OAAQC,KAIrBA,EAASQ,gBAAiBP,GACrBb,KAAKqB,OAAQT,EAASS,QAC3BrB,KAAKU,QAAQC,OAAQC,GAIvB,CAMA,OAAAU,GAECtB,KAAKM,SAASgB,UAEdtB,KAAKU,QAAQY,SAEd,SAIQ5B","ignoreList":[]}