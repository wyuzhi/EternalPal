{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/FXAAPass.js","names":["FXAAShader","ShaderPass","FXAAPass","constructor","super","setSize","width","height","this","material","uniforms","value","set"],"sources":["node_modules/three/examples/jsm/postprocessing/FXAAPass.js"],"sourcesContent":["import { FXAAShader } from '../shaders/FXAAShader.js';\nimport { ShaderPass } from './ShaderPass.js';\n\n/**\n * A pass for applying FXAA.\n *\n * ```js\n * const fxaaPass = new FXAAPass();\n * composer.addPass( fxaaPass );\n * ```\n *\n * @augments ShaderPass\n * @three_import import { FXAAPass } from 'three/addons/postprocessing/FXAAPass.js';\n */\nclass FXAAPass extends ShaderPass {\n\n\t/**\n\t * Constructs a new FXAA pass.\n\t */\n\tconstructor() {\n\n\t\tsuper( FXAAShader );\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.material.uniforms[ 'resolution' ].value.set( 1 / width, 1 / height );\n\n\t}\n\n}\n\nexport { FXAAPass };\n"],"mappings":"OAASA,eAAkB,kCAClBC,eAAkB,kBAa3B,MAAMC,iBAAiBD,WAKtB,WAAAE,GAECC,MAAOJ,WAER,CAQA,OAAAK,CAASC,EAAOC,GAEfC,KAAKC,SAASC,SAAuB,WAAEC,MAAMC,IAAK,EAAIN,EAAO,EAAIC,EAElE,SAIQL","ignoreList":[]}