{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/GTAOPass.js","names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DepthStencilFormat","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshNormalMaterial","NearestFilter","NoBlending","RepeatWrapping","RGBAFormat","ShaderMaterial","UniformsUtils","UnsignedByteType","UnsignedInt248Type","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","generateMagicSquareNoise","GTAOShader","GTAODepthShader","GTAOBlendShader","generatePdSamplePointInitializer","PoissonDenoiseShader","CopyShader","SimplexNoise","GTAOPass","constructor","scene","camera","width","height","parameters","aoParameters","pdParameters","super","this","clear","output","_renderGBuffer","_visibilityCache","blendIntensity","pdRings","pdRadiusExponent","pdSamples","gtaoNoiseTexture","pdNoiseTexture","_generateNoise","gtaoRenderTarget","type","pdRenderTarget","clone","gtaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","depthTest","depthWrite","PERSPECTIVE_CAMERA","isPerspectiveCamera","tNoise","value","resolution","set","cameraNear","near","cameraFar","far","normalMaterial","pdMaterial","tDiffuse","texture","lumaPhi","depthPhi","normalPhi","radius","depthRenderMaterial","copyMaterial","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendMaterial","_fsQuad","_originalClearColor","setGBuffer","depthTexture","undefined","normalTexture","updateGtaoMaterial","updatePdMaterial","setSize","normalRenderTarget","cameraProjectionMatrix","copy","projectionMatrix","cameraProjectionMatrixInverse","projectionMatrixInverse","dispose","gtaoMap","format","minFilter","magFilter","normalVectorType","depthValueSource","NORMAL_VECTOR_TYPE","DEPTH_SWIZZLING","tNormal","tDepth","setSceneClipBox","box","needsUpdate","SCENE_CLIP_BOX","sceneBoxMin","min","sceneBoxMax","max","distanceExponent","thickness","distanceFallOff","scale","samples","SAMPLES","screenSpaceRadius","SCREEN_SPACE_RADIUS","updateShader","radiusExponent","rings","SAMPLE_VECTORS","render","renderer","writeBuffer","readBuffer","_overrideVisibility","_renderOverride","_restoreVisibility","cameraWorldMatrix","matrixWorld","_renderPass","OUTPUT","Off","Diffuse","renderToScreen","AO","Denoise","Depth","Normal","Default","intensity","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setRenderTarget","setClearColor","setClearAlpha","material","overrideMaterial","cache","traverse","object","isPoints","isLine","isLine2","visible","push","i","length","size","simplex","data","Uint8Array","j","x","y","noise","noiseTexture","wrapS","wrapT"],"sources":["node_modules/three/examples/jsm/postprocessing/GTAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDepthStencilFormat,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRepeatWrapping,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedByteType,\n\tUnsignedInt248Type,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { generateMagicSquareNoise, GTAOShader, GTAODepthShader, GTAOBlendShader } from '../shaders/GTAOShader.js';\nimport { generatePdSamplePointInitializer, PoissonDenoiseShader } from '../shaders/PoissonDenoiseShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * A pass for an GTAO effect.\n *\n * `GTAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const gtaoPass = new GTAOPass( scene, camera, width, height );\n * gtaoPass.output = GTAOPass.OUTPUT.Denoise;\n * composer.addPass( gtaoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GTAOPass } from 'three/addons/postprocessing/GTAOPass.js';\n */\nclass GTAOPass extends Pass {\n\n\t/**\n\t * Constructs a new GTAO pass.\n\t *\n\t * @param {Scene} scene - The scene to compute the AO for.\n\t * @param {Camera} camera - The camera.\n\t * @param {number} [width=512] - The width of the effect.\n\t * @param {number} [height=512] - The height of the effect.\n\t * @param {Object} [parameters] - The pass parameters.\n\t * @param {Object} [aoParameters] - The AO parameters.\n\t * @param {Object} [pdParameters] - The denoise parameters.\n\t */\n\tconstructor( scene, camera, width = 512, height = 512, parameters, aoParameters, pdParameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The width of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The scene to render the AO for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The output configuration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.output = 0;\n\t\tthis._renderGBuffer = true;\n\t\tthis._visibilityCache = [];\n\n\t\t/**\n\t\t * The AO blend intensity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.blendIntensity = 1.;\n\n\t\t/**\n\t\t * The number of Poisson Denoise rings.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.pdRings = 2.;\n\n\t\t/**\n\t\t * The Poisson Denoise radius exponent.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.pdRadiusExponent = 2.;\n\n\t\t/**\n\t\t * The Poisson Denoise sample count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 16\n\t\t */\n\t\tthis.pdSamples = 16;\n\n\t\tthis.gtaoNoiseTexture = generateMagicSquareNoise();\n\t\tthis.pdNoiseTexture = this._generateNoise();\n\n\t\tthis.gtaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\t\tthis.pdRenderTarget = this.gtaoRenderTarget.clone();\n\n\t\tthis.gtaoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAOShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAOShader.uniforms ),\n\t\t\tvertexShader: GTAOShader.vertexShader,\n\t\t\tfragmentShader: GTAOShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.gtaoMaterial.defines.PERSPECTIVE_CAMERA = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.gtaoMaterial.uniforms.tNoise.value = this.gtaoNoiseTexture;\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.pdMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, PoissonDenoiseShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( PoissonDenoiseShader.uniforms ),\n\t\t\tvertexShader: PoissonDenoiseShader.vertexShader,\n\t\t\tfragmentShader: PoissonDenoiseShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.pdMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\tthis.pdMaterial.uniforms.tNoise.value = this.pdNoiseTexture;\n\t\tthis.pdMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.pdMaterial.uniforms.lumaPhi.value = 10;\n\t\tthis.pdMaterial.uniforms.depthPhi.value = 2;\n\t\tthis.pdMaterial.uniforms.normalPhi.value = 3;\n\t\tthis.pdMaterial.uniforms.radius.value = 8;\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAODepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAODepthShader.uniforms ),\n\t\t\tvertexShader: GTAODepthShader.vertexShader,\n\t\t\tfragmentShader: GTAODepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( GTAOBlendShader.uniforms ),\n\t\t\tvertexShader: GTAOBlendShader.vertexShader,\n\t\t\tfragmentShader: GTAOBlendShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblending: CustomBlending,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t\tthis._originalClearColor = new Color();\n\n\t\tthis.setGBuffer( parameters ? parameters.depthTexture : undefined, parameters ? parameters.normalTexture : undefined );\n\n\t\tif ( aoParameters !== undefined ) {\n\n\t\t\tthis.updateGtaoMaterial( aoParameters );\n\n\t\t}\n\n\t\tif ( pdParameters !== undefined ) {\n\n\t\t\tthis.updatePdMaterial( pdParameters );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.gtaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.pdRenderTarget.setSize( width, height );\n\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.pdMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.gtaoNoiseTexture.dispose();\n\t\tthis.pdNoiseTexture.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.gtaoRenderTarget.dispose();\n\t\tthis.pdRenderTarget.dispose();\n\t\tthis.normalMaterial.dispose();\n\t\tthis.pdMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * A texture holding the computed AO.\n\t *\n\t * @type {Texture}\n\t * @readonly\n\t */\n\tget gtaoMap() {\n\n\t\treturn this.pdRenderTarget.texture;\n\n\t}\n\n\t/**\n\t * Configures the GBuffer of this pass. If no arguments are passed,\n\t * the pass creates an internal render target for holding depth\n\t * and normal data.\n\t *\n\t * @param {DepthTexture} [depthTexture] - The depth texture.\n\t * @param {DepthTexture} [normalTexture] - The normal texture.\n\t */\n\tsetGBuffer( depthTexture, normalTexture ) {\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tthis.depthTexture = depthTexture;\n\t\t\tthis.normalTexture = normalTexture;\n\t\t\tthis._renderGBuffer = false;\n\n\t\t} else {\n\n\t\t\tthis.depthTexture = new DepthTexture();\n\t\t\tthis.depthTexture.format = DepthStencilFormat;\n\t\t\tthis.depthTexture.type = UnsignedInt248Type;\n\t\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\ttype: HalfFloatType,\n\t\t\t\tdepthTexture: this.depthTexture\n\t\t\t} );\n\t\t\tthis.normalTexture = this.normalRenderTarget.texture;\n\t\t\tthis._renderGBuffer = true;\n\n\t\t}\n\n\t\tconst normalVectorType = ( this.normalTexture ) ? 1 : 0;\n\t\tconst depthValueSource = ( this.depthTexture === this.normalTexture ) ? 'w' : 'x';\n\n\t\tthis.gtaoMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.gtaoMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.gtaoMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.gtaoMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.pdMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.pdMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.pdMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.pdMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.depthRenderMaterial.uniforms.tDepth.value = this.normalRenderTarget.depthTexture;\n\n\t}\n\n\t/**\n\t * Configures the clip box of the GTAO shader with the given AABB.\n\t *\n\t * @param {?Box3} box - The AABB enclosing the scene that should receive AO. When passing\n\t * `null`, to clip box is used.\n\t */\n\tsetSceneClipBox( box ) {\n\n\t\tif ( box ) {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX !== 1;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 1;\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMin.value.copy( box.min );\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMax.value.copy( box.max );\n\n\t\t} else {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX === 0;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 0;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the GTAO material from the given parameter object.\n\t *\n\t * @param {Object} parameters - The GTAO material parameters.\n\t */\n\tupdateGtaoMaterial( parameters ) {\n\n\t\tif ( parameters.radius !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.distanceExponent !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceExponent.value = parameters.distanceExponent;\n\n\t\t}\n\n\t\tif ( parameters.thickness !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.thickness.value = parameters.thickness;\n\n\t\t}\n\n\t\tif ( parameters.distanceFallOff !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceFallOff.value = parameters.distanceFallOff;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.scale !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.scale.value = parameters.scale;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.gtaoMaterial.defines.SAMPLES ) {\n\n\t\t\tthis.gtaoMaterial.defines.SAMPLES = parameters.samples;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.screenSpaceRadius !== undefined && ( parameters.screenSpaceRadius ? 1 : 0 ) !== this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS ) {\n\n\t\t\tthis.gtaoMaterial.defines.SCREEN_SPACE_RADIUS = parameters.screenSpaceRadius ? 1 : 0;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the Denoise material from the given parameter object.\n\t *\n\t * @param {Object} parameters - The denoise parameters.\n\t */\n\tupdatePdMaterial( parameters ) {\n\n\t\tlet updateShader = false;\n\n\t\tif ( parameters.lumaPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.lumaPhi.value = parameters.lumaPhi;\n\n\t\t}\n\n\t\tif ( parameters.depthPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.depthPhi.value = parameters.depthPhi;\n\n\t\t}\n\n\t\tif ( parameters.normalPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.normalPhi.value = parameters.normalPhi;\n\n\t\t}\n\n\t\tif ( parameters.radius !== undefined && parameters.radius !== this.radius ) {\n\n\t\t\tthis.pdMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.radiusExponent !== undefined && parameters.radiusExponent !== this.pdRadiusExponent ) {\n\n\t\t\tthis.pdRadiusExponent = parameters.radiusExponent;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.rings !== undefined && parameters.rings !== this.pdRings ) {\n\n\t\t\tthis.pdRings = parameters.rings;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.pdSamples ) {\n\n\t\t\tthis.pdSamples = parameters.samples;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( updateShader ) {\n\n\t\t\tthis.pdMaterial.defines.SAMPLES = this.pdSamples;\n\t\t\tthis.pdMaterial.defines.SAMPLE_VECTORS = generatePdSamplePointInitializer( this.pdSamples, this.pdRings, this.pdRadiusExponent );\n\t\t\tthis.pdMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Performs the GTAO pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to AO)\n\n\t\tif ( this._renderGBuffer ) {\n\n\t\t\tthis._overrideVisibility();\n\t\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\t\tthis._restoreVisibility();\n\n\t\t}\n\n\t\t// render AO\n\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.gtaoMaterial.uniforms.cameraWorldMatrix.value.copy( this.camera.matrixWorld );\n\t\tthis._renderPass( renderer, this.gtaoMaterial, this.gtaoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// render poisson denoise\n\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis._renderPass( renderer, this.pdMaterial, this.pdRenderTarget, 0xffffff, 1.0 );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase GTAOPass.OUTPUT.Off:\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Diffuse:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.AO:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Denoise:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\t\t\tthis._renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.blendMaterial.uniforms.intensity.value = this.blendIntensity;\n\t\t\t\tthis.blendMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis._renderPass( renderer, this.blendMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.GTAOPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\t// internals\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis._fsQuad.material = passMaterial;\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_overrideVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( ( object.isPoints || object.isLine || object.isLine2 ) && object.visible ) {\n\n\t\t\t\tobject.visible = false;\n\t\t\t\tcache.push( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t_restoreVisibility() {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfor ( let i = 0; i < cache.length; i ++ ) {\n\n\t\t\tcache[ i ].visible = true;\n\n\t\t}\n\n\t\tcache.length = 0;\n\n\t}\n\n\t_generateNoise( size = 64 ) {\n\n\t\tconst simplex = new SimplexNoise();\n\n\t\tconst arraySize = size * size * 4;\n\t\tconst data = new Uint8Array( arraySize );\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < size; j ++ ) {\n\n\t\t\t\tconst x = i;\n\t\t\t\tconst y = j;\n\n\t\t\t\tdata[ ( i * size + j ) * 4 ] = ( simplex.noise( x, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 1 ] = ( simplex.noise( x + size, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 2 ] = ( simplex.noise( x, y + size ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 3 ] = ( simplex.noise( x + size, y + size ) * 0.5 + 0.5 ) * 255;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst noiseTexture = new DataTexture( data, size, size, RGBAFormat, UnsignedByteType );\n\t\tnoiseTexture.wrapS = RepeatWrapping;\n\t\tnoiseTexture.wrapT = RepeatWrapping;\n\t\tnoiseTexture.needsUpdate = true;\n\n\t\treturn noiseTexture;\n\n\t}\n\n}\n\nGTAOPass.OUTPUT = {\n\t'Off': - 1,\n\t'Default': 0,\n\t'Diffuse': 1,\n\t'Depth': 2,\n\t'Normal': 3,\n\t'AO': 4,\n\t'Denoise': 5,\n};\n\nexport { GTAOPass };\n"],"mappings":"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","ignoreList":[]}