import{DataTexture,FloatType,MathUtils,RedFormat,ShaderMaterial,UniformsUtils}from"three";import{Pass,FullScreenQuad}from"./Pass.js";import{DigitalGlitch}from"../shaders/DigitalGlitch.js";class GlitchPass extends Pass{constructor(t=64){super(),this.uniforms=UniformsUtils.clone(DigitalGlitch.uniforms),this.material=new ShaderMaterial({uniforms:this.uniforms,vertexShader:DigitalGlitch.vertexShader,fragmentShader:DigitalGlitch.fragmentShader}),this.goWild=!1,this._heightMap=this._generateHeightmap(t),this.uniforms.tDisp.value=this.heightMap,this._fsQuad=new FullScreenQuad(this.material),this._curF=0,this._randX=0,this._generateTrigger()}render(t,i,a){this.uniforms.tDiffuse.value=a.texture,this.uniforms.seed.value=Math.random(),this.uniforms.byp.value=0,this._curF%this._randX==0||1==this.goWild?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=MathUtils.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=MathUtils.randFloat(-1,1),this.uniforms.seed_y.value=MathUtils.randFloat(-1,1),this.uniforms.distortion_x.value=MathUtils.randFloat(0,1),this.uniforms.distortion_y.value=MathUtils.randFloat(0,1),this._curF=0,this._generateTrigger()):this._curF%this._randX<this._randX/5?(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=MathUtils.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=MathUtils.randFloat(0,1),this.uniforms.distortion_y.value=MathUtils.randFloat(0,1),this.uniforms.seed_x.value=MathUtils.randFloat(-.3,.3),this.uniforms.seed_y.value=MathUtils.randFloat(-.3,.3)):0==this.goWild&&(this.uniforms.byp.value=1),this._curF++,this.renderToScreen?(t.setRenderTarget(null),this._fsQuad.render(t)):(t.setRenderTarget(i),this.clear&&t.clear(),this._fsQuad.render(t))}dispose(){this.material.dispose(),this.heightMap.dispose(),this._fsQuad.dispose()}_generateTrigger(){this._randX=MathUtils.randInt(120,240)}_generateHeightmap(t){const i=new Float32Array(t*t),a=t*t;for(let t=0;t<a;t++){const a=MathUtils.randFloat(0,1);i[t]=a}const s=new DataTexture(i,t,t,RedFormat,FloatType);return s.needsUpdate=!0,s}}export{GlitchPass};
//# sourceMappingURL=GlitchPass.js.map