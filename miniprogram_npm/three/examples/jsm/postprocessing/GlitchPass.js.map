{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/GlitchPass.js","names":["DataTexture","FloatType","MathUtils","RedFormat","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","DigitalGlitch","GlitchPass","constructor","dt_size","super","this","uniforms","clone","material","vertexShader","fragmentShader","goWild","_heightMap","_generateHeightmap","value","heightMap","_fsQuad","_curF","_randX","_generateTrigger","render","renderer","writeBuffer","readBuffer","texture","Math","random","randFloat","PI","renderToScreen","setRenderTarget","clear","dispose","randInt","data_arr","Float32Array","length","i","val","needsUpdate"],"sources":["node_modules/three/examples/jsm/postprocessing/GlitchPass.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tMathUtils,\n\tRedFormat,\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\n/**\n * Pass for creating a glitch effect.\n *\n * ```js\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n * ```\n *\n * @augments Pass\n * @three_import import { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';\n */\nclass GlitchPass extends Pass {\n\n\t/**\n\t * Constructs a new glitch pass.\n\t *\n\t * @param {number} [dt_size=64] - The size of the displacement texture\n\t * for digital glitch squares.\n\t */\n\tconstructor( dt_size = 64 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( DigitalGlitch.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = new ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: DigitalGlitch.vertexShader,\n\t\t\tfragmentShader: DigitalGlitch.fragmentShader\n\t\t} );\n\n\t\t/**\n\t\t * Whether to noticeably increase the effect intensity or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.goWild = false;\n\n\t\t// internals\n\n\t\tthis._heightMap = this._generateHeightmap( dt_size );\n\t\tthis.uniforms[ 'tDisp' ].value = this.heightMap;\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis._curF = 0;\n\t\tthis._randX = 0;\n\n\t\tthis._generateTrigger();\n\n\t}\n\n\t/**\n\t * Performs the glitch pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'seed' ].value = Math.random(); // default seeding\n\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\tif ( this._curF % this._randX == 0 || this.goWild == true ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis._curF = 0;\n\t\t\tthis._generateTrigger();\n\n\t\t} else if ( this._curF % this._randX < this._randX / 5 ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t} else if ( this.goWild == false ) {\n\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t}\n\n\t\tthis._curF ++;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.heightMap.dispose();\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t// internals\n\n\t_generateTrigger() {\n\n\t\tthis._randX = MathUtils.randInt( 120, 240 );\n\n\t}\n\n\t_generateHeightmap( dt_size ) {\n\n\t\tconst data_arr = new Float32Array( dt_size * dt_size );\n\t\tconst length = dt_size * dt_size;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\n\t\t\tdata_arr[ i ] = val;\n\n\t\t}\n\n\t\tconst texture = new DataTexture( data_arr, dt_size, dt_size, RedFormat, FloatType );\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { GlitchPass };\n"],"mappings":"OACCA,YACAC,UACAC,UACAC,UACAC,eACAC,kBACM,eACEC,KAAMC,mBAAsB,mBAC5BC,kBAAqB,8BAa9B,MAAMC,mBAAmBH,KAQxB,WAAAI,CAAaC,EAAU,IAEtBC,QAOAC,KAAKC,SAAWT,cAAcU,MAAOP,cAAcM,UAOnDD,KAAKG,SAAW,IAAIZ,eAAgB,CACnCU,SAAUD,KAAKC,SACfG,aAAcT,cAAcS,aAC5BC,eAAgBV,cAAcU,iBAS/BL,KAAKM,QAAS,EAIdN,KAAKO,WAAaP,KAAKQ,mBAAoBV,GAC3CE,KAAKC,SAAkB,MAAEQ,MAAQT,KAAKU,UAEtCV,KAAKW,QAAU,IAAIjB,eAAgBM,KAAKG,UAExCH,KAAKY,MAAQ,EACbZ,KAAKa,OAAS,EAEdb,KAAKc,kBAEN,CAaA,MAAAC,CAAQC,EAAUC,EAAaC,GAE9BlB,KAAKC,SAAqB,SAAEQ,MAAQS,EAAWC,QAC/CnB,KAAKC,SAAiB,KAAEQ,MAAQW,KAAKC,SACrCrB,KAAKC,SAAgB,IAAEQ,MAAQ,EAE1BT,KAAKY,MAAQZ,KAAKa,QAAU,GAAoB,GAAfb,KAAKM,QAE1CN,KAAKC,SAAmB,OAAEQ,MAAQW,KAAKC,SAAW,GAClDrB,KAAKC,SAAkB,MAAEQ,MAAQpB,UAAUiC,WAAaF,KAAKG,GAAIH,KAAKG,IACtEvB,KAAKC,SAAmB,OAAEQ,MAAQpB,UAAUiC,WAAa,EAAG,GAC5DtB,KAAKC,SAAmB,OAAEQ,MAAQpB,UAAUiC,WAAa,EAAG,GAC5DtB,KAAKC,SAAyB,aAAEQ,MAAQpB,UAAUiC,UAAW,EAAG,GAChEtB,KAAKC,SAAyB,aAAEQ,MAAQpB,UAAUiC,UAAW,EAAG,GAChEtB,KAAKY,MAAQ,EACbZ,KAAKc,oBAEMd,KAAKY,MAAQZ,KAAKa,OAASb,KAAKa,OAAS,GAEpDb,KAAKC,SAAmB,OAAEQ,MAAQW,KAAKC,SAAW,GAClDrB,KAAKC,SAAkB,MAAEQ,MAAQpB,UAAUiC,WAAaF,KAAKG,GAAIH,KAAKG,IACtEvB,KAAKC,SAAyB,aAAEQ,MAAQpB,UAAUiC,UAAW,EAAG,GAChEtB,KAAKC,SAAyB,aAAEQ,MAAQpB,UAAUiC,UAAW,EAAG,GAChEtB,KAAKC,SAAmB,OAAEQ,MAAQpB,UAAUiC,WAAa,GAAK,IAC9DtB,KAAKC,SAAmB,OAAEQ,MAAQpB,UAAUiC,WAAa,GAAK,KAEpC,GAAftB,KAAKM,SAEhBN,KAAKC,SAAgB,IAAEQ,MAAQ,GAIhCT,KAAKY,QAEAZ,KAAKwB,gBAETR,EAASS,gBAAiB,MAC1BzB,KAAKW,QAAQI,OAAQC,KAIrBA,EAASS,gBAAiBR,GACrBjB,KAAK0B,OAAQV,EAASU,QAC3B1B,KAAKW,QAAQI,OAAQC,GAIvB,CAMA,OAAAW,GAEC3B,KAAKG,SAASwB,UAEd3B,KAAKU,UAAUiB,UAEf3B,KAAKW,QAAQgB,SAEd,CAIA,gBAAAb,GAECd,KAAKa,OAASxB,UAAUuC,QAAS,IAAK,IAEvC,CAEA,kBAAApB,CAAoBV,GAEnB,MAAM+B,EAAW,IAAIC,aAAchC,EAAUA,GACvCiC,EAASjC,EAAUA,EAEzB,IAAM,IAAIkC,EAAI,EAAGA,EAAID,EAAQC,IAAO,CAEnC,MAAMC,EAAM5C,UAAUiC,UAAW,EAAG,GACpCO,EAAUG,GAAMC,CAEjB,CAEA,MAAMd,EAAU,IAAIhC,YAAa0C,EAAU/B,EAASA,EAASR,UAAWF,WAExE,OADA+B,EAAQe,aAAc,EACff,CAER,SAIQvB","ignoreList":[]}