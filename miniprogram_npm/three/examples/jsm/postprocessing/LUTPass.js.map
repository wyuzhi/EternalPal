{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/LUTPass.js","names":["ShaderPass","LUTShader","name","uniforms","lut","value","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","constructor","options","super","this","v","material","image","width"],"sources":["node_modules/three/examples/jsm/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n\n\tname: 'LUTShader',\n\n\tuniforms: {\n\n\t\tlut: { value: null },\n\t\tlutSize: { value: 0 },\n\n\t\ttDiffuse: { value: null },\n\t\tintensity: { value: 1.0 },\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\tuniform sampler3D lut;\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\n\t\t\tlutVal = vec4( texture( lut, uvw ).rgb, val.a );\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`,\n\n};\n\n/**\n * Pass for color grading via lookup tables.\n *\n * ```js\n * const lutPass = new LUTPass( { lut: lut.texture3D } );\n * composer.addPass( lutPass );\n * ```\n *\n * @augments ShaderPass\n * @three_import import { LUTPass } from 'three/addons/postprocessing/LUTPass.js';\n */\nclass LUTPass extends ShaderPass {\n\n\t/**\n\t * Constructs a LUT pass.\n\t *\n\t * @param {{lut:Data3DTexture,intensity:number}} [options={}] - The pass options.\n\t */\n\tconstructor( options = {} ) {\n\n\t\tsuper( LUTShader );\n\n\t\t/**\n\t\t * The LUT as a 3D texture.\n\t\t *\n\t\t * @type {?Data3DTexture}\n\t\t * @default null\n\t\t */\n\t\tthis.lut = options.lut || null;\n\n\t\t/**\n\t\t * The intensity.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default 1\n\t\t */\n\t\tthis.intensity = 'intensity' in options ? options.intensity : 1;\n\n\t}\n\n\tset lut( v ) {\n\n\t\tconst material = this.material;\n\n\t\tif ( v !== this.lut ) {\n\n\t\t\tmaterial.uniforms.lut.value = null;\n\n\t\t\tif ( v ) {\n\n\t\t\t\tmaterial.uniforms.lutSize.value = v.image.width;\n\t\t\t\tmaterial.uniforms.lut.value = v;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tget lut() {\n\n\t\treturn this.material.uniforms.lut.value;\n\n\t}\n\n\tset intensity( v ) {\n\n\t\tthis.material.uniforms.intensity.value = v;\n\n\t}\n\n\tget intensity() {\n\n\t\treturn this.material.uniforms.intensity.value;\n\n\t}\n\n}\n\nexport { LUTPass };\n"],"mappings":"OAASA,eAAkB,kBAE3B,MAAMC,UAAY,CAEjBC,KAAM,YAENC,SAAU,CAETC,IAAK,CAAEC,MAAO,MACdC,QAAS,CAAED,MAAO,GAElBE,SAAU,CAAEF,MAAO,MACnBG,UAAW,CAAEH,MAAO,IAGrBI,aAAwB,oKAaxBC,eAA0B,woBAyC3B,MAAMC,gBAAgBX,WAOrB,WAAAY,CAAaC,EAAU,CAAC,GAEvBC,MAAOb,WAQPc,KAAKX,IAAMS,EAAQT,KAAO,KAQ1BW,KAAKP,UAAY,cAAeK,EAAUA,EAAQL,UAAY,CAE/D,CAEA,OAAIJ,CAAKY,GAER,MAAMC,EAAWF,KAAKE,SAEjBD,IAAMD,KAAKX,MAEfa,EAASd,SAASC,IAAIC,MAAQ,KAEzBW,IAEJC,EAASd,SAASG,QAAQD,MAAQW,EAAEE,MAAMC,MAC1CF,EAASd,SAASC,IAAIC,MAAQW,GAMjC,CAEA,OAAIZ,GAEH,OAAOW,KAAKE,SAASd,SAASC,IAAIC,KAEnC,CAEA,aAAIG,CAAWQ,GAEdD,KAAKE,SAASd,SAASK,UAAUH,MAAQW,CAE1C,CAEA,aAAIR,GAEH,OAAOO,KAAKE,SAASd,SAASK,UAAUH,KAEzC,SAIQM","ignoreList":[]}