{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/OutputPass.js","names":["ColorManagement","RawShaderMaterial","UniformsUtils","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","AgXToneMapping","ACESFilmicToneMapping","NeutralToneMapping","CustomToneMapping","SRGBTransfer","Pass","FullScreenQuad","OutputShader","OutputPass","constructor","super","this","uniforms","clone","material","name","vertexShader","fragmentShader","_fsQuad","_outputColorSpace","_toneMapping","render","renderer","writeBuffer","readBuffer","value","texture","toneMappingExposure","outputColorSpace","toneMapping","defines","getTransfer","SRGB_TRANSFER","LINEAR_TONE_MAPPING","REINHARD_TONE_MAPPING","CINEON_TONE_MAPPING","ACES_FILMIC_TONE_MAPPING","AGX_TONE_MAPPING","NEUTRAL_TONE_MAPPING","CUSTOM_TONE_MAPPING","needsUpdate","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose"],"sources":["node_modules/three/examples/jsm/postprocessing/OutputPass.js"],"sourcesContent":["import {\n\tColorManagement,\n\tRawShaderMaterial,\n\tUniformsUtils,\n\tLinearToneMapping,\n\tReinhardToneMapping,\n\tCineonToneMapping,\n\tAgXToneMapping,\n\tACESFilmicToneMapping,\n\tNeutralToneMapping,\n\tCustomToneMapping,\n\tSRGBTransfer\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { OutputShader } from '../shaders/OutputShader.js';\n\n/**\n * This pass is responsible for including tone mapping and color space conversion\n * into your pass chain. In most cases, this pass should be included at the end\n * of each pass chain. If a pass requires sRGB input (e.g. like FXAA), the pass\n * must follow `OutputPass` in the pass chain.\n *\n * The tone mapping and color space settings are extracted from the renderer.\n *\n * ```js\n * const outputPass = new OutputPass();\n * composer.addPass( outputPass );\n * ```\n *\n * @augments Pass\n * @three_import import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';\n */\nclass OutputPass extends Pass {\n\n\t/**\n\t * Constructs a new output pass.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The pass uniforms.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.uniforms = UniformsUtils.clone( OutputShader.uniforms );\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {RawShaderMaterial}\n\t\t */\n\t\tthis.material = new RawShaderMaterial( {\n\t\t\tname: OutputShader.name,\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: OutputShader.vertexShader,\n\t\t\tfragmentShader: OutputShader.fragmentShader\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis._outputColorSpace = null;\n\t\tthis._toneMapping = null;\n\n\t}\n\n\t/**\n\t * Performs the output pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive */ ) {\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'toneMappingExposure' ].value = renderer.toneMappingExposure;\n\n\t\t// rebuild defines if required\n\n\t\tif ( this._outputColorSpace !== renderer.outputColorSpace || this._toneMapping !== renderer.toneMapping ) {\n\n\t\t\tthis._outputColorSpace = renderer.outputColorSpace;\n\t\t\tthis._toneMapping = renderer.toneMapping;\n\n\t\t\tthis.material.defines = {};\n\n\t\t\tif ( ColorManagement.getTransfer( this._outputColorSpace ) === SRGBTransfer ) this.material.defines.SRGB_TRANSFER = '';\n\n\t\t\tif ( this._toneMapping === LinearToneMapping ) this.material.defines.LINEAR_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ReinhardToneMapping ) this.material.defines.REINHARD_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === CineonToneMapping ) this.material.defines.CINEON_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === ACESFilmicToneMapping ) this.material.defines.ACES_FILMIC_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === AgXToneMapping ) this.material.defines.AGX_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === NeutralToneMapping ) this.material.defines.NEUTRAL_TONE_MAPPING = '';\n\t\t\telse if ( this._toneMapping === CustomToneMapping ) this.material.defines.CUSTOM_TONE_MAPPING = '';\n\n\t\t\tthis.material.needsUpdate = true;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.renderToScreen === true ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis._fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n}\n\nexport { OutputPass };\n"],"mappings":"OACCA,gBACAC,kBACAC,cACAC,kBACAC,oBACAC,kBACAC,eACAC,sBACAC,mBACAC,kBACAC,iBACM,eACEC,KAAMC,mBAAsB,mBAC5BC,iBAAoB,6BAkB7B,MAAMC,mBAAmBH,KAKxB,WAAAI,GAECC,QAOAC,KAAKC,SAAWhB,cAAciB,MAAON,aAAaK,UAOlDD,KAAKG,SAAW,IAAInB,kBAAmB,CACtCoB,KAAMR,aAAaQ,KACnBH,SAAUD,KAAKC,SACfI,aAAcT,aAAaS,aAC3BC,eAAgBV,aAAaU,iBAK9BN,KAAKO,QAAU,IAAIZ,eAAgBK,KAAKG,UAExCH,KAAKQ,kBAAoB,KACzBR,KAAKS,aAAe,IAErB,CAaA,MAAAC,CAAQC,EAAUC,EAAaC,GAE9Bb,KAAKC,SAAqB,SAAEa,MAAQD,EAAWE,QAC/Cf,KAAKC,SAAgC,oBAAEa,MAAQH,EAASK,oBAInDhB,KAAKQ,oBAAsBG,EAASM,kBAAoBjB,KAAKS,eAAiBE,EAASO,cAE3FlB,KAAKQ,kBAAoBG,EAASM,iBAClCjB,KAAKS,aAAeE,EAASO,YAE7BlB,KAAKG,SAASgB,QAAU,CAAC,EAEpBpC,gBAAgBqC,YAAapB,KAAKQ,qBAAwBf,eAAeO,KAAKG,SAASgB,QAAQE,cAAgB,IAE/GrB,KAAKS,eAAiBvB,kBAAoBc,KAAKG,SAASgB,QAAQG,oBAAsB,GACjFtB,KAAKS,eAAiBtB,oBAAsBa,KAAKG,SAASgB,QAAQI,sBAAwB,GAC1FvB,KAAKS,eAAiBrB,kBAAoBY,KAAKG,SAASgB,QAAQK,oBAAsB,GACtFxB,KAAKS,eAAiBnB,sBAAwBU,KAAKG,SAASgB,QAAQM,yBAA2B,GAC/FzB,KAAKS,eAAiBpB,eAAiBW,KAAKG,SAASgB,QAAQO,iBAAmB,GAChF1B,KAAKS,eAAiBlB,mBAAqBS,KAAKG,SAASgB,QAAQQ,qBAAuB,GACxF3B,KAAKS,eAAiBjB,oBAAoBQ,KAAKG,SAASgB,QAAQS,oBAAsB,IAEhG5B,KAAKG,SAAS0B,aAAc,IAMA,IAAxB7B,KAAK8B,gBAETnB,EAASoB,gBAAiB,MAC1B/B,KAAKO,QAAQG,OAAQC,KAIrBA,EAASoB,gBAAiBnB,GACrBZ,KAAKgC,OAAQrB,EAASqB,MAAOrB,EAASsB,eAAgBtB,EAASuB,eAAgBvB,EAASwB,kBAC7FnC,KAAKO,QAAQG,OAAQC,GAIvB,CAMA,OAAAyB,GAECpC,KAAKG,SAASiC,UACdpC,KAAKO,QAAQ6B,SAEd,SAIQvC","ignoreList":[]}