{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/RenderPass.js","names":["Color","Pass","RenderPass","constructor","scene","camera","overrideMaterial","clearColor","clearAlpha","super","this","clear","clearDepth","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","setClearColor","getClearAlpha","setClearAlpha","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil"],"sources":["node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n * @three_import import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\n */\nclass RenderPass extends Pass {\n\n\t/**\n\t * Constructs a new render pass.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n\t * for all objects in the scene.\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n\t */\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The override material. If set, this material is used\n\t\t * for all objects in the scene.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\t/**\n\t\t * The clear color of the render pass.\n\t\t *\n\t\t * @type {?(number|Color|string)}\n\t\t * @default null\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha of the render pass.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearDepth = false;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs a beauty pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"mappings":"OACCA,UACM,eACEC,SAAY,YAcrB,MAAMC,mBAAmBD,KAYxB,WAAAE,CAAaC,EAAOC,EAAQC,EAAmB,KAAMC,EAAa,KAAMC,EAAa,MAEpFC,QAOAC,KAAKN,MAAQA,EAObM,KAAKL,OAASA,EASdK,KAAKJ,iBAAmBA,EAQxBI,KAAKH,WAAaA,EAQlBG,KAAKF,WAAaA,EAQlBE,KAAKC,OAAQ,EAQbD,KAAKE,YAAa,EAQlBF,KAAKG,WAAY,EACjBH,KAAKI,eAAiB,IAAId,KAE3B,CAaA,MAAAe,CAAQC,EAAUC,EAAaC,GAE9B,MAAMC,EAAeH,EAASI,UAG9B,IAAIC,EAAeC,EAFnBN,EAASI,WAAY,EAIU,OAA1BV,KAAKJ,mBAETgB,EAAsBZ,KAAKN,MAAME,iBAEjCI,KAAKN,MAAME,iBAAmBI,KAAKJ,kBAIX,OAApBI,KAAKH,aAETS,EAASO,cAAeb,KAAKI,gBAC7BE,EAASQ,cAAed,KAAKH,WAAYS,EAASS,kBAI1B,OAApBf,KAAKF,aAETa,EAAgBL,EAASS,gBACzBT,EAASU,cAAehB,KAAKF,aAIN,GAAnBE,KAAKE,YAETI,EAASJ,aAIVI,EAASW,gBAAiBjB,KAAKkB,eAAiB,KAAOV,IAEnC,IAAfR,KAAKC,OAGTK,EAASL,MAAOK,EAASa,eAAgBb,EAASc,eAAgBd,EAASe,kBAI5Ef,EAASD,OAAQL,KAAKN,MAAOM,KAAKL,QAIT,OAApBK,KAAKH,YAETS,EAASQ,cAAed,KAAKI,gBAIL,OAApBJ,KAAKF,YAETQ,EAASU,cAAeL,GAIM,OAA1BX,KAAKJ,mBAETI,KAAKN,MAAME,iBAAmBgB,GAI/BN,EAASI,UAAYD,CAEtB,SAIQjB","ignoreList":[]}