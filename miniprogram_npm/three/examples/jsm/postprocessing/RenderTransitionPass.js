import{HalfFloatType,ShaderMaterial,WebGLRenderTarget}from"three";import{FullScreenQuad,Pass}from"./Pass.js";class RenderTransitionPass extends Pass{constructor(t,e,r,i){super(),this.sceneA=t,this.cameraA=e,this.sceneB=r,this.cameraB=i,this.material=this._createMaterial(),this._renderTargetA=new WebGLRenderTarget,this._renderTargetA.texture.type=HalfFloatType,this._renderTargetB=new WebGLRenderTarget,this._renderTargetB.texture.type=HalfFloatType,this._fsQuad=new FullScreenQuad(this.material)}setTransition(t){this.material.uniforms.mixRatio.value=t}useTexture(t){this.material.uniforms.useTexture.value=t?1:0}setTexture(t){this.material.uniforms.tMixTexture.value=t}setTextureThreshold(t){this.material.uniforms.threshold.value=t}setSize(t,e){this._renderTargetA.setSize(t,e),this._renderTargetB.setSize(t,e)}render(t,e){t.setRenderTarget(this._renderTargetA),t.render(this.sceneA,this.cameraA),t.setRenderTarget(this._renderTargetB),t.render(this.sceneB,this.cameraB);const r=this._fsQuad.material.uniforms;r.tDiffuse1.value=this._renderTargetA.texture,r.tDiffuse2.value=this._renderTargetB.texture,this.renderToScreen?(t.setRenderTarget(null),t.clear()):(t.setRenderTarget(e),this.clear&&t.clear()),this._fsQuad.render(t)}dispose(){this.material.dispose(),this._renderTargetA.dispose(),this._renderTargetB.dispose(),this._fsQuad.dispose()}_createMaterial(){return new ShaderMaterial({uniforms:{tDiffuse1:{value:null},tDiffuse2:{value:null},mixRatio:{value:0},threshold:{value:.1},useTexture:{value:1},tMixTexture:{value:null}},vertexShader:"\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = vec2( uv.x, uv.y );\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\t\t\t\tuniform float mixRatio;\n\n\t\t\t\tuniform sampler2D tDiffuse1;\n\t\t\t\tuniform sampler2D tDiffuse2;\n\t\t\t\tuniform sampler2D tMixTexture;\n\n\t\t\t\tuniform int useTexture;\n\t\t\t\tuniform float threshold;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel1 = texture2D( tDiffuse1, vUv );\n\t\t\t\t\tvec4 texel2 = texture2D( tDiffuse2, vUv );\n\n\t\t\t\t\tif (useTexture == 1) {\n\n\t\t\t\t\t\tvec4 transitionTexel = texture2D( tMixTexture, vUv );\n\t\t\t\t\t\tfloat r = mixRatio * ( 1.0 + threshold * 2.0 ) - threshold;\n\t\t\t\t\t\tfloat mixf = clamp( ( transitionTexel.r - r ) * ( 1.0 / threshold ), 0.0, 1.0 );\n\n\t\t\t\t\t\tgl_FragColor = mix( texel1, texel2, mixf );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = mix( texel2, texel1, mixRatio );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t"})}}export{RenderTransitionPass};
//# sourceMappingURL=RenderTransitionPass.js.map