{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/RenderTransitionPass.js","names":["HalfFloatType","ShaderMaterial","WebGLRenderTarget","FullScreenQuad","Pass","RenderTransitionPass","constructor","sceneA","cameraA","sceneB","cameraB","super","this","material","_createMaterial","_renderTargetA","texture","type","_renderTargetB","_fsQuad","setTransition","value","uniforms","mixRatio","useTexture","setTexture","tMixTexture","setTextureThreshold","threshold","setSize","width","height","render","renderer","writeBuffer","setRenderTarget","tDiffuse1","tDiffuse2","renderToScreen","clear","dispose","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/postprocessing/RenderTransitionPass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tShaderMaterial,\n\tWebGLRenderTarget\n} from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\n\n/**\n * A special type of render pass for implementing transition effects.\n * When active, the pass will transition from scene A to scene B.\n *\n * ```js\n * const renderTransitionPass = new RenderTransitionPass( fxSceneA.scene, fxSceneA.camera, fxSceneB.scene, fxSceneB.camera );\n * renderTransitionPass.setTexture( textures[ 0 ] );\n * composer.addPass( renderTransitionPass );\n * ```\n *\n * @augments Pass\n * @three_import import { RenderTransitionPass } from 'three/addons/postprocessing/RenderTransitionPass.js';\n */\nclass RenderTransitionPass extends Pass {\n\n\t/**\n\t * Constructs a render transition pass.\n\t *\n\t * @param {Scene} sceneA - The first scene.\n\t * @param {Camera} cameraA - The camera of the first scene.\n\t * @param {Scene} sceneB - The second scene.\n\t * @param {Camera} cameraB - The camera of the second scene.\n\t */\n\tconstructor( sceneA, cameraA, sceneB, cameraB ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The first scene.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.sceneA = sceneA;\n\n\n\t\t/**\n\t\t * The camera of the first scene.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.cameraA = cameraA;\n\n\t\t/**\n\t\t * The second scene.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.sceneB = sceneB;\n\n\t\t/**\n\t\t * The camera of the second scene.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.cameraB = cameraB;\n\n\t\t/**\n\t\t * The pass material.\n\t\t *\n\t\t * @type {ShaderMaterial}\n\t\t */\n\t\tthis.material = this._createMaterial();\n\n\t\t// internals\n\n\t\tthis._renderTargetA = new WebGLRenderTarget();\n\t\tthis._renderTargetA.texture.type = HalfFloatType;\n\t\tthis._renderTargetB = new WebGLRenderTarget();\n\t\tthis._renderTargetB.texture.type = HalfFloatType;\n\n\t\tthis._fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\t/**\n\t * Sets the transition factor. Must be in the range `[0,1]`.\n\t * This value determines to what degree both scenes are mixed.\n\t *\n\t * @param {boolean|number} value - The transition factor.\n\t */\n\tsetTransition( value ) {\n\n\t\tthis.material.uniforms.mixRatio.value = value;\n\n\t}\n\n\t/**\n\t * Toggles the usage of a texture for the effect.\n\t *\n\t * @param {boolean} value - Whether to use a texture for the transition effect or not.\n\t */\n\tuseTexture( value ) {\n\n\t\tthis.material.uniforms.useTexture.value = value ? 1 : 0;\n\n\t}\n\n\t/**\n\t * Sets the effect texture.\n\t *\n\t * @param {Texture} value - The effect texture.\n\t */\n\tsetTexture( value ) {\n\n\t\tthis.material.uniforms.tMixTexture.value = value;\n\n\t}\n\n\t/**\n\t * Sets the texture threshold. This value defined how strong the texture effects\n\t * the transition. Must be in the range `[0,1]` (0 means full effect, 1 means no effect).\n\t *\n\t * @param {boolean|number} value - The threshold value.\n\t */\n\tsetTextureThreshold( value ) {\n\n\t\tthis.material.uniforms.threshold.value = value;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._renderTargetA.setSize( width, height );\n\t\tthis._renderTargetB.setSize( width, height );\n\n\t}\n\n\t/**\n\t * Performs the transition pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer/*, readBuffer , deltaTime, maskActive */ ) {\n\n\t\trenderer.setRenderTarget( this._renderTargetA );\n\t\trenderer.render( this.sceneA, this.cameraA );\n\t\trenderer.setRenderTarget( this._renderTargetB );\n\t\trenderer.render( this.sceneB, this.cameraB );\n\n\t\tconst uniforms = this._fsQuad.material.uniforms;\n\t\tuniforms.tDiffuse1.value = this._renderTargetA.texture;\n\t\tuniforms.tDiffuse2.value = this._renderTargetB.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t}\n\n\t\tthis._fsQuad.render( renderer );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis._renderTargetA.dispose();\n\t\tthis._renderTargetB.dispose();\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t// internals\n\n\t_createMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse1: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\ttDiffuse2: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tmixRatio: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tthreshold: {\n\t\t\t\t\tvalue: 0.1\n\t\t\t\t},\n\t\t\t\tuseTexture: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttMixTexture: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = vec2( uv.x, uv.y );\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform float mixRatio;\n\n\t\t\t\tuniform sampler2D tDiffuse1;\n\t\t\t\tuniform sampler2D tDiffuse2;\n\t\t\t\tuniform sampler2D tMixTexture;\n\n\t\t\t\tuniform int useTexture;\n\t\t\t\tuniform float threshold;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel1 = texture2D( tDiffuse1, vUv );\n\t\t\t\t\tvec4 texel2 = texture2D( tDiffuse2, vUv );\n\n\t\t\t\t\tif (useTexture == 1) {\n\n\t\t\t\t\t\tvec4 transitionTexel = texture2D( tMixTexture, vUv );\n\t\t\t\t\t\tfloat r = mixRatio * ( 1.0 + threshold * 2.0 ) - threshold;\n\t\t\t\t\t\tfloat mixf = clamp( ( transitionTexel.r - r ) * ( 1.0 / threshold ), 0.0, 1.0 );\n\n\t\t\t\t\t\tgl_FragColor = mix( texel1, texel2, mixf );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = mix( texel2, texel1, mixRatio );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t`\n\t\t} );\n\n\t}\n\n}\n\nexport { RenderTransitionPass };\n"],"mappings":"OACCA,cACAC,eACAC,sBACM,eACEC,eAAgBC,SAAY,YAerC,MAAMC,6BAA6BD,KAUlC,WAAAE,CAAaC,EAAQC,EAASC,EAAQC,GAErCC,QAOAC,KAAKL,OAASA,EAQdK,KAAKJ,QAAUA,EAOfI,KAAKH,OAASA,EAOdG,KAAKF,QAAUA,EAOfE,KAAKC,SAAWD,KAAKE,kBAIrBF,KAAKG,eAAiB,IAAIb,kBAC1BU,KAAKG,eAAeC,QAAQC,KAAOjB,cACnCY,KAAKM,eAAiB,IAAIhB,kBAC1BU,KAAKM,eAAeF,QAAQC,KAAOjB,cAEnCY,KAAKO,QAAU,IAAIhB,eAAgBS,KAAKC,SAEzC,CAQA,aAAAO,CAAeC,GAEdT,KAAKC,SAASS,SAASC,SAASF,MAAQA,CAEzC,CAOA,UAAAG,CAAYH,GAEXT,KAAKC,SAASS,SAASE,WAAWH,MAAQA,EAAQ,EAAI,CAEvD,CAOA,UAAAI,CAAYJ,GAEXT,KAAKC,SAASS,SAASI,YAAYL,MAAQA,CAE5C,CAQA,mBAAAM,CAAqBN,GAEpBT,KAAKC,SAASS,SAASM,UAAUP,MAAQA,CAE1C,CAQA,OAAAQ,CAASC,EAAOC,GAEfnB,KAAKG,eAAec,QAASC,EAAOC,GACpCnB,KAAKM,eAAeW,QAASC,EAAOC,EAErC,CAaA,MAAAC,CAAQC,EAAUC,GAEjBD,EAASE,gBAAiBvB,KAAKG,gBAC/BkB,EAASD,OAAQpB,KAAKL,OAAQK,KAAKJ,SACnCyB,EAASE,gBAAiBvB,KAAKM,gBAC/Be,EAASD,OAAQpB,KAAKH,OAAQG,KAAKF,SAEnC,MAAMY,EAAWV,KAAKO,QAAQN,SAASS,SACvCA,EAASc,UAAUf,MAAQT,KAAKG,eAAeC,QAC/CM,EAASe,UAAUhB,MAAQT,KAAKM,eAAeF,QAE1CJ,KAAK0B,gBAETL,EAASE,gBAAiB,MAC1BF,EAASM,UAITN,EAASE,gBAAiBD,GACrBtB,KAAK2B,OAAQN,EAASM,SAI5B3B,KAAKO,QAAQa,OAAQC,EAEtB,CAMA,OAAAO,GAEC5B,KAAKC,SAAS2B,UAEd5B,KAAKG,eAAeyB,UACpB5B,KAAKM,eAAesB,UACpB5B,KAAKO,QAAQqB,SAEd,CAIA,eAAA1B,GAEC,OAAO,IAAIb,eAAgB,CAC1BqB,SAAU,CACTc,UAAW,CACVf,MAAO,MAERgB,UAAW,CACVhB,MAAO,MAERE,SAAU,CACTF,MAAO,GAERO,UAAW,CACVP,MAAO,IAERG,WAAY,CACXH,MAAO,GAERK,YAAa,CACZL,MAAO,OAGToB,aAAwB,wMAUxBC,eAA0B,w0BAmC5B,SAIQrC","ignoreList":[]}