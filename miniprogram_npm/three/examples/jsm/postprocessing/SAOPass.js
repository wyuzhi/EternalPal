import{AddEquation,Color,CustomBlending,DepthTexture,DstAlphaFactor,DstColorFactor,HalfFloatType,MeshNormalMaterial,NearestFilter,NoBlending,ShaderMaterial,UniformsUtils,DepthStencilFormat,UnsignedInt248Type,Vector2,WebGLRenderTarget,ZeroFactor}from"three";import{Pass,FullScreenQuad}from"./Pass.js";import{SAOShader}from"../shaders/SAOShader.js";import{BlurShaderUtils,DepthLimitedBlurShader}from"../shaders/DepthLimitedBlurShader.js";import{CopyShader}from"../shaders/CopyShader.js";class SAOPass extends Pass{constructor(e,a,r=new Vector2(256,256)){super(),this.scene=e,this.camera=a,this.clear=!0,this.needsSwap=!1,this._originalClearColor=new Color,this._oldClearColor=new Color,this._oldClearAlpha=1,this.params={output:0,saoBias:.5,saoIntensity:.18,saoScale:1,saoKernelRadius:100,saoMinResolution:0,saoBlur:!0,saoBlurRadius:8,saoBlurStdDev:4,saoBlurDepthCutoff:.01},this.resolution=new Vector2(r.x,r.y),this.saoRenderTarget=new WebGLRenderTarget(this.resolution.x,this.resolution.y,{type:HalfFloatType}),this.blurIntermediateRenderTarget=this.saoRenderTarget.clone();const t=new DepthTexture;t.format=DepthStencilFormat,t.type=UnsignedInt248Type,this.normalRenderTarget=new WebGLRenderTarget(this.resolution.x,this.resolution.y,{minFilter:NearestFilter,magFilter:NearestFilter,type:HalfFloatType,depthTexture:t}),this.normalMaterial=new MeshNormalMaterial,this.normalMaterial.blending=NoBlending,this.saoMaterial=new ShaderMaterial({defines:Object.assign({},SAOShader.defines),fragmentShader:SAOShader.fragmentShader,vertexShader:SAOShader.vertexShader,uniforms:UniformsUtils.clone(SAOShader.uniforms)}),this.saoMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0,this.saoMaterial.uniforms.tDepth.value=t,this.saoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture,this.saoMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y),this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.saoMaterial.uniforms.cameraProjectionMatrix.value=this.camera.projectionMatrix,this.saoMaterial.blending=NoBlending,this.vBlurMaterial=new ShaderMaterial({uniforms:UniformsUtils.clone(DepthLimitedBlurShader.uniforms),defines:Object.assign({},DepthLimitedBlurShader.defines),vertexShader:DepthLimitedBlurShader.vertexShader,fragmentShader:DepthLimitedBlurShader.fragmentShader}),this.vBlurMaterial.defines.DEPTH_PACKING=0,this.vBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0,this.vBlurMaterial.uniforms.tDiffuse.value=this.saoRenderTarget.texture,this.vBlurMaterial.uniforms.tDepth.value=t,this.vBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y),this.vBlurMaterial.blending=NoBlending,this.hBlurMaterial=new ShaderMaterial({uniforms:UniformsUtils.clone(DepthLimitedBlurShader.uniforms),defines:Object.assign({},DepthLimitedBlurShader.defines),vertexShader:DepthLimitedBlurShader.vertexShader,fragmentShader:DepthLimitedBlurShader.fragmentShader}),this.hBlurMaterial.defines.DEPTH_PACKING=0,this.hBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0,this.hBlurMaterial.uniforms.tDiffuse.value=this.blurIntermediateRenderTarget.texture,this.hBlurMaterial.uniforms.tDepth.value=t,this.hBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y),this.hBlurMaterial.blending=NoBlending,this.materialCopy=new ShaderMaterial({uniforms:UniformsUtils.clone(CopyShader.uniforms),vertexShader:CopyShader.vertexShader,fragmentShader:CopyShader.fragmentShader,blending:NoBlending}),this.materialCopy.transparent=!0,this.materialCopy.depthTest=!1,this.materialCopy.depthWrite=!1,this.materialCopy.blending=CustomBlending,this.materialCopy.blendSrc=DstColorFactor,this.materialCopy.blendDst=ZeroFactor,this.materialCopy.blendEquation=AddEquation,this.materialCopy.blendSrcAlpha=DstAlphaFactor,this.materialCopy.blendDstAlpha=ZeroFactor,this.materialCopy.blendEquationAlpha=AddEquation,this.fsQuad=new FullScreenQuad(null)}render(e,a,r){this.renderToScreen&&(this.materialCopy.blending=NoBlending,this.materialCopy.uniforms.tDiffuse.value=r.texture,this.materialCopy.needsUpdate=!0,this._renderPass(e,this.materialCopy,null)),e.getClearColor(this._oldClearColor),this._oldClearAlpha=e.getClearAlpha();const t=e.autoClear;e.autoClear=!1,this.saoMaterial.uniforms.bias.value=this.params.saoBias,this.saoMaterial.uniforms.intensity.value=this.params.saoIntensity,this.saoMaterial.uniforms.scale.value=this.params.saoScale,this.saoMaterial.uniforms.kernelRadius.value=this.params.saoKernelRadius,this.saoMaterial.uniforms.minResolution.value=this.params.saoMinResolution,this.saoMaterial.uniforms.cameraNear.value=this.camera.near,this.saoMaterial.uniforms.cameraFar.value=this.camera.far;const s=this.params.saoBlurDepthCutoff*(this.camera.far-this.camera.near);this.vBlurMaterial.uniforms.depthCutoff.value=s,this.hBlurMaterial.uniforms.depthCutoff.value=s,this.vBlurMaterial.uniforms.cameraNear.value=this.camera.near,this.vBlurMaterial.uniforms.cameraFar.value=this.camera.far,this.hBlurMaterial.uniforms.cameraNear.value=this.camera.near,this.hBlurMaterial.uniforms.cameraFar.value=this.camera.far,this.params.saoBlurRadius=Math.floor(this.params.saoBlurRadius),this.prevStdDev===this.params.saoBlurStdDev&&this.prevNumSamples===this.params.saoBlurRadius||(BlurShaderUtils.configure(this.vBlurMaterial,this.params.saoBlurRadius,this.params.saoBlurStdDev,new Vector2(0,1)),BlurShaderUtils.configure(this.hBlurMaterial,this.params.saoBlurRadius,this.params.saoBlurStdDev,new Vector2(1,0)),this.prevStdDev=this.params.saoBlurStdDev,this.prevNumSamples=this.params.saoBlurRadius),this._renderOverride(e,this.normalMaterial,this.normalRenderTarget,7829503,1),this._renderPass(e,this.saoMaterial,this.saoRenderTarget,16777215,1),this.params.saoBlur&&(this._renderPass(e,this.vBlurMaterial,this.blurIntermediateRenderTarget,16777215,1),this._renderPass(e,this.hBlurMaterial,this.saoRenderTarget,16777215,1));const i=this.materialCopy;this.params.output===SAOPass.OUTPUT.Normal?(this.materialCopy.uniforms.tDiffuse.value=this.normalRenderTarget.texture,this.materialCopy.needsUpdate=!0):(this.materialCopy.uniforms.tDiffuse.value=this.saoRenderTarget.texture,this.materialCopy.needsUpdate=!0),this.params.output===SAOPass.OUTPUT.Default?i.blending=CustomBlending:i.blending=NoBlending,this._renderPass(e,i,this.renderToScreen?null:r),e.setClearColor(this._oldClearColor,this._oldClearAlpha),e.autoClear=t}setSize(e,a){this.saoRenderTarget.setSize(e,a),this.blurIntermediateRenderTarget.setSize(e,a),this.normalRenderTarget.setSize(e,a),this.saoMaterial.uniforms.size.value.set(e,a),this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.saoMaterial.uniforms.cameraProjectionMatrix.value=this.camera.projectionMatrix,this.saoMaterial.needsUpdate=!0,this.vBlurMaterial.uniforms.size.value.set(e,a),this.vBlurMaterial.needsUpdate=!0,this.hBlurMaterial.uniforms.size.value.set(e,a),this.hBlurMaterial.needsUpdate=!0}dispose(){this.saoRenderTarget.dispose(),this.blurIntermediateRenderTarget.dispose(),this.normalRenderTarget.dispose(),this.normalMaterial.dispose(),this.saoMaterial.dispose(),this.vBlurMaterial.dispose(),this.hBlurMaterial.dispose(),this.materialCopy.dispose(),this.fsQuad.dispose()}_renderPass(e,a,r,t,s){e.getClearColor(this._originalClearColor);const i=e.getClearAlpha(),l=e.autoClear;e.setRenderTarget(r),e.autoClear=!1,null!=t&&(e.setClearColor(t),e.setClearAlpha(s||0),e.clear()),this.fsQuad.material=a,this.fsQuad.render(e),e.autoClear=l,e.setClearColor(this._originalClearColor),e.setClearAlpha(i)}_renderOverride(e,a,r,t,s){e.getClearColor(this._originalClearColor);const i=e.getClearAlpha(),l=e.autoClear;e.setRenderTarget(r),e.autoClear=!1,t=a.clearColor||t,s=a.clearAlpha||s,null!=t&&(e.setClearColor(t),e.setClearAlpha(s||0),e.clear()),this.scene.overrideMaterial=a,e.render(this.scene,this.camera),this.scene.overrideMaterial=null,e.autoClear=l,e.setClearColor(this._originalClearColor),e.setClearAlpha(i)}}SAOPass.OUTPUT={Default:0,SAO:1,Normal:2};export{SAOPass};
//# sourceMappingURL=SAOPass.js.map