{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/SAOPass.js","names":["AddEquation","Color","CustomBlending","DepthTexture","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshNormalMaterial","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","DepthStencilFormat","UnsignedInt248Type","Vector2","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","SAOShader","BlurShaderUtils","DepthLimitedBlurShader","CopyShader","SAOPass","constructor","scene","camera","resolution","super","this","clear","needsSwap","_originalClearColor","_oldClearColor","_oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","depthTexture","format","normalRenderTarget","minFilter","magFilter","normalMaterial","blending","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","_renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","_renderOverride","outputMaterial","OUTPUT","Normal","Default","setClearColor","setSize","width","height","dispose","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setRenderTarget","setClearAlpha","material","overrideMaterial","SAO"],"sources":["node_modules/three/examples/jsm/postprocessing/SAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tDepthStencilFormat,\n\tUnsignedInt248Type,\n\tVector2,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { BlurShaderUtils, DepthLimitedBlurShader } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A SAO implementation inspired from @bhouston previous SAO work.\n *\n * `SAOPass` provides better quality than {@link SSAOPass} but is also more expensive.\n *\n * ```js\n * const saoPass = new SAOPass( scene, camera );\n * composer.addPass( saoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { SAOPass } from 'three/addons/postprocessing/SAOPass.js';\n */\nclass SAOPass extends Pass {\n\n\t/**\n\t * Constructs a new SAO pass.\n\t *\n\t * @param {Scene} scene - The scene to compute the AO for.\n\t * @param {Camera} camera - The camera.\n\t * @param {Vector2} [resolution] - The effect's resolution.\n\t */\n\tconstructor( scene, camera, resolution = new Vector2( 256, 256 ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render the AO for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\tthis._originalClearColor = new Color();\n\t\tthis._oldClearColor = new Color();\n\t\tthis._oldClearAlpha = 1;\n\n\t\t/**\n\t\t * The SAO parameter.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.params = {\n\t\t\toutput: 0,\n\t\t\tsaoBias: 0.5,\n\t\t\tsaoIntensity: 0.18,\n\t\t\tsaoScale: 1,\n\t\t\tsaoKernelRadius: 100,\n\t\t\tsaoMinResolution: 0,\n\t\t\tsaoBlur: true,\n\t\t\tsaoBlurRadius: 8,\n\t\t\tsaoBlurStdDev: 4,\n\t\t\tsaoBlurDepthCutoff: 0.01\n\t\t};\n\n\t\t/**\n\t\t * The effect's resolution.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (256,256)\n\t\t */\n\t\tthis.resolution = new Vector2( resolution.x, resolution.y );\n\n\t\tthis.saoRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, { type: HalfFloatType } );\n\t\tthis.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.format = DepthStencilFormat;\n\t\tdepthTexture.type = UnsignedInt248Type;\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.resolution.x, this.resolution.y, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture\n\t\t} );\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.saoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SAOShader.defines ),\n\t\t\tfragmentShader: SAOShader.fragmentShader,\n\t\t\tvertexShader: SAOShader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( SAOShader.uniforms )\n\t\t} );\n\t\tthis.saoMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.saoMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.saoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.blending = NoBlending;\n\n\t\tthis.vBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.vBlurMaterial.defines[ 'DEPTH_PACKING' ] = 0;\n\t\tthis.vBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.vBlurMaterial.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\tthis.vBlurMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.vBlurMaterial.blending = NoBlending;\n\n\t\tthis.hBlurMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( DepthLimitedBlurShader.uniforms ),\n\t\t\tdefines: Object.assign( {}, DepthLimitedBlurShader.defines ),\n\t\t\tvertexShader: DepthLimitedBlurShader.vertexShader,\n\t\t\tfragmentShader: DepthLimitedBlurShader.fragmentShader\n\t\t} );\n\t\tthis.hBlurMaterial.defines[ 'DEPTH_PACKING' ] = 0;\n\t\tthis.hBlurMaterial.defines[ 'PERSPECTIVE_CAMERA' ] = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.hBlurMaterial.uniforms[ 'tDiffuse' ].value = this.blurIntermediateRenderTarget.texture;\n\t\tthis.hBlurMaterial.uniforms[ 'tDepth' ].value = depthTexture;\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( this.resolution.x, this.resolution.y );\n\t\tthis.hBlurMaterial.blending = NoBlending;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.materialCopy.transparent = true;\n\t\tthis.materialCopy.depthTest = false;\n\t\tthis.materialCopy.depthWrite = false;\n\t\tthis.materialCopy.blending = CustomBlending;\n\t\tthis.materialCopy.blendSrc = DstColorFactor;\n\t\tthis.materialCopy.blendDst = ZeroFactor;\n\t\tthis.materialCopy.blendEquation = AddEquation;\n\t\tthis.materialCopy.blendSrcAlpha = DstAlphaFactor;\n\t\tthis.materialCopy.blendDstAlpha = ZeroFactor;\n\t\tthis.materialCopy.blendEquationAlpha = AddEquation;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\t/**\n\t * Performs the SAO pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\t// Rendering readBuffer first when rendering to screen\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.materialCopy.blending = NoBlending;\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\t\t\tthis._renderPass( renderer, this.materialCopy, null );\n\n\t\t}\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis._oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.saoMaterial.uniforms[ 'bias' ].value = this.params.saoBias;\n\t\tthis.saoMaterial.uniforms[ 'intensity' ].value = this.params.saoIntensity;\n\t\tthis.saoMaterial.uniforms[ 'scale' ].value = this.params.saoScale;\n\t\tthis.saoMaterial.uniforms[ 'kernelRadius' ].value = this.params.saoKernelRadius;\n\t\tthis.saoMaterial.uniforms[ 'minResolution' ].value = this.params.saoMinResolution;\n\t\tthis.saoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.saoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t// this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n\t\tconst depthCutoff = this.params.saoBlurDepthCutoff * ( this.camera.far - this.camera.near );\n\t\tthis.vBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\t\tthis.hBlurMaterial.uniforms[ 'depthCutoff' ].value = depthCutoff;\n\n\t\tthis.vBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.vBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.hBlurMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\tthis.params.saoBlurRadius = Math.floor( this.params.saoBlurRadius );\n\t\tif ( ( this.prevStdDev !== this.params.saoBlurStdDev ) || ( this.prevNumSamples !== this.params.saoBlurRadius ) ) {\n\n\t\t\tBlurShaderUtils.configure( this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 0, 1 ) );\n\t\t\tBlurShaderUtils.configure( this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2( 1, 0 ) );\n\t\t\tthis.prevStdDev = this.params.saoBlurStdDev;\n\t\t\tthis.prevNumSamples = this.params.saoBlurRadius;\n\n\t\t}\n\n\t\t// render normal and depth\n\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t// Rendering SAO texture\n\t\tthis._renderPass( renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// Blurring SAO texture\n\t\tif ( this.params.saoBlur ) {\n\n\t\t\tthis._renderPass( renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0 );\n\t\t\tthis._renderPass( renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0 );\n\n\t\t}\n\n\t\tconst outputMaterial = this.materialCopy;\n\n\t\t// Setting up SAO rendering\n\t\tif ( this.params.output === SAOPass.OUTPUT.Normal ) {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t} else {\n\n\t\t\tthis.materialCopy.uniforms[ 'tDiffuse' ].value = this.saoRenderTarget.texture;\n\t\t\tthis.materialCopy.needsUpdate = true;\n\n\t\t}\n\n\t\t// Blending depends on output\n\t\tif ( this.params.output === SAOPass.OUTPUT.Default ) {\n\n\t\t\toutputMaterial.blending = CustomBlending;\n\n\t\t} else {\n\n\t\t\toutputMaterial.blending = NoBlending;\n\n\t\t}\n\n\t\t// Rendering SAOPass result on top of previous pass\n\t\tthis._renderPass( renderer, outputMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\trenderer.setClearColor( this._oldClearColor, this._oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.saoRenderTarget.setSize( width, height );\n\t\tthis.blurIntermediateRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\n\t\tthis.saoMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.saoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.saoMaterial.uniforms[ 'cameraProjectionMatrix' ].value = this.camera.projectionMatrix;\n\t\tthis.saoMaterial.needsUpdate = true;\n\n\t\tthis.vBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.vBlurMaterial.needsUpdate = true;\n\n\t\tthis.hBlurMaterial.uniforms[ 'size' ].value.set( width, height );\n\t\tthis.hBlurMaterial.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.saoRenderTarget.dispose();\n\t\tthis.blurIntermediateRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.saoMaterial.dispose();\n\t\tthis.vBlurMaterial.dispose();\n\t\tthis.hBlurMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\t// internal\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n}\n\nSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SAO': 1,\n\t'Normal': 2\n};\n\nexport { SAOPass };\n"],"mappings":"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","ignoreList":[]}