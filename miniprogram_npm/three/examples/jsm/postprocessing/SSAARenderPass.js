import{AdditiveBlending,Color,HalfFloatType,ShaderMaterial,UniformsUtils,WebGLRenderTarget}from"three";import{Pass,FullScreenQuad}from"./Pass.js";import{CopyShader}from"../shaders/CopyShader.js";class SSAARenderPass extends Pass{constructor(e,t,s=0,r=0){super(),this.scene=e,this.camera=t,this.sampleLevel=4,this.unbiased=!0,this.stencilBuffer=!1,this.clearColor=s,this.clearAlpha=r,this._sampleRenderTarget=null,this._oldClearColor=new Color,this._copyUniforms=UniformsUtils.clone(CopyShader.uniforms),this._copyMaterial=new ShaderMaterial({uniforms:this._copyUniforms,vertexShader:CopyShader.vertexShader,fragmentShader:CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,premultipliedAlpha:!0,blending:AdditiveBlending}),this._fsQuad=new FullScreenQuad(this._copyMaterial)}dispose(){this._sampleRenderTarget&&(this._sampleRenderTarget.dispose(),this._sampleRenderTarget=null),this._copyMaterial.dispose(),this._fsQuad.dispose()}setSize(e,t){this._sampleRenderTarget&&this._sampleRenderTarget.setSize(e,t)}render(e,t,s){this._sampleRenderTarget||(this._sampleRenderTarget=new WebGLRenderTarget(s.width,s.height,{type:HalfFloatType,stencilBuffer:this.stencilBuffer}),this._sampleRenderTarget.texture.name="SSAARenderPass.sample");const r=_JitterVectors[Math.max(0,Math.min(this.sampleLevel,5))],a=e.autoClear;e.autoClear=!1,e.getClearColor(this._oldClearColor);const i=e.getClearAlpha(),l=1/r.length;this._copyUniforms.tDiffuse.value=this._sampleRenderTarget.texture;const h={fullWidth:s.width,fullHeight:s.height,offsetX:0,offsetY:0,width:s.width,height:s.height},o=Object.assign({},this.camera.view);o.enabled&&Object.assign(h,o);for(let s=0;s<r.length;s++){const a=r[s];this.camera.setViewOffset&&this.camera.setViewOffset(h.fullWidth,h.fullHeight,h.offsetX+.0625*a[0],h.offsetY+.0625*a[1],h.width,h.height);let i=l;if(this.unbiased){i+=.03125*((s+.5)/r.length-.5)}this._copyUniforms.opacity.value=i,e.setClearColor(this.clearColor,this.clearAlpha),e.setRenderTarget(this._sampleRenderTarget),e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(this.renderToScreen?null:t),0===s&&(e.setClearColor(0,0),e.clear()),this._fsQuad.render(e)}this.camera.setViewOffset&&o.enabled?this.camera.setViewOffset(o.fullWidth,o.fullHeight,o.offsetX,o.offsetY,o.width,o.height):this.camera.clearViewOffset&&this.camera.clearViewOffset(),e.autoClear=a,e.setClearColor(this._oldClearColor,i)}}const _JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]];export{SSAARenderPass};
//# sourceMappingURL=SSAARenderPass.js.map