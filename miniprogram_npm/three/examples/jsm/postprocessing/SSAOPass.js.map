{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/SSAOPass.js","names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DstAlphaFactor","DstColorFactor","FloatType","HalfFloatType","MathUtils","MeshNormalMaterial","NearestFilter","NoBlending","RedFormat","DepthStencilFormat","UnsignedInt248Type","RepeatWrapping","ShaderMaterial","UniformsUtils","Vector3","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","SimplexNoise","SSAOBlurShader","SSAODepthShader","SSAOShader","CopyShader","SSAOPass","constructor","scene","camera","width","height","kernelSize","super","this","clear","needsSwap","kernelRadius","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","_generateSampleKernel","_generateRandomKernelRotations","depthTexture","format","type","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","_fsQuad","_originalClearColor","dispose","render","renderer","writeBuffer","readBuffer","_overrideVisibility","_renderOverride","_restoreVisibility","_renderPass","OUTPUT","SSAO","renderToScreen","Blur","Depth","Normal","Default","console","warn","setSize","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setRenderTarget","setClearColor","setClearAlpha","material","overrideMaterial","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","isPoints","isLine","isLine2","visible","length"],"sources":["node_modules/three/examples/jsm/postprocessing/SSAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tFloatType,\n\tHalfFloatType,\n\tMathUtils,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRedFormat,\n\tDepthStencilFormat,\n\tUnsignedInt248Type,\n\tRepeatWrapping,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOBlurShader, SSAODepthShader, SSAOShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A pass for a basic SSAO effect.\n *\n * {@link SAOPass} and {@link GTAPass} produce a more advanced AO but are also\n * more expensive.\n *\n * ```js\n * const ssaoPass = new SSAOPass( scene, camera, width, height );\n * composer.addPass( ssaoPass );\n * ```\n *\n * @augments Pass\n * @three_import import { SSAOPass } from 'three/addons/postprocessing/SSAOPass.js';\n */\nclass SSAOPass extends Pass {\n\n\t/**\n\t * Constructs a new SSAO pass.\n\t *\n\t * @param {Scene} scene - The scene to compute the AO for.\n\t * @param {Camera} camera - The camera.\n\t * @param {number} [width=512] - The width of the effect.\n\t * @param {number} [height=512] - The height of the effect.\n\t * @param {number} [kernelSize=32] - The kernel size.\n\t */\n\tconstructor( scene, camera, width = 512, height = 512, kernelSize = 32 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The width of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The scene to render the AO for.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The kernel radius controls how wide the\n\t\t * AO spreads.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 8\n\t\t */\n\t\tthis.kernelRadius = 8;\n\t\tthis.kernel = [];\n\t\tthis.noiseTexture = null;\n\n\t\t/**\n\t\t * The output configuration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.output = 0;\n\n\t\t/**\n\t\t * Defines the minimum distance that should be\n\t\t * affected by the AO.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.005\n\t\t */\n\t\tthis.minDistance = 0.005;\n\n\t\t/**\n\t\t * Defines the maximum distance that should be\n\t\t * affected by the AO.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.maxDistance = 0.1;\n\n\t\tthis._visibilityCache = [];\n\n\t\t//\n\n\t\tthis._generateSampleKernel( kernelSize );\n\t\tthis._generateRandomKernelRotations();\n\n\t\t// depth texture\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.format = DepthStencilFormat;\n\t\tdepthTexture.type = UnsignedInt248Type;\n\n\t\t// normal render target with depth buffer\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture\n\t\t} );\n\n\t\t// ssao render target\n\n\t\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\n\t\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t\t// ssao material\n\n\t\tthis.ssaoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAOShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\n\t\t\tvertexShader: SSAOShader.vertexShader,\n\t\t\tfragmentShader: SSAOShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.ssaoMaterial.defines[ 'KERNEL_SIZE' ] = kernelSize;\n\n\t\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\t\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\n\t\t\tvertexShader: SSAOBlurShader.vertexShader,\n\t\t\tfragmentShader: SSAOBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\n\t\t\tvertexShader: SSAODepthShader.vertexShader,\n\t\t\tfragmentShader: SSAODepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\t// internals\n\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\n\t\tthis._originalClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// dispose render targets\n\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.ssaoRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dispose full screen quad\n\n\t\tthis._fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * Performs the SSAO pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n\t\tthis._overrideVisibility();\n\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\tthis._restoreVisibility();\n\n\t\t// render SSAO\n\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis._renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t// render blur\n\n\t\tthis._renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Blur:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis._renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : readBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t}\n\n\t// internals\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis._fsQuad.material = passMaterial;\n\t\tthis._fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this._originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this._originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_generateSampleKernel( kernelSize ) {\n\n\t\tconst kernel = this.kernel;\n\n\t\tfor ( let i = 0; i < kernelSize; i ++ ) {\n\n\t\t\tconst sample = new Vector3();\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\tsample.z = Math.random();\n\n\t\t\tsample.normalize();\n\n\t\t\tlet scale = i / kernelSize;\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\tsample.multiplyScalar( scale );\n\n\t\t\tkernel.push( sample );\n\n\t\t}\n\n\t}\n\n\t_generateRandomKernelRotations() {\n\n\t\tconst width = 4, height = 4;\n\n\t\tconst simplex = new SimplexNoise();\n\n\t\tconst size = width * height;\n\t\tconst data = new Float32Array( size );\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\tconst x = ( Math.random() * 2 ) - 1;\n\t\t\tconst y = ( Math.random() * 2 ) - 1;\n\t\t\tconst z = 0;\n\n\t\t\tdata[ i ] = simplex.noise3d( x, y, z );\n\n\t\t}\n\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RedFormat, FloatType );\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\n\t\tthis.noiseTexture.needsUpdate = true;\n\n\t}\n\n\t_overrideVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( ( object.isPoints || object.isLine || object.isLine2 ) && object.visible ) {\n\n\t\t\t\tobject.visible = false;\n\t\t\t\tcache.push( object );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t_restoreVisibility() {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfor ( let i = 0; i < cache.length; i ++ ) {\n\n\t\t\tcache[ i ].visible = true;\n\n\t\t}\n\n\t\tcache.length = 0;\n\n\t}\n\n}\n\nSSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SSAO': 1,\n\t'Blur': 2,\n\t'Depth': 3,\n\t'Normal': 4\n};\n\nexport { SSAOPass };\n"],"mappings":"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","ignoreList":[]}