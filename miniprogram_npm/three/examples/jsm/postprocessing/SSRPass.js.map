{"version":3,"file":"node_modules/three/examples/jsm/postprocessing/SSRPass.js","names":["AddEquation","Color","NormalBlending","DepthTexture","SrcAlphaFactor","OneMinusSrcAlphaFactor","MeshNormalMaterial","MeshBasicMaterial","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","UnsignedShortType","WebGLRenderTarget","HalfFloatType","Pass","FullScreenQuad","SSRBlurShader","SSRDepthShader","SSRShader","CopyShader","SSRPass","constructor","renderer","scene","camera","width","height","selects","bouncing","groundReflector","super","this","clear","opacity","uniforms","value","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","Object","defineProperty","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","writeBuffer","setRenderTarget","visible","doRender","_renderOverride","_renderMetalness","_renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","setSize","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","originalBackground","background","originalFog","fog","traverseVisible","child","_SSRPassBackupMaterial","includes"],"sources":["node_modules/three/examples/jsm/postprocessing/SSRPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tNormalBlending,\n\tDepthTexture,\n\tSrcAlphaFactor,\n\tOneMinusSrcAlphaFactor,\n\tMeshNormalMaterial,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tWebGLRenderTarget,\n\tHalfFloatType,\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SSRBlurShader, SSRDepthShader, SSRShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\n/**\n * A pass for a basic SSR effect.\n *\n * ```js\n * const ssrPass = new SSRPass( {\n * \trenderer,\n * \tscene,\n * \tcamera,\n * \twidth: innerWidth,\n * \theight: innerHeight\n * } );\n * composer.addPass( ssrPass );\n * ```\n *\n * @augments Pass\n * @three_import import { SSRPass } from 'three/addons/postprocessing/SSRPass.js';\n */\nclass SSRPass extends Pass {\n\n\t/**\n\t * Constructs a new SSR pass.\n\t *\n\t * @param {SSRPass~Options} options - The pass options.\n\t */\n\tconstructor( { renderer, scene, camera, width = 512, height = 512, selects = null, bouncing = false, groundReflector = null } ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The width of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the effect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 512\n\t\t */\n\t\tthis.height = height;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {WebGLRenderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The ground reflector.\n\t\t *\n\t\t * @type {?ReflectorForSSRPass}\n\t\t * @default 0\n\t\t */\n\t\tthis.groundReflector = groundReflector;\n\n\t\t/**\n\t\t * The opacity.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.opacity = SSRShader.uniforms.opacity.value;\n\n\t\t/**\n\t\t * The output configuration.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.output = 0;\n\n\t\t/**\n\t\t * Controls how far a fragment can reflect.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 180\n\t\t */\n\t\tthis.maxDistance = SSRShader.uniforms.maxDistance.value;\n\n\t\t/**\n\t\t * Controls the cutoff between what counts as a\n\t\t * possible reflection hit and what does not.\n\t\t *\n\t\t * @type {number}\n\t\t * @default .018\n\t\t */\n\t\tthis.thickness = SSRShader.uniforms.thickness.value;\n\n\t\tthis.tempColor = new Color();\n\n\t\tthis._selects = selects;\n\n\t\t/**\n\t\t * Whether the pass is selective or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.selective = Array.isArray( this._selects );\n\n\t\t/**\n\t\t * Which 3D objects should be affected by SSR. If not set, the entire scene is affected.\n\t\t *\n\t\t * @name SSRPass#selects\n\t\t * @type {?Array<Object3D>}\n\t\t * @default null\n\t\t */\n\t\tObject.defineProperty( this, 'selects', {\n\t\t\tget() {\n\n\t\t\t\treturn this._selects;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._selects === val ) return;\n\t\t\t\tthis._selects = val;\n\t\t\t\tif ( Array.isArray( val ) ) {\n\n\t\t\t\t\tthis.selective = true;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = true;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.selective = false;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = false;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._bouncing = bouncing;\n\n\t\t/**\n\t\t * Whether bouncing is enabled or not.\n\t\t *\n\t\t * @name SSRPass#bouncing\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tObject.defineProperty( this, 'bouncing', {\n\t\t\tget() {\n\n\t\t\t\treturn this._bouncing;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._bouncing === val ) return;\n\t\t\t\tthis._bouncing = val;\n\t\t\t\tif ( val ) {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Whether to blur reflections or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.blur = true;\n\n\t\tthis._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n\n\t\t/**\n\t\t * Whether to use distance attenuation or not.\n\t\t *\n\t\t * @name SSRPass#distanceAttenuation\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tObject.defineProperty( this, 'distanceAttenuation', {\n\t\t\tget() {\n\n\t\t\t\treturn this._distanceAttenuation;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._distanceAttenuation === val ) return;\n\t\t\t\tthis._distanceAttenuation = val;\n\t\t\t\tthis.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\n\t\tthis._fresnel = SSRShader.defines.FRESNEL;\n\n\t\t/**\n\t\t * Whether to use fresnel or not.\n\t\t *\n\t\t * @name SSRPass#fresnel\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tObject.defineProperty( this, 'fresnel', {\n\t\t\tget() {\n\n\t\t\t\treturn this._fresnel;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._fresnel === val ) return;\n\t\t\t\tthis._fresnel = val;\n\t\t\t\tthis.ssrMaterial.defines.FRESNEL = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._infiniteThick = SSRShader.defines.INFINITE_THICK;\n\n\t\t/**\n\t\t * Whether to use infinite thickness or not.\n\t\t *\n\t\t * @name SSRPass#infiniteThick\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tObject.defineProperty( this, 'infiniteThick', {\n\t\t\tget() {\n\n\t\t\t\treturn this._infiniteThick;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._infiniteThick === val ) return;\n\t\t\t\tthis._infiniteThick = val;\n\t\t\t\tthis.ssrMaterial.defines.INFINITE_THICK = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\t// beauty render target with depth buffer\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.type = UnsignedShortType;\n\t\tdepthTexture.minFilter = NearestFilter;\n\t\tdepthTexture.magFilter = NearestFilter;\n\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture,\n\t\t\tdepthBuffer: true\n\t\t} );\n\n\t\t//for bouncing\n\t\tthis.prevRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\t// normal render target\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t} );\n\n\t\t// metalness render target\n\n\t\tthis.metalnessRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t} );\n\n\n\n\t\t// ssr render target\n\n\t\tthis.ssrRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\tthis.blurRenderTarget = this.ssrRenderTarget.clone();\n\t\tthis.blurRenderTarget2 = this.ssrRenderTarget.clone();\n\t\t// this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n\t\t// ssr material\n\n\t\tthis.ssrMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRShader.defines, {\n\t\t\t\tMAX_STEP: Math.sqrt( this.width * this.width + this.height * this.height )\n\t\t\t} ),\n\t\t\tuniforms: UniformsUtils.clone( SSRShader.uniforms ),\n\t\t\tvertexShader: SSRShader.vertexShader,\n\t\t\tfragmentShader: SSRShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssrMaterial.defines.SELECTIVE = this.selective;\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.ssrMaterial.uniforms[ 'tMetalness' ].value = this.metalnessRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.ssrMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssrMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\t// metalnessOn material\n\n\t\tthis.metalnessOnMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'white'\n\t\t} );\n\n\t\t// metalnessOff material\n\n\t\tthis.metalnessOffMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'black'\n\t\t} );\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// blur material 2\n\n\t\tthis.blurMaterial2 = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial2.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// // blur material 3\n\n\t\t// this.blurMaterial3 = new ShaderMaterial({\n\t\t//   defines: Object.assign({}, SSRBlurShader.defines),\n\t\t//   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n\t\t//   vertexShader: SSRBlurShader.vertexShader,\n\t\t//   fragmentShader: SSRBlurShader.fragmentShader\n\t\t// });\n\t\t// this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n\t\t// this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRDepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRDepthShader.uniforms ),\n\t\t\tvertexShader: SSRDepthShader.vertexShader,\n\t\t\tfragmentShader: SSRDepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: SrcAlphaFactor,\n\t\t\tblendDst: OneMinusSrcAlphaFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: SrcAlphaFactor,\n\t\t\tblendDstAlpha: OneMinusSrcAlphaFactor,\n\t\t\tblendEquationAlpha: AddEquation,\n\t\t\t// premultipliedAlpha:true,\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.prevRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.metalnessRenderTarget.dispose();\n\t\tthis.ssrRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\t\tthis.blurRenderTarget2.dispose();\n\t\t// this.blurRenderTarget3.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.metalnessOnMaterial.dispose();\n\t\tthis.metalnessOffMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.blurMaterial2.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dispose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\t/**\n\t * Performs the SSR pass.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty and depth\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\tif ( this.groundReflector ) {\n\n\t\t\tthis.groundReflector.visible = false;\n\t\t\tthis.groundReflector.doRender( this.renderer, this.scene, this.camera );\n\t\t\tthis.groundReflector.visible = true;\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\t\tif ( this.groundReflector ) this.groundReflector.visible = false;\n\n\t\t// render normals\n\n\t\tthis._renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0, 0 );\n\n\t\t// render metalnesses\n\n\t\tif ( this.selective ) {\n\n\t\t\tthis._renderMetalness( renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0 );\n\n\t\t}\n\n\t\t// render SSR\n\n\t\tthis.ssrMaterial.uniforms[ 'opacity' ].value = this.opacity;\n\t\tthis.ssrMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis._renderPass( renderer, this.ssrMaterial, this.ssrRenderTarget );\n\n\n\t\t// render blur\n\n\t\tif ( this.blur ) {\n\n\t\t\tthis._renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\t\t\tthis._renderPass( renderer, this.blurMaterial2, this.blurRenderTarget2 );\n\t\t\t// this._renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n\n\t\t}\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSRPass.OUTPUT.Default:\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase SSRPass.OUTPUT.SSR:\n\n\t\t\t\tif ( this.blur )\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\telse\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Depth:\n\n\t\t\t\tthis._renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Metalness:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.metalnessRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis._renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSRPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The height to set.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.ssrMaterial.defines.MAX_STEP = Math.sqrt( width * width + height * height );\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.prevRenderTarget.setSize( width, height );\n\t\tthis.ssrRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.metalnessRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget2.setSize( width, height );\n\t\t// this.blurRenderTarget3.setSize(width, height);\n\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( width, height );\n\n\t}\n\n\t// internals\n\n\t_renderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\t_renderMetalness( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst originalBackground = this.scene.background;\n\t\tconst originalFog = this.scene.fog;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\t\tthis.scene.background = null;\n\t\tthis.scene.fog = null;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild._SSRPassBackupMaterial = child.material;\n\t\t\tif ( this._selects.includes( child ) ) {\n\n\t\t\t\tchild.material = this.metalnessOnMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tchild.material = this.metalnessOffMaterial;\n\n\t\t\t}\n\n\t\t} );\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild.material = child._SSRPassBackupMaterial;\n\n\t\t} );\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\t\tthis.scene.background = originalBackground;\n\t\tthis.scene.fog = originalFog;\n\n\t}\n\n}\n\n/**\n * Constructor options of `SSRPass`.\n *\n * @typedef {Object} SSRPass~Options\n * @property {WebGLRenderer} renderer - The renderer.\n * @property {Scene} scene - The scene to render.\n * @property {Camera} camera - The camera.\n * @property {number} [width=512] - The width of the effect.\n * @property {number} [height=512] - The width of the effect.\n * @property {?Array<Object3D>} [selects=null] - Which 3D objects should be affected by SSR. If not set, the entire scene is affected.\n * @property {boolean} [bouncing=false] - Whether bouncing is enabled or not.\n * @property {?ReflectorForSSRPass} [groundReflector=null] - A ground reflector.\n **/\n\nSSRPass.OUTPUT = {\n\t'Default': 0,\n\t'SSR': 1,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5,\n\t'Metalness': 7,\n};\n\nexport { SSRPass };\n"],"mappings":"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","ignoreList":[]}