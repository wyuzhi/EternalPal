import{HalfFloatType,WebGLRenderTarget}from"three";import{SSAARenderPass}from"./SSAARenderPass.js";class TAARenderPass extends SSAARenderPass{constructor(e,t,r,s){super(e,t,r,s),this.sampleLevel=0,this.accumulate=!1,this.accumulateIndex=-1,this._sampleRenderTarget=null,this._holdRenderTarget=null}render(e,t,r,s){if(!1===this.accumulate)return super.render(e,t,r,s),void(this.accumulateIndex=-1);const a=_JitterVectors[5];null===this._sampleRenderTarget&&(this._sampleRenderTarget=new WebGLRenderTarget(r.width,r.height,{type:HalfFloatType}),this._sampleRenderTarget.texture.name="TAARenderPass.sample"),null===this._holdRenderTarget&&(this._holdRenderTarget=new WebGLRenderTarget(r.width,r.height,{type:HalfFloatType}),this._holdRenderTarget.texture.name="TAARenderPass.hold"),-1===this.accumulateIndex&&(super.render(e,this._holdRenderTarget,r,s),this.accumulateIndex=0);const l=e.autoClear;e.autoClear=!1,e.getClearColor(this._oldClearColor);const i=e.getClearAlpha(),h=1/a.length;if(this.accumulateIndex>=0&&this.accumulateIndex<a.length){this._copyUniforms.opacity.value=h,this._copyUniforms.tDiffuse.value=t.texture;const s=Math.pow(2,this.sampleLevel);for(let l=0;l<s;l++){const s=a[this.accumulateIndex];if(this.camera.setViewOffset&&this.camera.setViewOffset(r.width,r.height,.0625*s[0],.0625*s[1],r.width,r.height),e.setRenderTarget(t),e.setClearColor(this.clearColor,this.clearAlpha),e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(this._sampleRenderTarget),0===this.accumulateIndex&&(e.setClearColor(0,0),e.clear()),this._fsQuad.render(e),this.accumulateIndex++,this.accumulateIndex>=a.length)break}this.camera.clearViewOffset&&this.camera.clearViewOffset()}e.setClearColor(this.clearColor,this.clearAlpha);const n=this.accumulateIndex*h;n>0&&(this._copyUniforms.opacity.value=1,this._copyUniforms.tDiffuse.value=this._sampleRenderTarget.texture,e.setRenderTarget(t),e.clear(),this._fsQuad.render(e)),n<1&&(this._copyUniforms.opacity.value=1-n,this._copyUniforms.tDiffuse.value=this._holdRenderTarget.texture,e.setRenderTarget(t),this._fsQuad.render(e)),e.autoClear=l,e.setClearColor(this._oldClearColor,i)}dispose(){super.dispose(),this._holdRenderTarget&&this._holdRenderTarget.dispose()}}const _JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]];export{TAARenderPass};
//# sourceMappingURL=TAARenderPass.js.map