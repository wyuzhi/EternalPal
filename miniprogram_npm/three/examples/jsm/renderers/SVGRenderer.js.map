{"version":3,"file":"node_modules/three/examples/jsm/renderers/SVGRenderer.js","names":["Box2","Camera","Color","Matrix3","Matrix4","Object3D","SRGBColorSpace","Vector3","Projector","RenderableFace","RenderableLine","RenderableSprite","SVGObject","constructor","node","super","this","isSVGObject","SVGRenderer","_renderData","_elements","_lights","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_svgNode","_currentPath","_currentStyle","_pathCount","_precision","_quality","_this","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_projector","_svg","document","createElementNS","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","renderSprite","v1","element","material","scaleX","scale","x","scaleY","y","isPointsMaterial","size","path","style","isSpriteMaterial","color","getStyle","outputColorSpace","opacity","addPath","renderLine","v2","positionScreen","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","renderFace3","v3","info","render","vertices","faces","isMeshBasicMaterial","copy","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","lights","position","normal","l","ll","light","lightColor","isDirectionalLight","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","r","g","b","isPointLight","subVectors","distance","Math","min","distanceTo","calculateLight","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","setRGB","z","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","expand","pixels","det","idet","sqrt","flushPath","id","setAttribute","getPathNode","appendChild","domElement","autoClear","sortObjects","sortElements","overdraw","setQuality","quality","setClearColor","set","setPixelRatio","setSize","width","height","max","getSize","setPrecision","precision","clear","backgroundColor","scene","camera","console","error","background","isColor","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","getNormalMatrix","isAmbientLight","calculateLights","e","el","undefined","makeEmpty","setFromPoints","intersectsBox","traverseVisible","object","applyMatrix4"],"sources":["node_modules/three/examples/jsm/renderers/SVGRenderer.js"],"sourcesContent":["import {\n\tBox2,\n\tCamera,\n\tColor,\n\tMatrix3,\n\tMatrix4,\n\tObject3D,\n\tSRGBColorSpace,\n\tVector3\n} from 'three';\nimport {\n\tProjector,\n\tRenderableFace,\n\tRenderableLine,\n\tRenderableSprite\n} from '../renderers/Projector.js';\n\n/**\n * Can be used to wrap SVG elements into a 3D object.\n *\n * @augments Object3D\n * @three_import import { SVGObject } from 'three/addons/renderers/SVGRenderer.js';\n */\nclass SVGObject extends Object3D {\n\n\t/**\n\t * Constructs a new SVG object.\n\t *\n\t * @param {SVGElement} node - The SVG element.\n\t */\n\tconstructor( node ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSVGObject = true;\n\n\t\t/**\n\t\t * This SVG element.\n\t\t *\n\t\t * @type {SVGElement}\n\t\t */\n\t\tthis.node = node;\n\n\t}\n\n}\n\n/**\n * This renderer an be used to render geometric data using SVG. The produced vector\n * graphics are particular useful in the following use cases:\n *\n * - Animated logos or icons.\n * - Interactive 2D/3D diagrams or graphs.\n * - Interactive maps.\n * - Complex or animated user interfaces.\n *\n * `SVGRenderer` has various advantages. It produces crystal-clear and sharp output which\n * is independent of the actual viewport resolution.SVG elements can be styled via CSS.\n * And they have good accessibility since it's possible to add metadata like title or description\n * (useful for search engines or screen readers).\n *\n * There are, however, some important limitations:\n * - No advanced shading.\n * - No texture support.\n * - No shadow support.\n *\n * @three_import import { SVGRenderer } from 'three/addons/renderers/SVGRenderer.js';\n */\nclass SVGRenderer {\n\n\t/**\n\t * Constructs a new SVG renderer.\n\t */\n\tconstructor() {\n\n\t\tlet _renderData, _elements, _lights,\n\t\t\t_svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf,\n\n\t\t\t_v1, _v2, _v3,\n\n\t\t\t_svgNode,\n\t\t\t_pathCount = 0,\n\n\t\t\t_precision = null,\n\t\t\t_quality = 1,\n\n\t\t\t_currentPath, _currentStyle;\n\n\t\tconst _this = this,\n\t\t\t_clipBox = new Box2(),\n\t\t\t_elemBox = new Box2(),\n\n\t\t\t_color = new Color(),\n\t\t\t_diffuseColor = new Color(),\n\t\t\t_ambientLight = new Color(),\n\t\t\t_directionalLights = new Color(),\n\t\t\t_pointLights = new Color(),\n\t\t\t_clearColor = new Color(),\n\n\t\t\t_vector3 = new Vector3(), // Needed for PointLight\n\t\t\t_centroid = new Vector3(),\n\t\t\t_normal = new Vector3(),\n\t\t\t_normalViewMatrix = new Matrix3(),\n\n\t\t\t_viewMatrix = new Matrix4(),\n\t\t\t_viewProjectionMatrix = new Matrix4(),\n\n\t\t\t_svgPathPool = [],\n\n\t\t\t_projector = new Projector(),\n\t\t\t_svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n\n\t\t/**\n\t\t * The DOM where the renderer appends its child-elements.\n\t\t *\n\t\t * @type {DOMElement}\n\t\t */\n\t\tthis.domElement = _svg;\n\n\t\t/**\n\t\t * Whether to automatically perform a clear before a render call or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoClear = true;\n\n\t\t/**\n\t\t * Whether to sort 3D objects or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortObjects = true;\n\n\t\t/**\n\t\t * Whether to sort elements or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.sortElements = true;\n\n\t\t/**\n\t\t * Number of fractional pixels to enlarge polygons in order to\n\t\t * prevent anti-aliasing gaps. Range is `[0,1]`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.overdraw = 0.5;\n\n\t\t/**\n\t\t * The output color space.\n\t\t *\n\t\t * @type {(SRGBColorSpace|LinearSRGBColorSpace)}\n\t\t * @default SRGBColorSpace\n\t\t */\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\t/**\n\t\t * Provides information about the number of\n\t\t * rendered vertices and faces.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.info = {\n\n\t\t\trender: {\n\n\t\t\t\tvertices: 0,\n\t\t\t\tfaces: 0\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the render quality. Setting to `high` means This value indicates that the browser\n\t\t * tries to improve the SVG quality over rendering speed and geometric precision.\n\t\t *\n\t\t * @param {('low'|'high')} quality - The quality.\n\t\t */\n\t\tthis.setQuality = function ( quality ) {\n\n\t\t\tswitch ( quality ) {\n\n\t\t\t\tcase 'high': _quality = 1; break;\n\t\t\t\tcase 'low': _quality = 0; break;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the clear color.\n\t\t *\n\t\t * @param {(number|Color|string)} color - The clear color to set.\n\t\t */\n\t\tthis.setClearColor = function ( color ) {\n\n\t\t\t_clearColor.set( color );\n\n\t\t};\n\n\t\tthis.setPixelRatio = function () {};\n\n\t\t/**\n\t\t * Resizes the renderer to the given width and height.\n\t\t *\n\t\t * @param {number} width - The width of the renderer.\n\t\t * @param {number} height - The height of the renderer.\n\t\t */\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_svgWidth = width; _svgHeight = height;\n\t\t\t_svgWidthHalf = _svgWidth / 2; _svgHeightHalf = _svgHeight / 2;\n\n\t\t\t_svg.setAttribute( 'viewBox', ( - _svgWidthHalf ) + ' ' + ( - _svgHeightHalf ) + ' ' + _svgWidth + ' ' + _svgHeight );\n\t\t\t_svg.setAttribute( 'width', _svgWidth );\n\t\t\t_svg.setAttribute( 'height', _svgHeight );\n\n\t\t\t_clipBox.min.set( - _svgWidthHalf, - _svgHeightHalf );\n\t\t\t_clipBox.max.set( _svgWidthHalf, _svgHeightHalf );\n\n\t\t};\n\n\t\t/**\n\t\t * Returns an object containing the width and height of the renderer.\n\t\t *\n\t\t * @return {{width:number,height:number}} The size of the renderer.\n\t\t */\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _svgWidth,\n\t\t\t\theight: _svgHeight\n\t\t\t};\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the precision of the data used to create a paths.\n\t\t *\n\t\t * @param {number} precision - The precision to set.\n\t\t */\n\t\tthis.setPrecision = function ( precision ) {\n\n\t\t\t_precision = precision;\n\n\t\t};\n\n\t\tfunction removeChildNodes() {\n\n\t\t\t_pathCount = 0;\n\n\t\t\twhile ( _svg.childNodes.length > 0 ) {\n\n\t\t\t\t_svg.removeChild( _svg.childNodes[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convert( c ) {\n\n\t\t\treturn _precision !== null ? c.toFixed( _precision ) : c;\n\n\t\t}\n\n\t\t/**\n\t\t * Performs a manual clear with the defined clear color.\n\t\t */\n\t\tthis.clear = function () {\n\n\t\t\tremoveChildNodes();\n\t\t\t_svg.style.backgroundColor = _clearColor.getStyle( _this.outputColorSpace );\n\n\t\t};\n\n\t\t/**\n\t\t * Renders the given scene using the given camera.\n\t\t *\n\t\t * @param {Object3D} scene - A scene or any other type of 3D object.\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera instanceof Camera === false ) {\n\n\t\t\t\tconsole.error( 'THREE.SVGRenderer.render: camera is not an instance of Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst background = scene.background;\n\n\t\t\tif ( background && background.isColor ) {\n\n\t\t\t\tremoveChildNodes();\n\t\t\t\t_svg.style.backgroundColor = background.getStyle( _this.outputColorSpace );\n\n\t\t\t} else if ( this.autoClear === true ) {\n\n\t\t\t\tthis.clear();\n\n\t\t\t}\n\n\t\t\t_this.info.render.vertices = 0;\n\t\t\t_this.info.render.faces = 0;\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t\t_elements = _renderData.elements;\n\t\t\t_lights = _renderData.lights;\n\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t\tcalculateLights( _lights );\n\n\t\t\t // reset accumulated path\n\n\t\t\t_currentPath = '';\n\t\t\t_currentStyle = '';\n\n\t\t\tfor ( let e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\t\tconst element = _elements[ e ];\n\t\t\t\tconst material = element.material;\n\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t\t_elemBox.makeEmpty();\n\n\t\t\t\tif ( element instanceof RenderableSprite ) {\n\n\t\t\t\t\t_v1 = element;\n\t\t\t\t\t_v1.x *= _svgWidthHalf; _v1.y *= - _svgHeightHalf;\n\n\t\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t\t} else if ( element instanceof RenderableLine ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t\t_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderLine( _v1, _v2, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( element instanceof RenderableFace ) {\n\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t\t_v1.positionScreen.x *= _svgWidthHalf; _v1.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v2.positionScreen.x *= _svgWidthHalf; _v2.positionScreen.y *= - _svgHeightHalf;\n\t\t\t\t\t_v3.positionScreen.x *= _svgWidthHalf; _v3.positionScreen.y *= - _svgHeightHalf;\n\n\t\t\t\t\tif ( this.overdraw > 0 ) {\n\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, this.overdraw );\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, this.overdraw );\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, this.overdraw );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t\t_v3.positionScreen\n\t\t\t\t\t] );\n\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, element, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tflushPath(); // just to flush last svg:path\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\t if ( object.isSVGObject ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\t\tif ( _vector3.z < - 1 || _vector3.z > 1 ) return;\n\n\t\t\t\t\tconst x = _vector3.x * _svgWidthHalf;\n\t\t\t\t\tconst y = - _vector3.y * _svgHeightHalf;\n\n\t\t\t\t\tconst node = object.node;\n\t\t\t\t\tnode.setAttribute( 'transform', 'translate(' + x + ',' + y + ')' );\n\n\t\t\t\t\t_svg.appendChild( node );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\tfunction calculateLights( lights ) {\n\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\t\tfor ( let l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tconst light = lights[ l ];\n\t\t\t\tconst lightColor = light.color;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\t_ambientLight.r += lightColor.r;\n\t\t\t\t\t_ambientLight.g += lightColor.g;\n\t\t\t\t\t_ambientLight.b += lightColor.b;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\t_directionalLights.r += lightColor.r;\n\t\t\t\t\t_directionalLights.g += lightColor.g;\n\t\t\t\t\t_directionalLights.b += lightColor.b;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\t_pointLights.r += lightColor.r;\n\t\t\t\t\t_pointLights.g += lightColor.g;\n\t\t\t\t\t_pointLights.b += lightColor.b;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction calculateLight( lights, position, normal, color ) {\n\n\t\t\tfor ( let l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\t\tconst light = lights[ l ];\n\t\t\t\tconst lightColor = light.color;\n\n\t\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\t\tconst lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\t\tlet amount = normal.dot( lightPosition );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tconst lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\t\tlet amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\t\tamount *= light.intensity;\n\n\t\t\t\t\tcolor.r += lightColor.r * amount;\n\t\t\t\t\tcolor.g += lightColor.g * amount;\n\t\t\t\t\tcolor.b += lightColor.b * amount;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderSprite( v1, element, material ) {\n\n\t\t\tlet scaleX = element.scale.x * _svgWidthHalf;\n\t\t\tlet scaleY = element.scale.y * _svgHeightHalf;\n\n\t\t\tif ( material.isPointsMaterial ) {\n\n\t\t\t\tscaleX *= material.size;\n\t\t\t\tscaleY *= material.size;\n\n\t\t\t}\n\n\t\t\tconst path = 'M' + convert( v1.x - scaleX * 0.5 ) + ',' + convert( v1.y - scaleY * 0.5 ) + 'h' + convert( scaleX ) + 'v' + convert( scaleY ) + 'h' + convert( - scaleX ) + 'z';\n\t\t\tlet style = '';\n\n\t\t\tif ( material.isSpriteMaterial || material.isPointsMaterial ) {\n\n\t\t\t\tstyle = 'fill:' + material.color.getStyle( _this.outputColorSpace ) + ';fill-opacity:' + material.opacity;\n\n\t\t\t}\n\n\t\t\taddPath( style, path );\n\n\t\t}\n\n\t\tfunction renderLine( v1, v2, material ) {\n\n\t\t\tconst path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y );\n\n\t\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\t\tlet style = 'fill:none;stroke:' + material.color.getStyle( _this.outputColorSpace ) + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\tstyle = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n\n\t\t\t\t}\n\n\t\t\t\taddPath( style, path );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderFace3( v1, v2, v3, element, material ) {\n\n\t\t\t_this.info.render.vertices += 3;\n\t\t\t_this.info.render.faces ++;\n\n\t\t\tconst path = 'M' + convert( v1.positionScreen.x ) + ',' + convert( v1.positionScreen.y ) + 'L' + convert( v2.positionScreen.x ) + ',' + convert( v2.positionScreen.y ) + 'L' + convert( v3.positionScreen.x ) + ',' + convert( v3.positionScreen.y ) + 'z';\n\t\t\tlet style = '';\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\t\t_diffuseColor.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\t_color.copy( _ambientLight );\n\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\t\tcalculateLight( _lights, _centroid, element.normalModel, _color );\n\n\t\t\t\t_color.multiply( _diffuseColor ).add( material.emissive );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix ).normalize();\n\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\t}\n\n\t\t\tif ( material.wireframe ) {\n\n\t\t\t\tstyle = 'fill:none;stroke:' + _color.getStyle( _this.outputColorSpace ) + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n\n\t\t\t} else {\n\n\t\t\t\tstyle = 'fill:' + _color.getStyle( _this.outputColorSpace ) + ';fill-opacity:' + material.opacity;\n\n\t\t\t}\n\n\t\t\taddPath( style, path );\n\n\t\t}\n\n\t\t// Hide anti-alias gaps\n\n\t\tfunction expand( v1, v2, pixels ) {\n\n\t\t\tlet x = v2.x - v1.x, y = v2.y - v1.y;\n\t\t\tconst det = x * x + y * y;\n\n\t\t\tif ( det === 0 ) return;\n\n\t\t\tconst idet = pixels / Math.sqrt( det );\n\n\t\t\tx *= idet; y *= idet;\n\n\t\t\tv2.x += x; v2.y += y;\n\t\t\tv1.x -= x; v1.y -= y;\n\n\t\t}\n\n\t\tfunction addPath( style, path ) {\n\n\t\t\tif ( _currentStyle === style ) {\n\n\t\t\t\t_currentPath += path;\n\n\t\t\t} else {\n\n\t\t\t\tflushPath();\n\n\t\t\t\t_currentStyle = style;\n\t\t\t\t_currentPath = path;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction flushPath() {\n\n\t\t\tif ( _currentPath ) {\n\n\t\t\t\t_svgNode = getPathNode( _pathCount ++ );\n\t\t\t\t_svgNode.setAttribute( 'd', _currentPath );\n\t\t\t\t_svgNode.setAttribute( 'style', _currentStyle );\n\t\t\t\t_svg.appendChild( _svgNode );\n\n\t\t\t}\n\n\t\t\t_currentPath = '';\n\t\t\t_currentStyle = '';\n\n\t\t}\n\n\t\tfunction getPathNode( id ) {\n\n\t\t\tif ( _svgPathPool[ id ] == null ) {\n\n\t\t\t\t_svgPathPool[ id ] = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n\n\t\t\t\tif ( _quality == 0 ) {\n\n\t\t\t\t\t_svgPathPool[ id ].setAttribute( 'shape-rendering', 'crispEdges' ); //optimizeSpeed\n\n\t\t\t\t}\n\n\t\t\t\treturn _svgPathPool[ id ];\n\n\t\t\t}\n\n\t\t\treturn _svgPathPool[ id ];\n\n\t\t}\n\n\t}\n\n}\n\nexport { SVGObject, SVGRenderer };\n"],"mappings":"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","ignoreList":[]}