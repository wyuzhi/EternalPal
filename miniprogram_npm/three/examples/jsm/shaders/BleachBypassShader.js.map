{"version":3,"file":"node_modules/three/examples/jsm/shaders/BleachBypassShader.js","names":["BleachBypassShader","name","uniforms","tDiffuse","value","opacity","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/BleachBypassShader.js"],"sourcesContent":["\n/**\n * @module BleachBypassShader\n * @three_import import { BleachBypassShader } from 'three/addons/shaders/BleachBypassShader.js';\n */\n\n/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass] based on\n * [Nvidia Shader library]{@link http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst BleachBypassShader = {\n\n\tname: 'BleachBypassShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat lum = luminance( base.rgb );\n\t\t\tvec3 blend = vec3( lum );\n\n\t\t\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\n\n\t\t\tvec3 result1 = 2.0 * base.rgb * blend;\n\t\t\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\n\n\t\t\tvec3 newColor = mix( result1, result2, L );\n\n\t\t\tfloat A2 = opacity * base.a;\n\t\t\tvec3 mixRGB = A2 * newColor.rgb;\n\t\t\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\n\n\t\t\tgl_FragColor = vec4( mixRGB, base.a );\n\n\t\t}`\n\n};\n\nexport { BleachBypassShader };\n"],"mappings":"AAaA,MAAMA,mBAAqB,CAE1BC,KAAM,qBAENC,SAAU,CAETC,SAAY,CAAEC,MAAO,MACrBC,QAAW,CAAED,MAAO,IAIrBE,aAAwB,8JAWxBC,eAA0B,4pBAgClBP","ignoreList":[]}