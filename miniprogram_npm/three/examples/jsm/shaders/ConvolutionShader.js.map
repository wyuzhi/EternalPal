{"version":3,"file":"node_modules/three/examples/jsm/shaders/ConvolutionShader.js","names":["Vector2","ConvolutionShader","name","defines","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uniforms","tDiffuse","value","uImageIncrement","cKernel","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/ConvolutionShader.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * @module ConvolutionShader\n * @three_import import { ConvolutionShader } from 'three/addons/shaders/ConvolutionShader.js';\n */\n\n/**\n * Convolution shader ported from o3d sample to WebGL / GLSL.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst ConvolutionShader = {\n\n\tname: 'ConvolutionShader',\n\n\tdefines: {\n\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\n\t\t'KERNEL_SIZE_INT': '25'\n\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\n\t\t'cKernel': { value: [] }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 imageCoord = vUv;\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\t\t\timageCoord += uImageIncrement;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}`\n};\n\nexport { ConvolutionShader };\n"],"mappings":"OACCA,YACM,QAaP,MAAMC,kBAAoB,CAEzBC,KAAM,oBAENC,QAAS,CAERC,kBAAqB,OACrBC,gBAAmB,MAIpBC,SAAU,CAETC,SAAY,CAAEC,MAAO,MACrBC,gBAAmB,CAAED,MAAO,IAAIR,QAAS,WAAa,IACtDU,QAAW,CAAEF,MAAO,KAIrBG,aAAwB,6PAaxBC,eAA0B,kdA0BlBX","ignoreList":[]}