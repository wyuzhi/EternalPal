{"version":3,"file":"node_modules/three/examples/jsm/shaders/FilmShader.js","names":["FilmShader","name","uniforms","tDiffuse","value","time","intensity","grayscale","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/FilmShader.js"],"sourcesContent":["/**\n * @module FilmShader\n * @three_import import { FilmShader } from 'three/addons/shaders/FilmShader.js';\n */\n\n/**\n * TODO\n *\n * Used by {@link FilmPass}.\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst FilmShader = {\n\n\tname: 'FilmShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'time': { value: 0.0 },\n\t\t'intensity': { value: 0.5 },\n\t\t'grayscale': { value: false }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\t#include <common>\n\n\t\tuniform float intensity;\n\t\tuniform bool grayscale;\n\t\tuniform float time;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 base = texture2D( tDiffuse, vUv );\n\n\t\t\tfloat noise = rand( fract( vUv + time ) );\n\n\t\t\tvec3 color = base.rgb + base.rgb * clamp( 0.1 + noise, 0.0, 1.0 );\n\n\t\t\tcolor = mix( base.rgb, color, intensity );\n\n\t\t\tif ( grayscale ) {\n\n\t\t\t\tcolor = vec3( luminance( color ) ); // assuming linear-srgb\n\n\t\t\t}\n\n\t\t\tgl_FragColor = vec4( color, base.a );\n\n\t\t}`,\n\n};\n\nexport { FilmShader };\n"],"mappings":"AAaA,MAAMA,WAAa,CAElBC,KAAM,aAENC,SAAU,CAETC,SAAY,CAAEC,MAAO,MACrBC,KAAQ,CAAED,MAAO,GACjBE,UAAa,CAAEF,MAAO,IACtBG,UAAa,CAAEH,OAAO,IAIvBI,aAAwB,8JAWxBC,eAA0B,slBAkClBT","ignoreList":[]}