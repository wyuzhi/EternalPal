{"version":3,"file":"node_modules/three/examples/jsm/shaders/MirrorShader.js","names":["MirrorShader","name","uniforms","tDiffuse","value","side","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/MirrorShader.js"],"sourcesContent":["/**\n * @module MirrorShader\n * @three_import import { MirrorShader } from 'three/addons/shaders/MirrorShader.js';\n */\n\n/**\n * Copies half the input to the other half.\n *\n * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom).\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst MirrorShader = {\n\n\tname: 'MirrorShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'side': { value: 1 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform int side;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 p = vUv;\n\t\t\tif (side == 0){\n\t\t\t\tif (p.x > 0.5) p.x = 1.0 - p.x;\n\t\t\t}else if (side == 1){\n\t\t\t\tif (p.x < 0.5) p.x = 1.0 - p.x;\n\t\t\t}else if (side == 2){\n\t\t\t\tif (p.y < 0.5) p.y = 1.0 - p.y;\n\t\t\t}else if (side == 3){\n\t\t\t\tif (p.y > 0.5) p.y = 1.0 - p.y;\n\t\t\t}\n\t\t\tvec4 color = texture2D(tDiffuse, p);\n\t\t\tgl_FragColor = color;\n\n\t\t}`\n\n};\n\nexport { MirrorShader };\n"],"mappings":"AAaA,MAAMA,aAAe,CAEpBC,KAAM,eAENC,SAAU,CAETC,SAAY,CAAEC,MAAO,MACrBC,KAAQ,CAAED,MAAO,IAIlBE,aAAwB,8JAWxBC,eAA0B,ufA0BlBP","ignoreList":[]}