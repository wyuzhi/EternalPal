{"version":3,"file":"node_modules/three/examples/jsm/shaders/NormalMapShader.js","names":["Vector2","NormalMapShader","name","uniforms","heightMap","value","resolution","scale","height","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/NormalMapShader.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * @module NormalMapShader\n * @three_import import { NormalMapShader } from 'three/addons/shaders/NormalMapShader.js';\n */\n\n/**\n * Normal map shader, compute normals from heightmap.\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst NormalMapShader = {\n\n\tname: 'NormalMapShader',\n\n\tuniforms: {\n\n\t\t'heightMap': { value: null },\n\t\t'resolution': { value: new Vector2( 512, 512 ) },\n\t\t'scale': { value: new Vector2( 1, 1 ) },\n\t\t'height': { value: 0.05 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float height;\n\t\tuniform vec2 resolution;\n\t\tuniform sampler2D heightMap;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tfloat val = texture2D( heightMap, vUv ).x;\n\n\t\t\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\n\t\t\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\n\n\t\t\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\n\n\t\t}`\n\n};\n\nexport { NormalMapShader };\n"],"mappings":"OACCA,YACM,QAYP,MAAMC,gBAAkB,CAEvBC,KAAM,kBAENC,SAAU,CAETC,UAAa,CAAEC,MAAO,MACtBC,WAAc,CAAED,MAAO,IAAIL,QAAS,IAAK,MACzCO,MAAS,CAAEF,MAAO,IAAIL,QAAS,EAAG,IAClCQ,OAAU,CAAEH,MAAO,MAIpBI,aAAwB,8JAWxBC,eAA0B,0eAqBlBT","ignoreList":[]}