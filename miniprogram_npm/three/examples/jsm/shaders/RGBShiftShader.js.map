{"version":3,"file":"node_modules/three/examples/jsm/shaders/RGBShiftShader.js","names":["RGBShiftShader","name","uniforms","tDiffuse","value","amount","angle","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/RGBShiftShader.js"],"sourcesContent":["/**\n * @module RGBShiftShader\n * @three_import import { RGBShiftShader } from 'three/addons/shaders/RGBShiftShader.js';\n */\n\n/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from https://web.archive.org/web/20090820185047/http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / https://web.archive.org/web/20090810054752/http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst RGBShiftShader = {\n\n\tname: 'RGBShiftShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'amount': { value: 0.005 },\n\t\t'angle': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float amount;\n\t\tuniform float angle;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n\t\t\tvec4 cr = texture2D(tDiffuse, vUv + offset);\n\t\t\tvec4 cga = texture2D(tDiffuse, vUv);\n\t\t\tvec4 cb = texture2D(tDiffuse, vUv - offset);\n\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\n\t\t}`\n\n};\n\nexport { RGBShiftShader };\n"],"mappings":"AAiBA,MAAMA,eAAiB,CAEtBC,KAAM,iBAENC,SAAU,CAETC,SAAY,CAAEC,MAAO,MACrBC,OAAU,CAAED,MAAO,MACnBE,MAAS,CAAEF,MAAO,IAInBG,aAAwB,8JAWxBC,eAA0B,maAoBlBR","ignoreList":[]}