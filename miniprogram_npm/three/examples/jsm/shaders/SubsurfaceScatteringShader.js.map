{"version":3,"file":"node_modules/three/examples/jsm/shaders/SubsurfaceScatteringShader.js","names":["Color","ShaderChunk","ShaderLib","UniformsUtils","replaceAll","string","find","replace","split","join","meshphong_frag_head","slice","indexOf","meshphong_frag_body","SubsurfaceScatteringShader","name","uniforms","merge","thicknessMap","value","thicknessColor","thicknessDistortion","thicknessAmbient","thicknessAttenuation","thicknessPower","thicknessScale","vertexShader","fragmentShader"],"sources":["node_modules/three/examples/jsm/shaders/SubsurfaceScatteringShader.js"],"sourcesContent":["import {\n\tColor,\n\tShaderChunk,\n\tShaderLib,\n\tUniformsUtils\n} from 'three';\n\nfunction replaceAll( string, find, replace ) {\n\n\treturn string.split( find ).join( replace );\n\n}\n\nconst meshphong_frag_head = ShaderChunk[ 'meshphong_frag' ].slice( 0, ShaderChunk[ 'meshphong_frag' ].indexOf( 'void main() {' ) );\nconst meshphong_frag_body = ShaderChunk[ 'meshphong_frag' ].slice( ShaderChunk[ 'meshphong_frag' ].indexOf( 'void main() {' ) );\n\n/**\n * @module SubsurfaceScatteringShader\n * @three_import import { SubsurfaceScatteringShader } from 'three/addons/shaders/SubsurfaceScatteringShader.js';\n */\n\n/**\n * Subsurface Scattering shader.\n *\n * Based on GDC 2011 â€“ [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}\n *\n * @constant\n * @type {ShaderMaterial~Shader}\n */\nconst SubsurfaceScatteringShader = {\n\n\tname: 'SubsurfaceScatteringShader',\n\n\tuniforms: UniformsUtils.merge( [\n\t\tShaderLib[ 'phong' ].uniforms,\n\t\t{\n\t\t\t'thicknessMap': { value: null },\n\t\t\t'thicknessColor': { value: new Color( 0xffffff ) },\n\t\t\t'thicknessDistortion': { value: 0.1 },\n\t\t\t'thicknessAmbient': { value: 0.0 },\n\t\t\t'thicknessAttenuation': { value: 0.1 },\n\t\t\t'thicknessPower': { value: 2.0 },\n\t\t\t'thicknessScale': { value: 10.0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: [\n\t\t'#define USE_UV',\n\t\tShaderChunk[ 'meshphong_vert' ],\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'#define USE_UV',\n\t\t'#define SUBSURFACE',\n\n\t\tmeshphong_frag_head,\n\n\t\t'uniform sampler2D thicknessMap;',\n\t\t'uniform float thicknessPower;',\n\t\t'uniform float thicknessScale;',\n\t\t'uniform float thicknessDistortion;',\n\t\t'uniform float thicknessAmbient;',\n\t\t'uniform float thicknessAttenuation;',\n\t\t'uniform vec3 thicknessColor;',\n\n\t\t'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {',\n\t\t'\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;',\n\t\t'\tvec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));',\n\t\t'\tfloat scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;',\n\t\t'\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;',\n\t\t'\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;',\n\t\t'}',\n\n\t\tmeshphong_frag_body.replace( '#include <lights_fragment_begin>',\n\n\t\t\treplaceAll(\n\t\t\t\tShaderChunk[ 'lights_fragment_begin' ],\n\t\t\t\t'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',\n\t\t\t\t[\n\t\t\t\t\t'RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );',\n\n\t\t\t\t\t'#if defined( SUBSURFACE ) && defined( USE_UV )',\n\t\t\t\t\t' RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);',\n\t\t\t\t\t'#endif',\n\t\t\t\t].join( '\\n' )\n\t\t\t),\n\n\t\t),\n\n\t].join( '\\n' ),\n\n};\n\nexport { SubsurfaceScatteringShader };\n"],"mappings":"OACCA,MACAC,YACAC,UACAC,kBACM,QAEP,SAASC,WAAYC,EAAQC,EAAMC,GAElC,OAAOF,EAAOG,MAAOF,GAAOG,KAAMF,EAEnC,CAEA,MAAMG,oBAAsBT,YAA8B,eAAEU,MAAO,EAAGV,YAA8B,eAAEW,QAAS,kBACzGC,oBAAsBZ,YAA8B,eAAEU,MAAOV,YAA8B,eAAEW,QAAS,kBAetGE,2BAA6B,CAElCC,KAAM,6BAENC,SAAUb,cAAcc,MAAO,CAC9Bf,UAAmB,MAAEc,SACrB,CACCE,aAAgB,CAAEC,MAAO,MACzBC,eAAkB,CAAED,MAAO,IAAInB,MAAO,WACtCqB,oBAAuB,CAAEF,MAAO,IAChCG,iBAAoB,CAAEH,MAAO,GAC7BI,qBAAwB,CAAEJ,MAAO,IACjCK,eAAkB,CAAEL,MAAO,GAC3BM,eAAkB,CAAEN,MAAO,OAK7BO,aAAc,CACb,iBACAzB,YAA8B,gBAC7BQ,KAAM,MAERkB,eAAgB,CACf,iBACA,qBAEAjB,oBAEA,kCACA,gCACA,gCACA,qCACA,kCACA,sCACA,+BAEA,6PACA,qEACA,qGACA,iHACA,0EACA,+FACA,IAEAG,oBAAoBN,QAAS,mCAE5BH,WACCH,YAAqC,sBACrC,kIACA,CACC,kIAEA,iDACA,uIACA,UACCQ,KAAM,SAKTA,KAAM,cAIAK","ignoreList":[]}