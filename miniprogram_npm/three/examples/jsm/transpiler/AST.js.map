{"version":3,"file":"node_modules/three/examples/jsm/transpiler/AST.js","names":["toFloatType","ASTNode","constructor","this","isASTNode","linker","reference","accesses","assignments","parent","isNumericExpression","hasAssignment","isAssignment","getType","type","getParent","parents","push","initialize","key","Array","isArray","array","item","Comment","comment","super","isComment","Program","body","isProgram","VariableDeclaration","name","value","next","immutable","isVariableDeclaration","Uniform","isUniform","Varying","isVarying","FunctionParameter","qualifier","isFunctionParameter","FunctionDeclaration","params","isFunctionDeclaration","Expression","expression","isExpression","Ternary","cond","left","right","isTernary","Operator","isOperator","test","leftType","rightType","Unary","after","isUnary","isNumber","Number","String","isString","Conditional","elseConditional","isConditional","FunctionCall","isFunctionCall","Return","isReturn","Discard","isDiscard","Continue","isContinue","Break","isBreak","Accessor","property","isAccessor","StaticElement","isStaticElement","DynamicElement","isDynamicElement","AccessorElements","object","elements","isAccessorElements","For","initialization","condition","afterthought","isFor","While","isWhile","Switch","discriminant","cases","isSwitch","SwitchCase","conditions","isDefault","isSwitchCase"],"sources":["node_modules/three/examples/jsm/transpiler/AST.js"],"sourcesContent":["import { toFloatType } from './TranspilerUtils.js';\n\nexport class ASTNode {\n\n\tconstructor() {\n\n\t\tthis.isASTNode = true;\n\n\t\tthis.linker = {\n\t\t\treference: null,\n\t\t\taccesses: [],\n\t\t\tassignments: []\n\t\t};\n\n\t\tthis.parent = null;\n\n\t}\n\n\tget isNumericExpression() {\n\n\t\treturn false;\n\n\t}\n\n\tget hasAssignment() {\n\n\t\tif ( this.isAssignment === true ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tif ( this.parent === null ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.parent.hasAssignment;\n\n\t}\n\n\tgetType() {\n\n\t\treturn this.type || null;\n\n\t}\n\n\tgetParent( parents = [] ) {\n\n\t\tif ( this.parent === null ) {\n\n\t\t\treturn parents;\n\n\t\t}\n\n\t\tparents.push( this.parent );\n\n\t\treturn this.parent.getParent( parents );\n\n\t}\n\n\tinitialize() {\n\n\t\tfor ( const key in this ) {\n\n\t\t\tif ( this[ key ] && this[ key ].isASTNode ) {\n\n\t\t\t\tthis[ key ].parent = this;\n\n\t\t\t} else if ( Array.isArray( this[ key ] ) ) {\n\n\t\t\t\tconst array = this[ key ];\n\n\t\t\t\tfor ( const item of array ) {\n\n\t\t\t\t\tif ( item && item.isASTNode ) {\n\n\t\t\t\t\t\titem.parent = this;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport class Comment extends ASTNode {\n\n\tconstructor( comment ) {\n\n\t\tsuper();\n\n\t\tthis.comment = comment;\n\n\t\tthis.isComment = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\n\nexport class Program extends ASTNode {\n\n\tconstructor( body = [] ) {\n\n\t\tsuper();\n\n\t\tthis.body = body;\n\n\t\tthis.isProgram = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class VariableDeclaration extends ASTNode {\n\n\tconstructor( type, name, value = null, next = null, immutable = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t\tthis.next = next;\n\n\t\tthis.immutable = immutable;\n\n\t\tthis.isVariableDeclaration = true;\n\n\t\tthis.initialize();\n\n\t}\n\n\tget isAssignment() {\n\n\t\treturn this.value !== null;\n\n\t}\n\n}\n\nexport class Uniform extends ASTNode {\n\n\tconstructor( type, name ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\n\t\tthis.isUniform = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Varying extends ASTNode {\n\n\tconstructor( type, name ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\n\t\tthis.isVarying = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class FunctionParameter extends ASTNode {\n\n\tconstructor( type, name, qualifier = null, immutable = true ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\t\tthis.qualifier = qualifier;\n\t\tthis.immutable = immutable;\n\n\t\tthis.isFunctionParameter = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class FunctionDeclaration extends ASTNode {\n\n\tconstructor( type, name, params = [], body = [] ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.body = body;\n\n\t\tthis.isFunctionDeclaration = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Expression extends ASTNode {\n\n\tconstructor( expression ) {\n\n\t\tsuper();\n\n\t\tthis.expression = expression;\n\n\t\tthis.isExpression = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Ternary extends ASTNode {\n\n\tconstructor( cond, left, right ) {\n\n\t\tsuper();\n\n\t\tthis.cond = cond;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\n\t\tthis.isTernary = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Operator extends ASTNode {\n\n\tconstructor( type, left, right ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.left = left;\n\t\tthis.right = right;\n\n\t\tthis.isOperator = true;\n\n\t\tthis.initialize();\n\n\t}\n\n\tget isAssignment() {\n\n\t\treturn /^(=|\\+=|-=|\\*=|\\/=|%=|<<=|>>=|>>>=|&=|\\^=|\\|=)$/.test( this.type );\n\n\t}\n\n\tget isNumericExpression() {\n\n\t\tif ( this.left.isNumericExpression && this.right.isNumericExpression ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgetType() {\n\n\t\tconst leftType = this.left.getType();\n\t\tconst rightType = this.right.getType();\n\n\t\tif ( leftType === rightType ) {\n\n\t\t\treturn leftType;\n\n\t\t} else if ( toFloatType( leftType ) === toFloatType( rightType ) ) {\n\n\t\t\treturn toFloatType( leftType );\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n}\n\n\nexport class Unary extends ASTNode {\n\n\tconstructor( type, expression, after = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.expression = expression;\n\t\tthis.after = after;\n\n\t\tthis.isUnary = true;\n\n\t\tthis.initialize();\n\n\t}\n\n\tget isAssignment() {\n\n\t\treturn /^(\\+\\+|--)$/.test( this.type );\n\n\t}\n\n\tget isNumericExpression() {\n\n\t\tif ( this.expression.isNumber ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport class Number extends ASTNode {\n\n\tconstructor( value, type = 'float' ) {\n\n\t\tsuper();\n\n\t\tthis.type = type;\n\t\tthis.value = value;\n\n\t\tthis.isNumber = true;\n\n\t\tthis.initialize();\n\n\t}\n\n\tget isNumericExpression() {\n\n\t\treturn true;\n\n\t}\n\n}\n\nexport class String extends ASTNode {\n\n\tconstructor( value ) {\n\n\t\tsuper();\n\n\t\tthis.value = value;\n\n\t\tthis.isString = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\n\nexport class Conditional extends ASTNode {\n\n\tconstructor( cond = null, body = [] ) {\n\n\t\tsuper();\n\n\t\tthis.cond = cond;\n\t\tthis.body = body;\n\t\tthis.elseConditional = null;\n\n\t\tthis.isConditional = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class FunctionCall extends ASTNode {\n\n\tconstructor( name, params = [] ) {\n\n\t\tsuper();\n\n\t\tthis.name = name;\n\t\tthis.params = params;\n\n\t\tthis.isFunctionCall = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Return extends ASTNode {\n\n\tconstructor( value ) {\n\n\t\tsuper();\n\n\t\tthis.value = value;\n\n\t\tthis.isReturn = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Discard extends ASTNode {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isDiscard = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Continue extends ASTNode {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isContinue = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Break extends ASTNode {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBreak = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class Accessor extends ASTNode {\n\n\tconstructor( property ) {\n\n\t\tsuper();\n\n\t\tthis.property = property;\n\n\t\tthis.isAccessor = true;\n\n\t\tthis.initialize();\n\n\t}\n\n\tgetType() {\n\n\t\tif ( this.linker.reference ) {\n\n\t\t\treturn this.linker.reference.getType();\n\n\t\t}\n\n\t\treturn super.getType();\n\n\t}\n\n}\n\nexport class StaticElement extends ASTNode {\n\n\tconstructor( value ) {\n\n\t\tsuper();\n\n\t\tthis.value = value;\n\n\t\tthis.isStaticElement = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class DynamicElement extends ASTNode {\n\n\tconstructor( value ) {\n\n\t\tsuper();\n\n\t\tthis.value = value;\n\n\t\tthis.isDynamicElement = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class AccessorElements extends ASTNode {\n\n\tconstructor( object, elements = [] ) {\n\n\t\tsuper();\n\n\t\tthis.object = object;\n\t\tthis.elements = elements;\n\n\t\tthis.isAccessorElements = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class For extends ASTNode {\n\n\tconstructor( initialization, condition, afterthought, body = [] ) {\n\n\t\tsuper();\n\n\t\tthis.initialization = initialization;\n\t\tthis.condition = condition;\n\t\tthis.afterthought = afterthought;\n\t\tthis.body = body;\n\n\t\tthis.isFor = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class While extends ASTNode {\n\n\tconstructor( condition, body = [] ) {\n\n\t\tsuper();\n\n\t\tthis.condition = condition;\n\t\tthis.body = body;\n\n\t\tthis.isWhile = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\n\nexport class Switch extends ASTNode {\n\n\tconstructor( discriminant, cases ) {\n\n\t\tsuper();\n\n\t\tthis.discriminant = discriminant;\n\t\tthis.cases = cases;\n\n\t\tthis.isSwitch = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n\nexport class SwitchCase extends ASTNode {\n\n\tconstructor( body, conditions = null ) {\n\n\t\tsuper();\n\n\t\tthis.body = body;\n\t\tthis.conditions = conditions;\n\n\t\tthis.isDefault = conditions === null ? true : false;\n\t\tthis.isSwitchCase = true;\n\n\t\tthis.initialize();\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]}