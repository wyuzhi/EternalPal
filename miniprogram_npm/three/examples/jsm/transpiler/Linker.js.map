{"version":3,"file":"node_modules/three/examples/jsm/transpiler/Linker.js","names":["Block","constructor","node","parent","this","properties","setProperty","name","value","getProperty","undefined","Linker","block","addBlock","removeBlock","Error","processVariables","processExpression","processUniform","processVarying","evalProperty","property","isAccessor","linker","reference","accesses","push","isNumber","isString","isOperator","left","right","isAssignment","assignments","isFunctionCall","param","params","isReturn","isDiscard","isBreak","isContinue","isAccessorElements","object","element","elements","isDynamicElement","isStaticElement","isFor","isWhile","processForWhile","isSwitch","processSwitch","isVariableDeclaration","isUniform","isVarying","isTernary","cond","isConditional","processConditional","isUnary","expression","hasAssignment","after","processBody","body","statement","current","elseConditional","initialization","condition","afterthought","switchNode","discriminant","switchCase","cases","isDefault","conditions","processFunction","process","ast","isFunctionDeclaration"],"sources":["node_modules/three/examples/jsm/transpiler/Linker.js"],"sourcesContent":["class Block {\n\n\tconstructor( node, parent = null ) {\n\n\t\tthis.node = node;\n\t\tthis.parent = parent;\n\n\t\tthis.properties = {};\n\n\t}\n\n\tsetProperty( name, value ) {\n\n\t\tthis.properties[ name ] = value;\n\n\t}\n\n\tgetProperty( name ) {\n\n\t\tlet value = this.properties[ name ];\n\n\t\tif ( value === undefined && this.parent !== null ) {\n\n\t\t\tvalue = this.parent.getProperty( name );\n\n\t\t}\n\n\t\treturn value;\n\n\t}\n\n}\n\nclass Linker {\n\n\tconstructor() {\n\n\t\tthis.block = null;\n\n\t}\n\n\taddBlock( node ) {\n\n\t\tthis.block = new Block( node, this.block );\n\n\t}\n\n\tremoveBlock( node ) {\n\n\t\tif ( this.block === null || this.block.node !== node ) {\n\n\t\t\tthrow new Error( 'No block to remove or block mismatch.' );\n\n\t\t}\n\n\t\tthis.block = this.block.parent;\n\n\t}\n\n\tprocessVariables( node ) {\n\n\t\tthis.block.setProperty( node.name, node );\n\n\t\tif ( node.value ) {\n\n\t\t\tthis.processExpression( node.value );\n\n\t\t}\n\n\t}\n\n\tprocessUniform( node ) {\n\n\t\tthis.block.setProperty( node.name, node );\n\n\t}\n\n\tprocessVarying( node ) {\n\n\t\tthis.block.setProperty( node.name, node );\n\n\t}\n\n\tevalProperty( node ) {\n\n\t\tlet property = '';\n\n\t\tif ( node.isAccessor ) {\n\n\t\t\tproperty += node.property;\n\n\t\t}\n\n\t\treturn property;\n\n\t}\n\n\tprocessExpression( node ) {\n\n\t\tif ( node.isAccessor ) {\n\n\t\t\tconst property = this.block.getProperty( this.evalProperty( node ) );\n\n\t\t\tif ( property ) {\n\n\t\t\t\tnode.linker.reference = property;\n\n\t\t\t\tproperty.linker.accesses.push( node );\n\n\t\t\t}\n\n\t\t} else if ( node.isNumber || node.isString ) {\n\n\t\t\t// Process primitive values\n\n\t\t} else if ( node.isOperator ) {\n\n\t\t\tthis.processExpression( node.left );\n\t\t\tthis.processExpression( node.right );\n\n\t\t\tif ( node.isAssignment ) {\n\n\t\t\t\tconst property = this.block.getProperty( this.evalProperty( node.left ) );\n\n\t\t\t\tif ( property ) {\n\n\t\t\t\t\tproperty.linker.assignments.push( node );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( node.isFunctionCall ) {\n\n\t\t\tfor ( const param of node.params ) {\n\n\t\t\t\tthis.processExpression( param );\n\n\t\t\t}\n\n\t\t} else if ( node.isReturn ) {\n\n\t\t\tif ( node.value ) this.processExpression( node.value );\n\n\t\t} else if ( node.isDiscard || node.isBreak || node.isContinue ) {\n\n\t\t\t// Process control flow\n\n\t\t} else if ( node.isAccessorElements ) {\n\n\t\t\tthis.processExpression( node.object );\n\n\t\t\tfor ( const element of node.elements ) {\n\n\t\t\t\tthis.processExpression( element.value );\n\n\t\t\t}\n\n\t\t} else if ( node.isDynamicElement || node.isStaticElement ) {\n\n\t\t\tthis.processExpression( node.value );\n\n\t\t} else if ( node.isFor || node.isWhile ) {\n\n\t\t\tthis.processForWhile( node );\n\n\t\t} else if ( node.isSwitch ) {\n\n\t\t\tthis.processSwitch( node );\n\n\t\t} else if ( node.isVariableDeclaration ) {\n\n\t\t\tthis.processVariables( node );\n\n\t\t} else if ( node.isUniform ) {\n\n\t\t\tthis.processUniform( node );\n\n\t\t} else if ( node.isVarying ) {\n\n\t\t\tthis.processVarying( node );\n\n\t\t} else if ( node.isTernary ) {\n\n\t\t\tthis.processExpression( node.cond );\n\t\t\tthis.processExpression( node.left );\n\t\t\tthis.processExpression( node.right );\n\n\t\t} else if ( node.isConditional ) {\n\n\t\t\tthis.processConditional( node );\n\n\t\t} else if ( node.isUnary ) {\n\n\t\t\tthis.processExpression( node.expression );\n\n\t\t\tif ( node.isAssignment ) {\n\n\t\t\t\tif ( node.parent.hasAssignment !== true ) {\n\n\t\t\t\t\t// optimize increment/decrement operator\n\t\t\t\t\t// to avoid creating a new variable\n\n\t\t\t\t\tnode.after = false;\n\n\t\t\t\t}\n\n\t\t\t\tconst property = this.block.getProperty( this.evalProperty( node.expression ) );\n\n\t\t\t\tif ( property ) {\n\n\t\t\t\t\tproperty.linker.assignments.push( node );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprocessBody( body ) {\n\n\t\tfor ( const statement of body ) {\n\n\t\t\tthis.processExpression( statement );\n\n\t\t}\n\n\t}\n\n\tprocessConditional( node ) {\n\n\t\tthis.processExpression( node.cond );\n\t\tthis.processBody( node.body );\n\n\t\tlet current = node;\n\n\t\twhile ( current.elseConditional ) {\n\n\t\t\tif ( current.elseConditional.cond ) {\n\n\t\t\t\tthis.processExpression( current.elseConditional.cond );\n\n\t\t\t}\n\n\t\t\tthis.processBody( current.elseConditional.body );\n\n\t\t\tcurrent = current.elseConditional;\n\n\t\t}\n\n\t}\n\n\tprocessForWhile( node ) {\n\n\t\tif ( node.initialization ) this.processExpression( node.initialization );\n\t\tif ( node.condition ) this.processExpression( node.condition );\n\t\tif ( node.afterthought ) this.processExpression( node.afterthought );\n\n\t\tthis.processBody( node.body );\n\n\t}\n\n\tprocessSwitch( switchNode ) {\n\n\t\tthis.processExpression( switchNode.discriminant );\n\n\t\tfor ( const switchCase of switchNode.cases ) {\n\n\t\t\tif ( switchCase.isDefault !== true ) {\n\n\t\t\t\tfor ( const condition of switchCase.conditions ) {\n\n\t\t\t\t\tthis.processExpression( condition );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.processBody( switchCase.body );\n\n\t\t}\n\n\t}\n\n\tprocessFunction( node ) {\n\n\t\tthis.addBlock( node );\n\n\t\tfor ( const param of node.params ) {\n\n\t\t\tthis.block.setProperty( param.name, param );\n\n\t\t}\n\n\t\tthis.processBody( node.body );\n\n\t\tthis.removeBlock( node );\n\n\t}\n\n\tprocess( ast ) {\n\n\t\tthis.addBlock( ast );\n\n\t\tfor ( const statement of ast.body ) {\n\n\t\t\tif ( statement.isFunctionDeclaration ) {\n\n\t\t\t\tthis.processFunction( statement );\n\n\t\t\t} else {\n\n\t\t\t\tthis.processExpression( statement );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.removeBlock( ast );\n\n\t}\n\n}\n\nexport default Linker;\n"],"mappings":"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","ignoreList":[]}