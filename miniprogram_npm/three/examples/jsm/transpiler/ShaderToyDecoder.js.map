{"version":3,"file":"node_modules/three/examples/jsm/transpiler/ShaderToyDecoder.js","names":["Return","VariableDeclaration","Accessor","GLSLDecoder","ShaderToyDecoder","constructor","super","this","addPolyfill","parseFunction","node","name","params","type","layout","fragColor","subNode","body","isReturn","value","unshift","push"],"sources":["node_modules/three/examples/jsm/transpiler/ShaderToyDecoder.js"],"sourcesContent":["import { Return, VariableDeclaration, Accessor } from './AST.js';\nimport GLSLDecoder from './GLSLDecoder.js';\n\nclass ShaderToyDecoder extends GLSLDecoder {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.addPolyfill( 'iTime', 'float iTime = time;' );\n\t\tthis.addPolyfill( 'iResolution', 'vec2 iResolution = screenSize;' );\n\t\tthis.addPolyfill( 'fragCoord', 'vec3 fragCoord = vec3( screenCoordinate.x, screenSize.y - screenCoordinate.y, screenCoordinate.z );' );\n\n\t}\n\n\tparseFunction() {\n\n\t\tconst node = super.parseFunction();\n\n\t\tif ( node.name === 'mainImage' ) {\n\n\t\t\tnode.params = []; // remove default parameters\n\t\t\tnode.type = 'vec4';\n\t\t\tnode.layout = false; // for now\n\n\t\t\tconst fragColor = new Accessor( 'fragColor' );\n\n\t\t\tfor ( const subNode of node.body ) {\n\n\t\t\t\tif ( subNode.isReturn ) {\n\n\t\t\t\t\tsubNode.value = fragColor;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnode.body.unshift( new VariableDeclaration( 'vec4', 'fragColor' ) );\n\t\t\tnode.body.push( new Return( fragColor ) );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nexport default ShaderToyDecoder;\n"],"mappings":"OAASA,OAAQC,oBAAqBC,aAAgB,kBAC/CC,gBAAiB,mBAExB,MAAMC,yBAAyBD,YAE9B,WAAAE,GAECC,QAEAC,KAAKC,YAAa,QAAS,uBAC3BD,KAAKC,YAAa,cAAe,kCACjCD,KAAKC,YAAa,YAAa,sGAEhC,CAEA,aAAAC,GAEC,MAAMC,EAAOJ,MAAMG,gBAEnB,GAAmB,cAAdC,EAAKC,KAAuB,CAEhCD,EAAKE,OAAS,GACdF,EAAKG,KAAO,OACZH,EAAKI,QAAS,EAEd,MAAMC,EAAY,IAAIb,SAAU,aAEhC,IAAM,MAAMc,KAAWN,EAAKO,KAEtBD,EAAQE,WAEZF,EAAQG,MAAQJ,GAMlBL,EAAKO,KAAKG,QAAS,IAAInB,oBAAqB,OAAQ,cACpDS,EAAKO,KAAKI,KAAM,IAAIrB,OAAQe,GAE7B,CAEA,OAAOL,CAER,iBAIcN","ignoreList":[]}