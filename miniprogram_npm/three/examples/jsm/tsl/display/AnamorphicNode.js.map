{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/AnamorphicNode.js","names":["RenderTarget","Vector2","TempNode","QuadMesh","NodeMaterial","RendererUtils","nodeObject","Fn","float","NodeUpdateType","uv","passTexture","uniform","convertToTexture","vec2","vec3","Loop","mix","luminance","_quadMesh","_rendererState","AnamorphicNode","type","constructor","textureNode","thresholdNode","scaleNode","samples","super","this","colorNode","resolution","_renderTarget","depthBuffer","texture","name","_invSize","_textureNode","updateBeforeType","FRAME","getTextureNode","setSize","width","height","value","set","Math","max","round","x","y","updateBefore","frame","renderer","resetRendererState","map","currentTexture","material","_material","image","setRenderTarget","render","restoreRendererState","setup","builder","uvNode","anamorph","halfSamples","floor","total","toVar","start","end","i","softness","abs","div","oneMinus","color","sample","sampleTexture","add","mul","pass","threshold","sub","addAssign","fragmentNode","getNodeProperties","dispose","anamorphic","node","scale"],"sources":["node_modules/three/examples/jsm/tsl/display/AnamorphicNode.js"],"sourcesContent":["import { RenderTarget, Vector2, TempNode, QuadMesh, NodeMaterial, RendererUtils } from 'three/webgpu';\nimport { nodeObject, Fn, float, NodeUpdateType, uv, passTexture, uniform, convertToTexture, vec2, vec3, Loop, mix, luminance } from 'three/tsl';\n\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nlet _rendererState;\n\n/**\n * Post processing node for adding an anamorphic flare effect.\n *\n * @augments TempNode\n * @three_import import { anamorphic } from 'three/addons/tsl/display/AnamorphicNode.js';\n */\nclass AnamorphicNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'AnamorphicNode';\n\n\t}\n\n\t/**\n\t * Constructs a new anamorphic node.\n\t *\n\t * @param {TextureNode} textureNode - The texture node that represents the input of the effect.\n\t * @param {Node<float>} thresholdNode - The threshold is one option to control the intensity and size of the effect.\n\t * @param {Node<float>} scaleNode - Defines the vertical scale of the flares.\n\t * @param {number} samples - More samples result in larger flares and a more expensive runtime behavior.\n\t */\n\tconstructor( textureNode, thresholdNode, scaleNode, samples ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The texture node that represents the input of the effect.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The threshold is one option to control the intensity and size of the effect.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.thresholdNode = thresholdNode;\n\n\t\t/**\n\t\t * Defines the vertical scale of the flares.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.scaleNode = scaleNode;\n\n\t\t/**\n\t\t * The color of the flares.\n\t\t *\n\t\t * @type {Node<vec3>}\n\t\t */\n\t\tthis.colorNode = vec3( 0.1, 0.0, 1.0 );\n\n\t\t/**\n\t\t * More samples result in larger flares and a more expensive runtime behavior.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.samples = samples;\n\n\t\t/**\n\t\t * The resolution scale.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.resolution = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * The internal render target of the effect.\n\t\t *\n\t\t * @private\n\t\t * @type {RenderTarget}\n\t\t */\n\t\tthis._renderTarget = new RenderTarget( 1, 1, { depthBuffer: false } );\n\t\tthis._renderTarget.texture.name = 'anamorphic';\n\n\t\t/**\n\t\t * A uniform node holding the inverse resolution value.\n\t\t *\n\t\t * @private\n\t\t * @type {UniformNode<vec2>}\n\t\t */\n\t\tthis._invSize = uniform( new Vector2() );\n\n\t\t/**\n\t\t * The result of the effect is represented as a separate texture node.\n\t\t *\n\t\t * @private\n\t\t * @type {PassTextureNode}\n\t\t */\n\t\tthis._textureNode = passTexture( this, this._renderTarget.texture );\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders\n\t\t * its effect once per frame in `updateBefore()`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * Returns the result of the effect as a texture node.\n\t *\n\t * @return {PassTextureNode} A texture node that represents the result of the effect.\n\t */\n\tgetTextureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\t/**\n\t * Sets the size of the effect.\n\t *\n\t * @param {number} width - The width of the effect.\n\t * @param {number} height - The height of the effect.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\n\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\n\n\t\tthis._renderTarget.setSize( width, height );\n\n\t}\n\n\t/**\n\t * This method is used to render the effect once per frame.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\t_rendererState = RendererUtils.resetRendererState( renderer, _rendererState );\n\n\t\t//\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst map = textureNode.value;\n\n\t\tthis._renderTarget.texture.type = map.type;\n\n\t\tconst currentTexture = textureNode.value;\n\n\t\t_quadMesh.material = this._material;\n\n\t\tthis.setSize( map.image.width, map.image.height );\n\n\t\t// render\n\n\t\trenderer.setRenderTarget( this._renderTarget );\n\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\ttextureNode.value = currentTexture;\n\n\t\tRendererUtils.restoreRendererState( renderer, _rendererState );\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {PassTextureNode}\n\t */\n\tsetup( builder ) {\n\n\t\tconst textureNode = this.textureNode;\n\t\tconst uvNode = textureNode.uvNode || uv();\n\n\t\tconst sampleTexture = ( uv ) => textureNode.sample( uv );\n\n\t\tconst threshold = ( color, threshold ) => mix( vec3( 0.0 ), color, luminance( color ).sub( threshold ).max( 0 ) );\n\n\t\tconst anamorph = Fn( () => {\n\n\t\t\tconst samples = this.samples;\n\t\t\tconst halfSamples = Math.floor( samples / 2 );\n\n\t\t\tconst total = vec3( 0 ).toVar();\n\n\t\t\tLoop( { start: - halfSamples, end: halfSamples }, ( { i } ) => {\n\n\t\t\t\tconst softness = float( i ).abs().div( halfSamples ).oneMinus();\n\n\t\t\t\tconst uv = vec2( uvNode.x.add( this._invSize.x.mul( i ).mul( this.scaleNode ) ), uvNode.y );\n\t\t\t\tconst color = sampleTexture( uv );\n\t\t\t\tconst pass = threshold( color, this.thresholdNode ).mul( softness );\n\n\t\t\t\ttotal.addAssign( pass );\n\n\t\t\t} );\n\n\t\t\treturn total.mul( this.colorNode );\n\n\t\t} );\n\n\t\t//\n\n\t\tconst material = this._material || ( this._material = new NodeMaterial() );\n\t\tmaterial.name = 'Anamorphic';\n\t\tmaterial.fragmentNode = anamorph();\n\n\t\t//\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tproperties.textureNode = textureNode;\n\n\t\t//\n\n\t\treturn this._textureNode;\n\n\t}\n\n\t/**\n\t * Frees internal resources. This method should be called\n\t * when the effect is no longer required.\n\t */\n\tdispose() {\n\n\t\tthis._renderTarget.dispose();\n\n\t}\n\n}\n\n/**\n * TSL function for creating an anamorphic flare effect.\n *\n * @tsl\n * @function\n * @param {TextureNode} node - The node that represents the input of the effect.\n * @param {Node<float> | number} [threshold=0.9] - The threshold is one option to control the intensity and size of the effect.\n * @param {Node<float> | number} [scale=3] - Defines the vertical scale of the flares.\n * @param {number} [samples=32] - More samples result in larger flares and a more expensive runtime behavior.\n * @returns {AnamorphicNode}\n */\nexport const anamorphic = ( node, threshold = .9, scale = 3, samples = 32 ) => nodeObject( new AnamorphicNode( convertToTexture( node ), nodeObject( threshold ), nodeObject( scale ), samples ) );\n\nexport default AnamorphicNode;\n"],"mappings":"OAASA,aAAcC,QAASC,SAAUC,SAAUC,aAAcC,kBAAqB,sBAC9EC,WAAYC,GAAIC,MAAOC,eAAgBC,GAAIC,YAAaC,QAASC,iBAAkBC,KAAMC,KAAMC,KAAMC,IAAKC,cAAiB,YAEpI,MAAMC,UAA0B,IAAIhB,SAEpC,IAAIiB,eAQJ,MAAMC,uBAAuBnB,SAE5B,eAAWoB,GAEV,MAAO,gBAER,CAUA,WAAAC,CAAaC,EAAaC,EAAeC,EAAWC,GAEnDC,MAAO,QAOPC,KAAKL,YAAcA,EAOnBK,KAAKJ,cAAgBA,EAOrBI,KAAKH,UAAYA,EAOjBG,KAAKC,UAAYf,KAAM,GAAK,EAAK,GAOjCc,KAAKF,QAAUA,EAOfE,KAAKE,WAAa,IAAI9B,QAAS,EAAG,GAQlC4B,KAAKG,cAAgB,IAAIhC,aAAc,EAAG,EAAG,CAAEiC,aAAa,IAC5DJ,KAAKG,cAAcE,QAAQC,KAAO,aAQlCN,KAAKO,SAAWxB,QAAS,IAAIX,SAQ7B4B,KAAKQ,aAAe1B,YAAakB,KAAMA,KAAKG,cAAcE,SAS1DL,KAAKS,iBAAmB7B,eAAe8B,KAExC,CAOA,cAAAC,GAEC,OAAOX,KAAKQ,YAEb,CAQA,OAAAI,CAASC,EAAOC,GAEfd,KAAKO,SAASQ,MAAMC,IAAK,EAAIH,EAAO,EAAIC,GAExCD,EAAQI,KAAKC,IAAKD,KAAKE,MAAON,EAAQb,KAAKE,WAAWkB,GAAK,GAC3DN,EAASG,KAAKC,IAAKD,KAAKE,MAAOL,EAASd,KAAKE,WAAWmB,GAAK,GAE7DrB,KAAKG,cAAcS,QAASC,EAAOC,EAEpC,CAOA,YAAAQ,CAAcC,GAEb,MAAMC,SAAEA,GAAaD,EAErBhC,eAAiBf,cAAciD,mBAAoBD,EAAUjC,gBAI7D,MAAMI,EAAcK,KAAKL,YACnB+B,EAAM/B,EAAYoB,MAExBf,KAAKG,cAAcE,QAAQZ,KAAOiC,EAAIjC,KAEtC,MAAMkC,EAAiBhC,EAAYoB,MAEnCzB,UAAUsC,SAAW5B,KAAK6B,UAE1B7B,KAAKY,QAASc,EAAII,MAAMjB,MAAOa,EAAII,MAAMhB,QAIzCU,EAASO,gBAAiB/B,KAAKG,eAE/Bb,UAAU0C,OAAQR,GAIlB7B,EAAYoB,MAAQY,EAEpBnD,cAAcyD,qBAAsBT,EAAUjC,eAE/C,CAQA,KAAA2C,CAAOC,GAEN,MAAMxC,EAAcK,KAAKL,YACnByC,EAASzC,EAAYyC,QAAUvD,KAM/BwD,EAAW3D,IAAI,KAEpB,MAAMoB,EAAUE,KAAKF,QACfwC,EAAcrB,KAAKsB,MAAOzC,EAAU,GAEpC0C,EAAQtD,KAAM,GAAIuD,QAcxB,OAZAtD,KAAM,CAAEuD,OAASJ,EAAaK,IAAKL,IAAe,EAAIM,QAErD,MAAMC,EAAWlE,MAAOiE,GAAIE,MAAMC,IAAKT,GAAcU,WAG/CC,EAhBc,CAAEpE,GAAQc,EAAYuD,OAAQrE,GAgBpCsE,CADHlE,KAAMmD,EAAOhB,EAAEgC,IAAKpD,KAAKO,SAASa,EAAEiC,IAAKT,GAAIS,IAAKrD,KAAKH,YAAeuC,EAAOf,IAElFiC,EAfU,EAAEL,EAAOM,IAAenE,IAAKF,KAAM,GAAO+D,EAAO5D,UAAW4D,GAAQO,IAAKD,GAAYrC,IAAK,IAe7FqC,CAAWN,EAAOjD,KAAKJ,eAAgByD,IAAKR,GAEzDL,EAAMiB,UAAWH,EAAM,IAIjBd,EAAMa,IAAKrD,KAAKC,UAAW,IAM7B2B,EAAW5B,KAAK6B,YAAe7B,KAAK6B,UAAY,IAAItD,cAC1DqD,EAAStB,KAAO,aAChBsB,EAAS8B,aAAerB,IASxB,OALmBF,EAAQwB,kBAAmB3D,MACnCL,YAAcA,EAIlBK,KAAKQ,YAEb,CAMA,OAAAoD,GAEC5D,KAAKG,cAAcyD,SAEpB,SAeM,MAAMC,WAAa,CAAEC,EAAMP,EAAY,GAAIQ,EAAQ,EAAGjE,EAAU,KAAQrB,WAAY,IAAIe,eAAgBR,iBAAkB8E,GAAQrF,WAAY8E,GAAa9E,WAAYsF,GAASjE,mBAExKN","ignoreList":[]}