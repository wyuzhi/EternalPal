{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/BleachBypass.js","names":["float","Fn","vec3","vec4","min","max","mix","luminance","bleach","color","opacity","base","lum","rgb","blend","L","mul","sub","result1","result2","oneMinus","newColor","A2","a","mixRGB","addAssign"],"sources":["node_modules/three/examples/jsm/tsl/display/BleachBypass.js"],"sourcesContent":["import { float, Fn, vec3, vec4, min, max, mix, luminance } from 'three/tsl';\n\n/**\n * Applies a bleach bypass effect to the given color node.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} color - The color node to apply the sepia for.\n * @param {Node<float>} [opacity=1] - Influences how strong the effect is blended with the original color.\n * @return {Node<vec4>} The updated color node.\n */\nexport const bleach = /*@__PURE__*/ Fn( ( [ color, opacity = 1 ] ) => {\n\n\tconst base = color;\n\tconst lum = luminance( base.rgb );\n\tconst blend = vec3( lum );\n\n\tconst L = min( 1.0, max( 0.0, float( 10.0 ).mul( lum.sub( 0.45 ) ) ) );\n\n\tconst result1 = blend.mul( base.rgb ).mul( 2.0 );\n\tconst result2 = float( 2.0 ).mul( blend.oneMinus() ).mul( base.rgb.oneMinus() ).oneMinus();\n\n\tconst newColor = mix( result1, result2, L );\n\n\tconst A2 = base.a.mul( opacity );\n\n\tconst mixRGB = A2.mul( newColor.rgb );\n\n\tmixRGB.addAssign( base.rgb.mul( A2.oneMinus() ) );\n\n\treturn vec4( mixRGB, base.a );\n\n} );\n"],"mappings":"OAASA,MAAOC,GAAIC,KAAMC,KAAMC,IAAKC,IAAKC,IAAKC,cAAiB,mBAWzD,MAAMC,OAAuBP,IAAI,EAAIQ,EAAOC,EAAU,MAE5D,MAAMC,EAAOF,EACPG,EAAML,UAAWI,EAAKE,KACtBC,EAAQZ,KAAMU,GAEdG,EAAIX,IAAK,EAAKC,IAAK,EAAKL,MAAO,IAAOgB,IAAKJ,EAAIK,IAAK,QAEpDC,EAAUJ,EAAME,IAAKL,EAAKE,KAAMG,IAAK,GACrCG,EAAUnB,MAAO,GAAMgB,IAAKF,EAAMM,YAAaJ,IAAKL,EAAKE,IAAIO,YAAaA,WAE1EC,EAAWf,IAAKY,EAASC,EAASJ,GAElCO,EAAKX,EAAKY,EAAEP,IAAKN,GAEjBc,EAASF,EAAGN,IAAKK,EAASR,KAIhC,OAFAW,EAAOC,UAAWd,EAAKE,IAAIG,IAAKM,EAAGF,aAE5BjB,KAAMqB,EAAQb,EAAKY,EAAG","ignoreList":[]}