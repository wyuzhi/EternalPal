{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/FilmNode.js","names":["TempNode","rand","Fn","fract","time","uv","clamp","mix","vec4","nodeProxy","FilmNode","type","constructor","inputNode","intensityNode","uvNode","super","this","setup","base","rgb","noise","add","color","mul","a","film"],"sources":["node_modules/three/examples/jsm/tsl/display/FilmNode.js"],"sourcesContent":["import { TempNode } from 'three/webgpu';\nimport { rand, Fn, fract, time, uv, clamp, mix, vec4, nodeProxy } from 'three/tsl';\n\n/**\n * Post processing node for creating a film grain effect.\n *\n * @augments TempNode\n * @three_import import { film } from 'three/addons/tsl/display/FilmNode.js';\n */\nclass FilmNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'FilmNode';\n\n\t}\n\n\t/**\n\t * Constructs a new film node.\n\t *\n\t * @param {Node} inputNode - The node that represents the input of the effect.\n\t * @param {?Node<float>} [intensityNode=null] - A node that represents the effect's intensity.\n\t * @param {?Node<vec2>} [uvNode=null] - A node that allows to pass custom (e.g. animated) uv data.\n\t */\n\tconstructor( inputNode, intensityNode = null, uvNode = null ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The node that represents the input of the effect.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inputNode = inputNode;\n\n\t\t/**\n\t\t * A node that represents the effect's intensity.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.intensityNode = intensityNode;\n\n\t\t/**\n\t\t * A node that allows to pass custom (e.g. animated) uv data.\n\t\t *\n\t\t * @type {?Node<vec2>}\n\t\t * @default null\n\t\t */\n\t\tthis.uvNode = uvNode;\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {ShaderCallNodeInternal}\n\t */\n\tsetup( /* builder */ ) {\n\n\t\tconst uvNode = this.uvNode || uv();\n\n\t\tconst film = Fn( () => {\n\n\t\t\tconst base = this.inputNode.rgb;\n\t\t\tconst noise = rand( fract( uvNode.add( time ) ) );\n\n\t\t\tlet color = base.add( base.mul( clamp( noise.add( 0.1 ), 0, 1 ) ) );\n\n\t\t\tif ( this.intensityNode !== null ) {\n\n\t\t\t\tcolor = mix( base, color, this.intensityNode );\n\n\t\t\t}\n\n\t\t\treturn vec4( color, this.inputNode.a );\n\n\t\t} );\n\n\t\tconst outputNode = film();\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default FilmNode;\n\n/**\n * TSL function for creating a film node for post processing.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} inputNode - The node that represents the input of the effect.\n * @param {?Node<float>} [intensityNode=null] - A node that represents the effect's intensity.\n * @param {?Node<vec2>} [uvNode=null] - A node that allows to pass custom (e.g. animated) uv data.\n * @returns {FilmNode}\n */\nexport const film = /*@__PURE__*/ nodeProxy( FilmNode );\n"],"mappings":"OAASA,aAAgB,sBAChBC,KAAMC,GAAIC,MAAOC,KAAMC,GAAIC,MAAOC,IAAKC,KAAMC,cAAiB,YAQvE,MAAMC,iBAAiBV,SAEtB,eAAWW,GAEV,MAAO,UAER,CASA,WAAAC,CAAaC,EAAWC,EAAgB,KAAMC,EAAS,MAEtDC,MAAO,QAOPC,KAAKJ,UAAYA,EAQjBI,KAAKH,cAAgBA,EAQrBG,KAAKF,OAASA,CAEf,CAQA,KAAAG,GAEC,MAAMH,EAASE,KAAKF,QAAUV,KAqB9B,OAnBaH,IAAI,KAEhB,MAAMiB,EAAOF,KAAKJ,UAAUO,IACtBC,EAAQpB,KAAME,MAAOY,EAAOO,IAAKlB,QAEvC,IAAImB,EAAQJ,EAAKG,IAAKH,EAAKK,IAAKlB,MAAOe,EAAMC,IAAK,IAAO,EAAG,KAQ5D,OAN4B,OAAvBL,KAAKH,gBAETS,EAAQhB,IAAKY,EAAMI,EAAON,KAAKH,gBAIzBN,KAAMe,EAAON,KAAKJ,UAAUY,EAAG,GAIpBC,EAIpB,iBAIchB,gBAYR,MAAMgB,KAAqBjB,UAAWC","ignoreList":[]}