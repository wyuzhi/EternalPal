import{DataTexture,RenderTarget,RepeatWrapping,Vector2,Vector3,TempNode,QuadMesh,NodeMaterial,RendererUtils}from"three/webgpu";import{reference,logarithmicDepthToViewZ,viewZToPerspectiveDepth,getNormalFromDepth,getScreenPosition,getViewPosition,nodeObject,Fn,float,NodeUpdateType,uv,uniform,Loop,vec2,vec3,vec4,int,dot,max,pow,abs,If,textureSize,sin,cos,PI,texture,passTexture,mat3,add,normalize,mul,cross,div,mix,sqrt,sub,acos,clamp}from"three/tsl";const _quadMesh=new QuadMesh,_size=new Vector2;let _rendererState;class GTAONode extends TempNode{static get type(){return"GTAONode"}constructor(e,t,r){super("vec4"),this.depthNode=e,this.normalNode=t,this.resolutionScale=1,this.updateBeforeType=NodeUpdateType.FRAME,this._aoRenderTarget=new RenderTarget(1,1,{depthBuffer:!1}),this._aoRenderTarget.texture.name="GTAONode.AO",this.radius=uniform(.25),this.resolution=uniform(new Vector2),this.thickness=uniform(1),this.distanceExponent=uniform(1),this.distanceFallOff=uniform(1),this.scale=uniform(1),this.samples=uniform(16),this._noiseNode=texture(generateMagicSquareNoise()),this._cameraProjectionMatrix=uniform(r.projectionMatrix),this._cameraProjectionMatrixInverse=uniform(r.projectionMatrixInverse),this._cameraNear=reference("near","float",r),this._cameraFar=reference("far","float",r),this._material=new NodeMaterial,this._material.name="GTAO",this._textureNode=passTexture(this,this._aoRenderTarget.texture)}getTextureNode(){return this._textureNode}setSize(e,t){e=Math.round(this.resolutionScale*e),t=Math.round(this.resolutionScale*t),this.resolution.value.set(e,t),this._aoRenderTarget.setSize(e,t)}updateBefore(e){const{renderer:t}=e;_rendererState=RendererUtils.resetRendererState(t,_rendererState);const r=t.getDrawingBufferSize(_size);this.setSize(r.width,r.height),_quadMesh.material=this._material,t.setClearColor(16777215,1),t.setRenderTarget(this._aoRenderTarget),_quadMesh.render(t),RendererUtils.restoreRendererState(t,_rendererState)}setup(e){const t=uv(),r=t=>{const r=this.depthNode.sample(t).r;if(!0===e.renderer.logarithmicDepthBuffer){const e=logarithmicDepthToViewZ(r,this._cameraNear,this._cameraFar);return viewZToPerspectiveDepth(e,this._cameraNear,this._cameraFar)}return r},a=e=>this._noiseNode.sample(e),o=e=>null!==this.normalNode?this.normalNode.sample(e).rgb.normalize():getNormalFromDepth(e,this.depthNode.value,this._cameraProjectionMatrixInverse),s=Fn((()=>{const e=r(t).toVar();e.greaterThanEqual(1).discard();const s=getViewPosition(t,e,this._cameraProjectionMatrixInverse).toVar(),i=o(t).toVar(),n=this.radius,d=textureSize(this._noiseNode,0);let l=vec2(t.x,t.y.oneMinus());l=l.mul(this.resolution.div(d));const c=a(l),h=c.xyz.mul(2).sub(1),u=vec3(h.xy,0).normalize(),m=vec3(u.y.mul(-1),u.x,0),p=mat3(u,m,vec3(0,0,1)),f=this.samples.lessThan(30).select(3,5).toVar(),x=add(this.samples,f.sub(1)).div(f).toVar(),g=float(0).toVar();return Loop({start:int(0),end:f,type:"int",condition:"<"},(({i:e})=>{const t=float(e).div(float(f)).mul(PI).toVar(),a=vec4(cos(t),sin(t),0,add(.5,mul(.5,c.w)));a.xyz=normalize(p.mul(a.xyz));const o=normalize(s.xyz.negate()).toVar(),d=normalize(cross(a.xyz,o)).toVar(),l=cross(d,o),h=normalize(i.sub(d.mul(dot(i,d)))),u=cross(h,d).toVar(),m=vec2(dot(o,u),dot(o,u.negate())).toVar();Loop({end:x,type:"int",name:"j",condition:"<"},(({j:e})=>{const t=a.xyz.mul(n).mul(a.w).mul(pow(div(float(e).add(1),float(x)),this.distanceExponent)),i=getScreenPosition(s.add(t),this._cameraProjectionMatrix).toVar(),d=r(i).toVar(),l=getViewPosition(i,d,this._cameraProjectionMatrixInverse).toVar().sub(s).toVar();If(abs(l.z).lessThan(this.thickness),(()=>{const t=dot(o,normalize(l));m.x.addAssign(max(0,mul(t.sub(m.x),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}));const c=getScreenPosition(s.sub(t),this._cameraProjectionMatrix).toVar(),h=r(c).toVar(),u=getViewPosition(c,h,this._cameraProjectionMatrixInverse).toVar().sub(s).toVar();If(abs(u.z).lessThan(this.thickness),(()=>{const t=dot(o,normalize(u));m.y.addAssign(max(0,mul(t.sub(m.y),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}))}));const _=sqrt(sub(1,m.mul(m))).toVar(),M=dot(h,l),v=dot(h,o),T=mul(.5,acos(m.y).sub(acos(m.x)).add(_.x.mul(m.x).sub(_.y.mul(m.y)))),N=mul(.5,sub(2,m.x.mul(m.x)).sub(m.y.mul(m.y))),V=M.mul(T).add(v.mul(N));g.addAssign(V)})),g.assign(clamp(g.div(f),0,1)),g.assign(pow(g,this.scale)),vec4(vec3(g),1)}));return this._material.fragmentNode=s().context(e.getSharedContext()),this._material.needsUpdate=!0,this._textureNode}dispose(){this._aoRenderTarget.dispose(),this._material.dispose()}}export default GTAONode;function generateMagicSquareNoise(e=5){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),r=generateMagicSquare(t),a=r.length,o=new Uint8Array(4*a);for(let e=0;e<a;++e){const t=r[e],s=2*Math.PI*t/a,i=new Vector3(Math.cos(s),Math.sin(s),0).normalize();o[4*e]=255*(.5*i.x+.5),o[4*e+1]=255*(.5*i.y+.5),o[4*e+2]=127,o[4*e+3]=255}const s=new DataTexture(o,t,t);return s.wrapS=RepeatWrapping,s.wrapT=RepeatWrapping,s.needsUpdate=!0,s}function generateMagicSquare(e){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),r=t*t,a=Array(r).fill(0);let o=Math.floor(t/2),s=t-1;for(let e=1;e<=r;)-1===o&&s===t?(s=t-2,o=0):(s===t&&(s=0),o<0&&(o=t-1)),0===a[o*t+s]?(a[o*t+s]=e++,s++,o--):(s-=2,o++);return a}export const ao=(e,t,r)=>nodeObject(new GTAONode(nodeObject(e),nodeObject(t),r));
//# sourceMappingURL=GTAONode.js.map