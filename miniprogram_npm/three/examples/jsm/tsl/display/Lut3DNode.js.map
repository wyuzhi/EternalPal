{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/Lut3DNode.js","names":["TempNode","nodeObject","Fn","float","uniform","vec3","vec4","mix","Lut3DNode","type","constructor","inputNode","lutNode","size","intensityNode","super","this","setup","base","pixelWidth","div","halfPixelWidth","uvw","add","rgb","mul","sub","lutValue","uv","sample","a","lut3D","node","lut","intensity"],"sources":["node_modules/three/examples/jsm/tsl/display/Lut3DNode.js"],"sourcesContent":["import { TempNode } from 'three/webgpu';\nimport { nodeObject, Fn, float, uniform, vec3, vec4, mix } from 'three/tsl';\n\n/**\n * A post processing node for color grading via lookup tables.\n *\n * @augments TempNode\n * @three_import import { lut3D } from 'three/addons/tsl/display/Lut3DNode.js';\n */\nclass Lut3DNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'Lut3DNode';\n\n\t}\n\n\t/**\n\t * Constructs a new LUT node.\n\t *\n\t * @param {Node} inputNode - The node that represents the input of the effect.\n\t * @param {TextureNode} lutNode - A texture node that represents the lookup table.\n\t * @param {number} size - The size of the lookup table.\n\t * @param {Node<float>} intensityNode - Controls the intensity of the effect.\n\t */\n\tconstructor( inputNode, lutNode, size, intensityNode ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The node that represents the input of the effect.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inputNode = inputNode;\n\n\t\t/**\n\t\t * A texture node that represents the lookup table.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.lutNode = lutNode;\n\n\t\t/**\n\t\t * The size of the lookup table.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.size = uniform( size );\n\n\t\t/**\n\t\t * Controls the intensity of the effect.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.intensityNode = intensityNode;\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {ShaderCallNodeInternal}\n\t */\n\tsetup() {\n\n\t\tconst { inputNode, lutNode } = this;\n\n\t\tconst sampleLut = ( uv ) => lutNode.sample( uv );\n\n\t\tconst lut3D = Fn( () => {\n\n\t\t\tconst base = inputNode;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins at the center of the edge pixels.\n\n\t\t\tconst pixelWidth = float( 1.0 ).div( this.size );\n\t\t\tconst halfPixelWidth = float( 0.5 ).div( this.size );\n\t\t\tconst uvw = vec3( halfPixelWidth ).add( base.rgb.mul( float( 1.0 ).sub( pixelWidth ) ) );\n\n\t\t\tconst lutValue = vec4( sampleLut( uvw ).rgb, base.a );\n\n\t\t\treturn vec4( mix( base, lutValue, this.intensityNode ) );\n\n\t\t} );\n\n\t\tconst outputNode = lut3D();\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default Lut3DNode;\n\n/**\n * TSL function for creating a LUT node for color grading via post processing.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that represents the input of the effect.\n * @param {TextureNode} lut - A texture node that represents the lookup table.\n * @param {number} size - The size of the lookup table.\n * @param {Node<float> | number} intensity - Controls the intensity of the effect.\n * @returns {Lut3DNode}\n */\nexport const lut3D = ( node, lut, size, intensity ) => nodeObject( new Lut3DNode( nodeObject( node ), nodeObject( lut ), size, nodeObject( intensity ) ) );\n"],"mappings":"OAASA,aAAgB,sBAChBC,WAAYC,GAAIC,MAAOC,QAASC,KAAMC,KAAMC,QAAW,YAQhE,MAAMC,kBAAkBR,SAEvB,eAAWS,GAEV,MAAO,WAER,CAUA,WAAAC,CAAaC,EAAWC,EAASC,EAAMC,GAEtCC,MAAO,QAOPC,KAAKL,UAAYA,EAOjBK,KAAKJ,QAAUA,EAOfI,KAAKH,KAAOT,QAASS,GAOrBG,KAAKF,cAAgBA,CAEtB,CAQA,KAAAG,GAEC,MAAMN,UAAEA,EAASC,QAAEA,GAAYI,KAsB/B,OAlBcd,IAAI,KAEjB,MAAMgB,EAAOP,EAIPQ,EAAahB,MAAO,GAAMiB,IAAKJ,KAAKH,MACpCQ,EAAiBlB,MAAO,IAAMiB,IAAKJ,KAAKH,MACxCS,EAAMjB,KAAMgB,GAAiBE,IAAKL,EAAKM,IAAIC,IAAKtB,MAAO,GAAMuB,IAAKP,KAElEQ,EAAWrB,MAZEsB,EAYeN,EAZPV,EAAQiB,OAAQD,IAYHJ,IAAKN,EAAKY,GAZjC,IAAEF,EAcnB,OAAOtB,KAAMC,IAAKW,EAAMS,EAAUX,KAAKF,eAAiB,GAItCiB,EAIpB,iBAIcvB,iBAaR,MAAMuB,MAAQ,CAAEC,EAAMC,EAAKpB,EAAMqB,IAAejC,WAAY,IAAIO,UAAWP,WAAY+B,GAAQ/B,WAAYgC,GAAOpB,EAAMZ,WAAYiC","ignoreList":[]}