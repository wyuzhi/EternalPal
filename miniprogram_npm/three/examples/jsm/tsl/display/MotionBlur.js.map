{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/MotionBlur.js","names":["Fn","float","uv","Loop","int","motionBlur","inputNode","velocity","numSamples","sampleColor","sample","uvs","colorResult","toVar","fSamples","start","end","type","condition","i","offset","mul","div","sub","addAssign","add","divAssign"],"sources":["node_modules/three/examples/jsm/tsl/display/MotionBlur.js"],"sourcesContent":["import { Fn, float, uv, Loop, int } from 'three/tsl';\n\n/**\n * Applies a motion blur effect to the given input node.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} inputNode - The input node to apply the motion blur for.\n * @param {Node<vec2>} velocity - The motion vectors of the beauty pass.\n * @param {Node<int>} [numSamples=int(16)] - How many samples the effect should use. A higher value results in better quality but is also more expensive.\n * @return {Node<vec4>} The input node with the motion blur effect applied.\n */\nexport const motionBlur = /*@__PURE__*/ Fn( ( [ inputNode, velocity, numSamples = int( 16 ) ] ) => {\n\n\tconst sampleColor = ( uv ) => inputNode.sample( uv );\n\n\tconst uvs = uv();\n\n\tconst colorResult = sampleColor( uvs ).toVar();\n\tconst fSamples = float( numSamples );\n\n\tLoop( { start: int( 1 ), end: numSamples, type: 'int', condition: '<=' }, ( { i } ) => {\n\n\t\tconst offset = velocity.mul( float( i ).div( fSamples.sub( 1 ) ).sub( 0.5 ) );\n\t\tcolorResult.addAssign( sampleColor( uvs.add( offset ) ) );\n\n\t} );\n\n\tcolorResult.divAssign( fSamples );\n\n\treturn colorResult;\n\n} );\n"],"mappings":"OAASA,GAAIC,MAAOC,GAAIC,KAAMC,QAAW,mBAYlC,MAAMC,WAA2BL,IAAI,EAAIM,EAAWC,EAAUC,EAAaJ,IAAK,QAEtF,MAAMK,EAAgBP,GAAQI,EAAUI,OAAQR,GAE1CS,EAAMT,KAENU,EAAcH,EAAaE,GAAME,QACjCC,EAAWb,MAAOO,GAWxB,OATAL,KAAM,CAAEY,MAAOX,IAAK,GAAKY,IAAKR,EAAYS,KAAM,MAAOC,UAAW,OAAQ,EAAIC,QAE7E,MAAMC,EAASb,EAASc,IAAKpB,MAAOkB,GAAIG,IAAKR,EAASS,IAAK,IAAMA,IAAK,KACtEX,EAAYY,UAAWf,EAAaE,EAAIc,IAAKL,IAAY,IAI1DR,EAAYc,UAAWZ,GAEhBF,CAAW","ignoreList":[]}