{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/PixelationPassNode.js","names":["NearestFilter","Vector4","TempNode","NodeUpdateType","PassNode","nodeObject","Fn","float","uv","uniform","convertToTexture","vec2","vec3","clamp","floor","dot","smoothstep","If","sign","step","mrt","output","normalView","property","PixelationNode","type","constructor","textureNode","depthNode","normalNode","pixelSize","normalEdgeStrength","depthEdgeStrength","super","this","_resolution","updateBeforeType","FRAME","updateBefore","map","value","width","image","height","set","setup","uvNodeTexture","uvNode","uvNodeDepth","uvNodeNormal","sampleDepth","x","y","sample","add","mul","zw","r","sampleNormal","rgb","normalize","neighborNormalEdgeIndicator","depth","normal","depthDiff","sub","neighborNormal","normalEdgeBias","normalDiff","normalIndicator","depthIndicator","texel","greaterThan","or","assign","dei","diff","addAssign","div","depthEdgeIndicator","nei","indicator","normalEdgeIndicator","strength","select","pixelation","node","PixelationPassNode","scene","camera","COLOR","minFilter","magFilter","isPixelationPassNode","_mrt","setSize","adjustedWidth","Math","adjustedHeight","color","getTextureNode","pixelationPass"],"sources":["node_modules/three/examples/jsm/tsl/display/PixelationPassNode.js"],"sourcesContent":["import { NearestFilter, Vector4, TempNode, NodeUpdateType, PassNode } from 'three/webgpu';\nimport { nodeObject, Fn, float, uv, uniform, convertToTexture, vec2, vec3, clamp, floor, dot, smoothstep, If, sign, step, mrt, output, normalView, property } from 'three/tsl';\n\n/**\n * A inner node definition that implements the actual pixelation TSL code.\n *\n * @inner\n * @augments TempNode\n */\nclass PixelationNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'PixelationNode';\n\n\t}\n\n\t/**\n\t * Constructs a new pixelation node.\n\t *\n\t * @param {TextureNode} textureNode - The texture node that represents the beauty pass.\n\t * @param {TextureNode} depthNode - The texture that represents the beauty's depth.\n\t * @param {TextureNode} normalNode - The texture that represents the beauty's normals.\n\t * @param {Node<float>} pixelSize - The pixel size.\n\t * @param {Node<float>} normalEdgeStrength - The normal edge strength.\n\t * @param {Node<float>} depthEdgeStrength - The depth edge strength.\n\t */\n\tconstructor( textureNode, depthNode, normalNode, pixelSize, normalEdgeStrength, depthEdgeStrength ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The texture node that represents the beauty pass.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The texture that represents the beauty's depth.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.depthNode = depthNode;\n\n\t\t/**\n\t\t * The texture that represents the beauty's normals.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.normalNode = normalNode;\n\n\t\t/**\n\t\t * The pixel size.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.pixelSize = pixelSize;\n\n\t\t/**\n\t\t * The pixel size.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\n\n\t\t/**\n\t\t * The depth edge strength.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\n\n\t\t/**\n\t\t * Uniform node that represents the resolution.\n\t\t *\n\t\t * @type {Node<vec4>}\n\t\t */\n\t\tthis._resolution = uniform( new Vector4() );\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node updates\n\t\t * its internal uniforms once per frame in `updateBefore()`.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * This method is used to update uniforms once per frame.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdateBefore() {\n\n\t\tconst map = this.textureNode.value;\n\n\t\tconst width = map.image.width;\n\t\tconst height = map.image.height;\n\n\t\tthis._resolution.value.set( width, height, 1 / width, 1 / height );\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {ShaderCallNodeInternal}\n\t */\n\tsetup() {\n\n\t\tconst { textureNode, depthNode, normalNode } = this;\n\n\t\tconst uvNodeTexture = textureNode.uvNode || uv();\n\t\tconst uvNodeDepth = depthNode.uvNode || uv();\n\t\tconst uvNodeNormal = normalNode.uvNode || uv();\n\n\t\tconst sampleTexture = () => textureNode.sample( uvNodeTexture );\n\n\t\tconst sampleDepth = ( x, y ) => depthNode.sample( uvNodeDepth.add( vec2( x, y ).mul( this._resolution.zw ) ) ).r;\n\n\t\tconst sampleNormal = ( x, y ) => normalNode.sample( uvNodeNormal.add( vec2( x, y ).mul( this._resolution.zw ) ) ).rgb.normalize();\n\n\t\tconst depthEdgeIndicator = ( depth ) => {\n\n\t\t\tconst diff = property( 'float', 'diff' );\n\t\t\tdiff.addAssign( clamp( sampleDepth( 1, 0 ).sub( depth ) ) );\n\t\t\tdiff.addAssign( clamp( sampleDepth( - 1, 0 ).sub( depth ) ) );\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, 1 ).sub( depth ) ) );\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, - 1 ).sub( depth ) ) );\n\n\t\t\treturn floor( smoothstep( 0.01, 0.02, diff ).mul( 2 ) ).div( 2 );\n\n\t\t};\n\n\t\tconst neighborNormalEdgeIndicator = ( x, y, depth, normal ) => {\n\n\t\t\tconst depthDiff = sampleDepth( x, y ).sub( depth );\n\t\t\tconst neighborNormal = sampleNormal( x, y );\n\n\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\n\t\t\tconst normalEdgeBias = vec3( 1, 1, 1 ); // This should probably be a parameter.\n\t\t\tconst normalDiff = dot( normal.sub( neighborNormal ), normalEdgeBias );\n\t\t\tconst normalIndicator = clamp( smoothstep( - 0.01, 0.01, normalDiff ), 0.0, 1.0 );\n\n\t\t\t// Only the shallower pixel should detect the normal edge.\n\n\t\t\tconst depthIndicator = clamp( sign( depthDiff.mul( .25 ).add( .0025 ) ), 0.0, 1.0 );\n\n\t\t\treturn float( 1.0 ).sub( dot( normal, neighborNormal ) ).mul( depthIndicator ).mul( normalIndicator );\n\n\t\t};\n\n\t\tconst normalEdgeIndicator = ( depth, normal ) => {\n\n\t\t\tconst indicator = property( 'float', 'indicator' );\n\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, - 1, depth, normal ) );\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, 1, depth, normal ) );\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( - 1, 0, depth, normal ) );\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 1, 0, depth, normal ) );\n\n\t\t\treturn step( 0.1, indicator );\n\n\t\t};\n\n\t\tconst pixelation = Fn( () => {\n\n\t\t\tconst texel = sampleTexture();\n\n\t\t\tconst depth = property( 'float', 'depth' );\n\t\t\tconst normal = property( 'vec3', 'normal' );\n\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ).or( this.normalEdgeStrength.greaterThan( 0.0 ) ), () => {\n\n\t\t\t\tdepth.assign( sampleDepth( 0, 0 ) );\n\t\t\t\tnormal.assign( sampleNormal( 0, 0 ) );\n\n\t\t\t} );\n\n\t\t\tconst dei = property( 'float', 'dei' );\n\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ), () => {\n\n\t\t\t\tdei.assign( depthEdgeIndicator( depth ) );\n\n\t\t\t} );\n\n\t\t\tconst nei = property( 'float', 'nei' );\n\n\t\t\tIf( this.normalEdgeStrength.greaterThan( 0.0 ), () => {\n\n\t\t\t\tnei.assign( normalEdgeIndicator( depth, normal ) );\n\n\t\t\t} );\n\n\t\t\tconst strength = dei.greaterThan( 0 ).select( float( 1.0 ).sub( dei.mul( this.depthEdgeStrength ) ), nei.mul( this.normalEdgeStrength ).add( 1 ) );\n\n\t\t\treturn texel.mul( strength );\n\n\t\t} );\n\n\t\tconst outputNode = pixelation();\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nconst pixelation = ( node, depthNode, normalNode, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) => nodeObject( new PixelationNode( convertToTexture( node ), convertToTexture( depthNode ), convertToTexture( normalNode ), nodeObject( pixelSize ), nodeObject( normalEdgeStrength ), nodeObject( depthEdgeStrength ) ) );\n\n/**\n * A special render pass node that renders the scene with a pixelation effect.\n *\n * @augments PassNode\n * @three_import import { pixelationPass } from 'three/addons/tsl/display/PixelationPassNode.js';\n */\nclass PixelationPassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'PixelationPassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new pixelation pass node.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera to render the scene with.\n\t * @param {Node<float> | number} [pixelSize=6] - The pixel size.\n\t * @param {Node<float> | number} [normalEdgeStrength=0.3] - The normal edge strength.\n\t * @param {Node<float> | number} [depthEdgeStrength=0.4] - The depth edge strength.\n\t */\n\tconstructor( scene, camera, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera, { minFilter: NearestFilter, magFilter: NearestFilter } );\n\n\t\t/**\n\t\t * The pixel size.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 6\n\t\t */\n\t\tthis.pixelSize = pixelSize;\n\n\t\t/**\n\t\t * The normal edge strength.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.3\n\t\t */\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\n\n\t\t/**\n\t\t * The depth edge strength.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.4\n\t\t */\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPixelationPassNode = true;\n\n\t\tthis._mrt = mrt( {\n\t\t\toutput: output,\n\t\t\tnormal: normalView\n\t\t} );\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width of the pass.\n\t * @param {number} height - The height of the pass.\n\t */\n\tsetSize( width, height ) {\n\n\t\tconst pixelSize = this.pixelSize.value ? this.pixelSize.value : this.pixelSize;\n\n\t\tconst adjustedWidth = Math.floor( width / pixelSize );\n\t\tconst adjustedHeight = Math.floor( height / pixelSize );\n\n\t\tsuper.setSize( adjustedWidth, adjustedHeight );\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {PixelationNode}\n\t */\n\tsetup() {\n\n\t\tconst color = super.getTextureNode( 'output' );\n\t\tconst depth = super.getTextureNode( 'depth' );\n\t\tconst normal = super.getTextureNode( 'normal' );\n\n\t\treturn pixelation( color, depth, normal, this.pixelSize, this.normalEdgeStrength, this.depthEdgeStrength );\n\n\t}\n\n}\n\n/**\n * TSL function for creating a pixelation render pass node for post processing.\n *\n * @tsl\n * @function\n * @param {Scene} scene - The scene to render.\n * @param {Camera} camera - The camera to render the scene with.\n * @param {Node<float> | number} [pixelSize=6] - The pixel size.\n * @param {Node<float> | number} [normalEdgeStrength=0.3] - The normal edge strength.\n * @param {Node<float> | number} [depthEdgeStrength=0.4] - The depth edge strength.\n * @returns {PixelationPassNode}\n */\nexport const pixelationPass = ( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) => nodeObject( new PixelationPassNode( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) );\n\nexport default PixelationPassNode;\n"],"mappings":"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","ignoreList":[]}