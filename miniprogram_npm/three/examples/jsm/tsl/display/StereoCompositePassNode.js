import{RenderTarget,StereoCamera,HalfFloatType,LinearFilter,NearestFilter,Vector2,PassNode,QuadMesh,RendererUtils}from"three/webgpu";import{texture}from"three/tsl";const _size=new Vector2,_quadMesh=new QuadMesh;let _rendererState;class StereoCompositePassNode extends PassNode{static get type(){return"StereoCompositePassNode"}constructor(e,t){super(PassNode.COLOR,e,t),this.isStereoCompositePassNode=!0,this.stereo=new StereoCamera;const r={minFilter:LinearFilter,magFilter:NearestFilter,type:HalfFloatType};this._renderTargetL=new RenderTarget(1,1,r),this._renderTargetR=new RenderTarget(1,1,r),this._mapLeft=texture(this._renderTargetL.texture),this._mapRight=texture(this._renderTargetR.texture),this._material=null}updateStereoCamera(e){this.stereo.cameraL.coordinateSystem=e,this.stereo.cameraR.coordinateSystem=e,this.stereo.update(this.camera)}setSize(e,t){super.setSize(e,t),this._renderTargetL.setSize(this.renderTarget.width,this.renderTarget.height),this._renderTargetR.setSize(this.renderTarget.width,this.renderTarget.height)}updateBefore(e){const{renderer:t}=e,{scene:r,stereo:s,renderTarget:a}=this;_rendererState=RendererUtils.resetRendererState(t,_rendererState),this._pixelRatio=t.getPixelRatio(),this.updateStereoCamera(t.coordinateSystem);const i=t.getSize(_size);this.setSize(i.width,i.height),t.setRenderTarget(this._renderTargetL),t.render(r,s.cameraL),t.setRenderTarget(this._renderTargetR),t.render(r,s.cameraR),t.setRenderTarget(a),_quadMesh.material=this._material,_quadMesh.render(t),RendererUtils.restoreRendererState(t,_rendererState)}dispose(){super.dispose(),this._renderTargetL.dispose(),this._renderTargetR.dispose(),null!==this._material&&this._material.dispose()}}export default StereoCompositePassNode;
//# sourceMappingURL=StereoCompositePassNode.js.map