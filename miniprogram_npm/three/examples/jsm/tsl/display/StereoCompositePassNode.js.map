{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/StereoCompositePassNode.js","names":["RenderTarget","StereoCamera","HalfFloatType","LinearFilter","NearestFilter","Vector2","PassNode","QuadMesh","RendererUtils","texture","_size","_quadMesh","_rendererState","StereoCompositePassNode","type","constructor","scene","camera","super","COLOR","this","isStereoCompositePassNode","stereo","_params","minFilter","magFilter","_renderTargetL","_renderTargetR","_mapLeft","_mapRight","_material","updateStereoCamera","coordinateSystem","cameraL","cameraR","update","setSize","width","height","renderTarget","updateBefore","frame","renderer","resetRendererState","_pixelRatio","getPixelRatio","size","getSize","setRenderTarget","render","material","restoreRendererState","dispose"],"sources":["node_modules/three/examples/jsm/tsl/display/StereoCompositePassNode.js"],"sourcesContent":["import { RenderTarget, StereoCamera, HalfFloatType, LinearFilter, NearestFilter, Vector2, PassNode, QuadMesh, RendererUtils } from 'three/webgpu';\nimport { texture } from 'three/tsl';\n\nconst _size = /*@__PURE__*/ new Vector2();\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\nlet _rendererState;\n\n/**\n * A special (abstract) render pass node that renders the scene\n * as a stereoscopic image. Unlike {@link StereoPassNode}, this\n * node merges the image for the left and right eye\n * into a single one. That is required for effects like\n * anaglyph or parallax barrier.\n *\n * @abstract\n * @augments PassNode\n * @three_import import { StereoCompositePassNode } from 'three/addons/tsl/display/StereoCompositePassNode.js';\n */\nclass StereoCompositePassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'StereoCompositePassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new stereo composite pass node.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera to render the scene with.\n\t */\n\tconstructor( scene, camera ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStereoCompositePassNode = true;\n\n\t\t/**\n\t\t * The internal stereo camera that is used to render the scene.\n\t\t *\n\t\t * @type {StereoCamera}\n\t\t */\n\t\tthis.stereo = new StereoCamera();\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, type: HalfFloatType };\n\n\t\t/**\n\t\t * The render target for rendering the left eye's view.\n\t\t *\n\t\t * @type {RenderTarget}\n\t\t */\n\t\tthis._renderTargetL = new RenderTarget( 1, 1, _params );\n\n\t\t/**\n\t\t * The render target for rendering the right eye's view.\n\t\t *\n\t\t * @type {RenderTarget}\n\t\t */\n\t\tthis._renderTargetR = new RenderTarget( 1, 1, _params );\n\n\t\t/**\n\t\t * A texture node representing the left's eye view.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis._mapLeft = texture( this._renderTargetL.texture );\n\n\t\t/**\n\t\t * A texture node representing the right's eye view.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis._mapRight = texture( this._renderTargetR.texture );\n\n\t\t/**\n\t\t * The node material that implements the composite. All\n\t\t * derived effect passes must provide an instance for rendering.\n\t\t *\n\t\t * @type {NodeMaterial}\n\t\t */\n\t\tthis._material = null;\n\n\t}\n\n\t/**\n\t * Updates the internal stereo camera.\n\t *\n\t * @param {number} coordinateSystem - The current coordinate system.\n\t */\n\tupdateStereoCamera( coordinateSystem ) {\n\n\t\tthis.stereo.cameraL.coordinateSystem = coordinateSystem;\n\t\tthis.stereo.cameraR.coordinateSystem = coordinateSystem;\n\t\tthis.stereo.update( this.camera );\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @param {number} width - The width of the pass.\n\t * @param {number} height - The height of the pass.\n\t */\n\tsetSize( width, height ) {\n\n\t\tsuper.setSize( width, height );\n\n\t\tthis._renderTargetL.setSize( this.renderTarget.width, this.renderTarget.height );\n\t\tthis._renderTargetR.setSize( this.renderTarget.width, this.renderTarget.height );\n\n\t}\n\n\t/**\n\t * This method is used to render the effect once per frame.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\t\tconst { scene, stereo, renderTarget } = this;\n\n\t\t_rendererState = RendererUtils.resetRendererState( renderer, _rendererState );\n\n\t\t//\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tthis.updateStereoCamera( renderer.coordinateSystem );\n\n\t\tconst size = renderer.getSize( _size );\n\t\tthis.setSize( size.width, size.height );\n\n\t\t// left\n\n\t\trenderer.setRenderTarget( this._renderTargetL );\n\t\trenderer.render( scene, stereo.cameraL );\n\n\t\t// right\n\n\t\trenderer.setRenderTarget( this._renderTargetR );\n\t\trenderer.render( scene, stereo.cameraR );\n\n\t\t// composite\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\t_quadMesh.material = this._material;\n\t\t_quadMesh.render( renderer );\n\n\t\t// restore\n\n\t\tRendererUtils.restoreRendererState( renderer, _rendererState );\n\n\t}\n\n\t/**\n\t * Frees internal resources. This method should be called\n\t * when the pass is no longer required.\n\t */\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis._renderTargetL.dispose();\n\t\tthis._renderTargetR.dispose();\n\n\t\tif ( this._material !== null ) {\n\n\t\t\tthis._material.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport default StereoCompositePassNode;\n"],"mappings":"OAASA,aAAcC,aAAcC,cAAeC,aAAcC,cAAeC,QAASC,SAAUC,SAAUC,kBAAqB,sBAC1HC,YAAe,YAExB,MAAMC,MAAsB,IAAIL,QAC1BM,UAA0B,IAAIJ,SAEpC,IAAIK,eAaJ,MAAMC,gCAAgCP,SAErC,eAAWQ,GAEV,MAAO,yBAER,CAQA,WAAAC,CAAaC,EAAOC,GAEnBC,MAAOZ,SAASa,MAAOH,EAAOC,GAS9BG,KAAKC,2BAA4B,EAOjCD,KAAKE,OAAS,IAAIrB,aAClB,MAAMsB,EAAU,CAAEC,UAAWrB,aAAcsB,UAAWrB,cAAeU,KAAMZ,eAO3EkB,KAAKM,eAAiB,IAAI1B,aAAc,EAAG,EAAGuB,GAO9CH,KAAKO,eAAiB,IAAI3B,aAAc,EAAG,EAAGuB,GAO9CH,KAAKQ,SAAWnB,QAASW,KAAKM,eAAejB,SAO7CW,KAAKS,UAAYpB,QAASW,KAAKO,eAAelB,SAQ9CW,KAAKU,UAAY,IAElB,CAOA,kBAAAC,CAAoBC,GAEnBZ,KAAKE,OAAOW,QAAQD,iBAAmBA,EACvCZ,KAAKE,OAAOY,QAAQF,iBAAmBA,EACvCZ,KAAKE,OAAOa,OAAQf,KAAKH,OAE1B,CAQA,OAAAmB,CAASC,EAAOC,GAEfpB,MAAMkB,QAASC,EAAOC,GAEtBlB,KAAKM,eAAeU,QAAShB,KAAKmB,aAAaF,MAAOjB,KAAKmB,aAAaD,QACxElB,KAAKO,eAAeS,QAAShB,KAAKmB,aAAaF,MAAOjB,KAAKmB,aAAaD,OAEzE,CAOA,YAAAE,CAAcC,GAEb,MAAMC,SAAEA,GAAaD,GACfzB,MAAEA,EAAKM,OAAEA,EAAMiB,aAAEA,GAAiBnB,KAExCR,eAAiBJ,cAAcmC,mBAAoBD,EAAU9B,gBAI7DQ,KAAKwB,YAAcF,EAASG,gBAE5BzB,KAAKW,mBAAoBW,EAASV,kBAElC,MAAMc,EAAOJ,EAASK,QAASrC,OAC/BU,KAAKgB,QAASU,EAAKT,MAAOS,EAAKR,QAI/BI,EAASM,gBAAiB5B,KAAKM,gBAC/BgB,EAASO,OAAQjC,EAAOM,EAAOW,SAI/BS,EAASM,gBAAiB5B,KAAKO,gBAC/Be,EAASO,OAAQjC,EAAOM,EAAOY,SAI/BQ,EAASM,gBAAiBT,GAC1B5B,UAAUuC,SAAW9B,KAAKU,UAC1BnB,UAAUsC,OAAQP,GAIlBlC,cAAc2C,qBAAsBT,EAAU9B,eAE/C,CAMA,OAAAwC,GAEClC,MAAMkC,UAENhC,KAAKM,eAAe0B,UACpBhC,KAAKO,eAAeyB,UAEI,OAAnBhC,KAAKU,WAETV,KAAKU,UAAUsB,SAIjB,iBAIcvC","ignoreList":[]}