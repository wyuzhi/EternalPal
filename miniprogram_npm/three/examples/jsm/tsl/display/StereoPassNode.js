import{StereoCamera,Vector2,PassNode,RendererUtils}from"three/webgpu";import{nodeObject}from"three/tsl";const _size=new Vector2;let _rendererState;class StereoPassNode extends PassNode{static get type(){return"StereoPassNode"}constructor(e,t){super(PassNode.COLOR,e,t),this.isStereoPassNode=!0,this.stereo=new StereoCamera,this.stereo.aspect=.5}updateBefore(e){const{renderer:t}=e,{scene:r,camera:s,stereo:o,renderTarget:a}=this;_rendererState=RendererUtils.resetRendererState(t,_rendererState),this._pixelRatio=t.getPixelRatio(),o.cameraL.coordinateSystem=t.coordinateSystem,o.cameraR.coordinateSystem=t.coordinateSystem,o.update(s);const i=t.getSize(_size);this.setSize(i.width,i.height),t.autoClear=!1,this._cameraNear.value=s.near,this._cameraFar.value=s.far;for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(a),t.setMRT(this._mrt),t.clear(),a.scissorTest=!0,a.scissor.set(0,0,a.width/2,a.height),a.viewport.set(0,0,a.width/2,a.height),t.render(r,o.cameraL),a.scissor.set(a.width/2,0,a.width/2,a.height),a.viewport.set(a.width/2,0,a.width/2,a.height),t.render(r,o.cameraR),a.scissorTest=!1,RendererUtils.restoreRendererState(t,_rendererState)}}export default StereoPassNode;export const stereoPass=(e,t)=>nodeObject(new StereoPassNode(e,t));
//# sourceMappingURL=StereoPassNode.js.map