{"version":3,"file":"node_modules/three/examples/jsm/tsl/display/TransitionNode.js","names":["TempNode","nodeObject","Fn","float","uv","convertToTexture","vec4","If","int","clamp","sub","mix","TransitionNode","type","constructor","textureNodeA","textureNodeB","mixTextureNode","mixRatioNode","thresholdNode","useTextureNode","super","this","setup","sampleTexture","textureNode","uvNodeTexture","uvNode","sample","texelOne","texelTwo","color","toVar","equal","transitionTexel","r","mul","add","mixf","div","assign","Else","transition","nodeA","nodeB","mixRatio","threshold","useTexture"],"sources":["node_modules/three/examples/jsm/tsl/display/TransitionNode.js"],"sourcesContent":["import { TempNode } from 'three/webgpu';\nimport { nodeObject, Fn, float, uv, convertToTexture, vec4, If, int, clamp, sub, mix } from 'three/tsl';\n\n/**\n * Post processing node for creating a transition effect between scenes.\n *\n * @augments TempNode\n * @three_import import { transition } from 'three/addons/tsl/display/TransitionNode.js';\n */\nclass TransitionNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'TransitionNode';\n\n\t}\n\n\t/**\n\t * Constructs a new transition node.\n\t *\n\t * @param {TextureNode} textureNodeA - A texture node that represents the beauty pass of the first scene.\n\t * @param {TextureNode} textureNodeB - A texture node that represents the beauty pass of the second scene.\n\t * @param {TextureNode} mixTextureNode - A texture node that defines how the transition effect should look like.\n\t * @param {Node<float>} mixRatioNode - The interpolation factor that controls the mix.\n\t * @param {Node<float>} thresholdNode - Can be used to tweak the linear interpolation.\n\t * @param {Node<float>} useTextureNode - Whether `mixTextureNode` should influence the transition or not.\n\t */\n\tconstructor( textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * A texture node that represents the beauty pass of the first scene.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNodeA = textureNodeA;\n\n\t\t/**\n\t\t * A texture node that represents the beauty pass of the second scene.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNodeB = textureNodeB;\n\n\t\t/**\n\t\t * A texture that defines how the transition effect should look like.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.mixTextureNode = mixTextureNode;\n\n\t\t/**\n\t\t * The interpolation factor that controls the mix.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.mixRatioNode = mixRatioNode;\n\n\t\t/**\n\t\t * Can be used to tweak the linear interpolation.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.thresholdNode = thresholdNode;\n\n\t\t/**\n\t\t * Whether `mixTextureNode` should influence the transition or not.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.useTextureNode = useTextureNode;\n\n\t}\n\n\t/**\n\t * This method is used to setup the effect's TSL code.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {ShaderCallNodeInternal}\n\t */\n\tsetup() {\n\n\t\tconst { textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode } = this;\n\n\t\tconst sampleTexture = ( textureNode ) => {\n\n\t\t\tconst uvNodeTexture = textureNode.uvNode || uv();\n\t\t\treturn textureNode.sample( uvNodeTexture );\n\n\t\t};\n\n\t\tconst transition = Fn( () => {\n\n\t\t\tconst texelOne = sampleTexture( textureNodeA );\n\t\t\tconst texelTwo = sampleTexture( textureNodeB );\n\n\t\t\tconst color = vec4().toVar();\n\n\t\t\tIf( useTextureNode.equal( int( 1 ) ), () => {\n\n\t\t\t\tconst transitionTexel = sampleTexture( mixTextureNode );\n\t\t\t\tconst r = mixRatioNode.mul( thresholdNode.mul( 2.0 ).add( 1.0 ) ).sub( thresholdNode );\n\t\t\t\tconst mixf = clamp( sub( transitionTexel.r, r ).mul( float( 1.0 ).div( thresholdNode ) ), 0.0, 1.0 );\n\n\t\t\t\tcolor.assign( mix( texelOne, texelTwo, mixf ) );\n\n\t\t\t} ).Else( () => {\n\n\t\t\t\tcolor.assign( mix( texelTwo, texelOne, mixRatioNode ) );\n\n\t\t\t} );\n\n\t\t\treturn color;\n\n\t\t} );\n\n\t\tconst outputNode = transition();\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default TransitionNode;\n\n/**\n * TSL function for creating a transition node for post processing.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} nodeA - A texture node that represents the beauty pass of the first scene.\n * @param {Node<vec4>} nodeB - A texture node that represents the beauty pass of the second scene.\n * @param {Node<vec4>} mixTextureNode - A texture that defines how the transition effect should look like.\n * @param {Node<float> | number} mixRatio - The interpolation factor that controls the mix.\n * @param {Node<float> | number} threshold - Can be used to tweak the linear interpolation.\n * @param {Node<float> | number} useTexture - Whether `mixTextureNode` should influence the transition or not.\n * @returns {TransitionNode}\n */\nexport const transition = ( nodeA, nodeB, mixTextureNode, mixRatio, threshold, useTexture ) => nodeObject( new TransitionNode( convertToTexture( nodeA ), convertToTexture( nodeB ), convertToTexture( mixTextureNode ), nodeObject( mixRatio ), nodeObject( threshold ), nodeObject( useTexture ) ) );\n"],"mappings":"OAASA,aAAgB,sBAChBC,WAAYC,GAAIC,MAAOC,GAAIC,iBAAkBC,KAAMC,GAAIC,IAAKC,MAAOC,IAAKC,QAAW,YAQ5F,MAAMC,uBAAuBZ,SAE5B,eAAWa,GAEV,MAAO,gBAER,CAYA,WAAAC,CAAaC,EAAcC,EAAcC,EAAgBC,EAAcC,EAAeC,GAErFC,MAAO,QAOPC,KAAKP,aAAeA,EAOpBO,KAAKN,aAAeA,EAOpBM,KAAKL,eAAiBA,EAOtBK,KAAKJ,aAAeA,EAOpBI,KAAKH,cAAgBA,EAOrBG,KAAKF,eAAiBA,CAEvB,CAQA,KAAAG,GAEC,MAAMR,aAAEA,EAAYC,aAAEA,EAAYC,eAAEA,EAAcC,aAAEA,EAAYC,cAAEA,EAAaC,eAAEA,GAAmBE,KAE9FE,EAAkBC,IAEvB,MAAMC,EAAgBD,EAAYE,QAAUvB,KAC5C,OAAOqB,EAAYG,OAAQF,EAAe,EA+B3C,OA3BmBxB,IAAI,KAEtB,MAAM2B,EAAWL,EAAeT,GAC1Be,EAAWN,EAAeR,GAE1Be,EAAQzB,OAAO0B,QAgBrB,OAdAzB,GAAIa,EAAea,MAAOzB,IAAK,KAAO,KAErC,MAAM0B,EAAkBV,EAAeP,GACjCkB,EAAIjB,EAAakB,IAAKjB,EAAciB,IAAK,GAAMC,IAAK,IAAQ3B,IAAKS,GACjEmB,EAAO7B,MAAOC,IAAKwB,EAAgBC,EAAGA,GAAIC,IAAKjC,MAAO,GAAMoC,IAAKpB,IAAmB,EAAK,GAE/FY,EAAMS,OAAQ7B,IAAKkB,EAAUC,EAAUQ,GAAQ,IAE5CG,MAAM,KAETV,EAAMS,OAAQ7B,IAAKmB,EAAUD,EAAUX,GAAgB,IAIjDa,CAAK,GAIMW,EAIpB,iBAIc9B,sBAeR,MAAM8B,WAAa,CAAEC,EAAOC,EAAO3B,EAAgB4B,EAAUC,EAAWC,IAAgB9C,WAAY,IAAIW,eAAgBP,iBAAkBsC,GAAStC,iBAAkBuC,GAASvC,iBAAkBY,GAAkBhB,WAAY4C,GAAY5C,WAAY6C,GAAa7C,WAAY8C","ignoreList":[]}