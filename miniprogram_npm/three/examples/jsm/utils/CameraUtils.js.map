{"version":3,"file":"node_modules/three/examples/jsm/utils/CameraUtils.js","names":["MathUtils","Quaternion","Vector3","_va","_vb","_vc","_vr","_vu","_vn","_vec","_quat","frameCorners","camera","bottomLeftCorner","bottomRightCorner","topLeftCorner","estimateViewFrustum","pa","pb","pc","pe","position","n","near","f","far","copy","sub","normalize","crossVectors","d","dot","l","r","b","t","setFromUnitVectors","set","quaternion","applyQuaternion","multiply","projectionMatrix","projectionMatrixInverse","invert","fov","RAD2DEG","Math","min","aspect","atan","length"],"sources":["node_modules/three/examples/jsm/utils/CameraUtils.js"],"sourcesContent":["import {\n\tMathUtils,\n\tQuaternion,\n\tVector3\n} from 'three';\n\n/**\n * @module CameraUtils\n * @three_import import * as CameraUtils from 'three/addons/utils/CameraUtils.js';\n */\n\nconst _va = /*@__PURE__*/ new Vector3(), // from pe to pa\n\t_vb = /*@__PURE__*/ new Vector3(), // from pe to pb\n\t_vc = /*@__PURE__*/ new Vector3(), // from pe to pc\n\t_vr = /*@__PURE__*/ new Vector3(), // right axis of screen\n\t_vu = /*@__PURE__*/ new Vector3(), // up axis of screen\n\t_vn = /*@__PURE__*/ new Vector3(), // normal vector of screen\n\t_vec = /*@__PURE__*/ new Vector3(), // temporary vector\n\t_quat = /*@__PURE__*/ new Quaternion(); // temporary quaternion\n\n\n/**\n * Set projection matrix and the orientation of a perspective camera\n * to exactly frame the corners of an arbitrary rectangle.\n * NOTE: This function ignores the standard parameters;\n * do not call `updateProjectionMatrix()` after this.\n *\n * @param {PerspectiveCamera} camera - The camera.\n * @param {Vector3} bottomLeftCorner - The bottom-left corner point.\n * @param {Vector3} bottomRightCorner - The bottom-right corner point.\n * @param {Vector3} topLeftCorner - The top-left corner point.\n * @param {boolean} [estimateViewFrustum=false] - If set to `true`, the function tries to estimate the camera's FOV.\n */\nfunction frameCorners( camera, bottomLeftCorner, bottomRightCorner, topLeftCorner, estimateViewFrustum = false ) {\n\n\tconst pa = bottomLeftCorner, pb = bottomRightCorner, pc = topLeftCorner;\n\tconst pe = camera.position; // eye position\n\tconst n = camera.near; // distance of near clipping plane\n\tconst f = camera.far; //distance of far clipping plane\n\n\t_vr.copy( pb ).sub( pa ).normalize();\n\t_vu.copy( pc ).sub( pa ).normalize();\n\t_vn.crossVectors( _vr, _vu ).normalize();\n\n\t_va.copy( pa ).sub( pe ); // from pe to pa\n\t_vb.copy( pb ).sub( pe ); // from pe to pb\n\t_vc.copy( pc ).sub( pe ); // from pe to pc\n\n\tconst d = - _va.dot( _vn );\t// distance from eye to screen\n\tconst l = _vr.dot( _va ) * n / d; // distance to left screen edge\n\tconst r = _vr.dot( _vb ) * n / d; // distance to right screen edge\n\tconst b = _vu.dot( _va ) * n / d; // distance to bottom screen edge\n\tconst t = _vu.dot( _vc ) * n / d; // distance to top screen edge\n\n\t// Set the camera rotation to match the focal plane to the corners' plane\n\t_quat.setFromUnitVectors( _vec.set( 0, 1, 0 ), _vu );\n\tcamera.quaternion.setFromUnitVectors( _vec.set( 0, 0, 1 ).applyQuaternion( _quat ), _vn ).multiply( _quat );\n\n\t// Set the off-axis projection matrix to match the corners\n\tcamera.projectionMatrix.set( 2.0 * n / ( r - l ), 0.0,\n\t\t( r + l ) / ( r - l ), 0.0, 0.0,\n\t\t2.0 * n / ( t - b ),\n\t\t( t + b ) / ( t - b ), 0.0, 0.0, 0.0,\n\t\t( f + n ) / ( n - f ),\n\t\t2.0 * f * n / ( n - f ), 0.0, 0.0, - 1.0, 0.0 );\n\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t// FoV estimation to fix frustum culling\n\tif ( estimateViewFrustum ) {\n\n\t\t// Set fieldOfView to a conservative estimate\n\t\t// to make frustum tall/wide enough to encompass it\n\t\tcamera.fov =\n\t\t\tMathUtils.RAD2DEG / Math.min( 1.0, camera.aspect ) *\n\t\t\tMath.atan( ( _vec.copy( pb ).sub( pa ).length() +\n\t\t\t\t\t\t\t( _vec.copy( pc ).sub( pa ).length() ) ) / _va.length() );\n\n\t}\n\n}\n\nexport { frameCorners };\n"],"mappings":"OACCA,UACAC,WACAC,YACM,QAOP,MAAMC,IAAoB,IAAID,QAC7BE,IAAoB,IAAIF,QACxBG,IAAoB,IAAIH,QACxBI,IAAoB,IAAIJ,QACxBK,IAAoB,IAAIL,QACxBM,IAAoB,IAAIN,QACxBO,KAAqB,IAAIP,QACzBQ,MAAsB,IAAIT,WAe3B,SAASU,aAAcC,EAAQC,EAAkBC,EAAmBC,EAAeC,GAAsB,GAExG,MAAMC,EAAKJ,EAAkBK,EAAKJ,EAAmBK,EAAKJ,EACpDK,EAAKR,EAAOS,SACZC,EAAIV,EAAOW,KACXC,EAAIZ,EAAOa,IAEjBnB,IAAIoB,KAAMR,GAAKS,IAAKV,GAAKW,YACzBrB,IAAImB,KAAMP,GAAKQ,IAAKV,GAAKW,YACzBpB,IAAIqB,aAAcvB,IAAKC,KAAMqB,YAE7BzB,IAAIuB,KAAMT,GAAKU,IAAKP,GACpBhB,IAAIsB,KAAMR,GAAKS,IAAKP,GACpBf,IAAIqB,KAAMP,GAAKQ,IAAKP,GAEpB,MAAMU,GAAM3B,IAAI4B,IAAKvB,KACfwB,EAAI1B,IAAIyB,IAAK5B,KAAQmB,EAAIQ,EACzBG,EAAI3B,IAAIyB,IAAK3B,KAAQkB,EAAIQ,EACzBI,EAAI3B,IAAIwB,IAAK5B,KAAQmB,EAAIQ,EACzBK,EAAI5B,IAAIwB,IAAK1B,KAAQiB,EAAIQ,EAG/BpB,MAAM0B,mBAAoB3B,KAAK4B,IAAK,EAAG,EAAG,GAAK9B,KAC/CK,EAAO0B,WAAWF,mBAAoB3B,KAAK4B,IAAK,EAAG,EAAG,GAAIE,gBAAiB7B,OAASF,KAAMgC,SAAU9B,OAGpGE,EAAO6B,iBAAiBJ,IAAK,EAAMf,GAAMW,EAAID,GAAK,GAC/CC,EAAID,IAAQC,EAAID,GAAK,EAAK,EAC5B,EAAMV,GAAMa,EAAID,IACdC,EAAID,IAAQC,EAAID,GAAK,EAAK,EAAK,GAC/BV,EAAIF,IAAQA,EAAIE,GAClB,EAAMA,EAAIF,GAAMA,EAAIE,GAAK,EAAK,GAAO,EAAK,GAC3CZ,EAAO8B,wBAAwBhB,KAAMd,EAAO6B,kBAAmBE,SAG1D3B,IAIJJ,EAAOgC,IACN5C,UAAU6C,QAAUC,KAAKC,IAAK,EAAKnC,EAAOoC,QAC1CF,KAAKG,MAAQxC,KAAKiB,KAAMR,GAAKS,IAAKV,GAAKiC,SACjCzC,KAAKiB,KAAMP,GAAKQ,IAAKV,GAAKiC,UAAe/C,IAAI+C,UAItD,QAESvC","ignoreList":[]}