import{AnimationClip,AnimationMixer,Matrix4,Quaternion,QuaternionKeyframeTrack,SkeletonHelper,Vector3,VectorKeyframeTrack}from"three";function getBoneName(e,t){return void 0!==t.getBoneName?t.getBoneName(e):t.names[e.name]}function retarget(e,t,n={}){const o=new Quaternion,r=new Vector3,i=new Matrix4,a=new Matrix4;n.preserveBoneMatrix=void 0===n.preserveBoneMatrix||n.preserveBoneMatrix,n.preserveBonePositions=void 0===n.preserveBonePositions||n.preserveBonePositions,n.useTargetMatrix=void 0!==n.useTargetMatrix&&n.useTargetMatrix,n.hip=void 0!==n.hip?n.hip:"hip",n.hipInfluence=void 0!==n.hipInfluence?n.hipInfluence:new Vector3(1,1,1),n.scale=void 0!==n.scale?n.scale:1,n.names=n.names||{};const s=t.isObject3D?t.skeleton.bones:getBones(t),l=e.isObject3D?e.skeleton.bones:getBones(e);let p,c,u,m;if(e.isObject3D?e.skeleton.pose():(n.useTargetMatrix=!0,n.preserveBoneMatrix=!1),n.preserveBonePositions){m=[];for(let e=0;e<l.length;e++)m.push(l[e].position.clone())}if(n.preserveBoneMatrix){e.updateMatrixWorld(),e.matrixWorld.identity();for(let t=0;t<e.children.length;++t)e.children[t].updateMatrixWorld(!0)}for(let t=0;t<l.length;++t)p=l[t],c=getBoneName(p,n),u=getBoneByName(c,s),a.copy(p.matrixWorld),u&&(u.updateMatrixWorld(),n.useTargetMatrix?i.copy(u.matrixWorld):(i.copy(e.matrixWorld).invert(),i.multiply(u.matrixWorld)),r.setFromMatrixScale(i),i.scale(r.set(1/r.x,1/r.y,1/r.z)),a.makeRotationFromQuaternion(o.setFromRotationMatrix(i)),e.isObject3D&&n.localOffsets&&n.localOffsets[p.name]&&a.multiply(n.localOffsets[p.name]),a.copyPosition(i)),c===n.hip&&(a.elements[12]*=n.scale*n.hipInfluence.x,a.elements[13]*=n.scale*n.hipInfluence.y,a.elements[14]*=n.scale*n.hipInfluence.z,void 0!==n.hipPosition&&(a.elements[12]+=n.hipPosition.x*n.scale,a.elements[13]+=n.hipPosition.y*n.scale,a.elements[14]+=n.hipPosition.z*n.scale)),p.parent?(p.matrix.copy(p.parent.matrixWorld).invert(),p.matrix.multiply(a)):p.matrix.copy(a),p.matrix.decompose(p.position,p.quaternion,p.scale),p.updateMatrixWorld();if(n.preserveBonePositions)for(let e=0;e<l.length;++e)p=l[e],c=getBoneName(p,n)||p.name,c!==n.hip&&p.position.copy(m[e]);n.preserveBoneMatrix&&e.updateMatrixWorld(!0)}function retargetClip(e,t,n,o={}){o.useFirstFramePosition=void 0!==o.useFirstFramePosition&&o.useFirstFramePosition,o.fps=void 0!==o.fps?o.fps:Math.max(...n.tracks.map((e=>e.times.length)))/n.duration,o.names=o.names||[],t.isObject3D||(t=getHelperFromSkeleton(t));const r=Math.round(n.duration*(o.fps/1e3)*1e3),i=n.duration/(r-1),a=[],s=new AnimationMixer(t),l=getBones(e.skeleton),p=[];let c,u,m,d,f;s.clipAction(n).play();let x=0,h=r;void 0!==o.trim?(x=Math.round(o.trim[0]*o.fps),h=Math.min(Math.round(o.trim[1]*o.fps),r)-x,s.update(o.trim[0])):s.update(0),t.updateMatrixWorld();for(let n=0;n<h;++n){const r=n*i;retarget(e,t,o);for(let e=0;e<l.length;++e)u=l[e],f=getBoneName(u,o)||u.name,m=getBoneByName(f,t.skeleton),m&&(d=p[e]=p[e]||{bone:u},o.hip===f&&(d.pos||(d.pos={times:new Float32Array(h),values:new Float32Array(3*h)}),o.useFirstFramePosition&&(0===n&&(c=u.position.clone()),u.position.sub(c)),d.pos.times[n]=r,u.position.toArray(d.pos.values,3*n)),d.quat||(d.quat={times:new Float32Array(h),values:new Float32Array(4*h)}),d.quat.times[n]=r,u.quaternion.toArray(d.quat.values,4*n));n===h-2?s.update(i-1e-7):s.update(i),t.updateMatrixWorld()}for(let e=0;e<p.length;++e)d=p[e],d&&(d.pos&&a.push(new VectorKeyframeTrack(".bones["+d.bone.name+"].position",d.pos.times,d.pos.values)),a.push(new QuaternionKeyframeTrack(".bones["+d.bone.name+"].quaternion",d.quat.times,d.quat.values)));return s.uncacheAction(n),new AnimationClip(n.name,-1,a)}function clone(e){const t=new Map,n=new Map,o=e.clone();return parallelTraverse(e,o,(function(e,o){t.set(o,e),n.set(e,o)})),o.traverse((function(e){if(!e.isSkinnedMesh)return;const o=e,r=t.get(e),i=r.skeleton.bones;o.skeleton=r.skeleton.clone(),o.bindMatrix.copy(r.bindMatrix),o.skeleton.bones=i.map((function(e){return n.get(e)})),o.bind(o.skeleton,o.bindMatrix)})),o}function getBoneByName(e,t){for(let n=0,o=getBones(t);n<o.length;n++)if(e===o[n].name)return o[n]}function getBones(e){return Array.isArray(e)?e:e.bones}function getHelperFromSkeleton(e){const t=new SkeletonHelper(e.bones[0]);return t.skeleton=e,t}function parallelTraverse(e,t,n){n(e,t);for(let o=0;o<e.children.length;o++)parallelTraverse(e.children[o],t.children[o],n)}export{retarget,retargetClip,clone};
//# sourceMappingURL=SkeletonUtils.js.map