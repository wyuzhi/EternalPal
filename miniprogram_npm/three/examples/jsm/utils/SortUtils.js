const POWER=3,BIT_MAX=32,BIN_BITS=8,BIN_SIZE=256,BIN_MAX=255,ITERATIONS=4,bins=new Array(4),bins_buffer=new ArrayBuffer(5120);let c=0;for(let t=0;t<5;t++)bins[t]=new Uint32Array(bins_buffer,c,256),c+=1024;const defaultGet=t=>t;export const radixSort=(t,e)=>{const r=t.length,o=e||{},n=o.aux||new t.constructor(r),f=o.get||defaultGet,l=[t,n];let s,c,i;o.reversed?(s=(t,e)=>t<e,c=t=>{for(let e=254;e>=0;e--)t[e]+=t[e+1]},i=(t,e,r)=>{let o=0;for(let n=255;n>=0;n--){const f=t[n],l=f-o;0!=l&&(l>32?I(e+1,r+o,l):b(e+1,r+o,l),o=f)}}):(s=(t,e)=>t>e,c=t=>{for(let e=1;e<256;e++)t[e]+=t[e-1]},i=(t,e,r)=>{let o=0;for(let n=0;n<256;n++){const f=t[n],l=f-o;0!=l&&(l>32?I(e+1,r+o,l):b(e+1,r+o,l),o=f)}});const b=(t,e,r)=>{const o=l[1&t],n=l[t+1&1];for(let t=e+1;t<e+r;t++){const r=o[t],n=f(r)>>>0;let l=t;for(;l>e&&s(f(o[l-1])>>>0,n);)o[l]=o[--l];o[l]=r}if(1==(1&t))for(let t=e;t<e+r;t++)n[t]=o[t]},I=(t,e,r)=>{const o=l[1&t],n=l[t+1&1],s=3-t<<3,b=e+r,I=bins[t],a=bins[t+1];a.fill(0);for(let t=e;t<b;t++)a[f(o[t])>>>s&255]++;c(a),I.set(a);for(let t=b-1;t>=e;t--)n[e+--a[f(o[t])>>>s&255]]=o[t];3!=t&&i(I,t,e)};I(0,0,r)};
//# sourceMappingURL=SortUtils.js.map