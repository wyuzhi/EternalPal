{"version":3,"file":"node_modules/three/examples/jsm/utils/SortUtils.js","names":["POWER","BIT_MAX","BIN_BITS","BIN_SIZE","BIN_MAX","ITERATIONS","bins","Array","bins_buffer","ArrayBuffer","c","i","Uint32Array","defaultGet","el","radixSort","arr","opt","len","length","options","aux","constructor","get","data","compare","accumulate","recurse","reversed","a","b","bin","j","cache","depth","start","prev","cur","diff","radixSortBlock","insertionSortBlock","p","t","shift","end","fill","set"],"sources":["node_modules/three/examples/jsm/utils/SortUtils.js"],"sourcesContent":["\n/**\n * @module SortUtils\n * @three_import import * as SortUtils from 'three/addons/utils/SortUtils.js';\n */\n\nconst POWER = 3;\nconst BIT_MAX = 32;\nconst BIN_BITS = 1 << POWER;\nconst BIN_SIZE = 1 << BIN_BITS;\nconst BIN_MAX = BIN_SIZE - 1;\nconst ITERATIONS = BIT_MAX / BIN_BITS;\n\nconst bins = new Array( ITERATIONS );\nconst bins_buffer = new ArrayBuffer( ( ITERATIONS + 1 ) * BIN_SIZE * 4 );\n\nlet c = 0;\nfor ( let i = 0; i < ( ITERATIONS + 1 ); i ++ ) {\n\n\tbins[ i ] = new Uint32Array( bins_buffer, c, BIN_SIZE );\n\tc += BIN_SIZE * 4;\n\n}\n\nconst defaultGet = ( el ) => el;\n\n/**\n * Hybrid radix sort from.\n *\n * - {@link https://gist.github.com/sciecode/93ed864dd77c5c8803c6a86698d68dab}\n * - {@link https://github.com/mrdoob/three.js/pull/27202#issuecomment-1817640271}\n *\n * Expects unsigned 32b integer values.\n *\n * @function\n * @param {Array<Object>} arr - The array to sort.\n * @param {Object} opt - The options\n */\nexport const radixSort = ( arr, opt ) => {\n\n\tconst len = arr.length;\n\n\tconst options = opt || {};\n\tconst aux = options.aux || new arr.constructor( len );\n\tconst get = options.get || defaultGet;\n\n\tconst data = [ arr, aux ];\n\n\tlet compare, accumulate, recurse;\n\n\tif ( options.reversed ) {\n\n\t\tcompare = ( a, b ) => a < b;\n\t\taccumulate = ( bin ) => {\n\n\t\t\tfor ( let j = BIN_SIZE - 2; j >= 0; j -- )\n\t\t\t\tbin[ j ] += bin[ j + 1 ];\n\n\t\t};\n\n\t\trecurse = ( cache, depth, start ) => {\n\n\t\t\tlet prev = 0;\n\t\t\tfor ( let j = BIN_MAX; j >= 0; j -- ) {\n\n\t\t\t\tconst cur = cache[ j ], diff = cur - prev;\n\t\t\t\tif ( diff != 0 ) {\n\n\t\t\t\t\tif ( diff > 32 )\n\t\t\t\t\t\tradixSortBlock( depth + 1, start + prev, diff );\n\t\t\t\t\telse\n\t\t\t\t\t\tinsertionSortBlock( depth + 1, start + prev, diff );\n\t\t\t\t\tprev = cur;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t} else {\n\n\t\tcompare = ( a, b ) => a > b;\n\t\taccumulate = ( bin ) => {\n\n\t\t\tfor ( let j = 1; j < BIN_SIZE; j ++ )\n\t\t\t\tbin[ j ] += bin[ j - 1 ];\n\n\t\t};\n\n\t\trecurse = ( cache, depth, start ) => {\n\n\t\t\tlet prev = 0;\n\t\t\tfor ( let j = 0; j < BIN_SIZE; j ++ ) {\n\n\t\t\t\tconst cur = cache[ j ], diff = cur - prev;\n\t\t\t\tif ( diff != 0 ) {\n\n\t\t\t\t\tif ( diff > 32 )\n\t\t\t\t\t\tradixSortBlock( depth + 1, start + prev, diff );\n\t\t\t\t\telse\n\t\t\t\t\t\tinsertionSortBlock( depth + 1, start + prev, diff );\n\t\t\t\t\tprev = cur;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tconst insertionSortBlock = ( depth, start, len ) => {\n\n\t\tconst a = data[ depth & 1 ];\n\t\tconst b = data[ ( depth + 1 ) & 1 ];\n\n\t\tfor ( let j = start + 1; j < start + len; j ++ ) {\n\n\t\t\tconst p = a[ j ], t = get( p ) >>> 0;\n\t\t\tlet i = j;\n\t\t\twhile ( i > start ) {\n\n\t\t\t\tif ( compare( get( a[ i - 1 ] ) >>> 0, t ) )\n\t\t\t\t\ta[ i ] = a[ -- i ];\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\ta[ i ] = p;\n\n\t\t}\n\n\t\tif ( ( depth & 1 ) == 1 ) {\n\n\t\t\tfor ( let i = start; i < start + len; i ++ )\n\t\t\t\tb[ i ] = a[ i ];\n\n\t\t}\n\n\t};\n\n\tconst radixSortBlock = ( depth, start, len ) => {\n\n\t\tconst a = data[ depth & 1 ];\n\t\tconst b = data[ ( depth + 1 ) & 1 ];\n\n\t\tconst shift = ( 3 - depth ) << POWER;\n\t\tconst end = start + len;\n\n\t\tconst cache = bins[ depth ];\n\t\tconst bin = bins[ depth + 1 ];\n\n\t\tbin.fill( 0 );\n\n\t\tfor ( let j = start; j < end; j ++ )\n\t\t\tbin[ ( get( a[ j ] ) >>> shift ) & BIN_MAX ] ++;\n\n\t\taccumulate( bin );\n\n\t\tcache.set( bin );\n\n\t\tfor ( let j = end - 1; j >= start; j -- )\n\t\t\tb[ start + -- bin[ ( get( a[ j ] ) >>> shift ) & BIN_MAX ] ] = a[ j ];\n\n\t\tif ( depth == ITERATIONS - 1 ) return;\n\n\t\trecurse( cache, depth, start );\n\n\t};\n\n\tradixSortBlock( 0, 0, len );\n\n};\n"],"mappings":"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","ignoreList":[]}