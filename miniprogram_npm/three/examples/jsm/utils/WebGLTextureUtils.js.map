{"version":3,"file":"node_modules/three/examples/jsm/utils/WebGLTextureUtils.js","names":["PlaneGeometry","ShaderMaterial","Uniform","Mesh","PerspectiveCamera","Scene","WebGLRenderer","CanvasTexture","SRGBColorSpace","_renderer","fullscreenQuadGeometry","fullscreenQuadMaterial","fullscreenQuad","decompress","texture","maxTextureSize","Infinity","renderer","uniforms","blitTexture","vertexShader","fragmentShader","value","defines","IS_SRGB","colorSpace","needsUpdate","frustumCulled","_camera","_scene","add","antialias","width","Math","min","image","height","setSize","clear","render","canvas","document","createElement","context","getContext","drawImage","domElement","readableTexture","minFilter","magFilter","wrapS","wrapT","name","forceContextLoss","dispose"],"sources":["node_modules/three/examples/jsm/utils/WebGLTextureUtils.js"],"sourcesContent":["import {\n\tPlaneGeometry,\n\tShaderMaterial,\n\tUniform,\n\tMesh,\n\tPerspectiveCamera,\n\tScene,\n\tWebGLRenderer,\n\tCanvasTexture,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * @module WebGLTextureUtils\n * @three_import import * as WebGLTextureUtils from 'three/addons/utils/WebGLTextureUtils.js';\n */\n\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\n\n/**\n * Returns an uncompressed version of the given compressed texture.\n *\n * This module can only be used with {@link WebGLRenderer}. When using {@link WebGPURenderer},\n * import the function from {@link WebGPUTextureUtils}.\n *\n * @param {CompressedTexture} texture - The compressed texture.\n * @param {number} [maxTextureSize=Infinity] - The maximum size of the uncompressed texture.\n * @param {?WebGLRenderer} [renderer=null] - A reference to a renderer.\n * @return {CanvasTexture} The uncompressed texture.\n */\nexport function decompress( texture, maxTextureSize = Infinity, renderer = null ) {\n\n\tif ( ! fullscreenQuadGeometry ) fullscreenQuadGeometry = new PlaneGeometry( 2, 2, 1, 1 );\n\tif ( ! fullscreenQuadMaterial ) fullscreenQuadMaterial = new ShaderMaterial( {\n\t\tuniforms: { blitTexture: new Uniform( texture ) },\n\t\tvertexShader: `\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main(){\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = vec4(position.xy * 1.0,0.,.999999);\n\t\t\t}`,\n\t\tfragmentShader: `\n\t\t\tuniform sampler2D blitTexture; \n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main(){ \n\t\t\t\tgl_FragColor = vec4(vUv.xy, 0, 1);\n\t\t\t\t\n\t\t\t\t#ifdef IS_SRGB\n\t\t\t\tgl_FragColor = sRGBTransferOETF( texture2D( blitTexture, vUv) );\n\t\t\t\t#else\n\t\t\t\tgl_FragColor = texture2D( blitTexture, vUv);\n\t\t\t\t#endif\n\t\t\t}`\n\t} );\n\n\tfullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n\tfullscreenQuadMaterial.defines.IS_SRGB = texture.colorSpace == SRGBColorSpace;\n\tfullscreenQuadMaterial.needsUpdate = true;\n\n\tif ( ! fullscreenQuad ) {\n\n\t\tfullscreenQuad = new Mesh( fullscreenQuadGeometry, fullscreenQuadMaterial );\n\t\tfullscreenQuad.frustumCulled = false;\n\n\t}\n\n\tconst _camera = new PerspectiveCamera();\n\tconst _scene = new Scene();\n\t_scene.add( fullscreenQuad );\n\n\tif ( renderer === null ) {\n\n\t\trenderer = _renderer = new WebGLRenderer( { antialias: false } );\n\n\t}\n\n\tconst width = Math.min( texture.image.width, maxTextureSize );\n\tconst height = Math.min( texture.image.height, maxTextureSize );\n\n\trenderer.setSize( width, height );\n\trenderer.clear();\n\trenderer.render( _scene, _camera );\n\n\tconst canvas = document.createElement( 'canvas' );\n\tconst context = canvas.getContext( '2d' );\n\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tcontext.drawImage( renderer.domElement, 0, 0, width, height );\n\n\tconst readableTexture = new CanvasTexture( canvas );\n\n\treadableTexture.minFilter = texture.minFilter;\n\treadableTexture.magFilter = texture.magFilter;\n\treadableTexture.wrapS = texture.wrapS;\n\treadableTexture.wrapT = texture.wrapT;\n\treadableTexture.colorSpace = texture.colorSpace;\n\treadableTexture.name = texture.name;\n\n\tif ( _renderer ) {\n\n\t\t_renderer.forceContextLoss();\n\t\t_renderer.dispose();\n\t\t_renderer = null;\n\n\t}\n\n\treturn readableTexture;\n\n}\n"],"mappings":"OACCA,cACAC,eACAC,QACAC,KACAC,kBACAC,MACAC,cACAC,cACAC,mBACM,QAOP,IAAIC,UACAC,uBACAC,uBACAC,sBAaG,SAASC,WAAYC,EAASC,EAAiBC,IAAUC,EAAW,MAEnEP,yBAAyBA,uBAAyB,IAAIV,cAAe,EAAG,EAAG,EAAG,IAC9EW,yBAAyBA,uBAAyB,IAAIV,eAAgB,CAC5EiB,SAAU,CAAEC,YAAa,IAAIjB,QAASY,IACtCM,aAAc,uIAMdC,eAAgB,mVAejBV,uBAAuBO,SAASC,YAAYG,MAAQR,EACpDH,uBAAuBY,QAAQC,QAAUV,EAAQW,YAAcjB,eAC/DG,uBAAuBe,aAAc,EAE9Bd,iBAENA,eAAiB,IAAIT,KAAMO,uBAAwBC,wBACnDC,eAAee,eAAgB,GAIhC,MAAMC,EAAU,IAAIxB,kBACdyB,EAAS,IAAIxB,MACnBwB,EAAOC,IAAKlB,gBAEM,OAAbK,IAEJA,EAAWR,UAAY,IAAIH,cAAe,CAAEyB,WAAW,KAIxD,MAAMC,EAAQC,KAAKC,IAAKpB,EAAQqB,MAAMH,MAAOjB,GACvCqB,EAASH,KAAKC,IAAKpB,EAAQqB,MAAMC,OAAQrB,GAE/CE,EAASoB,QAASL,EAAOI,GACzBnB,EAASqB,QACTrB,EAASsB,OAAQV,EAAQD,GAEzB,MAAMY,EAASC,SAASC,cAAe,UACjCC,EAAUH,EAAOI,WAAY,MAEnCJ,EAAOR,MAAQA,EACfQ,EAAOJ,OAASA,EAEhBO,EAAQE,UAAW5B,EAAS6B,WAAY,EAAG,EAAGd,EAAOI,GAErD,MAAMW,EAAkB,IAAIxC,cAAeiC,GAiB3C,OAfAO,EAAgBC,UAAYlC,EAAQkC,UACpCD,EAAgBE,UAAYnC,EAAQmC,UACpCF,EAAgBG,MAAQpC,EAAQoC,MAChCH,EAAgBI,MAAQrC,EAAQqC,MAChCJ,EAAgBtB,WAAaX,EAAQW,WACrCsB,EAAgBK,KAAOtC,EAAQsC,KAE1B3C,YAEJA,UAAU4C,mBACV5C,UAAU6C,UACV7C,UAAY,MAINsC,CAER","ignoreList":[]}