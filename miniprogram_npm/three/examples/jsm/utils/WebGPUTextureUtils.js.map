{"version":3,"file":"node_modules/three/examples/jsm/utils/WebGPUTextureUtils.js","names":["QuadMesh","NodeMaterial","WebGPURenderer","CanvasTexture","texture","uv","_renderer","_quadMesh","async","decompress","blitTexture","maxTextureSize","Infinity","renderer","init","material","fragmentNode","flipY","width","Math","min","image","height","currentOutputColorSpace","outputColorSpace","setSize","colorSpace","render","canvas","document","createElement","context","getContext","drawImage","domElement","readableTexture","minFilter","magFilter","wrapS","wrapT","name","dispose"],"sources":["node_modules/three/examples/jsm/utils/WebGPUTextureUtils.js"],"sourcesContent":["import {\n\tQuadMesh,\n\tNodeMaterial,\n\tWebGPURenderer,\n\tCanvasTexture\n} from 'three';\nimport { texture, uv } from 'three/tsl';\n\n/**\n * @module WebGPUTextureUtils\n * @three_import import * as WebGPUTextureUtils from 'three/addons/utils/WebGPUTextureUtils.js';\n */\n\nlet _renderer;\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\n\n/**\n * Returns an uncompressed version of the given compressed texture.\n *\n * This module can only be used with {@link WebGPURenderer}. When using {@link WebGLRenderer},\n * import the function from {@link WebGLTextureUtils}.\n *\n * @async\n * @param {CompressedTexture} blitTexture - The compressed texture.\n * @param {number} [maxTextureSize=Infinity] - The maximum size of the uncompressed texture.\n * @param {?WebGPURenderer} [renderer=null] - A reference to a renderer.\n * @return {Promise<CanvasTexture>} A Promise that resolved with the uncompressed texture.\n */\nexport async function decompress( blitTexture, maxTextureSize = Infinity, renderer = null ) {\n\n\tif ( renderer === null ) {\n\n\t\trenderer = _renderer = new WebGPURenderer();\n\t\tawait renderer.init();\n\n\t}\n\n\tconst material = new NodeMaterial();\n\n\tmaterial.fragmentNode = texture( blitTexture, uv().flipY() );\n\n\tconst width = Math.min( blitTexture.image.width, maxTextureSize );\n\tconst height = Math.min( blitTexture.image.height, maxTextureSize );\n\n\tconst currentOutputColorSpace = renderer.outputColorSpace;\n\n\trenderer.setSize( width, height );\n\trenderer.outputColorSpace = blitTexture.colorSpace;\n\n\t_quadMesh.material = material;\n\t_quadMesh.render( renderer );\n\n\trenderer.outputColorSpace = currentOutputColorSpace;\n\n\tconst canvas = document.createElement( 'canvas' );\n\tconst context = canvas.getContext( '2d' );\n\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\tcontext.drawImage( renderer.domElement, 0, 0, width, height );\n\n\tconst readableTexture = new CanvasTexture( canvas );\n\n\treadableTexture.minFilter = blitTexture.minFilter;\n\treadableTexture.magFilter = blitTexture.magFilter;\n\treadableTexture.wrapS = blitTexture.wrapS;\n\treadableTexture.wrapT = blitTexture.wrapT;\n\treadableTexture.colorSpace = blitTexture.colorSpace;\n\treadableTexture.name = blitTexture.name;\n\n\tif ( _renderer !== null ) {\n\n\t\t_renderer.dispose();\n\t\t_renderer = null;\n\n\t}\n\n\treturn readableTexture;\n\n}\n"],"mappings":"OACCA,SACAC,aACAC,eACAC,kBACM,eACEC,QAASC,OAAU,YAO5B,IAAIC,UACJ,MAAMC,UAA0B,IAAIP,gBAc7BQ,eAAeC,WAAYC,EAAaC,EAAiBC,IAAUC,EAAW,MAElE,OAAbA,IAEJA,EAAWP,UAAY,IAAIJ,qBACrBW,EAASC,QAIhB,MAAMC,EAAW,IAAId,aAErBc,EAASC,aAAeZ,QAASM,EAAaL,KAAKY,SAEnD,MAAMC,EAAQC,KAAKC,IAAKV,EAAYW,MAAMH,MAAOP,GAC3CW,EAASH,KAAKC,IAAKV,EAAYW,MAAMC,OAAQX,GAE7CY,EAA0BV,EAASW,iBAEzCX,EAASY,QAASP,EAAOI,GACzBT,EAASW,iBAAmBd,EAAYgB,WAExCnB,UAAUQ,SAAWA,EACrBR,UAAUoB,OAAQd,GAElBA,EAASW,iBAAmBD,EAE5B,MAAMK,EAASC,SAASC,cAAe,UACjCC,EAAUH,EAAOI,WAAY,MAEnCJ,EAAOV,MAAQA,EACfU,EAAON,OAASA,EAEhBS,EAAQE,UAAWpB,EAASqB,WAAY,EAAG,EAAGhB,EAAOI,GAErD,MAAMa,EAAkB,IAAIhC,cAAeyB,GAgB3C,OAdAO,EAAgBC,UAAY1B,EAAY0B,UACxCD,EAAgBE,UAAY3B,EAAY2B,UACxCF,EAAgBG,MAAQ5B,EAAY4B,MACpCH,EAAgBI,MAAQ7B,EAAY6B,MACpCJ,EAAgBT,WAAahB,EAAYgB,WACzCS,EAAgBK,KAAO9B,EAAY8B,KAEhB,OAAdlC,YAEJA,UAAUmC,UACVnC,UAAY,MAIN6B,CAER","ignoreList":[]}