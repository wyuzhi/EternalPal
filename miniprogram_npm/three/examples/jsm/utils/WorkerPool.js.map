{"version":3,"file":"node_modules/three/examples/jsm/utils/WorkerPool.js","names":["WorkerPool","constructor","pool","this","queue","workers","workersResolve","workerStatus","workerCreator","_initWorker","workerId","worker","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","length","transfer","shift","postMessage","setWorkerCreator","setWorkerLimit","Promise","push","dispose","forEach","terminate"],"sources":["node_modules/three/examples/jsm/utils/WorkerPool.js"],"sourcesContent":["/**\n * A simple pool for managing Web Workers.\n *\n * @three_import import { WorkerPool } from 'three/addons/utils/WorkerPool.js';\n */\nexport class WorkerPool {\n\n\t/**\n\t * Constructs a new Worker pool.\n\t *\n\t * @param {number} [pool=4] - The size of the pool.\n\t */\n\tconstructor( pool = 4 ) {\n\n\t\t/**\n\t\t * The size of the pool.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 4\n\t\t */\n\t\tthis.pool = pool;\n\n\t\t/**\n\t\t * A message queue.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.queue = [];\n\n\t\t/**\n\t\t * An array of Workers.\n\t\t *\n\t\t * @type {Array<Worker>}\n\t\t */\n\t\tthis.workers = [];\n\n\t\t/**\n\t\t * An array with resolve functions for messages.\n\t\t *\n\t\t * @type {Array<Function>}\n\t\t */\n\t\tthis.workersResolve = [];\n\n\t\t/**\n\t\t * The current worker status.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.workerStatus = 0;\n\n\t\t/**\n\t\t * A factory function for creating workers.\n\t\t *\n\t\t * @type {?Function}\n\t\t */\n\t\tthis.workerCreator = null;\n\n\t}\n\n\t_initWorker( workerId ) {\n\n\t\tif ( ! this.workers[ workerId ] ) {\n\n\t\t\tconst worker = this.workerCreator();\n\t\t\tworker.addEventListener( 'message', this._onMessage.bind( this, workerId ) );\n\t\t\tthis.workers[ workerId ] = worker;\n\n\t\t}\n\n\t}\n\n\t_getIdleWorker() {\n\n\t\tfor ( let i = 0; i < this.pool; i ++ )\n\t\t\tif ( ! ( this.workerStatus & ( 1 << i ) ) ) return i;\n\n\t\treturn - 1;\n\n\t}\n\n\t_onMessage( workerId, msg ) {\n\n\t\tconst resolve = this.workersResolve[ workerId ];\n\t\tresolve && resolve( msg );\n\n\t\tif ( this.queue.length ) {\n\n\t\t\tconst { resolve, msg, transfer } = this.queue.shift();\n\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t} else {\n\n\t\t\tthis.workerStatus ^= 1 << workerId;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets a function that is responsible for creating Workers.\n\t *\n\t * @param {Function} workerCreator - The worker creator function.\n\t */\n\tsetWorkerCreator( workerCreator ) {\n\n\t\tthis.workerCreator = workerCreator;\n\n\t}\n\n\t/**\n\t * Sets the Worker limit\n\t *\n\t * @param {number} pool - The size of the pool.\n\t */\n\tsetWorkerLimit( pool ) {\n\n\t\tthis.pool = pool;\n\n\t}\n\n\t/**\n\t * Post a message to an idle Worker. If no Worker is available,\n\t * the message is pushed into a message queue for later processing.\n\t *\n\t * @param {Object} msg - The message.\n\t * @param {Array<ArrayBuffer>} transfer - An array with array buffers for data transfer.\n\t * @return {Promise} A Promise that resolves when the message has been processed.\n\t */\n\tpostMessage( msg, transfer ) {\n\n\t\treturn new Promise( ( resolve ) => {\n\n\t\t\tconst workerId = this._getIdleWorker();\n\n\t\t\tif ( workerId !== - 1 ) {\n\n\t\t\t\tthis._initWorker( workerId );\n\t\t\t\tthis.workerStatus |= 1 << workerId;\n\t\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t\t} else {\n\n\t\t\t\tthis.queue.push( { resolve, msg, transfer } );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Terminates all Workers of this pool. Call this  method whenever this\n\t * Worker pool is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.workers.forEach( ( worker ) => worker.terminate() );\n\t\tthis.workersResolve.length = 0;\n\t\tthis.workers.length = 0;\n\t\tthis.queue.length = 0;\n\t\tthis.workerStatus = 0;\n\n\t}\n\n}\n"],"mappings":"OAKO,MAAMA,WAOZ,WAAAC,CAAaC,EAAO,GAQnBC,KAAKD,KAAOA,EAOZC,KAAKC,MAAQ,GAObD,KAAKE,QAAU,GAOfF,KAAKG,eAAiB,GAOtBH,KAAKI,aAAe,EAOpBJ,KAAKK,cAAgB,IAEtB,CAEA,WAAAC,CAAaC,GAEZ,IAAOP,KAAKE,QAASK,GAAa,CAEjC,MAAMC,EAASR,KAAKK,gBACpBG,EAAOC,iBAAkB,UAAWT,KAAKU,WAAWC,KAAMX,KAAMO,IAChEP,KAAKE,QAASK,GAAaC,CAE5B,CAED,CAEA,cAAAI,GAEC,IAAM,IAAIC,EAAI,EAAGA,EAAIb,KAAKD,KAAMc,IAC/B,KAASb,KAAKI,aAAiB,GAAKS,GAAQ,OAAOA,EAEpD,OAAS,CAEV,CAEA,UAAAH,CAAYH,EAAUO,GAErB,MAAMC,EAAUf,KAAKG,eAAgBI,GAGrC,GAFAQ,GAAWA,EAASD,GAEfd,KAAKC,MAAMe,OAAS,CAExB,MAAMD,QAAEA,EAAOD,IAAEA,EAAGG,SAAEA,GAAajB,KAAKC,MAAMiB,QAC9ClB,KAAKG,eAAgBI,GAAaQ,EAClCf,KAAKE,QAASK,GAAWY,YAAaL,EAAKG,EAE5C,MAECjB,KAAKI,cAAgB,GAAKG,CAI5B,CAOA,gBAAAa,CAAkBf,GAEjBL,KAAKK,cAAgBA,CAEtB,CAOA,cAAAgB,CAAgBtB,GAEfC,KAAKD,KAAOA,CAEb,CAUA,WAAAoB,CAAaL,EAAKG,GAEjB,OAAO,IAAIK,SAAWP,IAErB,MAAMR,EAAWP,KAAKY,kBAEF,IAAfL,GAEJP,KAAKM,YAAaC,GAClBP,KAAKI,cAAgB,GAAKG,EAC1BP,KAAKG,eAAgBI,GAAaQ,EAClCf,KAAKE,QAASK,GAAWY,YAAaL,EAAKG,IAI3CjB,KAAKC,MAAMsB,KAAM,CAAER,UAASD,MAAKG,YAElC,GAIF,CAMA,OAAAO,GAECxB,KAAKE,QAAQuB,SAAWjB,GAAYA,EAAOkB,cAC3C1B,KAAKG,eAAea,OAAS,EAC7BhB,KAAKE,QAAQc,OAAS,EACtBhB,KAAKC,MAAMe,OAAS,EACpBhB,KAAKI,aAAe,CAErB","ignoreList":[]}