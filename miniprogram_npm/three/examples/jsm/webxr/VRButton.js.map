{"version":3,"file":"node_modules/three/examples/jsm/webxr/VRButton.js","names":["VRButton","createButton","renderer","sessionInit","button","document","createElement","disableButton","style","display","cursor","left","width","onmouseenter","onmouseleave","onclick","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","opacity","outline","zIndex","navigator","id","xr","isSessionSupported","then","supported","currentSession","async","onSessionStarted","session","addEventListener","onSessionEnded","setSession","textContent","removeEventListener","sessionOptions","optionalFeatures","requestSession","end","undefined","offerSession","catch","err","console","warn","showEnterVR","xrSessionIsGranted","click","exception","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener","test","userAgent"],"sources":["node_modules/three/examples/jsm/webxr/VRButton.js"],"sourcesContent":["/**\n * A utility class for creating a button that allows to initiate\n * immersive VR sessions based on WebXR. The button can be created\n * with a factory method and then appended ot the website's DOM.\n *\n * ```js\n * document.body.appendChild( VRButton.createButton( renderer ) );\n * ```\n *\n * @hideconstructor\n * @three_import import { VRButton } from 'three/addons/webxr/VRButton.js';\n */\nclass VRButton {\n\n\t/**\n\t * Constructs a new VR button.\n\t *\n\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t * @param {XRSessionInit} [sessionInit] - The a configuration object for the AR session.\n\t * @return {HTMLElement} The button or an error message if `immersive-ar` isn't supported.\n\t */\n\tstatic createButton( renderer, sessionInit = {} ) {\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t// be requested separately.)\n\n\t\t\tconst sessionOptions = {\n\t\t\t\t...sessionInit,\n\t\t\t\toptionalFeatures: [\n\t\t\t\t\t'local-floor',\n\t\t\t\t\t'bounded-floor',\n\t\t\t\t\t'layers',\n\t\t\t\t\t...( sessionInit.optionalFeatures || [] )\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tif ( navigator.xr.offerSession !== undefined ) {\n\n\t\t\t\tnavigator.xr.offerSession( 'immersive-vr', sessionOptions )\n\t\t\t\t\t.then( onSessionStarted )\n\t\t\t\t\t.catch( ( err ) => {\n\n\t\t\t\t\t\tconsole.warn( err );\n\n\t\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction showVRNotAllowed( exception ) {\n\n\t\t\tdisableButton();\n\n\t\t\tconsole.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n\t\t\tbutton.textContent = 'VR NOT ALLOWED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} ).catch( showVRNotAllowed );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Registers a `sessiongranted` event listener. When a session is granted, the {@link VRButton#xrSessionIsGranted}\n\t * flag will evaluate to `true`. This method is automatically called by the module itself so there\n\t * should be no need to use it on app level.\n\t */\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n\t\t\t// WebXRViewer (based on Firefox) has a bug where addEventListener\n\t\t\t// throws a silent exception and aborts execution entirely.\n\t\t\tif ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Whether a XR session has been granted or not.\n *\n * @static\n * @type {boolean}\n * @default false\n */\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n"],"mappings":"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","ignoreList":[]}