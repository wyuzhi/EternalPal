{"version":3,"file":"node_modules/three/examples/jsm/webxr/XREstimatedLight.js","names":["DirectionalLight","Group","LightProbe","WebGLCubeRenderTarget","SessionLightProbe","constructor","xrLight","renderer","lightProbe","environmentEstimation","estimationStartCallback","this","xrWebGLBinding","frameCallback","onXRFrame","bind","session","xr","getSession","window","cubeRenderTarget","environment","texture","gl","getContext","preferredReflectionFormat","getExtension","XRWebGLBinding","addEventListener","updateReflection","requestAnimationFrame","textureProperties","properties","get","cubeMap","getReflectionCubeMap","__webglTexture","needsPMREMUpdate","time","xrFrame","lightEstimate","getLightEstimate","sh","fromArray","sphericalHarmonicsCoefficients","intensity","intensityScalar","Math","max","primaryLightIntensity","x","y","z","directionalLight","color","setRGB","position","copy","primaryLightDirection","dispose","XREstimatedLight","super","add","sessionLightProbe","estimationStarted","requestLightProbe","reflectionFormat","then","probe","dispatchEvent","type","remove"],"sources":["node_modules/three/examples/jsm/webxr/XREstimatedLight.js"],"sourcesContent":["import {\n\tDirectionalLight,\n\tGroup,\n\tLightProbe,\n\tWebGLCubeRenderTarget\n} from 'three';\n\nclass SessionLightProbe {\n\n\tconstructor( xrLight, renderer, lightProbe, environmentEstimation, estimationStartCallback ) {\n\n\t\tthis.xrLight = xrLight;\n\t\tthis.renderer = renderer;\n\t\tthis.lightProbe = lightProbe;\n\t\tthis.xrWebGLBinding = null;\n\t\tthis.estimationStartCallback = estimationStartCallback;\n\t\tthis.frameCallback = this.onXRFrame.bind( this );\n\n\t\tconst session = renderer.xr.getSession();\n\n\t\t// If the XRWebGLBinding class is available then we can also query an\n\t\t// estimated reflection cube map.\n\t\tif ( environmentEstimation && 'XRWebGLBinding' in window ) {\n\n\t\t\t// This is the simplest way I know of to initialize a WebGL cubemap in Three.\n\t\t\tconst cubeRenderTarget = new WebGLCubeRenderTarget( 16 );\n\t\t\txrLight.environment = cubeRenderTarget.texture;\n\n\t\t\tconst gl = renderer.getContext();\n\n\t\t\t// Ensure that we have any extensions needed to use the preferred cube map format.\n\t\t\tswitch ( session.preferredReflectionFormat ) {\n\n\t\t\t\tcase 'srgba8':\n\t\t\t\t\tgl.getExtension( 'EXT_sRGB' );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rgba16f':\n\t\t\t\t\tgl.getExtension( 'OES_texture_half_float' );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.xrWebGLBinding = new XRWebGLBinding( session, gl );\n\n\t\t\tthis.lightProbe.addEventListener( 'reflectionchange', () => {\n\n\t\t\t\tthis.updateReflection();\n\n\t\t\t} );\n\n\t\t}\n\n\t\t// Start monitoring the XR animation frame loop to look for lighting\n\t\t// estimation changes.\n\t\tsession.requestAnimationFrame( this.frameCallback );\n\n\t}\n\n\tupdateReflection() {\n\n\t\tconst textureProperties = this.renderer.properties.get( this.xrLight.environment );\n\n\t\tif ( textureProperties ) {\n\n\t\t\tconst cubeMap = this.xrWebGLBinding.getReflectionCubeMap( this.lightProbe );\n\n\t\t\tif ( cubeMap ) {\n\n\t\t\t\ttextureProperties.__webglTexture = cubeMap;\n\n\t\t\t\tthis.xrLight.environment.needsPMREMUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tonXRFrame( time, xrFrame ) {\n\n\t\t// If either this object or the XREstimatedLight has been destroyed, stop\n\t\t// running the frame loop.\n\t\tif ( ! this.xrLight ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst session = xrFrame.session;\n\t\tsession.requestAnimationFrame( this.frameCallback );\n\n\t\tconst lightEstimate = xrFrame.getLightEstimate( this.lightProbe );\n\t\tif ( lightEstimate ) {\n\n\t\t\t// We can copy the estimate's spherical harmonics array directly into the light probe.\n\t\t\tthis.xrLight.lightProbe.sh.fromArray( lightEstimate.sphericalHarmonicsCoefficients );\n\t\t\tthis.xrLight.lightProbe.intensity = 1.0;\n\n\t\t\t// For the directional light we have to normalize the color and set the scalar as the\n\t\t\t// intensity, since WebXR can return color values that exceed 1.0.\n\t\t\tconst intensityScalar = Math.max( 1.0,\n\t\t\t\tMath.max( lightEstimate.primaryLightIntensity.x,\n\t\t\t\t\tMath.max( lightEstimate.primaryLightIntensity.y,\n\t\t\t\t\t\tlightEstimate.primaryLightIntensity.z ) ) );\n\n\t\t\tthis.xrLight.directionalLight.color.setRGB(\n\t\t\t\tlightEstimate.primaryLightIntensity.x / intensityScalar,\n\t\t\t\tlightEstimate.primaryLightIntensity.y / intensityScalar,\n\t\t\t\tlightEstimate.primaryLightIntensity.z / intensityScalar );\n\t\t\tthis.xrLight.directionalLight.intensity = intensityScalar;\n\t\t\tthis.xrLight.directionalLight.position.copy( lightEstimate.primaryLightDirection );\n\n\t\t\tif ( this.estimationStartCallback ) {\n\n\t\t\t\tthis.estimationStartCallback();\n\t\t\t\tthis.estimationStartCallback = null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.xrLight = null;\n\t\tthis.renderer = null;\n\t\tthis.lightProbe = null;\n\t\tthis.xrWebGLBinding = null;\n\n\t}\n\n}\n\n/**\n * This class can be used to represent the environmental light of\n * a XR session. It relies on the WebXR Lighting Estimation API.\n *\n * @augments Group\n * @three_import import { XREstimatedLight } from 'three/addons/webxr/XREstimatedLight.js';\n */\nexport class XREstimatedLight extends Group {\n\n\t/**\n\t * Constructs a new light.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {boolean} [environmentEstimation=true] - Whether to use environment estimation or not.\n\t */\n\tconstructor( renderer, environmentEstimation = true ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light probe that represents the estimated light.\n\t\t *\n\t\t * @type {LightProbe}\n\t\t */\n\t\tthis.lightProbe = new LightProbe();\n\t\tthis.lightProbe.intensity = 0;\n\t\tthis.add( this.lightProbe );\n\n\t\t/**\n\t\t * Represents the primary light from the XR environment.\n\t\t *\n\t\t * @type {DirectionalLight}\n\t\t */\n\t\tthis.directionalLight = new DirectionalLight();\n\t\tthis.directionalLight.intensity = 0;\n\t\tthis.add( this.directionalLight );\n\n\t\t/**\n\t\t * Will be set to a cube map in the SessionLightProbe if environment estimation is\n\t\t * available and requested.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.environment = null;\n\n\t\tlet sessionLightProbe = null;\n\t\tlet estimationStarted = false;\n\t\trenderer.xr.addEventListener( 'sessionstart', () => {\n\n\t\t\tconst session = renderer.xr.getSession();\n\n\t\t\tif ( 'requestLightProbe' in session ) {\n\n\t\t\t\tsession.requestLightProbe( {\n\n\t\t\t\t\treflectionFormat: session.preferredReflectionFormat\n\n\t\t\t\t} ).then( ( probe ) => {\n\n\t\t\t\t\tsessionLightProbe = new SessionLightProbe( this, renderer, probe, environmentEstimation, () => {\n\n\t\t\t\t\t\testimationStarted = true;\n\n\t\t\t\t\t\t// Fired to indicate that the estimated lighting values are now being updated.\n\t\t\t\t\t\tthis.dispatchEvent( { type: 'estimationstart' } );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderer.xr.addEventListener( 'sessionend', () => {\n\n\t\t\tif ( sessionLightProbe ) {\n\n\t\t\t\tsessionLightProbe.dispose();\n\t\t\t\tsessionLightProbe = null;\n\n\t\t\t}\n\n\t\t\tif ( estimationStarted ) {\n\n\t\t\t\t// Fired to indicate that the estimated lighting values are no longer being updated.\n\t\t\t\tthis.dispatchEvent( { type: 'estimationend' } );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t/**\n\t\t * Frees the GPU-related resources allocated by this instance. Call this\n\t\t * method whenever this instance is no longer used in your app.\n\t\t */\n\t\tthis.dispose = () => {\n\n\t\t\tif ( sessionLightProbe ) {\n\n\t\t\t\tsessionLightProbe.dispose();\n\t\t\t\tsessionLightProbe = null;\n\n\t\t\t}\n\n\t\t\tthis.remove( this.lightProbe );\n\t\t\tthis.lightProbe = null;\n\n\t\t\tthis.remove( this.directionalLight );\n\t\t\tthis.directionalLight = null;\n\n\t\t\tthis.environment = null;\n\n\t\t};\n\n\t}\n\n}\n"],"mappings":"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","ignoreList":[]}