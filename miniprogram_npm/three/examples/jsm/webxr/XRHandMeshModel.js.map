{"version":3,"file":"node_modules/three/examples/jsm/webxr/XRHandMeshModel.js","names":["GLTFLoader","DEFAULT_HAND_PROFILE_PATH","XRHandMeshModel","constructor","handModel","controller","path","handedness","loader","onLoad","this","bones","setPath","load","gltf","object","scene","children","add","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","forEach","jointName","bone","getObjectByName","undefined","console","warn","push","updateMesh","XRJoints","joints","i","length","XRJoint","visible","position","copy","quaternion"],"sources":["node_modules/three/examples/jsm/webxr/XRHandMeshModel.js"],"sourcesContent":["import { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\n/**\n * Represents one of the hand model types {@link XRHandModelFactory} might produce\n * depending on the selected profile. `XRHandMeshModel` represents a hand with a\n * custom asset.\n *\n * @three_import import { XRHandMeshModel } from 'three/addons/webxr/XRHandMeshModel.js';\n */\nclass XRHandMeshModel {\n\n\t/**\n\t * Constructs a new XR hand mesh model.\n\t *\n\t * @param {XRHandModel} handModel - The hand model.\n\t * @param {Group} controller - The WebXR controller.\n\t * @param {?string} path - The model path.\n\t * @param {XRHandedness} handedness - The handedness of the XR input source.\n\t * @param {?Loader} [loader=null] - The loader. If not provided, an instance of `GLTFLoader` will be used to load models.\n\t * @param {?Function} [onLoad=null] - A callback that is executed when a controller model has been loaded.\n\t */\n\tconstructor( handModel, controller, path, handedness, loader = null, onLoad = null ) {\n\n\t\t/**\n\t\t * The WebXR controller.\n\t\t *\n\t\t * @type {Group}\n\t\t */\n\t\tthis.controller = controller;\n\n\t\t/**\n\t\t * The hand model.\n\t\t *\n\t\t * @type {XRHandModel}\n\t\t */\n\t\tthis.handModel = handModel;\n\n\t\t/**\n\t\t * An array of bones representing the bones\n\t\t * of the hand skeleton.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = [];\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new GLTFLoader();\n\t\t\tloader.setPath( path || DEFAULT_HAND_PROFILE_PATH );\n\n\t\t}\n\n\t\tloader.load( `${handedness}.glb`, gltf => {\n\n\t\t\tconst object = gltf.scene.children[ 0 ];\n\t\t\tthis.handModel.add( object );\n\n\t\t\tconst mesh = object.getObjectByProperty( 'type', 'SkinnedMesh' );\n\t\t\tmesh.frustumCulled = false;\n\t\t\tmesh.castShadow = true;\n\t\t\tmesh.receiveShadow = true;\n\n\t\t\tconst joints = [\n\t\t\t\t'wrist',\n\t\t\t\t'thumb-metacarpal',\n\t\t\t\t'thumb-phalanx-proximal',\n\t\t\t\t'thumb-phalanx-distal',\n\t\t\t\t'thumb-tip',\n\t\t\t\t'index-finger-metacarpal',\n\t\t\t\t'index-finger-phalanx-proximal',\n\t\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t\t'index-finger-phalanx-distal',\n\t\t\t\t'index-finger-tip',\n\t\t\t\t'middle-finger-metacarpal',\n\t\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t\t'middle-finger-phalanx-distal',\n\t\t\t\t'middle-finger-tip',\n\t\t\t\t'ring-finger-metacarpal',\n\t\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t\t'ring-finger-phalanx-distal',\n\t\t\t\t'ring-finger-tip',\n\t\t\t\t'pinky-finger-metacarpal',\n\t\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t\t'pinky-finger-tip',\n\t\t\t];\n\n\t\t\tjoints.forEach( jointName => {\n\n\t\t\t\tconst bone = object.getObjectByName( jointName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\tbone.jointName = jointName;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( `Couldn't find ${jointName} in ${handedness} hand mesh` );\n\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push( bone );\n\n\t\t\t} );\n\n\t\t\tif ( onLoad ) onLoad( object );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Updates the mesh based on the tracked XR joints data.\n\t */\n\tupdateMesh() {\n\n\t\t// XR Joints\n\t\tconst XRJoints = this.controller.joints;\n\n\t\tfor ( let i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tconst XRJoint = XRJoints[ bone.jointName ];\n\n\t\t\t\tif ( XRJoint.visible ) {\n\n\t\t\t\t\tconst position = XRJoint.position;\n\n\t\t\t\t\tbone.position.copy( position );\n\t\t\t\t\tbone.quaternion.copy( XRJoint.quaternion );\n\t\t\t\t\t// bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { XRHandMeshModel };\n"],"mappings":"OAASA,eAAkB,2BAE3B,MAAMC,0BAA4B,4FASlC,MAAMC,gBAYL,WAAAC,CAAaC,EAAWC,EAAYC,EAAMC,EAAYC,EAAS,KAAMC,EAAS,MAO7EC,KAAKL,WAAaA,EAOlBK,KAAKN,UAAYA,EAQjBM,KAAKC,MAAQ,GAEG,OAAXH,IAEJA,EAAS,IAAIR,YACNY,QAASN,GAAQL,2BAIzBO,EAAOK,KAAM,GAAGN,SAAkBO,IAEjC,MAAMC,EAASD,EAAKE,MAAMC,SAAU,GACpCP,KAAKN,UAAUc,IAAKH,GAEpB,MAAMI,EAAOJ,EAAOK,oBAAqB,OAAQ,eACjDD,EAAKE,eAAgB,EACrBF,EAAKG,YAAa,EAClBH,EAAKI,eAAgB,EAEN,CACd,QACA,mBACA,yBACA,uBACA,YACA,0BACA,gCACA,oCACA,8BACA,mBACA,2BACA,iCACA,qCACA,+BACA,oBACA,yBACA,+BACA,mCACA,6BACA,kBACA,0BACA,gCACA,oCACA,8BACA,oBAGMC,SAASC,IAEf,MAAMC,EAAOX,EAAOY,gBAAiBF,QAEvBG,IAATF,EAEJA,EAAKD,UAAYA,EAIjBI,QAAQC,KAAM,iBAAiBL,QAAgBlB,eAIhDG,KAAKC,MAAMoB,KAAML,EAAM,IAInBjB,GAASA,EAAQM,EAAQ,GAIhC,CAKA,UAAAiB,GAGC,MAAMC,EAAWvB,KAAKL,WAAW6B,OAEjC,IAAM,IAAIC,EAAI,EAAGA,EAAIzB,KAAKC,MAAMyB,OAAQD,IAAO,CAE9C,MAAMT,EAAOhB,KAAKC,MAAOwB,GAEzB,GAAKT,EAAO,CAEX,MAAMW,EAAUJ,EAAUP,EAAKD,WAE/B,GAAKY,EAAQC,QAAU,CAEtB,MAAMC,EAAWF,EAAQE,SAEzBb,EAAKa,SAASC,KAAMD,GACpBb,EAAKe,WAAWD,KAAMH,EAAQI,WAG/B,CAED,CAED,CAED,SAIQvC","ignoreList":[]}