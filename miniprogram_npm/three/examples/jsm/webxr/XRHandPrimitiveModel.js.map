{"version":3,"file":"node_modules/three/examples/jsm/webxr/XRHandPrimitiveModel.js","names":["DynamicDrawUsage","SphereGeometry","BoxGeometry","MeshStandardMaterial","InstancedMesh","Matrix4","Vector3","_matrix","_vector","XRHandPrimitiveModel","constructor","handModel","controller","path","handedness","options","geometry","this","envMap","primitive","material","handMesh","frustumCulled","instanceMatrix","setUsage","castShadow","receiveShadow","add","joints","updateMesh","count","i","length","joint","visible","setScalar","jointRadius","compose","position","quaternion","setMatrixAt","needsUpdate"],"sources":["node_modules/three/examples/jsm/webxr/XRHandPrimitiveModel.js"],"sourcesContent":["import {\n\tDynamicDrawUsage,\n\tSphereGeometry,\n\tBoxGeometry,\n\tMeshStandardMaterial,\n\tInstancedMesh,\n\tMatrix4,\n\tVector3\n} from 'three';\n\nconst _matrix = new Matrix4();\nconst _vector = new Vector3();\n\n/**\n * Represents one of the hand model types {@link XRHandModelFactory} might produce\n * depending on the selected profile. `XRHandPrimitiveModel` represents a hand\n * with sphere or box primitives according to the selected `primitive` option.\n *\n * @three_import import { XRHandPrimitiveModel } from 'three/addons/webxr/XRHandPrimitiveModel.js';\n */\nclass XRHandPrimitiveModel {\n\n\t/**\n\t * Constructs a new XR hand primitive model.\n\t *\n\t * @param {XRHandModel} handModel - The hand model.\n\t * @param {Group} controller - The WebXR controller.\n\t * @param {string} path - The model path.\n\t * @param {XRHandedness} handedness - The handedness of the XR input source.\n\t * @param {XRHandPrimitiveModel~Options} options - The model options.\n\t */\n\tconstructor( handModel, controller, path, handedness, options ) {\n\n\t\t/**\n\t\t * The WebXR controller.\n\t\t *\n\t\t * @type {Group}\n\t\t */\n\t\tthis.controller = controller;\n\n\t\t/**\n\t\t * The hand model.\n\t\t *\n\t\t * @type {XRHandModel}\n\t\t */\n\t\tthis.handModel = handModel;\n\n\t\t/**\n\t\t * The model's environment map.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.envMap = null;\n\n\t\tlet geometry;\n\n\t\tif ( ! options || ! options.primitive || options.primitive === 'sphere' ) {\n\n\t\t\tgeometry = new SphereGeometry( 1, 10, 10 );\n\n\t\t} else if ( options.primitive === 'box' ) {\n\n\t\t\tgeometry = new BoxGeometry( 1, 1, 1 );\n\n\t\t}\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tthis.handMesh = new InstancedMesh( geometry, material, 30 );\n\t\tthis.handMesh.frustumCulled = false;\n\t\tthis.handMesh.instanceMatrix.setUsage( DynamicDrawUsage ); // will be updated every frame\n\t\tthis.handMesh.castShadow = true;\n\t\tthis.handMesh.receiveShadow = true;\n\t\tthis.handModel.add( this.handMesh );\n\n\t\tthis.joints = [\n\t\t\t'wrist',\n\t\t\t'thumb-metacarpal',\n\t\t\t'thumb-phalanx-proximal',\n\t\t\t'thumb-phalanx-distal',\n\t\t\t'thumb-tip',\n\t\t\t'index-finger-metacarpal',\n\t\t\t'index-finger-phalanx-proximal',\n\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t'index-finger-phalanx-distal',\n\t\t\t'index-finger-tip',\n\t\t\t'middle-finger-metacarpal',\n\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t'middle-finger-phalanx-distal',\n\t\t\t'middle-finger-tip',\n\t\t\t'ring-finger-metacarpal',\n\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t'ring-finger-phalanx-distal',\n\t\t\t'ring-finger-tip',\n\t\t\t'pinky-finger-metacarpal',\n\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t'pinky-finger-tip'\n\t\t];\n\n\t}\n\n\t/**\n\t * Updates the mesh based on the tracked XR joints data.\n\t */\n\tupdateMesh() {\n\n\t\tconst defaultRadius = 0.008;\n\t\tconst joints = this.controller.joints;\n\n\t\tlet count = 0;\n\n\t\tfor ( let i = 0; i < this.joints.length; i ++ ) {\n\n\t\t\tconst joint = joints[ this.joints[ i ] ];\n\n\t\t\tif ( joint.visible ) {\n\n\t\t\t\t_vector.setScalar( joint.jointRadius || defaultRadius );\n\t\t\t\t_matrix.compose( joint.position, joint.quaternion, _vector );\n\t\t\t\tthis.handMesh.setMatrixAt( i, _matrix );\n\n\t\t\t\tcount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.handMesh.count = count;\n\t\tthis.handMesh.instanceMatrix.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Constructor options of `XRHandPrimitiveModel`.\n *\n * @typedef {Object} XRHandPrimitiveModel~Options\n * @property {('box'|'sphere')} [primitive] - The primitive type.\n **/\n\nexport { XRHandPrimitiveModel };\n"],"mappings":"OACCA,iBACAC,eACAC,YACAC,qBACAC,cACAC,QACAC,YACM,QAEP,MAAMC,QAAU,IAAIF,QACdG,QAAU,IAAIF,QASpB,MAAMG,qBAWL,WAAAC,CAAaC,EAAWC,EAAYC,EAAMC,EAAYC,GAwBrD,IAAIC,EAjBJC,KAAKL,WAAaA,EAOlBK,KAAKN,UAAYA,EAQjBM,KAAKC,OAAS,KAIPH,GAAaA,EAAQI,WAAmC,WAAtBJ,EAAQI,UAIf,QAAtBJ,EAAQI,YAEnBH,EAAW,IAAId,YAAa,EAAG,EAAG,IAJlCc,EAAW,IAAIf,eAAgB,EAAG,GAAI,IAQvC,MAAMmB,EAAW,IAAIjB,qBAErBc,KAAKI,SAAW,IAAIjB,cAAeY,EAAUI,EAAU,IACvDH,KAAKI,SAASC,eAAgB,EAC9BL,KAAKI,SAASE,eAAeC,SAAUxB,kBACvCiB,KAAKI,SAASI,YAAa,EAC3BR,KAAKI,SAASK,eAAgB,EAC9BT,KAAKN,UAAUgB,IAAKV,KAAKI,UAEzBJ,KAAKW,OAAS,CACb,QACA,mBACA,yBACA,uBACA,YACA,0BACA,gCACA,oCACA,8BACA,mBACA,2BACA,iCACA,qCACA,+BACA,oBACA,yBACA,+BACA,mCACA,6BACA,kBACA,0BACA,gCACA,oCACA,8BACA,mBAGF,CAKA,UAAAC,GAEC,MACMD,EAASX,KAAKL,WAAWgB,OAE/B,IAAIE,EAAQ,EAEZ,IAAM,IAAIC,EAAI,EAAGA,EAAId,KAAKW,OAAOI,OAAQD,IAAO,CAE/C,MAAME,EAAQL,EAAQX,KAAKW,OAAQG,IAE9BE,EAAMC,UAEV1B,QAAQ2B,UAAWF,EAAMG,aAXL,MAYpB7B,QAAQ8B,QAASJ,EAAMK,SAAUL,EAAMM,WAAY/B,SACnDS,KAAKI,SAASmB,YAAaT,EAAGxB,SAE9BuB,IAIF,CAEAb,KAAKI,SAASS,MAAQA,EACtBb,KAAKI,SAASE,eAAekB,aAAc,CAE5C,SAWQhC","ignoreList":[]}