import{BoxGeometry,Matrix4,Mesh,MeshBasicMaterial,Object3D}from"three";class XRPlanes extends Object3D{constructor(e){super();const t=new Matrix4,o=new Map,a=e.xr;a.addEventListener("planesdetected",(e=>{const s=e.data,r=s.detectedPlanes,n=a.getReferenceSpace();let i=!1;for(const[e,t]of o)!1===r.has(e)&&(t.geometry.dispose(),t.material.dispose(),this.remove(t),o.delete(e),i=!0);for(const e of r)if(!1===o.has(e)){const a=s.getPose(e.planeSpace,n);t.fromArray(a.transform.matrix);const r=e.polygon;let c=Number.MAX_SAFE_INTEGER,m=Number.MIN_SAFE_INTEGER,M=Number.MAX_SAFE_INTEGER,h=Number.MIN_SAFE_INTEGER;for(const e of r)c=Math.min(c,e.x),m=Math.max(m,e.x),M=Math.min(M,e.z),h=Math.max(h,e.z);const d=new BoxGeometry(m-c,.01,h-M),l=new MeshBasicMaterial({color:16777215*Math.random()}),p=new Mesh(d,l);p.position.setFromMatrixPosition(t),p.quaternion.setFromRotationMatrix(t),this.add(p),o.set(e,p),i=!0}i&&this.dispatchEvent({type:"planeschanged"})}))}}export{XRPlanes};
//# sourceMappingURL=XRPlanes.js.map