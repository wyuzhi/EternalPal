{"version":3,"file":"node_modules/three/examples/jsm/webxr/XRPlanes.js","names":["BoxGeometry","Matrix4","Mesh","MeshBasicMaterial","Object3D","XRPlanes","constructor","renderer","super","matrix","currentPlanes","Map","xr","addEventListener","event","frame","data","planes","detectedPlanes","referenceSpace","getReferenceSpace","planeschanged","plane","mesh","has","geometry","dispose","material","this","remove","delete","pose","getPose","planeSpace","fromArray","transform","polygon","minX","Number","MAX_SAFE_INTEGER","maxX","MIN_SAFE_INTEGER","minZ","maxZ","point","Math","min","x","max","z","color","random","position","setFromMatrixPosition","quaternion","setFromRotationMatrix","add","set","dispatchEvent","type"],"sources":["node_modules/three/examples/jsm/webxr/XRPlanes.js"],"sourcesContent":["import {\n\tBoxGeometry,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D\n} from 'three';\n\n/**\n * A utility class for the WebXR Plane Detection Module. If planes\n * are detected by WebXR, this class will automatically add them\n * as thin box meshes to the scene when below code snippet is used.\n *\n * ```js\n * const planes = new XRPlanes( renderer );\n * scene.add( planes );\n * ```\n *\n * @augments Object3D\n * @three_import import { XRPlanes } from 'three/addons/webxr/XRPlanes.js';\n */\nclass XRPlanes extends Object3D {\n\n\t/**\n\t * Constructs a new XR plane container.\n\t *\n\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t */\n\tconstructor( renderer ) {\n\n\t\tsuper();\n\n\t\tconst matrix = new Matrix4();\n\n\t\tconst currentPlanes = new Map();\n\n\t\tconst xr = renderer.xr;\n\n\t\txr.addEventListener( 'planesdetected', event => {\n\n\t\t\tconst frame = event.data;\n\t\t\tconst planes = frame.detectedPlanes;\n\n\t\t\tconst referenceSpace = xr.getReferenceSpace();\n\n\t\t\tlet planeschanged = false;\n\n\t\t\tfor ( const [ plane, mesh ] of currentPlanes ) {\n\n\t\t\t\tif ( planes.has( plane ) === false ) {\n\n\t\t\t\t\tmesh.geometry.dispose();\n\t\t\t\t\tmesh.material.dispose();\n\t\t\t\t\tthis.remove( mesh );\n\n\t\t\t\t\tcurrentPlanes.delete( plane );\n\n\t\t\t\t\tplaneschanged = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( const plane of planes ) {\n\n\t\t\t\tif ( currentPlanes.has( plane ) === false ) {\n\n\t\t\t\t\tconst pose = frame.getPose( plane.planeSpace, referenceSpace );\n\t\t\t\t\tmatrix.fromArray( pose.transform.matrix );\n\n\t\t\t\t\tconst polygon = plane.polygon;\n\n\t\t\t\t\tlet minX = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tlet maxX = Number.MIN_SAFE_INTEGER;\n\t\t\t\t\tlet minZ = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tlet maxZ = Number.MIN_SAFE_INTEGER;\n\n\t\t\t\t\tfor ( const point of polygon ) {\n\n\t\t\t\t\t\tminX = Math.min( minX, point.x );\n\t\t\t\t\t\tmaxX = Math.max( maxX, point.x );\n\t\t\t\t\t\tminZ = Math.min( minZ, point.z );\n\t\t\t\t\t\tmaxZ = Math.max( maxZ, point.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst width = maxX - minX;\n\t\t\t\t\tconst height = maxZ - minZ;\n\n\t\t\t\t\tconst geometry = new BoxGeometry( width, 0.01, height );\n\t\t\t\t\tconst material = new MeshBasicMaterial( { color: 0xffffff * Math.random() } );\n\n\t\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\t\tmesh.position.setFromMatrixPosition( matrix );\n\t\t\t\t\tmesh.quaternion.setFromRotationMatrix( matrix );\n\t\t\t\t\tthis.add( mesh );\n\n\t\t\t\t\tcurrentPlanes.set( plane, mesh );\n\n\t\t\t\t\tplaneschanged = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( planeschanged ) {\n\n\t\t\t\tthis.dispatchEvent( { type: 'planeschanged' } );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nexport { XRPlanes };\n"],"mappings":"OACCA,YACAC,QACAC,KACAC,kBACAC,aACM,QAeP,MAAMC,iBAAiBD,SAOtB,WAAAE,CAAaC,GAEZC,QAEA,MAAMC,EAAS,IAAIR,QAEbS,EAAgB,IAAIC,IAEpBC,EAAKL,EAASK,GAEpBA,EAAGC,iBAAkB,kBAAkBC,IAEtC,MAAMC,EAAQD,EAAME,KACdC,EAASF,EAAMG,eAEfC,EAAiBP,EAAGQ,oBAE1B,IAAIC,GAAgB,EAEpB,IAAM,MAAQC,EAAOC,KAAUb,GAED,IAAxBO,EAAOO,IAAKF,KAEhBC,EAAKE,SAASC,UACdH,EAAKI,SAASD,UACdE,KAAKC,OAAQN,GAEbb,EAAcoB,OAAQR,GAEtBD,GAAgB,GAMlB,IAAM,MAAMC,KAASL,EAEpB,IAAoC,IAA/BP,EAAcc,IAAKF,GAAoB,CAE3C,MAAMS,EAAOhB,EAAMiB,QAASV,EAAMW,WAAYd,GAC9CV,EAAOyB,UAAWH,EAAKI,UAAU1B,QAEjC,MAAM2B,EAAUd,EAAMc,QAEtB,IAAIC,EAAOC,OAAOC,iBACdC,EAAOF,OAAOG,iBACdC,EAAOJ,OAAOC,iBACdI,EAAOL,OAAOG,iBAElB,IAAM,MAAMG,KAASR,EAEpBC,EAAOQ,KAAKC,IAAKT,EAAMO,EAAMG,GAC7BP,EAAOK,KAAKG,IAAKR,EAAMI,EAAMG,GAC7BL,EAAOG,KAAKC,IAAKJ,EAAME,EAAMK,GAC7BN,EAAOE,KAAKG,IAAKL,EAAMC,EAAMK,GAI9B,MAGMxB,EAAW,IAAIzB,YAHPwC,EAAOH,EAGoB,IAF1BM,EAAOD,GAGhBf,EAAW,IAAIxB,kBAAmB,CAAE+C,MAAO,SAAWL,KAAKM,WAE3D5B,EAAO,IAAIrB,KAAMuB,EAAUE,GACjCJ,EAAK6B,SAASC,sBAAuB5C,GACrCc,EAAK+B,WAAWC,sBAAuB9C,GACvCmB,KAAK4B,IAAKjC,GAEVb,EAAc+C,IAAKnC,EAAOC,GAE1BF,GAAgB,CAEjB,CAIIA,GAEJO,KAAK8B,cAAe,CAAEC,KAAM,iBAE7B,GAIF,SAIQtD","ignoreList":[]}