{"version":3,"file":"node_modules/three/src/animation/AnimationAction.js","names":["WrapAroundEnding","ZeroCurvatureEnding","ZeroSlopeEnding","LoopPingPong","LoopOnce","LoopRepeat","NormalAnimationBlendMode","AdditiveAnimationBlendMode","AnimationAction","constructor","mixer","clip","localRoot","blendMode","this","_mixer","_clip","_localRoot","tracks","nTracks","length","interpolants","Array","interpolantSettings","endingStart","endingEnd","i","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","Infinity","paused","enabled","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","stop","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","times","parameterPositions","values","sampleValues","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","_updateWeight","startTime","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","j","m","evaluate","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","dispatchEvent","type","direction","loopDelta","Math","floor","abs","pending","atStart","atEnd","weightNow","weightThen"],"sources":["node_modules/three/src/animation/AnimationAction.js"],"sourcesContent":["import { WrapAroundEnding, ZeroCurvatureEnding, ZeroSlopeEnding, LoopPingPong, LoopOnce, LoopRepeat, NormalAnimationBlendMode, AdditiveAnimationBlendMode } from '../constants.js';\n\n/**\n * An instance of `AnimationAction` schedules the playback of an animation which is\n * stored in {@link AnimationClip}.\n */\nclass AnimationAction {\n\n\t/**\n\t * Constructs a new animation action.\n\t *\n\t * @param {AnimationMixer} mixer - The mixer that is controlled by this action.\n\t * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.\n\t * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.\n\t * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.\n\t */\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\n\t\t/**\n\t\t * Defines how the animation is blended/combined when two or more animations\n\t\t * are simultaneously played.\n\t\t *\n\t\t * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}\n\t\t */\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\t/**\n\t\t * The loop mode, set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * @type {(LoopRepeat|LoopOnce|LoopPingPong)}\n\t\t * @default LoopRepeat\n\t\t */\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t/**\n\t\t * The local time of this action (in seconds, starting with `0`).\n\t\t *\n\t\t * The value gets clamped or wrapped to `[0,clip.duration]` (according to the\n\t\t * loop state).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.time = 0;\n\n\t\t/**\n\t\t * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the\n\t\t * animation to pause. Negative values cause the animation to play backwards.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\t/**\n\t\t * The degree of influence of this action (in the interval `[0, 1]`). Values\n\t\t * between `0` (no impact) and `1` (full impact) can be used to blend between\n\t\t * several actions.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\t/**\n\t\t * The number of repetitions of the performed clip over the course of this action.\n\t\t * Can be set via {@link AnimationAction#setLoop}.\n\t\t *\n\t\t * Setting this number has no effect if {@link AnimationAction#loop} is set to\n\t\t * `THREE:LoopOnce`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.repetitions = Infinity;\n\n\t\t/**\n\t\t * If set to `true`, the playback of the action is paused.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n\t\t/**\n\t\t * If set to `false`, the action is disabled so it has no impact.\n\t\t *\n\t\t * When the action is re-enabled, the animation continues from its current\n\t\t * time (setting `enabled` to `false` doesn't reset the action).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to true the animation will automatically be paused on its last frame.\n\t\t *\n\t\t * If set to false, {@link AnimationAction#enabled} will automatically be switched\n\t\t * to `false` when the last loop of the action has finished, so that this action has\n\t\t * no further impact.\n\t\t *\n\t\t * Note: This member has no impact if the action is interrupted (it\n\t\t * has only an effect if its last loop has really finished).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clampWhenFinished = false;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtStart = true;\n\n\t\t/**\n\t\t * Enables smooth interpolation without separate clips for start, loop and end.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.zeroSlopeAtEnd = true;\n\n\t}\n\n\t/**\n\t * Starts the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\t/**\n\t * Resets the playback of the animation.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\t/**\n\t * Returns `true` if the animation is running.\n\t *\n\t * @return {boolean} Whether the animation is running or not.\n\t */\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Returns `true` when {@link AnimationAction#play} has been called.\n\t *\n\t * @return {boolean} Whether the animation is scheduled or not.\n\t */\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\t/**\n\t * Defines the time when the animation should start.\n\t *\n\t * @param {number} time - The start time in seconds.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Configures the loop settings for this action.\n\t *\n\t * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.\n\t * @param {number} repetitions - The number of repetitions.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective weight of this action.\n\t *\n\t * An action has no effect and thus an effective weight of zero when the\n\t * action is disabled.\n\t *\n\t * @param {number} weight - The weight to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t/**\n\t * Returns the effective weight of this action.\n\t *\n\t * @return {number} The effective weight.\n\t */\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\t/**\n\t * Fades the animation in by increasing its weight gradually from `0` to `1`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\t/**\n\t * Fades the animation out by decreasing its weight gradually from `1` to `0`,\n\t * within the passed time interval.\n\t *\n\t * @param {number} duration - The duration of the fade.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\t/**\n\t * Causes this action to fade in and the given action to fade out,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeOutAction - The animation action to fade out.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeFrom( fadeOutAction, duration, warp = false ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp === true ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Causes this action to fade out and the given action to fade in,\n\t * within the passed time interval.\n\t *\n\t * @param {AnimationAction} fadeInAction - The animation action to fade in.\n\t * @param {number} duration - The duration of the fade.\n\t * @param {boolean} [warp=false] - Whether warping should be used or not.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tcrossFadeTo( fadeInAction, duration, warp = false ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\t/**\n\t * Stops any fading which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the effective time scale of this action.\n\t *\n\t * An action has no effect and thus an effective time scale of zero when the\n\t * action is paused.\n\t *\n\t * @param {number} timeScale - The time scale to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Returns the effective time scale of this action.\n\t *\n\t * @return {number} The effective time scale.\n\t */\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\t/**\n\t * Sets the duration for a single loop of this action.\n\t *\n\t * @param {number} duration - The duration to set.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Synchronizes this action with the passed other action.\n\t *\n\t * @param {AnimationAction} action - The action to sync with.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t/**\n\t * Decelerates this animation's speed to `0` within the passed time interval.\n\t *\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\t/**\n\t * Changes the playback speed, within the passed time interval, by modifying\n\t * {@link AnimationAction#timeScale} gradually from `startTimeScale` to\n\t * `endTimeScale`.\n\t *\n\t * @param {number} startTimeScale - The start time scale.\n\t * @param {number} endTimeScale - The end time scale.\n\t * @param {number} duration - The duration.\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops any scheduled warping which is applied to this action.\n\t *\n\t * @return {AnimationAction} A reference to this animation action.\n\t */\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the animation mixer of this animation action.\n\t *\n\t * @return {AnimationMixer} The animation mixer.\n\t */\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\t/**\n\t * Returns the animation clip of this animation action.\n\t *\n\t * @return {AnimationClip} The animation clip.\n\t */\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\t/**\n\t * Returns the root object of this animation action.\n\t *\n\t * @return {Object3D} The root object.\n\t */\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nexport { AnimationAction };\n"],"mappings":"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","ignoreList":[]}