import{Quaternion}from"../math/Quaternion.js";class PropertyMixer{constructor(t,i,e){let s,h,r;switch(this.binding=t,this.valueSize=e,i){case"quaternion":s=this._slerp,h=this._slerpAdditive,r=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*e),this._workIndex=5;break;case"string":case"bool":s=this._select,h=this._select,r=this._setAdditiveIdentityOther,this.buffer=new Array(5*e);break;default:s=this._lerp,h=this._lerpAdditive,r=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*e)}this._mixBufferRegion=s,this._mixBufferRegionAdditive=h,this._setIdentity=r,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,i){const e=this.buffer,s=this.valueSize,h=t*s+s;let r=this.cumulativeWeight;if(0===r){for(let t=0;t!==s;++t)e[h+t]=e[t];r=i}else{r+=i;const t=i/r;this._mixBufferRegion(e,h,0,t,s)}this.cumulativeWeight=r}accumulateAdditive(t){const i=this.buffer,e=this.valueSize,s=e*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(i,s,0,t,e),this.cumulativeWeightAdditive+=t}apply(t){const i=this.valueSize,e=this.buffer,s=t*i+i,h=this.cumulativeWeight,r=this.cumulativeWeightAdditive,d=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,h<1){const t=i*this._origIndex;this._mixBufferRegion(e,s,t,1-h,i)}r>0&&this._mixBufferRegionAdditive(e,s,this._addIndex*i,1,i);for(let t=i,h=i+i;t!==h;++t)if(e[t]!==e[t+i]){d.setValue(e,s);break}}saveOriginalState(){const t=this.binding,i=this.buffer,e=this.valueSize,s=e*this._origIndex;t.getValue(i,s);for(let t=e,h=s;t!==h;++t)i[t]=i[s+t%e];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,i=t+this.valueSize;for(let e=t;e<i;e++)this.buffer[e]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,i=this._addIndex*this.valueSize;for(let e=0;e<this.valueSize;e++)this.buffer[i+e]=this.buffer[t+e]}_select(t,i,e,s,h){if(s>=.5)for(let s=0;s!==h;++s)t[i+s]=t[e+s]}_slerp(t,i,e,s){Quaternion.slerpFlat(t,i,t,i,t,e,s)}_slerpAdditive(t,i,e,s,h){const r=this._workIndex*h;Quaternion.multiplyQuaternionsFlat(t,r,t,i,t,e),Quaternion.slerpFlat(t,i,t,i,t,r,s)}_lerp(t,i,e,s,h){const r=1-s;for(let d=0;d!==h;++d){const h=i+d;t[h]=t[h]*r+t[e+d]*s}}_lerpAdditive(t,i,e,s,h){for(let r=0;r!==h;++r){const h=i+r;t[h]=t[h]+t[e+r]*s}}}export{PropertyMixer};
//# sourceMappingURL=PropertyMixer.js.map