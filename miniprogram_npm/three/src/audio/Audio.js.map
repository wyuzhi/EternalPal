{"version":3,"file":"node_modules/three/src/audio/Audio.js","names":["Object3D","Audio","constructor","listener","super","this","type","context","gain","createGain","connect","getInput","autoplay","buffer","detune","loop","loopStart","loopEnd","offset","duration","undefined","playbackRate","isPlaying","hasPlaybackControl","source","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","audioBuffer","play","delay","console","warn","currentTime","createBufferSource","onended","onEnded","bind","start","setDetune","setPlaybackRate","pause","Math","max","stop","length","i","l","disconnect","getFilters","setFilters","value","slice","setTargetAtTime","getDetune","getFilter","setFilter","filter","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","copy","recursive","clone"],"sources":["node_modules/three/src/audio/Audio.js"],"sourcesContent":["import { Object3D } from '../core/Object3D.js';\n\n/**\n * Represents a non-positional ( global ) audio object.\n *\n * This and related audio modules make use of the [Web Audio API]{@link https://www.w3.org/TR/webaudio-1.1/}.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create a global audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop( true );\n * \tsound.setVolume( 0.5 );\n * \tsound.play();\n * });\n * ```\n *\n * @augments Object3D\n */\nclass Audio extends Object3D {\n\n\t/**\n\t * Constructs a new audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AudioListener}\n\t\t * @readonly\n\t\t */\n\t\tthis.listener = listener;\n\n\t\t/**\n\t\t * The audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = listener.context;\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\t/**\n\t\t * Whether to start playback automatically or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoplay = false;\n\n\t\t/**\n\t\t * A reference to an audio buffer.\n\t\t *\n\t\t * Defined via {@link Audio#setBuffer}.\n\t\t *\n\t\t * @type {?AudioBuffer}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.buffer = null;\n\n\t\t/**\n\t\t * Modify pitch, measured in cents. +/- 100 is a semitone.\n\t\t * +/- 1200 is an octave.\n\t\t *\n\t\t * Defined via {@link Audio#setDetune}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.detune = 0;\n\n\t\t/**\n\t\t * Whether the audio should loop or not.\n\t\t *\n\t\t * Defined via {@link Audio#setLoop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.loop = false;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * start, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopStart = 0;\n\n\t\t/**\n\t\t * Defines where in the audio buffer the replay should\n\t\t * stop, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loopEnd = 0;\n\n\t\t/**\n\t\t * An offset to the time within the audio buffer the playback\n\t\t * should begin, in seconds.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.offset = 0;\n\n\t\t/**\n\t\t * Overrides the default duration of the audio.\n\t\t *\n\t\t * @type {undefined|number}\n\t\t * @default undefined\n\t\t */\n\t\tthis.duration = undefined;\n\n\t\t/**\n\t\t * The playback speed.\n\t\t *\n\t\t * Defined via {@link Audio#setPlaybackRate}.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 1\n\t\t */\n\t\tthis.playbackRate = 1;\n\n\t\t/**\n\t\t * Indicates whether the audio is playing or not.\n\t\t *\n\t\t * This flag will be automatically set when using {@link Audio#play},\n\t\t * {@link Audio#pause}, {@link Audio#stop}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isPlaying = false;\n\n\t\t/**\n\t\t * Indicates whether the audio playback can be controlled\n\t\t * with method like {@link Audio#play} or {@link Audio#pause}.\n\t\t *\n\t\t * This flag will be automatically set when audio sources are\n\t\t * defined.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.hasPlaybackControl = true;\n\n\t\t/**\n\t\t * Holds a reference to the current audio source.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @readonly\n\t\t * @default null\n\t\t */\n\t\tthis.source = null;\n\n\t\t/**\n\t\t * Defines the source type.\n\t\t *\n\t\t * The property is automatically by one of the `set*()` methods.\n\t\t *\n\t\t * @type {('empty'|'audioNode'|'mediaNode'|'mediaStreamNode'|'buffer')}\n\t\t * @readonly\n\t\t * @default 'empty'\n\t\t */\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\t/**\n\t\t * Can be used to apply a variety of low-order filters to create\n\t\t * more complex sound effects e.g. via `BiquadFilterNode`.\n\t\t *\n\t\t * The property is automatically set by {@link Audio#setFilters}.\n\t\t *\n\t\t * @type {Array<AudioNode>}\n\t\t * @readonly\n\t\t */\n\t\tthis.filters = [];\n\n\t}\n\n\t/**\n\t * Returns the output audio node.\n\t *\n\t * @return {GainNode} The output node.\n\t */\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Sets the given audio node as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media element as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {HTMLMediaElement} mediaElement - The media element.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given media stream as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.\n\t *\n\t * @param {MediaStream} mediaStream - The media stream.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given audio buffer as the source of this instance.\n\t *\n\t * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.\n\t *\n\t * @param {AudioBuffer} audioBuffer - The audio buffer.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\t/**\n\t * Pauses the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Stops the playback of the audio.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tstop( delay = 0 ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop( this.context.currentTime + delay );\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio} A reference to this instance.\n\t */\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects to the audio source. This is used internally on\n\t * initialisation and when setting / removing filters.\n\t *\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tdisconnect() {\n\n\t\tif ( this._connected === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filters.\n\t *\n\t * @return {Array<AudioNode>} The list of filters.\n\t */\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\t/**\n\t * Sets an array of filters and connects them with the audio source.\n\t *\n\t * @param {Array<AudioNode>} [value] - A list of filters.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the detuning of oscillation in cents.\n\t *\n\t * @param {number} value - The detuning of oscillation in cents.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.isPlaying === true && this.source.detune !== undefined ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the detuning of oscillation in cents.\n\t *\n\t * @return {number} The detuning of oscillation in cents.\n\t */\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\t/**\n\t * Returns the first filter in the list of filters.\n\t *\n\t * @return {AudioNode|undefined} The first filter in the list of filters.\n\t */\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\t/**\n\t * Applies a single filter node to the audio.\n\t *\n\t * @param {AudioNode} [filter] - The filter to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\t/**\n\t * Sets the playback rate.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {number} [value] - The playback rate to set.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current playback rate.\n\n\t * @return {number} The playback rate.\n\t */\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\t/**\n\t * Automatically called when playback finished.\n\t */\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\t\tthis._progress = 0;\n\n\t}\n\n\t/**\n\t * Returns the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @return {boolean} Whether the audio should loop or not.\n\t */\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\t/**\n\t * Sets the loop flag.\n\t *\n\t * Can only be used with compatible audio sources that allow playback control.\n\t *\n\t * @param {boolean} value - Whether the audio should loop or not.\n\t * @return {Audio|undefined} A reference to this instance.\n\t */\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop start value which defines where in the audio buffer the replay should\n\t * start, in seconds.\n\t *\n\t * @param {number} value - The loop start value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the loop end value which defines where in the audio buffer the replay should\n\t * stop, in seconds.\n\t *\n\t * @param {number} value - The loop end value.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the volume.\n\t *\n\t * @return {number} The volume.\n\t */\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the volume.\n\t *\n\t * @param {number} value - The volume to set.\n\t * @return {Audio} A reference to this instance.\n\t */\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.sourceType !== 'buffer' ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio source type cannot be copied.' );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.autoplay = source.autoplay;\n\n\t\tthis.buffer = source.buffer;\n\t\tthis.detune = source.detune;\n\t\tthis.loop = source.loop;\n\t\tthis.loopStart = source.loopStart;\n\t\tthis.loopEnd = source.loopEnd;\n\t\tthis.offset = source.offset;\n\t\tthis.duration = source.duration;\n\t\tthis.playbackRate = source.playbackRate;\n\t\tthis.hasPlaybackControl = source.hasPlaybackControl;\n\t\tthis.sourceType = source.sourceType;\n\n\t\tthis.filters = source.filters.slice();\n\n\t\treturn this;\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor( this.listener ).copy( this, recursive );\n\n\t}\n\n}\n\nexport { Audio };\n"],"mappings":"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","ignoreList":[]}