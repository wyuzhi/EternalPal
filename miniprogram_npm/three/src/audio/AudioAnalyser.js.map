{"version":3,"file":"node_modules/three/src/audio/AudioAnalyser.js","names":["AudioAnalyser","constructor","audio","fftSize","this","analyser","context","createAnalyser","data","Uint8Array","frequencyBinCount","getOutput","connect","getFrequencyData","getByteFrequencyData","getAverageFrequency","value","i","length"],"sources":["node_modules/three/src/audio/AudioAnalyser.js"],"sourcesContent":["/**\n * This class can be used to analyse audio data.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create an Audio source\n * const sound = new THREE.Audio( listener );\n *\n * // load a sound and set it as the Audio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/ambient.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setLoop(true);\n * \tsound.setVolume(0.5);\n * \tsound.play();\n * });\n *\n * // create an AudioAnalyser, passing in the sound and desired fftSize\n * const analyser = new THREE.AudioAnalyser( sound, 32 );\n *\n * // get the average frequency of the sound\n * const data = analyser.getAverageFrequency();\n * ```\n */\nclass AudioAnalyser {\n\n\t/**\n\t * Constructs a new audio analyzer.\n\t *\n\t * @param {Audio} audio - The audio to analyze.\n\t * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.\n\t */\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\t/**\n\t\t * The global audio listener.\n\t\t *\n\t\t * @type {AnalyserNode}\n\t\t */\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\t/**\n\t\t * Holds the analyzed data.\n\t\t *\n\t\t * @type {Uint8Array}\n\t\t */\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\t/**\n\t * Returns an array with frequency data of the audio.\n\t *\n\t * Each item in the array represents the decibel value for a specific frequency.\n\t * The frequencies are spread linearly from 0 to 1/2 of the sample rate.\n\t * For example, for 48000 sample rate, the last item of the array will represent\n\t * the decibel value for 24000 Hz.\n\t *\n\t * @return {Uint8Array} The frequency data.\n\t */\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\t/**\n\t * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.\n\t *\n\t * @return {number} The average frequency.\n\t */\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nexport { AudioAnalyser };\n"],"mappings":"AA2BA,MAAMA,cAQL,WAAAC,CAAaC,EAAOC,EAAU,MAO7BC,KAAKC,SAAWH,EAAMI,QAAQC,iBAC9BH,KAAKC,SAASF,QAAUA,EAOxBC,KAAKI,KAAO,IAAIC,WAAYL,KAAKC,SAASK,mBAE1CR,EAAMS,YAAYC,QAASR,KAAKC,SAEjC,CAYA,gBAAAQ,GAIC,OAFAT,KAAKC,SAASS,qBAAsBV,KAAKI,MAElCJ,KAAKI,IAEb,CAOA,mBAAAO,GAEC,IAAIC,EAAQ,EACZ,MAAMR,EAAOJ,KAAKS,mBAElB,IAAM,IAAII,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IAEjCD,GAASR,EAAMS,GAIhB,OAAOD,EAAQR,EAAKU,MAErB,SAIQlB","ignoreList":[]}