import{Vector3}from"../math/Vector3.js";import{Quaternion}from"../math/Quaternion.js";import{Clock}from"../core/Clock.js";import{Object3D}from"../core/Object3D.js";import{AudioContext}from"./AudioContext.js";const _position=new Vector3,_quaternion=new Quaternion,_scale=new Vector3,_forward=new Vector3,_up=new Vector3;class AudioListener extends Object3D{constructor(){super(),this.type="AudioListener",this.context=AudioContext.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Clock}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const i=this.context.listener;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(_position,_quaternion,_scale),_forward.set(0,0,-1).applyQuaternion(_quaternion),_up.set(0,1,0).applyQuaternion(_quaternion),i.positionX){const t=this.context.currentTime+this.timeDelta;i.positionX.linearRampToValueAtTime(_position.x,t),i.positionY.linearRampToValueAtTime(_position.y,t),i.positionZ.linearRampToValueAtTime(_position.z,t),i.forwardX.linearRampToValueAtTime(_forward.x,t),i.forwardY.linearRampToValueAtTime(_forward.y,t),i.forwardZ.linearRampToValueAtTime(_forward.z,t),i.upX.linearRampToValueAtTime(_up.x,t),i.upY.linearRampToValueAtTime(_up.y,t),i.upZ.linearRampToValueAtTime(_up.z,t)}else i.setPosition(_position.x,_position.y,_position.z),i.setOrientation(_forward.x,_forward.y,_forward.z,_up.x,_up.y,_up.z)}}export{AudioListener};
//# sourceMappingURL=AudioListener.js.map