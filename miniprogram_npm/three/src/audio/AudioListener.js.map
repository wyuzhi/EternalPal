{"version":3,"file":"node_modules/three/src/audio/AudioListener.js","names":["Vector3","Quaternion","Clock","Object3D","AudioContext","_position","_quaternion","_scale","_forward","_up","AudioListener","constructor","super","this","type","context","getContext","gain","createGain","connect","destination","filter","timeDelta","_clock","getInput","removeFilter","disconnect","getFilter","setFilter","value","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","updateMatrixWorld","force","listener","getDelta","matrixWorld","decompose","set","applyQuaternion","positionX","endTime","linearRampToValueAtTime","x","positionY","y","positionZ","z","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation"],"sources":["node_modules/three/src/audio/AudioListener.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Quaternion } from '../math/Quaternion.js';\nimport { Clock } from '../core/Clock.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { AudioContext } from './AudioContext.js';\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\n\nconst _forward = /*@__PURE__*/ new Vector3();\nconst _up = /*@__PURE__*/ new Vector3();\n\n/**\n * The class represents a virtual listener of the all positional and non-positional audio effects\n * in the scene. A three.js application usually creates a single listener. It is a mandatory\n * constructor parameter for audios entities like {@link Audio} and {@link PositionalAudio}.\n *\n * In most cases, the listener object is a child of the camera. So the 3D transformation of the\n * camera represents the 3D transformation of the listener.\n *\n * @augments Object3D\n */\nclass AudioListener extends Object3D {\n\n\t/**\n\t * Constructs a new audio listener.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\t/**\n\t\t * The native audio context.\n\t\t *\n\t\t * @type {AudioContext}\n\t\t * @readonly\n\t\t */\n\t\tthis.context = AudioContext.getContext();\n\n\t\t/**\n\t\t * The gain node used for volume control.\n\t\t *\n\t\t * @type {GainNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\t/**\n\t\t * An optional filter.\n\t\t *\n\t\t * Defined via {@link AudioListener#setFilter}.\n\t\t *\n\t\t * @type {?AudioNode}\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.filter = null;\n\n\t\t/**\n\t\t * Time delta values required for `linearRampToValueAtTime()` usage.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\t/**\n\t * Returns the listener's input node.\n\t *\n\t * This method is used by other audio nodes to connect to this listener.\n\t *\n\t * @return {GainNode} The input node.\n\t */\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\t/**\n\t * Removes the current filter from this listener.\n\t *\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current set filter.\n\t *\n\t * @return {?AudioNode} The filter.\n\t */\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\t/**\n\t * Sets the given filter to this listener.\n\t *\n\t * @param {AudioNode} value - The filter to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the applications master volume.\n\t *\n\t * @return {number} The master volume.\n\t */\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\t/**\n\t * Sets the applications master volume. This volume setting affects\n\t * all audio nodes in the scene.\n\t *\n\t * @param {number} value - The master volume to set.\n\t * @return {AudioListener} A reference to this listener.\n\t */\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t// the initial forward and up directions must be orthogonal\n\t\t_forward.set( 0, 0, - 1 ).applyQuaternion( _quaternion );\n\t\t_up.set( 0, 1, 0 ).applyQuaternion( _quaternion );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _forward.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _forward.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _forward.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( _up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( _up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( _up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position.x, _position.y, _position.z );\n\t\t\tlistener.setOrientation( _forward.x, _forward.y, _forward.z, _up.x, _up.y, _up.z );\n\n\t\t}\n\n\t}\n\n}\n\nexport { AudioListener };\n"],"mappings":"OAASA,YAAe,4BACfC,eAAkB,+BAClBC,UAAa,0BACbC,aAAgB,6BAChBC,iBAAoB,oBAE7B,MAAMC,UAA0B,IAAIL,QAC9BM,YAA4B,IAAIL,WAChCM,OAAuB,IAAIP,QAE3BQ,SAAyB,IAAIR,QAC7BS,IAAoB,IAAIT,QAY9B,MAAMU,sBAAsBP,SAK3B,WAAAQ,GAECC,QAEAC,KAAKC,KAAO,gBAQZD,KAAKE,QAAUX,aAAaY,aAQ5BH,KAAKI,KAAOJ,KAAKE,QAAQG,aACzBL,KAAKI,KAAKE,QAASN,KAAKE,QAAQK,aAWhCP,KAAKQ,OAAS,KASdR,KAAKS,UAAY,EAIjBT,KAAKU,OAAS,IAAIrB,KAEnB,CASA,QAAAsB,GAEC,OAAOX,KAAKI,IAEb,CAOA,YAAAQ,GAWC,OATqB,OAAhBZ,KAAKQ,SAETR,KAAKI,KAAKS,WAAYb,KAAKQ,QAC3BR,KAAKQ,OAAOK,WAAYb,KAAKE,QAAQK,aACrCP,KAAKI,KAAKE,QAASN,KAAKE,QAAQK,aAChCP,KAAKQ,OAAS,MAIRR,IAER,CAOA,SAAAc,GAEC,OAAOd,KAAKQ,MAEb,CAQA,SAAAO,CAAWC,GAiBV,OAfqB,OAAhBhB,KAAKQ,QAETR,KAAKI,KAAKS,WAAYb,KAAKQ,QAC3BR,KAAKQ,OAAOK,WAAYb,KAAKE,QAAQK,cAIrCP,KAAKI,KAAKS,WAAYb,KAAKE,QAAQK,aAIpCP,KAAKQ,OAASQ,EACdhB,KAAKI,KAAKE,QAASN,KAAKQ,QACxBR,KAAKQ,OAAOF,QAASN,KAAKE,QAAQK,aAE3BP,IAER,CAOA,eAAAiB,GAEC,OAAOjB,KAAKI,KAAKA,KAAKY,KAEvB,CASA,eAAAE,CAAiBF,GAIhB,OAFAhB,KAAKI,KAAKA,KAAKe,gBAAiBH,EAAOhB,KAAKE,QAAQkB,YAAa,KAE1DpB,IAER,CAEA,iBAAAqB,CAAmBC,GAElBvB,MAAMsB,kBAAmBC,GAEzB,MAAMC,EAAWvB,KAAKE,QAAQqB,SAU9B,GARAvB,KAAKS,UAAYT,KAAKU,OAAOc,WAE7BxB,KAAKyB,YAAYC,UAAWlC,UAAWC,YAAaC,QAGpDC,SAASgC,IAAK,EAAG,GAAK,GAAIC,gBAAiBnC,aAC3CG,IAAI+B,IAAK,EAAG,EAAG,GAAIC,gBAAiBnC,aAE/B8B,EAASM,UAAY,CAIzB,MAAMC,EAAU9B,KAAKE,QAAQkB,YAAcpB,KAAKS,UAEhDc,EAASM,UAAUE,wBAAyBvC,UAAUwC,EAAGF,GACzDP,EAASU,UAAUF,wBAAyBvC,UAAU0C,EAAGJ,GACzDP,EAASY,UAAUJ,wBAAyBvC,UAAU4C,EAAGN,GACzDP,EAASc,SAASN,wBAAyBpC,SAASqC,EAAGF,GACvDP,EAASe,SAASP,wBAAyBpC,SAASuC,EAAGJ,GACvDP,EAASgB,SAASR,wBAAyBpC,SAASyC,EAAGN,GACvDP,EAASiB,IAAIT,wBAAyBnC,IAAIoC,EAAGF,GAC7CP,EAASkB,IAAIV,wBAAyBnC,IAAIsC,EAAGJ,GAC7CP,EAASmB,IAAIX,wBAAyBnC,IAAIwC,EAAGN,EAE9C,MAECP,EAASoB,YAAanD,UAAUwC,EAAGxC,UAAU0C,EAAG1C,UAAU4C,GAC1Db,EAASqB,eAAgBjD,SAASqC,EAAGrC,SAASuC,EAAGvC,SAASyC,EAAGxC,IAAIoC,EAAGpC,IAAIsC,EAAGtC,IAAIwC,EAIjF,SAIQvC","ignoreList":[]}