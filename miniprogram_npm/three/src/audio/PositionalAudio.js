import{Vector3}from"../math/Vector3.js";import{Quaternion}from"../math/Quaternion.js";import{Audio}from"./Audio.js";const _position=new Vector3,_quaternion=new Quaternion,_scale=new Vector3,_orientation=new Vector3;class PositionalAudio extends Audio{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){return super.connect(),this.panner.connect(this.gain),this}disconnect(){return super.disconnect(),this.panner.disconnect(this.gain),this}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,n,e){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=n,this.panner.coneOuterGain=e,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(_position,_quaternion,_scale),_orientation.set(0,0,1).applyQuaternion(_quaternion);const n=this.panner;if(n.positionX){const t=this.context.currentTime+this.listener.timeDelta;n.positionX.linearRampToValueAtTime(_position.x,t),n.positionY.linearRampToValueAtTime(_position.y,t),n.positionZ.linearRampToValueAtTime(_position.z,t),n.orientationX.linearRampToValueAtTime(_orientation.x,t),n.orientationY.linearRampToValueAtTime(_orientation.y,t),n.orientationZ.linearRampToValueAtTime(_orientation.z,t)}else n.setPosition(_position.x,_position.y,_position.z),n.setOrientation(_orientation.x,_orientation.y,_orientation.z)}}export{PositionalAudio};
//# sourceMappingURL=PositionalAudio.js.map