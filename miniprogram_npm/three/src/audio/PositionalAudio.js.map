{"version":3,"file":"node_modules/three/src/audio/PositionalAudio.js","names":["Vector3","Quaternion","Audio","_position","_quaternion","_scale","_orientation","PositionalAudio","constructor","listener","super","this","panner","context","createPanner","panningModel","connect","gain","disconnect","getOutput","getRefDistance","refDistance","setRefDistance","value","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","updateMatrixWorld","force","hasPlaybackControl","isPlaying","matrixWorld","decompose","set","applyQuaternion","positionX","endTime","currentTime","timeDelta","linearRampToValueAtTime","x","positionY","y","positionZ","z","orientationX","orientationY","orientationZ","setPosition","setOrientation"],"sources":["node_modules/three/src/audio/PositionalAudio.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Quaternion } from '../math/Quaternion.js';\nimport { Audio } from './Audio.js';\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents a positional audio object.\n *\n * ```js\n * // create an AudioListener and add it to the camera\n * const listener = new THREE.AudioListener();\n * camera.add( listener );\n *\n * // create the PositionalAudio object (passing in the listener)\n * const sound = new THREE.PositionalAudio( listener );\n *\n * // load a sound and set it as the PositionalAudio object's buffer\n * const audioLoader = new THREE.AudioLoader();\n * audioLoader.load( 'sounds/song.ogg', function( buffer ) {\n * \tsound.setBuffer( buffer );\n * \tsound.setRefDistance( 20 );\n * \tsound.play();\n * });\n *\n * // create an object for the sound to play from\n * const sphere = new THREE.SphereGeometry( 20, 32, 16 );\n * const material = new THREE.MeshPhongMaterial( { color: 0xff2200 } );\n * const mesh = new THREE.Mesh( sphere, material );\n * scene.add( mesh );\n *\n * // finally add the sound to the mesh\n * mesh.add( sound );\n *\n * @augments Audio\n */\nclass PositionalAudio extends Audio {\n\n\t/**\n\t * Constructs a positional audio.\n\t *\n\t * @param {AudioListener} listener - The global audio listener.\n\t */\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\t/**\n\t\t * The panner node represents the location, direction, and behavior of an audio\n\t\t * source in 3D space.\n\t\t *\n\t\t * @type {PannerNode}\n\t\t * @readonly\n\t\t */\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t\treturn this;\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\t/**\n\t * Returns the current reference distance.\n\t *\n\t * @return {number} The reference distance.\n\t */\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\t/**\n\t * Defines the reference distance for reducing volume as the audio source moves\n\t * further from the listener â€“ i.e. the distance at which the volume reduction\n\t * starts taking effect.\n\t *\n\t * @param {number} value - The reference distance to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current rolloff factor.\n\t *\n\t * @return {number} The rolloff factor.\n\t */\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\t/**\n\t * Defines how quickly the volume is reduced as the source moves away from the listener.\n\t *\n\t * @param {number} value - The rolloff factor.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current distance model.\n\t *\n\t * @return {('linear'|'inverse'|'exponential')} The distance model.\n\t */\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\t/**\n\t * Defines which algorithm to use to reduce the volume of the audio source\n\t * as it moves away from the listener.\n\t *\n\t * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}\n\t * for more details.\n\t *\n\t * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the current max distance.\n\t *\n\t * @return {number} The max distance.\n\t */\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\t/**\n\t * Defines the maximum distance between the audio source and the listener,\n\t * after which the volume is not reduced any further.\n\t *\n\t * This value is used only by the `linear` distance model.\n\t *\n\t * @param {number} value - The max distance.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the directional cone in which the audio can be listened.\n\t *\n\t * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.\n\t * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.\n\t * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.\n\t * @return {PositionalAudio} A reference to this instance.\n\t */\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nexport { PositionalAudio };\n"],"mappings":"OAASA,YAAe,4BACfC,eAAkB,+BAClBC,UAAa,aAEtB,MAAMC,UAA0B,IAAIH,QAC9BI,YAA4B,IAAIH,WAChCI,OAAuB,IAAIL,QAC3BM,aAA6B,IAAIN,QAgCvC,MAAMO,wBAAwBL,MAO7B,WAAAM,CAAaC,GAEZC,MAAOD,GASPE,KAAKC,OAASD,KAAKE,QAAQC,eAC3BH,KAAKC,OAAOG,aAAe,OAC3BJ,KAAKC,OAAOI,QAASL,KAAKM,KAE3B,CAEA,OAAAD,GAMC,OAJAN,MAAMM,UAENL,KAAKC,OAAOI,QAASL,KAAKM,MAEnBN,IAER,CAEA,UAAAO,GAMC,OAJAR,MAAMQ,aAENP,KAAKC,OAAOM,WAAYP,KAAKM,MAEtBN,IAER,CAEA,SAAAQ,GAEC,OAAOR,KAAKC,MAEb,CAOA,cAAAQ,GAEC,OAAOT,KAAKC,OAAOS,WAEpB,CAUA,cAAAC,CAAgBC,GAIf,OAFAZ,KAAKC,OAAOS,YAAcE,EAEnBZ,IAER,CAOA,gBAAAa,GAEC,OAAOb,KAAKC,OAAOa,aAEpB,CAQA,gBAAAC,CAAkBH,GAIjB,OAFAZ,KAAKC,OAAOa,cAAgBF,EAErBZ,IAER,CAOA,gBAAAgB,GAEC,OAAOhB,KAAKC,OAAOgB,aAEpB,CAYA,gBAAAC,CAAkBN,GAIjB,OAFAZ,KAAKC,OAAOgB,cAAgBL,EAErBZ,IAER,CAOA,cAAAmB,GAEC,OAAOnB,KAAKC,OAAOmB,WAEpB,CAWA,cAAAC,CAAgBT,GAIf,OAFAZ,KAAKC,OAAOmB,YAAcR,EAEnBZ,IAER,CAUA,kBAAAsB,CAAoBC,EAAgBC,EAAgBC,GAMnD,OAJAzB,KAAKC,OAAOsB,eAAiBA,EAC7BvB,KAAKC,OAAOuB,eAAiBA,EAC7BxB,KAAKC,OAAOwB,cAAgBA,EAErBzB,IAER,CAEA,iBAAA0B,CAAmBC,GAIlB,GAFA5B,MAAM2B,kBAAmBC,IAEQ,IAA5B3B,KAAK4B,qBAAkD,IAAnB5B,KAAK6B,UAAsB,OAEpE7B,KAAK8B,YAAYC,UAAWvC,UAAWC,YAAaC,QAEpDC,aAAaqC,IAAK,EAAG,EAAG,GAAIC,gBAAiBxC,aAE7C,MAAMQ,EAASD,KAAKC,OAEpB,GAAKA,EAAOiC,UAAY,CAIvB,MAAMC,EAAUnC,KAAKE,QAAQkC,YAAcpC,KAAKF,SAASuC,UAEzDpC,EAAOiC,UAAUI,wBAAyB9C,UAAU+C,EAAGJ,GACvDlC,EAAOuC,UAAUF,wBAAyB9C,UAAUiD,EAAGN,GACvDlC,EAAOyC,UAAUJ,wBAAyB9C,UAAUmD,EAAGR,GACvDlC,EAAO2C,aAAaN,wBAAyB3C,aAAa4C,EAAGJ,GAC7DlC,EAAO4C,aAAaP,wBAAyB3C,aAAa8C,EAAGN,GAC7DlC,EAAO6C,aAAaR,wBAAyB3C,aAAagD,EAAGR,EAE9D,MAEClC,EAAO8C,YAAavD,UAAU+C,EAAG/C,UAAUiD,EAAGjD,UAAUmD,GACxD1C,EAAO+C,eAAgBrD,aAAa4C,EAAG5C,aAAa8C,EAAG9C,aAAagD,EAItE,SAIQ/C","ignoreList":[]}