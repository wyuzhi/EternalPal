{"version":3,"file":"node_modules/three/src/cameras/Camera.js","names":["WebGLCoordinateSystem","Matrix4","Object3D","Camera","constructor","super","this","isCamera","type","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","coordinateSystem","_reversedDepth","reversedDepth","copy","source","recursive","getWorldDirection","target","negate","updateMatrixWorld","force","matrixWorld","invert","updateWorldMatrix","updateParents","updateChildren","clone"],"sources":["node_modules/three/src/cameras/Camera.js"],"sourcesContent":["import { WebGLCoordinateSystem } from '../constants.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\n\n/**\n * Abstract base class for cameras. This class should always be inherited\n * when you build a new camera.\n *\n * @abstract\n * @augments Object3D\n */\nclass Camera extends Object3D {\n\n\t/**\n\t * Constructs a new camera.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\t/**\n\t\t * The inverse of the camera's world matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\t/**\n\t\t * The camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrix = new Matrix4();\n\n\t\t/**\n\t\t * The inverse of the camera's projection matrix.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\t/**\n\t\t * The coordinate system in which the camera is used.\n\t\t *\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\n\t\t */\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t\tthis._reversedDepth = false;\n\n\t}\n\n\t/**\n\t * The flag that indicates whether the camera uses a reversed depth buffer.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t */\n\tget reversedDepth() {\n\n\t\treturn this._reversedDepth;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * This method is overwritten since cameras have a different forward vector compared to other\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Camera };\n"],"mappings":"OAASA,0BAA6B,yBAC7BC,YAAe,4BACfC,aAAgB,sBASzB,MAAMC,eAAeD,SAKpB,WAAAE,GAECC,QASAC,KAAKC,UAAW,EAEhBD,KAAKE,KAAO,SAOZF,KAAKG,mBAAqB,IAAIR,QAO9BK,KAAKI,iBAAmB,IAAIT,QAO5BK,KAAKK,wBAA0B,IAAIV,QAOnCK,KAAKM,iBAAmBZ,sBAExBM,KAAKO,gBAAiB,CAEvB,CAQA,iBAAIC,GAEH,OAAOR,KAAKO,cAEb,CAEA,IAAAE,CAAMC,EAAQC,GAWb,OATAZ,MAAMU,KAAMC,EAAQC,GAEpBX,KAAKG,mBAAmBM,KAAMC,EAAOP,oBAErCH,KAAKI,iBAAiBK,KAAMC,EAAON,kBACnCJ,KAAKK,wBAAwBI,KAAMC,EAAOL,yBAE1CL,KAAKM,iBAAmBI,EAAOJ,iBAExBN,IAER,CAWA,iBAAAY,CAAmBC,GAElB,OAAOd,MAAMa,kBAAmBC,GAASC,QAE1C,CAEA,iBAAAC,CAAmBC,GAElBjB,MAAMgB,kBAAmBC,GAEzBhB,KAAKG,mBAAmBM,KAAMT,KAAKiB,aAAcC,QAElD,CAEA,iBAAAC,CAAmBC,EAAeC,GAEjCtB,MAAMoB,kBAAmBC,EAAeC,GAExCrB,KAAKG,mBAAmBM,KAAMT,KAAKiB,aAAcC,QAElD,CAEA,KAAAI,GAEC,OAAO,IAAItB,KAAKF,aAAcW,KAAMT,KAErC,SAIQH","ignoreList":[]}