import{WebGLCoordinateSystem,WebGPUCoordinateSystem}from"../constants.js";import{Object3D}from"../core/Object3D.js";import{PerspectiveCamera}from"./PerspectiveCamera.js";const fov=-90,aspect=1;class CubeCamera extends Object3D{constructor(e,t,r){super(),this.type="CubeCamera",this.renderTarget=r,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new PerspectiveCamera(-90,1,e,t);s.layers=this.layers,this.add(s);const a=new PerspectiveCamera(-90,1,e,t);a.layers=this.layers,this.add(a);const o=new PerspectiveCamera(-90,1,e,t);o.layers=this.layers,this.add(o);const i=new PerspectiveCamera(-90,1,e,t);i.layers=this.layers,this.add(i);const n=new PerspectiveCamera(-90,1,e,t);n.layers=this.layers,this.add(n);const d=new PerspectiveCamera(-90,1,e,t);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[r,s,a,o,i,n]=t;for(const e of t)this.remove(e);if(e===WebGLCoordinateSystem)r.up.set(0,1,0),r.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),a.up.set(0,0,-1),a.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),i.up.set(0,1,0),i.lookAt(0,0,1),n.up.set(0,1,0),n.lookAt(0,0,-1);else{if(e!==WebGPUCoordinateSystem)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);r.up.set(0,-1,0),r.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),a.up.set(0,0,1),a.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),i.up.set(0,-1,0),i.lookAt(0,0,1),n.up.set(0,-1,0),n.lookAt(0,0,-1)}for(const e of t)this.add(e),e.updateMatrixWorld()}update(e,t){null===this.parent&&this.updateMatrixWorld();const{renderTarget:r,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[a,o,i,n,d,p]=this.children,c=e.getRenderTarget(),l=e.getActiveCubeFace(),m=e.getActiveMipmapLevel(),u=e.xr.enabled;e.xr.enabled=!1;const h=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,e.setRenderTarget(r,0,s),e.render(t,a),e.setRenderTarget(r,1,s),e.render(t,o),e.setRenderTarget(r,2,s),e.render(t,i),e.setRenderTarget(r,3,s),e.render(t,n),e.setRenderTarget(r,4,s),e.render(t,d),r.texture.generateMipmaps=h,e.setRenderTarget(r,5,s),e.render(t,p),e.setRenderTarget(c,l,m),e.xr.enabled=u,r.texture.needsPMREMUpdate=!0}}export{CubeCamera};
//# sourceMappingURL=CubeCamera.js.map