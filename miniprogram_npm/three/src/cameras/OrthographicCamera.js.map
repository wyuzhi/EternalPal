{"version":3,"file":"node_modules/three/src/cameras/OrthographicCamera.js","names":["Camera","OrthographicCamera","constructor","left","right","top","bottom","near","far","super","this","isOrthographicCamera","type","zoom","view","updateProjectionMatrix","copy","source","recursive","Object","assign","setViewOffset","fullWidth","fullHeight","x","y","width","height","enabled","offsetX","offsetY","clearViewOffset","dx","dy","cx","cy","scaleW","scaleH","projectionMatrix","makeOrthographic","coordinateSystem","reversedDepth","projectionMatrixInverse","invert","toJSON","meta","data","object"],"sources":["node_modules/three/src/cameras/OrthographicCamera.js"],"sourcesContent":["import { Camera } from './Camera.js';\n\n/**\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\n *\n * In this projection mode, an object's size in the rendered image stays\n * constant regardless of its distance from the camera. This can be useful\n * for rendering 2D scenes and UI elements, amongst other things.\n *\n * ```js\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n * scene.add( camera );\n * ```\n *\n * @augments Camera\n */\nclass OrthographicCamera extends Camera {\n\n\t/**\n\t * Constructs a new orthographic camera.\n\t *\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\n\t * @param {number} [near=0.1] - The camera's near plane.\n\t * @param {number} [far=2000] - The camera's far plane.\n\t */\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\t/**\n\t\t * The zoom factor of the camera.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoom = 1;\n\n\t\t/**\n\t\t * Represents the frustum window specification. This property should not be edited\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.view = null;\n\n\t\t/**\n\t\t * The left plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.left = left;\n\n\t\t/**\n\t\t * The right plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.right = right;\n\n\t\t/**\n\t\t * The top plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.top = top;\n\n\t\t/**\n\t\t * The bottom plane of the camera's frustum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.bottom = bottom;\n\n\t\t/**\n\t\t * The camera's near plane. The valid range is greater than `0`\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\n\t\t *\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\n\t\t * valid value for an orthographic camera's near plane.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The camera's far plane. Must be greater than the\n\t\t * current value of {@link OrthographicCamera#near}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2000\n\t\t */\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * @param {number} fullWidth - The full width of multiview setup.\n\t * @param {number} fullHeight - The full height of multiview setup.\n\t * @param {number} x - The horizontal offset of the subcamera.\n\t * @param {number} y - The vertical offset of the subcamera.\n\t * @param {number} width - The width of subcamera.\n\t * @param {number} height - The height of subcamera.\n\t * @see {@link PerspectiveCamera#setViewOffset}\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Removes the view offset from the projection matrix.\n\t */\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Updates the camera's projection matrix. Must be called after any change of\n\t * camera properties.\n\t */\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem, this.reversedDepth );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { OrthographicCamera };\n"],"mappings":"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","ignoreList":[]}