{"version":3,"file":"node_modules/three/src/core/BufferAttribute.js","names":["Vector3","Vector2","denormalize","normalize","StaticDrawUsage","FloatType","fromHalfFloat","toHalfFloat","_vector","_vector2","_id","BufferAttribute","constructor","array","itemSize","normalized","Array","isArray","TypeError","this","isBufferAttribute","Object","defineProperty","value","name","count","undefined","length","usage","updateRanges","gpuType","version","onUploadCallback","needsUpdate","setUsage","addUpdateRange","start","push","clearUpdateRanges","copy","source","copyAt","index1","attribute","index2","i","l","copyArray","set","applyMatrix3","m","fromBufferAttribute","setXY","x","y","setXYZ","z","applyMatrix4","applyNormalMatrix","transformDirection","offset","getComponent","index","component","setComponent","getX","setX","getY","setY","getZ","setZ","getW","w","setW","setXYZW","onUpload","callback","clone","toJSON","data","type","from","Int8BufferAttribute","super","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","Float32Array"],"sources":["node_modules/three/src/core/BufferAttribute.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { denormalize, normalize } from '../math/MathUtils.js';\nimport { StaticDrawUsage, FloatType } from '../constants.js';\nimport { fromHalfFloat, toHalfFloat } from '../extras/DataUtils.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector2();\n\nlet _id = 0;\n\n/**\n * This class stores data for an attribute (such as vertex positions, face\n * indices, normals, colors, UVs, and any custom attributes ) associated with\n * a geometry, which allows for more efficient passing of data to the GPU.\n *\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\n */\nclass BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {TypedArray} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferAttribute = true;\n\n\t\t/**\n\t\t * The ID of the buffer attribute.\n\t\t *\n\t\t * @name BufferAttribute#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\t/**\n\t\t * The name of the buffer attribute.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The array holding the attribute data. It should have `itemSize * numVertices`\n\t\t * elements, where `numVertices` is the number of vertices in the associated geometry.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of values of the array that should be associated with a particular vertex.\n\t\t * For instance, if this attribute is storing a 3-component vector (such as a position,\n\t\t * normal, or color), then the value should be `3`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.itemSize = itemSize;\n\n\t\t/**\n\t\t * Represents the number of items this buffer attribute stores. It is internally computed\n\t\t * by dividing the `array` length by the `itemSize`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\n\t\t/**\n\t\t * Applies to integer data only. Indicates how the underlying data in the buffer maps to\n\t\t * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\n\t\t * and `normalized` is `true`, the values `0 - +65535` in the array data will be mapped to\n\t\t * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\n\t\t * to floats unmodified, i.e. `65535` becomes `65535.0f`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.normalized = normalized;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * Configures the bound GPU type for use in shaders.\n\t\t *\n\t\t * Note: this only has an effect for integer arrays and is not configurable for float arrays.\n\t\t * For lower precision float types, use `Float16BufferAttribute`.\n\t\t *\n\t\t * @type {(FloatType|IntType)}\n\t\t * @default FloatType\n\t\t */\n\t\tthis.gpuType = FloatType;\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute\n\t * array data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this buffer attribute.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {BufferAttribute} A reference to this buffer attribute.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given buffer attribute to this instance.\n\t *\n\t * @param {BufferAttribute} source - The buffer attribute to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given buffer attribute to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this buffer attribute.\n\t * @param {BufferAttribute} attribute - The buffer attribute to copy from.\n\t * @param {number} index2 - The source index into the given buffer attribute.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given array data into this buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} array - The array to copy.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 matrix to the given attribute. Works with\n\t * item size `2` and `3`.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2.fromBufferAttribute( this, i );\n\t\t\t\t_vector2.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2.x, _vector2.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector.fromBufferAttribute( this, i );\n\t\t\t\t_vector.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector.fromBufferAttribute( this, i );\n\n\t\t\t_vector.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\n\t * item size `3`.\n\t *\n\t * @param {Matrix3} m - The normal matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector.fromBufferAttribute( this, i );\n\n\t\t\t_vector.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\n\t * item size `3` and with direction vectors.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector.fromBufferAttribute( this, i );\n\n\t\t\t_vector.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the buffer attribute.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this buffer attribute's array.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @return {number} The returned value.\n\t */\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.itemSize + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\t/**\n\t * Sets the given value to the given component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} component - The component index.\n\t * @param {number} value - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.array[ index * this.itemSize + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The x component.\n\t */\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\t/**\n\t * Sets the x component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The y component.\n\t */\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\t/**\n\t * Sets the y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} y - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The z component.\n\t */\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\t/**\n\t * Sets the z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} z - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @return {number} The w component.\n\t */\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\t/**\n\t * Sets the w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} w - The value to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x and y component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y, z and w component of the vector at the given index.\n\t *\n\t * @param {number} index - The index into the buffer attribute.\n\t * @param {number} x - The value for the x component to set.\n\t * @param {number} y - The value for the y component to set.\n\t * @param {number} z - The value for the z component to set.\n\t * @param {number} w - The value for the w component to set.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the attribute array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when attribute data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {BufferAttribute} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new buffer attribute with copied values from this instance.\n\t *\n\t * @return {BufferAttribute} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\t/**\n\t * Serializes the buffer attribute into JSON.\n\t *\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\n\t */\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Int32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Int32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float16` buffer attribute with\n * a plain `Array` instance.\n *\n * This class automatically converts to and from FP16 via `Uint16Array` since `Float16Array`\n * browser support is still problematic.\n *\n * @augments BufferAttribute\n */\nclass Float16BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Convenient class that can be used when creating a `Float32` buffer attribute with\n * a plain `Array` instance.\n *\n * @augments BufferAttribute\n */\nclass Float32BufferAttribute extends BufferAttribute {\n\n\t/**\n\t * Constructs a new buffer attribute.\n\t *\n\t * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\n\t * @param {number} itemSize - The item size.\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\n\t */\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\n//\n\nexport {\n\tFloat32BufferAttribute,\n\tFloat16BufferAttribute,\n\tUint32BufferAttribute,\n\tInt32BufferAttribute,\n\tUint16BufferAttribute,\n\tInt16BufferAttribute,\n\tUint8ClampedBufferAttribute,\n\tUint8BufferAttribute,\n\tInt8BufferAttribute,\n\tBufferAttribute\n};\n"],"mappings":"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","ignoreList":[]}