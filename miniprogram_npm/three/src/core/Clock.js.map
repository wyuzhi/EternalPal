{"version":3,"file":"node_modules/three/src/core/Clock.js","names":["Clock","constructor","autoStart","this","startTime","oldTime","elapsedTime","running","start","performance","now","stop","getElapsedTime","getDelta","diff","newTime"],"sources":["node_modules/three/src/core/Clock.js"],"sourcesContent":["/**\n * Class for keeping track of time.\n */\nclass Clock {\n\n\t/**\n\t * Constructs a new clock.\n\t *\n\t * @param {boolean} [autoStart=true] - Whether to automatically start the clock when\n\t * `getDelta()` is called for the first time.\n\t */\n\tconstructor( autoStart = true ) {\n\n\t\t/**\n\t\t * If set to `true`, the clock starts automatically when `getDelta()` is called\n\t\t * for the first time.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoStart = autoStart;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()` method was last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.startTime = 0;\n\n\t\t/**\n\t\t * Holds the time at which the clock's `start()`, `getElapsedTime()` or\n\t\t * `getDelta()` methods were last called.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.oldTime = 0;\n\n\t\t/**\n\t\t * Keeps track of the total time that the clock has been running.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.elapsedTime = 0;\n\n\t\t/**\n\t\t * Whether the clock is running or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.running = false;\n\n\t}\n\n\t/**\n\t * Starts the clock. When `autoStart` is set to `true`, the method is automatically\n\t * called by the class.\n\t */\n\tstart() {\n\n\t\tthis.startTime = performance.now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\t/**\n\t * Stops the clock.\n\t */\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\t/**\n\t * Returns the elapsed time in seconds.\n\t *\n\t * @return {number} The elapsed time.\n\t */\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\t/**\n\t * Returns the delta time in seconds.\n\t *\n\t * @return {number} The delta time.\n\t */\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = performance.now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nexport { Clock };\n"],"mappings":"AAGA,MAAMA,MAQL,WAAAC,CAAaC,GAAY,GASxBC,KAAKD,UAAYA,EAQjBC,KAAKC,UAAY,EASjBD,KAAKE,QAAU,EAQfF,KAAKG,YAAc,EAQnBH,KAAKI,SAAU,CAEhB,CAMA,KAAAC,GAECL,KAAKC,UAAYK,YAAYC,MAE7BP,KAAKE,QAAUF,KAAKC,UACpBD,KAAKG,YAAc,EACnBH,KAAKI,SAAU,CAEhB,CAKA,IAAAI,GAECR,KAAKS,iBACLT,KAAKI,SAAU,EACfJ,KAAKD,WAAY,CAElB,CAOA,cAAAU,GAGC,OADAT,KAAKU,WACEV,KAAKG,WAEb,CAOA,QAAAO,GAEC,IAAIC,EAAO,EAEX,GAAKX,KAAKD,YAAeC,KAAKI,QAG7B,OADAJ,KAAKK,QACE,EAIR,GAAKL,KAAKI,QAAU,CAEnB,MAAMQ,EAAUN,YAAYC,MAE5BI,GAASC,EAAUZ,KAAKE,SAAY,IACpCF,KAAKE,QAAUU,EAEfZ,KAAKG,aAAeQ,CAErB,CAEA,OAAOA,CAER,SAIQd","ignoreList":[]}