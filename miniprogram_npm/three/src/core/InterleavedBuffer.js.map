{"version":3,"file":"node_modules/three/src/core/InterleavedBuffer.js","names":["generateUUID","StaticDrawUsage","InterleavedBuffer","constructor","array","stride","this","isInterleavedBuffer","count","undefined","length","usage","updateRanges","version","uuid","onUploadCallback","needsUpdate","value","setUsage","addUpdateRange","start","push","clearUpdateRanges","copy","source","copyAt","index1","interleavedBuffer","index2","i","l","set","offset","clone","data","arrayBuffers","buffer","_uuid","slice","ib","onUpload","callback","toJSON","Array","from","Uint32Array","type","name"],"sources":["node_modules/three/src/core/InterleavedBuffer.js"],"sourcesContent":["import { generateUUID } from '../math/MathUtils.js';\nimport { StaticDrawUsage } from '../constants.js';\n\n/**\n * \"Interleaved\" means that multiple attributes, possibly of different types,\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\n *\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\n */\nclass InterleavedBuffer {\n\n\t/**\n\t * Constructs a new interleaved buffer.\n\t *\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\n\t * @param {number} stride - The number of typed-array elements per vertex.\n\t */\n\tconstructor( array, stride ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isInterleavedBuffer = true;\n\n\t\t/**\n\t\t * A typed array with a shared buffer storing attribute data.\n\t\t *\n\t\t * @type {TypedArray}\n\t\t */\n\t\tthis.array = array;\n\n\t\t/**\n\t\t * The number of typed-array elements per vertex.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.stride = stride;\n\n\t\t/**\n\t\t * The total number of elements in the array\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\t/**\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\n\t\t *\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\n\t\t * instantiate a new one and set the desired usage before the next render.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * This can be used to only update some components of stored vectors (for example, just the\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\n\t\t *\n\t\t * @type {Array<Object>}\n\t\t */\n\t\tthis.updateRanges = [];\n\n\t\t/**\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The UUID of the interleaved buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\t/**\n\t * A callback function that is executed after the renderer has transferred the attribute array\n\t * data to the GPU.\n\t */\n\tonUploadCallback() {}\n\n\t/**\n\t * Flag to indicate that this attribute has changed and should be re-sent to\n\t * the GPU. Set this to `true` when you modify the value of the array.\n\t *\n\t * @type {number}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Sets the usage of this interleaved buffer.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {InterleavedBuffer} A reference to this interleaved buffer.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a range of data in the data array to be updated on the GPU.\n\t *\n\t * @param {number} start - Position at which to start update.\n\t * @param {number} count - The number of components to update.\n\t */\n\taddUpdateRange( start, count ) {\n\n\t\tthis.updateRanges.push( { start, count } );\n\n\t}\n\n\t/**\n\t * Clears the update ranges.\n\t */\n\tclearUpdateRanges() {\n\n\t\tthis.updateRanges.length = 0;\n\n\t}\n\n\t/**\n\t * Copies the values of the given interleaved buffer to this instance.\n\t *\n\t * @param {InterleavedBuffer} source - The interleaved buffer to copy.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies a vector from the given interleaved buffer to this one. The start\n\t * and destination position in the attribute buffers are represented by the\n\t * given indices.\n\t *\n\t * @param {number} index1 - The destination index into this interleaved buffer.\n\t * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\n\t * @param {number} index2 - The source index into the given interleaved buffer.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tcopyAt( index1, interleavedBuffer, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= interleavedBuffer.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = interleavedBuffer.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given array data in the interleaved buffer.\n\t *\n\t * @param {(TypedArray|Array)} value - The array data to set.\n\t * @param {number} [offset=0] - The offset in this interleaved buffer's array.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new interleaved buffer with copied values from this instance.\n\t *\n\t * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\n\t * @return {InterleavedBuffer} A clone of this instance.\n\t */\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\t/**\n\t * Sets the given callback function that is executed after the Renderer has transferred\n\t * the array data to the GPU. Can be used to perform clean-up operations after\n\t * the upload when data are not needed anymore on the CPU side.\n\t *\n\t * @param {Function} callback - The `onUpload()` callback.\n\t * @return {InterleavedBuffer} A reference to this instance.\n\t */\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Serializes the interleaved buffer into JSON.\n\t *\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized interleaved buffer.\n\t */\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nexport { InterleavedBuffer };\n"],"mappings":"OAASA,iBAAoB,8BACpBC,oBAAuB,kBAQhC,MAAMC,kBAQL,WAAAC,CAAaC,EAAOC,GASnBC,KAAKC,qBAAsB,EAO3BD,KAAKF,MAAQA,EAObE,KAAKD,OAASA,EAQdC,KAAKE,WAAkBC,IAAVL,EAAsBA,EAAMM,OAASL,EAAS,EAW3DC,KAAKK,MAAQV,gBAQbK,KAAKM,aAAe,GAOpBN,KAAKO,QAAU,EAQfP,KAAKQ,KAAOd,cAEb,CAMA,gBAAAe,GAAoB,CAUpB,eAAIC,CAAaC,IAED,IAAVA,GAAiBX,KAAKO,SAE5B,CAQA,QAAAK,CAAUD,GAIT,OAFAX,KAAKK,MAAQM,EAENX,IAER,CAQA,cAAAa,CAAgBC,EAAOZ,GAEtBF,KAAKM,aAAaS,KAAM,CAAED,QAAOZ,SAElC,CAKA,iBAAAc,GAEChB,KAAKM,aAAaF,OAAS,CAE5B,CAQA,IAAAa,CAAMC,GAOL,OALAlB,KAAKF,MAAQ,IAAIoB,EAAOpB,MAAMD,YAAaqB,EAAOpB,OAClDE,KAAKE,MAAQgB,EAAOhB,MACpBF,KAAKD,OAASmB,EAAOnB,OACrBC,KAAKK,MAAQa,EAAOb,MAEbL,IAER,CAYA,MAAAmB,CAAQC,EAAQC,EAAmBC,GAElCF,GAAUpB,KAAKD,OACfuB,GAAUD,EAAkBtB,OAE5B,IAAM,IAAIwB,EAAI,EAAGC,EAAIxB,KAAKD,OAAQwB,EAAIC,EAAGD,IAExCvB,KAAKF,MAAOsB,EAASG,GAAMF,EAAkBvB,MAAOwB,EAASC,GAI9D,OAAOvB,IAER,CASA,GAAAyB,CAAKd,EAAOe,EAAS,GAIpB,OAFA1B,KAAKF,MAAM2B,IAAKd,EAAOe,GAEhB1B,IAER,CAQA,KAAA2B,CAAOC,QAEqBzB,IAAtByB,EAAKC,eAETD,EAAKC,aAAe,CAAC,QAIW1B,IAA5BH,KAAKF,MAAMgC,OAAOC,QAEtB/B,KAAKF,MAAMgC,OAAOC,MAAQrC,qBAI2BS,IAAjDyB,EAAKC,aAAc7B,KAAKF,MAAMgC,OAAOC,SAEzCH,EAAKC,aAAc7B,KAAKF,MAAMgC,OAAOC,OAAU/B,KAAKF,MAAMkC,MAAO,GAAIF,QAItE,MAAMhC,EAAQ,IAAIE,KAAKF,MAAMD,YAAa+B,EAAKC,aAAc7B,KAAKF,MAAMgC,OAAOC,QAEzEE,EAAK,IAAIjC,KAAKH,YAAaC,EAAOE,KAAKD,QAG7C,OAFAkC,EAAGrB,SAAUZ,KAAKK,OAEX4B,CAER,CAUA,QAAAC,CAAUC,GAIT,OAFAnC,KAAKS,iBAAmB0B,EAEjBnC,IAER,CAQA,MAAAoC,CAAQR,GAwBP,YAtB2BzB,IAAtByB,EAAKC,eAETD,EAAKC,aAAe,CAAC,QAMW1B,IAA5BH,KAAKF,MAAMgC,OAAOC,QAEtB/B,KAAKF,MAAMgC,OAAOC,MAAQrC,qBAI2BS,IAAjDyB,EAAKC,aAAc7B,KAAKF,MAAMgC,OAAOC,SAEzCH,EAAKC,aAAc7B,KAAKF,MAAMgC,OAAOC,OAAUM,MAAMC,KAAM,IAAIC,YAAavC,KAAKF,MAAMgC,UAMjF,CACNtB,KAAMR,KAAKQ,KACXsB,OAAQ9B,KAAKF,MAAMgC,OAAOC,MAC1BS,KAAMxC,KAAKF,MAAMD,YAAY4C,KAC7B1C,OAAQC,KAAKD,OAGf,SAIQH","ignoreList":[]}