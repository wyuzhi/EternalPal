import{Vector3}from"../math/Vector3.js";import{BufferAttribute}from"./BufferAttribute.js";import{denormalize,normalize}from"../math/MathUtils.js";const _vector=new Vector3;class InterleavedBufferAttribute{constructor(t,r,e,a=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=r,this.offset=e,this.normalized=a}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let r=0,e=this.data.count;r<e;r++)_vector.fromBufferAttribute(this,r),_vector.applyMatrix4(t),this.setXYZ(r,_vector.x,_vector.y,_vector.z);return this}applyNormalMatrix(t){for(let r=0,e=this.count;r<e;r++)_vector.fromBufferAttribute(this,r),_vector.applyNormalMatrix(t),this.setXYZ(r,_vector.x,_vector.y,_vector.z);return this}transformDirection(t){for(let r=0,e=this.count;r<e;r++)_vector.fromBufferAttribute(this,r),_vector.transformDirection(t),this.setXYZ(r,_vector.x,_vector.y,_vector.z);return this}getComponent(t,r){let e=this.array[t*this.data.stride+this.offset+r];return this.normalized&&(e=denormalize(e,this.array)),e}setComponent(t,r,e){return this.normalized&&(e=normalize(e,this.array)),this.data.array[t*this.data.stride+this.offset+r]=e,this}setX(t,r){return this.normalized&&(r=normalize(r,this.array)),this.data.array[t*this.data.stride+this.offset]=r,this}setY(t,r){return this.normalized&&(r=normalize(r,this.array)),this.data.array[t*this.data.stride+this.offset+1]=r,this}setZ(t,r){return this.normalized&&(r=normalize(r,this.array)),this.data.array[t*this.data.stride+this.offset+2]=r,this}setW(t,r){return this.normalized&&(r=normalize(r,this.array)),this.data.array[t*this.data.stride+this.offset+3]=r,this}getX(t){let r=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(r=denormalize(r,this.array)),r}getY(t){let r=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(r=denormalize(r,this.array)),r}getZ(t){let r=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(r=denormalize(r,this.array)),r}getW(t){let r=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(r=denormalize(r,this.array)),r}setXY(t,r,e){return t=t*this.data.stride+this.offset,this.normalized&&(r=normalize(r,this.array),e=normalize(e,this.array)),this.data.array[t+0]=r,this.data.array[t+1]=e,this}setXYZ(t,r,e,a){return t=t*this.data.stride+this.offset,this.normalized&&(r=normalize(r,this.array),e=normalize(e,this.array),a=normalize(a,this.array)),this.data.array[t+0]=r,this.data.array[t+1]=e,this.data.array[t+2]=a,this}setXYZW(t,r,e,a,i){return t=t*this.data.stride+this.offset,this.normalized&&(r=normalize(r,this.array),e=normalize(e,this.array),a=normalize(a,this.array),i=normalize(i,this.array)),this.data.array[t+0]=r,this.data.array[t+1]=e,this.data.array[t+2]=a,this.data.array[t+3]=i,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let r=0;r<this.count;r++){const e=r*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[e+r])}return new BufferAttribute(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new InterleavedBufferAttribute(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let r=0;r<this.count;r++){const e=r*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[e+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}export{InterleavedBufferAttribute};
//# sourceMappingURL=InterleavedBufferAttribute.js.map