{"version":3,"file":"node_modules/three/src/core/Object3D.js","names":["Quaternion","Vector3","Matrix4","EventDispatcher","Euler","Layers","Matrix3","generateUUID","_object3DId","_v1","_q1","_m1","_target","_position","_scale","_quaternion","_xAxis","_yAxis","_zAxis","_addedEvent","type","_removedEvent","_childaddedEvent","child","_childremovedEvent","Object3D","constructor","super","this","isObject3D","Object","defineProperty","value","uuid","name","parent","children","up","DEFAULT_UP","clone","position","rotation","quaternion","scale","_onChange","setFromEuler","setFromQuaternion","undefined","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","matrix","matrixWorld","matrixAutoUpdate","DEFAULT_MATRIX_AUTO_UPDATE","matrixWorldAutoUpdate","DEFAULT_MATRIX_WORLD_AUTO_UPDATE","matrixWorldNeedsUpdate","layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","customDepthMaterial","customDistanceMaterial","userData","onBeforeShadow","onAfterShadow","onBeforeRender","onAfterRender","applyMatrix4","updateMatrix","premultiply","decompose","applyQuaternion","q","setRotationFromAxisAngle","axis","angle","setFromAxisAngle","setRotationFromEuler","euler","setRotationFromMatrix","m","setFromRotationMatrix","setRotationFromQuaternion","copy","rotateOnAxis","multiply","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","add","multiplyScalar","translateX","translateY","translateZ","localToWorld","vector","updateWorldMatrix","worldToLocal","invert","lookAt","x","y","z","isVector3","set","setFromMatrixPosition","isCamera","isLight","extractRotation","object","arguments","length","i","console","error","removeFromParent","push","dispatchEvent","remove","index","indexOf","splice","clear","attach","getObjectById","id","getObjectByProperty","getObjectByName","l","getObjectsByProperty","result","getWorldPosition","target","getWorldQuaternion","getWorldScale","getWorldDirection","e","elements","normalize","raycast","traverse","callback","traverseVisible","traverseAncestors","compose","updateMatrixWorld","force","multiplyMatrices","updateParents","updateChildren","toJSON","meta","isRootObject","output","geometries","materials","textures","images","shapes","skeletons","nodes","metadata","version","generator","serialize","library","element","keys","mask","toArray","isInstancedMesh","count","instanceMatrix","instanceColor","isBatchedMesh","perObjectFrustumCulled","sortObjects","drawRanges","_drawRanges","reservedRanges","_reservedRanges","geometryInfo","_geometryInfo","map","info","boundingBox","boundingSphere","instanceInfo","_instanceInfo","availableInstanceIds","_availableInstanceIds","slice","availableGeometryIds","_availableGeometryIds","nextIndexStart","_nextIndexStart","nextVertexStart","_nextVertexStart","geometryCount","_geometryCount","maxInstanceCount","_maxInstanceCount","maxVertexCount","_maxVertexCount","maxIndexCount","_maxIndexCount","geometryInitialized","_geometryInitialized","matricesTexture","_matricesTexture","indirectTexture","_indirectTexture","_colorsTexture","colorsTexture","isScene","background","isColor","isTexture","environment","isRenderTargetTexture","isMesh","isLine","isPoints","geometry","parameters","Array","isArray","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","data","recursive","source","order","JSON","parse","stringify"],"sources":["node_modules/three/src/core/Object3D.js"],"sourcesContent":["import { Quaternion } from '../math/Quaternion.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { EventDispatcher } from './EventDispatcher.js';\nimport { Euler } from '../math/Euler.js';\nimport { Layers } from './Layers.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { generateUUID } from '../math/MathUtils.js';\n\nlet _object3DId = 0;\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\n/**\n * Fires when the object has been added to its parent object.\n *\n * @event Object3D#added\n * @type {Object}\n */\nconst _addedEvent = { type: 'added' };\n\n/**\n * Fires when the object has been removed from its parent object.\n *\n * @event Object3D#removed\n * @type {Object}\n */\nconst _removedEvent = { type: 'removed' };\n\n/**\n * Fires when a new child object has been added.\n *\n * @event Object3D#childadded\n * @type {Object}\n */\nconst _childaddedEvent = { type: 'childadded', child: null };\n\n/**\n * Fires when a child object has been removed.\n *\n * @event Object3D#childremoved\n * @type {Object}\n */\nconst _childremovedEvent = { type: 'childremoved', child: null };\n\n/**\n * This is the base class for most objects in three.js and provides a set of\n * properties and methods for manipulating objects in 3D space.\n *\n * @augments EventDispatcher\n */\nclass Object3D extends EventDispatcher {\n\n\t/**\n\t * Constructs a new 3D object.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isObject3D = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name Object3D#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\t/**\n\t\t * The UUID of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the 3D object.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Object3D';\n\n\t\t/**\n\t\t * A reference to the parent object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * An array holding the child 3D objects of this instance.\n\t\t *\n\t\t * @type {Array<Object3D>}\n\t\t */\n\t\tthis.children = [];\n\n\t\t/**\n\t\t * Defines the `up` direction of the 3D object which influences\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * Represents the object's local position.\n\t\t\t *\n\t\t\t * @name Object3D#position\n\t\t\t * @type {Vector3}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\n\t\t\t *\n\t\t\t * @name Object3D#rotation\n\t\t\t * @type {Euler}\n\t\t\t * @default (0,0,0)\n\t\t\t */\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local rotation as Quaternions.\n\t\t\t *\n\t\t\t * @name Object3D#quaternion\n\t\t\t * @type {Quaternion}\n\t\t\t */\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's local scale.\n\t\t\t *\n\t\t\t * @name Object3D#scale\n\t\t\t * @type {Vector3}\n\t\t\t * @default (1,1,1)\n\t\t\t */\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's model-view matrix.\n\t\t\t *\n\t\t\t * @name Object3D#modelViewMatrix\n\t\t\t * @type {Matrix4}\n\t\t\t */\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\t/**\n\t\t\t * Represents the object's normal matrix.\n\t\t\t *\n\t\t\t * @name Object3D#normalMatrix\n\t\t\t * @type {Matrix3}\n\t\t\t */\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in local space.\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrix = new Matrix4();\n\n\t\t/**\n\t\t * Represents the object's transformation matrix in world space.\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\n\t\t *\n\t\t * @type {Matrix4}\n\t\t */\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\n\t\t * rotation and scale every frame.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\n\t\t/**\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\n\t\t * matrix and the object's transformation hierarchy.\n\t\t *\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\t/**\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\n\t\t * to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t/**\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\n\t\t * at least one layer in common with the camera in use. This property can also be\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\n\t\t *\n\t\t * @type {Layers}\n\t\t */\n\t\tthis.layers = new Layers();\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.castShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.receiveShadow = false;\n\n\t\t/**\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.frustumCulled = true;\n\n\t\t/**\n\t\t * This value allows the default rendering order of scene graph objects to be\n\t\t * overridden although opaque and transparent objects remain sorted independently.\n\t\t * When this property is set for an instance of {@link Group},all descendants\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\n\t\t * render order.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.renderOrder = 0;\n\n\t\t/**\n\t\t * An array holding the animation clips of the 3D object.\n\t\t *\n\t\t * @type {Array<AnimationClip>}\n\t\t */\n\t\tthis.animations = [];\n\n\t\t/**\n\t\t * Custom depth material to be used when rendering to the depth map. Can only be used\n\t\t * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\n\t\t * if you are modifying vertex positions in the vertex shader you must specify a custom depth\n\t\t * material for proper shadows.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDepthMaterial = undefined;\n\n\t\t/**\n\t\t * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\n\t\t *\n\t\t * Only relevant in context of {@link WebGLRenderer}.\n\t\t *\n\t\t * @type {(Material|undefined)}\n\t\t * @default undefined\n\t\t */\n\t\tthis.customDistanceMaterial = undefined;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the 3D object. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {Camera} shadowCamera - The shadow camera.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} depthMaterial - The depth material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately before a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * A callback that is executed immediately after a 3D object is rendered.\n\t *\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\t/**\n\t * Applies the given transformation matrix to the object and updates the object's position,\n\t * rotation and scale.\n\t *\n\t * @param {Matrix4} matrix - The transformation matrix.\n\t */\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\t/**\n\t * Applies a rotation represented by given the quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t */\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as Euler angles to the 3D object.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t */\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\n\t *\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\n\t * a pure rotation matrix (i.e, unscaled).\n\t */\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\t/**\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\n\t *\n\t * @param {Quaternion} q - The Quaternion\n\t */\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object along an axis in world space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its X axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Y axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\t/**\n\t * Rotates the 3D object around its Z axis in local space.\n\t *\n\t * @param {number} angle - The angle in radians.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along the given axis in local space.\n\t *\n\t * @param {Vector3} axis - The (normalized) axis vector.\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its X-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Y-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\t/**\n\t * Translate the 3D object by a distance along its Z-axis in local space.\n\t *\n\t * @param {number} distance - The distance in world units.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's local space to world space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Converts the given vector from this 3D object's word space to local space.\n\t *\n\t * @param {Vector3} vector - The vector to convert.\n\t * @return {Vector3} The converted vector.\n\t */\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\t/**\n\t * Rotates the object to face a point in world space.\n\t *\n\t * This method does not support objects having non-uniformly-scaled parent(s).\n\t *\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\n\t * @param {number} [y] - The y coordinate in world space.\n\t * @param {number} [z] - The z coordinate in world space.\n\t */\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1.lookAt( _position, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1.lookAt( _target, _position, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\n\t * objects may be added. Any current parent on an object passed in here will be\n\t * removed, since an object can have at most one parent.\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to add.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tobject.removeFromParent();\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t_childaddedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t\t_childaddedEvent.child = null;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given 3D object as child from this 3D object.\n\t * An arbitrary number of objects may be removed.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @param {Object3D} object - The 3D object to remove.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t_childremovedEvent.child = object;\n\t\t\tthis.dispatchEvent( _childremovedEvent );\n\t\t\t_childremovedEvent.child = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes this 3D object from its current parent.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes all child objects.\n\t *\n\t * @fires Object3D#removed\n\t * @fires Object3D#childremoved\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\t/**\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\n\t *\n\t * @fires Object3D#added\n\t * @fires Object3D#childadded\n\t * @param {Object3D} object - The 3D object to attach.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1 );\n\n\t\tobject.removeFromParent();\n\t\tobject.parent = this;\n\t\tthis.children.push( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t_childaddedEvent.child = object;\n\t\tthis.dispatchEvent( _childaddedEvent );\n\t\t_childaddedEvent.child = null;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching ID.\n\t *\n\t * @param {number} id - The id.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching name.\n\t *\n\t * @param {string} name - The name.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns the first with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\n\t */\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\t/**\n\t * Searches through the 3D object and its children, starting with the 3D object\n\t * itself, and returns all 3D objects with a matching property value.\n\t *\n\t * @param {string} name - The name of the property.\n\t * @param {any} value - The value.\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\n\t * @return {Array<Object3D>} The found 3D objects.\n\t */\n\tgetObjectsByProperty( name, value, result = [] ) {\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the position of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's position in world space.\n\t */\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\t/**\n\t * Returns a Quaternion representing the position of the 3D object in world space.\n\t *\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\n\t * @return {Quaternion} The 3D object's rotation in world space.\n\t */\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the scale of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's scale in world space.\n\t */\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\n\t *\n\t * @param {Vector3} target - The target vector the result is stored to.\n\t * @return {Vector3} The 3D object's direction in world space.\n\t */\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\t/**\n\t * Abstract method to get intersections between a casted ray and this\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\n\t * implement this method in order to use raycasting.\n\t *\n\t * @abstract\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\n\t */\n\traycast( /* raycaster, intersects */ ) {}\n\n\t/**\n\t * Executes the callback on this 3D object and all descendants.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\n\t * Descendants of invisible 3D objects are not traversed.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\n\t *\n\t * Note: Modifying the scene graph inside the callback is discouraged.\n\t *\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\n\t */\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in local space by computing it from the current\n\t * position, rotation and scale values.\n\t */\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t/**\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\n\t *\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\n\t * local space. The computation of the local and world matrix can be controlled with the\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\n\t *\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// make sure descendants are updated if required\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tchild.updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\n\t * update of ancestor and descendant nodes.\n\t *\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\n\t */\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// make sure descendants are updated\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the 3D object into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized 3D object.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.7,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\tif ( this.isBatchedMesh ) {\n\n\t\t\tobject.type = 'BatchedMesh';\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\n\t\t\tobject.sortObjects = this.sortObjects;\n\n\t\t\tobject.drawRanges = this._drawRanges;\n\t\t\tobject.reservedRanges = this._reservedRanges;\n\n\t\t\tobject.geometryInfo = this._geometryInfo.map( info => ( {\n\t\t\t\t...info,\n\t\t\t\tboundingBox: info.boundingBox ? info.boundingBox.toJSON() : undefined,\n\t\t\t\tboundingSphere: info.boundingSphere ? info.boundingSphere.toJSON() : undefined\n\t\t\t} ) );\n\t\t\tobject.instanceInfo = this._instanceInfo.map( info => ( { ...info } ) );\n\n\t\t\tobject.availableInstanceIds = this._availableInstanceIds.slice();\n\t\t\tobject.availableGeometryIds = this._availableGeometryIds.slice();\n\n\t\t\tobject.nextIndexStart = this._nextIndexStart;\n\t\t\tobject.nextVertexStart = this._nextVertexStart;\n\t\t\tobject.geometryCount = this._geometryCount;\n\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\n\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\n\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\n\n\t\t\tobject.indirectTexture = this._indirectTexture.toJSON( meta );\n\n\t\t\tif ( this._colorsTexture !== null ) {\n\n\t\t\t\tobject.colorsTexture = this._colorsTexture.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tobject.boundingSphere = this.boundingSphere.toJSON();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tobject.boundingBox = this.boundingBox.toJSON();\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new 3D object with copied values from this instance.\n\t *\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\n\t * @return {Object3D} A clone of this instance.\n\t */\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\t/**\n\t * Copies the values of the given 3D object to this instance.\n\t *\n\t * @param {Object3D} source - The 3D object to copy.\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\n\t * @return {Object3D} A reference to this instance.\n\t */\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * The default up direction for objects, also used as the default\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\n *\n * @static\n * @type {Vector3}\n * @default (0,1,0)\n */\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\n\n/**\n * The default setting for {@link Object3D#matrixAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\n\n/**\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\n * newly created 3D objects.\n *\n * @static\n * @type {boolean}\n * @default true\n */\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nexport { Object3D };\n"],"mappings":"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","ignoreList":[]}