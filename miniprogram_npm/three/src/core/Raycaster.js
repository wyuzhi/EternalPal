import{Matrix4}from"../math/Matrix4.js";import{Ray}from"../math/Ray.js";import{Layers}from"./Layers.js";const _matrix=new Matrix4;class Raycaster{constructor(t,r,e=0,i=1/0){this.ray=new Ray(t,r),this.near=e,this.far=i,this.camera=null,this.layers=new Layers,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,r){this.ray.set(t,r)}setFromCamera(t,r){r.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(r.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(r).sub(this.ray.origin).normalize(),this.camera=r):r.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(r.near+r.far)/(r.near-r.far)).unproject(r),this.ray.direction.set(0,0,-1).transformDirection(r.matrixWorld),this.camera=r):console.error("THREE.Raycaster: Unsupported camera type: "+r.type)}setFromXRController(t){return _matrix.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(_matrix),this}intersectObject(t,r=!0,e=[]){return intersect(t,this,e,r),e.sort(ascSort),e}intersectObjects(t,r=!0,e=[]){for(let i=0,s=t.length;i<s;i++)intersect(t[i],this,e,r);return e.sort(ascSort),e}}function ascSort(t,r){return t.distance-r.distance}function intersect(t,r,e,i){let s=!0;if(t.layers.test(r.layers)){!1===t.raycast(r,e)&&(s=!1)}if(!0===s&&!0===i){const i=t.children;for(let t=0,s=i.length;t<s;t++)intersect(i[t],r,e,!0)}}export{Raycaster};
//# sourceMappingURL=Raycaster.js.map