{"version":3,"file":"node_modules/three/src/core/UniformsGroup.js","names":["EventDispatcher","StaticDrawUsage","_id","UniformsGroup","constructor","super","this","isUniformsGroup","Object","defineProperty","value","name","usage","uniforms","add","uniform","push","remove","index","indexOf","splice","setName","setUsage","dispose","dispatchEvent","type","copy","source","uniformsSource","length","i","l","Array","isArray","j","clone"],"sources":["node_modules/three/src/core/UniformsGroup.js"],"sourcesContent":["import { EventDispatcher } from './EventDispatcher.js';\nimport { StaticDrawUsage } from '../constants.js';\n\nlet _id = 0;\n\n/**\n * A class for managing multiple uniforms in a single group. The renderer will process\n * such a definition as a single UBO.\n *\n * Since this class can only be used in context of {@link ShaderMaterial}, it is only supported\n * in {@link WebGLRenderer}.\n *\n * @augments EventDispatcher\n */\nclass UniformsGroup extends EventDispatcher {\n\n\t/**\n\t * Constructs a new uniforms group.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isUniformsGroup = true;\n\n\t\t/**\n\t\t * The ID of the 3D object.\n\t\t *\n\t\t * @name UniformsGroup#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\t/**\n\t\t * The name of the uniforms group.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The buffer usage.\n\t\t *\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\n\t\t * @default StaticDrawUsage\n\t\t */\n\t\tthis.usage = StaticDrawUsage;\n\n\t\t/**\n\t\t * An array holding the uniforms.\n\t\t *\n\t\t * @type {Array<Uniform>}\n\t\t */\n\t\tthis.uniforms = [];\n\n\t}\n\n\t/**\n\t * Adds the given uniform to this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to add.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes the given uniform from this uniforms group.\n\t *\n\t * @param {Uniform} uniform - The uniform to remove.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the name of this uniforms group.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the usage of this uniforms group.\n\t *\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Texture#dispose\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Copies the values of the given uniforms group to this instance.\n\t *\n\t * @param {UniformsGroup} source - The uniforms group to copy.\n\t * @return {UniformsGroup} A reference to this uniforms group.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tconst uniforms = Array.isArray( uniformsSource[ i ] ) ? uniformsSource[ i ] : [ uniformsSource[ i ] ];\n\n\t\t\tfor ( let j = 0; j < uniforms.length; j ++ ) {\n\n\t\t\t\tthis.uniforms.push( uniforms[ j ].clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new uniforms group with copied values from this instance.\n\t *\n\t * @return {UniformsGroup} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { UniformsGroup };\n"],"mappings":"OAASA,oBAAuB,8BACvBC,oBAAuB,kBAEhC,IAAIC,IAAM,EAWV,MAAMC,sBAAsBH,gBAK3B,WAAAI,GAECC,QASAC,KAAKC,iBAAkB,EASvBC,OAAOC,eAAgBH,KAAM,KAAM,CAAEI,MAAOR,QAO5CI,KAAKK,KAAO,GAQZL,KAAKM,MAAQX,gBAObK,KAAKO,SAAW,EAEjB,CAQA,GAAAC,CAAKC,GAIJ,OAFAT,KAAKO,SAASG,KAAMD,GAEbT,IAER,CAQA,MAAAW,CAAQF,GAEP,MAAMG,EAAQZ,KAAKO,SAASM,QAASJ,GAIrC,OAFiB,IAAZG,GAAgBZ,KAAKO,SAASO,OAAQF,EAAO,GAE3CZ,IAER,CAQA,OAAAe,CAASV,GAIR,OAFAL,KAAKK,KAAOA,EAELL,IAER,CAQA,QAAAgB,CAAUZ,GAIT,OAFAJ,KAAKM,MAAQF,EAENJ,IAER,CAQA,OAAAiB,GAECjB,KAAKkB,cAAe,CAAEC,KAAM,WAE7B,CAQA,IAAAC,CAAMC,GAELrB,KAAKK,KAAOgB,EAAOhB,KACnBL,KAAKM,MAAQe,EAAOf,MAEpB,MAAMgB,EAAiBD,EAAOd,SAE9BP,KAAKO,SAASgB,OAAS,EAEvB,IAAM,IAAIC,EAAI,EAAGC,EAAIH,EAAeC,OAAQC,EAAIC,EAAGD,IAAO,CAEzD,MAAMjB,EAAWmB,MAAMC,QAASL,EAAgBE,IAAQF,EAAgBE,GAAM,CAAEF,EAAgBE,IAEhG,IAAM,IAAII,EAAI,EAAGA,EAAIrB,EAASgB,OAAQK,IAErC5B,KAAKO,SAASG,KAAMH,EAAUqB,GAAIC,QAIpC,CAEA,OAAO7B,IAER,CAOA,KAAA6B,GAEC,OAAO,IAAI7B,KAAKF,aAAcsB,KAAMpB,KAErC,SAIQH","ignoreList":[]}