{"version":3,"file":"node_modules/three/src/extras/Controls.js","names":["EventDispatcher","Controls","constructor","object","domElement","super","this","enabled","state","keys","mouseButtons","LEFT","MIDDLE","RIGHT","touches","ONE","TWO","connect","element","undefined","disconnect","console","warn","dispose","update"],"sources":["node_modules/three/src/extras/Controls.js"],"sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\n\n/**\n * Abstract base class for controls.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Controls extends EventDispatcher {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The object that is managed by the controls.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.object = object;\n\n\t\t/**\n\t\t * The HTML element used for event listeners.\n\t\t *\n\t\t * @type {?HTMLDOMElement}\n\t\t * @default null\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t/**\n\t\t * Whether the controls responds to user input or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * The internal state of the controls.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -1\n\t\t */\n\t\tthis.state = - 1;\n\n\t\t/**\n\t\t * This object defines the keyboard input of the controls.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = {};\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to the available mouse buttons.\n\t\t * It depends on the control implementation what kind of mouse buttons and actions are supported.\n\t\t *\n\t\t * @type {{LEFT: ?number, MIDDLE: ?number, RIGHT: ?number}}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };\n\n\t\t/**\n\t\t * This object defines what type of actions are assigned to what kind of touch interaction.\n\t\t * It depends on the control implementation what kind of touch interaction and actions are supported.\n\t\t *\n\t\t * @type {{ONE: ?number, TWO: ?number}}\n\t\t */\n\t\tthis.touches = { ONE: null, TWO: null };\n\n\t}\n\n\t/**\n\t * Connects the controls to the DOM. This method has so called \"side effects\" since\n\t * it adds the module's event listeners to the DOM.\n\t *\n\t * @param {HTMLDOMElement} element - The DOM element to connect to.\n\t */\n\tconnect( element ) {\n\n\t\tif ( element === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Controls: connect() now requires an element.' ); // @deprecated, the warning can be removed with r185\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.domElement !== null ) this.disconnect();\n\n\t\tthis.domElement = element;\n\n\t}\n\n\t/**\n\t * Disconnects the controls from the DOM.\n\t */\n\tdisconnect() {}\n\n\t/**\n\t * Call this method if you no longer want use to the controls. It frees all internal\n\t * resources and removes all event listeners.\n\t */\n\tdispose() {}\n\n\t/**\n\t * Controls should implement this method if they have to update their internal state\n\t * per simulation step.\n\t *\n\t * @param {number} [delta] - The time delta in seconds.\n\t */\n\tupdate( /* delta */ ) {}\n\n}\n\nexport { Controls };\n"],"mappings":"OAASA,oBAAuB,6BAQhC,MAAMC,iBAAiBD,gBAQtB,WAAAE,CAAaC,EAAQC,EAAa,MAEjCC,QAOAC,KAAKH,OAASA,EAQdG,KAAKF,WAAaA,EAQlBE,KAAKC,SAAU,EAQfD,KAAKE,OAAU,EAOfF,KAAKG,KAAO,CAAC,EAQbH,KAAKI,aAAe,CAAEC,KAAM,KAAMC,OAAQ,KAAMC,MAAO,MAQvDP,KAAKQ,QAAU,CAAEC,IAAK,KAAMC,IAAK,KAElC,CAQA,OAAAC,CAASC,QAESC,IAAZD,GAOoB,OAApBZ,KAAKF,YAAsBE,KAAKc,aAErCd,KAAKF,WAAac,GAPjBG,QAAQC,KAAM,qDAShB,CAKA,UAAAF,GAAc,CAMd,OAAAG,GAAW,CAQX,MAAAC,GAAuB,SAIfvB","ignoreList":[]}