import{clamp}from"../math/MathUtils.js";const _tables=_generateTables();function _generateTables(){const t=new ArrayBuffer(4),a=new Float32Array(t),e=new Uint32Array(t),l=new Uint32Array(512),o=new Uint32Array(512);for(let t=0;t<256;++t){const a=t-127;a<-27?(l[t]=0,l[256|t]=32768,o[t]=24,o[256|t]=24):a<-14?(l[t]=1024>>-a-14,l[256|t]=1024>>-a-14|32768,o[t]=-a-1,o[256|t]=-a-1):a<=15?(l[t]=a+15<<10,l[256|t]=a+15<<10|32768,o[t]=13,o[256|t]=13):a<128?(l[t]=31744,l[256|t]=64512,o[t]=24,o[256|t]=24):(l[t]=31744,l[256|t]=64512,o[t]=13,o[256|t]=13)}const n=new Uint32Array(2048),r=new Uint32Array(64),s=new Uint32Array(64);for(let t=1;t<1024;++t){let a=t<<13,e=0;for(;0==(8388608&a);)a<<=1,e-=8388608;a&=-8388609,e+=947912704,n[t]=a|e}for(let t=1024;t<2048;++t)n[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)r[t]=t<<23;r[31]=1199570944,r[32]=2147483648;for(let t=33;t<63;++t)r[t]=2147483648+(t-32<<23);r[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(s[t]=1024);return{floatView:a,uint32View:e,baseTable:l,shiftTable:o,mantissaTable:n,exponentTable:r,offsetTable:s}}function toHalfFloat(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=clamp(t,-65504,65504),_tables.floatView[0]=t;const a=_tables.uint32View[0],e=a>>23&511;return _tables.baseTable[e]+((8388607&a)>>_tables.shiftTable[e])}function fromHalfFloat(t){const a=t>>10;return _tables.uint32View[0]=_tables.mantissaTable[_tables.offsetTable[a]+(1023&t)]+_tables.exponentTable[a],_tables.floatView[0]}class DataUtils{static toHalfFloat(t){return toHalfFloat(t)}static fromHalfFloat(t){return fromHalfFloat(t)}}export{toHalfFloat,fromHalfFloat,DataUtils};
//# sourceMappingURL=DataUtils.js.map