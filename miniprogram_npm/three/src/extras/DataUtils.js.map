{"version":3,"file":"node_modules/three/src/extras/DataUtils.js","names":["clamp","_tables","_generateTables","buffer","ArrayBuffer","floatView","Float32Array","uint32View","Uint32Array","baseTable","shiftTable","i","e","mantissaTable","exponentTable","offsetTable","m","toHalfFloat","val","Math","abs","console","warn","f","fromHalfFloat","DataUtils"],"sources":["node_modules/three/src/extras/DataUtils.js"],"sourcesContent":["import { clamp } from '../math/MathUtils.js';\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n/**\n * Returns a half precision floating point value (FP16) from the given single\n * precision floating point value (FP32).\n *\n * @param {number} val - A single precision floating point value.\n * @return {number} The FP16 value.\n */\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n/**\n * Returns a single precision floating point value (FP32) from the given half\n * precision floating point value (FP16).\n *\n * @param {number} val - A half precision floating point value.\n * @return {number} The FP32 value.\n */\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\n/**\n * A class containing utility functions for data.\n *\n * @hideconstructor\n */\nclass DataUtils {\n\n\t/**\n\t * Returns a half precision floating point value (FP16) from the given single\n\t * precision floating point value (FP32).\n\t *\n\t * @param {number} val - A single precision floating point value.\n\t * @return {number} The FP16 value.\n\t */\n\tstatic toHalfFloat( val ) {\n\n\t\treturn toHalfFloat( val );\n\n\t}\n\n\t/**\n\t * Returns a single precision floating point value (FP32) from the given half\n\t * precision floating point value (FP16).\n\t *\n\t * @param {number} val - A half precision floating point value.\n\t * @return {number} The FP32 value.\n\t */\n\tstatic fromHalfFloat( val ) {\n\n\t\treturn fromHalfFloat( val );\n\n\t}\n\n}\n\nexport {\n\ttoHalfFloat,\n\tfromHalfFloat,\n\tDataUtils\n};\n"],"mappings":"OAASA,UAAa,uBAItB,MAAMC,QAAwBC,kBAE9B,SAASA,kBAIR,MAAMC,EAAS,IAAIC,YAAa,GAC1BC,EAAY,IAAIC,aAAcH,GAC9BI,EAAa,IAAIC,YAAaL,GAE9BM,EAAY,IAAID,YAAa,KAC7BE,EAAa,IAAIF,YAAa,KAEpC,IAAM,IAAIG,EAAI,EAAGA,EAAI,MAAQA,EAAI,CAEhC,MAAMC,EAAID,EAAI,IAITC,GAAM,IAEVH,EAAWE,GAAM,EACjBF,EAAe,IAAJE,GAAc,MACzBD,EAAYC,GAAM,GAClBD,EAAgB,IAAJC,GAAc,IAIfC,GAAM,IAEjBH,EAAWE,GAAM,OAAcC,EAAI,GACnCH,EAAe,IAAJE,GAAgB,OAAcC,EAAI,GAAS,MACtDF,EAAYC,IAAQC,EAAI,EACxBF,EAAgB,IAAJC,IAAgBC,EAAI,GAIrBA,GAAK,IAEhBH,EAAWE,GAAQC,EAAI,IAAQ,GAC/BH,EAAe,IAAJE,GAAkBC,EAAI,IAAQ,GAAO,MAChDF,EAAYC,GAAM,GAClBD,EAAgB,IAAJC,GAAc,IAIfC,EAAI,KAEfH,EAAWE,GAAM,MACjBF,EAAe,IAAJE,GAAc,MACzBD,EAAYC,GAAM,GAClBD,EAAgB,IAAJC,GAAc,KAM1BF,EAAWE,GAAM,MACjBF,EAAe,IAAJE,GAAc,MACzBD,EAAYC,GAAM,GAClBD,EAAgB,IAAJC,GAAc,GAI5B,CAIA,MAAME,EAAgB,IAAIL,YAAa,MACjCM,EAAgB,IAAIN,YAAa,IACjCO,EAAc,IAAIP,YAAa,IAErC,IAAM,IAAIG,EAAI,EAAGA,EAAI,OAASA,EAAI,CAEjC,IAAIK,EAAIL,GAAK,GACTC,EAAI,EAGR,KAA+B,IAAjB,QAAJI,IAETA,IAAM,EACNJ,GAAK,QAINI,IAAK,QACLJ,GAAK,UAELC,EAAeF,GAAMK,EAAIJ,CAE1B,CAEA,IAAM,IAAID,EAAI,KAAMA,EAAI,OAASA,EAEhCE,EAAeF,GAAM,WAAiBA,EAAI,MAAU,IAIrD,IAAM,IAAIA,EAAI,EAAGA,EAAI,KAAOA,EAE3BG,EAAeH,GAAMA,GAAK,GAI3BG,EAAe,IAAO,WACtBA,EAAe,IAAO,WAEtB,IAAM,IAAIH,EAAI,GAAIA,EAAI,KAAOA,EAE5BG,EAAeH,GAAM,YAAiBA,EAAI,IAAQ,IAInDG,EAAe,IAAO,WAEtB,IAAM,IAAIH,EAAI,EAAGA,EAAI,KAAOA,EAEhB,KAANA,IAEJI,EAAaJ,GAAM,MAMrB,MAAO,CACNN,UAAWA,EACXE,WAAYA,EACZE,UAAWA,EACXC,WAAYA,EACZG,cAAeA,EACfC,cAAeA,EACfC,YAAaA,EAGf,CASA,SAASE,YAAaC,GAEhBC,KAAKC,IAAKF,GAAQ,OAAQG,QAAQC,KAAM,sDAE7CJ,EAAMlB,MAAOkB,GAAO,MAAO,OAE3BjB,QAAQI,UAAW,GAAMa,EACzB,MAAMK,EAAItB,QAAQM,WAAY,GACxBK,EAAMW,GAAK,GAAO,IACxB,OAAOtB,QAAQQ,UAAWG,KAAc,QAAJW,IAAoBtB,QAAQS,WAAYE,GAE7E,CASA,SAASY,cAAeN,GAEvB,MAAMF,EAAIE,GAAO,GAEjB,OADAjB,QAAQM,WAAY,GAAMN,QAAQY,cAAeZ,QAAQc,YAAaC,IAAc,KAANE,IAAkBjB,QAAQa,cAAeE,GAChHf,QAAQI,UAAW,EAE3B,CAOA,MAAMoB,UASL,kBAAOR,CAAaC,GAEnB,OAAOD,YAAaC,EAErB,CASA,oBAAOM,CAAeN,GAErB,OAAOM,cAAeN,EAEvB,SAKAD,YACAO,cACAC","ignoreList":[]}