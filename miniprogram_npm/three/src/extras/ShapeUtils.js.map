{"version":3,"file":"node_modules/three/src/extras/ShapeUtils.js","names":["Earcut","ShapeUtils","area","contour","n","length","a","p","q","x","y","isClockWise","pts","triangulateShape","holes","vertices","holeIndices","faces","removeDupEndPts","addContour","holeIndex","forEach","i","push","triangles","triangulate","slice","points","l","equals","pop"],"sources":["node_modules/three/src/extras/ShapeUtils.js"],"sourcesContent":["import { Earcut } from './Earcut.js';\n\n/**\n * A class containing utility functions for shapes.\n *\n * @hideconstructor\n */\nclass ShapeUtils {\n\n\t/**\n\t * Calculate area of a ( 2D ) contour polygon.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points.\n\t * @return {number} The area.\n\t */\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given contour uses a clockwise winding order.\n\t *\n\t * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.\n\t * @return {boolean} Whether the given contour uses a clockwise winding order or not.\n\t */\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\t/**\n\t * Triangulates the given shape definition.\n\t *\n\t * @param {Array<Vector2>} contour - An array of 2D points defining the contour.\n\t * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.\n\t * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.\n\t */\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\nexport { ShapeUtils };\n"],"mappings":"OAASA,WAAc,cAOvB,MAAMC,WAQL,WAAOC,CAAMC,GAEZ,MAAMC,EAAID,EAAQE,OAClB,IAAIC,EAAI,EAER,IAAM,IAAIC,EAAIH,EAAI,EAAGI,EAAI,EAAGA,EAAIJ,EAAGG,EAAIC,IAEtCF,GAAKH,EAASI,GAAIE,EAAIN,EAASK,GAAIE,EAAIP,EAASK,GAAIC,EAAIN,EAASI,GAAIG,EAItE,MAAW,GAAJJ,CAER,CAQA,kBAAOK,CAAaC,GAEnB,OAAOX,WAAWC,KAAMU,GAAQ,CAEjC,CASA,uBAAOC,CAAkBV,EAASW,GAEjC,MAAMC,EAAW,GACXC,EAAc,GACdC,EAAQ,GAEdC,gBAAiBf,GACjBgB,WAAYJ,EAAUZ,GAItB,IAAIiB,EAAYjB,EAAQE,OAExBS,EAAMO,QAASH,iBAEf,IAAM,IAAII,EAAI,EAAGA,EAAIR,EAAMT,OAAQiB,IAElCN,EAAYO,KAAMH,GAClBA,GAAaN,EAAOQ,GAAIjB,OACxBc,WAAYJ,EAAUD,EAAOQ,IAM9B,MAAME,EAAYxB,OAAOyB,YAAaV,EAAUC,GAIhD,IAAM,IAAIM,EAAI,EAAGA,EAAIE,EAAUnB,OAAQiB,GAAK,EAE3CL,EAAMM,KAAMC,EAAUE,MAAOJ,EAAGA,EAAI,IAIrC,OAAOL,CAER,EAID,SAASC,gBAAiBS,GAEzB,MAAMC,EAAID,EAAOtB,OAEZuB,EAAI,GAAKD,EAAQC,EAAI,GAAIC,OAAQF,EAAQ,KAE7CA,EAAOG,KAIT,CAEA,SAASX,WAAYJ,EAAUZ,GAE9B,IAAM,IAAImB,EAAI,EAAGA,EAAInB,EAAQE,OAAQiB,IAEpCP,EAASQ,KAAMpB,EAASmB,GAAIb,GAC5BM,EAASQ,KAAMpB,EAASmB,GAAIZ,EAI9B,QAEST","ignoreList":[]}