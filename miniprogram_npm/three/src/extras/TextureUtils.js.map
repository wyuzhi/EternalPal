{"version":3,"file":"node_modules/three/src/extras/TextureUtils.js","names":["AlphaFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBFormat","RGBAFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","RGB_BPTC_SIGNED_Format","RGB_BPTC_UNSIGNED_Format","RED_RGTC1_Format","SIGNED_RED_RGTC1_Format","RED_GREEN_RGTC2_Format","SIGNED_RED_GREEN_RGTC2_Format","UnsignedByteType","ByteType","UnsignedShortType","ShortType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedIntType","IntType","FloatType","UnsignedInt5999Type","contain","texture","aspect","imageAspect","image","width","height","repeat","x","y","offset","cover","fill","getByteLength","format","type","typeByteLength","getTextureTypeByteLength","components","byteLength","Math","floor","max","ceil","Error","TextureUtils"],"sources":["node_modules/three/src/extras/TextureUtils.js"],"sourcesContent":["import { AlphaFormat, RedFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBFormat, RGBAFormat, RGBAIntegerFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_BPTC_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, UnsignedByteType, ByteType, UnsignedShortType, ShortType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedIntType, IntType, FloatType, UnsignedInt5999Type } from '../constants.js';\n\n/**\n * Scales the texture as large as possible within its surface without cropping\n * or stretching the texture. The method preserves the original aspect ratio of\n * the texture. Akin to CSS `object-fit: contain`\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction contain( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t} else {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Scales the texture to the smallest possible size to fill the surface, leaving\n * no empty space. The method preserves the original aspect ratio of the texture.\n * Akin to CSS `object-fit: cover`.\n *\n * @param {Texture} texture - The texture.\n * @param {number} aspect - The texture's aspect ratio.\n * @return {Texture} The updated texture.\n */\nfunction cover( texture, aspect ) {\n\n\tconst imageAspect = ( texture.image && texture.image.width ) ? texture.image.width / texture.image.height : 1;\n\n\tif ( imageAspect > aspect ) {\n\n\t\ttexture.repeat.x = aspect / imageAspect;\n\t\ttexture.repeat.y = 1;\n\n\t\ttexture.offset.x = ( 1 - texture.repeat.x ) / 2;\n\t\ttexture.offset.y = 0;\n\n\t} else {\n\n\t\ttexture.repeat.x = 1;\n\t\ttexture.repeat.y = imageAspect / aspect;\n\n\t\ttexture.offset.x = 0;\n\t\ttexture.offset.y = ( 1 - texture.repeat.y ) / 2;\n\n\t}\n\n\treturn texture;\n\n}\n\n/**\n * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n *\n * @param {Texture} texture - The texture.\n * @return {Texture} The updated texture.\n */\nfunction fill( texture ) {\n\n\ttexture.repeat.x = 1;\n\ttexture.repeat.y = 1;\n\n\ttexture.offset.x = 0;\n\ttexture.offset.y = 0;\n\n\treturn texture;\n\n}\n\n/**\n * Determines how many bytes must be used to represent the texture.\n *\n * @param {number} width - The width of the texture.\n * @param {number} height - The height of the texture.\n * @param {number} format - The texture's format.\n * @param {number} type - The texture's type.\n * @return {number} The byte length.\n */\nfunction getByteLength( width, height, format, type ) {\n\n\tconst typeByteLength = getTextureTypeByteLength( type );\n\n\tswitch ( format ) {\n\n\t\t// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml\n\t\tcase AlphaFormat:\n\t\t\treturn width * height;\n\t\tcase RedFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RedIntegerFormat:\n\t\t\treturn ( ( width * height ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGIntegerFormat:\n\t\t\treturn ( ( width * height * 2 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBFormat:\n\t\t\treturn ( ( width * height * 3 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\t\tcase RGBAIntegerFormat:\n\t\t\treturn ( ( width * height * 4 ) / typeByteLength.components ) * typeByteLength.byteLength;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/\n\t\tcase RGB_S3TC_DXT1_Format:\n\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_S3TC_DXT3_Format:\n\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/\n\t\tcase RGB_PVRTC_2BPPV1_Format:\n\t\tcase RGBA_PVRTC_2BPPV1_Format:\n\t\t\treturn ( Math.max( width, 16 ) * Math.max( height, 8 ) ) / 4;\n\t\tcase RGB_PVRTC_4BPPV1_Format:\n\t\tcase RGBA_PVRTC_4BPPV1_Format:\n\t\t\treturn ( Math.max( width, 8 ) * Math.max( height, 8 ) ) / 2;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/\n\t\tcase RGB_ETC1_Format:\n\t\tcase RGB_ETC2_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 8;\n\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/\n\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\treturn Math.floor( ( width + 3 ) / 4 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 3 ) / 4 ) * 16;\n\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\treturn Math.floor( ( width + 4 ) / 5 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\treturn Math.floor( ( width + 5 ) / 6 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\treturn Math.floor( ( width + 7 ) / 8 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 4 ) / 5 ) * 16;\n\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 5 ) / 6 ) * 16;\n\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 7 ) / 8 ) * 16;\n\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\treturn Math.floor( ( width + 9 ) / 10 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 9 ) / 10 ) * 16;\n\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\treturn Math.floor( ( width + 11 ) / 12 ) * Math.floor( ( height + 11 ) / 12 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/\n\t\tcase RGBA_BPTC_Format:\n\t\tcase RGB_BPTC_SIGNED_Format:\n\t\tcase RGB_BPTC_UNSIGNED_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t\t// https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/\n\t\tcase RED_RGTC1_Format:\n\t\tcase SIGNED_RED_RGTC1_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 8;\n\t\tcase RED_GREEN_RGTC2_Format:\n\t\tcase SIGNED_RED_GREEN_RGTC2_Format:\n\t\t\treturn Math.ceil( width / 4 ) * Math.ceil( height / 4 ) * 16;\n\n\t}\n\n\tthrow new Error(\n\t\t`Unable to determine texture byte length for ${format} format.`,\n\t);\n\n}\n\nfunction getTextureTypeByteLength( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase UnsignedByteType:\n\t\tcase ByteType:\n\t\t\treturn { byteLength: 1, components: 1 };\n\t\tcase UnsignedShortType:\n\t\tcase ShortType:\n\t\tcase HalfFloatType:\n\t\t\treturn { byteLength: 2, components: 1 };\n\t\tcase UnsignedShort4444Type:\n\t\tcase UnsignedShort5551Type:\n\t\t\treturn { byteLength: 2, components: 4 };\n\t\tcase UnsignedIntType:\n\t\tcase IntType:\n\t\tcase FloatType:\n\t\t\treturn { byteLength: 4, components: 1 };\n\t\tcase UnsignedInt5999Type:\n\t\t\treturn { byteLength: 4, components: 3 };\n\n\t}\n\n\tthrow new Error( `Unknown texture type ${type}.` );\n\n}\n\n/**\n * A class containing utility functions for textures.\n *\n * @hideconstructor\n */\nclass TextureUtils {\n\n\t/**\n\t * Scales the texture as large as possible within its surface without cropping\n\t * or stretching the texture. The method preserves the original aspect ratio of\n\t * the texture. Akin to CSS `object-fit: contain`\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic contain( texture, aspect ) {\n\n\t\treturn contain( texture, aspect );\n\n\t}\n\n\t/**\n\t * Scales the texture to the smallest possible size to fill the surface, leaving\n\t * no empty space. The method preserves the original aspect ratio of the texture.\n\t * Akin to CSS `object-fit: cover`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {number} aspect - The texture's aspect ratio.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic cover( texture, aspect ) {\n\n\t\treturn cover( texture, aspect );\n\n\t}\n\n\t/**\n\t * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Texture} The updated texture.\n\t */\n\tstatic fill( texture ) {\n\n\t\treturn fill( texture );\n\n\t}\n\n\t/**\n\t * Determines how many bytes must be used to represent the texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} format - The texture's format.\n\t * @param {number} type - The texture's type.\n\t * @return {number} The byte length.\n\t */\n\tstatic getByteLength( width, height, format, type ) {\n\n\t\treturn getByteLength( width, height, format, type );\n\n\t}\n\n}\n\nexport { contain, cover, fill, getByteLength, TextureUtils };\n"],"mappings":"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","ignoreList":[]}