import{Curve}from"./Curve.js";import*as Curves from"../curves/Curves.js";class CurvePath extends Curve{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){const s=!0===t.isVector2?"LineCurve":"LineCurve3";this.curves.push(new Curves[s](e,t))}return this}getPoint(t,e){const s=t*this.getLength(),r=this.getCurveLengths();let h=0;for(;h<r.length;){if(r[h]>=s){const t=r[h]-s,u=this.curves[h],n=u.getLength(),o=0===n?0:1-t/n;return u.getPointAt(o,e)}h++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let s=0,r=this.curves.length;s<r;s++)e+=this.curves[s].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let s=0;s<=t;s++)e.push(this.getPoint(s/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let s;for(let r=0,h=this.curves;r<h.length;r++){const u=h[r],n=u.isEllipseCurve?2*t:u.isLineCurve||u.isLineCurve3?1:u.isSplineCurve?t*u.points.length:t,o=u.getPoints(n);for(let t=0;t<o.length;t++){const r=o[t];s&&s.equals(r)||(e.push(r),s=r)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,s=t.curves.length;e<s;e++){const s=t.curves[e];this.curves.push(s.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,s=this.curves.length;e<s;e++){const s=this.curves[e];t.curves.push(s.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,s=t.curves.length;e<s;e++){const s=t.curves[e];this.curves.push((new Curves[s.type]).fromJSON(s))}return this}}export{CurvePath};
//# sourceMappingURL=CurvePath.js.map