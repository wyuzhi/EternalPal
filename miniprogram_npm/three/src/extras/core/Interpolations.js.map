{"version":3,"file":"node_modules/three/src/extras/core/Interpolations.js","names":["CatmullRom","t","p0","p1","p2","p3","v0","v1","t2","QuadraticBezierP0","p","k","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier"],"sources":["node_modules/three/src/extras/core/Interpolations.js"],"sourcesContent":["// Bezier Curves formulas obtained from: https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n/**\n * Computes a point on a Catmull-Rom spline.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Catmull-Rom spline.\n */\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\n/**\n * Computes a point on a Quadratic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @return {number} The calculated point on a Quadratic Bezier curve.\n */\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\n/**\n * Computes a point on a Cubic Bezier curve.\n *\n * @param {number} t - The interpolation factor.\n * @param {number} p0 - The first control point.\n * @param {number} p1 - The second control point.\n * @param {number} p2 - The third control point.\n * @param {number} p3 - The fourth control point.\n * @return {number} The calculated point on a Cubic Bezier curve.\n */\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nexport { CatmullRom, QuadraticBezier, CubicBezier };\n"],"mappings":"AAYA,SAASA,WAAYC,EAAGC,EAAIC,EAAIC,EAAIC,GAEnC,MAAMC,EAAmB,IAAZF,EAAKF,GACZK,EAAmB,IAAZF,EAAKF,GACZK,EAAKP,EAAIA,EAEf,OAAS,EAAIE,EAAK,EAAIC,EAAKE,EAAKC,IADrBN,EAAIO,KACiC,EAAIL,EAAK,EAAIC,EAAK,EAAIE,EAAKC,GAAOC,EAAKF,EAAKL,EAAIE,CAEjG,CAIA,SAASM,kBAAmBR,EAAGS,GAE9B,MAAMC,EAAI,EAAIV,EACd,OAAOU,EAAIA,EAAID,CAEhB,CAEA,SAASE,kBAAmBX,EAAGS,GAE9B,OAAO,GAAM,EAAIT,GAAMA,EAAIS,CAE5B,CAEA,SAASG,kBAAmBZ,EAAGS,GAE9B,OAAOT,EAAIA,EAAIS,CAEhB,CAWA,SAASI,gBAAiBb,EAAGC,EAAIC,EAAIC,GAEpC,OAAOK,kBAAmBR,EAAGC,GAAOU,kBAAmBX,EAAGE,GACzDU,kBAAmBZ,EAAGG,EAExB,CAIA,SAASW,cAAed,EAAGS,GAE1B,MAAMC,EAAI,EAAIV,EACd,OAAOU,EAAIA,EAAIA,EAAID,CAEpB,CAEA,SAASM,cAAef,EAAGS,GAE1B,MAAMC,EAAI,EAAIV,EACd,OAAO,EAAIU,EAAIA,EAAIV,EAAIS,CAExB,CAEA,SAASO,cAAehB,EAAGS,GAE1B,OAAO,GAAM,EAAIT,GAAMA,EAAIA,EAAIS,CAEhC,CAEA,SAASQ,cAAejB,EAAGS,GAE1B,OAAOT,EAAIA,EAAIA,EAAIS,CAEpB,CAYA,SAASS,YAAalB,EAAGC,EAAIC,EAAIC,EAAIC,GAEpC,OAAOU,cAAed,EAAGC,GAAOc,cAAef,EAAGE,GAAOc,cAAehB,EAAGG,GAC1Ec,cAAejB,EAAGI,EAEpB,QAESL,WAAYc,gBAAiBK","ignoreList":[]}