import{Vector2}from"../../math/Vector2.js";import{CurvePath}from"./CurvePath.js";import{EllipseCurve}from"../curves/EllipseCurve.js";import{SplineCurve}from"../curves/SplineCurve.js";import{CubicBezierCurve}from"../curves/CubicBezierCurve.js";import{QuadraticBezierCurve}from"../curves/QuadraticBezierCurve.js";import{LineCurve}from"../curves/LineCurve.js";class Path extends CurvePath{constructor(t){super(),this.type="Path",this.currentPoint=new Vector2,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let r=1,e=t.length;r<e;r++)this.lineTo(t[r].x,t[r].y);return this}moveTo(t,r){return this.currentPoint.set(t,r),this}lineTo(t,r){const e=new LineCurve(this.currentPoint.clone(),new Vector2(t,r));return this.curves.push(e),this.currentPoint.set(t,r),this}quadraticCurveTo(t,r,e,i){const s=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(t,r),new Vector2(e,i));return this.curves.push(s),this.currentPoint.set(e,i),this}bezierCurveTo(t,r,e,i,s,n){const o=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(t,r),new Vector2(e,i),new Vector2(s,n));return this.curves.push(o),this.currentPoint.set(s,n),this}splineThru(t){const r=[this.currentPoint.clone()].concat(t),e=new SplineCurve(r);return this.curves.push(e),this.currentPoint.copy(t[t.length-1]),this}arc(t,r,e,i,s,n){const o=this.currentPoint.x,u=this.currentPoint.y;return this.absarc(t+o,r+u,e,i,s,n),this}absarc(t,r,e,i,s,n){return this.absellipse(t,r,e,e,i,s,n),this}ellipse(t,r,e,i,s,n,o,u){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(t+c,r+h,e,i,s,n,o,u),this}absellipse(t,r,e,i,s,n,o,u){const c=new EllipseCurve(t,r,e,i,s,n,o,u);if(this.curves.length>0){const t=c.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}export{Path};
//# sourceMappingURL=Path.js.map