{"version":3,"file":"node_modules/three/src/extras/core/Shape.js","names":["Path","generateUUID","Shape","constructor","points","super","this","uuid","type","holes","getPointsHoles","divisions","holesPts","i","l","length","getPoints","extractPoints","shape","copy","source","hole","push","clone","toJSON","data","fromJSON","json"],"sources":["node_modules/three/src/extras/core/Shape.js"],"sourcesContent":["import { Path } from './Path.js';\nimport { generateUUID } from '../../math/MathUtils.js';\n\n/**\n * Defines an arbitrary 2d shape plane using paths with optional holes. It\n * can be used with {@link ExtrudeGeometry}, {@link ShapeGeometry}, to get\n * points, or to get triangulated faces.\n *\n * ```js\n * const heartShape = new THREE.Shape();\n *\n * heartShape.moveTo( 25, 25 );\n * heartShape.bezierCurveTo( 25, 25, 20, 0, 0, 0 );\n * heartShape.bezierCurveTo( - 30, 0, - 30, 35, - 30, 35 );\n * heartShape.bezierCurveTo( - 30, 55, - 10, 77, 25, 95 );\n * heartShape.bezierCurveTo( 60, 77, 80, 55, 80, 35 );\n * heartShape.bezierCurveTo( 80, 35, 80, 0, 50, 0 );\n * heartShape.bezierCurveTo( 35, 0, 25, 25, 25, 25 );\n *\n * const extrudeSettings = {\n * \tdepth: 8,\n * \tbevelEnabled: true,\n * \tbevelSegments: 2,\n * \tsteps: 2,\n * \tbevelSize: 1,\n * \tbevelThickness: 1\n * };\n *\n * const geometry = new THREE.ExtrudeGeometry( heartShape, extrudeSettings );\n * const mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial() );\n * ```\n *\n * @augments Path\n */\nclass Shape extends Path {\n\n\t/**\n\t * Constructs a new shape.\n\t *\n\t * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.\n\t */\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\t/**\n\t\t * The UUID of the shape.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\t/**\n\t\t * Defines the holes in the shape. Hole definitions must use the\n\t\t * opposite winding order (CW/CCW) than the outer shape.\n\t\t *\n\t\t * @type {Array<Path>}\n\t\t * @readonly\n\t\t */\n\t\tthis.holes = [];\n\n\t}\n\n\t/**\n\t * Returns an array representing each contour of the holes\n\t * as a list of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {Array<Array<Vector2>>} The holes as a series of 2D points.\n\t */\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t/**\n\t * Returns an object that holds contour data for the shape and its holes as\n\t * arrays of 2D points.\n\t *\n\t * @param {number} divisions - The fineness of the result.\n\t * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.\n\t */\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nexport { Shape };\n"],"mappings":"OAASA,SAAY,mBACZC,iBAAoB,0BAiC7B,MAAMC,cAAcF,KAOnB,WAAAG,CAAaC,GAEZC,MAAOD,GAQPE,KAAKC,KAAON,eAEZK,KAAKE,KAAO,QASZF,KAAKG,MAAQ,EAEd,CASA,cAAAC,CAAgBC,GAEf,MAAMC,EAAW,GAEjB,IAAM,IAAIC,EAAI,EAAGC,EAAIR,KAAKG,MAAMM,OAAQF,EAAIC,EAAGD,IAE9CD,EAAUC,GAAMP,KAAKG,MAAOI,GAAIG,UAAWL,GAI5C,OAAOC,CAER,CAWA,aAAAK,CAAeN,GAEd,MAAO,CAENO,MAAOZ,KAAKU,UAAWL,GACvBF,MAAOH,KAAKI,eAAgBC,GAI9B,CAEA,IAAAQ,CAAMC,GAELf,MAAMc,KAAMC,GAEZd,KAAKG,MAAQ,GAEb,IAAM,IAAII,EAAI,EAAGC,EAAIM,EAAOX,MAAMM,OAAQF,EAAIC,EAAGD,IAAO,CAEvD,MAAMQ,EAAOD,EAAOX,MAAOI,GAE3BP,KAAKG,MAAMa,KAAMD,EAAKE,QAEvB,CAEA,OAAOjB,IAER,CAEA,MAAAkB,GAEC,MAAMC,EAAOpB,MAAMmB,SAEnBC,EAAKlB,KAAOD,KAAKC,KACjBkB,EAAKhB,MAAQ,GAEb,IAAM,IAAII,EAAI,EAAGC,EAAIR,KAAKG,MAAMM,OAAQF,EAAIC,EAAGD,IAAO,CAErD,MAAMQ,EAAOf,KAAKG,MAAOI,GACzBY,EAAKhB,MAAMa,KAAMD,EAAKG,SAEvB,CAEA,OAAOC,CAER,CAEA,QAAAC,CAAUC,GAETtB,MAAMqB,SAAUC,GAEhBrB,KAAKC,KAAOoB,EAAKpB,KACjBD,KAAKG,MAAQ,GAEb,IAAM,IAAII,EAAI,EAAGC,EAAIa,EAAKlB,MAAMM,OAAQF,EAAIC,EAAGD,IAAO,CAErD,MAAMQ,EAAOM,EAAKlB,MAAOI,GACzBP,KAAKG,MAAMa,MAAM,IAAItB,MAAO0B,SAAUL,GAEvC,CAEA,OAAOf,IAER,SAKQJ","ignoreList":[]}