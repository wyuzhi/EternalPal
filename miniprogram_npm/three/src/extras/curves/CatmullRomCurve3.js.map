{"version":3,"file":"node_modules/three/src/extras/curves/CatmullRomCurve3.js","names":["Vector3","Curve","CubicPoly","c0","c1","c2","c3","init","x0","x1","t0","t1","initCatmullRom","x2","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t","tmp","px","py","pz","CatmullRomCurve3","constructor","points","closed","curveType","super","this","isCatmullRomCurve3","type","getPoint","optionalTarget","point","l","length","p","p0","p3","intPoint","Math","floor","weight","abs","subVectors","add","p1","p2","pow","distanceToSquared","x","y","z","set","copy","source","i","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"sources":["node_modules/three/src/extras/curves/CatmullRomCurve3.js"],"sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\nimport { Curve } from '../core/Curve.js';\n\nfunction CubicPoly() {\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t* cusps and self-intersections in non-uniform catmull rom curves.\n\t* http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t*\n\t* curve.type accepts centripetal(default), chordal and catmullrom\n\t* curve.tension is used for catmullrom which defaults to 0.5\n\t*/\n\n\t/*\n\tBased on an optimized c++ solution in\n\t- http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t- http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\n/**\n * A curve representing a Catmull-Rom spline.\n *\n * ```js\n * //Create a closed wavey loop\n * const curve = new THREE.CatmullRomCurve3( [\n * \tnew THREE.Vector3( -10, 0, 10 ),\n * \tnew THREE.Vector3( -5, 5, 5 ),\n * \tnew THREE.Vector3( 0, 0, 0 ),\n * \tnew THREE.Vector3( 5, -5, 5 ),\n * \tnew THREE.Vector3( 10, 0, 10 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const curveObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass CatmullRomCurve3 extends Curve {\n\n\t/**\n\t * Constructs a new Catmull-Rom curve.\n\t *\n\t * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.\n\t * @param {boolean} [closed=false] - Whether the curve is closed or not.\n\t * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.\n\t * @param {number} [tension=0.5] - Tension of the curve.\n\t */\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\t/**\n\t\t * An array of 3D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector3>}\n\t\t */\n\t\tthis.points = points;\n\n\t\t/**\n\t\t * Whether the curve is closed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.closed = closed;\n\n\t\t/**\n\t\t * The curve type.\n\t\t *\n\t\t * @type {('centripetal'|'chordal'|'catmullrom')}\n\t\t * @default 'centripetal'\n\t\t */\n\t\tthis.curveType = curveType;\n\n\t\t/**\n\t\t * Tension of the curve.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tthis.tension = tension;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector3} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { CatmullRomCurve3 };\n"],"mappings":"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","ignoreList":[]}