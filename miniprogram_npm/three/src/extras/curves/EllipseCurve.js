import{Curve}from"../core/Curve.js";import{Vector2}from"../../math/Vector2.js";class EllipseCurve extends Curve{constructor(t=0,s=0,a=1,i=1,e=0,h=2*Math.PI,o=!1,n=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=s,this.xRadius=a,this.yRadius=i,this.aStartAngle=e,this.aEndAngle=h,this.aClockwise=o,this.aRotation=n}getPoint(t,s=new Vector2){const a=s,i=2*Math.PI;let e=this.aEndAngle-this.aStartAngle;const h=Math.abs(e)<Number.EPSILON;for(;e<0;)e+=i;for(;e>i;)e-=i;e<Number.EPSILON&&(e=h?0:i),!0!==this.aClockwise||h||(e===i?e=-i:e-=i);const o=this.aStartAngle+t*e;let n=this.aX+this.xRadius*Math.cos(o),r=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){const t=Math.cos(this.aRotation),s=Math.sin(this.aRotation),a=n-this.aX,i=r-this.aY;n=a*t-i*s+this.aX,r=a*s+i*t+this.aY}return a.set(n,r)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}export{EllipseCurve};
//# sourceMappingURL=EllipseCurve.js.map