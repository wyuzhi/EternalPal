{"version":3,"file":"node_modules/three/src/extras/curves/SplineCurve.js","names":["Curve","CatmullRom","Vector2","SplineCurve","constructor","points","super","this","isSplineCurve","type","getPoint","t","optionalTarget","point","p","length","intPoint","Math","floor","weight","p0","p1","p2","p3","set","x","y","copy","source","i","l","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"sources":["node_modules/three/src/extras/curves/SplineCurve.js"],"sourcesContent":["import { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\n/**\n * A curve representing a 2D spline curve.\n *\n * ```js\n * // Create a sine-like wave\n * const curve = new THREE.SplineCurve( [\n * \tnew THREE.Vector2( -10, 0 ),\n * \tnew THREE.Vector2( -5, 5 ),\n * \tnew THREE.Vector2( 0, 0 ),\n * \tnew THREE.Vector2( 5, -5 ),\n * \tnew THREE.Vector2( 10, 0 )\n * ] );\n *\n * const points = curve.getPoints( 50 );\n * const geometry = new THREE.BufferGeometry().setFromPoints( points );\n *\n * const material = new THREE.LineBasicMaterial( { color: 0xff0000 } );\n *\n * // Create the final object to add to the scene\n * const splineObject = new THREE.Line( geometry, material );\n * ```\n *\n * @augments Curve\n */\nclass SplineCurve extends Curve {\n\n\t/**\n\t * Constructs a new 2D spline curve.\n\t *\n\t * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.\n\t */\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\t/**\n\t\t * An array of 2D points defining the curve.\n\t\t *\n\t\t * @type {Array<Vector2>}\n\t\t */\n\t\tthis.points = points;\n\n\t}\n\n\t/**\n\t * Returns a point on the curve.\n\t *\n\t * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.\n\t * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.\n\t * @return {Vector2} The position on the curve.\n\t */\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { SplineCurve };\n"],"mappings":"OAASA,UAAa,0BACbC,eAAkB,mCAClBC,YAAe,wBA0BxB,MAAMC,oBAAoBH,MAOzB,WAAAI,CAAaC,EAAS,IAErBC,QASAC,KAAKC,eAAgB,EAErBD,KAAKE,KAAO,cAOZF,KAAKF,OAASA,CAEf,CASA,QAAAK,CAAUC,EAAGC,EAAiB,IAAIV,SAEjC,MAAMW,EAAQD,EAERP,EAASE,KAAKF,OACdS,GAAMT,EAAOU,OAAS,GAAMJ,EAE5BK,EAAWC,KAAKC,MAAOJ,GACvBK,EAASL,EAAIE,EAEbI,EAAKf,EAAqB,IAAbW,EAAiBA,EAAWA,EAAW,GACpDK,EAAKhB,EAAQW,GACbM,EAAKjB,EAAQW,EAAWX,EAAOU,OAAS,EAAIV,EAAOU,OAAS,EAAIC,EAAW,GAC3EO,EAAKlB,EAAQW,EAAWX,EAAOU,OAAS,EAAIV,EAAOU,OAAS,EAAIC,EAAW,GAOjF,OALAH,EAAMW,IACLvB,WAAYkB,EAAQC,EAAGK,EAAGJ,EAAGI,EAAGH,EAAGG,EAAGF,EAAGE,GACzCxB,WAAYkB,EAAQC,EAAGM,EAAGL,EAAGK,EAAGJ,EAAGI,EAAGH,EAAGG,IAGnCb,CAER,CAEA,IAAAc,CAAMC,GAELtB,MAAMqB,KAAMC,GAEZrB,KAAKF,OAAS,GAEd,IAAM,IAAIwB,EAAI,EAAGC,EAAIF,EAAOvB,OAAOU,OAAQc,EAAIC,EAAGD,IAAO,CAExD,MAAMhB,EAAQe,EAAOvB,OAAQwB,GAE7BtB,KAAKF,OAAO0B,KAAMlB,EAAMmB,QAEzB,CAEA,OAAOzB,IAER,CAEA,MAAA0B,GAEC,MAAMC,EAAO5B,MAAM2B,SAEnBC,EAAK7B,OAAS,GAEd,IAAM,IAAIwB,EAAI,EAAGC,EAAIvB,KAAKF,OAAOU,OAAQc,EAAIC,EAAGD,IAAO,CAEtD,MAAMhB,EAAQN,KAAKF,OAAQwB,GAC3BK,EAAK7B,OAAO0B,KAAMlB,EAAMsB,UAEzB,CAEA,OAAOD,CAER,CAEA,QAAAE,CAAUC,GAET/B,MAAM8B,SAAUC,GAEhB9B,KAAKF,OAAS,GAEd,IAAM,IAAIwB,EAAI,EAAGC,EAAIO,EAAKhC,OAAOU,OAAQc,EAAIC,EAAGD,IAAO,CAEtD,MAAMhB,EAAQwB,EAAKhC,OAAQwB,GAC3BtB,KAAKF,OAAO0B,MAAM,IAAI7B,SAAUoC,UAAWzB,GAE5C,CAEA,OAAON,IAER,SAIQJ","ignoreList":[]}