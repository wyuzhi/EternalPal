{"version":3,"file":"node_modules/three/src/extras/lib/earcut.js","names":["earcut","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","invSize","eliminateHoles","Infinity","maxX","maxY","i","x","y","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","filterPoints","again","p","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","ax","bx","cx","ay","by","cy","x0","min","y0","x1","y1","pointInTriangleExceptFirst","minZ","zOrder","maxZ","prevZ","n","nextZ","z","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareXYSlope","eliminateHole","result","hole","bridge","findHoleBridge","bridgeReverse","hx","hy","m","qx","mx","my","tanMin","pointInTriangle","tan","abs","sectorContainsSector","sortLinked","numMerges","inSize","e","tail","q","pSize","qSize","leftmost","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","num","inside","a2","createNode","b2","an","bp","deviation","polygonArea","trianglesArea","sum","j","flatten","vertices","holes","dimensions","holeIndex","prevLen","ring","d"],"sources":["node_modules/three/src/extras/lib/earcut.js"],"sourcesContent":["/* eslint-disable */\n// copy of mapbox/earcut version 3.0.1\n// https://github.com/mapbox/earcut/tree/v3.0.1\n\nexport default function earcut(data, holeIndices, dim = 2) {\n\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    let outerNode = linkedList(data, 0, outerLen, dim, true);\n    const triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    let minX, minY, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = Infinity;\n        minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = dim; i < outerLen; i += dim) {\n            const x = data[i];\n            const y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    let last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    } else {\n        for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    let p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    let stop = ear;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        const prev = ear.prev;\n        const next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    let p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox\n    const x0 = Math.min(ax, bx, cx),\n        y0 = Math.min(ay, by, cy),\n        x1 = Math.max(ax, bx, cx),\n        y1 = Math.max(ay, by, cy);\n\n    // z-order range for the current triangle bbox;\n    const minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    let p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n    let p = start;\n    do {\n        const a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i, p.i, b.i);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n    do {\n        let b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                let c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    const queue = [];\n\n    for (let i = 0, len = holeIndices.length; i < len; i++) {\n        const start = holeIndices[i] * dim;\n        const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        const list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareXYSlope);\n\n    // process holes from left to right\n    for (let i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareXYSlope(a, b) {\n    let result = a.x - b.x;\n    // when the left-most point of 2 holes meet at a vertex, sort the holes counterclockwise so that when we find\n    // the bridge to the outer shell is always the point that they meet at.\n    if (result === 0) {\n        result = a.y - b.y;\n        if (result === 0) {\n            const aSlope = (a.next.y - a.y) / (a.next.x - a.x);\n            const bSlope = (b.next.y - b.y) / (b.next.x - b.x);\n            result = aSlope - bSlope;\n        }\n    }\n    return result;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    const bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    const bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity;\n    let m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    // unless they intersect at a vertex, then choose the vertex\n    if (equals(hole, p)) return p;\n    do {\n        if (equals(hole, p.next)) return p.next;\n        else if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    const stop = m;\n    const mx = m.x;\n    const my = m.y;\n    let tanMin = Infinity;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    let p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    let numMerges;\n    let inSize = 1;\n\n    do {\n        let p = list;\n        let e;\n        list = null;\n        let tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            let q = p;\n            let pSize = 0;\n            for (let i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            let qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    let p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a point lies within a convex triangle but false if its equal to the first point of the triangle\nfunction pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px, py) {\n    return !(ax === px && ay === py) && pointInTriangle(ax, ay, bx, by, cx, cy, px, py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    let p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    let p = a;\n    let inside = false;\n    const px = (a.x + b.x) / 2;\n    const py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    const a2 = createNode(a.i, a.x, a.y),\n        b2 = createNode(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    const p = createNode(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction createNode(i, x, y) {\n    return {\n        i, // vertex index in coordinates array\n        x, y, // vertex coordinates\n        prev: null, // previous and next vertex nodes in a polygon ring\n        next: null,\n        z: 0, // z-order curve value\n        prevZ: null, // previous and next nodes in z-order\n        nextZ: null,\n        steiner: false // indicates whether this is a steiner point\n    };\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nexport function deviation(data, holeIndices, dim, triangles) {\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    let polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (let i = 0, len = holeIndices.length; i < len; i++) {\n            const start = holeIndices[i] * dim;\n            const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    let trianglesArea = 0;\n    for (let i = 0; i < triangles.length; i += 3) {\n        const a = triangles[i] * dim;\n        const b = triangles[i + 1] * dim;\n        const c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n}\n\nfunction signedArea(data, start, end, dim) {\n    let sum = 0;\n    for (let i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nexport function flatten(data) {\n    const vertices = [];\n    const holes = [];\n    const dimensions = data[0][0].length;\n    let holeIndex = 0;\n    let prevLen = 0;\n\n    for (const ring of data) {\n        for (const p of ring) {\n            for (let d = 0; d < dimensions; d++) vertices.push(p[d]);\n        }\n        if (prevLen) {\n            holeIndex += prevLen;\n            holes.push(holeIndex);\n        }\n        prevLen = ring.length;\n    }\n    return {vertices, holes, dimensions};\n}\n"],"mappings":"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","ignoreList":[]}