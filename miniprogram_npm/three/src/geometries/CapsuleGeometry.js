import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";class CapsuleGeometry extends BufferGeometry{constructor(t=1,e=1,s=4,r=8,a=1){super(),this.type="CapsuleGeometry",this.parameters={radius:t,height:e,capSegments:s,radialSegments:r,heightSegments:a},e=Math.max(0,e),s=Math.max(1,Math.floor(s)),r=Math.max(3,Math.floor(r)),a=Math.max(1,Math.floor(a));const o=[],h=[],i=[],n=[],u=e/2,m=Math.PI/2*t,f=e,c=2*m+f,p=2*s+a,l=r+1,M=new Vector3,y=new Vector3;for(let g=0;g<=p;g++){let x=0,b=0,A=0,B=0;if(g<=s){const e=g/s,r=e*Math.PI/2;b=-u-t*Math.cos(r),A=t*Math.sin(r),B=-t*Math.cos(r),x=e*m}else if(g<=s+a){const r=(g-s)/a;b=r*e-u,A=t,B=0,x=m+r*f}else{const e=(g-s-a)/s,r=e*Math.PI/2;b=u+t*Math.sin(r),A=t*Math.cos(r),B=t*Math.sin(r),x=m+f+e*m}const G=Math.max(0,Math.min(1,x/c));let S=0;0===g?S=.5/r:g===p&&(S=-.5/r);for(let t=0;t<=r;t++){const e=t/r,s=e*Math.PI*2,a=Math.sin(s),o=Math.cos(s);y.x=-A*o,y.y=b,y.z=A*a,h.push(y.x,y.y,y.z),M.set(-A*o,B,A*a),M.normalize(),i.push(M.x,M.y,M.z),n.push(e+S,G)}if(g>0){const t=(g-1)*l;for(let e=0;e<r;e++){const s=t+e,r=t+e+1,a=g*l+e,h=g*l+e+1;o.push(s,r,a),o.push(r,h,a)}}}this.setIndex(o),this.setAttribute("position",new Float32BufferAttribute(h,3)),this.setAttribute("normal",new Float32BufferAttribute(i,3)),this.setAttribute("uv",new Float32BufferAttribute(n,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new CapsuleGeometry(t.radius,t.height,t.capSegments,t.radialSegments,t.heightSegments)}}export{CapsuleGeometry};
//# sourceMappingURL=CapsuleGeometry.js.map