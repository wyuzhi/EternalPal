import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";import{Vector2}from"../math/Vector2.js";class CircleGeometry extends BufferGeometry{constructor(t=1,e=32,r=0,s=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:r,thetaLength:s},e=Math.max(3,e);const o=[],i=[],u=[],a=[],h=new Vector3,m=new Vector2;i.push(0,0,0),u.push(0,0,1),a.push(.5,.5);for(let o=0,f=3;o<=e;o++,f+=3){const c=r+o/e*s;h.x=t*Math.cos(c),h.y=t*Math.sin(c),i.push(h.x,h.y,h.z),u.push(0,0,1),m.x=(i[f]/t+1)/2,m.y=(i[f+1]/t+1)/2,a.push(m.x,m.y)}for(let t=1;t<=e;t++)o.push(t,t+1,0);this.setIndex(o),this.setAttribute("position",new Float32BufferAttribute(i,3)),this.setAttribute("normal",new Float32BufferAttribute(u,3)),this.setAttribute("uv",new Float32BufferAttribute(a,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new CircleGeometry(t.radius,t.segments,t.thetaStart,t.thetaLength)}}export{CircleGeometry};
//# sourceMappingURL=CircleGeometry.js.map