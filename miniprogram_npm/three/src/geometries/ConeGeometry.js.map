{"version":3,"file":"node_modules/three/src/geometries/ConeGeometry.js","names":["CylinderGeometry","ConeGeometry","constructor","radius","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength","Math","PI","super","this","type","parameters","fromJSON","data"],"sources":["node_modules/three/src/geometries/ConeGeometry.js"],"sourcesContent":["import { CylinderGeometry } from './CylinderGeometry.js';\n\n/**\n * A geometry class for representing a cone.\n *\n * ```js\n * const geometry = new THREE.ConeGeometry( 5, 20, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n * const cone = new THREE.Mesh(geometry, material );\n * scene.add( cone );\n * ```\n *\n * @augments CylinderGeometry\n */\nclass ConeGeometry extends CylinderGeometry {\n\n\t/**\n\t * Constructs a new cone geometry.\n\t *\n\t * @param {number} [radius=1] - Radius of the cone base.\n\t * @param {number} [height=1] - Height of the cone.\n\t * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.\n\t * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.\n\t * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.\n\t * @param {number} [thetaStart=0] - Start angle for first segment, in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.\n\t * The default value results in a complete cone.\n\t */\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {ConeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nexport { ConeGeometry };\n"],"mappings":"OAASA,qBAAwB,wBAcjC,MAAMC,qBAAqBD,iBAc1B,WAAAE,CAAaC,EAAS,EAAGC,EAAS,EAAGC,EAAiB,GAAIC,EAAiB,EAAGC,GAAY,EAAOC,EAAa,EAAGC,EAAwB,EAAVC,KAAKC,IAEnIC,MAAO,EAAGT,EAAQC,EAAQC,EAAgBC,EAAgBC,EAAWC,EAAYC,GAEjFI,KAAKC,KAAO,eASZD,KAAKE,WAAa,CACjBZ,OAAQA,EACRC,OAAQA,EACRC,eAAgBA,EAChBC,eAAgBA,EAChBC,UAAWA,EACXC,WAAYA,EACZC,YAAaA,EAGf,CASA,eAAOO,CAAUC,GAEhB,OAAO,IAAIhB,aAAcgB,EAAKd,OAAQc,EAAKb,OAAQa,EAAKZ,eAAgBY,EAAKX,eAAgBW,EAAKV,UAAWU,EAAKT,WAAYS,EAAKR,YAEpI,SAIQR","ignoreList":[]}