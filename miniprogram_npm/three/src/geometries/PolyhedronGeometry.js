import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";import{Vector2}from"../math/Vector2.js";class PolyhedronGeometry extends BufferGeometry{constructor(t=[],e=[],r=1,o=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:r,detail:o};const n=[],s=[];function c(t,e,r,o){const n=o+1,s=[];for(let o=0;o<=n;o++){s[o]=[];const c=t.clone().lerp(r,o/n),i=e.clone().lerp(r,o/n),a=n-o;for(let t=0;t<=a;t++)s[o][t]=0===t&&o===n?c:c.clone().lerp(i,t/a)}for(let t=0;t<n;t++)for(let e=0;e<2*(n-t)-1;e++){const r=Math.floor(e/2);e%2==0?(i(s[t][r+1]),i(s[t+1][r]),i(s[t][r])):(i(s[t][r+1]),i(s[t+1][r+1]),i(s[t+1][r]))}}function i(t){n.push(t.x,t.y,t.z)}function a(e,r){const o=3*e;r.x=t[o+0],r.y=t[o+1],r.z=t[o+2]}function l(t,e,r,o){o<0&&1===t.x&&(s[e]=t.x-1),0===r.x&&0===r.z&&(s[e]=o/2/Math.PI+.5)}function f(t){return Math.atan2(t.z,-t.x)}!function(t){const r=new Vector3,o=new Vector3,n=new Vector3;for(let s=0;s<e.length;s+=3)a(e[s+0],r),a(e[s+1],o),a(e[s+2],n),c(r,o,n,t)}(o),function(t){const e=new Vector3;for(let r=0;r<n.length;r+=3)e.x=n[r+0],e.y=n[r+1],e.z=n[r+2],e.normalize().multiplyScalar(t),n[r+0]=e.x,n[r+1]=e.y,n[r+2]=e.z}(r),function(){const t=new Vector3;for(let r=0;r<n.length;r+=3){t.x=n[r+0],t.y=n[r+1],t.z=n[r+2];const o=f(t)/2/Math.PI+.5,c=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);s.push(o,1-c)}var e;(function(){const t=new Vector3,e=new Vector3,r=new Vector3,o=new Vector3,c=new Vector2,i=new Vector2,a=new Vector2;for(let u=0,h=0;u<n.length;u+=9,h+=6){t.set(n[u+0],n[u+1],n[u+2]),e.set(n[u+3],n[u+4],n[u+5]),r.set(n[u+6],n[u+7],n[u+8]),c.set(s[h+0],s[h+1]),i.set(s[h+2],s[h+3]),a.set(s[h+4],s[h+5]),o.copy(t).add(e).add(r).divideScalar(3);const m=f(o);l(c,h+0,t,m),l(i,h+2,e,m),l(a,h+4,r,m)}})(),function(){for(let t=0;t<s.length;t+=6){const e=s[t+0],r=s[t+2],o=s[t+4],n=Math.max(e,r,o),c=Math.min(e,r,o);n>.9&&c<.1&&(e<.2&&(s[t+0]+=1),r<.2&&(s[t+2]+=1),o<.2&&(s[t+4]+=1))}}()}(),this.setAttribute("position",new Float32BufferAttribute(n,3)),this.setAttribute("normal",new Float32BufferAttribute(n.slice(),3)),this.setAttribute("uv",new Float32BufferAttribute(s,2)),0===o?this.computeVertexNormals():this.normalizeNormals()}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new PolyhedronGeometry(t.vertices,t.indices,t.radius,t.details)}}export{PolyhedronGeometry};
//# sourceMappingURL=PolyhedronGeometry.js.map