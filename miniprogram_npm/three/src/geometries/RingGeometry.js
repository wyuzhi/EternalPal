import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector2}from"../math/Vector2.js";import{Vector3}from"../math/Vector3.js";class RingGeometry extends BufferGeometry{constructor(t=.5,e=1,r=32,s=1,o=0,i=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:r,phiSegments:s,thetaStart:o,thetaLength:i},r=Math.max(3,r);const a=[],n=[],u=[],h=[];let m=t;const f=(e-t)/(s=Math.max(1,s)),c=new Vector3,p=new Vector2;for(let t=0;t<=s;t++){for(let t=0;t<=r;t++){const s=o+t/r*i;c.x=m*Math.cos(s),c.y=m*Math.sin(s),n.push(c.x,c.y,c.z),u.push(0,0,1),p.x=(c.x/e+1)/2,p.y=(c.y/e+1)/2,h.push(p.x,p.y)}m+=f}for(let t=0;t<s;t++){const e=t*(r+1);for(let t=0;t<r;t++){const s=t+e,o=s,i=s+r+1,n=s+r+2,u=s+1;a.push(o,i,u),a.push(i,n,u)}}this.setIndex(a),this.setAttribute("position",new Float32BufferAttribute(n,3)),this.setAttribute("normal",new Float32BufferAttribute(u,3)),this.setAttribute("uv",new Float32BufferAttribute(h,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new RingGeometry(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}export{RingGeometry};
//# sourceMappingURL=RingGeometry.js.map