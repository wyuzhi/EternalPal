{"version":3,"file":"node_modules/three/src/geometries/RingGeometry.js","names":["BufferGeometry","Float32BufferAttribute","Vector2","Vector3","RingGeometry","constructor","innerRadius","outerRadius","thetaSegments","phiSegments","thetaStart","thetaLength","Math","PI","super","this","type","parameters","max","indices","vertices","normals","uvs","radius","radiusStep","vertex","uv","j","i","segment","x","cos","y","sin","push","z","thetaSegmentLevel","a","b","c","d","setIndex","setAttribute","copy","source","Object","assign","fromJSON","data"],"sources":["node_modules/three/src/geometries/RingGeometry.js"],"sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\n\n/**\n * A class for generating a two-dimensional ring geometry.\n *\n * ```js\n * const geometry = new THREE.RingGeometry( 1, 5, 32 );\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material );\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass RingGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new ring geometry.\n\t *\n\t * @param {number} [innerRadius=0.5] - The inner radius of the ring.\n\t * @param {number} [outerRadius=1] - The outer radius of the ring.\n\t * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.\n\t * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.\n\t * @param {number} [thetaStart=0] - Starting angle in radians.\n\t * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.\n\t */\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @return {RingGeometry} A new instance.\n\t */\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\n\nexport { RingGeometry };\n"],"mappings":"OAASA,mBAAsB,mCACtBC,2BAA8B,oCAC9BC,YAAe,4BACfC,YAAe,qBAcxB,MAAMC,qBAAqBJ,eAY1B,WAAAK,CAAaC,EAAc,GAAKC,EAAc,EAAGC,EAAgB,GAAIC,EAAc,EAAGC,EAAa,EAAGC,EAAwB,EAAVC,KAAKC,IAExHC,QAEAC,KAAKC,KAAO,eASZD,KAAKE,WAAa,CACjBX,YAAaA,EACbC,YAAaA,EACbC,cAAeA,EACfC,YAAaA,EACbC,WAAYA,EACZC,YAAaA,GAGdH,EAAgBI,KAAKM,IAAK,EAAGV,GAK7B,MAAMW,EAAU,GACVC,EAAW,GACXC,EAAU,GACVC,EAAM,GAIZ,IAAIC,EAASjB,EACb,MAAMkB,GAAiBjB,EAAcD,IAZrCG,EAAcG,KAAKM,IAAK,EAAGT,IAarBgB,EAAS,IAAItB,QACbuB,EAAK,IAAIxB,QAIf,IAAM,IAAIyB,EAAI,EAAGA,GAAKlB,EAAakB,IAAO,CAEzC,IAAM,IAAIC,EAAI,EAAGA,GAAKpB,EAAeoB,IAAO,CAI3C,MAAMC,EAAUnB,EAAakB,EAAIpB,EAAgBG,EAIjDc,EAAOK,EAAIP,EAASX,KAAKmB,IAAKF,GAC9BJ,EAAOO,EAAIT,EAASX,KAAKqB,IAAKJ,GAE9BT,EAASc,KAAMT,EAAOK,EAAGL,EAAOO,EAAGP,EAAOU,GAI1Cd,EAAQa,KAAM,EAAG,EAAG,GAIpBR,EAAGI,GAAML,EAAOK,EAAIvB,EAAc,GAAM,EACxCmB,EAAGM,GAAMP,EAAOO,EAAIzB,EAAc,GAAM,EAExCe,EAAIY,KAAMR,EAAGI,EAAGJ,EAAGM,EAEpB,CAIAT,GAAUC,CAEX,CAIA,IAAM,IAAIG,EAAI,EAAGA,EAAIlB,EAAakB,IAAO,CAExC,MAAMS,EAAoBT,GAAMnB,EAAgB,GAEhD,IAAM,IAAIoB,EAAI,EAAGA,EAAIpB,EAAeoB,IAAO,CAE1C,MAAMC,EAAUD,EAAIQ,EAEdC,EAAIR,EACJS,EAAIT,EAAUrB,EAAgB,EAC9B+B,EAAIV,EAAUrB,EAAgB,EAC9BgC,EAAIX,EAAU,EAIpBV,EAAQe,KAAMG,EAAGC,EAAGE,GACpBrB,EAAQe,KAAMI,EAAGC,EAAGC,EAErB,CAED,CAIAzB,KAAK0B,SAAUtB,GACfJ,KAAK2B,aAAc,WAAY,IAAIzC,uBAAwBmB,EAAU,IACrEL,KAAK2B,aAAc,SAAU,IAAIzC,uBAAwBoB,EAAS,IAClEN,KAAK2B,aAAc,KAAM,IAAIzC,uBAAwBqB,EAAK,GAE3D,CAEA,IAAAqB,CAAMC,GAML,OAJA9B,MAAM6B,KAAMC,GAEZ7B,KAAKE,WAAa4B,OAAOC,OAAQ,CAAC,EAAGF,EAAO3B,YAErCF,IAER,CASA,eAAOgC,CAAUC,GAEhB,OAAO,IAAI5C,aAAc4C,EAAK1C,YAAa0C,EAAKzC,YAAayC,EAAKxC,cAAewC,EAAKvC,YAAauC,EAAKtC,WAAYsC,EAAKrC,YAE1H,SAKQP","ignoreList":[]}