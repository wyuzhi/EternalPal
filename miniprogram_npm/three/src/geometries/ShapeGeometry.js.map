{"version":3,"file":"node_modules/three/src/geometries/ShapeGeometry.js","names":["BufferGeometry","Float32BufferAttribute","Shape","ShapeUtils","Vector2","ShapeGeometry","constructor","shapes","curveSegments","super","this","type","parameters","indices","vertices","normals","uvs","groupStart","groupCount","Array","isArray","addShape","i","length","addGroup","shape","indexOffset","points","extractPoints","shapeVertices","shapeHoles","holes","isClockWise","reverse","l","shapeHole","faces","triangulateShape","concat","vertex","push","x","y","face","a","b","c","setIndex","setAttribute","copy","source","Object","assign","toJSON","data","fromJSON","geometryShapes","j","jl","uuid"],"sources":["node_modules/three/src/geometries/ShapeGeometry.js"],"sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Shape } from '../extras/core/Shape.js';\nimport { ShapeUtils } from '../extras/ShapeUtils.js';\nimport { Vector2 } from '../math/Vector2.js';\n\n/**\n * Creates an one-sided polygonal geometry from one or more path shapes.\n *\n * ```js\n * const arcShape = new THREE.Shape()\n *\t.moveTo( 5, 1 )\n *\t.absarc( 1, 1, 4, 0, Math.PI * 2, false );\n *\n * const geometry = new THREE.ShapeGeometry( arcShape );\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00, side: THREE.DoubleSide } );\n * const mesh = new THREE.Mesh( geometry, material ) ;\n * scene.add( mesh );\n * ```\n *\n * @augments BufferGeometry\n */\nclass ShapeGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new shape geometry.\n\t *\n\t * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.\n\t * @param {number} [curveSegments=12] - Number of segments per shape.\n\t */\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\t/**\n\t\t * Holds the constructor parameters that have been\n\t\t * used to generate the geometry. Any modification\n\t\t * after instantiation does not change the geometry.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\t/**\n\t * Factory method for creating an instance of this class from the given\n\t * JSON object.\n\t *\n\t * @param {Object} data - A JSON object representing the serialized geometry.\n\t * @param {Array<Shape>} shapes - An array of shapes.\n\t * @return {ShapeGeometry} A new instance.\n\t */\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nexport { ShapeGeometry };\n"],"mappings":"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","ignoreList":[]}