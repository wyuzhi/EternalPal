import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";class SphereGeometry extends BufferGeometry{constructor(t=1,e=32,r=16,h=0,s=2*Math.PI,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:r,phiStart:h,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),r=Math.max(2,Math.floor(r));const i=Math.min(o+a,Math.PI);let n=0;const u=[],p=new Vector3,m=new Vector3,f=[],c=[],l=[],M=[];for(let f=0;f<=r;f++){const y=[],S=f/r;let g=0;0===f&&0===o?g=.5/e:f===r&&i===Math.PI&&(g=-.5/e);for(let r=0;r<=e;r++){const i=r/e;p.x=-t*Math.cos(h+i*s)*Math.sin(o+S*a),p.y=t*Math.cos(o+S*a),p.z=t*Math.sin(h+i*s)*Math.sin(o+S*a),c.push(p.x,p.y,p.z),m.copy(p).normalize(),l.push(m.x,m.y,m.z),M.push(i+g,1-S),y.push(n++)}u.push(y)}for(let t=0;t<r;t++)for(let h=0;h<e;h++){const e=u[t][h+1],s=u[t][h],a=u[t+1][h],n=u[t+1][h+1];(0!==t||o>0)&&f.push(e,s,n),(t!==r-1||i<Math.PI)&&f.push(s,a,n)}this.setIndex(f),this.setAttribute("position",new Float32BufferAttribute(c,3)),this.setAttribute("normal",new Float32BufferAttribute(l,3)),this.setAttribute("uv",new Float32BufferAttribute(M,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new SphereGeometry(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}export{SphereGeometry};
//# sourceMappingURL=SphereGeometry.js.map