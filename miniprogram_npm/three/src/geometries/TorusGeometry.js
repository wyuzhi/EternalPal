import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";class TorusGeometry extends BufferGeometry{constructor(t=1,e=.4,r=12,s=48,o=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:r,tubularSegments:s,arc:o},r=Math.floor(r),s=Math.floor(s);const u=[],a=[],i=[],f=[],h=new Vector3,n=new Vector3,c=new Vector3;for(let u=0;u<=r;u++)for(let m=0;m<=s;m++){const p=m/s*o,l=u/r*Math.PI*2;n.x=(t+e*Math.cos(l))*Math.cos(p),n.y=(t+e*Math.cos(l))*Math.sin(p),n.z=e*Math.sin(l),a.push(n.x,n.y,n.z),h.x=t*Math.cos(p),h.y=t*Math.sin(p),c.subVectors(n,h).normalize(),i.push(c.x,c.y,c.z),f.push(m/s),f.push(u/r)}for(let t=1;t<=r;t++)for(let e=1;e<=s;e++){const r=(s+1)*t+e-1,o=(s+1)*(t-1)+e-1,a=(s+1)*(t-1)+e,i=(s+1)*t+e;u.push(r,o,i),u.push(o,a,i)}this.setIndex(u),this.setAttribute("position",new Float32BufferAttribute(a,3)),this.setAttribute("normal",new Float32BufferAttribute(i,3)),this.setAttribute("uv",new Float32BufferAttribute(f,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new TorusGeometry(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}export{TorusGeometry};
//# sourceMappingURL=TorusGeometry.js.map