import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";class TorusKnotGeometry extends BufferGeometry{constructor(t=1,e=.4,r=64,o=8,s=2,u=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:r,radialSegments:o,p:s,q:u},r=Math.floor(r),o=Math.floor(o);const n=[],a=[],c=[],i=[],f=new Vector3,m=new Vector3,h=new Vector3,p=new Vector3,l=new Vector3,y=new Vector3,b=new Vector3;for(let n=0;n<=r;++n){const w=n/r*s*Math.PI*2;V(w,s,u,t,h),V(w+.01,s,u,t,p),y.subVectors(p,h),b.addVectors(p,h),l.crossVectors(y,b),b.crossVectors(l,y),l.normalize(),b.normalize();for(let t=0;t<=o;++t){const s=t/o*Math.PI*2,u=-e*Math.cos(s),p=e*Math.sin(s);f.x=h.x+(u*b.x+p*l.x),f.y=h.y+(u*b.y+p*l.y),f.z=h.z+(u*b.z+p*l.z),a.push(f.x,f.y,f.z),m.subVectors(f,h).normalize(),c.push(m.x,m.y,m.z),i.push(n/r),i.push(t/o)}}for(let t=1;t<=r;t++)for(let e=1;e<=o;e++){const r=(o+1)*(t-1)+(e-1),s=(o+1)*t+(e-1),u=(o+1)*t+e,a=(o+1)*(t-1)+e;n.push(r,s,a),n.push(s,u,a)}function V(t,e,r,o,s){const u=Math.cos(t),n=Math.sin(t),a=r/e*t,c=Math.cos(a);s.x=o*(2+c)*.5*u,s.y=o*(2+c)*n*.5,s.z=o*Math.sin(a)*.5}this.setIndex(n),this.setAttribute("position",new Float32BufferAttribute(a,3)),this.setAttribute("normal",new Float32BufferAttribute(c,3)),this.setAttribute("uv",new Float32BufferAttribute(i,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new TorusKnotGeometry(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}export{TorusKnotGeometry};
//# sourceMappingURL=TorusKnotGeometry.js.map