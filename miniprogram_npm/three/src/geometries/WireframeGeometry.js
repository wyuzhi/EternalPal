import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{Vector3}from"../math/Vector3.js";class WireframeGeometry extends BufferGeometry{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],r=new Set,o=new Vector3,s=new Vector3;if(null!==t.index){const u=t.attributes.position,i=t.index;let f=t.groups;0===f.length&&(f=[{start:0,count:i.count,materialIndex:0}]);for(let t=0,n=f.length;t<n;++t){const n=f[t],m=n.start;for(let t=m,f=m+n.count;t<f;t+=3)for(let f=0;f<3;f++){const n=i.getX(t+f),m=i.getX(t+(f+1)%3);o.fromBufferAttribute(u,n),s.fromBufferAttribute(u,m),!0===isUniqueEdge(o,s,r)&&(e.push(o.x,o.y,o.z),e.push(s.x,s.y,s.z))}}}else{const u=t.attributes.position;for(let t=0,i=u.count/3;t<i;t++)for(let i=0;i<3;i++){const f=3*t+i,n=3*t+(i+1)%3;o.fromBufferAttribute(u,f),s.fromBufferAttribute(u,n),!0===isUniqueEdge(o,s,r)&&(e.push(o.x,o.y,o.z),e.push(s.x,s.y,s.z))}}this.setAttribute("position",new Float32BufferAttribute(e,3))}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}function isUniqueEdge(t,e,r){const o=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,s=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==r.has(o)&&!0!==r.has(s)&&(r.add(o),r.add(s),!0)}export{WireframeGeometry};
//# sourceMappingURL=WireframeGeometry.js.map