{"version":3,"file":"node_modules/three/src/helpers/AxesHelper.js","names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","AxesHelper","constructor","size","vertices","geometry","setAttribute","super","vertexColors","toneMapped","this","type","setColors","xAxisColor","yAxisColor","zAxisColor","color","array","attributes","set","toArray","needsUpdate","dispose","material"],"sources":["node_modules/three/src/helpers/AxesHelper.js"],"sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * An axis object to visualize the 3 axes in a simple way.\n * The X axis is red. The Y axis is green. The Z axis is blue.\n *\n * ```js\n * const axesHelper = new THREE.AxesHelper( 5 );\n * scene.add( axesHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass AxesHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new axes helper.\n\t *\n\t * @param {number} [size=1] - Size of the lines representing the axes.\n\t */\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\t/**\n\t * Defines the colors of the axes helper.\n\t *\n\t * @param {number|Color|string} xAxisColor - The color for the x axis.\n\t * @param {number|Color|string} yAxisColor - The color for the y axis.\n\t * @param {number|Color|string} zAxisColor - The color for the z axis.\n\t * @return {AxesHelper} A reference to this axes helper.\n\t */\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nexport { AxesHelper };\n"],"mappings":"OAASA,iBAAoB,oCACpBC,sBAAyB,2CACzBC,2BAA8B,oCAC9BC,mBAAsB,mCACtBC,UAAa,mBAatB,MAAMC,mBAAmBL,aAOxB,WAAAM,CAAaC,EAAO,GAEnB,MAAMC,EAAW,CAChB,EAAG,EAAG,EAAGD,EAAM,EAAG,EAClB,EAAG,EAAG,EAAG,EAAGA,EAAM,EAClB,EAAG,EAAG,EAAG,EAAG,EAAGA,GASVE,EAAW,IAAIN,eACrBM,EAASC,aAAc,WAAY,IAAIR,uBAAwBM,EAAU,IACzEC,EAASC,aAAc,QAAS,IAAIR,uBARrB,CACd,EAAG,EAAG,EAAG,EAAG,GAAK,EACjB,EAAG,EAAG,EAAG,GAAK,EAAG,EACjB,EAAG,EAAG,EAAG,EAAG,GAAK,GAKkD,IAIpES,MAAOF,EAFU,IAAIR,kBAAmB,CAAEW,cAAc,EAAMC,YAAY,KAI1EC,KAAKC,KAAO,YAEb,CAUA,SAAAC,CAAWC,EAAYC,EAAYC,GAElC,MAAMC,EAAQ,IAAIhB,MACZiB,EAAQP,KAAKL,SAASa,WAAWF,MAAMC,MAgB7C,OAdAD,EAAMG,IAAKN,GACXG,EAAMI,QAASH,EAAO,GACtBD,EAAMI,QAASH,EAAO,GAEtBD,EAAMG,IAAKL,GACXE,EAAMI,QAASH,EAAO,GACtBD,EAAMI,QAASH,EAAO,GAEtBD,EAAMG,IAAKJ,GACXC,EAAMI,QAASH,EAAO,IACtBD,EAAMI,QAASH,EAAO,IAEtBP,KAAKL,SAASa,WAAWF,MAAMK,aAAc,EAEtCX,IAER,CAMA,OAAAY,GAECZ,KAAKL,SAASiB,UACdZ,KAAKa,SAASD,SAEf,SAKQrB","ignoreList":[]}