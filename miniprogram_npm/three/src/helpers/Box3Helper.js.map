{"version":3,"file":"node_modules/three/src/helpers/Box3Helper.js","names":["LineSegments","LineBasicMaterial","BufferAttribute","Float32BufferAttribute","BufferGeometry","Box3Helper","constructor","box","color","indices","Uint16Array","geometry","setIndex","setAttribute","super","toneMapped","this","type","computeBoundingSphere","updateMatrixWorld","force","isEmpty","getCenter","position","getSize","scale","multiplyScalar","dispose","material"],"sources":["node_modules/three/src/helpers/Box3Helper.js"],"sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { BufferAttribute, Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\n/**\n * A helper object to visualize an instance of {@link Box3}.\n *\n * ```js\n * const box = new THREE.Box3();\n * box.setFromCenterAndSize( new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 2, 1, 3 ) );\n *\n * const helper = new THREE.Box3Helper( box, 0xffff00 );\n * scene.add( helper )\n * ```\n *\n * @augments LineSegments\n */\nclass Box3Helper extends LineSegments {\n\n\t/**\n\t * Constructs a new box3 helper.\n\t *\n\t * @param {Box3} box - The box to visualize.\n\t * @param {number|Color|string} [color=0xffff00] - The box's color.\n\t */\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t/**\n\t\t * The box being visualized.\n\t\t *\n\t\t * @type {Box3}\n\t\t */\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nexport { Box3Helper };\n"],"mappings":"OAASA,iBAAoB,oCACpBC,sBAAyB,2CACzBC,gBAAiBC,2BAA8B,oCAC/CC,mBAAsB,4BAe/B,MAAMC,mBAAmBL,aAQxB,WAAAM,CAAaC,EAAKC,EAAQ,UAEzB,MAAMC,EAAU,IAAIC,YAAa,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIlGC,EAAW,IAAIP,eAErBO,EAASC,SAAU,IAAIV,gBAAiBO,EAAS,IAEjDE,EAASE,aAAc,WAAY,IAAIV,uBANrB,CAAE,EAAG,EAAG,GAAK,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,EAAG,EAAG,GAAK,GAAK,EAAG,GAAK,GAAK,GAAK,GAAK,EAAG,GAAK,GAAK,GAMvC,IAE1EW,MAAOH,EAAU,IAAIV,kBAAmB,CAAEO,MAAOA,EAAOO,YAAY,KAOpEC,KAAKT,IAAMA,EAEXS,KAAKC,KAAO,aAEZD,KAAKL,SAASO,uBAEf,CAEA,iBAAAC,CAAmBC,GAElB,MAAMb,EAAMS,KAAKT,IAEZA,EAAIc,YAETd,EAAIe,UAAWN,KAAKO,UAEpBhB,EAAIiB,QAASR,KAAKS,OAElBT,KAAKS,MAAMC,eAAgB,IAE3BZ,MAAMK,kBAAmBC,GAE1B,CAMA,OAAAO,GAECX,KAAKL,SAASgB,UACdX,KAAKY,SAASD,SAEf,SAIQtB","ignoreList":[]}