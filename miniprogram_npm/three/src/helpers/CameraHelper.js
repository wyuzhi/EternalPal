import{Camera}from"../cameras/Camera.js";import{Vector3}from"../math/Vector3.js";import{LineSegments}from"../objects/LineSegments.js";import{Color}from"../math/Color.js";import{LineBasicMaterial}from"../materials/LineBasicMaterial.js";import{BufferGeometry}from"../core/BufferGeometry.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{WebGLCoordinateSystem,WebGPUCoordinateSystem}from"../constants.js";const _vector=new Vector3,_camera=new Camera;class CameraHelper extends LineSegments{constructor(e){const t=new BufferGeometry,r=new LineBasicMaterial({color:16777215,vertexColors:!0,toneMapped:!1}),s=[],o=[],a={};function n(e,t){i(e),i(t)}function i(e){s.push(0,0,0),o.push(0,0,0),void 0===a[e]&&(a[e]=[]),a[e].push(s.length/3-1)}n("n1","n2"),n("n2","n4"),n("n4","n3"),n("n3","n1"),n("f1","f2"),n("f2","f4"),n("f4","f3"),n("f3","f1"),n("n1","f1"),n("n2","f2"),n("n3","f3"),n("n4","f4"),n("p","n1"),n("p","n2"),n("p","n3"),n("p","n4"),n("u1","u2"),n("u2","u3"),n("u3","u1"),n("c","t"),n("p","c"),n("cn1","cn2"),n("cn3","cn4"),n("cf1","cf2"),n("cf3","cf4"),t.setAttribute("position",new Float32BufferAttribute(s,3)),t.setAttribute("color",new Float32BufferAttribute(o,3)),super(t,r),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update();const c=new Color(16755200),m=new Color(16711680),b=new Color(43775),g=new Color(16777215),f=new Color(3355443);this.setColors(c,m,b,g,f)}setColors(e,t,r,s,o){const a=this.geometry.getAttribute("color");return a.setXYZ(0,e.r,e.g,e.b),a.setXYZ(1,e.r,e.g,e.b),a.setXYZ(2,e.r,e.g,e.b),a.setXYZ(3,e.r,e.g,e.b),a.setXYZ(4,e.r,e.g,e.b),a.setXYZ(5,e.r,e.g,e.b),a.setXYZ(6,e.r,e.g,e.b),a.setXYZ(7,e.r,e.g,e.b),a.setXYZ(8,e.r,e.g,e.b),a.setXYZ(9,e.r,e.g,e.b),a.setXYZ(10,e.r,e.g,e.b),a.setXYZ(11,e.r,e.g,e.b),a.setXYZ(12,e.r,e.g,e.b),a.setXYZ(13,e.r,e.g,e.b),a.setXYZ(14,e.r,e.g,e.b),a.setXYZ(15,e.r,e.g,e.b),a.setXYZ(16,e.r,e.g,e.b),a.setXYZ(17,e.r,e.g,e.b),a.setXYZ(18,e.r,e.g,e.b),a.setXYZ(19,e.r,e.g,e.b),a.setXYZ(20,e.r,e.g,e.b),a.setXYZ(21,e.r,e.g,e.b),a.setXYZ(22,e.r,e.g,e.b),a.setXYZ(23,e.r,e.g,e.b),a.setXYZ(24,t.r,t.g,t.b),a.setXYZ(25,t.r,t.g,t.b),a.setXYZ(26,t.r,t.g,t.b),a.setXYZ(27,t.r,t.g,t.b),a.setXYZ(28,t.r,t.g,t.b),a.setXYZ(29,t.r,t.g,t.b),a.setXYZ(30,t.r,t.g,t.b),a.setXYZ(31,t.r,t.g,t.b),a.setXYZ(32,r.r,r.g,r.b),a.setXYZ(33,r.r,r.g,r.b),a.setXYZ(34,r.r,r.g,r.b),a.setXYZ(35,r.r,r.g,r.b),a.setXYZ(36,r.r,r.g,r.b),a.setXYZ(37,r.r,r.g,r.b),a.setXYZ(38,s.r,s.g,s.b),a.setXYZ(39,s.r,s.g,s.b),a.setXYZ(40,o.r,o.g,o.b),a.setXYZ(41,o.r,o.g,o.b),a.setXYZ(42,o.r,o.g,o.b),a.setXYZ(43,o.r,o.g,o.b),a.setXYZ(44,o.r,o.g,o.b),a.setXYZ(45,o.r,o.g,o.b),a.setXYZ(46,o.r,o.g,o.b),a.setXYZ(47,o.r,o.g,o.b),a.setXYZ(48,o.r,o.g,o.b),a.setXYZ(49,o.r,o.g,o.b),a.needsUpdate=!0,this}update(){const e=this.geometry,t=this.pointMap;let r,s;if(_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),!0===this.camera.reversedDepth)r=1,s=0;else if(this.camera.coordinateSystem===WebGLCoordinateSystem)r=-1,s=1;else{if(this.camera.coordinateSystem!==WebGPUCoordinateSystem)throw new Error("THREE.CameraHelper.update(): Invalid coordinate system: "+this.camera.coordinateSystem);r=0,s=1}setPoint("c",t,e,_camera,0,0,r),setPoint("t",t,e,_camera,0,0,s),setPoint("n1",t,e,_camera,-1,-1,r),setPoint("n2",t,e,_camera,1,-1,r),setPoint("n3",t,e,_camera,-1,1,r),setPoint("n4",t,e,_camera,1,1,r),setPoint("f1",t,e,_camera,-1,-1,s),setPoint("f2",t,e,_camera,1,-1,s),setPoint("f3",t,e,_camera,-1,1,s),setPoint("f4",t,e,_camera,1,1,s),setPoint("u1",t,e,_camera,.7,1.1,r),setPoint("u2",t,e,_camera,-.7,1.1,r),setPoint("u3",t,e,_camera,0,2,r),setPoint("cf1",t,e,_camera,-1,0,s),setPoint("cf2",t,e,_camera,1,0,s),setPoint("cf3",t,e,_camera,0,-1,s),setPoint("cf4",t,e,_camera,0,1,s),setPoint("cn1",t,e,_camera,-1,0,r),setPoint("cn2",t,e,_camera,1,0,r),setPoint("cn3",t,e,_camera,0,-1,r),setPoint("cn4",t,e,_camera,0,1,r),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function setPoint(e,t,r,s,o,a,n){_vector.set(o,a,n).unproject(s);const i=t[e];if(void 0!==i){const e=r.getAttribute("position");for(let t=0,r=i.length;t<r;t++)e.setXYZ(i[t],_vector.x,_vector.y,_vector.z)}}export{CameraHelper};
//# sourceMappingURL=CameraHelper.js.map