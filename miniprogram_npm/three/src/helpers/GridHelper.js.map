{"version":3,"file":"node_modules/three/src/helpers/GridHelper.js","names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","GridHelper","constructor","size","divisions","color1","color2","center","step","halfSize","vertices","colors","i","j","k","push","color","toArray","geometry","setAttribute","super","vertexColors","toneMapped","this","type","dispose","material"],"sources":["node_modules/three/src/helpers/GridHelper.js"],"sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * The helper is an object to define grids. Grids are two-dimensional\n * arrays of lines.\n *\n * ```js\n * const size = 10;\n * const divisions = 10;\n *\n * const gridHelper = new THREE.GridHelper( size, divisions );\n * scene.add( gridHelper );\n * ```\n *\n * @augments LineSegments\n */\nclass GridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new grid helper.\n\t *\n\t * @param {number} [size=10] - The size of the grid.\n\t * @param {number} [divisions=10] - The number of divisions across the grid.\n\t * @param {number|Color|string} [color1=0x444444] - The color of the center line.\n\t * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.\n\t */\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nexport { GridHelper };\n"],"mappings":"OAASA,iBAAoB,oCACpBC,sBAAyB,2CACzBC,2BAA8B,oCAC9BC,mBAAsB,mCACtBC,UAAa,mBAgBtB,MAAMC,mBAAmBL,aAUxB,WAAAM,CAAaC,EAAO,GAAIC,EAAY,GAAIC,EAAS,QAAUC,EAAS,SAEnED,EAAS,IAAIL,MAAOK,GACpBC,EAAS,IAAIN,MAAOM,GAEpB,MAAMC,EAASH,EAAY,EACrBI,EAAOL,EAAOC,EACdK,EAAWN,EAAO,EAElBO,EAAW,GAAIC,EAAS,GAE9B,IAAM,IAAIC,EAAI,EAAGC,EAAI,EAAGC,GAAML,EAAUG,GAAKR,EAAWQ,IAAME,GAAKN,EAAO,CAEzEE,EAASK,MAAQN,EAAU,EAAGK,EAAGL,EAAU,EAAGK,GAC9CJ,EAASK,KAAMD,EAAG,GAAKL,EAAUK,EAAG,EAAGL,GAEvC,MAAMO,EAAQJ,IAAML,EAASF,EAASC,EAEtCU,EAAMC,QAASN,EAAQE,GAAKA,GAAK,EACjCG,EAAMC,QAASN,EAAQE,GAAKA,GAAK,EACjCG,EAAMC,QAASN,EAAQE,GAAKA,GAAK,EACjCG,EAAMC,QAASN,EAAQE,GAAKA,GAAK,CAElC,CAEA,MAAMK,EAAW,IAAInB,eACrBmB,EAASC,aAAc,WAAY,IAAIrB,uBAAwBY,EAAU,IACzEQ,EAASC,aAAc,QAAS,IAAIrB,uBAAwBa,EAAQ,IAIpES,MAAOF,EAFU,IAAIrB,kBAAmB,CAAEwB,cAAc,EAAMC,YAAY,KAI1EC,KAAKC,KAAO,YAEb,CAMA,OAAAC,GAECF,KAAKL,SAASO,UACdF,KAAKG,SAASD,SAEf,SAKQxB","ignoreList":[]}