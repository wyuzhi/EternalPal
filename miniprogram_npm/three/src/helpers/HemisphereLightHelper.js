import{Vector3}from"../math/Vector3.js";import{Color}from"../math/Color.js";import{Object3D}from"../core/Object3D.js";import{Mesh}from"../objects/Mesh.js";import{MeshBasicMaterial}from"../materials/MeshBasicMaterial.js";import{OctahedronGeometry}from"../geometries/OctahedronGeometry.js";import{BufferAttribute}from"../core/BufferAttribute.js";const _vector=new Vector3,_color1=new Color,_color2=new Color;class HemisphereLightHelper extends Object3D{constructor(t,e,o){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=o,this.type="HemisphereLightHelper";const r=new OctahedronGeometry(e);r.rotateY(.5*Math.PI),this.material=new MeshBasicMaterial({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const i=r.getAttribute("position"),s=new Float32Array(3*i.count);r.setAttribute("color",new BufferAttribute(s,3)),this.add(new Mesh(r,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");_color1.copy(this.light.color),_color2.copy(this.light.groundColor);for(let t=0,o=e.count;t<o;t++){const r=t<o/2?_color1:_color2;e.setXYZ(t,r.r,r.g,r.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(_vector.setFromMatrixPosition(this.light.matrixWorld).negate())}}export{HemisphereLightHelper};
//# sourceMappingURL=HemisphereLightHelper.js.map