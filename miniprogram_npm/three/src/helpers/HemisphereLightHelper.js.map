{"version":3,"file":"node_modules/three/src/helpers/HemisphereLightHelper.js","names":["Vector3","Color","Object3D","Mesh","MeshBasicMaterial","OctahedronGeometry","BufferAttribute","_vector","_color1","_color2","HemisphereLightHelper","constructor","light","size","color","super","this","matrix","matrixWorld","matrixAutoUpdate","type","geometry","rotateY","Math","PI","material","wireframe","fog","toneMapped","undefined","vertexColors","position","getAttribute","colors","Float32Array","count","setAttribute","add","update","dispose","children","mesh","set","copy","groundColor","i","l","setXYZ","r","g","b","needsUpdate","updateWorldMatrix","lookAt","setFromMatrixPosition","negate"],"sources":["node_modules/three/src/helpers/HemisphereLightHelper.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Color } from '../math/Color.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { OctahedronGeometry } from '../geometries/OctahedronGeometry.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\n/**\n * Creates a visual aid consisting of a spherical mesh for a\n * given {@link HemisphereLight}.\n *\n * ```js\n * const light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 );\n * const helper = new THREE.HemisphereLightHelper( light, 5 );\n * scene.add( helper );\n * ```\n *\n * @augments Object3D\n */\nclass HemisphereLightHelper extends Object3D {\n\n\t/**\n\t * Constructs a new hemisphere light helper.\n\t *\n\t * @param {HemisphereLight} light - The light to be visualized.\n\t * @param {number} [size=1] - The size of the mesh used to visualize the light.\n\t * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take\n\t * the color of the light.\n\t */\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The light being visualized.\n\t\t *\n\t\t * @type {HemisphereLight}\n\t\t */\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t/**\n\t\t * The color parameter passed in the constructor.\n\t\t * If not set, the helper will take the color of the light.\n\t\t *\n\t\t * @type {number|Color|string}\n\t\t */\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the helper to match the position and direction of the\n\t * light being visualized.\n\t */\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\n\nexport { HemisphereLightHelper };\n"],"mappings":"OAASA,YAAe,4BACfC,UAAa,0BACbC,aAAgB,6BAChBC,SAAY,4BACZC,sBAAyB,2CACzBC,uBAA0B,6CAC1BC,oBAAuB,6BAEhC,MAAMC,QAAwB,IAAIP,QAC5BQ,QAAwB,IAAIP,MAC5BQ,QAAwB,IAAIR,MAclC,MAAMS,8BAA8BR,SAUnC,WAAAS,CAAaC,EAAOC,EAAMC,GAEzBC,QAOAC,KAAKJ,MAAQA,EAEbI,KAAKC,OAASL,EAAMM,YACpBF,KAAKG,kBAAmB,EAQxBH,KAAKF,MAAQA,EAEbE,KAAKI,KAAO,wBAEZ,MAAMC,EAAW,IAAIhB,mBAAoBQ,GACzCQ,EAASC,QAAmB,GAAVC,KAAKC,IAEvBR,KAAKS,SAAW,IAAIrB,kBAAmB,CAAEsB,WAAW,EAAMC,KAAK,EAAOC,YAAY,SAC9DC,IAAfb,KAAKF,QAAsBE,KAAKS,SAASK,cAAe,GAE7D,MAAMC,EAAWV,EAASW,aAAc,YAClCC,EAAS,IAAIC,aAA+B,EAAjBH,EAASI,OAE1Cd,EAASe,aAAc,QAAS,IAAI9B,gBAAiB2B,EAAQ,IAE7DjB,KAAKqB,IAAK,IAAIlC,KAAMkB,EAAUL,KAAKS,WAEnCT,KAAKsB,QAEN,CAMA,OAAAC,GAECvB,KAAKwB,SAAU,GAAInB,SAASkB,UAC5BvB,KAAKwB,SAAU,GAAIf,SAASc,SAE7B,CAMA,MAAAD,GAEC,MAAMG,EAAOzB,KAAKwB,SAAU,GAE5B,QAAoBX,IAAfb,KAAKF,MAETE,KAAKS,SAASX,MAAM4B,IAAK1B,KAAKF,WAExB,CAEN,MAAMmB,EAASQ,EAAKpB,SAASW,aAAc,SAE3CxB,QAAQmC,KAAM3B,KAAKJ,MAAME,OACzBL,QAAQkC,KAAM3B,KAAKJ,MAAMgC,aAEzB,IAAM,IAAIC,EAAI,EAAGC,EAAIb,EAAOE,MAAOU,EAAIC,EAAGD,IAAO,CAEhD,MAAM/B,EAAU+B,EAAMC,EAAI,EAAQtC,QAAUC,QAE5CwB,EAAOc,OAAQF,EAAG/B,EAAMkC,EAAGlC,EAAMmC,EAAGnC,EAAMoC,EAE3C,CAEAjB,EAAOkB,aAAc,CAEtB,CAEAnC,KAAKJ,MAAMwC,mBAAmB,GAAM,GAEpCX,EAAKY,OAAQ9C,QAAQ+C,sBAAuBtC,KAAKJ,MAAMM,aAAcqC,SAEtE,SAKQ7C","ignoreList":[]}