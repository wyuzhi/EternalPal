import{LineSegments}from"../objects/LineSegments.js";import{LineBasicMaterial}from"../materials/LineBasicMaterial.js";import{Float32BufferAttribute}from"../core/BufferAttribute.js";import{BufferGeometry}from"../core/BufferGeometry.js";import{Color}from"../math/Color.js";class PolarGridHelper extends LineSegments{constructor(e=10,t=16,r=8,o=64,s=4473924,i=8947848){s=new Color(s),i=new Color(i);const a=[],n=[];if(t>1)for(let r=0;r<t;r++){const o=r/t*(2*Math.PI),l=Math.sin(o)*e,p=Math.cos(o)*e;a.push(0,0,0),a.push(l,0,p);const f=1&r?s:i;n.push(f.r,f.g,f.b),n.push(f.r,f.g,f.b)}for(let t=0;t<r;t++){const l=1&t?s:i,p=e-e/r*t;for(let e=0;e<o;e++){let t=e/o*(2*Math.PI),r=Math.sin(t)*p,s=Math.cos(t)*p;a.push(r,0,s),n.push(l.r,l.g,l.b),t=(e+1)/o*(2*Math.PI),r=Math.sin(t)*p,s=Math.cos(t)*p,a.push(r,0,s),n.push(l.r,l.g,l.b)}}const l=new BufferGeometry;l.setAttribute("position",new Float32BufferAttribute(a,3)),l.setAttribute("color",new Float32BufferAttribute(n,3));super(l,new LineBasicMaterial({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}export{PolarGridHelper};
//# sourceMappingURL=PolarGridHelper.js.map