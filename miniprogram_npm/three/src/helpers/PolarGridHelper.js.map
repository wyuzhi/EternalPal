{"version":3,"file":"node_modules/three/src/helpers/PolarGridHelper.js","names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","PolarGridHelper","constructor","radius","sectors","rings","divisions","color1","color2","vertices","colors","i","v","Math","PI","x","sin","z","cos","push","color","r","g","b","j","geometry","setAttribute","super","vertexColors","toneMapped","this","type","dispose","material"],"sources":["node_modules/three/src/helpers/PolarGridHelper.js"],"sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * This helper is an object to define polar grids. Grids are\n * two-dimensional arrays of lines.\n *\n * ```js\n * const radius = 10;\n * const sectors = 16;\n * const rings = 8;\n * const divisions = 64;\n *\n * const helper = new THREE.PolarGridHelper( radius, sectors, rings, divisions );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass PolarGridHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new polar grid helper.\n\t *\n\t * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.\n\t * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.\n\t * @param {number} [rings=16] - The number of rings. This can be any positive integer.\n\t * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.\n\t * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.\n\t * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.\n\t */\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nexport { PolarGridHelper };\n"],"mappings":"OAASA,iBAAoB,oCACpBC,sBAAyB,2CACzBC,2BAA8B,oCAC9BC,mBAAsB,mCACtBC,UAAa,mBAkBtB,MAAMC,wBAAwBL,aAY7B,WAAAM,CAAaC,EAAS,GAAIC,EAAU,GAAIC,EAAQ,EAAGC,EAAY,GAAIC,EAAS,QAAUC,EAAS,SAE9FD,EAAS,IAAIP,MAAOO,GACpBC,EAAS,IAAIR,MAAOQ,GAEpB,MAAMC,EAAW,GACXC,EAAS,GAIf,GAAKN,EAAU,EAEd,IAAM,IAAIO,EAAI,EAAGA,EAAIP,EAASO,IAAO,CAEpC,MAAMC,EAAMD,EAAIP,GAAwB,EAAVS,KAAKC,IAE7BC,EAAIF,KAAKG,IAAKJ,GAAMT,EACpBc,EAAIJ,KAAKK,IAAKN,GAAMT,EAE1BM,EAASU,KAAM,EAAG,EAAG,GACrBV,EAASU,KAAMJ,EAAG,EAAGE,GAErB,MAAMG,EAAc,EAAJT,EAAUJ,EAASC,EAEnCE,EAAOS,KAAMC,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,GACrCb,EAAOS,KAAMC,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,EAEtC,CAMD,IAAM,IAAIZ,EAAI,EAAGA,EAAIN,EAAOM,IAAO,CAElC,MAAMS,EAAc,EAAJT,EAAUJ,EAASC,EAE7Ba,EAAIlB,EAAWA,EAASE,EAAQM,EAEtC,IAAM,IAAIa,EAAI,EAAGA,EAAIlB,EAAWkB,IAAO,CAItC,IAAIZ,EAAMY,EAAIlB,GAA0B,EAAVO,KAAKC,IAE/BC,EAAIF,KAAKG,IAAKJ,GAAMS,EACpBJ,EAAIJ,KAAKK,IAAKN,GAAMS,EAExBZ,EAASU,KAAMJ,EAAG,EAAGE,GACrBP,EAAOS,KAAMC,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,GAIrCX,GAAQY,EAAI,GAAMlB,GAA0B,EAAVO,KAAKC,IAEvCC,EAAIF,KAAKG,IAAKJ,GAAMS,EACpBJ,EAAIJ,KAAKK,IAAKN,GAAMS,EAEpBZ,EAASU,KAAMJ,EAAG,EAAGE,GACrBP,EAAOS,KAAMC,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,EAEtC,CAED,CAEA,MAAME,EAAW,IAAI1B,eACrB0B,EAASC,aAAc,WAAY,IAAI5B,uBAAwBW,EAAU,IACzEgB,EAASC,aAAc,QAAS,IAAI5B,uBAAwBY,EAAQ,IAIpEiB,MAAOF,EAFU,IAAI5B,kBAAmB,CAAE+B,cAAc,EAAMC,YAAY,KAI1EC,KAAKC,KAAO,iBAEb,CAMA,OAAAC,GAECF,KAAKL,SAASO,UACdF,KAAKG,SAASD,SAEf,SAKQ/B","ignoreList":[]}