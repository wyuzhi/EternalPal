{"version":3,"file":"node_modules/three/src/helpers/SkeletonHelper.js","names":["LineSegments","Matrix4","LineBasicMaterial","Color","Vector3","BufferGeometry","Float32BufferAttribute","_vector","_boneMatrix","_matrixWorldInv","SkeletonHelper","constructor","object","bones","getBoneList","geometry","vertices","colors","i","length","bone","parent","isBone","push","setAttribute","super","vertexColors","depthTest","depthWrite","toneMapped","transparent","this","isSkeletonHelper","type","root","matrix","matrixWorld","matrixAutoUpdate","color1","color2","setColors","updateMatrixWorld","force","position","getAttribute","copy","invert","j","multiplyMatrices","setFromMatrixPosition","setXYZ","x","y","z","needsUpdate","colorAttribute","count","r","g","b","dispose","material","boneList","children"],"sources":["node_modules/three/src/helpers/SkeletonHelper.js"],"sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Color } from '../math/Color.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n/**\n * A helper object to assist with visualizing a {@link Skeleton}.\n *\n * ```js\n * const helper = new THREE.SkeletonHelper( skinnedMesh );\n * scene.add( helper );\n * ```\n *\n * @augments LineSegments\n */\nclass SkeletonHelper extends LineSegments {\n\n\t/**\n\t * Constructs a new skeleton helper.\n\t *\n\t * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object\n\t * can be used if it represents a hierarchy of bones (see {@link Bone}).\n\t */\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( 0, 0, 0 );\n\t\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\t/**\n\t\t * The object being visualized.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.root = object;\n\n\t\t/**\n\t\t * The list of bones that the helper visualizes.\n\t\t *\n\t\t * @type {Array<Bone>}\n\t\t */\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\t// colors\n\n\t\tconst color1 = new Color( 0x0000ff );\n\t\tconst color2 = new Color( 0x00ff00 );\n\n\t\tthis.setColors( color1, color2 );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector.x, _vector.y, _vector.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector.x, _vector.y, _vector.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Defines the colors of the helper.\n\t *\n\t * @param {Color} color1 - The first line color for each bone.\n\t * @param {Color} color2 - The second line color for each bone.\n\t * @return {SkeletonHelper} A reference to this helper.\n\t */\n\tsetColors( color1, color2 ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\tfor ( let i = 0; i < colorAttribute.count; i += 2 ) {\n\n\t\t\tcolorAttribute.setXYZ( i, color1.r, color1.g, color1.b );\n\t\t\tcolorAttribute.setXYZ( i + 1, color2.r, color2.g, color2.b );\n\n\t\t}\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push( ...getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\n\nexport { SkeletonHelper };\n"],"mappings":"OAASA,iBAAoB,oCACpBC,YAAe,4BACfC,sBAAyB,2CACzBC,UAAa,0BACbC,YAAe,4BACfC,mBAAsB,mCACtBC,2BAA8B,6BAEvC,MAAMC,QAAwB,IAAIH,QAC5BI,YAA4B,IAAIP,QAChCQ,gBAAgC,IAAIR,QAY1C,MAAMS,uBAAuBV,aAQ5B,WAAAW,CAAaC,GAEZ,MAAMC,EAAQC,YAAaF,GAErBG,EAAW,IAAIV,eAEfW,EAAW,GACXC,EAAS,GAEf,IAAM,IAAIC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAO,CAEzC,MAAME,EAAOP,EAAOK,GAEfE,EAAKC,QAAUD,EAAKC,OAAOC,SAE/BN,EAASO,KAAM,EAAG,EAAG,GACrBP,EAASO,KAAM,EAAG,EAAG,GACrBN,EAAOM,KAAM,EAAG,EAAG,GACnBN,EAAOM,KAAM,EAAG,EAAG,GAIrB,CAEAR,EAASS,aAAc,WAAY,IAAIlB,uBAAwBU,EAAU,IACzED,EAASS,aAAc,QAAS,IAAIlB,uBAAwBW,EAAQ,IAIpEQ,MAAOV,EAFU,IAAIb,kBAAmB,CAAEwB,cAAc,EAAMC,WAAW,EAAOC,YAAY,EAAOC,YAAY,EAAOC,aAAa,KAWnIC,KAAKC,kBAAmB,EAExBD,KAAKE,KAAO,iBAOZF,KAAKG,KAAOtB,EAOZmB,KAAKlB,MAAQA,EAEbkB,KAAKI,OAASvB,EAAOwB,YACrBL,KAAKM,kBAAmB,EAIxB,MAAMC,EAAS,IAAInC,MAAO,KACpBoC,EAAS,IAAIpC,MAAO,OAE1B4B,KAAKS,UAAWF,EAAQC,EAEzB,CAEA,iBAAAE,CAAmBC,GAElB,MAAM7B,EAAQkB,KAAKlB,MAEbE,EAAWgB,KAAKhB,SAChB4B,EAAW5B,EAAS6B,aAAc,YAExCnC,gBAAgBoC,KAAMd,KAAKG,KAAKE,aAAcU,SAE9C,IAAM,IAAI5B,EAAI,EAAG6B,EAAI,EAAG7B,EAAIL,EAAMM,OAAQD,IAAO,CAEhD,MAAME,EAAOP,EAAOK,GAEfE,EAAKC,QAAUD,EAAKC,OAAOC,SAE/Bd,YAAYwC,iBAAkBvC,gBAAiBW,EAAKgB,aACpD7B,QAAQ0C,sBAAuBzC,aAC/BmC,EAASO,OAAQH,EAAGxC,QAAQ4C,EAAG5C,QAAQ6C,EAAG7C,QAAQ8C,GAElD7C,YAAYwC,iBAAkBvC,gBAAiBW,EAAKC,OAAOe,aAC3D7B,QAAQ0C,sBAAuBzC,aAC/BmC,EAASO,OAAQH,EAAI,EAAGxC,QAAQ4C,EAAG5C,QAAQ6C,EAAG7C,QAAQ8C,GAEtDN,GAAK,EAIP,CAEAhC,EAAS6B,aAAc,YAAaU,aAAc,EAElD7B,MAAMgB,kBAAmBC,EAE1B,CASA,SAAAF,CAAWF,EAAQC,GAElB,MACMgB,EADWxB,KAAKhB,SACU6B,aAAc,SAE9C,IAAM,IAAI1B,EAAI,EAAGA,EAAIqC,EAAeC,MAAOtC,GAAK,EAE/CqC,EAAeL,OAAQhC,EAAGoB,EAAOmB,EAAGnB,EAAOoB,EAAGpB,EAAOqB,GACrDJ,EAAeL,OAAQhC,EAAI,EAAGqB,EAAOkB,EAAGlB,EAAOmB,EAAGnB,EAAOoB,GAM1D,OAFAJ,EAAeD,aAAc,EAEtBvB,IAER,CAMA,OAAA6B,GAEC7B,KAAKhB,SAAS6C,UACd7B,KAAK8B,SAASD,SAEf,EAKD,SAAS9C,YAAaF,GAErB,MAAMkD,EAAW,IAEM,IAAlBlD,EAAOU,QAEXwC,EAASvC,KAAMX,GAIhB,IAAM,IAAIM,EAAI,EAAGA,EAAIN,EAAOmD,SAAS5C,OAAQD,IAE5C4C,EAASvC,QAAST,YAAaF,EAAOmD,SAAU7C,KAIjD,OAAO4C,CAER,QAGSpD","ignoreList":[]}