{"version":3,"file":"node_modules/three/src/lights/DirectionalLight.js","names":["Light","DirectionalLightShadow","Object3D","DirectionalLight","constructor","color","intensity","super","this","isDirectionalLight","type","position","copy","DEFAULT_UP","updateMatrix","target","shadow","dispose","source","clone"],"sources":["node_modules/three/src/lights/DirectionalLight.js"],"sourcesContent":["import { Light } from './Light.js';\nimport { DirectionalLightShadow } from './DirectionalLightShadow.js';\nimport { Object3D } from '../core/Object3D.js';\n\n/**\n * A light that gets emitted in a specific direction. This light will behave\n * as though it is infinitely far away and the rays produced from it are all\n * parallel. The common use case for this is to simulate daylight; the sun is\n * far enough away that its position can be considered to be infinite, and\n * all light rays coming from it are parallel.\n *\n * A common point of confusion for directional lights is that setting the\n * rotation has no effect. This is because three.js's DirectionalLight is the\n * equivalent to what is often called a 'Target Direct Light' in other\n * applications.\n *\n * This means that its direction is calculated as pointing from the light's\n * {@link Object3D#position} to the {@link DirectionalLight#target} position\n * (as opposed to a 'Free Direct Light' that just has a rotation\n * component).\n *\n * This light can cast shadows - see the {@link DirectionalLightShadow} for details.\n *\n * ```js\n * // White directional light at half intensity shining from the top.\n * const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\n * scene.add( directionalLight );\n * ```\n *\n * @augments Light\n */\nclass DirectionalLight extends Light {\n\n\t/**\n\t * Constructs a new directional light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\t/**\n\t\t * The directional light points from its position to the\n\t\t * target's position.\n\t\t *\n\t\t * For the target's position to be changed to anything other\n\t\t * than the default, it must be added to the scene.\n\t\t *\n\t\t * It is also possible to set the target to be another 3D object\n\t\t * in the scene. The light will now track the target object.\n\t\t *\n\t\t * @type {Object3D}\n\t\t */\n\t\tthis.target = new Object3D();\n\n\t\t/**\n\t\t * This property holds the light's shadow configuration.\n\t\t *\n\t\t * @type {DirectionalLightShadow}\n\t\t */\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { DirectionalLight };\n"],"mappings":"OAASA,UAAa,oBACbC,2BAA8B,qCAC9BC,aAAgB,sBA6BzB,MAAMC,yBAAyBH,MAQ9B,WAAAI,CAAaC,EAAOC,GAEnBC,MAAOF,EAAOC,GASdE,KAAKC,oBAAqB,EAE1BD,KAAKE,KAAO,mBAEZF,KAAKG,SAASC,KAAMV,SAASW,YAC7BL,KAAKM,eAcLN,KAAKO,OAAS,IAAIb,SAOlBM,KAAKQ,OAAS,IAAIf,sBAEnB,CAEA,OAAAgB,GAECT,KAAKQ,OAAOC,SAEb,CAEA,IAAAL,CAAMM,GAOL,OALAX,MAAMK,KAAMM,GAEZV,KAAKO,OAASG,EAAOH,OAAOI,QAC5BX,KAAKQ,OAASE,EAAOF,OAAOG,QAErBX,IAER,SAIQL","ignoreList":[]}