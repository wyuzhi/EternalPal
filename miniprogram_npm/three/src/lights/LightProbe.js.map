{"version":3,"file":"node_modules/three/src/lights/LightProbe.js","names":["SphericalHarmonics3","Light","LightProbe","constructor","sh","intensity","super","undefined","this","isLightProbe","copy","source","fromJSON","json","fromArray","toJSON","meta","data","object","toArray"],"sources":["node_modules/three/src/lights/LightProbe.js"],"sourcesContent":["import { SphericalHarmonics3 } from '../math/SphericalHarmonics3.js';\nimport { Light } from './Light.js';\n\n/**\n * Light probes are an alternative way of adding light to a 3D scene. Unlike\n * classical light sources (e.g. directional, point or spot lights), light\n * probes do not emit light. Instead they store information about light\n * passing through 3D space. During rendering, the light that hits a 3D\n * object is approximated by using the data from the light probe.\n *\n * Light probes are usually created from (radiance) environment maps. The\n * class {@link LightProbeGenerator} can be used to create light probes from\n * cube textures or render targets. However, light estimation data could also\n * be provided in other forms e.g. by WebXR. This enables the rendering of\n * augmented reality content that reacts to real world lighting.\n *\n * The current probe implementation in three.js supports so-called diffuse\n * light probes. This type of light probe is functionally equivalent to an\n * irradiance environment map.\n *\n * @augments Light\n */\nclass LightProbe extends Light {\n\n\t/**\n\t * Constructs a new light probe.\n\t *\n\t * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t */\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLightProbe = true;\n\n\t\t/**\n\t\t * A light probe uses spherical harmonics to encode lighting information.\n\t\t *\n\t\t * @type {SphericalHarmonics3}\n\t\t */\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deserializes the light prove from the given JSON.\n\t *\n\t * @param {Object} json - The JSON holding the serialized light probe.\n\t * @return {LightProbe} A reference to this light probe.\n\t */\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { LightProbe };\n"],"mappings":"OAASA,wBAA2B,wCAC3BC,UAAa,aAqBtB,MAAMC,mBAAmBD,MAQxB,WAAAE,CAAaC,EAAK,IAAIJ,oBAAuBK,EAAY,GAExDC,WAAOC,EAAWF,GASlBG,KAAKC,cAAe,EAOpBD,KAAKJ,GAAKA,CAEX,CAEA,IAAAM,CAAMC,GAML,OAJAL,MAAMI,KAAMC,GAEZH,KAAKJ,GAAGM,KAAMC,EAAOP,IAEdI,IAER,CAQA,QAAAI,CAAUC,GAKT,OAHAL,KAAKH,UAAYQ,EAAKR,UACtBG,KAAKJ,GAAGU,UAAWD,EAAKT,IAEjBI,IAER,CAEA,MAAAO,CAAQC,GAEP,MAAMC,EAAOX,MAAMS,OAAQC,GAI3B,OAFAC,EAAKC,OAAOd,GAAKI,KAAKJ,GAAGe,UAElBF,CAER,SAIQf","ignoreList":[]}