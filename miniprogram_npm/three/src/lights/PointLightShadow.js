import{LightShadow}from"./LightShadow.js";import{PerspectiveCamera}from"../cameras/PerspectiveCamera.js";import{Matrix4}from"../math/Matrix4.js";import{Vector2}from"../math/Vector2.js";import{Vector3}from"../math/Vector3.js";import{Vector4}from"../math/Vector4.js";const _projScreenMatrix=new Matrix4,_lightPositionWorld=new Vector3,_lookTarget=new Vector3;class PointLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new Vector2(4,2),this._viewportCount=6,this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)],this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)],this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)]}updateMatrices(t,o=0){const e=this.camera,r=this.matrix,i=t.distance||e.far;i!==e.far&&(e.far=i,e.updateProjectionMatrix()),_lightPositionWorld.setFromMatrixPosition(t.matrixWorld),e.position.copy(_lightPositionWorld),_lookTarget.copy(e.position),_lookTarget.add(this._cubeDirections[o]),e.up.copy(this._cubeUps[o]),e.lookAt(_lookTarget),e.updateMatrixWorld(),r.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z),_projScreenMatrix.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(_projScreenMatrix,e.coordinateSystem,e.reversedDepth)}}export{PointLightShadow};
//# sourceMappingURL=PointLightShadow.js.map