{"version":3,"file":"node_modules/three/src/lights/PointLightShadow.js","names":["LightShadow","PerspectiveCamera","Matrix4","Vector2","Vector3","Vector4","_projScreenMatrix","_lightPositionWorld","_lookTarget","PointLightShadow","constructor","super","this","isPointLightShadow","_frameExtents","_viewportCount","_viewports","_cubeDirections","_cubeUps","updateMatrices","light","viewportIndex","camera","shadowMatrix","matrix","far","distance","updateProjectionMatrix","setFromMatrixPosition","matrixWorld","position","copy","add","up","lookAt","updateMatrixWorld","makeTranslation","x","y","z","multiplyMatrices","projectionMatrix","matrixWorldInverse","_frustum","setFromProjectionMatrix","coordinateSystem","reversedDepth"],"sources":["node_modules/three/src/lights/PointLightShadow.js"],"sourcesContent":["import { LightShadow } from './LightShadow.js';\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\n/**\n * Represents the shadow configuration of point lights.\n *\n * @augments LightShadow\n */\nclass PointLightShadow extends LightShadow {\n\n\t/**\n\t * Constructs a new point light shadow.\n\t */\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\t/**\n\t * Update the matrices for the camera and shadow, used internally by the renderer.\n\t *\n\t * @param {Light} light - The light for which the shadow is being rendered.\n\t * @param {number} [viewportIndex=0] - The viewport index.\n\t */\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix, camera.coordinateSystem, camera.reversedDepth );\n\n\t}\n\n}\n\nexport { PointLightShadow };\n"],"mappings":"OAASA,gBAAmB,0BACnBC,sBAAyB,yCACzBC,YAAe,4BACfC,YAAe,4BACfC,YAAe,4BACfC,YAAe,qBAExB,MAAMC,kBAAkC,IAAIJ,QACtCK,oBAAoC,IAAIH,QACxCI,YAA4B,IAAIJ,QAOtC,MAAMK,yBAAyBT,YAK9B,WAAAU,GAECC,MAAO,IAAIV,kBAAmB,GAAI,EAAG,GAAK,MAS1CW,KAAKC,oBAAqB,EAE1BD,KAAKE,cAAgB,IAAIX,QAAS,EAAG,GAErCS,KAAKG,eAAiB,EAEtBH,KAAKI,WAAa,CAejB,IAAIX,QAAS,EAAG,EAAG,EAAG,GAEtB,IAAIA,QAAS,EAAG,EAAG,EAAG,GAEtB,IAAIA,QAAS,EAAG,EAAG,EAAG,GAEtB,IAAIA,QAAS,EAAG,EAAG,EAAG,GAEtB,IAAIA,QAAS,EAAG,EAAG,EAAG,GAEtB,IAAIA,QAAS,EAAG,EAAG,EAAG,IAGvBO,KAAKK,gBAAkB,CACtB,IAAIb,QAAS,EAAG,EAAG,GAAK,IAAIA,SAAW,EAAG,EAAG,GAAK,IAAIA,QAAS,EAAG,EAAG,GACrE,IAAIA,QAAS,EAAG,GAAK,GAAK,IAAIA,QAAS,EAAG,EAAG,GAAK,IAAIA,QAAS,GAAK,EAAG,IAGxEQ,KAAKM,SAAW,CACf,IAAId,QAAS,EAAG,EAAG,GAAK,IAAIA,QAAS,EAAG,EAAG,GAAK,IAAIA,QAAS,EAAG,EAAG,GACnE,IAAIA,QAAS,EAAG,EAAG,GAAK,IAAIA,QAAS,EAAG,EAAG,GAAK,IAAIA,QAAS,EAAG,GAAK,GAGvE,CAQA,cAAAe,CAAgBC,EAAOC,EAAgB,GAEtC,MAAMC,EAASV,KAAKU,OACdC,EAAeX,KAAKY,OAEpBC,EAAML,EAAMM,UAAYJ,EAAOG,IAEhCA,IAAQH,EAAOG,MAEnBH,EAAOG,IAAMA,EACbH,EAAOK,0BAIRpB,oBAAoBqB,sBAAuBR,EAAMS,aACjDP,EAAOQ,SAASC,KAAMxB,qBAEtBC,YAAYuB,KAAMT,EAAOQ,UACzBtB,YAAYwB,IAAKpB,KAAKK,gBAAiBI,IACvCC,EAAOW,GAAGF,KAAMnB,KAAKM,SAAUG,IAC/BC,EAAOY,OAAQ1B,aACfc,EAAOa,oBAEPZ,EAAaa,iBAAmB7B,oBAAoB8B,GAAK9B,oBAAoB+B,GAAK/B,oBAAoBgC,GAEtGjC,kBAAkBkC,iBAAkBlB,EAAOmB,iBAAkBnB,EAAOoB,oBACpE9B,KAAK+B,SAASC,wBAAyBtC,kBAAmBgB,EAAOuB,iBAAkBvB,EAAOwB,cAE3F,SAIQrC","ignoreList":[]}