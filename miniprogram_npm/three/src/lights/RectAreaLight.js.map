{"version":3,"file":"node_modules/three/src/lights/RectAreaLight.js","names":["Light","RectAreaLight","constructor","color","intensity","width","height","super","this","isRectAreaLight","type","power","Math","PI","copy","source","toJSON","meta","data","object"],"sources":["node_modules/three/src/lights/RectAreaLight.js"],"sourcesContent":["import { Light } from './Light.js';\n\n/**\n * This class emits light uniformly across the face a rectangular plane.\n * This light type can be used to simulate light sources such as bright\n * windows or strip lighting.\n *\n * Important Notes:\n *\n * - There is no shadow support.\n * - Only PBR materials are supported.\n * - You have to include `RectAreaLightUniformsLib` (`WebGLRenderer`) or `RectAreaLightTexturesLib` (`WebGPURenderer`)\n * into your app and init the uniforms/textures.\n *\n * ```js\n * RectAreaLightUniformsLib.init(); // only relevant for WebGLRenderer\n * THREE.RectAreaLightNode.setLTC( RectAreaLightTexturesLib.init() ); //  only relevant for WebGPURenderer\n *\n * const intensity = 1; const width = 10; const height = 10;\n * const rectLight = new THREE.RectAreaLight( 0xffffff, intensity, width, height );\n * rectLight.position.set( 5, 5, 0 );\n * rectLight.lookAt( 0, 0, 0 );\n * scene.add( rectLight )\n * ```\n *\n * @augments Light\n */\nclass RectAreaLight extends Light {\n\n\t/**\n\t * Constructs a new area light.\n\t *\n\t * @param {(number|Color|string)} [color=0xffffff] - The light's color.\n\t * @param {number} [intensity=1] - The light's strength/intensity.\n\t * @param {number} [width=10] - The width of the light.\n\t * @param {number} [height=10] - The height of the light.\n\t */\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\t/**\n\t\t * The width of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.width = width;\n\n\t\t/**\n\t\t * The height of the light.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 10\n\t\t */\n\t\tthis.height = height;\n\n\t}\n\n\t/**\n\t * The light's power. Power is the luminous power of the light measured in lumens (lm).\n\t * Changing the power will also change the light's intensity.\n\t *\n\t * @type {number}\n\t */\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { RectAreaLight };\n"],"mappings":"OAASA,UAAa,aA2BtB,MAAMC,sBAAsBD,MAU3B,WAAAE,CAAaC,EAAOC,EAAWC,EAAQ,GAAIC,EAAS,IAEnDC,MAAOJ,EAAOC,GASdI,KAAKC,iBAAkB,EAEvBD,KAAKE,KAAO,gBAQZF,KAAKH,MAAQA,EAQbG,KAAKF,OAASA,CAEf,CAQA,SAAIK,GAGH,OAAOH,KAAKJ,UAAYI,KAAKH,MAAQG,KAAKF,OAASM,KAAKC,EAEzD,CAEA,SAAIF,CAAOA,GAGVH,KAAKJ,UAAYO,GAAUH,KAAKH,MAAQG,KAAKF,OAASM,KAAKC,GAE5D,CAEA,IAAAC,CAAMC,GAOL,OALAR,MAAMO,KAAMC,GAEZP,KAAKH,MAAQU,EAAOV,MACpBG,KAAKF,OAASS,EAAOT,OAEdE,IAER,CAEA,MAAAQ,CAAQC,GAEP,MAAMC,EAAOX,MAAMS,OAAQC,GAK3B,OAHAC,EAAKC,OAAOd,MAAQG,KAAKH,MACzBa,EAAKC,OAAOb,OAASE,KAAKF,OAEnBY,CAER,SAIQjB","ignoreList":[]}