{"version":3,"file":"node_modules/three/src/loaders/AudioLoader.js","names":["AudioContext","FileLoader","Loader","AudioLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","scope","this","loader","handleError","e","console","error","itemError","setResponseType","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","bufferCopy","slice","getContext","decodeAudioData","audioBuffer","catch"],"sources":["node_modules/three/src/loaders/AudioLoader.js"],"sourcesContent":["import { AudioContext } from '../audio/AudioContext.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Class for loading audio buffers. Audios are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const audioListener = new THREE.AudioListener();\n * const ambientSound = new THREE.Audio( audioListener );\n *\n * const loader = new THREE.AudioLoader();\n * const audioBuffer = await loader.loadAsync( 'audio/ambient_ocean.ogg' );\n *\n * ambientSound.setBuffer( audioBuffer );\n * ambientSound.play();\n * ```\n *\n * @augments Loader\n */\nclass AudioLoader extends Loader {\n\n\t/**\n\t * Constructs a new audio loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and passes the loaded audio buffer\n\t * to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} ).catch( handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { AudioLoader };\n"],"mappings":"OAASA,iBAAoB,kCACpBC,eAAkB,yBAClBC,WAAc,cAmBvB,MAAMC,oBAAoBD,OAOzB,WAAAE,CAAaC,GAEZC,MAAOD,EAER,CAWA,IAAAE,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAQC,KAERC,EAAS,IAAIb,WAAYY,KAAKR,SA4BpC,SAASU,EAAaC,GAEhBL,EAEJA,EAASK,GAITC,QAAQC,MAAOF,GAIhBJ,EAAMP,QAAQc,UAAWX,EAE1B,CAzCAM,EAAOM,gBAAiB,eACxBN,EAAOO,QAASR,KAAKS,MACrBR,EAAOS,iBAAkBV,KAAKW,eAC9BV,EAAOW,mBAAoBZ,KAAKa,iBAChCZ,EAAOP,KAAMC,GAAK,SAAWmB,GAE5B,IAIC,MAAMC,EAAaD,EAAOE,MAAO,GAEjB7B,aAAa8B,aACrBC,gBAAiBH,GAAY,SAAWI,GAE/CvB,EAAQuB,EAET,IAAIC,MAAOlB,EAEZ,CAAE,MAAQC,GAETD,EAAaC,EAEd,CAED,GAAGN,EAAYC,EAkBhB,SAKQR","ignoreList":[]}