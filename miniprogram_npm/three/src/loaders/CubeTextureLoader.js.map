{"version":3,"file":"node_modules/three/src/loaders/CubeTextureLoader.js","names":["ImageLoader","CubeTexture","Loader","SRGBColorSpace","CubeTextureLoader","constructor","manager","super","load","urls","onLoad","onProgress","onError","texture","colorSpace","loader","this","setCrossOrigin","crossOrigin","setPath","path","loaded","loadTexture","i","image","images","needsUpdate","undefined","length"],"sources":["node_modules/three/src/loaders/CubeTextureLoader.js"],"sourcesContent":["import { ImageLoader } from './ImageLoader.js';\nimport { CubeTexture } from '../textures/CubeTexture.js';\nimport { Loader } from './Loader.js';\nimport { SRGBColorSpace } from '../constants.js';\n\n/**\n * Class for loading cube textures. Images are internally loaded via {@link ImageLoader}.\n *\n * The loader returns an instance of {@link CubeTexture} and expects the cube map to\n * be defined as six separate images representing the sides of a cube. Other cube map definitions\n * like vertical and horizontal cross, column and row layouts are not supported.\n *\n * Note that, by convention, cube maps are specified in a coordinate system\n * in which positive-x is to the right when looking up the positive-z axis --\n * in other words, using a left-handed coordinate system. Since three.js uses\n * a right-handed coordinate system, environment maps used in three.js will\n * have pos-x and neg-x swapped.\n *\n * The loaded cube texture is in sRGB color space. Meaning {@link Texture#colorSpace}\n * is set to `SRGBColorSpace` by default.\n *\n * ```js\n * const loader = new THREE.CubeTextureLoader().setPath( 'textures/cubeMaps/' );\n * const cubeTexture = await loader.loadAsync( [\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n * ] );\n * scene.background = cubeTexture;\n * ```\n *\n * @augments Loader\n */\nclass CubeTextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new cube texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded cube texture\n\t * to the `onLoad()` callback. The method also returns a new cube texture object which can\n\t * directly be used for material creation. If you do it this way, the cube texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the\n\t * cube texture. The urls should be specified in the following order: pos-x,\n\t * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.\n\t * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {CubeTexture} The cube texture.\n\t */\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n\nexport { CubeTextureLoader };\n"],"mappings":"OAASA,gBAAmB,0BACnBC,gBAAmB,oCACnBC,WAAc,qBACdC,mBAAsB,kBA4B/B,MAAMC,0BAA0BF,OAO/B,WAAAG,CAAaC,GAEZC,MAAOD,EAER,CAgBA,IAAAE,CAAMC,EAAMC,EAAQC,EAAYC,GAE/B,MAAMC,EAAU,IAAIZ,YACpBY,EAAQC,WAAaX,eAErB,MAAMY,EAAS,IAAIf,YAAagB,KAAKV,SACrCS,EAAOE,eAAgBD,KAAKE,aAC5BH,EAAOI,QAASH,KAAKI,MAErB,IAAIC,EAAS,EAEb,SAASC,EAAaC,GAErBR,EAAOP,KAAMC,EAAMc,IAAK,SAAWC,GAElCX,EAAQY,OAAQF,GAAMC,EAEtBH,IAEgB,IAAXA,IAEJR,EAAQa,aAAc,EAEjBhB,GAASA,EAAQG,GAIxB,QAAGc,EAAWf,EAEf,CAEA,IAAM,IAAIW,EAAI,EAAGA,EAAId,EAAKmB,SAAWL,EAEpCD,EAAaC,GAId,OAAOV,CAER,SAKQT","ignoreList":[]}