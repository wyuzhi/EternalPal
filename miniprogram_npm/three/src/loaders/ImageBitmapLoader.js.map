{"version":3,"file":"node_modules/three/src/loaders/ImageBitmapLoader.js","names":["Cache","Loader","_errorMap","WeakMap","ImageBitmapLoader","constructor","manager","super","this","isImageBitmapLoader","createImageBitmap","console","warn","fetch","options","premultiplyAlpha","_abortController","AbortController","setOptions","load","url","onLoad","onProgress","onError","undefined","path","resolveURL","scope","cached","get","itemStart","then","imageBitmap","has","itemEnd","itemError","setTimeout","fetchOptions","credentials","crossOrigin","headers","requestHeader","signal","AbortSignal","any","abortController","promise","res","blob","Object","assign","colorSpaceConversion","add","catch","e","set","remove","abort"],"sources":["node_modules/three/src/loaders/ImageBitmapLoader.js"],"sourcesContent":["import { Cache } from './Cache.js';\nimport { Loader } from './Loader.js';\n\nconst _errorMap = new WeakMap();\n\n/**\n * A loader for loading images as an [ImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap}.\n * An `ImageBitmap` provides an asynchronous and resource efficient pathway to prepare\n * textures for rendering.\n *\n * Note that {@link Texture#flipY} and {@link Texture#premultiplyAlpha} are ignored with image bitmaps.\n * They needs these configuration on bitmap creation unlike regular images need them on uploading to GPU.\n *\n * You need to set the equivalent options via {@link ImageBitmapLoader#setOptions} instead.\n *\n * Also note that unlike {@link FileLoader}, this loader avoids multiple concurrent requests to the same URL only if `Cache` is enabled.\n *\n * ```js\n * const loader = new THREE.ImageBitmapLoader();\n * loader.setOptions( { imageOrientation: 'flipY' } ); // set options if needed\n * const imageBitmap = await loader.loadAsync( 'image.png' );\n *\n * const texture = new THREE.Texture( imageBitmap );\n * texture.needsUpdate = true;\n * ```\n *\n * @augments Loader\n */\nclass ImageBitmapLoader extends Loader {\n\n\t/**\n\t * Constructs a new image bitmap loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\t/**\n\t\t * Represents the loader options.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {premultiplyAlpha:'none'}\n\t\t */\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t\t/**\n\t\t * Used for aborting requests.\n\t\t *\n\t\t * @private\n\t\t * @type {AbortController}\n\t\t */\n\t\tthis._abortController = new AbortController();\n\n\t}\n\n\t/**\n\t * Sets the given loader options. The structure of the object must match the `options` parameter of\n\t * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.\n\t *\n\t * @param {Object} options - The loader options to set.\n\t * @return {ImageBitmapLoader} A reference to this image bitmap loader.\n\t */\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {ImageBitmap|undefined} The image bitmap.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( `image-bitmap:${url}` );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\t// If cached is a promise, wait for it to resolve\n\t\t\tif ( cached.then ) {\n\n\t\t\t\tcached.then( imageBitmap => {\n\n\t\t\t\t\t// check if there is an error for the cached promise\n\n\t\t\t\t\tif ( _errorMap.has( cached ) === true ) {\n\n\t\t\t\t\t\tif ( onError ) onError( _errorMap.get( cached ) );\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t\treturn imageBitmap;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// If cached is not a promise (i.e., it's already an imageBitmap)\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\t\tfetchOptions.signal = ( typeof AbortSignal.any === 'function' ) ? AbortSignal.any( [ this._abortController.signal, this.manager.abortController.signal ] ) : this._abortController.signal;\n\n\t\tconst promise = fetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( `image-bitmap:${url}`, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t\treturn imageBitmap;\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\t_errorMap.set( promise, e );\n\n\t\t\tCache.remove( `image-bitmap:${url}` );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tCache.add( `image-bitmap:${url}`, promise );\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n\t/**\n\t * Aborts ongoing fetch requests.\n\t *\n\t * @return {ImageBitmapLoader} A reference to this instance.\n\t */\n\tabort() {\n\n\t\tthis._abortController.abort();\n\t\tthis._abortController = new AbortController();\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { ImageBitmapLoader };\n"],"mappings":"OAASA,UAAa,oBACbC,WAAc,cAEvB,MAAMC,UAAY,IAAIC,QAyBtB,MAAMC,0BAA0BH,OAO/B,WAAAI,CAAaC,GAEZC,MAAOD,GASPE,KAAKC,qBAAsB,EAEO,oBAAtBC,mBAEXC,QAAQC,KAAM,+DAIO,oBAAVC,OAEXF,QAAQC,KAAM,mDAUfJ,KAAKM,QAAU,CAAEC,iBAAkB,QAQnCP,KAAKQ,iBAAmB,IAAIC,eAE7B,CASA,UAAAC,CAAYJ,GAIX,OAFAN,KAAKM,QAAUA,EAERN,IAER,CAWA,IAAAW,CAAMC,EAAKC,EAAQC,EAAYC,QAEjBC,IAARJ,IAAoBA,EAAM,SAEZI,IAAdhB,KAAKiB,OAAqBL,EAAMZ,KAAKiB,KAAOL,GAEjDA,EAAMZ,KAAKF,QAAQoB,WAAYN,GAE/B,MAAMO,EAAQnB,KAERoB,EAAS5B,MAAM6B,IAAK,gBAAgBT,KAE1C,QAAgBI,IAAXI,EAKJ,OAHAD,EAAMrB,QAAQwB,UAAWV,GAGpBQ,EAAOG,UAEXH,EAAOG,MAAMC,IAIZ,IAAiC,IAA5B9B,UAAU+B,IAAKL,GAanB,OAJKP,GAASA,EAAQW,GAEtBL,EAAMrB,QAAQ4B,QAASd,GAEhBY,EAXFT,GAAUA,EAASrB,UAAU2B,IAAKD,IAEvCD,EAAMrB,QAAQ6B,UAAWf,GACzBO,EAAMrB,QAAQ4B,QAASd,EAUxB,KASFgB,YAAY,WAENf,GAASA,EAAQO,GAEtBD,EAAMrB,QAAQ4B,QAASd,EAExB,GAAG,GAEIQ,GAIR,MAAMS,EAAe,CAAC,EACtBA,EAAaC,YAAqC,cAArB9B,KAAK+B,YAAgC,cAAgB,UAClFF,EAAaG,QAAUhC,KAAKiC,cAC5BJ,EAAaK,OAAsC,mBAApBC,YAAYC,IAAuBD,YAAYC,IAAK,CAAEpC,KAAKQ,iBAAiB0B,OAAQlC,KAAKF,QAAQuC,gBAAgBH,SAAalC,KAAKQ,iBAAiB0B,OAEnL,MAAMI,EAAUjC,MAAOO,EAAKiB,GAAeN,MAAM,SAAWgB,GAE3D,OAAOA,EAAIC,MAEZ,IAAIjB,MAAM,SAAWiB,GAEpB,OAAOtC,kBAAmBsC,EAAMC,OAAOC,OAAQvB,EAAMb,QAAS,CAAEqC,qBAAsB,SAEvF,IAAIpB,MAAM,SAAWC,GAQpB,OANAhC,MAAMoD,IAAK,gBAAgBhC,IAAOY,GAE7BX,GAASA,EAAQW,GAEtBL,EAAMrB,QAAQ4B,QAASd,GAEhBY,CAER,IAAIqB,OAAO,SAAWC,GAEhB/B,GAAUA,EAAS+B,GAExBpD,UAAUqD,IAAKT,EAASQ,GAExBtD,MAAMwD,OAAQ,gBAAgBpC,KAE9BO,EAAMrB,QAAQ6B,UAAWf,GACzBO,EAAMrB,QAAQ4B,QAASd,EAExB,IAEApB,MAAMoD,IAAK,gBAAgBhC,IAAO0B,GAClCnB,EAAMrB,QAAQwB,UAAWV,EAE1B,CAOA,KAAAqC,GAKC,OAHAjD,KAAKQ,iBAAiByC,QACtBjD,KAAKQ,iBAAmB,IAAIC,gBAErBT,IAER,SAIQJ","ignoreList":[]}