{"version":3,"file":"node_modules/three/src/loaders/LoaderUtils.js","names":["LoaderUtils","extractUrlBase","url","index","lastIndexOf","slice","resolveURL","path","test","replace"],"sources":["node_modules/three/src/loaders/LoaderUtils.js"],"sourcesContent":["/**\n * A class with loader utility functions.\n */\nclass LoaderUtils {\n\n\t/**\n\t * Extracts the base URL from the given URL.\n\t *\n\t * @param {string} url -The URL to extract the base URL from.\n\t * @return {string} The extracted base URL.\n\t */\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\t/**\n\t * Resolves relative URLs against the given path. Absolute paths, data urls,\n\t * and blob URLs will be returned as is. Invalid URLs will return an empty\n\t * string.\n\t *\n\t * @param {string} url -The URL to resolve.\n\t * @param {string} path - The base path for relative URLs to be resolved against.\n\t * @return {string} The resolved URL.\n\t */\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nexport { LoaderUtils };\n"],"mappings":"AAGA,MAAMA,YAQL,qBAAOC,CAAgBC,GAEtB,MAAMC,EAAQD,EAAIE,YAAa,KAE/B,OAAiB,IAAZD,EAAuB,KAErBD,EAAIG,MAAO,EAAGF,EAAQ,EAE9B,CAWA,iBAAOG,CAAYJ,EAAKK,GAGvB,MAAoB,iBAARL,GAA4B,KAARA,EAAoB,IAG/C,gBAAgBM,KAAMD,IAAU,MAAMC,KAAMN,KAEhDK,EAAOA,EAAKE,QAAS,0BAA2B,OAK5C,mBAAmBD,KAAMN,IAGzB,gBAAgBM,KAAMN,IAGtB,aAAaM,KAAMN,GANqBA,EAStCK,EAAOL,EAEf,SAIQF","ignoreList":[]}