{"version":3,"file":"node_modules/three/src/loaders/MaterialLoader.js","names":["Color","Vector2","Vector3","Vector4","Matrix3","Matrix4","FileLoader","Loader","ShadowMaterial","SpriteMaterial","RawShaderMaterial","ShaderMaterial","PointsMaterial","MeshPhysicalMaterial","MeshStandardMaterial","MeshPhongMaterial","MeshToonMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshDepthMaterial","MeshDistanceMaterial","MeshBasicMaterial","MeshMatcapMaterial","LineDashedMaterial","LineBasicMaterial","Material","MaterialLoader","constructor","manager","super","this","textures","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","json","getTexture","name","undefined","warn","material","createMaterialFromType","type","uuid","color","setHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","dispersion","iridescence","iridescenceIOR","iridescenceThicknessRange","transmission","thickness","attenuationDistance","attenuationColor","anisotropy","anisotropyRotation","fog","flatShading","blending","combine","side","shadowSide","opacity","transparent","alphaTest","alphaHash","depthFunc","depthTest","depthWrite","colorWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendColor","blendAlpha","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","rotation","linewidth","dashSize","gapSize","scale","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","forceSinglePass","visible","toneMapped","userData","vertexColors","uniforms","uniform","value","fromArray","defines","vertexShader","fragmentShader","glslVersion","extensions","key","lights","clipping","size","sizeAttenuation","map","matcap","alphaMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","Array","isArray","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","specularMap","specularIntensityMap","specularColorMap","envMap","envMapRotation","envMapIntensity","reflectivity","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","gradientMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","iridescenceMap","iridescenceThicknessMap","transmissionMap","thicknessMap","anisotropyMap","sheenColorMap","sheenRoughnessMap","setTextures"],"sources":["node_modules/three/src/loaders/MaterialLoader.js"],"sourcesContent":["import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport {\n\tShadowMaterial,\n\tSpriteMaterial,\n\tRawShaderMaterial,\n\tShaderMaterial,\n\tPointsMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMeshPhongMaterial,\n\tMeshToonMaterial,\n\tMeshNormalMaterial,\n\tMeshLambertMaterial,\n\tMeshDepthMaterial,\n\tMeshDistanceMaterial,\n\tMeshBasicMaterial,\n\tMeshMatcapMaterial,\n\tLineDashedMaterial,\n\tLineBasicMaterial,\n\tMaterial,\n} from '../materials/Materials.js';\n\n/**\n * Class for loading geometries. The files are internally\n * loaded via {@link FileLoader}.\n *\n * ```js\n * const loader = new THREE.MaterialLoader();\n * const material = await loader.loadAsync( 'material.json' );\n * ```\n * This loader does not support node materials. Use {@link NodeMaterialLoader} instead.\n *\n * @augments Loader\n */\nclass MaterialLoader extends Loader {\n\n\t/**\n\t * Constructs a new material loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * A dictionary holding textures used by the material.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.textures = {};\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Material)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Executed while the loading is in progress.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parses the given JSON object and returns a material.\n\t *\n\t * @param {Object} json - The serialized material.\n\t * @return {Material} The parsed material.\n\t */\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = this.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * Textures are not embedded in the material JSON so they have\n\t * to be injected before the loading process starts.\n\t *\n\t * @param {Object} value - A dictionary holding textures for material properties.\n\t * @return {MaterialLoader} A reference to this material loader.\n\t */\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tcreateMaterialFromType( type ) {\n\n\t\treturn MaterialLoader.createMaterialFromType( type );\n\n\t}\n\n\t/**\n\t * Creates a material for the given type.\n\t *\n\t * @static\n\t * @param {string} type - The material type.\n\t * @return {Material} The new material.\n\t */\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nexport { MaterialLoader };\n"],"mappings":"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","ignoreList":[]}