{"version":3,"file":"node_modules/three/src/loaders/TextureLoader.js","names":["ImageLoader","Texture","Loader","TextureLoader","constructor","manager","super","load","url","onLoad","onProgress","onError","texture","loader","this","setCrossOrigin","crossOrigin","setPath","path","image","needsUpdate","undefined"],"sources":["node_modules/three/src/loaders/TextureLoader.js"],"sourcesContent":["import { ImageLoader } from './ImageLoader.js';\nimport { Texture } from '../textures/Texture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Class for loading textures. Images are internally\n * loaded via {@link ImageLoader}.\n *\n * ```js\n * const loader = new THREE.TextureLoader();\n * const texture = await loader.loadAsync( 'textures/land_ocean_ice_cloud_2048.jpg' );\n *\n * const material = new THREE.MeshBasicMaterial( { map:texture } );\n * ```\n * Please note that `TextureLoader` has dropped support for progress\n * events in `r84`. For a `TextureLoader` that supports progress events, see\n * [this thread]{@link https://github.com/mrdoob/three.js/issues/10439#issuecomment-293260145}.\n *\n * @augments Loader\n */\nclass TextureLoader extends Loader {\n\n\t/**\n\t * Constructs a new texture loader.\n\t *\n\t * @param {LoadingManager} [manager] - The loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\t/**\n\t * Starts loading from the given URL and pass the fully loaded texture\n\t * to the `onLoad()` callback. The method also returns a new texture object which can\n\t * directly be used for material creation. If you do it this way, the texture\n\t * may pop up in your scene once the respective loading process is finished.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.\n\t * @param {function(Texture)} onLoad - Executed when the loading process has been finished.\n\t * @param {onProgressCallback} onProgress - Unsupported in this loader.\n\t * @param {onErrorCallback} onError - Executed when errors occur.\n\t * @return {Texture} The texture.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\n\nexport { TextureLoader };\n"],"mappings":"OAASA,gBAAmB,0BACnBC,YAAe,gCACfC,WAAc,cAkBvB,MAAMC,sBAAsBD,OAO3B,WAAAE,CAAaC,GAEZC,MAAOD,EAER,CAcA,IAAAE,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAU,IAAIX,QAEdY,EAAS,IAAIb,YAAac,KAAKT,SAiBrC,OAhBAQ,EAAOE,eAAgBD,KAAKE,aAC5BH,EAAOI,QAASH,KAAKI,MAErBL,EAAON,KAAMC,GAAK,SAAWW,GAE5BP,EAAQO,MAAQA,EAChBP,EAAQQ,aAAc,OAENC,IAAXZ,GAEJA,EAAQG,EAIV,GAAGF,EAAYC,GAERC,CAER,SAKQT","ignoreList":[]}