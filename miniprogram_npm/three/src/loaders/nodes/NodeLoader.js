import{nodeObject,float}from"../../nodes/tsl/TSLBase.js";import{Loader}from"../Loader.js";import{FileLoader}from"../../loaders/FileLoader.js";class NodeLoader extends Loader{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,s,o){const r=new FileLoader(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials),r.load(e,(s=>{try{t(this.parse(JSON.parse(s)))}catch(t){o?o(t):console.error(t),this.manager.itemError(e)}}),s,o)}parseNodes(e){const t={};if(void 0!==e){for(const s of e){const{uuid:e,type:o}=s;t[e]=this.createNodeFromType(o),t[e].uuid=e}const s={nodes:t,textures:this.textures};for(const o of e){o.meta=s;t[o.uuid].deserialize(o),delete o.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const s={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=s,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),float()):nodeObject(new this.nodes[e])}}export default NodeLoader;
//# sourceMappingURL=NodeLoader.js.map