{"version":3,"file":"node_modules/three/src/loaders/nodes/NodeLoader.js","names":["nodeObject","float","Loader","FileLoader","NodeLoader","constructor","manager","super","this","textures","nodes","load","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","parseNodes","json","undefined","nodeJSON","uuid","type","createNodeFromType","meta","deserialize","node","setTextures","value","setNodes"],"sources":["node_modules/three/src/loaders/nodes/NodeLoader.js"],"sourcesContent":["import { nodeObject, float } from '../../nodes/tsl/TSLBase.js';\n\nimport { Loader } from '../Loader.js';\nimport { FileLoader } from '../../loaders/FileLoader.js';\n\n/**\n * A loader for loading node objects in the three.js JSON Object/Scene format.\n *\n * @augments Loader\n */\nclass NodeLoader extends Loader {\n\n\t/**\n\t * Constructs a new node loader.\n\t *\n\t * @param {LoadingManager} [manager] - A reference to a loading manager.\n\t */\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t/**\n\t\t * Represents a dictionary of textures.\n\t\t *\n\t\t * @type {Object<string,Texture>}\n\t\t */\n\t\tthis.textures = {};\n\n\t\t/**\n\t\t * Represents a dictionary of node types.\n\t\t *\n\t\t * @type {Object<string,Node.constructor>}\n\t\t */\n\t\tthis.nodes = {};\n\n\t}\n\n\t/**\n\t * Loads the node definitions from the given URL.\n\t *\n\t * @param {string} url - The path/URL of the file to be loaded.\n\t * @param {Function} onLoad - Will be called when load completes.\n\t * @param {Function} onProgress - Will be called while load progresses.\n\t * @param {Function} onError - Will be called when errors are thrown during the loading process.\n\t */\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, ( text ) => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\t/**\n\t * Parse the node dependencies for the loaded node.\n\t *\n\t * @param {Array<Object>} [json] - The JSON definition\n\t * @return {Object<string,Node>} A dictionary with node dependencies.\n\t */\n\tparseNodes( json ) {\n\n\t\tconst nodes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tconst { uuid, type } = nodeJSON;\n\n\t\t\t\tnodes[ uuid ] = this.createNodeFromType( type );\n\t\t\t\tnodes[ uuid ].uuid = uuid;\n\n\t\t\t}\n\n\t\t\tconst meta = { nodes, textures: this.textures };\n\n\t\t\tfor ( const nodeJSON of json ) {\n\n\t\t\t\tnodeJSON.meta = meta;\n\n\t\t\t\tconst node = nodes[ nodeJSON.uuid ];\n\t\t\t\tnode.deserialize( nodeJSON );\n\n\t\t\t\tdelete nodeJSON.meta;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodes;\n\n\t}\n\n\t/**\n\t * Parses the node from the given JSON.\n\t *\n\t * @param {Object} json - The JSON definition\n\t * @param {string} json.type - The node type.\n\t * @param {string} json.uuid - The node UUID.\n\t * @param {Array<Object>} [json.nodes] - The node dependencies.\n\t * @param {Object} [json.meta] - The meta data.\n\t * @return {Node} The parsed node.\n\t */\n\tparse( json ) {\n\n\t\tconst node = this.createNodeFromType( json.type );\n\t\tnode.uuid = json.uuid;\n\n\t\tconst nodes = this.parseNodes( json.nodes );\n\t\tconst meta = { nodes, textures: this.textures };\n\n\t\tjson.meta = meta;\n\n\t\tnode.deserialize( json );\n\n\t\tdelete json.meta;\n\n\t\treturn node;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of textures.\n\t *\n\t * @param {Object<string,Texture>} value - The texture library defines as `<uuid,texture>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Defines the dictionary of node types.\n\t *\n\t * @param {Object<string,Node.constructor>} value - The node library defined as `<classname,class>`.\n\t * @return {NodeLoader} A reference to this loader.\n\t */\n\tsetNodes( value ) {\n\n\t\tthis.nodes = value;\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a node object from the given type.\n\t *\n\t * @param {string} type - The node type.\n\t * @return {Node} The created node instance.\n\t */\n\tcreateNodeFromType( type ) {\n\n\t\tif ( this.nodes[ type ] === undefined ) {\n\n\t\t\tconsole.error( 'THREE.NodeLoader: Node type not found:', type );\n\t\t\treturn float();\n\n\t\t}\n\n\t\treturn nodeObject( new this.nodes[ type ]() );\n\n\t}\n\n}\n\nexport default NodeLoader;\n"],"mappings":"OAASA,WAAYC,UAAa,oCAEzBC,WAAc,sBACdC,eAAkB,8BAO3B,MAAMC,mBAAmBF,OAOxB,WAAAG,CAAaC,GAEZC,MAAOD,GAOPE,KAAKC,SAAW,CAAC,EAOjBD,KAAKE,MAAQ,CAAC,CAEf,CAUA,IAAAC,CAAMC,EAAKC,EAAQC,EAAYC,GAE9B,MAAMC,EAAS,IAAIb,WAAYK,KAAKF,SACpCU,EAAOC,QAAST,KAAKU,MACrBF,EAAOG,iBAAkBX,KAAKY,eAC9BJ,EAAOK,mBAAoBb,KAAKc,iBAChCN,EAAOL,KAAMC,GAAOW,IAEnB,IAECV,EAAQL,KAAKgB,MAAOC,KAAKD,MAAOD,IAEjC,CAAE,MAAQG,GAEJX,EAEJA,EAASW,GAITC,QAAQC,MAAOF,GAIhBlB,KAAKF,QAAQuB,UAAWjB,EAEzB,IAEEE,EAAYC,EAEhB,CAQA,UAAAe,CAAYC,GAEX,MAAMrB,EAAQ,CAAC,EAEf,QAAcsB,IAATD,EAAqB,CAEzB,IAAM,MAAME,KAAYF,EAAO,CAE9B,MAAMG,KAAEA,EAAIC,KAAEA,GAASF,EAEvBvB,EAAOwB,GAAS1B,KAAK4B,mBAAoBD,GACzCzB,EAAOwB,GAAOA,KAAOA,CAEtB,CAEA,MAAMG,EAAO,CAAE3B,QAAOD,SAAUD,KAAKC,UAErC,IAAM,MAAMwB,KAAYF,EAAO,CAE9BE,EAASI,KAAOA,EAEH3B,EAAOuB,EAASC,MACxBI,YAAaL,UAEXA,EAASI,IAEjB,CAED,CAEA,OAAO3B,CAER,CAYA,KAAAc,CAAOO,GAEN,MAAMQ,EAAO/B,KAAK4B,mBAAoBL,EAAKI,MAC3CI,EAAKL,KAAOH,EAAKG,KAEjB,MACMG,EAAO,CAAE3B,MADDF,KAAKsB,WAAYC,EAAKrB,OACdD,SAAUD,KAAKC,UAQrC,OANAsB,EAAKM,KAAOA,EAEZE,EAAKD,YAAaP,UAEXA,EAAKM,KAELE,CAER,CAQA,WAAAC,CAAaC,GAGZ,OADAjC,KAAKC,SAAWgC,EACTjC,IAER,CAQA,QAAAkC,CAAUD,GAGT,OADAjC,KAAKE,MAAQ+B,EACNjC,IAER,CAQA,kBAAA4B,CAAoBD,GAEnB,YAA4BH,IAAvBxB,KAAKE,MAAOyB,IAEhBR,QAAQC,MAAO,yCAA0CO,GAClDlC,SAIDD,WAAY,IAAIQ,KAAKE,MAAOyB,GAEpC,iBAIc/B","ignoreList":[]}