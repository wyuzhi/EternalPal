{"version":3,"file":"node_modules/three/src/materials/LineBasicMaterial.js","names":["Material","Color","LineBasicMaterial","constructor","parameters","super","this","isLineBasicMaterial","type","color","map","linewidth","linecap","linejoin","fog","setValues","copy","source"],"sources":["node_modules/three/src/materials/LineBasicMaterial.js"],"sourcesContent":["import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * A material for rendering line primitives.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * ```js\n * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n * ```\n *\n * @augments Material\n */\nclass LineBasicMaterial extends Material {\n\n\t/**\n\t * Constructs a new line basic material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.color = new Color( 0xffffff );\n\n\t\t/**\n\t\t * Sets the color of the lines using data from a texture. The texture map\n\t\t * color is modulated by the diffuse `color`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.map = null;\n\n\t\t/**\n\t\t * Controls line thickness or lines.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}. WebGL and WebGPU\n\t\t * ignore this setting and always render line primitives with a\n\t\t * width of one pixel.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.linewidth = 1;\n\n\t\t/**\n\t\t * Defines appearance of line ends.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('butt'|'round'|'square')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linecap = 'round';\n\n\t\t/**\n\t\t * Defines appearance of line joints.\n\t\t *\n\t\t * Can only be used with {@link SVGRenderer}.\n\t\t *\n\t\t * @type {('round'|'bevel'|'miter')}\n\t\t * @default 'round'\n\t\t */\n\t\tthis.linejoin = 'round';\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineBasicMaterial };\n"],"mappings":"OAASA,aAAgB,uBAChBC,UAAa,mBAatB,MAAMC,0BAA0BF,SAW/B,WAAAG,CAAaC,GAEZC,QASAC,KAAKC,qBAAsB,EAE3BD,KAAKE,KAAO,oBAQZF,KAAKG,MAAQ,IAAIR,MAAO,UASxBK,KAAKI,IAAM,KAYXJ,KAAKK,UAAY,EAUjBL,KAAKM,QAAU,QAUfN,KAAKO,SAAW,QAQhBP,KAAKQ,KAAM,EAEXR,KAAKS,UAAWX,EAEjB,CAEA,IAAAY,CAAMC,GAcL,OAZAZ,MAAMW,KAAMC,GAEZX,KAAKG,MAAMO,KAAMC,EAAOR,OAExBH,KAAKI,IAAMO,EAAOP,IAElBJ,KAAKK,UAAYM,EAAON,UACxBL,KAAKM,QAAUK,EAAOL,QACtBN,KAAKO,SAAWI,EAAOJ,SAEvBP,KAAKQ,IAAMG,EAAOH,IAEXR,IAER,SAIQJ","ignoreList":[]}