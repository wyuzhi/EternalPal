{"version":3,"file":"node_modules/three/src/materials/Material.js","names":["Color","EventDispatcher","FrontSide","NormalBlending","LessEqualDepth","AddEquation","OneMinusSrcAlphaFactor","SrcAlphaFactor","AlwaysStencilFunc","KeepStencilOp","generateUUID","_materialId","Material","constructor","super","this","isMaterial","Object","defineProperty","value","uuid","name","type","blending","side","vertexColors","opacity","transparent","alphaHash","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendColor","blendAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","forceSinglePass","allowOverride","visible","toneMapped","userData","version","_alphaTest","alphaTest","onBeforeRender","onBeforeCompile","customProgramCacheKey","toString","setValues","values","undefined","key","newValue","console","warn","currentValue","isColor","set","isVector3","copy","toJSON","meta","isRootObject","textures","images","data","metadata","generator","extractFromCache","cache","push","color","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","isTexture","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","toArray","dispersion","iridescence","iridescenceIOR","iridescenceThicknessRange","iridescenceMap","iridescenceThicknessMap","anisotropy","anisotropyRotation","anisotropyMap","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapRotation","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","Infinity","attenuationColor","size","sizeAttenuation","rotation","linewidth","dashSize","gapSize","scale","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","flatShading","fog","keys","length","clone","source","srcPlanes","dstPlanes","n","Array","i","JSON","parse","stringify","dispose","dispatchEvent","needsUpdate"],"sources":["node_modules/three/src/materials/Material.js"],"sourcesContent":["import { Color } from '../math/Color.js';\nimport { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport { generateUUID } from '../math/MathUtils.js';\n\nlet _materialId = 0;\n\n/**\n * Abstract base class for materials.\n *\n * Materials define the appearance of renderable 3D objects.\n *\n * @abstract\n * @augments EventDispatcher\n */\nclass Material extends EventDispatcher {\n\n\t/**\n\t * Constructs a new material.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterial = true;\n\n\t\t/**\n\t\t * The ID of the material.\n\t\t *\n\t\t * @name Material#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\n\n\t\t/**\n\t\t * The UUID of the material.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The name of the material.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The type property is used for detecting the object type\n\t\t * in context of serialization/deserialization.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.type = 'Material';\n\n\t\t/**\n\t\t * Defines the blending type of the material.\n\t\t *\n\t\t * It must be set to `CustomBlending` if custom blending properties like\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\n\t\t * should have any effect.\n\t\t *\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\n\t\t * @default NormalBlending\n\t\t */\n\t\tthis.blending = NormalBlending;\n\n\t\t/**\n\t\t * Defines which side of faces will be rendered - front, back or both.\n\t\t *\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\n\t\t * @default FrontSide\n\t\t */\n\t\tthis.side = FrontSide;\n\n\t\t/**\n\t\t * If set to `true`, vertex colors should be used.\n\t\t *\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\n\t\t * four (RGBA) component color buffer attribute is used.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.vertexColors = false;\n\n\t\t/**\n\t\t * Defines how transparent the material is.\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\n\t\t *\n\t\t * If the {@link Material#transparent} is not set to `true`,\n\t\t * the material will remain fully opaque and this value will only affect its color.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.opacity = 1;\n\n\t\t/**\n\t\t * Defines whether this material is transparent. This has an effect on\n\t\t * rendering as transparent objects need special treatment and are rendered\n\t\t * after non-transparent objects.\n\t\t *\n\t\t * When set to true, the extent to which the material is transparent is\n\t\t * controlled by {@link Material#opacity}.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transparent = false;\n\n\t\t/**\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaHash = false;\n\n\t\t/**\n\t\t * Defines the blending source factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default SrcAlphaFactor\n\t\t */\n\t\tthis.blendSrc = SrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending destination factor.\n\t\t *\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default OneMinusSrcAlphaFactor\n\t\t */\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\n\t\t/**\n\t\t * Defines the blending equation.\n\t\t *\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default AddEquation\n\t\t */\n\t\tthis.blendEquation = AddEquation;\n\n\t\t/**\n\t\t * Defines the blending source alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendSrcAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending destination alpha factor.\n\t\t *\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendDstAlpha = null;\n\n\t\t/**\n\t\t * Defines the blending equation of the alpha channel.\n\t\t *\n\t\t * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\n\t\t * @default null\n\t\t */\n\t\tthis.blendEquationAlpha = null;\n\n\t\t/**\n\t\t * Represents the RGB values of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.blendColor = new Color( 0, 0, 0 );\n\n\t\t/**\n\t\t * Represents the alpha value of the constant blend color.\n\t\t *\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.blendAlpha = 0;\n\n\t\t/**\n\t\t * Defines the depth function.\n\t\t *\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\n\t\t * @default LessEqualDepth\n\t\t */\n\t\tthis.depthFunc = LessEqualDepth;\n\n\t\t/**\n\t\t * Whether to have depth test enabled when rendering this material.\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthTest = true;\n\n\t\t/**\n\t\t * Whether rendering this material has any effect on the depth buffer.\n\t\t *\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\n\t\t * order to layer several things together without creating z-index artifacts.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.depthWrite = true;\n\n\t\t/**\n\t\t * The bit mask to use when writing to the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilWriteMask = 0xff;\n\n\t\t/**\n\t\t * The stencil comparison function to use.\n\t\t *\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\n\t\t * @default AlwaysStencilFunc\n\t\t */\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\n\t\t/**\n\t\t * The value to use when performing stencil comparisons or stencil operations.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.stencilRef = 0;\n\n\t\t/**\n\t\t * The bit mask to use when comparing against the stencil buffer.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0xff\n\t\t */\n\t\tthis.stencilFuncMask = 0xff;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` but the depth test fails.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZFail = KeepStencilOp;\n\n\t\t/**\n\t\t * Which stencil operation to perform when the comparison function returns\n\t\t * `true` and the depth test passes.\n\t\t *\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\n\t\t * @default KeepStencilOp\n\t\t */\n\t\tthis.stencilZPass = KeepStencilOp;\n\n\t\t/**\n\t\t * Whether stencil operations are performed against the stencil buffer. In\n\t\t * order to perform writes or comparisons against the stencil buffer this\n\t\t * value must be `true`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stencilWrite = false;\n\n\t\t/**\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\n\t\t * space. These planes apply to the objects this material is attached to.\n\t\t * Points in space whose signed distance to the plane is negative are clipped\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\n\t\t * be `true`.\n\t\t *\n\t\t * @type {?Array<Plane>}\n\t\t * @default null\n\t\t */\n\t\tthis.clippingPlanes = null;\n\n\t\t/**\n\t\t * Changes the behavior of clipping planes so that only their intersection is\n\t\t * clipped, rather than their union.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipIntersection = false;\n\n\t\t/**\n\t\t * Defines whether to clip shadows according to the clipping planes specified\n\t\t * on this material.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clipShadows = false;\n\n\t\t/**\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\n\t\t * is determined as follows:\n\t\t *\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\n\t\t *\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\n\t\t * @default null\n\t\t */\n\t\tthis.shadowSide = null;\n\n\t\t/**\n\t\t * Whether to render the material's color.\n\t\t *\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\n\t\t * objects that occlude other objects.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.colorWrite = true;\n\n\t\t/**\n\t\t * Override the renderer's default precision for this material.\n\t\t *\n\t\t * @type {?('highp'|'mediump'|'lowp')}\n\t\t * @default null\n\t\t */\n\t\tthis.precision = null;\n\n\t\t/**\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\n\t\t * The offset is added before the depth test is performed and before the value is written\n\t\t * into the depth buffer.\n\t\t *\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\n\t\t * rendering solids with highlighted edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.polygonOffset = false;\n\n\t\t/**\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetFactor = 0;\n\n\t\t/**\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\t/**\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dithering = false;\n\n\t\t/**\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.alphaToCoverage = false;\n\n\t\t/**\n\t\t * Whether to premultiply the alpha (transparency) value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.premultipliedAlpha = false;\n\n\t\t/**\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\n\t\t *\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\n\t\t * disable the two pass rendering to avoid performance issues.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.forceSinglePass = false;\n\n\t\t/**\n\t\t * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.allowOverride = true;\n\n\t\t/**\n\t\t * Defines whether 3D objects using this material are visible.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.visible = true;\n\n\t\t/**\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\n\t\t *\n\t\t * It is ignored when rendering to a render target or using post processing or when using\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.toneMapped = true;\n\n\t\t/**\n\t\t * An object that can be used to store custom data about the Material. It\n\t\t * should not hold references to functions as these will not be cloned.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.userData = {};\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\t/**\n\t * Sets the alpha value to be used when running an alpha test. The material\n\t * will not be rendered if the opacity is lower than this value.\n\t *\n\t * @type {number}\n\t * @readonly\n\t * @default 0\n\t */\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\t/**\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {Scene} scene - The scene.\n\t * @param {Camera} camera - The camera that is used to render the scene.\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Object} group - The geometry group data.\n\t */\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\t/**\n\t * An optional callback that is executed immediately before the shader\n\t * program is compiled. This function is called with the shader source code\n\t * as a parameter. Useful for the modification of built-in materials.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\n\t *\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\n\t */\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\t/**\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\n\t * shader or recompile the shader for this material as needed.\n\t *\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\n\t *\n\t * @return {string} The custom program cache key.\n\t */\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\t/**\n\t * This method can be used to set default values from parameter objects.\n\t * It is a generic implementation so it can be used with different types\n\t * of materials.\n\t *\n\t * @param {Object} [values] - The material values to set.\n\t */\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Serializes the material into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized material.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.7,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = true;\n\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\n\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\n\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\n\n\t\tif ( this.wireframe === true ) data.wireframe = true;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * Returns a new material with copied values from this instance.\n\t *\n\t * @return {Material} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given material to this instance.\n\t *\n\t * @param {Material} source - The material to copy.\n\t * @return {Material} A reference to this instance.\n\t */\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\tthis.blendColor.copy( source.blendColor );\n\t\tthis.blendAlpha = source.blendAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaHash = source.alphaHash;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever this instance is no longer used in your app.\n\t *\n\t * @fires Material#dispose\n\t */\n\tdispose() {\n\n\t\t/**\n\t\t * Fires when the material has been disposed of.\n\t\t *\n\t\t * @event Material#dispose\n\t\t * @type {Object}\n\t\t */\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Setting this property to `true` indicates the engine the material\n\t * needs to be recompiled.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nexport { Material };\n"],"mappings":"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","ignoreList":[]}