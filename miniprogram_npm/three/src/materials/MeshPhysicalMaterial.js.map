{"version":3,"file":"node_modules/three/src/materials/MeshPhysicalMaterial.js","names":["Vector2","MeshStandardMaterial","Color","clamp","MeshPhysicalMaterial","constructor","parameters","super","this","isMeshPhysicalMaterial","defines","STANDARD","PHYSICAL","type","anisotropyRotation","anisotropyMap","clearcoatMap","clearcoatRoughness","clearcoatRoughnessMap","clearcoatNormalScale","clearcoatNormalMap","ior","Object","defineProperty","get","set","reflectivity","iridescenceMap","iridescenceIOR","iridescenceThicknessRange","iridescenceThicknessMap","sheenColor","sheenColorMap","sheenRoughness","sheenRoughnessMap","transmissionMap","thickness","thicknessMap","attenuationDistance","Infinity","attenuationColor","specularIntensity","specularIntensityMap","specularColor","specularColorMap","_anisotropy","_clearcoat","_dispersion","_iridescence","_sheen","_transmission","setValues","anisotropy","value","version","clearcoat","iridescence","dispersion","sheen","transmission","copy","source"],"sources":["node_modules/three/src/materials/MeshPhysicalMaterial.js"],"sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\nimport { clamp } from '../math/MathUtils.js';\n\n/**\n * An extension of the {@link MeshStandardMaterial}, providing more advanced\n * physically-based rendering properties:\n *\n * - Anisotropy: Ability to represent the anisotropic property of materials\n * as observable with brushed metals.\n * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require\n * a clear, reflective layer on top of another layer that may be irregular or rough.\n * Clearcoat approximates this effect, without the need for a separate transparent surface.\n * - Iridescence: Allows to render the effect where hue varies  depending on the viewing\n * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the\n * wings of many insects.\n * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly\n * transparent materials are less reflective. Physically-based transmission provides a more\n * realistic option for thin, transparent surfaces like glass.\n * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.\n * - Sheen: Can be used for representing cloth and fabric materials.\n *\n * As a result of these complex shading features, `MeshPhysicalMaterial` has a\n * higher performance cost, per pixel, than other three.js materials. Most\n * effects are disabled by default, and add cost as they are enabled. For\n * best results, always specify an environment map when using this material.\n *\n * @augments MeshStandardMaterial\n */\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\t/**\n\t * Constructs a new mesh physical material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\t/**\n\t\t * The rotation of the anisotropy in tangent, bitangent space, measured in radians\n\t\t * counter-clockwise from the tangent. When `anisotropyMap` is present, this\n\t\t * property provides additional rotation to the vectors in the texture.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.anisotropyRotation = 0;\n\n\t\t/**\n\t\t * Red and green channels represent the anisotropy direction in `[-1, 1]` tangent,\n\t\t * bitangent space, to be rotated by `anisotropyRotation`. The blue channel\n\t\t * contains strength as `[0, 1]` to be multiplied by `anisotropy`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.anisotropyMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `clearcoat`,\n\t\t * for per-pixel control over a coating's intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatMap = null;\n\n\t\t/**\n\t\t * Roughness of the clear coat layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\t/**\n\t\t * The green channel of this texture is multiplied against\n\t\t * `clearcoatRoughness`, for per-pixel control over a coating's roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRoughnessMap = null;\n\n\t\t/**\n\t\t * How much `clearcoatNormalMap` affects the clear coat layer, from\n\t\t * `(0,0)` to `(1,1)`.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (1,1)\n\t\t */\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\n\t\t/**\n\t\t * Can be used to enable independent normals for the clear coat layer.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNormalMap = null;\n\n\t\t/**\n\t\t * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.5\n\t\t */\n\t\tthis.ior = 1.5;\n\n\t\t/**\n\t\t * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which\n\t\t * corresponds to an index-of-refraction of `1.5`.\n\t\t *\n\t\t * This models the reflectivity of non-metallic materials. It has no effect\n\t\t * when `metalness` is `1.0`\n\t\t *\n\t\t * @name MeshPhysicalMaterial#reflectivity\n\t\t * @type {number}\n\t\t * @default 0.5\n\t\t */\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `iridescence`, for per-pixel\n\t\t * control over iridescence.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceMap = null;\n\n\t\t/**\n\t\t * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.\n\t\t * Between `1.0` to `2.333`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1.3\n\t\t */\n\t\tthis.iridescenceIOR = 1.3;\n\n\t\t/**\n\t\t *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.\n\t\t Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.\n\t\t *\n\t\t * @type {Array<number,number>}\n\t\t * @default [100,400]\n\t\t */\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\n\t\t/**\n\t\t * A texture that defines the thickness of the iridescence layer, stored in the green channel.\n\t\t * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:\n\t\t * - `0.0` in the green channel will result in thickness equal to first element of the array.\n\t\t * - `1.0` in the green channel will result in thickness equal to second element of the array.\n\t\t * - Values in-between will linearly interpolate between the elements of the array.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\t/**\n\t\t * The sheen tint.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.sheenColor = new Color( 0x000000 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control\n\t\t * over sheen tint.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenColorMap = null;\n\n\t\t/**\n\t\t * Roughness of the sheen layer, from `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.sheenRoughness = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control\n\t\t * over sheen roughness.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenRoughnessMap = null;\n\n\t\t/**\n\t\t * The red channel of this texture is multiplied against `transmission`, for per-pixel control over\n\t\t * optical transparency.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.transmissionMap = null;\n\n\t\t/**\n\t\t * The thickness of the volume beneath the surface. The value is given in the\n\t\t * coordinate space of the mesh. If the value is `0` the material is\n\t\t * thin-walled. Otherwise the material is a volume boundary.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.thickness = 0;\n\n\t\t/**\n\t\t * A texture that defines the thickness, stored in the green channel. This will\n\t\t * be multiplied by `thickness`.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessMap = null;\n\n\t\t/**\n\t\t * Density of the medium given as the average distance that light travels in\n\t\t * the medium before interacting with a particle. The value is given in world\n\t\t * space units, and must be greater than zero.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.attenuationDistance = Infinity;\n\n\t\t/**\n\t\t * The color that white light turns into due to absorption when reaching the\n\t\t * attenuation distance.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * A float that scales the amount of specular reflection for non-metals only.\n\t\t * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.specularIntensity = 1.0;\n\n\t\t/**\n\t\t * The alpha channel of this texture is multiplied against `specularIntensity`,\n\t\t * for per-pixel control over specular intensity.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularIntensityMap = null;\n\n\t\t/**\n\t\t * Tints the specular reflection at normal incidence for non-metals only.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (1,1,1)\n\t\t */\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\n\t\t/**\n\t\t * The RGB channels of this texture are multiplied against `specularColor`,\n\t\t * for per-pixel control over specular color.\n\t\t *\n\t\t * @type {?Texture}\n\t\t * @default null\n\t\t */\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._dispersion = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * The anisotropy strength.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\t/**\n\t * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use\n\t * clear coat related properties to enable multilayer materials that have a\n\t * thin translucent layer over the base layer.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\t/**\n\t * The intensity of the iridescence layer, simulating RGB color shift based on the angle between\n\t * the surface and the viewer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\t/**\n\t * Defines the strength of the angular separation of colors (chromatic aberration) transmitting\n\t * through a relatively clear volume. Any value zero or larger is valid, the typical range of\n\t * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget dispersion() {\n\n\t\treturn this._dispersion;\n\n\t}\n\n\tset dispersion( value ) {\n\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._dispersion = value;\n\n\t}\n\n\t/**\n\t * The intensity of the sheen layer, from `0.0` to `1.0`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\t/**\n\t * Degree of transmission (or optical transparency), from `0.0` to `1.0`.\n\t *\n\t * Thin, transparent or semitransparent, plastic or glass materials remain\n\t * largely reflective even if they are fully transmissive. The transmission\n\t * property can be used to model these materials.\n\t *\n\t * When transmission is non-zero, `opacity` should be  set to `1`.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.dispersion = source.dispersion;\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshPhysicalMaterial };\n"],"mappings":"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","ignoreList":[]}