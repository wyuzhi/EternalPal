{"version":3,"file":"node_modules/three/src/materials/RawShaderMaterial.js","names":["ShaderMaterial","RawShaderMaterial","constructor","parameters","super","this","isRawShaderMaterial","type"],"sources":["node_modules/three/src/materials/RawShaderMaterial.js"],"sourcesContent":["import { ShaderMaterial } from './ShaderMaterial.js';\n\n/**\n * This class works just like {@link ShaderMaterial}, except that definitions\n * of built-in uniforms and attributes are not automatically prepended to the\n * GLSL shader code.\n *\n * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.\n *\n * @augments ShaderMaterial\n */\nclass RawShaderMaterial extends ShaderMaterial {\n\n\t/**\n\t * Constructs a new raw shader material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nexport { RawShaderMaterial };\n"],"mappings":"OAASA,mBAAsB,sBAW/B,MAAMC,0BAA0BD,eAW/B,WAAAE,CAAaC,GAEZC,MAAOD,GASPE,KAAKC,qBAAsB,EAE3BD,KAAKE,KAAO,mBAEb,SAIQN","ignoreList":[]}