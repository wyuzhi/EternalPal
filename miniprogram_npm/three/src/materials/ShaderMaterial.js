import{Material}from"./Material.js";import{cloneUniforms,cloneUniformsGroups}from"../renderers/shaders/UniformsUtils.js";import default_vertex from"../renderers/shaders/ShaderChunk/default_vertex.glsl.js";import default_fragment from"../renderers/shaders/ShaderChunk/default_fragment.glsl.js";class ShaderMaterial extends Material{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=default_vertex,this.fragmentShader=default_fragment,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=cloneUniforms(e.uniforms),this.uniformsGroups=cloneUniformsGroups(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const s=super.toJSON(e);s.glslVersion=this.glslVersion,s.uniforms={};for(const i in this.uniforms){const t=this.uniforms[i].value;t&&t.isTexture?s.uniforms[i]={type:"t",value:t.toJSON(e).uuid}:t&&t.isColor?s.uniforms[i]={type:"c",value:t.getHex()}:t&&t.isVector2?s.uniforms[i]={type:"v2",value:t.toArray()}:t&&t.isVector3?s.uniforms[i]={type:"v3",value:t.toArray()}:t&&t.isVector4?s.uniforms[i]={type:"v4",value:t.toArray()}:t&&t.isMatrix3?s.uniforms[i]={type:"m3",value:t.toArray()}:t&&t.isMatrix4?s.uniforms[i]={type:"m4",value:t.toArray()}:s.uniforms[i]={value:t}}Object.keys(this.defines).length>0&&(s.defines=this.defines),s.vertexShader=this.vertexShader,s.fragmentShader=this.fragmentShader,s.lights=this.lights,s.clipping=this.clipping;const i={};for(const e in this.extensions)!0===this.extensions[e]&&(i[e]=!0);return Object.keys(i).length>0&&(s.extensions=i),s}}export{ShaderMaterial};
//# sourceMappingURL=ShaderMaterial.js.map