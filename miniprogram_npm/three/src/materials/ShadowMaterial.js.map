{"version":3,"file":"node_modules/three/src/materials/ShadowMaterial.js","names":["Material","Color","ShadowMaterial","constructor","parameters","super","this","isShadowMaterial","type","color","transparent","fog","setValues","copy","source"],"sources":["node_modules/three/src/materials/ShadowMaterial.js"],"sourcesContent":["import { Material } from './Material.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * This material can receive shadows, but otherwise is completely transparent.\n *\n * ```js\n * const geometry = new THREE.PlaneGeometry( 2000, 2000 );\n * geometry.rotateX( - Math.PI / 2 );\n *\n * const material = new THREE.ShadowMaterial();\n * material.opacity = 0.2;\n *\n * const plane = new THREE.Mesh( geometry, material );\n * plane.position.y = -200;\n * plane.receiveShadow = true;\n * scene.add( plane );\n * ```\n *\n * @augments Material\n */\nclass ShadowMaterial extends Material {\n\n\t/**\n\t * Constructs a new shadow material.\n\t *\n\t * @param {Object} [parameters] - An object with one or more properties\n\t * defining the material's appearance. Any property of the material\n\t * (including any property from inherited materials) can be passed\n\t * in here. Color values can be passed any type of value accepted\n\t * by {@link Color#set}.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\t/**\n\t\t * Color of the material.\n\t\t *\n\t\t * @type {Color}\n\t\t * @default (0,0,0)\n\t\t */\n\t\tthis.color = new Color( 0x000000 );\n\n\t\t/**\n\t\t * Overwritten since shadow materials are transparent\n\t\t * by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.transparent = true;\n\n\t\t/**\n\t\t * Whether the material is affected by fog or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { ShadowMaterial };\n"],"mappings":"OAASA,aAAgB,uBAChBC,UAAa,mBAoBtB,MAAMC,uBAAuBF,SAW5B,WAAAG,CAAaC,GAEZC,QASAC,KAAKC,kBAAmB,EAExBD,KAAKE,KAAO,iBAQZF,KAAKG,MAAQ,IAAIR,MAAO,GASxBK,KAAKI,aAAc,EAQnBJ,KAAKK,KAAM,EAEXL,KAAKM,UAAWR,EAEjB,CAEA,IAAAS,CAAMC,GAQL,OANAT,MAAMQ,KAAMC,GAEZR,KAAKG,MAAMI,KAAMC,EAAOL,OAExBH,KAAKK,IAAMG,EAAOH,IAEXL,IAER,SAIQJ","ignoreList":[]}