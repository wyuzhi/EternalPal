{"version":3,"file":"node_modules/three/src/materials/nodes/LineDashedNodeMaterial.js","names":["NodeMaterial","attribute","materialLineDashOffset","materialLineDashSize","materialLineGapSize","materialLineScale","dashSize","gapSize","varying","float","LineDashedMaterial","_defaultValues","LineDashedNodeMaterial","type","constructor","parameters","super","this","isLineDashedNodeMaterial","setDefaultValues","dashOffset","offsetNode","dashScaleNode","dashSizeNode","gapSizeNode","setValues","setupVariants","assign","vLineDistance","mul","add","mod","greaterThan","discard"],"sources":["node_modules/three/src/materials/nodes/LineDashedNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport { attribute } from '../../nodes/core/AttributeNode.js';\nimport { materialLineDashOffset, materialLineDashSize, materialLineGapSize, materialLineScale } from '../../nodes/accessors/MaterialNode.js';\nimport { dashSize, gapSize } from '../../nodes/core/PropertyNode.js';\nimport { varying, float } from '../../nodes/tsl/TSLBase.js';\n\nimport { LineDashedMaterial } from '../LineDashedMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\n\n/**\n * Node material version of  {@link LineDashedMaterial}.\n *\n * @augments NodeMaterial\n */\nclass LineDashedNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'LineDashedNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new line dashed node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineDashedNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\t/**\n\t\t * The dash offset.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.dashOffset = 0;\n\n\t\t/**\n\t\t * The offset of dash materials is by default inferred from the `dashOffset`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the offset with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the offset but modify the existing\n\t\t * value instead, use {@link materialLineDashOffset}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.offsetNode = null;\n\n\t\t/**\n\t\t * The scale of dash materials is by default inferred from the `scale`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the scale with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the scale but modify the existing\n\t\t * value instead, use {@link materialLineScale}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashScaleNode = null;\n\n\t\t/**\n\t\t * The dash size of dash materials is by default inferred from the `dashSize`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the dash size with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the dash size but modify the existing\n\t\t * value instead, use {@link materialLineDashSize}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dashSizeNode = null;\n\n\t\t/**\n\t\t * The gap size of dash materials is by default inferred from the `gapSize`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the gap size with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the gap size but modify the existing\n\t\t * value instead, use {@link materialLineGapSize}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.gapSizeNode = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the dash specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( /* builder */ ) {\n\n\t\tconst offsetNode = this.offsetNode ? float( this.offsetNode ) : materialLineDashOffset;\n\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\n\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\n\t\tconst gapSizeNode = this.gapSizeNode ? float( this.gapSizeNode ) : materialLineGapSize;\n\n\t\tdashSize.assign( dashSizeNode );\n\t\tgapSize.assign( gapSizeNode );\n\n\t\tconst vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );\n\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\n\n\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();\n\n\t}\n\n}\n\nexport default LineDashedNodeMaterial;\n"],"mappings":"OAAOA,iBAAkB,2BAChBC,cAAiB,2CACjBC,uBAAwBC,qBAAsBC,oBAAqBC,sBAAyB,+CAC5FC,SAAUC,YAAe,0CACzBC,QAASC,UAAa,oCAEtBC,uBAA0B,2BAEnC,MAAMC,eAA+B,IAAID,mBAOzC,MAAME,+BAA+BZ,aAEpC,eAAWa,GAEV,MAAO,wBAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKC,0BAA2B,EAEhCD,KAAKE,iBAAkBR,gBAQvBM,KAAKG,WAAa,EAalBH,KAAKI,WAAa,KAalBJ,KAAKK,cAAgB,KAarBL,KAAKM,aAAe,KAapBN,KAAKO,YAAc,KAEnBP,KAAKQ,UAAWV,EAEjB,CAOA,aAAAW,GAEC,MAAML,EAAaJ,KAAKI,WAAaZ,MAAOQ,KAAKI,YAAenB,uBAC1DoB,EAAgBL,KAAKK,cAAgBb,MAAOQ,KAAKK,eAAkBjB,kBACnEkB,EAAeN,KAAKM,aAAed,MAAOQ,KAAKM,cAAiBpB,qBAChEqB,EAAcP,KAAKO,YAAcf,MAAOQ,KAAKO,aAAgBpB,oBAEnEE,SAASqB,OAAQJ,GACjBhB,QAAQoB,OAAQH,GAEhB,MAAMI,EAAgBpB,QAASP,UAAW,gBAAiB4B,IAAKP,KACpCD,EAAaO,EAAcE,IAAKT,GAAeO,GAEvDG,IAAKzB,SAASwB,IAAKvB,UAAYyB,YAAa1B,UAAW2B,SAE5E,iBAIcrB","ignoreList":[]}