{"version":3,"file":"node_modules/three/src/materials/nodes/MeshMatcapNodeMaterial.js","names":["NodeMaterial","materialReference","diffuseColor","vec3","mix","matcapUV","MeshMatcapMaterial","_defaultValues","MeshMatcapNodeMaterial","type","constructor","parameters","super","this","isMeshMatcapNodeMaterial","setDefaultValues","setValues","setupVariants","builder","uv","matcapColor","material","matcap","context","getUV","y","rgb","mulAssign"],"sources":["node_modules/three/src/materials/nodes/MeshMatcapNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\nimport { vec3 } from '../../nodes/tsl/TSLBase.js';\nimport { mix } from '../../nodes/math/MathNode.js';\nimport { matcapUV } from '../../nodes/utils/MatcapUV.js';\n\nimport { MeshMatcapMaterial } from '../MeshMatcapMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshMatcapMaterial();\n\n/**\n * Node material version of {@link MeshMatcapMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshMatcapNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshMatcapNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh normal node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshMatcapNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Setups the matcap specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( builder ) {\n\n\t\tconst uv = matcapUV;\n\n\t\tlet matcapColor;\n\n\t\tif ( builder.material.matcap ) {\n\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\n\n\t\t} else {\n\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\n\n\t\t}\n\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\n\n\t}\n\n}\n\n\nexport default MeshMatcapNodeMaterial;\n"],"mappings":"OAAOA,iBAAkB,2BAChBC,sBAAyB,wDACzBC,iBAAoB,0CACpBC,SAAY,oCACZC,QAAW,sCACXC,aAAgB,uCAEhBC,uBAA0B,2BAEnC,MAAMC,eAA+B,IAAID,mBAOzC,MAAME,+BAA+BR,aAEpC,eAAWS,GAEV,MAAO,wBAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKC,0BAA2B,EAEhCD,KAAKE,iBAAkBR,gBAEvBM,KAAKG,UAAWL,EAEjB,CAOA,aAAAM,CAAeC,GAEd,MAAMC,EAAKd,SAEX,IAAIe,EAIHA,EAFIF,EAAQG,SAASC,OAEPrB,kBAAmB,SAAU,WAAYsB,QAAS,CAAEC,MAAO,IAAML,IAIjEhB,KAAMC,IAAK,GAAK,GAAKe,EAAGM,IAIvCvB,aAAawB,IAAIC,UAAWP,EAAYM,IAEzC,iBAKclB","ignoreList":[]}