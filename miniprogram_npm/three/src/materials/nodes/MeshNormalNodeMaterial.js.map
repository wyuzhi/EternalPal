{"version":3,"file":"node_modules/three/src/materials/nodes/MeshNormalNodeMaterial.js","names":["NodeMaterial","diffuseColor","directionToColor","materialOpacity","normalView","colorSpaceToWorking","float","vec4","SRGBColorSpace","MeshNormalMaterial","_defaultValues","MeshNormalNodeMaterial","type","constructor","parameters","super","this","isMeshNormalNodeMaterial","setDefaultValues","setValues","setupDiffuseColor","opacityNode","assign"],"sources":["node_modules/three/src/materials/nodes/MeshNormalNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport { diffuseColor } from '../../nodes/core/PropertyNode.js';\nimport { directionToColor } from '../../nodes/utils/Packing.js';\nimport { materialOpacity } from '../../nodes/accessors/MaterialNode.js';\nimport { normalView } from '../../nodes/accessors/Normal.js';\nimport { colorSpaceToWorking } from '../../nodes/display/ColorSpaceNode.js';\nimport { float, vec4 } from '../../nodes/tsl/TSLBase.js';\nimport { SRGBColorSpace } from '../../constants.js';\n\nimport { MeshNormalMaterial } from '../MeshNormalMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshNormalMaterial();\n\n/**\n * Node material version of {@link MeshNormalMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshNormalNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshNormalNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh normal node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshNormalNodeMaterial = true;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation by computing the diffuse color\n\t * based on the normal data.\n\t */\n\tsetupDiffuseColor() {\n\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\n\n\t\t// By convention, a normal packed to RGB is in sRGB color space. Convert it to working color space.\n\n\t\tdiffuseColor.assign( colorSpaceToWorking( vec4( directionToColor( normalView ), opacityNode ), SRGBColorSpace ) );\n\n\t}\n\n}\n\nexport default MeshNormalNodeMaterial;\n"],"mappings":"OAAOA,iBAAkB,2BAChBC,iBAAoB,0CACpBC,qBAAwB,sCACxBC,oBAAuB,+CACvBC,eAAkB,yCAClBC,wBAA2B,+CAC3BC,MAAOC,SAAY,oCACnBC,mBAAsB,4BAEtBC,uBAA0B,2BAEnC,MAAMC,eAA+B,IAAID,mBAOzC,MAAME,+BAA+BX,aAEpC,eAAWY,GAEV,MAAO,wBAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKC,0BAA2B,EAEhCD,KAAKE,iBAAkBR,gBAEvBM,KAAKG,UAAWL,EAEjB,CAMA,iBAAAM,GAEC,MAAMC,EAAcL,KAAKK,YAAcf,MAAOU,KAAKK,aAAgBlB,gBAInEF,aAAaqB,OAAQjB,oBAAqBE,KAAML,iBAAkBE,YAAciB,GAAeb,gBAEhG,iBAIcG","ignoreList":[]}