{"version":3,"file":"node_modules/three/src/materials/nodes/MeshPhongNodeMaterial.js","names":["NodeMaterial","shininess","specularColor","materialShininess","materialSpecular","float","BasicEnvironmentNode","PhongLightingModel","MeshPhongMaterial","_defaultValues","MeshPhongNodeMaterial","type","constructor","parameters","super","this","isMeshPhongNodeMaterial","lights","shininessNode","specularNode","setDefaultValues","setValues","setupEnvironment","builder","envNode","setupLightingModel","setupVariants","max","assign","copy","source"],"sources":["node_modules/three/src/materials/nodes/MeshPhongNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport { shininess, specularColor } from '../../nodes/core/PropertyNode.js';\nimport { materialShininess, materialSpecular } from '../../nodes/accessors/MaterialNode.js';\nimport { float } from '../../nodes/tsl/TSLBase.js';\nimport BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';\nimport PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';\n\nimport { MeshPhongMaterial } from '../MeshPhongMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshPhongMaterial();\n\n/**\n * Node material version of {@link MeshPhongMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshPhongNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhongNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh lambert node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhongNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because phong materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\t/**\n\t\t * The shininess of phong materials is by default inferred from the `shininess`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the shininess with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the shininess but modify the existing\n\t\t * value instead, use {@link materialShininess}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.shininessNode = null;\n\n\t\t/**\n\t\t * The specular color of phong materials is by default inferred from the\n\t\t * `specular` property. This node property allows to overwrite the default\n\t\t * and define the specular color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular color but modify the existing\n\t\t * value instead, use {@link materialSpecular}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link BasicEnvironmentNode}\n\t * to implement the default environment mapping.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?BasicEnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tconst envNode = super.setupEnvironment( builder );\n\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhongLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhongLightingModel();\n\n\t}\n\n\t/**\n\t * Setups the phong specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( /*builder*/ ) {\n\n\t\t// SHININESS\n\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tshininess.assign( shininessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tconst specularNode = this.specularNode || materialSpecular;\n\n\t\tspecularColor.assign( specularNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.shininessNode = source.shininessNode;\n\t\tthis.specularNode = source.specularNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhongNodeMaterial;\n"],"mappings":"OAAOA,iBAAkB,2BAChBC,UAAWC,kBAAqB,0CAChCC,kBAAmBC,qBAAwB,+CAC3CC,UAAa,oCACfC,yBAA0B,sDAC1BC,uBAAwB,qDAEtBC,sBAAyB,0BAElC,MAAMC,eAA+B,IAAID,kBAOzC,MAAME,8BAA8BV,aAEnC,eAAWW,GAEV,MAAO,uBAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKC,yBAA0B,EAQ/BD,KAAKE,QAAS,EAadF,KAAKG,cAAgB,KAarBH,KAAKI,aAAe,KAEpBJ,KAAKK,iBAAkBX,gBAEvBM,KAAKM,UAAWR,EAEjB,CASA,gBAAAS,CAAkBC,GAEjB,MAAMC,EAAUV,MAAMQ,iBAAkBC,GAExC,OAAOC,EAAU,IAAIlB,qBAAsBkB,GAAY,IAExD,CAOA,kBAAAC,GAEC,OAAO,IAAIlB,kBAEZ,CAOA,aAAAmB,GAIC,MAAMR,GAAkBH,KAAKG,cAAgBb,MAAOU,KAAKG,eAAkBf,mBAAoBwB,IAAK,MAEpG1B,UAAU2B,OAAQV,GAIlB,MAAMC,EAAeJ,KAAKI,cAAgBf,iBAE1CF,cAAc0B,OAAQT,EAEvB,CAEA,IAAAU,CAAMC,GAKL,OAHAf,KAAKG,cAAgBY,EAAOZ,cAC5BH,KAAKI,aAAeW,EAAOX,aAEpBL,MAAMe,KAAMC,EAEpB,iBAIcpB","ignoreList":[]}