import{clearcoat,clearcoatRoughness,sheen,sheenRoughness,iridescence,iridescenceIOR,iridescenceThickness,specularColor,specularF90,diffuseColor,metalness,roughness,anisotropy,alphaT,anisotropyT,anisotropyB,ior,transmission,thickness,attenuationDistance,attenuationColor,dispersion}from"../../nodes/core/PropertyNode.js";import{materialClearcoat,materialClearcoatRoughness,materialClearcoatNormal,materialSheen,materialSheenRoughness,materialIridescence,materialIridescenceIOR,materialIridescenceThickness,materialSpecularIntensity,materialSpecularColor,materialAnisotropy,materialIOR,materialTransmission,materialThickness,materialAttenuationDistance,materialAttenuationColor,materialDispersion}from"../../nodes/accessors/MaterialNode.js";import{float,vec2,vec3,If}from"../../nodes/tsl/TSLBase.js";import getRoughness from"../../nodes/functions/material/getRoughness.js";import{TBNViewMatrix}from"../../nodes/accessors/AccessorsUtils.js";import PhysicalLightingModel from"../../nodes/functions/PhysicalLightingModel.js";import MeshStandardNodeMaterial from"./MeshStandardNodeMaterial.js";import{mix,pow2,min}from"../../nodes/math/MathNode.js";import{subBuild}from"../../nodes/core/SubBuildNode.js";import{MeshPhysicalMaterial}from"../MeshPhysicalMaterial.js";const _defaultValues=new MeshPhysicalMaterial;class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(_defaultValues),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?float(this.iorNode):materialIOR;ior.assign(e),specularColor.assign(mix(min(pow2(ior.sub(1).div(ior.add(1))).mul(materialSpecularColor),vec3(1)).mul(materialSpecularIntensity),diffuseColor.rgb,metalness)),specularF90.assign(mix(materialSpecularIntensity,1,metalness))}setupLightingModel(){return new PhysicalLightingModel(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?float(this.clearcoatNode):materialClearcoat,s=this.clearcoatRoughnessNode?float(this.clearcoatRoughnessNode):materialClearcoatRoughness;clearcoat.assign(e),clearcoatRoughness.assign(getRoughness({roughness:s}))}if(this.useSheen){const e=this.sheenNode?vec3(this.sheenNode):materialSheen,s=this.sheenRoughnessNode?float(this.sheenRoughnessNode):materialSheenRoughness;sheen.assign(e),sheenRoughness.assign(s)}if(this.useIridescence){const e=this.iridescenceNode?float(this.iridescenceNode):materialIridescence,s=this.iridescenceIORNode?float(this.iridescenceIORNode):materialIridescenceIOR,i=this.iridescenceThicknessNode?float(this.iridescenceThicknessNode):materialIridescenceThickness;iridescence.assign(e),iridescenceIOR.assign(s),iridescenceThickness.assign(i)}if(this.useAnisotropy){const e=(this.anisotropyNode?vec2(this.anisotropyNode):materialAnisotropy).toVar();anisotropy.assign(e.length()),If(anisotropy.equal(0),(()=>{e.assign(vec2(1,0))})).Else((()=>{e.divAssign(vec2(anisotropy)),anisotropy.assign(anisotropy.saturate())})),alphaT.assign(anisotropy.pow2().mix(roughness.pow2(),1)),anisotropyT.assign(TBNViewMatrix[0].mul(e.x).add(TBNViewMatrix[1].mul(e.y))),anisotropyB.assign(TBNViewMatrix[1].mul(e.x).sub(TBNViewMatrix[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?float(this.transmissionNode):materialTransmission,s=this.thicknessNode?float(this.thicknessNode):materialThickness,i=this.attenuationDistanceNode?float(this.attenuationDistanceNode):materialAttenuationDistance,t=this.attenuationColorNode?vec3(this.attenuationColorNode):materialAttenuationColor;if(transmission.assign(e),thickness.assign(s),attenuationDistance.assign(i),attenuationColor.assign(t),this.useDispersion){const e=this.dispersionNode?float(this.dispersionNode):materialDispersion;dispersion.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?vec3(this.clearcoatNormalNode):materialClearcoatNormal}setup(e){e.context.setupClearcoatNormal=()=>subBuild(this.setupClearcoatNormal(e),"NORMAL","vec3"),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}export default MeshPhysicalNodeMaterial;
//# sourceMappingURL=MeshPhysicalNodeMaterial.js.map