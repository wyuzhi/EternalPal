{"version":3,"file":"node_modules/three/src/materials/nodes/MeshPhysicalNodeMaterial.js","names":["clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","specularColor","specularF90","diffuseColor","metalness","roughness","anisotropy","alphaT","anisotropyT","anisotropyB","ior","transmission","thickness","attenuationDistance","attenuationColor","dispersion","materialClearcoat","materialClearcoatRoughness","materialClearcoatNormal","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","materialSpecularIntensity","materialSpecularColor","materialAnisotropy","materialIOR","materialTransmission","materialThickness","materialAttenuationDistance","materialAttenuationColor","materialDispersion","float","vec2","vec3","If","getRoughness","TBNViewMatrix","PhysicalLightingModel","MeshStandardNodeMaterial","mix","pow2","min","subBuild","MeshPhysicalMaterial","_defaultValues","MeshPhysicalNodeMaterial","type","constructor","parameters","super","this","isMeshPhysicalNodeMaterial","clearcoatNode","clearcoatRoughnessNode","clearcoatNormalNode","sheenNode","sheenRoughnessNode","iridescenceNode","iridescenceIORNode","iridescenceThicknessNode","specularIntensityNode","specularColorNode","iorNode","transmissionNode","thicknessNode","attenuationDistanceNode","attenuationColorNode","dispersionNode","anisotropyNode","setDefaultValues","setValues","useClearcoat","useIridescence","useSheen","useAnisotropy","useTransmission","useDispersion","setupSpecular","assign","sub","div","add","mul","rgb","setupLightingModel","setupVariants","builder","anisotropyV","toVar","length","equal","Else","divAssign","saturate","x","y","setupClearcoatNormal","setup","context","copy","source"],"sources":["node_modules/three/src/materials/nodes/MeshPhysicalNodeMaterial.js"],"sourcesContent":["import { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../../nodes/core/PropertyNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../../nodes/accessors/MaterialNode.js';\nimport { float, vec2, vec3, If } from '../../nodes/tsl/TSLBase.js';\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\nimport { TBNViewMatrix } from '../../nodes/accessors/AccessorsUtils.js';\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { mix, pow2, min } from '../../nodes/math/MathNode.js';\nimport { subBuild } from '../../nodes/core/SubBuildNode.js';\n\nimport { MeshPhysicalMaterial } from '../MeshPhysicalMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshPhysicalMaterial();\n\n/**\n * Node material version of {@link MeshPhysicalMaterial}.\n *\n * @augments MeshStandardNodeMaterial\n */\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshPhysicalNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh physical node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\t/**\n\t\t * The clearcoat of physical materials is by default inferred from the `clearcoat`\n\t\t * and `clearcoatMap` properties. This node property allows to overwrite the default\n\t\t * and define the clearcoat with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat but modify the existing\n\t\t * value instead, use {@link materialClearcoat}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNode = null;\n\n\t\t/**\n\t\t * The clearcoat roughness of physical materials is by default inferred from the `clearcoatRoughness`\n\t\t * and `clearcoatRoughnessMap` properties. This node property allows to overwrite the default\n\t\t * and define the clearcoat roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat roughness but modify the existing\n\t\t * value instead, use {@link materialClearcoatRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRoughnessNode = null;\n\n\t\t/**\n\t\t * The clearcoat normal of physical materials is by default inferred from the `clearcoatNormalMap`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the clearcoat normal with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the clearcoat normal but modify the existing\n\t\t * value instead, use {@link materialClearcoatNormal}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatNormalNode = null;\n\n\t\t/**\n\t\t * The sheen of physical materials is by default inferred from the `sheen`, `sheenColor`\n\t\t * and `sheenColorMap` properties. This node property allows to overwrite the default\n\t\t * and define the sheen with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the sheen but modify the existing\n\t\t * value instead, use {@link materialSheen}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenNode = null;\n\n\t\t/**\n\t\t * The sheen roughness of physical materials is by default inferred from the `sheenRoughness` and\n\t\t * `sheenRoughnessMap` properties. This node property allows to overwrite the default\n\t\t * and define the sheen roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the sheen roughness but modify the existing\n\t\t * value instead, use {@link materialSheenRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenRoughnessNode = null;\n\n\t\t/**\n\t\t * The iridescence of physical materials is by default inferred from the `iridescence`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the iridescence with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence but modify the existing\n\t\t * value instead, use {@link materialIridescence}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceNode = null;\n\n\t\t/**\n\t\t * The iridescence IOR of physical materials is by default inferred from the `iridescenceIOR`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the iridescence IOR with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence IOR but modify the existing\n\t\t * value instead, use {@link materialIridescenceIOR}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceIORNode = null;\n\n\t\t/**\n\t\t * The iridescence thickness of physical materials is by default inferred from the `iridescenceThicknessRange`\n\t\t * and `iridescenceThicknessMap` properties. This node property allows to overwrite the default\n\t\t * and define the iridescence thickness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the iridescence thickness but modify the existing\n\t\t * value instead, use {@link materialIridescenceThickness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\t/**\n\t\t * The specular intensity of physical materials is by default inferred from the `specularIntensity`\n\t\t * and `specularIntensityMap` properties. This node property allows to overwrite the default\n\t\t * and define the specular intensity with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular intensity but modify the existing\n\t\t * value instead, use {@link materialSpecularIntensity}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularIntensityNode = null;\n\n\t\t/**\n\t\t * The specular color of physical materials is by default inferred from the `specularColor`\n\t\t * and `specularColorMap` properties. This node property allows to overwrite the default\n\t\t * and define the specular color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the specular color but modify the existing\n\t\t * value instead, use {@link materialSpecularColor}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.specularColorNode = null;\n\n\t\t/**\n\t\t * The ior of physical materials is by default inferred from the `ior`\n\t\t * property. This node property allows to overwrite the default\n\t\t * and define the ior with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the ior but modify the existing\n\t\t * value instead, use {@link materialIOR}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.iorNode = null;\n\n\t\t/**\n\t\t * The transmission of physical materials is by default inferred from the `transmission` and\n\t\t * `transmissionMap` properties. This node property allows to overwrite the default\n\t\t * and define the transmission with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the transmission but modify the existing\n\t\t * value instead, use {@link materialTransmission}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.transmissionNode = null;\n\n\t\t/**\n\t\t * The thickness of physical materials is by default inferred from the `thickness` and\n\t\t * `thicknessMap` properties. This node property allows to overwrite the default\n\t\t * and define the thickness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the thickness but modify the existing\n\t\t * value instead, use {@link materialThickness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.thicknessNode = null;\n\n\t\t/**\n\t\t * The attenuation distance of physical materials is by default inferred from the\n\t\t * `attenuationDistance` property. This node property allows to overwrite the default\n\t\t * and define the attenuation distance with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the attenuation distance but modify the existing\n\t\t * value instead, use {@link materialAttenuationDistance}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.attenuationDistanceNode = null;\n\n\t\t/**\n\t\t * The attenuation color of physical materials is by default inferred from the\n\t\t * `attenuationColor` property. This node property allows to overwrite the default\n\t\t * and define the attenuation color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the attenuation color but modify the existing\n\t\t * value instead, use {@link materialAttenuationColor}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.attenuationColorNode = null;\n\n\t\t/**\n\t\t * The dispersion of physical materials is by default inferred from the\n\t\t * `dispersion` property. This node property allows to overwrite the default\n\t\t * and define the dispersion with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the dispersion but modify the existing\n\t\t * value instead, use {@link materialDispersion}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.dispersionNode = null;\n\n\t\t/**\n\t\t * The anisotropy of physical materials is by default inferred from the\n\t\t * `anisotropy` property. This node property allows to overwrite the default\n\t\t * and define the anisotropy with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the anisotropy but modify the existing\n\t\t * value instead, use {@link materialAnisotropy}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.anisotropyNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use clearcoat or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useClearcoat() {\n\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use iridescence or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useIridescence() {\n\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use sheen or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useSheen() {\n\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use anisotropy or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useAnisotropy() {\n\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use transmission or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useTransmission() {\n\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\n\n\t}\n\n\t/**\n\t * Whether the lighting model should use dispersion or not.\n\t *\n\t * @type {boolean}\n\t * @default true\n\t */\n\tget useDispersion() {\n\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\n\n\t}\n\n\t/**\n\t * Setups the specular related node variables.\n\t */\n\tsetupSpecular() {\n\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\n\n\t\tior.assign( iorNode );\n\t\tspecularColor.assign( mix( min( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhysicalLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\n\n\t}\n\n\t/**\n\t * Setups the physical specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\t// CLEARCOAT\n\n\t\tif ( this.useClearcoat ) {\n\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\t\tclearcoat.assign( clearcoatNode );\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\n\n\t\t}\n\n\t\t// SHEEN\n\n\t\tif ( this.useSheen ) {\n\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\t\tsheen.assign( sheenNode );\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\n\n\t\t}\n\n\t\t// IRIDESCENCE\n\n\t\tif ( this.useIridescence ) {\n\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\t\tiridescence.assign( iridescenceNode );\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\n\n\t\t}\n\n\t\t// ANISOTROPY\n\n\t\tif ( this.useAnisotropy ) {\n\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\n\n\t\t\tanisotropy.assign( anisotropyV.length() );\n\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\n\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\n\n\t\t\t} ).Else( () => {\n\n\t\t\t\tanisotropyV.divAssign( vec2( anisotropy ) );\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\n\n\t\t\t} );\n\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\n\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\n\n\t\t}\n\n\t\t// TRANSMISSION\n\n\t\tif ( this.useTransmission ) {\n\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\n\n\t\t\ttransmission.assign( transmissionNode );\n\t\t\tthickness.assign( thicknessNode );\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\n\t\t\tattenuationColor.assign( attenuationColorNode );\n\n\t\t\tif ( this.useDispersion ) {\n\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\n\n\t\t\t\tdispersion.assign( dispersionNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups the clearcoat normal node.\n\t *\n\t * @return {Node<vec3>} The clearcoat normal.\n\t */\n\tsetupClearcoatNormal() {\n\n\t\treturn this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tbuilder.context.setupClearcoatNormal = () => subBuild( this.setupClearcoatNormal( builder ), 'NORMAL', 'vec3' );\n\n\t\tsuper.setup( builder );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\t\tthis.dispersionNode = source.dispersionNode;\n\n\t\tthis.anisotropyNode = source.anisotropyNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhysicalNodeMaterial;\n"],"mappings":"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","ignoreList":[]}