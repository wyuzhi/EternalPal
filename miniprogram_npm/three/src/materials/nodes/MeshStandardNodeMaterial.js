import NodeMaterial from"./NodeMaterial.js";import{diffuseColor,metalness,roughness,specularColor,specularF90}from"../../nodes/core/PropertyNode.js";import{mix}from"../../nodes/math/MathNode.js";import{materialRoughness,materialMetalness}from"../../nodes/accessors/MaterialNode.js";import getRoughness from"../../nodes/functions/material/getRoughness.js";import PhysicalLightingModel from"../../nodes/functions/PhysicalLightingModel.js";import EnvironmentNode from"../../nodes/lighting/EnvironmentNode.js";import{float,vec3,vec4}from"../../nodes/tsl/TSLBase.js";import{MeshStandardMaterial}from"../MeshStandardMaterial.js";const _defaultValues=new MeshStandardMaterial;class MeshStandardNodeMaterial extends NodeMaterial{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(_defaultValues),this.setValues(e)}setupEnvironment(e){let s=super.setupEnvironment(e);return null===s&&e.environmentNode&&(s=e.environmentNode),s?new EnvironmentNode(s):null}setupLightingModel(){return new PhysicalLightingModel}setupSpecular(){const e=mix(vec3(.04),diffuseColor.rgb,metalness);specularColor.assign(e),specularF90.assign(1)}setupVariants(){const e=this.metalnessNode?float(this.metalnessNode):materialMetalness;metalness.assign(e);let s=this.roughnessNode?float(this.roughnessNode):materialRoughness;s=getRoughness({roughness:s}),roughness.assign(s),this.setupSpecular(),diffuseColor.assign(vec4(diffuseColor.rgb.mul(e.oneMinus()),diffuseColor.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}export default MeshStandardNodeMaterial;
//# sourceMappingURL=MeshStandardNodeMaterial.js.map