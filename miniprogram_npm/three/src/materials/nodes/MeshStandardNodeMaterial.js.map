{"version":3,"file":"node_modules/three/src/materials/nodes/MeshStandardNodeMaterial.js","names":["NodeMaterial","diffuseColor","metalness","roughness","specularColor","specularF90","mix","materialRoughness","materialMetalness","getRoughness","PhysicalLightingModel","EnvironmentNode","float","vec3","vec4","MeshStandardMaterial","_defaultValues","MeshStandardNodeMaterial","type","constructor","parameters","super","this","isMeshStandardNodeMaterial","lights","emissiveNode","metalnessNode","roughnessNode","setDefaultValues","setValues","setupEnvironment","builder","envNode","environmentNode","setupLightingModel","setupSpecular","specularColorNode","rgb","assign","setupVariants","mul","oneMinus","a","copy","source"],"sources":["node_modules/three/src/materials/nodes/MeshStandardNodeMaterial.js"],"sourcesContent":["import NodeMaterial from './NodeMaterial.js';\nimport { diffuseColor, metalness, roughness, specularColor, specularF90 } from '../../nodes/core/PropertyNode.js';\nimport { mix } from '../../nodes/math/MathNode.js';\nimport { materialRoughness, materialMetalness } from '../../nodes/accessors/MaterialNode.js';\nimport getRoughness from '../../nodes/functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';\nimport EnvironmentNode from '../../nodes/lighting/EnvironmentNode.js';\nimport { float, vec3, vec4 } from '../../nodes/tsl/TSLBase.js';\n\nimport { MeshStandardMaterial } from '../MeshStandardMaterial.js';\n\nconst _defaultValues = /*@__PURE__*/ new MeshStandardMaterial();\n\n/**\n * Node material version of {@link MeshStandardMaterial}.\n *\n * @augments NodeMaterial\n */\nclass MeshStandardNodeMaterial extends NodeMaterial {\n\n\tstatic get type() {\n\n\t\treturn 'MeshStandardNodeMaterial';\n\n\t}\n\n\t/**\n\t * Constructs a new mesh standard node material.\n\t *\n\t * @param {Object} [parameters] - The configuration parameter.\n\t */\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMeshStandardNodeMaterial = true;\n\n\t\t/**\n\t\t * Set to `true` because standard materials react on lights.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.lights = true;\n\n\t\t/**\n\t\t * The emissive color of standard materials is by default inferred from the `emissive`,\n\t\t * `emissiveIntensity` and `emissiveMap` properties. This node property allows to\n\t\t * overwrite the default and define the emissive color with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the emissive color but modify the existing\n\t\t * value instead, use {@link materialEmissive}.\n\t\t *\n\t\t * @type {?Node<vec3>}\n\t\t * @default null\n\t\t */\n\t\tthis.emissiveNode = null;\n\n\t\t/**\n\t\t * The metalness of standard materials is by default inferred from the `metalness`,\n\t\t * and `metalnessMap` properties. This node property allows to\n\t\t * overwrite the default and define the metalness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the metalness but modify the existing\n\t\t * value instead, use {@link materialMetalness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.metalnessNode = null;\n\n\t\t/**\n\t\t * The roughness of standard materials is by default inferred from the `roughness`,\n\t\t * and `roughnessMap` properties. This node property allows to\n\t\t * overwrite the default and define the roughness with a node instead.\n\t\t *\n\t\t * If you don't want to overwrite the roughness but modify the existing\n\t\t * value instead, use {@link materialRoughness}.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.roughnessNode = null;\n\n\t\tthis.setDefaultValues( _defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\t/**\n\t * Overwritten since this type of material uses {@link EnvironmentNode}\n\t * to implement the PBR (PMREM based) environment mapping. Besides, the\n\t * method honors `Scene.environment`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {?EnvironmentNode<vec3>} The environment node.\n\t */\n\tsetupEnvironment( builder ) {\n\n\t\tlet envNode = super.setupEnvironment( builder );\n\n\t\tif ( envNode === null && builder.environmentNode ) {\n\n\t\t\tenvNode = builder.environmentNode;\n\n\t\t}\n\n\t\treturn envNode ? new EnvironmentNode( envNode ) : null;\n\n\t}\n\n\t/**\n\t * Setups the lighting model.\n\t *\n\t * @return {PhysicalLightingModel} The lighting model.\n\t */\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel();\n\n\t}\n\n\t/**\n\t * Setups the specular related node variables.\n\t */\n\tsetupSpecular() {\n\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalness );\n\n\t\tspecularColor.assign( specularColorNode );\n\t\tspecularF90.assign( 1.0 );\n\n\t}\n\n\t/**\n\t * Setups the standard specific node variables.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetupVariants() {\n\n\t\t// METALNESS\n\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\n\n\t\tmetalness.assign( metalnessNode );\n\n\t\t// ROUGHNESS\n\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\n\n\t\troughness.assign( roughnessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tthis.setupSpecular();\n\n\t\t// DIFFUSE COLOR\n\n\t\tdiffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.emissiveNode = source.emissiveNode;\n\n\t\tthis.metalnessNode = source.metalnessNode;\n\t\tthis.roughnessNode = source.roughnessNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshStandardNodeMaterial;\n"],"mappings":"OAAOA,iBAAkB,2BAChBC,aAAcC,UAAWC,UAAWC,cAAeC,gBAAmB,0CACtEC,QAAW,sCACXC,kBAAmBC,sBAAyB,+CAC9CC,iBAAkB,wDAClBC,0BAA2B,wDAC3BC,oBAAqB,iDACnBC,MAAOC,KAAMC,SAAY,oCAEzBC,yBAA4B,6BAErC,MAAMC,eAA+B,IAAID,qBAOzC,MAAME,iCAAiCjB,aAEtC,eAAWkB,GAEV,MAAO,0BAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKC,4BAA6B,EAQlCD,KAAKE,QAAS,EAadF,KAAKG,aAAe,KAapBH,KAAKI,cAAgB,KAarBJ,KAAKK,cAAgB,KAErBL,KAAKM,iBAAkBZ,gBAEvBM,KAAKO,UAAWT,EAEjB,CAUA,gBAAAU,CAAkBC,GAEjB,IAAIC,EAAUX,MAAMS,iBAAkBC,GAQtC,OANiB,OAAZC,GAAoBD,EAAQE,kBAEhCD,EAAUD,EAAQE,iBAIZD,EAAU,IAAIrB,gBAAiBqB,GAAY,IAEnD,CAOA,kBAAAE,GAEC,OAAO,IAAIxB,qBAEZ,CAKA,aAAAyB,GAEC,MAAMC,EAAoB9B,IAAKO,KAAM,KAAQZ,aAAaoC,IAAKnC,WAE/DE,cAAckC,OAAQF,GACtB/B,YAAYiC,OAAQ,EAErB,CAOA,aAAAC,GAIC,MAAMb,EAAgBJ,KAAKI,cAAgBd,MAAOU,KAAKI,eAAkBlB,kBAEzEN,UAAUoC,OAAQZ,GAIlB,IAAIC,EAAgBL,KAAKK,cAAgBf,MAAOU,KAAKK,eAAkBpB,kBACvEoB,EAAgBlB,aAAc,CAAEN,UAAWwB,IAE3CxB,UAAUmC,OAAQX,GAIlBL,KAAKa,gBAILlC,aAAaqC,OAAQxB,KAAMb,aAAaoC,IAAIG,IAAKd,EAAce,YAAcxC,aAAayC,GAE3F,CAEA,IAAAC,CAAMC,GAOL,OALAtB,KAAKG,aAAemB,EAAOnB,aAE3BH,KAAKI,cAAgBkB,EAAOlB,cAC5BJ,KAAKK,cAAgBiB,EAAOjB,cAErBN,MAAMsB,KAAMC,EAEpB,iBAIc3B","ignoreList":[]}