const refreshUniforms=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","aoMapIntensity","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveIntensity","emissiveMap","envMap","envMapIntensity","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","lightMapIntensity","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"],_lightsCache=new WeakMap;class NodeMaterialObserver{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=refreshUniforms,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}needsVelocity(e){const t=e.getMRT();return null!==t&&t.has("velocity")}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:n,object:i}=e;if(t={material:this.getMaterialData(n),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:n}=e.context;t.bufferWidth=r,t.bufferHeight=n}t.lights=this.getLightsData(e.lightsNode.getLights()),this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const n=e[r];t[r]={version:n.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.overrideNodes.modelViewMatrix||null!==e.renderer.overrideNodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const n=e[r];null!=n&&("object"==typeof n&&void 0!==n.clone?!0===n.isTexture?t[r]={id:n.id,version:n.version}:t[r]=n.clone():t[r]=n)}return t}equals(e,t){const{object:r,material:n,geometry:i}=e,s=this.getRenderObjectData(e);if(!0!==s.worldMatrix.equals(r.matrixWorld))return s.worldMatrix.copy(r.matrixWorld),!1;const a=s.material;for(const e in a){const t=a[e],r=n[e];if(void 0!==t.equals){if(!1===t.equals(r))return t.copy(r),!1}else if(!0===r.isTexture){if(t.id!==r.id||t.version!==r.version)return t.id=r.id,t.version=r.version,!1}else if(t!==r)return a[e]=r,!1}if(a.transmission>0){const{width:t,height:r}=e.context;if(s.bufferWidth!==t||s.bufferHeight!==r)return s.bufferWidth=t,s.bufferHeight=r,!1}const o=s.geometry,l=i.attributes,c=o.attributes,d=Object.keys(c),h=Object.keys(l);if(o.id!==i.id)return o.id=i.id,!1;if(d.length!==h.length)return s.geometry.attributes=this.getAttributesData(l),!1;for(const e of d){const t=c[e],r=l[e];if(void 0===r)return delete c[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const u=i.index,g=o.indexVersion,f=u?u.version:null;if(g!==f)return o.indexVersion=f,!1;if(o.drawRange.start!==i.drawRange.start||o.drawRange.count!==i.drawRange.count)return o.drawRange.start=i.drawRange.start,o.drawRange.count=i.drawRange.count,!1;if(s.morphTargetInfluences){let e=!1;for(let t=0;t<s.morphTargetInfluences.length;t++)s.morphTargetInfluences[t]!==r.morphTargetInfluences[t]&&(e=!0);if(e)return!0}if(s.lights)for(let e=0;e<t.length;e++)if(s.lights[e].map!==t[e].map)return!1;return s.center&&!1===s.center.equals(r.center)?(s.center.copy(r.center),!0):(null!==e.bundle&&(s.version=e.bundle.version),!0)}getLightsData(e){const t=[];for(const r of e)!0===r.isSpotLight&&null!==r.map&&t.push({map:r.map.version});return t}getLights(e,t){if(_lightsCache.has(e)){const r=_lightsCache.get(e);if(r.renderId===t)return r.lightsData}const r=this.getLightsData(e.getLights());return _lightsCache.set(e,{renderId:t,lightsData:r}),r}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e)||this.needsVelocity(t.renderer))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const n=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(n||i)return!1;const s=this.getLights(e.lightsNode,r);return!0!==this.equals(e,s)}}export default NodeMaterialObserver;
//# sourceMappingURL=NodeMaterialObserver.js.map