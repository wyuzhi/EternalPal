{"version":3,"file":"node_modules/three/src/math/Box2.js","names":["Vector2","_vector","Box2","constructor","min","Infinity","max","this","isBox2","set","copy","setFromPoints","points","makeEmpty","i","il","length","expandByPoint","setFromCenterAndSize","center","size","halfSize","multiplyScalar","sub","add","clone","box","x","y","isEmpty","getCenter","target","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","clamp","distanceToPoint","distanceTo","intersect","union","translate","offset","equals"],"sources":["node_modules/three/src/math/Box2.js"],"sourcesContent":["import { Vector2 } from './Vector2.js';\n\nconst _vector = /*@__PURE__*/ new Vector2();\n\n/**\n * Represents an axis-aligned bounding box (AABB) in 2D space.\n */\nclass Box2 {\n\n\t/**\n\t * Constructs a new bounding box.\n\t *\n\t * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.\n\t * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\n\t */\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBox2 = true;\n\n\t\t/**\n\t\t * The lower boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.min = min;\n\n\t\t/**\n\t\t * The upper boundary of the box.\n\t\t *\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis.max = max;\n\n\t}\n\n\t/**\n\t * Sets the lower and upper boundaries of this box.\n\t * Please note that this method only copies the values from the given objects.\n\t *\n\t * @param {Vector2} min - The lower boundary of the box.\n\t * @param {Vector2} max - The upper boundary of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the upper and lower bounds of this box so it encloses the position data\n\t * in the given array.\n\t *\n\t * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Centers this box on the given center vector and sets this box's width, height and\n\t * depth to the given size values.\n\t *\n\t * @param {Vector2} center - The center of the box.\n\t * @param {Vector2} size - The x and y dimensions of the box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new box with copied values from this instance.\n\t *\n\t * @return {Box2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\t/**\n\t * Copies the values of the given box to this instance.\n\t *\n\t * @param {Box2} box - The box to copy.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Makes this box empty which means in encloses a zero space in 2D.\n\t *\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns true if this box includes zero points within its bounds.\n\t * Note that a box with equal lower and upper bounds still includes one\n\t * point, the one both bounds share.\n\t *\n\t * @return {boolean} Whether this box is empty or not.\n\t */\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\t/**\n\t * Returns the center point of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The center point.\n\t */\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\t/**\n\t * Returns the dimensions of this box.\n\t *\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The size.\n\t */\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\t/**\n\t * Expands the boundaries of this box to include the given point.\n\t *\n\t * @param {Vector2} point - The point that should be included by the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands this box equilaterally by the given vector. The width of this\n\t * box will be expanded by the x component of the vector in both\n\t * directions. The height of this box will be expanded by the y component of\n\t * the vector in both directions.\n\t *\n\t * @param {Vector2} vector - The vector that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Expands each dimension of the box by the given scalar. If negative, the\n\t * dimensions of the box will be contracted.\n\t *\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\n\t *\n\t * @param {Vector2} point - The point to test.\n\t * @return {boolean} Whether the bounding box contains the given point or not.\n\t */\n\tcontainsPoint( point ) {\n\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\n\t * If this box and the given one are identical, this function also returns `true`.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\n\t */\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Returns a point as a proportion of this box's width and height.\n\t *\n\t * @param {Vector2} point - A point in 2D space.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} A point as a proportion of this box's width and height.\n\t */\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if the given bounding box intersects with this bounding box.\n\t *\n\t * @param {Box2} box - The bounding box to test.\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\n\t */\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y;\n\n\t}\n\n\t/**\n\t * Clamps the given point within the bounds of this box.\n\t *\n\t * @param {Vector2} point - The point to clamp.\n\t * @param {Vector2} target - The target vector that is used to store the method's result.\n\t * @return {Vector2} The clamped point.\n\t */\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\t/**\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\n\t * the given point lies inside of this box, the distance will be `0`.\n\t *\n\t * @param {Vector2} point - The point to compute the distance to.\n\t * @return {number} The euclidean distance.\n\t */\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\n\n\t}\n\n\t/**\n\t * Computes the intersection of this bounding box and the given one, setting the upper\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\n\t * there's no overlap, makes this box empty.\n\t *\n\t * @param {Box2} box - The bounding box to intersect with.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes the union of this box and another and the given one, setting the upper\n\t * bound of this box to the greater of the two boxes' upper bounds and the\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\n\t *\n\t * @param {Box2} box - The bounding box that will be unioned with this instance.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\n\t * effectively moving it in 2D space.\n\t *\n\t * @param {Vector2} offset - The offset that should be used to translate the bounding box.\n\t * @return {Box2} A reference to this bounding box.\n\t */\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this bounding box is equal with the given one.\n\t *\n\t * @param {Box2} box - The box to test for equality.\n\t * @return {boolean} Whether this bounding box is equal with the given one.\n\t */\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nexport { Box2 };\n"],"mappings":"OAASA,YAAe,eAExB,MAAMC,QAAwB,IAAID,QAKlC,MAAME,KAQL,WAAAC,CAAaC,EAAM,IAAIJ,QAAWK,IAAYA,KAAYC,EAAM,IAAIN,SAAWK,KAAYA,MAS1FE,KAAKC,QAAS,EAOdD,KAAKH,IAAMA,EAOXG,KAAKD,IAAMA,CAEZ,CAUA,GAAAG,CAAKL,EAAKE,GAKT,OAHAC,KAAKH,IAAIM,KAAMN,GACfG,KAAKD,IAAII,KAAMJ,GAERC,IAER,CASA,aAAAI,CAAeC,GAEdL,KAAKM,YAEL,IAAM,IAAIC,EAAI,EAAGC,EAAKH,EAAOI,OAAQF,EAAIC,EAAID,IAE5CP,KAAKU,cAAeL,EAAQE,IAI7B,OAAOP,IAER,CAUA,oBAAAW,CAAsBC,EAAQC,GAE7B,MAAMC,EAAWpB,QAAQS,KAAMU,GAAOE,eAAgB,IAItD,OAHAf,KAAKH,IAAIM,KAAMS,GAASI,IAAKF,GAC7Bd,KAAKD,IAAII,KAAMS,GAASK,IAAKH,GAEtBd,IAER,CAOA,KAAAkB,GAEC,OAAO,IAAIlB,KAAKJ,aAAcO,KAAMH,KAErC,CAQA,IAAAG,CAAMgB,GAKL,OAHAnB,KAAKH,IAAIM,KAAMgB,EAAItB,KACnBG,KAAKD,IAAII,KAAMgB,EAAIpB,KAEZC,IAER,CAOA,SAAAM,GAKC,OAHAN,KAAKH,IAAIuB,EAAIpB,KAAKH,IAAIwB,EAAMvB,IAC5BE,KAAKD,IAAIqB,EAAIpB,KAAKD,IAAIsB,GAAMvB,IAErBE,IAER,CASA,OAAAsB,GAIC,OAAStB,KAAKD,IAAIqB,EAAIpB,KAAKH,IAAIuB,GAASpB,KAAKD,IAAIsB,EAAIrB,KAAKH,IAAIwB,CAE/D,CAQA,SAAAE,CAAWC,GAEV,OAAOxB,KAAKsB,UAAYE,EAAOtB,IAAK,EAAG,GAAMsB,EAAOC,WAAYzB,KAAKH,IAAKG,KAAKD,KAAMgB,eAAgB,GAEtG,CAQA,OAAAW,CAASF,GAER,OAAOxB,KAAKsB,UAAYE,EAAOtB,IAAK,EAAG,GAAMsB,EAAOG,WAAY3B,KAAKD,IAAKC,KAAKH,IAEhF,CAQA,aAAAa,CAAekB,GAKd,OAHA5B,KAAKH,IAAIA,IAAK+B,GACd5B,KAAKD,IAAIA,IAAK6B,GAEP5B,IAER,CAWA,cAAA6B,CAAgBC,GAKf,OAHA9B,KAAKH,IAAImB,IAAKc,GACd9B,KAAKD,IAAIkB,IAAKa,GAEP9B,IAER,CASA,cAAA+B,CAAgBC,GAKf,OAHAhC,KAAKH,IAAIoC,WAAaD,GACtBhC,KAAKD,IAAIkC,UAAWD,GAEbhC,IAER,CAQA,aAAAkC,CAAeN,GAEd,OAAOA,EAAMR,GAAKpB,KAAKH,IAAIuB,GAAKQ,EAAMR,GAAKpB,KAAKD,IAAIqB,GACnDQ,EAAMP,GAAKrB,KAAKH,IAAIwB,GAAKO,EAAMP,GAAKrB,KAAKD,IAAIsB,CAE/C,CASA,WAAAc,CAAahB,GAEZ,OAAOnB,KAAKH,IAAIuB,GAAKD,EAAItB,IAAIuB,GAAKD,EAAIpB,IAAIqB,GAAKpB,KAAKD,IAAIqB,GACvDpB,KAAKH,IAAIwB,GAAKF,EAAItB,IAAIwB,GAAKF,EAAIpB,IAAIsB,GAAKrB,KAAKD,IAAIsB,CAEnD,CASA,YAAAe,CAAcR,EAAOJ,GAKpB,OAAOA,EAAOtB,KACX0B,EAAMR,EAAIpB,KAAKH,IAAIuB,IAAQpB,KAAKD,IAAIqB,EAAIpB,KAAKH,IAAIuB,IACjDQ,EAAMP,EAAIrB,KAAKH,IAAIwB,IAAQrB,KAAKD,IAAIsB,EAAIrB,KAAKH,IAAIwB,GAGrD,CAQA,aAAAgB,CAAelB,GAId,OAAOA,EAAIpB,IAAIqB,GAAKpB,KAAKH,IAAIuB,GAAKD,EAAItB,IAAIuB,GAAKpB,KAAKD,IAAIqB,GACvDD,EAAIpB,IAAIsB,GAAKrB,KAAKH,IAAIwB,GAAKF,EAAItB,IAAIwB,GAAKrB,KAAKD,IAAIsB,CAEnD,CASA,UAAAiB,CAAYV,EAAOJ,GAElB,OAAOA,EAAOrB,KAAMyB,GAAQW,MAAOvC,KAAKH,IAAKG,KAAKD,IAEnD,CASA,eAAAyC,CAAiBZ,GAEhB,OAAO5B,KAAKsC,WAAYV,EAAOlC,SAAU+C,WAAYb,EAEtD,CAWA,SAAAc,CAAWvB,GAOV,OALAnB,KAAKH,IAAIE,IAAKoB,EAAItB,KAClBG,KAAKD,IAAIF,IAAKsB,EAAIpB,KAEbC,KAAKsB,WAAYtB,KAAKM,YAEpBN,IAER,CAUA,KAAA2C,CAAOxB,GAKN,OAHAnB,KAAKH,IAAIA,IAAKsB,EAAItB,KAClBG,KAAKD,IAAIA,IAAKoB,EAAIpB,KAEXC,IAER,CASA,SAAA4C,CAAWC,GAKV,OAHA7C,KAAKH,IAAIoB,IAAK4B,GACd7C,KAAKD,IAAIkB,IAAK4B,GAEP7C,IAER,CAQA,MAAA8C,CAAQ3B,GAEP,OAAOA,EAAItB,IAAIiD,OAAQ9C,KAAKH,MAASsB,EAAIpB,IAAI+C,OAAQ9C,KAAKD,IAE3D,SAIQJ","ignoreList":[]}