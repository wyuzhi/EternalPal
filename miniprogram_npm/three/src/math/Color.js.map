{"version":3,"file":"node_modules/three/src/math/Color.js","names":["clamp","euclideanModulo","lerp","ColorManagement","SRGBToLinear","LinearToSRGB","SRGBColorSpace","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","h","s","l","_hslB","hue2rgb","p","q","t","Color","constructor","r","g","b","this","isColor","set","undefined","value","copy","setHex","setStyle","setRGB","setScalar","scalar","hex","colorSpace","Math","floor","colorSpaceToWorking","workingColorSpace","setHSL","style","handleAlpha","string","parseFloat","console","warn","m","exec","color","name","components","min","parseInt","size","length","charAt","setColorName","toLowerCase","clone","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","workingToColorSpace","_color","round","getHexString","toString","slice","getHSL","target","max","hue","saturation","lightness","delta","getRGB","getStyle","toFixed","offsetHSL","add","addColors","color1","color2","addScalar","sub","multiply","multiplyScalar","alpha","lerpColors","lerpHSL","setFromVector3","v","x","y","z","applyMatrix3","e","elements","equals","c","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","toJSON","Symbol","iterator","NAMES"],"sources":["node_modules/three/src/math/Color.js"],"sourcesContent":["import { clamp, euclideanModulo, lerp } from './MathUtils.js';\nimport { ColorManagement, SRGBToLinear, LinearToSRGB } from './ColorManagement.js';\nimport { SRGBColorSpace } from '../constants.js';\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\n/**\n * A Color instance is represented by RGB components in the linear <i>working\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\n * strings) are converted to the working color space automatically.\n *\n * ```js\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setHex( 0x112233 );\n * ```\n * Source color spaces may be specified explicitly, to ensure correct conversions.\n * ```js\n * // assumed already LinearSRGBColorSpace; no conversion\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\n *\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\n * ```\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\n * see <i>Color management</i>. Iterating through a Color instance will yield\n * its components (r, g, b) in the corresponding order. A Color can be initialised\n * in any of the following ways:\n * ```js\n * //empty constructor - will default white\n * const color1 = new THREE.Color();\n *\n * //Hexadecimal color (recommended)\n * const color2 = new THREE.Color( 0xff0000 );\n *\n * //RGB string\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\n *\n * //X11 color name - all 140 color names are supported.\n * //Note the lack of CamelCase in the name\n * const color5 = new THREE.Color( 'skyblue' );\n * //HSL string\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\n *\n * //Separate RGB values between 0 and 1\n * const color7 = new THREE.Color( 1, 0, 0 );\n * ```\n */\nclass Color {\n\n\t/**\n\t * Constructs a new color.\n\t *\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\n\t * and that method is used throughout the rest of the documentation.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t */\n\tconstructor( r, g, b ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isColor = true;\n\n\t\t/**\n\t\t * The red component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.r = 1;\n\n\t\t/**\n\t\t * The green component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.g = 1;\n\n\t\t/**\n\t\t * The blue component.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\t/**\n\t * Sets the colors's components from the given values.\n\t *\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\n\t * @param {number} [g] - The green component.\n\t * @param {number} [b] - The blue component.\n\t * @return {Color} A reference to this color.\n\t */\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the colors's components to the given scalar value.\n\t *\n\t * @param {number} scalar - The scalar value.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a hexadecimal value.\n\t *\n\t * @param {number} hex - The hexadecimal value.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from RGB values.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\n\t * all 140 color names are supported).\n\t *\n\t * @param {string} style - Color as a CSS-style string.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\n\t * you don't need the other CSS-style formats.\n\t *\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\n\t * ```js\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\n\t * ```\n\t *\n\t * @param {string} style - The color name.\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new color with copied values from this instance.\n\t *\n\t * @return {Color} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\t/**\n\t * Copies the values of the given color to this instance.\n\t *\n\t * @param {Color} color - The color to copy.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the given color into this color, and then converts this color from\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @param {Color} color - The color to copy/convert.\n\t * @return {Color} A reference to this color.\n\t */\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\n\t *\n\t * @return {Color} A reference to this color.\n\t */\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {number} The hexadecimal value.\n\t */\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\t/**\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The hexadecimal value as a string.\n\t */\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\t/**\n\t * Converts the colors RGB values into the HSL format and stores them into the\n\t * given target object.\n\t *\n\t * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\n\t */\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the RGB values of this color and stores them into the given target object.\n\t *\n\t * @param {Color} target - The target color that is used to store the method's result.\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\n\t * @return {Color} The RGB representation of this color.\n\t */\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\n\t *\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\n\t * @return {string} The CSS representation of this color.\n\t */\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\t/**\n\t * Adds the given HSL values to this color's values.\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\n\t * and then converts the color back to RGB.\n\t *\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\n\t * @return {Color} A reference to this color.\n\t */\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given color to the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to add.\n\t * @return {Color} A reference to this color.\n\t */\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the RGB values of the given colors and stores the result in this instance.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @return {Color} A reference to this color.\n\t */\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Color} A reference to this color.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to subtract.\n\t * @return {Color} A reference to this color.\n\t */\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\n\t *\n\t * @param {Color} color - The color to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with the RGB values of this color.\n\t *\n\t * @param {number} s - The scalar to multiply.\n\t * @return {Color} A reference to this color.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\n\t * given color. The alpha argument can be thought of as the ratio between\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given colors and stores the result in this instance.\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\n\t * is the first and `1.0` is the second color.\n\t *\n\t * @param {Color} color1 - The first color.\n\t * @param {Color} color2 - The second color.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\n\t * from one color to the other, but instead going through all the hues in between\n\t * those two colors. The alpha argument can be thought of as the ratio between\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\n\t *\n\t * @param {Color} color - The color to converge on.\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\n\t * @return {Color} A reference to this color.\n\t */\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the color's RGB components from the given 3D vector.\n\t *\n\t * @param {Vector3} v - The vector to set.\n\t * @return {Color} A reference to this color.\n\t */\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Transforms this color with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix.\n\t * @return {Color} A reference to this color.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this color is equal with the given one.\n\t *\n\t * @param {Color} c - The color to test for equality.\n\t * @return {boolean} Whether this bounding color is equal with the given one.\n\t */\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\t/**\n\t * Sets this color's RGB components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the RGB values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the RGB components of this color to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The color components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this color from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Color} A reference to this color.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the color\n\t * as a hexadecimal value.\n\t *\n\t * @return {number} The hexadecimal value.\n\t */\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\n/**\n * A dictionary with X11 color names.\n *\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\n *\n * @static\n * @type {Object}\n */\nColor.NAMES = _colorKeywords;\n\nexport { Color };\n"],"mappings":"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","ignoreList":[]}