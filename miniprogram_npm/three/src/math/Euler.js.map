{"version":3,"file":"node_modules/three/src/math/Euler.js","names":["Quaternion","Matrix4","clamp","_matrix","_quaternion","Euler","constructor","x","y","z","order","DEFAULT_ORDER","this","isEuler","_x","_y","_z","_order","value","_onChangeCallback","set","clone","copy","euler","setFromRotationMatrix","m","update","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","Math","asin","abs","atan2","console","warn","setFromQuaternion","q","makeRotationFromQuaternion","setFromVector3","v","reorder","newOrder","setFromEuler","equals","fromArray","array","undefined","toArray","offset","_onChange","callback","Symbol","iterator"],"sources":["node_modules/three/src/math/Euler.js"],"sourcesContent":["import { Quaternion } from './Quaternion.js';\nimport { Matrix4 } from './Matrix4.js';\nimport { clamp } from './MathUtils.js';\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\n/**\n * A class representing Euler angles.\n *\n * Euler angles describe a rotational transformation by rotating an object on\n * its various axes in specified amounts per axis, and a specified axis\n * order.\n *\n * Iterating through an instance will yield its components (x, y, z,\n * order) in the corresponding order.\n *\n * ```js\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\n * const b = new THREE.Vector3( 1, 0, 1 );\n * b.applyEuler(a);\n * ```\n */\nclass Euler {\n\n\t/**\n\t * Constructs a new euler instance.\n\t *\n\t * @param {number} [x=0] - The angle of the x axis in radians.\n\t * @param {number} [y=0] - The angle of the y axis in radians.\n\t * @param {number} [z=0] - The angle of the z axis in radians.\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\t/**\n\t * The angle of the x axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the y axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The angle of the z axis in radians.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * A string representing the order that the rotations are applied.\n\t *\n\t * @type {string}\n\t * @default 'XYZ'\n\t */\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the Euler components.\n\t *\n\t * @param {number} x - The angle of the x axis in radians.\n\t * @param {number} y - The angle of the y axis in radians.\n\t * @param {number} z - The angle of the z axis in radians.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new Euler instance with copied values from this instance.\n\t *\n\t * @return {Euler} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\t/**\n\t * Copies the values of the given Euler instance to this instance.\n\t *\n\t * @param {Euler} euler - The Euler instance to copy.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from a normalized quaternion.\n\t *\n\t * @param {Quaternion} q - A normalized Quaternion.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t}\n\n\t/**\n\t * Sets the angles of this Euler instance from the given vector.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\t/**\n\t * Resets the euler angle with a new order by creating a quaternion from this\n\t * euler angle and then setting this euler angle with the quaternion and the\n\t * new order.\n\t *\n\t * Warning: This discards revolution information.\n\t *\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\treorder( newOrder ) {\n\n\t\t_quaternion.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\n\n\t}\n\n\t/**\n\t * Returns `true` if this Euler instance is equal with the given one.\n\t *\n\t * @param {Euler} euler - The Euler instance to test for equality.\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\n\t */\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\t/**\n\t * Sets this Euler instance's components to values from the given array. The first three\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\n\t * defines the Euler order.\n\t *\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\n\t * @return {Euler} A reference to this Euler instance.\n\t */\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number,number,number,string>} The Euler components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\n/**\n * The default Euler angle order.\n *\n * @static\n * @type {string}\n * @default 'XYZ'\n */\nEuler.DEFAULT_ORDER = 'XYZ';\n\nexport { Euler };\n"],"mappings":"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","ignoreList":[]}