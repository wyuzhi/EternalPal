import{WebGLCoordinateSystem,WebGPUCoordinateSystem}from"../constants.js";import{Vector2}from"./Vector2.js";import{Vector3}from"./Vector3.js";import{Sphere}from"./Sphere.js";import{Plane}from"./Plane.js";const _sphere=new Sphere,_defaultSpriteCenter=new Vector2(.5,.5),_vector=new Vector3;class Frustum{constructor(e=new Plane,t=new Plane,n=new Plane,r=new Plane,o=new Plane,s=new Plane){this.planes=[e,t,n,r,o,s]}set(e,t,n,r,o,s){const i=this.planes;return i[0].copy(e),i[1].copy(t),i[2].copy(n),i[3].copy(r),i[4].copy(o),i[5].copy(s),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=WebGLCoordinateSystem,n=!1){const r=this.planes,o=e.elements,s=o[0],i=o[1],p=o[2],a=o[3],c=o[4],m=o[5],l=o[6],h=o[7],u=o[8],d=o[9],y=o[10],S=o[11],f=o[12],x=o[13],C=o[14],P=o[15];if(r[0].setComponents(a-s,h-c,S-u,P-f).normalize(),r[1].setComponents(a+s,h+c,S+u,P+f).normalize(),r[2].setComponents(a+i,h+m,S+d,P+x).normalize(),r[3].setComponents(a-i,h-m,S-d,P-x).normalize(),n)r[4].setComponents(p,l,y,C).normalize(),r[5].setComponents(a-p,h-l,S-y,P-C).normalize();else if(r[4].setComponents(a-p,h-l,S-y,P-C).normalize(),t===WebGLCoordinateSystem)r[5].setComponents(a+p,h+l,S+y,P+C).normalize();else{if(t!==WebGPUCoordinateSystem)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);r[5].setComponents(p,l,y,C).normalize()}return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),_sphere.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),_sphere.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(_sphere)}intersectsSprite(e){_sphere.center.set(0,0,0);const t=_defaultSpriteCenter.distanceTo(e.center);return _sphere.radius=.7071067811865476+t,_sphere.applyMatrix4(e.matrixWorld),this.intersectsSphere(_sphere)}intersectsSphere(e){const t=this.planes,n=e.center,r=-e.radius;for(let e=0;e<6;e++){if(t[e].distanceToPoint(n)<r)return!1}return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];if(_vector.x=r.normal.x>0?e.max.x:e.min.x,_vector.y=r.normal.y>0?e.max.y:e.min.y,_vector.z=r.normal.z>0?e.max.z:e.min.z,r.distanceToPoint(_vector)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}export{Frustum};
//# sourceMappingURL=Frustum.js.map