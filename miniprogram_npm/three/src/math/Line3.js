import{Vector3}from"./Vector3.js";import{clamp}from"./MathUtils.js";const _startP=new Vector3,_startEnd=new Vector3,_d1=new Vector3,_d2=new Vector3,_r=new Vector3,_c1=new Vector3,_c2=new Vector3;class Line3{constructor(t=new Vector3,s=new Vector3){this.start=t,this.end=s}set(t,s){return this.start.copy(t),this.end.copy(s),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,s){return this.delta(s).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,s){_startP.subVectors(t,this.start),_startEnd.subVectors(this.end,this.start);const r=_startEnd.dot(_startEnd);let e=_startEnd.dot(_startP)/r;return s&&(e=clamp(e,0,1)),e}closestPointToPoint(t,s,r){const e=this.closestPointToPointParameter(t,s);return this.delta(r).multiplyScalar(e).add(this.start)}distanceSqToLine3(t,s=_c1,r=_c2){const e=1e-8*1e-8;let a,o;const n=this.start,c=t.start,d=this.end,i=t.end;_d1.subVectors(d,n),_d2.subVectors(i,c),_r.subVectors(n,c);const l=_d1.dot(_d1),h=_d2.dot(_d2),u=_d2.dot(_r);if(l<=e&&h<=e)return s.copy(n),r.copy(c),s.sub(r),s.dot(s);if(l<=e)a=0,o=u/h,o=clamp(o,0,1);else{const t=_d1.dot(_r);if(h<=e)o=0,a=clamp(-t/l,0,1);else{const s=_d1.dot(_d2),r=l*h-s*s;a=0!==r?clamp((s*u-t*h)/r,0,1):0,o=(s*a+u)/h,o<0?(o=0,a=clamp(-t/l,0,1)):o>1&&(o=1,a=clamp((s-t)/l,0,1))}}return s.copy(n).add(_d1.multiplyScalar(a)),r.copy(c).add(_d2.multiplyScalar(o)),s.sub(r),s.dot(s)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}export{Line3};
//# sourceMappingURL=Line3.js.map