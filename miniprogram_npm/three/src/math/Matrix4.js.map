{"version":3,"file":"node_modules/three/src/math/Matrix4.js","names":["WebGLCoordinateSystem","WebGPUCoordinateSystem","Vector3","Matrix4","constructor","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","prototype","isMatrix4","this","elements","undefined","set","te","identity","clone","fromArray","copy","m","me","copyPosition","setFromMatrix3","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","x","y","z","extractRotation","scaleX","_v1","length","scaleY","scaleZ","makeRotationFromEuler","euler","a","Math","cos","b","sin","c","d","e","f","order","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","q","compose","_zero","_one","lookAt","eye","target","up","_z","subVectors","lengthSq","normalize","_x","crossVectors","abs","_y","multiply","multiplyMatrices","premultiply","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyScalar","s","determinant","transpose","tmp","setPosition","isVector3","invert","t11","t12","t13","t14","det","detInv","scale","v","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","sqrt","max","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","axis","angle","t","tx","ty","makeScale","makeShear","xy","xz","yx","yz","zx","zy","position","quaternion","w","_w","x2","y2","z2","xx","yy","zz","wx","wy","wz","sx","sy","sz","decompose","_m1","invSX","invSY","invSZ","setFromRotationMatrix","makePerspective","left","right","top","bottom","near","far","coordinateSystem","reversedDepth","Error","makeOrthographic","equals","matrix","i","array","offset","toArray"],"sources":["node_modules/three/src/math/Matrix4.js"],"sourcesContent":["import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\nimport { Vector3 } from './Vector3.js';\n\n/**\n * Represents a 4x4 matrix.\n *\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\n *\n * This allows a 3D vector representing a point in 3D space to undergo\n * transformations such as translation, rotation, shear, scale, reflection,\n * orthogonal or perspective projection and so on, by being multiplied by the\n * matrix. This is known as `applying` the matrix to the vector.\n *\n * A Note on Row-Major and Column-Major Ordering:\n *\n * The constructor and {@link Matrix3#set} method take arguments in\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\n * This means that calling:\n * ```js\n * const m = new THREE.Matrix4();\n * m.set( 11, 12, 13, 14,\n *        21, 22, 23, 24,\n *        31, 32, 33, 34,\n *        41, 42, 43, 44 );\n * ```\n * will result in the elements array containing:\n * ```js\n * m.elements = [ 11, 21, 31, 41,\n *                12, 22, 32, 42,\n *                13, 23, 33, 43,\n *                14, 24, 34, 44 ];\n * ```\n * and internally all calculations are performed using column-major ordering.\n * However, as the actual ordering makes no difference mathematically and\n * most people are used to thinking about matrices in row-major order, the\n * three.js documentation shows matrices in row-major order. Just bear in\n * mind that if you are reading the source code, you'll have to take the\n * transpose of any matrices outlined here to make sense of the calculations.\n */\nclass Matrix4 {\n\n\t/**\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\n\t * in row-major order. If no arguments are provided, the constructor\n\t * initializes the matrix as an identity matrix.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t */\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\t/**\n\t\t * A column-major list of matrix values.\n\t\t *\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix.The arguments are supposed to be\n\t * in row-major order.\n\t *\n\t * @param {number} [n11] - 1-1 matrix element.\n\t * @param {number} [n12] - 1-2 matrix element.\n\t * @param {number} [n13] - 1-3 matrix element.\n\t * @param {number} [n14] - 1-4 matrix element.\n\t * @param {number} [n21] - 2-1 matrix element.\n\t * @param {number} [n22] - 2-2 matrix element.\n\t * @param {number} [n23] - 2-3 matrix element.\n\t * @param {number} [n24] - 2-4 matrix element.\n\t * @param {number} [n31] - 3-1 matrix element.\n\t * @param {number} [n32] - 3-2 matrix element.\n\t * @param {number} [n33] - 3-3 matrix element.\n\t * @param {number} [n34] - 3-4 matrix element.\n\t * @param {number} [n41] - 4-1 matrix element.\n\t * @param {number} [n42] - 4-2 matrix element.\n\t * @param {number} [n43] - 4-3 matrix element.\n\t * @param {number} [n44] - 4-4 matrix element.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the 4x4 identity matrix.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a matrix with copied values from this instance.\n\t *\n\t * @return {Matrix4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\t/**\n\t * Copies the values of the given matrix to this instance.\n\t *\n\t * @param {Matrix4} m - The matrix to copy.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Copies the translation component of the given matrix\n\t * into this matrix's translation component.\n\t *\n\t * @param {Matrix4} m - The matrix to copy the translation component.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the basis of this matrix into the three axis vectors provided.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the given basis vectors to this matrix.\n\t *\n\t * @param {Vector3} xAxis - The basis's x axis.\n\t * @param {Vector3} yAxis - The basis's y axis.\n\t * @param {Vector3} zAxis - The basis's z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Extracts the rotation component of the given matrix\n\t * into this matrix's rotation component.\n\t *\n\t * Note: This method does not support reflection matrices.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\textractRotation( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\n\t * the rotation specified by the given Euler angles. The rest of\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\n\t * for a complete list.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the rotation component of this matrix to the rotation specified by\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\n\t * The rest of the matrix is set to the identity.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\t/**\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\n\t * `target`, and oriented by the up-direction.\n\t *\n\t * @param {Vector3} eye - The eye vector.\n\t * @param {Vector3} target - The target vector.\n\t * @param {Vector3} up - The up vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Post-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The matrix to multiply with.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\t/**\n\t * Multiples the given 4x4 matrices and stores the result\n\t * in this matrix.\n\t *\n\t * @param {Matrix4} a - The first matrix.\n\t * @param {Matrix4} b - The second matrix.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies every component of the matrix by the given scalar.\n\t *\n\t * @param {number} s - The scalar.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Computes and returns the determinant of this matrix.\n\t *\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\n\t *\n\t * @return {number} The determinant.\n\t */\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\t/**\n\t * Transposes this matrix in place.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the position component for this matrix from the given vector,\n\t * without affecting the rest of the matrix.\n\t *\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\n\t * @param {number} y - The y component of the vector.\n\t * @param {number} z - The z component of the vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\n\t * a zero matrix instead.\n\t *\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the columns of this matrix by the given vector.\n\t *\n\t * @param {Vector3} v - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Gets the maximum scale value of the three axes.\n\t *\n\t * @return {number} The maximum scale.\n\t */\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\t/**\n\t * Sets this matrix as a translation transform from the given vector.\n\t *\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\n\t * @param {number} y - The amount to translate in the Y axis.\n\t * @param {number} z - The amount to translate in the z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the X axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Y axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the Z axis by\n\t * the given angle.\n\t *\n\t * @param {number} theta - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a rotational transformation around the given axis by\n\t * the given angle.\n\t *\n\t * This is a somewhat controversial but mathematically sound alternative to\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\n\t *\n\t * @param {Vector3} axis - The normalized rotation axis.\n\t * @param {number} angle - The rotation in radians.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a scale transformation.\n\t *\n\t * @param {number} x - The amount to scale in the X axis.\n\t * @param {number} y - The amount to scale in the Y axis.\n\t * @param {number} z - The amount to scale in the Z axis.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix as a shear transformation.\n\t *\n\t * @param {number} xy - The amount to shear X by Y.\n\t * @param {number} xz - The amount to shear X by Z.\n\t * @param {number} yx - The amount to shear Y by X.\n\t * @param {number} yz - The amount to shear Y by Z.\n\t * @param {number} zx - The amount to shear Z by X.\n\t * @param {number} zy - The amount to shear Z by Y.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this matrix to the transformation composed of the given position,\n\t * rotation (Quaternion) and scale.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Decomposes this matrix into its position, rotation and scale components\n\t * and provides the result in the given objects.\n\t *\n\t * Note: Not all matrices are decomposable in this way. For example, if an\n\t * object has a non-uniformly scaled parent, then the object's world matrix\n\t * may not be decomposable, and this method may not be appropriate.\n\t *\n\t * @param {Vector3} position - The position vector.\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\n\t * @param {Vector3} scale - The scale vector.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1.elements[ 0 ] *= invSX;\n\t\t_m1.elements[ 1 ] *= invSX;\n\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t_m1.elements[ 4 ] *= invSY;\n\t\t_m1.elements[ 5 ] *= invSY;\n\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a perspective projection matrix. This is used internally by\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem, reversedDepth = false ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( reversedDepth ) {\n\n\t\t\tc = near / ( far - near );\n\t\t\td = ( far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\t\td = ( - 2 * far * near ) / ( far - near );\n\n\t\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\t\tc = - far / ( far - near );\n\t\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t\t}\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates a orthographic projection matrix. This is used internally by\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\n\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\n\t * @param {number} near - The distance from the camera to the near plane.\n\t * @param {number} far - The distance from the camera to the far plane.\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\n\t * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem, reversedDepth = false ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = 2 / ( right - left );\n\t\tconst y = 2 / ( top - bottom );\n\n\t\tconst a = - ( right + left ) / ( right - left );\n\t\tconst b = - ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( reversedDepth ) {\n\n\t\t\tc = 1 / ( far - near );\n\t\t\td = far / ( far - near );\n\n\t\t} else {\n\n\t\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\t\tc = - 2 / ( far - near );\n\t\t\t\td = - ( far + near ) / ( far - near );\n\n\t\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\t\tc = - 1 / ( far - near );\n\t\t\t\td = - near / ( far - near );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t\t}\n\n\t\t}\n\n\t\tte[ 0 ] = x;\t\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = a;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = y;\t\tte[ 9 ] = 0; \t\tte[ 13 ] = b;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = c;\t\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this matrix is equal with the given one.\n\t *\n\t * @param {Matrix4} matrix - The matrix to test for equality.\n\t * @return {boolean} Whether this matrix is equal with the given one.\n\t */\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Sets the elements of the matrix from the given array.\n\t *\n\t * @param {Array<number>} array - The matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Matrix4} A reference to this matrix.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the elements of this matrix to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The matrix elements in column-major order.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nexport { Matrix4 };\n"],"mappings":"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","ignoreList":[]}