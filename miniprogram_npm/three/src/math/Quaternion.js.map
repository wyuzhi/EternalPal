{"version":3,"file":"node_modules/three/src/math/Quaternion.js","names":["clamp","Quaternion","constructor","x","y","z","w","this","isQuaternion","_x","_y","_z","_w","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","t","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","multiplyQuaternionsFlat","value","_onChangeCallback","set","clone","copy","quaternion","setFromEuler","euler","update","order","_order","c1","c2","c3","s1","s2","s3","console","warn","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","q","acos","rotateTowards","step","min","slerp","identity","invert","conjugate","v","lengthSq","length","l","multiply","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","slerpQuaternions","qa","random","theta1","PI","theta2","r1","r2","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","toJSON","_onChange","callback","Symbol","iterator"],"sources":["node_modules/three/src/math/Quaternion.js"],"sourcesContent":["import { clamp } from './MathUtils.js';\n\n/**\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n *\n * Note that three.js expects Quaternions to be normalized.\n * ```js\n * const quaternion = new THREE.Quaternion();\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\n *\n * const vector = new THREE.Vector3( 1, 0, 0 );\n * vector.applyQuaternion( quaternion );\n * ```\n */\nclass Quaternion {\n\n\t/**\n\t * Constructs a new quaternion.\n\t *\n\t * @param {number} [x=0] - The x value of this quaternion.\n\t * @param {number} [y=0] - The y value of this quaternion.\n\t * @param {number} [z=0] - The z value of this quaternion.\n\t * @param {number} [w=1] - The w value of this quaternion.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\t/**\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\n\t * quaternion data are managed  in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\n\t * @see {@link Quaternion#slerp}\n\t */\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\t/**\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\n\t * in flat arrays.\n\t *\n\t * @param {Array<number>} dst - The destination array.\n\t * @param {number} dstOffset - An offset into the destination array.\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\n\t * @param {number} srcOffset0 - An offset into the first source array.\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\n\t * @param {number} srcOffset1 - An offset into the second source array.\n\t * @return {Array<number>} The destination array.\n\t * @see {@link Quaternion#multiplyQuaternions}.\n\t */\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\t/**\n\t * The x value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The y value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The z value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 0\n\t */\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * The w value of this quaternion.\n\t *\n\t * @type {number}\n\t * @default 1\n\t */\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\t/**\n\t * Sets the quaternion components.\n\t *\n\t * @param {number} x - The x value of this quaternion.\n\t * @param {number} y - The y value of this quaternion.\n\t * @param {number} z - The z value of this quaternion.\n\t * @param {number} w - The w value of this quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a new quaternion with copied values from this instance.\n\t *\n\t * @return {Quaternion} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given quaternion to this instance.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to copy.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the rotation specified by the given\n\t * Euler angles.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromEuler( euler, update = true ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given axis and angle.\n\t *\n\t * @param {Vector3} axis - The normalized axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion from the given rotation matrix.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the rotation required to rotate the direction vector\n\t * `vFrom` to the direction vector `vTo`.\n\t *\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < 1e-8 ) { // the epsilon value has been discussed in #31286\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Returns the angle between this quaternion and the given one in radians.\n\t *\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\t/**\n\t * Rotates this quaternion by a given angular step to the given quaternion.\n\t * The method ensures that the final quaternion will not overshoot `q`.\n\t *\n\t * @param {Quaternion} q - The target quaternion.\n\t * @param {number} step - The angular step in radians.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this quaternion to the identity quaternion; that is, to the\n\t * quaternion that represents \"no rotation\".\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\t/**\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\n\t * quaternion is assumed to have unit length.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tinvert() {\n\n\t\treturn this.conjugate();\n\n\t}\n\n\t/**\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\n\t * quaternion represents the same rotation in the opposite direction about\n\t * the rotational axis.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of this quaternion and the given one.\n\t *\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\t/**\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\n\t * {@link Quaternion#length}.\n\t *\n\t * @return {number} The squared Euclidean length.\n\t */\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\t/**\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\n\t * considered as a 4 dimensional vector.\n\t *\n\t * @return {number} The Euclidean length.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\t/**\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\n\t * the same rotation as this one, but has a length equal to `1`.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\t/**\n\t * Pre-multiplies this quaternion by the given one.\n\t *\n\t * @param {Quaternion} q - The quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\t/**\n\t * Multiplies the given quaternions and stores the result in this instance.\n\t *\n\t * @param {Quaternion} a - The first quaternion.\n\t * @param {Quaternion} b - The second quaternion.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between quaternions.\n\t *\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Performs a spherical linear interpolation between the given quaternions\n\t * and stores the result in this quaternion.\n\t *\n\t * @param {Quaternion} qa - The source quaternion.\n\t * @param {Quaternion} qb - The target quaternion.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\t/**\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\n\t *\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\trandom() {\n\n\t\t// Ken Shoemake\n\t\t// Uniform random rotations\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\n\n\t\tconst theta1 = 2 * Math.PI * Math.random();\n\t\tconst theta2 = 2 * Math.PI * Math.random();\n\n\t\tconst x0 = Math.random();\n\t\tconst r1 = Math.sqrt( 1 - x0 );\n\t\tconst r2 = Math.sqrt( x0 );\n\n\t\treturn this.set(\n\t\t\tr1 * Math.sin( theta1 ),\n\t\t\tr1 * Math.cos( theta1 ),\n\t\t\tr2 * Math.sin( theta2 ),\n\t\t\tr2 * Math.cos( theta2 ),\n\t\t);\n\n\t}\n\n\t/**\n\t * Returns `true` if this quaternion is equal with the given one.\n\t *\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\n\t * @return {boolean} Whether this quaternion is equal with the given one.\n\t */\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\t/**\n\t * Sets this quaternion's components from the given array.\n\t *\n\t * @param {Array<number>} array - An array holding the quaternion component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this quaternion to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The quaternion components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this quaternion from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Quaternion} A reference to this quaternion.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * This methods defines the serialization result of this class. Returns the\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\n\t *\n\t * @return {Array<number>} The serialized quaternion.\n\t */\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nexport { Quaternion };\n"],"mappings":"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","ignoreList":[]}