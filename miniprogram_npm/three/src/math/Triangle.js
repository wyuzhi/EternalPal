import{Vector3}from"./Vector3.js";import{Vector4}from"./Vector4.js";const _v0=new Vector3,_v1=new Vector3,_v2=new Vector3,_v3=new Vector3,_vab=new Vector3,_vac=new Vector3,_vbc=new Vector3,_vap=new Vector3,_vbp=new Vector3,_vcp=new Vector3,_v40=new Vector4,_v41=new Vector4,_v42=new Vector4;class Triangle{constructor(t=new Vector3,r=new Vector3,e=new Vector3){this.a=t,this.b=r,this.c=e}static getNormal(t,r,e,c){c.subVectors(e,r),_v0.subVectors(t,r),c.cross(_v0);const o=c.lengthSq();return o>0?c.multiplyScalar(1/Math.sqrt(o)):c.set(0,0,0)}static getBarycoord(t,r,e,c,o){_v0.subVectors(c,r),_v1.subVectors(e,r),_v2.subVectors(t,r);const s=_v0.dot(_v0),a=_v0.dot(_v1),i=_v0.dot(_v2),n=_v1.dot(_v1),v=_v1.dot(_v2),_=s*n-a*a;if(0===_)return o.set(0,0,0),null;const u=1/_,d=(n*i-a*v)*u,h=(s*v-a*i)*u;return o.set(1-d-h,h,d)}static containsPoint(t,r,e,c){return null!==this.getBarycoord(t,r,e,c,_v3)&&(_v3.x>=0&&_v3.y>=0&&_v3.x+_v3.y<=1)}static getInterpolation(t,r,e,c,o,s,a,i){return null===this.getBarycoord(t,r,e,c,_v3)?(i.x=0,i.y=0,"z"in i&&(i.z=0),"w"in i&&(i.w=0),null):(i.setScalar(0),i.addScaledVector(o,_v3.x),i.addScaledVector(s,_v3.y),i.addScaledVector(a,_v3.z),i)}static getInterpolatedAttribute(t,r,e,c,o,s){return _v40.setScalar(0),_v41.setScalar(0),_v42.setScalar(0),_v40.fromBufferAttribute(t,r),_v41.fromBufferAttribute(t,e),_v42.fromBufferAttribute(t,c),s.setScalar(0),s.addScaledVector(_v40,o.x),s.addScaledVector(_v41,o.y),s.addScaledVector(_v42,o.z),s}static isFrontFacing(t,r,e,c){return _v0.subVectors(e,r),_v1.subVectors(t,r),_v0.cross(_v1).dot(c)<0}set(t,r,e){return this.a.copy(t),this.b.copy(r),this.c.copy(e),this}setFromPointsAndIndices(t,r,e,c){return this.a.copy(t[r]),this.b.copy(t[e]),this.c.copy(t[c]),this}setFromAttributeAndIndices(t,r,e,c){return this.a.fromBufferAttribute(t,r),this.b.fromBufferAttribute(t,e),this.c.fromBufferAttribute(t,c),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return _v0.subVectors(this.c,this.b),_v1.subVectors(this.a,this.b),.5*_v0.cross(_v1).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Triangle.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,r){return Triangle.getBarycoord(t,this.a,this.b,this.c,r)}getInterpolation(t,r,e,c,o){return Triangle.getInterpolation(t,this.a,this.b,this.c,r,e,c,o)}containsPoint(t){return Triangle.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Triangle.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,r){const e=this.a,c=this.b,o=this.c;let s,a;_vab.subVectors(c,e),_vac.subVectors(o,e),_vap.subVectors(t,e);const i=_vab.dot(_vap),n=_vac.dot(_vap);if(i<=0&&n<=0)return r.copy(e);_vbp.subVectors(t,c);const v=_vab.dot(_vbp),_=_vac.dot(_vbp);if(v>=0&&_<=v)return r.copy(c);const u=i*_-v*n;if(u<=0&&i>=0&&v<=0)return s=i/(i-v),r.copy(e).addScaledVector(_vab,s);_vcp.subVectors(t,o);const d=_vab.dot(_vcp),h=_vac.dot(_vcp);if(h>=0&&d<=h)return r.copy(o);const l=d*n-i*h;if(l<=0&&n>=0&&h<=0)return a=n/(n-h),r.copy(e).addScaledVector(_vac,a);const b=v*h-d*_;if(b<=0&&_-v>=0&&d-h>=0)return _vbc.subVectors(o,c),a=(_-v)/(_-v+(d-h)),r.copy(c).addScaledVector(_vbc,a);const V=1/(b+l+u);return s=l*V,a=u*V,r.copy(e).addScaledVector(_vab,s).addScaledVector(_vac,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}export{Triangle};
//# sourceMappingURL=Triangle.js.map