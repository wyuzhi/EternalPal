{"version":3,"file":"node_modules/three/src/math/Vector2.js","names":["clamp","Vector2","constructor","x","y","prototype","isVector2","this","width","value","height","set","setScalar","scalar","setX","setY","setComponent","index","Error","getComponent","clone","copy","v","add","addScalar","s","addVectors","a","b","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","m","e","elements","min","Math","max","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","trunc","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","PI","angleTo","denominator","theta","acos","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","lerp","alpha","lerpVectors","v1","v2","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","random","Symbol","iterator"],"sources":["node_modules/three/src/math/Vector2.js"],"sourcesContent":["import { clamp } from './MathUtils.js';\n\n/**\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\n * (labeled x and y), which can be used to represent a number of things, such as:\n *\n * - A point in 2D space (i.e. a position on a plane).\n * - A direction and length across a plane. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\n * - Any arbitrary ordered pair of numbers.\n *\n * There are other things a 2D vector can be used to represent, such as\n * momentum vectors, complex numbers and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector2( 0, 1 );\n *\n * //no arguments; will be initialised to (0, 0)\n * const b = new THREE.Vector2( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector2 {\n\n\t/**\n\t * Constructs a new 2D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t */\n\tconstructor( x = 0, y = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector2.prototype.isVector2 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#x}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector2#y}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @param {number} value - The value to set.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector2} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to copy.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector2} v - The vector to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector2} a - The first vector.\n\t * @param {Vector2} b - The second vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector2} v - The vector to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\n\t * the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The matrix to apply.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the given vector's x or y\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is less than the given vector's x or y\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector2} v - The vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y value is greater than the max vector's x or y\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x or y value is less than the min vector's x or y value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector2} min - The minimum x and y values.\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x or y values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x or y values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the cross product with.\n\t * @return {number} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\n\t *\n\t * @return {number} The angle in radians.\n\t */\n\tangle() {\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector2} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector2} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector2} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector2} v1 - The first vector.\n\t * @param {Vector2} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector2} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]` and y\n\t * value to be `array[ offset + 1 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Rotates this vector around the given center by the given angle.\n\t *\n\t * @param {Vector2} center - The point around which to rotate.\n\t * @param {number} angle - The angle to rotate, in radians.\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector2} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nexport { Vector2 };\n"],"mappings":"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","ignoreList":[]}