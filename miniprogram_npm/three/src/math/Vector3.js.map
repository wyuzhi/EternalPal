{"version":3,"file":"node_modules/three/src/math/Vector3.js","names":["clamp","Quaternion","Vector3","constructor","x","y","z","prototype","isVector3","this","set","undefined","setScalar","scalar","setX","setY","setZ","setComponent","index","value","Error","getComponent","clone","copy","v","add","addScalar","s","addVectors","a","b","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","multiplyVectors","applyEuler","euler","applyQuaternion","_quaternion","setFromEuler","applyAxisAngle","axis","angle","setFromAxisAngle","applyMatrix3","m","e","elements","applyNormalMatrix","normalize","applyMatrix4","w","q","vx","vy","vz","qx","qy","qz","qw","tx","ty","tz","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","min","Math","max","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","trunc","negate","dot","lengthSq","sqrt","manhattanLength","abs","setLength","lerp","alpha","lerpVectors","v1","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","angleTo","PI","theta","acos","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","sin","cos","setFromCylindrical","c","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","fromArray","setFromMatrix3Column","_x","_y","_z","setFromColor","r","g","equals","array","offset","toArray","fromBufferAttribute","attribute","getX","getY","getZ","random","randomDirection","u","Symbol","iterator"],"sources":["node_modules/three/src/math/Vector3.js"],"sourcesContent":["import { clamp } from './MathUtils.js';\nimport { Quaternion } from './Quaternion.js';\n\n/**\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\n * (labeled x, y and z), which can be used to represent a number of things, such as:\n *\n * - A point in 3D space.\n * - A direction and length in 3D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\n * - Any arbitrary ordered triplet of numbers.\n *\n * There are other things a 3D vector can be used to represent, such as\n * momentum vectors and so on, however these are the most\n * common uses in three.js.\n *\n * Iterating through a vector instance will yield its components `(x, y, z)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector3( 0, 1, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0)\n * const b = new THREE.Vector3( );\n *\n * const d = a.distanceTo( b );\n * ```\n */\nclass Vector3 {\n\n\t/**\n\t * Constructs a new 3D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector3.prototype.isVector3 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @param {number} value - The value to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector3} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to copy.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector3} v - The vector to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Euler rotation to this vector.\n\t *\n\t * @param {Euler} euler - The Euler angles.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t}\n\n\t/**\n\t * Applies a rotation specified by an axis and an angle to this vector.\n\t *\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\n\t * @param {number} angle - The angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 3x3 matrix.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector by the given normal matrix and normalizes\n\t * the result.\n\t *\n\t * @param {Matrix3} m - The normal matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\t/**\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\n\t * divides by perspective.\n\t *\n\t * @param {Matrix4} m - The matrix to apply.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Applies the given Quaternion to this vector.\n\t *\n\t * @param {Quaternion} q - The Quaternion.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tapplyQuaternion( q ) {\n\n\t\t// quaternion q is assumed to have unit length\n\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// t = 2 * cross( q.xyz, v );\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\n\n\t\t// v + q.w * t + cross( q.xyz, t );\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector from world space into the camera's normalized\n\t * device coordinate (NDC) space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\t/**\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\n\t * space into world space.\n\t *\n\t * @param {Camera} camera - The camera.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\t/**\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\n\t * subset of the given 4x4 matrix and then normalizes the result.\n\t *\n\t * @param {Matrix4} m - The matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector3} v - The vector to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector3} v - The vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector3} min - The minimum x, y and z values.\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y or z values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y or z values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector3} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector3} v1 - The first vector.\n\t * @param {Vector3} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vector with this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the cross product with.\n\t * @return {Vector3} The result of the cross product.\n\t */\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\t/**\n\t * Calculates the cross product of the given vectors and stores the result\n\t * in this instance.\n\t *\n\t * @param {Vector3} a - The first vector.\n\t * @param {Vector3} b - The second vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Projects this vector onto the given one.\n\t *\n\t * @param {Vector3} v - The vector to project to.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\t/**\n\t * Projects this vector onto a plane by subtracting this\n\t * vector projected onto the plane's normal from this vector.\n\t *\n\t * @param {Vector3} planeNormal - The plane normal.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector );\n\n\t}\n\n\t/**\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\n\t *\n\t * @param {Vector3} normal - The (normalized) normal vector.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\treflect( normal ) {\n\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\t/**\n\t * Returns the angle between the given vector and this instance in radians.\n\t *\n\t * @param {Vector3} v - The vector to compute the angle with.\n\t * @return {number} The angle in radians.\n\t */\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\t/**\n\t * Computes the distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the distance to.\n\t * @return {number} The distance.\n\t */\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\t/**\n\t * Computes the squared distance from the given vector to this instance.\n\t * If you are just comparing the distance with another distance, you should compare\n\t * the distance squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @param {Vector3} v - The vector to compute the squared distance to.\n\t * @return {number} The squared distance.\n\t */\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\t/**\n\t * Computes the Manhattan distance from the given vector to this instance.\n\t *\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\n\t * @return {number} The Manhattan distance.\n\t */\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {Spherical} s - The spherical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given spherical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} phi - The phi angle in radians.\n\t * @param {number} theta - The theta angle in radians.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {Cylindrical} c - The cylindrical coordinates.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given cylindrical coordinates.\n\t *\n\t * @param {number} radius - The radius.\n\t * @param {number} theta - The theta angle in radians.\n\t * @param {number} y - The y value.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the scale elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the specified matrix column.\n\t *\n\t * @param {Matrix3} m - The 3x3 matrix.\n\t * @param {number} index - The column index.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\t/**\n\t * Sets the vector components from the given Euler angles.\n\t *\n\t * @param {Euler} e - The Euler angles to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components from the RGB components of the\n\t * given color.\n\t *\n\t * @param {Color} c - The color to set.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector3} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\n\t * and z value to be `array[ offset + 2 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector3} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets this vector to a uniformly random point on a unit sphere.\n\t *\n\t * @return {Vector3} A reference to this vector.\n\t */\n\trandomDirection() {\n\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst theta = Math.random() * Math.PI * 2;\n\t\tconst u = Math.random() * 2 - 1;\n\t\tconst c = Math.sqrt( 1 - u * u );\n\n\t\tthis.x = c * Math.cos( theta );\n\t\tthis.y = u;\n\t\tthis.z = c * Math.sin( theta );\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\n\nexport { Vector3 };\n"],"mappings":"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","ignoreList":[]}