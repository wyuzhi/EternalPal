{"version":3,"file":"node_modules/three/src/math/Vector4.js","names":["clamp","Vector4","constructor","x","y","z","w","prototype","isVector4","this","width","value","height","set","setScalar","scalar","setX","setY","setZ","setW","setComponent","index","Error","getComponent","clone","copy","v","undefined","add","addScalar","s","addVectors","a","b","addScaledVector","sub","subScalar","subVectors","multiply","multiplyScalar","applyMatrix4","m","e","elements","divide","divideScalar","setAxisAngleFromQuaternion","q","Math","acos","sqrt","setAxisAngleFromRotationMatrix","angle","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","PI","xx","yy","zz","xy","xz","yz","setFromMatrixPosition","min","max","clampScalar","minVal","maxVal","clampLength","length","floor","ceil","round","roundToZero","trunc","negate","dot","lengthSq","manhattanLength","normalize","setLength","lerp","alpha","lerpVectors","v1","v2","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","getX","getY","getZ","getW","random","Symbol","iterator"],"sources":["node_modules/three/src/math/Vector4.js"],"sourcesContent":["import { clamp } from './MathUtils.js';\n\n/**\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\n *\n * - A point in 4D space.\n * - A direction and length in 4D space. In three.js the length will\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\n * - Any arbitrary ordered quadruplet of numbers.\n *\n * There are other things a 4D vector can be used to represent, however these\n * are the most common uses in *three.js*.\n *\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\n * the corresponding order.\n * ```js\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\n *\n * //no arguments; will be initialised to (0, 0, 0, 1)\n * const b = new THREE.Vector4( );\n *\n * const d = a.dot( b );\n * ```\n */\nclass Vector4 {\n\n\t/**\n\t * Constructs a new 4D vector.\n\t *\n\t * @param {number} [x=0] - The x value of this vector.\n\t * @param {number} [y=0] - The y value of this vector.\n\t * @param {number} [z=0] - The z value of this vector.\n\t * @param {number} [w=1] - The w value of this vector.\n\t */\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tVector4.prototype.isVector4 = true;\n\n\t\t/**\n\t\t * The x value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * The y value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\n\t\t/**\n\t\t * The z value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.z = z;\n\n\t\t/**\n\t\t * The w value of this vector.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.w = w;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#z}.\n\t *\n\t * @type {number}\n\t */\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\t/**\n\t * Alias for {@link Vector4#w}.\n\t *\n\t * @type {number}\n\t */\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\t/**\n\t * Sets the vector components.\n\t *\n\t * @param {number} x - The value of the x component.\n\t * @param {number} y - The value of the y component.\n\t * @param {number} z - The value of the z component.\n\t * @param {number} w - The value of the w component.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the same value.\n\t *\n\t * @param {number} scalar - The value to set for all vector components.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's x component to the given value\n\t *\n\t * @param {number} x - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's y component to the given value\n\t *\n\t * @param {number} y - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's z component to the given value\n\t *\n\t * @param {number} z - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector's w component to the given value\n\t *\n\t * @param {number} w - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Allows to set a vector component with an index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @param {number} value - The value to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of the vector component which matches the given index.\n\t *\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\n\t * `2` equals to z, `3` equals to w.\n\t * @return {number} A vector component value.\n\t */\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a new vector with copied values from this instance.\n\t *\n\t * @return {Vector4} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\t/**\n\t * Copies the values of the given vector to this instance.\n\t *\n\t * @param {Vector3|Vector4} v - The vector to copy.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector to this instance.\n\t *\n\t * @param {Vector4} v - The vector to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given scalar value to all components of this instance.\n\t *\n\t * @param {number} s - The scalar to add.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds the given vector scaled by the given factor to this instance.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @param {number} s - The factor that scales `v`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vector from this instance.\n\t *\n\t * @param {Vector4} v - The vector to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given scalar value from all components of this instance.\n\t *\n\t * @param {number} s - The scalar to subtract.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Subtracts the given vectors and stores the result in this instance.\n\t *\n\t * @param {Vector4} a - The first vector.\n\t * @param {Vector4} b - The second vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies the given scalar value with all components of this instance.\n\t *\n\t * @param {number} scalar - The scalar to multiply.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Multiplies this vector with the given 4x4 matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this instance by the given vector.\n\t *\n\t * @param {Vector4} v - The vector to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\t\tthis.w /= v.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Divides this vector by the given scalar.\n\t *\n\t * @param {number} scalar - The scalar to divide.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the quaternion's axis and w to the angle.\n\t *\n\t * @param {Quaternion} q - The Quaternion to set.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the x, y and z components of this\n\t * vector to the axis of rotation and w to the angle.\n\t *\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the vector components to the position elements of the\n\t * given transformation matrix.\n\t *\n\t * @param {Matrix4} m - The 4x4 matrix.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\t\tthis.w = e[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding min value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\n\t * value, replace that value with the corresponding max value.\n\t *\n\t * @param {Vector4} v - The vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\n\t * value, it is replaced by the corresponding value.\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\n\t * it is replaced by the corresponding value.\n\t *\n\t * @param {Vector4} min - The minimum x, y and z values.\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = clamp( this.x, min.x, max.x );\n\t\tthis.y = clamp( this.y, min.y, max.y );\n\t\tthis.z = clamp( this.z, min.z, max.z );\n\t\tthis.w = clamp( this.w, min.w, max.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's x, y, z or w values are greater than the max value, they are\n\t * replaced by the max value.\n\t * If this vector's x, y, z or w values are less than the min value, they are\n\t * replaced by the min value.\n\t *\n\t * @param {number} minVal - The minimum value the components will be clamped to.\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = clamp( this.x, minVal, maxVal );\n\t\tthis.y = clamp( this.y, minVal, maxVal );\n\t\tthis.z = clamp( this.z, minVal, maxVal );\n\t\tthis.w = clamp( this.w, minVal, maxVal );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * If this vector's length is greater than the max value, it is replaced by\n\t * the max value.\n\t * If this vector's length is less than the min value, it is replaced by the\n\t * min value.\n\t *\n\t * @param {number} min - The minimum value the vector length will be clamped to.\n\t * @param {number} max - The maximum value the vector length will be clamped to.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded down to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded up to the nearest integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded to the nearest integer value\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The components of this vector are rounded towards zero (up if negative,\n\t * down if positive) to an integer value.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\t\tthis.w = Math.trunc( this.w );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calculates the dot product of the given vector with this instance.\n\t *\n\t * @param {Vector4} v - The vector to compute the dot product with.\n\t * @return {number} The result of the dot product.\n\t */\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\t/**\n\t * Computes the square of the Euclidean length (straight-line length) from\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\n\t * compare the length squared instead as it is slightly more efficient to calculate.\n\t *\n\t * @return {number} The square length of this vector.\n\t */\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\t/**\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\t/**\n\t * Computes the Manhattan length of this vector.\n\t *\n\t * @return {number} The length of this vector.\n\t */\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\t/**\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\n\t * with the same direction as this one, but with a vector length of `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\t/**\n\t * Sets this vector to a vector with the same direction as this one, but\n\t * with the specified length.\n\t *\n\t * @param {number} length - The new length of this vector.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vector and this instance, where\n\t * alpha is the percent distance along the line - alpha = 0 will be this\n\t * vector, and alpha = 1 will be the given one.\n\t *\n\t * @param {Vector4} v - The vector to interpolate towards.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Linearly interpolates between the given vectors, where alpha is the percent\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\n\t * be the second one. The result is stored in this instance.\n\t *\n\t * @param {Vector4} v1 - The first vector.\n\t * @param {Vector4} v2 - The second vector.\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns `true` if this vector is equal with the given one.\n\t *\n\t * @param {Vector4} v - The vector to test for equality.\n\t * @return {boolean} Whether this vector is equal with the given one.\n\t */\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\t/**\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\n\t *\n\t * @param {Array<number>} array - An array holding the vector component values.\n\t * @param {number} [offset=0] - The offset into the array.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Writes the components of this vector to the given array. If no array is provided,\n\t * the method returns a new instance.\n\t *\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\n\t * @param {number} [offset=0] - Index of the first element in the array.\n\t * @return {Array<number>} The vector components.\n\t */\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\t/**\n\t * Sets the components of this vector from the given buffer attribute.\n\t *\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\n\t * @param {number} index - The index into the attribute.\n\t * @return {Vector4} A reference to this vector.\n\t */\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets each component of this vector to a pseudo-random value between `0` and\n\t * `1`, excluding `1`.\n\t *\n\t * @return {Vector4} A reference to this vector.\n\t */\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nexport { Vector4 };\n"],"mappings":"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","ignoreList":[]}