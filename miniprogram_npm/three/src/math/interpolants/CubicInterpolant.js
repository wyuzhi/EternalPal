import{ZeroCurvatureEnding,WrapAroundEnding,ZeroSlopeEnding}from"../../constants.js";import{Interpolant}from"../Interpolant.js";class CubicInterpolant extends Interpolant{constructor(t,e,i,n){super(t,e,i,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding}}intervalChanged_(t,e,i){const n=this.parameterPositions;let r=t-2,s=t+1,o=n[r],a=n[s];if(void 0===o)switch(this.getSettings_().endingStart){case ZeroSlopeEnding:r=t,o=2*e-i;break;case WrapAroundEnding:r=n.length-2,o=e+n[r]-n[r+1];break;default:r=t,o=i}if(void 0===a)switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:s=t,a=2*i-e;break;case WrapAroundEnding:s=1,a=i+n[1]-n[0];break;default:s=t-1,a=e}const h=.5*(i-e),g=this.valueSize;this._weightPrev=h/(e-o),this._weightNext=h/(a-i),this._offsetPrev=r*g,this._offsetNext=s*g}interpolate_(t,e,i,n){const r=this.resultBuffer,s=this.sampleValues,o=this.valueSize,a=t*o,h=a-o,g=this._offsetPrev,d=this._offsetNext,f=this._weightPrev,l=this._weightNext,u=(i-e)/(n-e),p=u*u,_=p*u,c=-f*_+2*f*p-f*u,v=(1+f)*_+(-1.5-2*f)*p+(-.5+f)*u+1,E=(-1-l)*_+(1.5+l)*p+.5*u,S=l*_-l*p;for(let t=0;t!==o;++t)r[t]=c*s[g+t]+v*s[h+t]+E*s[a+t]+S*s[d+t];return r}}export{CubicInterpolant};
//# sourceMappingURL=CubicInterpolant.js.map