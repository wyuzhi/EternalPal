{"version":3,"file":"node_modules/three/src/math/interpolants/CubicInterpolant.js","names":["ZeroCurvatureEnding","WrapAroundEnding","ZeroSlopeEnding","Interpolant","CubicInterpolant","constructor","parameterPositions","sampleValues","sampleSize","resultBuffer","super","this","_weightPrev","_offsetPrev","_weightNext","_offsetNext","DefaultSettings_","endingStart","endingEnd","intervalChanged_","i1","t0","t1","pp","iPrev","iNext","tPrev","tNext","undefined","getSettings_","length","halfDt","stride","valueSize","interpolate_","t","result","values","o1","o0","oP","oN","wP","wN","p","ppp","sP","s0","s1","sN","i"],"sources":["node_modules/three/src/math/interpolants/CubicInterpolant.js"],"sourcesContent":["import { ZeroCurvatureEnding, WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\nimport { Interpolant } from '../Interpolant.js';\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @augments Interpolant\n */\nclass CubicInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new cubic interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nexport { CubicInterpolant };\n"],"mappings":"OAASA,oBAAqBC,iBAAkBC,oBAAuB,4BAC9DC,gBAAmB,oBAW5B,MAAMC,yBAAyBD,YAU9B,WAAAE,CAAaC,EAAoBC,EAAcC,EAAYC,GAE1DC,MAAOJ,EAAoBC,EAAcC,EAAYC,GAErDE,KAAKC,aAAgB,EACrBD,KAAKE,aAAgB,EACrBF,KAAKG,aAAgB,EACrBH,KAAKI,aAAgB,EAErBJ,KAAKK,iBAAmB,CAEvBC,YAAajB,oBACbkB,UAAWlB,oBAIb,CAEA,gBAAAmB,CAAkBC,EAAIC,EAAIC,GAEzB,MAAMC,EAAKZ,KAAKL,mBAChB,IAAIkB,EAAQJ,EAAK,EAChBK,EAAQL,EAAK,EAEbM,EAAQH,EAAIC,GACZG,EAAQJ,EAAIE,GAEb,QAAeG,IAAVF,EAEJ,OAASf,KAAKkB,eAAeZ,aAE5B,KAAKf,gBAGJsB,EAAQJ,EACRM,EAAQ,EAAIL,EAAKC,EAEjB,MAED,KAAKrB,iBAGJuB,EAAQD,EAAGO,OAAS,EACpBJ,EAAQL,EAAKE,EAAIC,GAAUD,EAAIC,EAAQ,GAEvC,MAED,QAGCA,EAAQJ,EACRM,EAAQJ,EAMX,QAAeM,IAAVD,EAEJ,OAAShB,KAAKkB,eAAeX,WAE5B,KAAKhB,gBAGJuB,EAAQL,EACRO,EAAQ,EAAIL,EAAKD,EAEjB,MAED,KAAKpB,iBAGJwB,EAAQ,EACRE,EAAQL,EAAKC,EAAI,GAAMA,EAAI,GAE3B,MAED,QAGCE,EAAQL,EAAK,EACbO,EAAQN,EAMX,MAAMU,EAAuB,IAAZT,EAAKD,GACrBW,EAASrB,KAAKsB,UAEftB,KAAKC,YAAcmB,GAAWV,EAAKK,GACnCf,KAAKG,YAAciB,GAAWJ,EAAQL,GACtCX,KAAKE,YAAcW,EAAQQ,EAC3BrB,KAAKI,YAAcU,EAAQO,CAE5B,CAEA,YAAAE,CAAcd,EAAIC,EAAIc,EAAGb,GAExB,MAAMc,EAASzB,KAAKF,aACnB4B,EAAS1B,KAAKJ,aACdyB,EAASrB,KAAKsB,UAEdK,EAAKlB,EAAKY,EAASO,EAAKD,EAAKN,EAC7BQ,EAAK7B,KAAKE,YAAc4B,EAAK9B,KAAKI,YAClC2B,EAAK/B,KAAKC,YAAa+B,EAAKhC,KAAKG,YAEjC8B,GAAMT,EAAId,IAASC,EAAKD,GACxBE,EAAKqB,EAAIA,EACTC,EAAMtB,EAAKqB,EAINE,GAAOJ,EAAKG,EAAM,EAAIH,EAAKnB,EAAKmB,EAAKE,EACrCG,GAAO,EAAIL,GAAOG,IAAU,IAAM,EAAIH,GAAOnB,IAAS,GAAMmB,GAAOE,EAAI,EACvEI,IAAS,EAAIL,GAAOE,GAAQ,IAAMF,GAAOpB,EAAK,GAAMqB,EACpDK,EAAKN,EAAKE,EAAMF,EAAKpB,EAI3B,IAAM,IAAI2B,EAAI,EAAGA,IAAMlB,IAAWkB,EAEjCd,EAAQc,GACNJ,EAAKT,EAAQG,EAAKU,GAClBH,EAAKV,EAAQE,EAAKW,GAClBF,EAAKX,EAAQC,EAAKY,GAClBD,EAAKZ,EAAQI,EAAKS,GAIrB,OAAOd,CAER,SAIQhC","ignoreList":[]}