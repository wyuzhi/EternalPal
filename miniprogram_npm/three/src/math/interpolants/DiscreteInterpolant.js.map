{"version":3,"file":"node_modules/three/src/math/interpolants/DiscreteInterpolant.js","names":["Interpolant","DiscreteInterpolant","constructor","parameterPositions","sampleValues","sampleSize","resultBuffer","super","interpolate_","i1","this","copySampleValue_"],"sources":["node_modules/three/src/math/interpolants/DiscreteInterpolant.js"],"sourcesContent":["import { Interpolant } from '../Interpolant.js';\n\n/**\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n *\n * @augments Interpolant\n */\nclass DiscreteInterpolant extends Interpolant {\n\n\t/**\n\t * Constructs a new discrete interpolant.\n\t *\n\t * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.\n\t * @param {TypedArray} sampleValues - The sample values.\n\t * @param {number} sampleSize - The sample size\n\t * @param {TypedArray} [resultBuffer] - The result buffer.\n\t */\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\n\nexport { DiscreteInterpolant };\n"],"mappings":"OAASA,gBAAmB,oBAQ5B,MAAMC,4BAA4BD,YAUjC,WAAAE,CAAaC,EAAoBC,EAAcC,EAAYC,GAE1DC,MAAOJ,EAAoBC,EAAcC,EAAYC,EAEtD,CAEA,YAAAE,CAAcC,GAEb,OAAOC,KAAKC,iBAAkBF,EAAK,EAEpC,SAKQR","ignoreList":[]}