{"version":3,"file":"node_modules/three/src/nodes/accessors/Arrays.js","names":["StorageInstancedBufferAttribute","StorageBufferAttribute","storage","getLengthFromType","getTypedArrayFromType","attributeArray","count","type","itemSize","typedArray","isStruct","layout","getLength","buffer","instancedArray"],"sources":["node_modules/three/src/nodes/accessors/Arrays.js"],"sourcesContent":["import StorageInstancedBufferAttribute from '../../renderers/common/StorageInstancedBufferAttribute.js';\nimport StorageBufferAttribute from '../../renderers/common/StorageBufferAttribute.js';\nimport { storage } from './StorageBufferNode.js';\nimport { getLengthFromType, getTypedArrayFromType } from '../core/NodeUtils.js';\n\n/**\n * TSL function for creating a storage buffer node with a configured `StorageBufferAttribute`.\n *\n * @tsl\n * @function\n * @param {number|TypedArray} count - The data count. It is also valid to pass a typed array as an argument.\n * @param {string|Struct} [type='float'] - The data type.\n * @returns {StorageBufferNode}\n */\nexport const attributeArray = ( count, type = 'float' ) => {\n\n\tlet itemSize, typedArray;\n\n\tif ( type.isStruct === true ) {\n\n\t\titemSize = type.layout.getLength();\n\t\ttypedArray = getTypedArrayFromType( 'float' );\n\n\t} else {\n\n\t\titemSize = getLengthFromType( type );\n\t\ttypedArray = getTypedArrayFromType( type );\n\n\t}\n\n\tconst buffer = new StorageBufferAttribute( count, itemSize, typedArray );\n\tconst node = storage( buffer, type, count );\n\n\treturn node;\n\n};\n\n/**\n * TSL function for creating a storage buffer node with a configured `StorageInstancedBufferAttribute`.\n *\n * @tsl\n * @function\n * @param {number|TypedArray} count - The data count. It is also valid to pass a typed array as an argument.\n * @param {string|Struct} [type='float'] - The data type.\n * @returns {StorageBufferNode}\n */\nexport const instancedArray = ( count, type = 'float' ) => {\n\n\tlet itemSize, typedArray;\n\n\tif ( type.isStruct === true ) {\n\n\t\titemSize = type.layout.getLength();\n\t\ttypedArray = getTypedArrayFromType( 'float' );\n\n\t} else {\n\n\t\titemSize = getLengthFromType( type );\n\t\ttypedArray = getTypedArrayFromType( type );\n\n\t}\n\n\tconst buffer = new StorageInstancedBufferAttribute( count, itemSize, typedArray );\n\tconst node = storage( buffer, type, count );\n\n\treturn node;\n\n};\n"],"mappings":"OAAOA,oCAAqC,mEACrCC,2BAA4B,0DAC1BC,YAAe,gCACfC,kBAAmBC,0BAA6B,8BAWlD,MAAMC,eAAiB,CAAEC,EAAOC,EAAO,WAE7C,IAAIC,EAAUC,GAES,IAAlBF,EAAKG,UAETF,EAAWD,EAAKI,OAAOC,YACvBH,EAAaL,sBAAuB,WAIpCI,EAAWL,kBAAmBI,GAC9BE,EAAaL,sBAAuBG,IAIrC,MAAMM,EAAS,IAAIZ,uBAAwBK,EAAOE,EAAUC,GAG5D,OAFaP,QAASW,EAAQN,EAAMD,EAEzB,SAaL,MAAMQ,eAAiB,CAAER,EAAOC,EAAO,WAE7C,IAAIC,EAAUC,GAES,IAAlBF,EAAKG,UAETF,EAAWD,EAAKI,OAAOC,YACvBH,EAAaL,sBAAuB,WAIpCI,EAAWL,kBAAmBI,GAC9BE,EAAaL,sBAAuBG,IAIrC,MAAMM,EAAS,IAAIb,gCAAiCM,EAAOE,EAAUC,GAGrE,OAFaP,QAASW,EAAQN,EAAMD,EAEzB","ignoreList":[]}