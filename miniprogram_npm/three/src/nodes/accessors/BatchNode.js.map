{"version":3,"file":"node_modules/three/src/nodes/accessors/BatchNode.js","names":["Node","normalLocal","positionLocal","nodeProxy","vec3","mat3","mat4","int","ivec2","float","Fn","textureLoad","textureSize","tangentLocal","instanceIndex","drawIndex","varyingProperty","BatchNode","type","constructor","batchMesh","super","this","batchingIdNode","setup","builder","getDrawIndex","getIndirectIndex","id","size","_indirectTexture","x","mod","y","div","setLayout","name","inputs","indirectId","matricesTexture","_matricesTexture","j","mul","toInt","toVar","batchingMatrix","add","colorsTexture","_colorsTexture","getBatchingColor","rgb","color","assign","bm","transformedNormal","dot","batchingNormal","xyz","hasGeometryAttribute","mulAssign","batch","setParameterLength"],"sources":["node_modules/three/src/nodes/accessors/BatchNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { normalLocal } from './Normal.js';\nimport { positionLocal } from './Position.js';\nimport { nodeProxy, vec3, mat3, mat4, int, ivec2, float, Fn } from '../tsl/TSLBase.js';\nimport { textureLoad } from './TextureNode.js';\nimport { textureSize } from './TextureSizeNode.js';\nimport { tangentLocal } from './Tangent.js';\nimport { instanceIndex, drawIndex } from '../core/IndexNode.js';\nimport { varyingProperty } from '../core/PropertyNode.js';\n\n/**\n * This node implements the vertex shader logic which is required\n * when rendering 3D objects via batching. `BatchNode` must be used\n * with instances of {@link BatchedMesh}.\n *\n * @augments Node\n */\nclass BatchNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'BatchNode';\n\n\t}\n\n\t/**\n\t * Constructs a new batch node.\n\t *\n\t * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n\t */\n\tconstructor( batchMesh ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * A reference to batched mesh.\n\t\t *\n\t\t * @type {BatchedMesh}\n\t\t */\n\t\tthis.batchMesh = batchMesh;\n\n\t\t/**\n\t\t * The batching index node.\n\t\t *\n\t\t * @type {?IndexNode}\n\t\t * @default null\n\t\t */\n\t\tthis.batchingIdNode = null;\n\n\t}\n\n\t/**\n\t * Setups the internal buffers and nodes and assigns the transformed vertex data\n\t * to predefined node variables for accumulation. That follows the same patterns\n\t * like with morph and skinning nodes.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tsetup( builder ) {\n\n\t\tif ( this.batchingIdNode === null ) {\n\n\t\t\tif ( builder.getDrawIndex() === null ) {\n\n\t\t\t\tthis.batchingIdNode = instanceIndex;\n\n\t\t\t} else {\n\n\t\t\t\tthis.batchingIdNode = drawIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getIndirectIndex = Fn( ( [ id ] ) => {\n\n\t\t\tconst size = int( textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 ).x );\n\t\t\tconst x = int( id ).mod( size );\n\t\t\tconst y = int( id ).div( size );\n\t\t\treturn textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;\n\n\t\t} ).setLayout( {\n\t\t\tname: 'getIndirectIndex',\n\t\t\ttype: 'uint',\n\t\t\tinputs: [\n\t\t\t\t{ name: 'id', type: 'int' }\n\t\t\t]\n\t\t} );\n\n\t\tconst indirectId = getIndirectIndex( int( this.batchingIdNode ) );\n\n\t\tconst matricesTexture = this.batchMesh._matricesTexture;\n\n\t\tconst size = int( textureSize( textureLoad( matricesTexture ), 0 ).x );\n\t\tconst j = float( indirectId ).mul( 4 ).toInt().toVar();\n\n\t\tconst x = j.mod( size );\n\t\tconst y = j.div( size );\n\t\tconst batchingMatrix = mat4(\n\t\t\ttextureLoad( matricesTexture, ivec2( x, y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 1 ), y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 2 ), y ) ),\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 3 ), y ) )\n\t\t);\n\n\n\t\tconst colorsTexture = this.batchMesh._colorsTexture;\n\n\t\tif ( colorsTexture !== null ) {\n\n\t\t\tconst getBatchingColor = Fn( ( [ id ] ) => {\n\n\t\t\t\tconst size = int( textureSize( textureLoad( colorsTexture ), 0 ).x );\n\t\t\t\tconst j = id;\n\t\t\t\tconst x = j.mod( size );\n\t\t\t\tconst y = j.div( size );\n\t\t\t\treturn textureLoad( colorsTexture, ivec2( x, y ) ).rgb;\n\n\t\t\t} ).setLayout( {\n\t\t\t\tname: 'getBatchingColor',\n\t\t\t\ttype: 'vec3',\n\t\t\t\tinputs: [\n\t\t\t\t\t{ name: 'id', type: 'int' }\n\t\t\t\t]\n\t\t\t} );\n\n\t\t\tconst color = getBatchingColor( indirectId );\n\n\t\t\tvaryingProperty( 'vec3', 'vBatchColor' ).assign( color );\n\n\t\t}\n\n\t\tconst bm = mat3( batchingMatrix );\n\n\t\tpositionLocal.assign( batchingMatrix.mul( positionLocal ) );\n\n\t\tconst transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );\n\n\t\tconst batchingNormal = bm.mul( transformedNormal ).xyz;\n\n\t\tnormalLocal.assign( batchingNormal );\n\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\n\n\t\t\ttangentLocal.mulAssign( bm );\n\n\t\t}\n\n\t}\n\n}\n\nexport default BatchNode;\n\n/**\n * TSL function for creating a batch node.\n *\n * @tsl\n * @function\n * @param {BatchedMesh} batchMesh - A reference to batched mesh.\n * @returns {BatchNode}\n */\nexport const batch = /*@__PURE__*/ nodeProxy( BatchNode ).setParameterLength( 1 );\n"],"mappings":"OAAOA,SAAU,yBACRC,gBAAmB,qBACnBC,kBAAqB,uBACrBC,UAAWC,KAAMC,KAAMC,KAAMC,IAAKC,MAAOC,MAAOC,OAAU,2BAC1DC,gBAAmB,0BACnBC,gBAAmB,8BACnBC,iBAAoB,sBACpBC,cAAeC,cAAiB,8BAChCC,oBAAuB,0BAShC,MAAMC,kBAAkBjB,KAEvB,eAAWkB,GAEV,MAAO,WAER,CAOA,WAAAC,CAAaC,GAEZC,MAAO,QAOPC,KAAKF,UAAYA,EAQjBE,KAAKC,eAAiB,IAEvB,CASA,KAAAC,CAAOC,GAEuB,OAAxBH,KAAKC,iBAEuB,OAA3BE,EAAQC,eAEZJ,KAAKC,eAAiBT,cAItBQ,KAAKC,eAAiBR,WAMxB,MAAMY,EAAmBjB,IAAI,EAAIkB,MAEhC,MAAMC,EAAOtB,IAAKK,YAAaD,YAAaW,KAAKF,UAAUU,kBAAoB,GAAIC,GAC7EA,EAAIxB,IAAKqB,GAAKI,IAAKH,GACnBI,EAAI1B,IAAKqB,GAAKM,IAAKL,GACzB,OAAOlB,YAAaW,KAAKF,UAAUU,iBAAkBtB,MAAOuB,EAAGE,IAAMF,CAAC,IAEnEI,UAAW,CACdC,KAAM,mBACNlB,KAAM,OACNmB,OAAQ,CACP,CAAED,KAAM,KAAMlB,KAAM,UAIhBoB,EAAaX,EAAkBpB,IAAKe,KAAKC,iBAEzCgB,EAAkBjB,KAAKF,UAAUoB,iBAEjCX,EAAOtB,IAAKK,YAAaD,YAAa4B,GAAmB,GAAIR,GAC7DU,EAAIhC,MAAO6B,GAAaI,IAAK,GAAIC,QAAQC,QAEzCb,EAAIU,EAAET,IAAKH,GACXI,EAAIQ,EAAEP,IAAKL,GACXgB,EAAiBvC,KACtBK,YAAa4B,EAAiB/B,MAAOuB,EAAGE,IACxCtB,YAAa4B,EAAiB/B,MAAOuB,EAAEe,IAAK,GAAKb,IACjDtB,YAAa4B,EAAiB/B,MAAOuB,EAAEe,IAAK,GAAKb,IACjDtB,YAAa4B,EAAiB/B,MAAOuB,EAAEe,IAAK,GAAKb,KAI5Cc,EAAgBzB,KAAKF,UAAU4B,eAErC,GAAuB,OAAlBD,EAAyB,CAE7B,MAAME,EAAmBvC,IAAI,EAAIkB,MAEhC,MAAMC,EAAOtB,IAAKK,YAAaD,YAAaoC,GAAiB,GAAIhB,GAC3DU,EAAIb,EACJG,EAAIU,EAAET,IAAKH,GACXI,EAAIQ,EAAEP,IAAKL,GACjB,OAAOlB,YAAaoC,EAAevC,MAAOuB,EAAGE,IAAMiB,GAAG,IAEnDf,UAAW,CACdC,KAAM,mBACNlB,KAAM,OACNmB,OAAQ,CACP,CAAED,KAAM,KAAMlB,KAAM,UAIhBiC,EAAQF,EAAkBX,GAEhCtB,gBAAiB,OAAQ,eAAgBoC,OAAQD,EAElD,CAEA,MAAME,EAAKhD,KAAMwC,GAEjB3C,cAAckD,OAAQP,EAAeH,IAAKxC,gBAE1C,MAAMoD,EAAoBrD,YAAYiC,IAAK9B,KAAMiD,EAAI,GAAIE,IAAKF,EAAI,IAAOA,EAAI,GAAIE,IAAKF,EAAI,IAAOA,EAAI,GAAIE,IAAKF,EAAI,MAE5GG,EAAiBH,EAAGX,IAAKY,GAAoBG,IAEnDxD,YAAYmD,OAAQI,GAEf/B,EAAQiC,qBAAsB,YAElC7C,aAAa8C,UAAWN,EAI1B,iBAIcpC,iBAUR,MAAM2C,MAAsBzD,UAAWc,WAAY4C,mBAAoB","ignoreList":[]}