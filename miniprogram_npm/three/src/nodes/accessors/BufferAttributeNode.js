import InputNode from"../core/InputNode.js";import{nodeObject,addMethodChaining}from"../tsl/TSLCore.js";import{varying}from"../core/VaryingNode.js";import{InterleavedBufferAttribute}from"../../core/InterleavedBufferAttribute.js";import{InterleavedBuffer}from"../../core/InterleavedBuffer.js";import{StaticDrawUsage,DynamicDrawUsage}from"../../constants.js";class BufferAttributeNode extends InputNode{static get type(){return"BufferAttributeNode"}constructor(t,e=null,r=0,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=r,this.bufferOffset=i,this.usage=StaticDrawUsage,this.instanced=!1,this.attribute=null,this.global=!0,t&&!0===t.isBufferAttribute&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(0===this.bufferStride&&0===this.bufferOffset){let e=t.globalCache.getData(this.value);return void 0===e&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return null===this.bufferType&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(null!==this.attribute)return;const e=this.getNodeType(t),r=this.value,i=t.getTypeLength(e),u=this.bufferStride||i,s=this.bufferOffset,f=!0===r.isInterleavedBuffer?r:new InterleavedBuffer(r,u),a=new InterleavedBufferAttribute(f,i,s);f.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),r=t.getBufferAttributeFromNode(this,e),i=t.getPropertyName(r);let u=null;if("vertex"===t.shaderStage||"compute"===t.shaderStage)this.name=i,u=i;else{u=varying(this).build(t,e)}return u}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}}export default BufferAttributeNode;export const bufferAttribute=(t,e=null,r=0,i=0)=>nodeObject(new BufferAttributeNode(t,e,r,i));export const dynamicBufferAttribute=(t,e=null,r=0,i=0)=>bufferAttribute(t,e,r,i).setUsage(DynamicDrawUsage);export const instancedBufferAttribute=(t,e=null,r=0,i=0)=>bufferAttribute(t,e,r,i).setInstanced(!0);export const instancedDynamicBufferAttribute=(t,e=null,r=0,i=0)=>dynamicBufferAttribute(t,e,r,i).setInstanced(!0);addMethodChaining("toAttribute",(t=>bufferAttribute(t.value)));
//# sourceMappingURL=BufferAttributeNode.js.map