{"version":3,"file":"node_modules/three/src/nodes/accessors/BufferNode.js","names":["UniformNode","nodeObject","BufferNode","type","constructor","value","bufferType","bufferCount","super","this","isBufferNode","getElementType","builder","getNodeType","getInputType","buffer","count"],"sources":["node_modules/three/src/nodes/accessors/BufferNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\n/**\n * A special type of uniform node which represents array-like data\n * as uniform buffers. The access usually happens via `element()`\n * which returns an instance of {@link ArrayElementNode}. For example:\n *\n * ```js\n * const bufferNode = buffer( array, 'mat4', count );\n * const matrixNode = bufferNode.element( index ); // access a matrix from the buffer\n * ```\n * In general, it is recommended to use the more managed {@link UniformArrayNode}\n * since it handles more input types and automatically cares about buffer paddings.\n *\n * @augments UniformNode\n */\nclass BufferNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'BufferNode';\n\n\t}\n\n\t/**\n\t * Constructs a new buffer node.\n\t *\n\t * @param {Array<number>} value - Array-like buffer data.\n\t * @param {string} bufferType - The data type of the buffer.\n\t * @param {number} [bufferCount=0] - The count of buffer elements.\n\t */\n\tconstructor( value, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( value, bufferType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBufferNode = true;\n\n\t\t/**\n\t\t * The data type of the buffer.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.bufferType = bufferType;\n\n\t\t/**\n\t\t * The uniform node that holds the value of the reference node.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferCount = bufferCount;\n\n\t}\n\n\t/**\n\t * The data type of the buffer elements.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The element type.\n\t */\n\tgetElementType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'buffer'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'buffer';\n\n\t}\n\n}\n\nexport default BufferNode;\n\n/**\n * TSL function for creating a buffer node.\n *\n * @tsl\n * @function\n * @param {Array} value - Array-like buffer data.\n * @param {string} type - The data type of a buffer element.\n * @param {number} count - The count of buffer elements.\n * @returns {BufferNode}\n */\nexport const buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );\n"],"mappings":"OAAOA,gBAAiB,gCACfC,eAAkB,oBAgB3B,MAAMC,mBAAmBF,YAExB,eAAWG,GAEV,MAAO,YAER,CASA,WAAAC,CAAaC,EAAOC,EAAYC,EAAc,GAE7CC,MAAOH,EAAOC,GASdG,KAAKC,cAAe,EAOpBD,KAAKH,WAAaA,EAQlBG,KAAKF,YAAcA,CAEpB,CAQA,cAAAI,CAAgBC,GAEf,OAAOH,KAAKI,YAAaD,EAE1B,CAQA,YAAAE,GAEC,MAAO,QAER,iBAIcZ,kBAYR,MAAMa,OAAS,CAAEV,EAAOF,EAAMa,IAAWf,WAAY,IAAIC,WAAYG,EAAOF,EAAMa","ignoreList":[]}