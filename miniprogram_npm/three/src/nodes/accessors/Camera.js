import{uniform}from"../core/UniformNode.js";import{renderGroup,sharedUniformGroup}from"../core/UniformGroupNode.js";import{Vector3}from"../../math/Vector3.js";import{Fn}from"../tsl/TSLBase.js";import{uniformArray}from"./UniformArrayNode.js";import{builtin}from"./BuiltinNode.js";export const cameraIndex=uniform(0,"uint").setName("u_cameraIndex").setGroup(sharedUniformGroup("cameraIndex")).toVarying("v_cameraIndex");export const cameraNear=uniform("float").setName("cameraNear").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.near));export const cameraFar=uniform("float").setName("cameraFar").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.far));export const cameraProjectionMatrix=Fn((({camera:r})=>{let e;if(r.isArrayCamera&&r.cameras.length>0){const a=[];for(const e of r.cameras)a.push(e.projectionMatrix);e=uniformArray(a).setGroup(renderGroup).setName("cameraProjectionMatrices").element(r.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraProjectionMatrix")}else e=uniform("mat4").setName("cameraProjectionMatrix").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.projectionMatrix));return e})).once()();export const cameraProjectionMatrixInverse=Fn((({camera:r})=>{let e;if(r.isArrayCamera&&r.cameras.length>0){const a=[];for(const e of r.cameras)a.push(e.projectionMatrixInverse);e=uniformArray(a).setGroup(renderGroup).setName("cameraProjectionMatricesInverse").element(r.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraProjectionMatrixInverse")}else e=uniform("mat4").setName("cameraProjectionMatrixInverse").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.projectionMatrixInverse));return e})).once()();export const cameraViewMatrix=Fn((({camera:r})=>{let e;if(r.isArrayCamera&&r.cameras.length>0){const a=[];for(const e of r.cameras)a.push(e.matrixWorldInverse);e=uniformArray(a).setGroup(renderGroup).setName("cameraViewMatrices").element(r.isMultiViewCamera?builtin("gl_ViewID_OVR"):cameraIndex).toVar("cameraViewMatrix")}else e=uniform("mat4").setName("cameraViewMatrix").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.matrixWorldInverse));return e})).once()();export const cameraWorldMatrix=uniform("mat4").setName("cameraWorldMatrix").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.matrixWorld));export const cameraNormalMatrix=uniform("mat3").setName("cameraNormalMatrix").setGroup(renderGroup).onRenderUpdate((({camera:r})=>r.normalMatrix));export const cameraPosition=uniform(new Vector3).setName("cameraPosition").setGroup(renderGroup).onRenderUpdate((({camera:r},e)=>e.value.setFromMatrixPosition(r.matrixWorld)));
//# sourceMappingURL=Camera.js.map