import Node from"../core/Node.js";import{nodeObject,Fn,bool,float}from"../tsl/TSLBase.js";import{positionView}from"./Position.js";import{diffuseColor}from"../core/PropertyNode.js";import{Loop}from"../utils/LoopNode.js";import{smoothstep}from"../math/MathNode.js";import{uniformArray}from"./UniformArrayNode.js";import{builtin}from"./BuiltinNode.js";class ClippingNode extends Node{static get type(){return"ClippingNode"}constructor(o=ClippingNode.DEFAULT){super(),this.scope=o}setup(o){super.setup(o);const e=o.clippingContext,{intersectionPlanes:i,unionPlanes:t}=e;return this.hardwareClipping=o.material.hardwareClipping,this.scope===ClippingNode.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(i,t):this.scope===ClippingNode.HARDWARE?this.setupHardwareClipping(t,o):this.setupDefault(i,t)}setupAlphaToCoverage(o,e){return Fn((()=>{const i=float().toVar("distanceToPlane"),t=float().toVar("distanceToGradient"),n=float(1).toVar("clipOpacity"),s=e.length;if(!1===this.hardwareClipping&&s>0){const o=uniformArray(e);Loop(s,(({i:e})=>{const s=o.element(e);i.assign(positionView.dot(s.xyz).negate().add(s.w)),t.assign(i.fwidth().div(2)),n.mulAssign(smoothstep(t.negate(),t,i))}))}const p=o.length;if(p>0){const e=uniformArray(o),s=float(1).toVar("intersectionClipOpacity");Loop(p,(({i:o})=>{const n=e.element(o);i.assign(positionView.dot(n.xyz).negate().add(n.w)),t.assign(i.fwidth().div(2)),s.mulAssign(smoothstep(t.negate(),t,i).oneMinus())})),n.mulAssign(s.oneMinus())}diffuseColor.a.mulAssign(n),diffuseColor.a.equal(0).discard()}))()}setupDefault(o,e){return Fn((()=>{const i=e.length;if(!1===this.hardwareClipping&&i>0){const o=uniformArray(e);Loop(i,(({i:e})=>{const i=o.element(e);positionView.dot(i.xyz).greaterThan(i.w).discard()}))}const t=o.length;if(t>0){const e=uniformArray(o),i=bool(!0).toVar("clipped");Loop(t,(({i:o})=>{const t=e.element(o);i.assign(positionView.dot(t.xyz).greaterThan(t.w).and(i))})),i.discard()}}))()}setupHardwareClipping(o,e){const i=o.length;return e.enableHardwareClipping(i),Fn((()=>{const t=uniformArray(o),n=builtin(e.getClipDistance());Loop(i,(({i:o})=>{const e=t.element(o),i=positionView.dot(e.xyz).sub(e.w).negate();n.element(o).assign(i)}))}))()}}ClippingNode.ALPHA_TO_COVERAGE="alphaToCoverage",ClippingNode.DEFAULT="default",ClippingNode.HARDWARE="hardware";export default ClippingNode;export const clipping=()=>nodeObject(new ClippingNode);export const clippingAlpha=()=>nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));export const hardwareClipping=()=>nodeObject(new ClippingNode(ClippingNode.HARDWARE));
//# sourceMappingURL=ClippingNode.js.map