{"version":3,"file":"node_modules/three/src/nodes/accessors/ClippingNode.js","names":["Node","nodeObject","Fn","bool","float","positionView","diffuseColor","Loop","smoothstep","uniformArray","builtin","ClippingNode","type","constructor","scope","DEFAULT","super","this","setup","builder","clippingContext","intersectionPlanes","unionPlanes","hardwareClipping","material","ALPHA_TO_COVERAGE","setupAlphaToCoverage","HARDWARE","setupHardwareClipping","setupDefault","distanceToPlane","toVar","distanceGradient","clipOpacity","numUnionPlanes","length","clippingPlanes","i","plane","element","assign","dot","xyz","negate","add","w","fwidth","div","mulAssign","numIntersectionPlanes","intersectionClipOpacity","oneMinus","a","equal","discard","greaterThan","clipped","and","enableHardwareClipping","hw_clip_distances","getClipDistance","distance","sub","clipping","clippingAlpha"],"sources":["node_modules/three/src/nodes/accessors/ClippingNode.js"],"sourcesContent":["\nimport Node from '../core/Node.js';\nimport { nodeObject, Fn, bool, float } from '../tsl/TSLBase.js';\nimport { positionView } from './Position.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { uniformArray } from './UniformArrayNode.js';\nimport { builtin } from './BuiltinNode.js';\n\n/**\n * This node is used in {@link NodeMaterial} to setup the clipping\n * which can happen hardware-accelerated (if supported) and optionally\n * use alpha-to-coverage for anti-aliasing clipped edges.\n *\n * @augments Node\n */\nclass ClippingNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ClippingNode';\n\n\t}\n\n\t/**\n\t * Constructs a new clipping node.\n\t *\n\t * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,\n\t * the selected scope influences the behavior of the node and what type of code is generated.\n\t */\n\tconstructor( scope = ClippingNode.DEFAULT ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node's scope. Similar to other nodes, the selected scope influences\n\t\t * the behavior of the node and what type of code is generated.\n\t\t *\n\t\t * @type {('default'|'hardware'|'alphaToCoverage')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t}\n\n\t/**\n\t * Setups the node depending on the selected scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The result node.\n\t */\n\tsetup( builder ) {\n\n\t\tsuper.setup( builder );\n\n\t\tconst clippingContext = builder.clippingContext;\n\t\tconst { intersectionPlanes, unionPlanes } = clippingContext;\n\n\t\tthis.hardwareClipping = builder.material.hardwareClipping;\n\n\t\tif ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {\n\n\t\t\treturn this.setupAlphaToCoverage( intersectionPlanes, unionPlanes );\n\n\t\t} else if ( this.scope === ClippingNode.HARDWARE ) {\n\n\t\t\treturn this.setupHardwareClipping( unionPlanes, builder );\n\n\t\t} else {\n\n\t\t\treturn this.setupDefault( intersectionPlanes, unionPlanes );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Setups alpha to coverage.\n\t *\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @return {Node} The result node.\n\t */\n\tsetupAlphaToCoverage( intersectionPlanes, unionPlanes ) {\n\n\t\treturn Fn( () => {\n\n\t\t\tconst distanceToPlane = float().toVar( 'distanceToPlane' );\n\t\t\tconst distanceGradient = float().toVar( 'distanceToGradient' );\n\n\t\t\tconst clipOpacity = float( 1 ).toVar( 'clipOpacity' );\n\n\t\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\n\n\t\t\t\t\tclipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\n\n\t\t\tif ( numIntersectionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\n\t\t\t\tconst intersectionClipOpacity = float( 1 ).toVar( 'intersectionClipOpacity' );\n\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\n\n\t\t\t\t\tintersectionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );\n\n\t\t\t\t} );\n\n\t\t\t\tclipOpacity.mulAssign( intersectionClipOpacity.oneMinus() );\n\n\t\t\t}\n\n\t\t\tdiffuseColor.a.mulAssign( clipOpacity );\n\n\t\t\tdiffuseColor.a.equal( 0.0 ).discard();\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * Setups the default clipping.\n\t *\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @return {Node} The result node.\n\t */\n\tsetupDefault( intersectionPlanes, unionPlanes ) {\n\n\t\treturn Fn( () => {\n\n\t\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\t\t\t\t\tpositionView.dot( plane.xyz ).greaterThan( plane.w ).discard();\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\n\n\t\t\tif ( numIntersectionPlanes > 0 ) {\n\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\n\t\t\t\tconst clipped = bool( true ).toVar( 'clipped' );\n\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\n\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\n\t\t\t\t\tclipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );\n\n\t\t\t\t} );\n\n\t\t\t\tclipped.discard();\n\n\t\t\t}\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * Setups hardware clipping.\n\t *\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The result node.\n\t */\n\tsetupHardwareClipping( unionPlanes, builder ) {\n\n\t\tconst numUnionPlanes = unionPlanes.length;\n\n\t\tbuilder.enableHardwareClipping( numUnionPlanes );\n\n\t\treturn Fn( () => {\n\n\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\n\t\t\tconst hw_clip_distances = builtin( builder.getClipDistance() );\n\n\t\t\tLoop( numUnionPlanes, ( { i } ) => {\n\n\t\t\t\tconst plane = clippingPlanes.element( i );\n\n\t\t\t\tconst distance = positionView.dot( plane.xyz ).sub( plane.w ).negate();\n\t\t\t\thw_clip_distances.element( i ).assign( distance );\n\n\t\t\t} );\n\n\t\t} )();\n\n\t}\n\n}\n\nClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\nClippingNode.DEFAULT = 'default';\nClippingNode.HARDWARE = 'hardware';\n\nexport default ClippingNode;\n\n/**\n * TSL function for setting up the default clipping logic.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nexport const clipping = () => nodeObject( new ClippingNode() );\n\n/**\n * TSL function for setting up alpha to coverage.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nexport const clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );\n\n/**\n * TSL function for setting up hardware-based clipping.\n *\n * @tsl\n * @function\n * @returns {ClippingNode}\n */\nexport const hardwareClipping = () => nodeObject( new ClippingNode( ClippingNode.HARDWARE ) );\n"],"mappings":"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","ignoreList":[]}