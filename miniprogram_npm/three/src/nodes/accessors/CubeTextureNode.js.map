{"version":3,"file":"node_modules/three/src/nodes/accessors/CubeTextureNode.js","names":["TextureNode","reflectVector","refractVector","nodeObject","nodeProxy","vec3","CubeReflectionMapping","CubeRefractionMapping","WebGPUCoordinateSystem","materialEnvRotation","CubeTexture","EmptyTexture","CubeTextureNode","type","constructor","value","uvNode","levelNode","biasNode","super","this","isCubeTextureNode","getInputType","getDefaultUV","texture","mapping","console","error","setUpdateMatrix","setupUV","builder","renderer","coordinateSystem","isRenderTargetTexture","x","negate","yz","mul","generateUV","cubeUV","build","cubeTextureBase","setParameterLength","setName","cubeTexture","textureNode","clone","referenceNode","getSelf","uniformCubeTexture"],"sources":["node_modules/three/src/nodes/accessors/CubeTextureNode.js"],"sourcesContent":["import TextureNode from './TextureNode.js';\nimport { reflectVector, refractVector } from './ReflectVector.js';\nimport { nodeObject, nodeProxy, vec3 } from '../tsl/TSLBase.js';\n\nimport { CubeReflectionMapping, CubeRefractionMapping, WebGPUCoordinateSystem } from '../../constants.js';\nimport { materialEnvRotation } from './MaterialProperties.js';\n\nimport { CubeTexture } from '../../textures/CubeTexture.js';\n\nconst EmptyTexture = /*@__PURE__*/ new CubeTexture();\n\n/**\n * This type of uniform node represents a cube texture.\n *\n * @augments TextureNode\n */\nclass CubeTextureNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'CubeTextureNode';\n\n\t}\n\n\t/**\n\t * Constructs a new cube texture node.\n\t *\n\t * @param {CubeTexture} value - The cube texture.\n\t * @param {?Node<vec3>} [uvNode=null] - The uv node.\n\t * @param {?Node<int>} [levelNode=null] - The level node.\n\t * @param {?Node<float>} [biasNode=null] - The bias node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode, biasNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTextureNode = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'cubeTexture'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'cubeTexture';\n\n\t}\n\n\t/**\n\t * Returns a default uvs based on the mapping type of the cube texture.\n\t *\n\t * @return {Node<vec3>} The default uv attribute.\n\t */\n\tgetDefaultUV() {\n\n\t\tconst texture = this.value;\n\n\t\tif ( texture.mapping === CubeReflectionMapping ) {\n\n\t\t\treturn reflectVector;\n\n\t\t} else if ( texture.mapping === CubeRefractionMapping ) {\n\n\t\t\treturn refractVector;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping );\n\n\t\t\treturn vec3( 0, 0, 0 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n\t * for cube textures. The uv transformation matrix is not applied to cube textures.\n\t *\n\t * @param {boolean} value - The update toggle.\n\t */\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\n\n\t/**\n\t * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary\n\t * to modify the uv node for correct sampling.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to setup.\n\t * @return {Node} The updated uv node.\n\t */\n\tsetupUV( builder, uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {\n\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\n\n\t\t}\n\n\t\treturn materialEnvRotation.mul( uvNode );\n\n\t}\n\n\t/**\n\t * Generates the uv code snippet.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} cubeUV - The uv node to generate code for.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateUV( builder, cubeUV ) {\n\n\t\treturn cubeUV.build( builder, 'vec3' );\n\n\t}\n\n}\n\nexport default CubeTextureNode;\n\n/**\n * TSL function for creating a cube texture node.\n *\n * @tsl\n * @function\n * @param {CubeTexture} value - The cube texture.\n * @param {?Node<vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @param {?Node<float>} [biasNode=null] - The bias node.\n * @returns {CubeTextureNode}\n */\nexport const cubeTextureBase = /*@__PURE__*/ nodeProxy( CubeTextureNode ).setParameterLength( 1, 4 ).setName( 'cubeTexture' );\n\n/**\n * TSL function for creating a cube texture uniform node.\n *\n * @tsl\n * @function\n * @param {?CubeTexture|CubeTextureNode} [value=EmptyTexture] - The cube texture.\n * @param {?Node<vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @param {?Node<float>} [biasNode=null] - The bias node.\n * @returns {CubeTextureNode}\n */\nexport const cubeTexture = ( value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null ) => {\n\n\tlet textureNode;\n\n\tif ( value && value.isCubeTextureNode === true ) {\n\n\t\ttextureNode = nodeObject( value.clone() );\n\t\ttextureNode.referenceNode = value.getSelf(); // Ensure the reference is set to the original node\n\n\t\tif ( uvNode !== null ) textureNode.uvNode = nodeObject( uvNode );\n\t\tif ( levelNode !== null ) textureNode.levelNode = nodeObject( levelNode );\n\t\tif ( biasNode !== null ) textureNode.biasNode = nodeObject( biasNode );\n\n\t} else {\n\n\t\ttextureNode = cubeTextureBase( value, uvNode, levelNode, biasNode );\n\n\t}\n\n\treturn textureNode;\n\n};\n\n/**\n * TSL function for creating a uniform cube texture node.\n *\n * @tsl\n * @function\n * @param {?CubeTexture} [value=EmptyTexture] - The cube texture.\n * @returns {CubeTextureNode}\n */\nexport const uniformCubeTexture = ( value = EmptyTexture ) => cubeTextureBase( value );\n"],"mappings":"OAAOA,gBAAiB,0BACfC,cAAeC,kBAAqB,4BACpCC,WAAYC,UAAWC,SAAY,2BAEnCC,sBAAuBC,sBAAuBC,2BAA8B,4BAC5EC,wBAA2B,iCAE3BC,gBAAmB,gCAE5B,MAAMC,aAA6B,IAAID,YAOvC,MAAME,wBAAwBZ,YAE7B,eAAWa,GAEV,MAAO,iBAER,CAUA,WAAAC,CAAaC,EAAOC,EAAS,KAAMC,EAAY,KAAMC,EAAW,MAE/DC,MAAOJ,EAAOC,EAAQC,EAAWC,GASjCE,KAAKC,mBAAoB,CAE1B,CAQA,YAAAC,GAEC,MAAO,aAER,CAOA,YAAAC,GAEC,MAAMC,EAAUJ,KAAKL,MAErB,OAAKS,EAAQC,UAAYnB,sBAEjBL,cAEIuB,EAAQC,UAAYlB,sBAExBL,eAIPwB,QAAQC,MAAO,qDAAsDH,EAAQC,SAEtEpB,KAAM,EAAG,EAAG,GAIrB,CAQA,eAAAuB,GAAsC,CAUtC,OAAAC,CAASC,EAASd,GAEjB,MAAMQ,EAAUJ,KAAKL,MAQrB,OANKe,EAAQC,SAASC,mBAAqBxB,wBAA4BgB,EAAQS,wBAE9EjB,EAASX,KAAMW,EAAOkB,EAAEC,SAAUnB,EAAOoB,KAInC3B,oBAAoB4B,IAAKrB,EAEjC,CASA,UAAAsB,CAAYR,EAASS,GAEpB,OAAOA,EAAOC,MAAOV,EAAS,OAE/B,iBAIclB,uBAaR,MAAM6B,gBAAgCrC,UAAWQ,iBAAkB8B,mBAAoB,EAAG,GAAIC,QAAS,sBAavG,MAAMC,YAAc,CAAE7B,EAAQJ,aAAcK,EAAS,KAAMC,EAAY,KAAMC,EAAW,QAE9F,IAAI2B,EAiBJ,OAfK9B,IAAqC,IAA5BA,EAAMM,mBAEnBwB,EAAc1C,WAAYY,EAAM+B,SAChCD,EAAYE,cAAgBhC,EAAMiC,UAElB,OAAXhC,IAAkB6B,EAAY7B,OAASb,WAAYa,IACrC,OAAdC,IAAqB4B,EAAY5B,UAAYd,WAAYc,IAC5C,OAAbC,IAAoB2B,EAAY3B,SAAWf,WAAYe,KAI5D2B,EAAcJ,gBAAiB1B,EAAOC,EAAQC,EAAWC,GAInD2B,CAAW,SAYZ,MAAMI,mBAAqB,CAAElC,EAAQJ,eAAkB8B,gBAAiB1B","ignoreList":[]}