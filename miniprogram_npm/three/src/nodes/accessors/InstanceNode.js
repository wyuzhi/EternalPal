import Node from"../core/Node.js";import{varyingProperty}from"../core/PropertyNode.js";import{instancedBufferAttribute,instancedDynamicBufferAttribute}from"./BufferAttributeNode.js";import{normalLocal,transformNormal}from"./Normal.js";import{positionLocal}from"./Position.js";import{nodeProxy,vec3,mat4}from"../tsl/TSLBase.js";import{NodeUpdateType}from"../core/constants.js";import{buffer}from"../accessors/BufferNode.js";import{instanceIndex}from"../core/IndexNode.js";import{InstancedInterleavedBuffer}from"../../core/InstancedInterleavedBuffer.js";import{InstancedBufferAttribute}from"../../core/InstancedBufferAttribute.js";import{DynamicDrawUsage}from"../../constants.js";class InstanceNode extends Node{static get type(){return"InstanceNode"}constructor(e,t,n=null){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=n,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=NodeUpdateType.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:n,instanceColor:r}=this;let{instanceMatrixNode:o,instanceColorNode:s}=this;if(null===o){if(t<=1e3)o=buffer(n.array,"mat4",Math.max(t,1)).element(instanceIndex);else{const e=new InstancedInterleavedBuffer(n.array,16,1);this.buffer=e;const t=n.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute,r=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];o=mat4(...r)}this.instanceMatrixNode=o}if(r&&null===s){const e=new InstancedBufferAttribute(r.array,3),t=r.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute;this.bufferColor=e,s=vec3(t(e,"vec3",3,0)),this.instanceColorNode=s}const i=o.mul(positionLocal).xyz;if(positionLocal.assign(i),e.hasGeometryAttribute("normal")){const e=transformNormal(normalLocal,o);normalLocal.assign(e)}null!==this.instanceColorNode&&varyingProperty("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==DynamicDrawUsage&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==DynamicDrawUsage&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}export default InstanceNode;export const instance=nodeProxy(InstanceNode).setParameterLength(2,3);
//# sourceMappingURL=InstanceNode.js.map