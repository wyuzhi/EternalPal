{"version":3,"file":"node_modules/three/src/nodes/accessors/MaterialProperties.js","names":["Euler","Matrix4","uniform","_e1","_m1","materialRefractionRatio","onReference","material","onObjectUpdate","refractionRatio","materialEnvIntensity","scene","envMap","envMapIntensity","environmentIntensity","materialEnvRotation","frame","rotation","environment","environmentRotation","envMapRotation","copy","makeRotationFromEuler","identity"],"sources":["node_modules/three/src/nodes/accessors/MaterialProperties.js"],"sourcesContent":["import { Euler } from '../../math/Euler.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { uniform } from '../core/UniformNode.js';\n\nconst _e1 = /*@__PURE__*/ new Euler();\nconst _m1 = /*@__PURE__*/ new Matrix4();\n\n/**\n * TSL object that represents the refraction ratio of the material used for rendering the current object.\n *\n * @tsl\n * @type {UniformNode<float>}\n */\nexport const materialRefractionRatio = /*@__PURE__*/ uniform( 0 ).onReference( ( { material } ) => material ).onObjectUpdate( ( { material } ) => material.refractionRatio );\n\n/**\n * TSL object that represents the intensity of environment maps of PBR materials.\n * When `material.envMap` is set, the value is `material.envMapIntensity` otherwise `scene.environmentIntensity`.\n *\n * @tsl\n * @type {Node<float>}\n */\nexport const materialEnvIntensity = /*@__PURE__*/ uniform( 1 ).onReference( ( { material } ) => material ).onObjectUpdate( function ( { material, scene } ) {\n\n\treturn material.envMap ? material.envMapIntensity : scene.environmentIntensity;\n\n} );\n\n/**\n * TSL object that represents the rotation of environment maps.\n * When `material.envMap` is set, the value is `material.envMapRotation`. `scene.environmentRotation` controls the\n * rotation of `scene.environment` instead.\n *\n * @tsl\n * @type {Node<mat4>}\n */\nexport const materialEnvRotation = /*@__PURE__*/ uniform( new Matrix4() ).onReference( function ( frame ) {\n\n\treturn frame.material;\n\n} ).onObjectUpdate( function ( { material, scene } ) {\n\n\tconst rotation = ( scene.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;\n\n\tif ( rotation ) {\n\n\t\t_e1.copy( rotation );\n\n\t\t_m1.makeRotationFromEuler( _e1 );\n\n\t} else {\n\n\t\t_m1.identity();\n\n\t}\n\n\treturn _m1;\n\n} );\n"],"mappings":"OAASA,UAAa,6BACbC,YAAe,+BACfC,YAAe,yBAExB,MAAMC,IAAoB,IAAIH,MACxBI,IAAoB,IAAIH,eAQvB,MAAMI,wBAAwCH,QAAS,GAAII,aAAa,EAAIC,cAAgBA,IAAWC,gBAAgB,EAAID,cAAgBA,EAASE,yBASpJ,MAAMC,qBAAqCR,QAAS,GAAII,aAAa,EAAIC,cAAgBA,IAAWC,gBAAgB,UAAWD,SAAEA,EAAQI,MAAEA,IAEjJ,OAAOJ,EAASK,OAASL,EAASM,gBAAkBF,EAAMG,oBAE3D,WAUO,MAAMC,oBAAoCb,QAAS,IAAID,SAAYK,aAAa,SAAWU,GAEjG,OAAOA,EAAMT,QAEd,IAAIC,gBAAgB,UAAWD,SAAEA,EAAQI,MAAEA,IAE1C,MAAMM,EAAmC,OAAtBN,EAAMO,aAA4C,OAApBX,EAASK,OAAoBD,EAAMQ,oBAAsBZ,EAASa,eAcnH,OAZKH,GAEJd,IAAIkB,KAAMJ,GAEVb,IAAIkB,sBAAuBnB,MAI3BC,IAAImB,WAIEnB,GAER","ignoreList":[]}