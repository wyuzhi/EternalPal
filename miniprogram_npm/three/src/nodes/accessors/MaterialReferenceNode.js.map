{"version":3,"file":"node_modules/three/src/nodes/accessors/MaterialReferenceNode.js","names":["ReferenceNode","nodeObject","MaterialReferenceNode","type","constructor","property","inputType","material","super","this","isMaterialReferenceNode","updateReference","state","reference","materialReference","name"],"sources":["node_modules/three/src/nodes/accessors/MaterialReferenceNode.js"],"sourcesContent":["import ReferenceNode from './ReferenceNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\n/**\n * This node is a special type of reference node which is intended\n * for linking material properties with node values.\n * ```js\n * const opacityNode = materialReference( 'opacity', 'float', material );\n * ```\n * When changing `material.opacity`, the node value of `opacityNode` will\n * automatically be updated.\n *\n * @augments ReferenceNode\n */\nclass MaterialReferenceNode extends ReferenceNode {\n\n\tstatic get type() {\n\n\t\treturn 'MaterialReferenceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new material reference node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\n\t * @param {?Material} [material=null] - The material the property belongs to. When no material is set,\n\t * the node refers to the material of the current rendered object.\n\t */\n\tconstructor( property, inputType, material = null ) {\n\n\t\tsuper( property, inputType, material );\n\n\t\t/**\n\t\t * The material the property belongs to. When no material is set,\n\t\t * the node refers to the material of the current rendered object.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMaterialReferenceNode = true;\n\n\t}\n\n\t/**\n\t * Updates the reference based on the given state. The state is only evaluated\n\t * {@link MaterialReferenceNode#material} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.material !== null ? this.material : state.material;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\nexport default MaterialReferenceNode;\n\n/**\n * TSL function for creating a material reference node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {?Material} [material=null] - The material the property belongs to.\n * When no material is set, the node refers to the material of the current rendered object.\n * @returns {MaterialReferenceNode}\n */\nexport const materialReference = ( name, type, material = null ) => nodeObject( new MaterialReferenceNode( name, type, material ) );\n"],"mappings":"OAAOA,kBAAmB,4BACjBC,eAAkB,oBAa3B,MAAMC,8BAA8BF,cAEnC,eAAWG,GAEV,MAAO,uBAER,CAUA,WAAAC,CAAaC,EAAUC,EAAWC,EAAW,MAE5CC,MAAOH,EAAUC,EAAWC,GAS5BE,KAAKF,SAAWA,EAShBE,KAAKC,yBAA0B,CAEhC,CASA,eAAAC,CAAiBC,GAIhB,OAFAH,KAAKI,UAA8B,OAAlBJ,KAAKF,SAAoBE,KAAKF,SAAWK,EAAML,SAEzDE,KAAKI,SAEb,iBAIcX,6BAaR,MAAMY,kBAAoB,CAAEC,EAAMZ,EAAMI,EAAW,OAAUN,WAAY,IAAIC,sBAAuBa,EAAMZ,EAAMI","ignoreList":[]}