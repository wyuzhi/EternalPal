import{attribute}from"../core/AttributeNode.js";import{cameraViewMatrix}from"./Camera.js";import{modelNormalMatrix,modelWorldMatrix}from"./ModelNode.js";import{mat3,vec3,Fn}from"../tsl/TSLBase.js";import{positionView}from"./Position.js";import{directionToFaceDirection}from"../display/FrontFacingNode.js";export const normalGeometry=attribute("normal","vec3");export const normalLocal=Fn((o=>!1===o.geometry.hasAttribute("normal")?(console.warn('THREE.TSL: Vertex attribute "normal" not found on geometry.'),vec3(0,1,0)):normalGeometry),"vec3").once()().toVar("normalLocal");export const normalFlat=positionView.dFdx().cross(positionView.dFdy()).normalize().toVar("normalFlat");export const normalViewGeometry=Fn((o=>{let r;return r=!0===o.material.flatShading?normalFlat:transformNormalToView(normalLocal).toVarying("v_normalViewGeometry").normalize(),r}),"vec3").once()().toVar("normalViewGeometry");export const normalWorldGeometry=Fn((o=>{let r=normalViewGeometry.transformDirection(cameraViewMatrix);return!0!==o.material.flatShading&&(r=r.toVarying("v_normalWorldGeometry")),r.normalize().toVar("normalWorldGeometry")}),"vec3").once()();export const normalView=Fn((({subBuildFn:o,material:r,context:e})=>{let t;return"NORMAL"===o||"VERTEX"===o?(t=normalViewGeometry,!0!==r.flatShading&&(t=directionToFaceDirection(t))):t=e.setupNormal().context({getUV:null}),t}),"vec3").once(["NORMAL","VERTEX"])().toVar("normalView");export const normalWorld=normalView.transformDirection(cameraViewMatrix).toVar("normalWorld");export const clearcoatNormalView=Fn((({subBuildFn:o,context:r})=>{let e;return e="NORMAL"===o||"VERTEX"===o?normalView:r.setupClearcoatNormal().context({getUV:null}),e}),"vec3").once(["NORMAL","VERTEX"])().toVar("clearcoatNormalView");export const transformNormal=Fn((([o,r=modelWorldMatrix])=>{const e=mat3(r),t=o.div(vec3(e[0].dot(e[0]),e[1].dot(e[1]),e[2].dot(e[2])));return e.mul(t).xyz}));export const transformNormalToView=Fn((([o],r)=>{const e=r.renderer.overrideNodes.modelNormalViewMatrix;if(null!==e)return e.transformDirection(o);const t=modelNormalMatrix.mul(o);return cameraViewMatrix.transformDirection(t)}));export const transformedNormalView=Fn((()=>(console.warn('THREE.TSL: "transformedNormalView" is deprecated. Use "normalView" instead.'),normalView))).once(["NORMAL","VERTEX"])();export const transformedNormalWorld=Fn((()=>(console.warn('THREE.TSL: "transformedNormalWorld" is deprecated. Use "normalWorld" instead.'),normalWorld))).once(["NORMAL","VERTEX"])();export const transformedClearcoatNormalView=Fn((()=>(console.warn('THREE.TSL: "transformedClearcoatNormalView" is deprecated. Use "clearcoatNormalView" instead.'),clearcoatNormalView))).once(["NORMAL","VERTEX"])();
//# sourceMappingURL=Normal.js.map