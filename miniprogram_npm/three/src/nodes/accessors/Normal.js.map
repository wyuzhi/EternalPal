{"version":3,"file":"node_modules/three/src/nodes/accessors/Normal.js","names":["attribute","cameraViewMatrix","modelNormalMatrix","modelWorldMatrix","mat3","vec3","Fn","positionView","directionToFaceDirection","normalGeometry","normalLocal","builder","geometry","hasAttribute","console","warn","once","toVar","normalFlat","dFdx","cross","dFdy","normalize","normalViewGeometry","node","material","flatShading","transformNormalToView","toVarying","normalWorldGeometry","normal","transformDirection","normalView","subBuildFn","context","setupNormal","getUV","normalWorld","clearcoatNormalView","setupClearcoatNormal","transformNormal","matrix","m","transformedNormal","div","dot","mul","xyz","modelNormalViewMatrix","renderer","overrideNodes","transformedNormalView","transformedNormalWorld","transformedClearcoatNormalView"],"sources":["node_modules/three/src/nodes/accessors/Normal.js"],"sourcesContent":["import { attribute } from '../core/AttributeNode.js';\nimport { cameraViewMatrix } from './Camera.js';\nimport { modelNormalMatrix, modelWorldMatrix } from './ModelNode.js';\nimport { mat3, vec3, Fn } from '../tsl/TSLBase.js';\nimport { positionView } from './Position.js';\nimport { directionToFaceDirection } from '../display/FrontFacingNode.js';\n\n/**\n * TSL object that represents the normal attribute of the current rendered object in local space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalGeometry = /*@__PURE__*/ attribute( 'normal', 'vec3' );\n\n/**\n * TSL object that represents the vertex normal of the current rendered object in local space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalLocal = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\n\n\t\tconsole.warn( 'THREE.TSL: Vertex attribute \"normal\" not found on geometry.' );\n\n\t\treturn vec3( 0, 1, 0 );\n\n\t}\n\n\treturn normalGeometry;\n\n}, 'vec3' ).once() )().toVar( 'normalLocal' );\n\n/**\n * TSL object that represents the flat vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalFlat = /*@__PURE__*/ positionView.dFdx().cross( positionView.dFdy() ).normalize().toVar( 'normalFlat' );\n\n/**\n * TSL object that represents the vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalViewGeometry = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tlet node;\n\n\tif ( builder.material.flatShading === true ) {\n\n\t\tnode = normalFlat;\n\n\t} else {\n\n\t\tnode = transformNormalToView( normalLocal ).toVarying( 'v_normalViewGeometry' ).normalize();\n\n\t}\n\n\treturn node;\n\n}, 'vec3' ).once() )().toVar( 'normalViewGeometry' );\n\n/**\n * TSL object that represents the vertex normal of the current rendered object in world space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalWorldGeometry = /*@__PURE__*/ ( Fn( ( builder ) => {\n\n\tlet normal = normalViewGeometry.transformDirection( cameraViewMatrix );\n\n\tif ( builder.material.flatShading !== true ) {\n\n\t\tnormal = normal.toVarying( 'v_normalWorldGeometry' );\n\n\t}\n\n\treturn normal.normalize().toVar( 'normalWorldGeometry' );\n\n}, 'vec3' ).once() )();\n\n/**\n * TSL object that represents the vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalView = /*@__PURE__*/ ( Fn( ( { subBuildFn, material, context } ) => {\n\n\tlet node;\n\n\tif ( subBuildFn === 'NORMAL' || subBuildFn === 'VERTEX' ) {\n\n\t\tnode = normalViewGeometry;\n\n\t\tif ( material.flatShading !== true ) {\n\n\t\t\tnode = directionToFaceDirection( node );\n\n\t\t}\n\n\t} else {\n\n\t\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\n\n\t\tnode = context.setupNormal().context( { getUV: null } );\n\n\t}\n\n\treturn node;\n\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'normalView' );\n\n/**\n * TSL object that represents the vertex normal of the current rendered object in world space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const normalWorld = /*@__PURE__*/ normalView.transformDirection( cameraViewMatrix ).toVar( 'normalWorld' );\n\n/**\n * TSL object that represents the clearcoat vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const clearcoatNormalView = /*@__PURE__*/ ( Fn( ( { subBuildFn, context } ) => {\n\n\tlet node;\n\n\tif ( subBuildFn === 'NORMAL' || subBuildFn === 'VERTEX' ) {\n\n\t\tnode = normalView;\n\n\t} else {\n\n\t\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\n\n\t\tnode = context.setupClearcoatNormal().context( { getUV: null } );\n\n\t}\n\n\treturn node;\n\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'clearcoatNormalView' );\n\n/**\n * Transforms the normal with the given matrix.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal.\n * @param {Node<mat3>} [matrix=modelWorldMatrix] - The matrix.\n * @return {Node<vec3>} The transformed normal.\n */\nexport const transformNormal = /*@__PURE__*/ Fn( ( [ normal, matrix = modelWorldMatrix ] ) => {\n\n\tconst m = mat3( matrix );\n\n\tconst transformedNormal = normal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );\n\n\treturn m.mul( transformedNormal ).xyz;\n\n} );\n\n/**\n * Transforms the given normal from local to view space.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal.\n * @param {NodeBuilder} builder - The current node builder.\n * @return {Node<vec3>} The transformed normal.\n */\nexport const transformNormalToView = /*@__PURE__*/ Fn( ( [ normal ], builder ) => {\n\n\tconst modelNormalViewMatrix = builder.renderer.overrideNodes.modelNormalViewMatrix;\n\n\tif ( modelNormalViewMatrix !== null ) {\n\n\t\treturn modelNormalViewMatrix.transformDirection( normal );\n\n\t}\n\n\t//\n\n\tconst transformedNormal = modelNormalMatrix.mul( normal );\n\n\treturn cameraViewMatrix.transformDirection( transformedNormal );\n\n} );\n\n// Deprecated\n\n/**\n * TSL object that represents the transformed vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n * @deprecated since r178. Use `normalView` instead.\n */\nexport const transformedNormalView = ( Fn( () => { // @deprecated, r177\n\n\tconsole.warn( 'THREE.TSL: \"transformedNormalView\" is deprecated. Use \"normalView\" instead.' );\n\treturn normalView;\n\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\n\n/**\n * TSL object that represents the transformed vertex normal of the current rendered object in world space.\n *\n * @tsl\n * @type {Node<vec3>}\n * @deprecated since r178. Use `normalWorld` instead.\n */\nexport const transformedNormalWorld = ( Fn( () => { // @deprecated, r177\n\n\tconsole.warn( 'THREE.TSL: \"transformedNormalWorld\" is deprecated. Use \"normalWorld\" instead.' );\n\treturn normalWorld;\n\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\n\n/**\n * TSL object that represents the transformed clearcoat vertex normal of the current rendered object in view space.\n *\n * @tsl\n * @type {Node<vec3>}\n * @deprecated since r178. Use `clearcoatNormalView` instead.\n */\nexport const transformedClearcoatNormalView = ( Fn( () => { // @deprecated, r177\n\n\tconsole.warn( 'THREE.TSL: \"transformedClearcoatNormalView\" is deprecated. Use \"clearcoatNormalView\" instead.' );\n\treturn clearcoatNormalView;\n\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\n"],"mappings":"OAASA,cAAiB,kCACjBC,qBAAwB,qBACxBC,kBAAmBC,qBAAwB,wBAC3CC,KAAMC,KAAMC,OAAU,2BACtBC,iBAAoB,uBACpBC,6BAAgC,uCAQlC,MAAMC,eAA+BT,UAAW,SAAU,eAQ1D,MAAMU,YAA8BJ,IAAMK,IAEG,IAA9CA,EAAQC,SAASC,aAAc,WAEnCC,QAAQC,KAAM,+DAEPV,KAAM,EAAG,EAAG,IAIbI,gBAEL,QAASO,MAZ6B,GAYlBC,MAAO,sBAQvB,MAAMC,WAA2BX,aAAaY,OAAOC,MAAOb,aAAac,QAASC,YAAYL,MAAO,qBAQrG,MAAMM,mBAAqCjB,IAAMK,IAEvD,IAAIa,EAYJ,OARCA,GAFqC,IAAjCb,EAAQc,SAASC,YAEdR,WAIAS,sBAAuBjB,aAAckB,UAAW,wBAAyBN,YAI1EE,CAAI,GAET,QAASR,MAhBoC,GAgBzBC,MAAO,6BAQvB,MAAMY,oBAAsCvB,IAAMK,IAExD,IAAImB,EAASP,mBAAmBQ,mBAAoB9B,kBAQpD,OANsC,IAAjCU,EAAQc,SAASC,cAErBI,EAASA,EAAOF,UAAW,0BAIrBE,EAAOR,YAAYL,MAAO,sBAAuB,GAEtD,QAASD,MAZqC,UAoB1C,MAAMgB,WAA6B1B,IAAI,EAAI2B,aAAYR,WAAUS,cAEvE,IAAIV,EAoBJ,MAlBoB,WAAfS,GAA0C,WAAfA,GAE/BT,EAAOD,oBAEuB,IAAzBE,EAASC,cAEbF,EAAOhB,yBAA0BgB,KAQlCA,EAAOU,EAAQC,cAAcD,QAAS,CAAEE,MAAO,OAIzCZ,CAAI,GAET,QAASR,KAAM,CAAE,SAAU,UAxBU,GAwBOC,MAAO,qBAQ/C,MAAMoB,YAA4BL,WAAWD,mBAAoB9B,kBAAmBgB,MAAO,sBAQ3F,MAAMqB,oBAAsChC,IAAI,EAAI2B,aAAYC,cAEtE,IAAIV,EAcJ,OAVCA,EAFmB,WAAfS,GAA0C,WAAfA,EAExBD,WAMAE,EAAQK,uBAAuBL,QAAS,CAAEE,MAAO,OAIlDZ,CAAI,GAET,QAASR,KAAM,CAAE,SAAU,UAlBmB,GAkBFC,MAAO,8BAW/C,MAAMuB,gBAAgClC,IAAI,EAAIwB,EAAQW,EAAStC,qBAErE,MAAMuC,EAAItC,KAAMqC,GAEVE,EAAoBb,EAAOc,IAAKvC,KAAMqC,EAAG,GAAIG,IAAKH,EAAG,IAAOA,EAAG,GAAIG,IAAKH,EAAG,IAAOA,EAAG,GAAIG,IAAKH,EAAG,MAEvG,OAAOA,EAAEI,IAAKH,GAAoBI,GAAG,WAa/B,MAAMpB,sBAAsCrB,IAAI,EAAIwB,GAAUnB,KAEpE,MAAMqC,EAAwBrC,EAAQsC,SAASC,cAAcF,sBAE7D,GAA+B,OAA1BA,EAEJ,OAAOA,EAAsBjB,mBAAoBD,GAMlD,MAAMa,EAAoBzC,kBAAkB4C,IAAKhB,GAEjD,OAAO7B,iBAAiB8B,mBAAoBY,EAAmB,WAazD,MAAMQ,sBAA0B7C,IAAI,KAE1CQ,QAAQC,KAAM,+EACPiB,cAEJhB,KAAM,CAAE,SAAU,UALe,UAc9B,MAAMoC,uBAA2B9C,IAAI,KAE3CQ,QAAQC,KAAM,iFACPsB,eAEJrB,KAAM,CAAE,SAAU,UALgB,UAc/B,MAAMqC,+BAAmC/C,IAAI,KAEnDQ,QAAQC,KAAM,iGACPuB,uBAEJtB,KAAM,CAAE,SAAU,UALwB","ignoreList":[]}