import Node from"../core/Node.js";import{NodeUpdateType}from"../core/constants.js";import UniformNode from"../core/UniformNode.js";import{nodeProxy}from"../tsl/TSLBase.js";import{Vector3}from"../../math/Vector3.js";import{Sphere}from"../../math/Sphere.js";const _sphere=new Sphere;class Object3DNode extends Node{static get type(){return"Object3DNode"}constructor(e,o=null){super(),this.scope=e,this.object3d=o,this.updateType=NodeUpdateType.OBJECT,this.uniformNode=new UniformNode(null)}getNodeType(){const e=this.scope;return e===Object3DNode.WORLD_MATRIX?"mat4":e===Object3DNode.POSITION||e===Object3DNode.VIEW_POSITION||e===Object3DNode.DIRECTION||e===Object3DNode.SCALE?"vec3":e===Object3DNode.RADIUS?"float":void 0}update(e){const o=this.object3d,t=this.uniformNode,r=this.scope;if(r===Object3DNode.WORLD_MATRIX)t.value=o.matrixWorld;else if(r===Object3DNode.POSITION)t.value=t.value||new Vector3,t.value.setFromMatrixPosition(o.matrixWorld);else if(r===Object3DNode.SCALE)t.value=t.value||new Vector3,t.value.setFromMatrixScale(o.matrixWorld);else if(r===Object3DNode.DIRECTION)t.value=t.value||new Vector3,o.getWorldDirection(t.value);else if(r===Object3DNode.VIEW_POSITION){const r=e.camera;t.value=t.value||new Vector3,t.value.setFromMatrixPosition(o.matrixWorld),t.value.applyMatrix4(r.matrixWorldInverse)}else if(r===Object3DNode.RADIUS){const r=e.object.geometry;null===r.boundingSphere&&r.computeBoundingSphere(),_sphere.copy(r.boundingSphere).applyMatrix4(o.matrixWorld),t.value=_sphere.radius}}generate(e){const o=this.scope;return o===Object3DNode.WORLD_MATRIX?this.uniformNode.nodeType="mat4":o===Object3DNode.POSITION||o===Object3DNode.VIEW_POSITION||o===Object3DNode.DIRECTION||o===Object3DNode.SCALE?this.uniformNode.nodeType="vec3":o===Object3DNode.RADIUS&&(this.uniformNode.nodeType="float"),this.uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}Object3DNode.WORLD_MATRIX="worldMatrix",Object3DNode.POSITION="position",Object3DNode.SCALE="scale",Object3DNode.VIEW_POSITION="viewPosition",Object3DNode.DIRECTION="direction",Object3DNode.RADIUS="radius";export default Object3DNode;export const objectDirection=nodeProxy(Object3DNode,Object3DNode.DIRECTION).setParameterLength(1);export const objectWorldMatrix=nodeProxy(Object3DNode,Object3DNode.WORLD_MATRIX).setParameterLength(1);export const objectPosition=nodeProxy(Object3DNode,Object3DNode.POSITION).setParameterLength(1);export const objectScale=nodeProxy(Object3DNode,Object3DNode.SCALE).setParameterLength(1);export const objectViewPosition=nodeProxy(Object3DNode,Object3DNode.VIEW_POSITION).setParameterLength(1);export const objectRadius=nodeProxy(Object3DNode,Object3DNode.RADIUS).setParameterLength(1);
//# sourceMappingURL=Object3DNode.js.map