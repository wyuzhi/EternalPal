{"version":3,"file":"node_modules/three/src/nodes/accessors/Object3DNode.js","names":["Node","NodeUpdateType","UniformNode","nodeProxy","Vector3","Sphere","_sphere","Object3DNode","type","constructor","scope","object3d","super","this","updateType","OBJECT","uniformNode","getNodeType","WORLD_MATRIX","POSITION","VIEW_POSITION","DIRECTION","SCALE","RADIUS","update","frame","object","value","matrixWorld","setFromMatrixPosition","setFromMatrixScale","getWorldDirection","camera","applyMatrix4","matrixWorldInverse","geometry","boundingSphere","computeBoundingSphere","copy","radius","generate","builder","nodeType","build","serialize","data","deserialize","objectDirection","setParameterLength","objectWorldMatrix","objectPosition","objectScale","objectViewPosition","objectRadius"],"sources":["node_modules/three/src/nodes/accessors/Object3DNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Sphere } from '../../math/Sphere.js';\n\nconst _sphere = /*@__PURE__*/ new Sphere();\n\n/**\n * This node can be used to access transformation related metrics of 3D objects.\n * Depending on the selected scope, a different metric is represented as a uniform\n * in the shader. The following scopes are supported:\n *\n * - `POSITION`: The object's position in world space.\n * - `VIEW_POSITION`: The object's position in view/camera space.\n * - `DIRECTION`: The object's direction in world space.\n * - `SCALE`: The object's scale in world space.\n * - `WORLD_MATRIX`: The object's matrix in world space.\n *\n * @augments Node\n */\nclass Object3DNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'Object3DNode';\n\n\t}\n\n\t/**\n\t * Constructs a new object 3D node.\n\t *\n\t * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\n\t * @param {?Object3D} [object3d=null] - The 3D object.\n\t */\n\tconstructor( scope, object3d = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node reports a different type of transformation depending on the scope.\n\t\t *\n\t\t * @type {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * The 3D object.\n\t\t *\n\t\t * @type {?Object3D}\n\t\t * @default null\n\t\t */\n\t\tthis.object3d = object3d;\n\n\t\t/**\n\t\t * Overwritten since this type of node is updated per object.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * Holds the value of the node as a uniform.\n\t\t *\n\t\t * @type {UniformNode}\n\t\t */\n\t\tthis.uniformNode = new UniformNode( null );\n\n\t}\n\n\t/**\n\t * Overwritten since the node type is inferred from the scope.\n\t *\n\t * @return {string} The node type.\n\t */\n\tgetNodeType() {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\treturn 'mat4';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\treturn 'float';\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the uniform value depending on the scope.\n\t *\n\t * @param {NodeFrame} frame - The current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst object = this.object3d;\n\t\tconst uniformNode = this.uniformNode;\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\tuniformNode.value = object.matrixWorld;\n\n\t\t} else if ( scope === Object3DNode.POSITION ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t} else if ( scope === Object3DNode.SCALE ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tuniformNode.value.setFromMatrixScale( object.matrixWorld );\n\n\t\t} else if ( scope === Object3DNode.DIRECTION ) {\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\n\t\t\tobject.getWorldDirection( uniformNode.value );\n\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\n\n\t\t\tconst camera = frame.camera;\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\tconst geometry = frame.object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\tuniformNode.value = _sphere.radius;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates the code snippet of the uniform node. The node type of the uniform\n\t * node also depends on the selected scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\tthis.uniformNode.nodeType = 'mat4';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\n\n\t\t\tthis.uniformNode.nodeType = 'vec3';\n\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\n\n\t\t\tthis.uniformNode.nodeType = 'float';\n\n\t\t}\n\n\t\treturn this.uniformNode.build( builder );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\nObject3DNode.POSITION = 'position';\nObject3DNode.SCALE = 'scale';\nObject3DNode.VIEW_POSITION = 'viewPosition';\nObject3DNode.DIRECTION = 'direction';\nObject3DNode.RADIUS = 'radius';\n\nexport default Object3DNode;\n\n/**\n * TSL function for creating an object 3D node that represents the object's direction in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nexport const objectDirection = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.DIRECTION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's world matrix.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<mat4>}\n */\nexport const objectWorldMatrix = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's position in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nexport const objectPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.POSITION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's scale in world space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nexport const objectScale = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.SCALE ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's position in view/camera space.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<vec3>}\n */\nexport const objectViewPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION ).setParameterLength( 1 );\n\n/**\n * TSL function for creating an object 3D node that represents the object's radius.\n *\n * @tsl\n * @function\n * @param {?Object3D} [object3d] - The 3D object.\n * @returns {Object3DNode<float>}\n */\nexport const objectRadius = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.RADIUS ).setParameterLength( 1 );\n"],"mappings":"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","ignoreList":[]}