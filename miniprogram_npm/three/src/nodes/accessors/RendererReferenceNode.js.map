{"version":3,"file":"node_modules/three/src/nodes/accessors/RendererReferenceNode.js","names":["ReferenceBaseNode","nodeObject","renderGroup","RendererReferenceNode","type","constructor","property","inputType","renderer","super","this","setGroup","updateReference","state","reference","rendererReference","name"],"sources":["node_modules/three/src/nodes/accessors/RendererReferenceNode.js"],"sourcesContent":["import ReferenceBaseNode from './ReferenceBaseNode.js';\nimport { nodeObject } from '../tsl/TSLCore.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\n\n/**\n * This node is a special type of reference node which is intended\n * for linking renderer properties with node values.\n * ```js\n * const exposureNode = rendererReference( 'toneMappingExposure', 'float', renderer );\n * ```\n * When changing `renderer.toneMappingExposure`, the node value of `exposureNode` will\n * automatically be updated.\n *\n * @augments ReferenceBaseNode\n */\nclass RendererReferenceNode extends ReferenceBaseNode {\n\n\tstatic get type() {\n\n\t\treturn 'RendererReferenceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new renderer reference node.\n\t *\n\t * @param {string} property - The name of the property the node refers to.\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\n\t * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n\t * the node refers to the renderer of the current state.\n\t */\n\tconstructor( property, inputType, renderer = null ) {\n\n\t\tsuper( property, inputType, renderer );\n\n\t\t/**\n\t\t * The renderer the property belongs to. When no renderer is set,\n\t\t * the node refers to the renderer of the current state.\n\t\t *\n\t\t * @type {?Renderer}\n\t\t * @default null\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\tthis.setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Updates the reference based on the given state. The state is only evaluated\n\t * {@link RendererReferenceNode#renderer} is not set.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\n\t * @return {Object} The updated reference.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.renderer !== null ? this.renderer : state.renderer;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\nexport default RendererReferenceNode;\n\n/**\n * TSL function for creating a renderer reference node.\n *\n * @tsl\n * @function\n * @param {string} name - The name of the property the node refers to.\n * @param {string} type - The uniform type that should be used to represent the property value.\n * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\n * the node refers to the renderer of the current state.\n * @returns {RendererReferenceNode}\n */\nexport const rendererReference = ( name, type, renderer = null ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );\n"],"mappings":"OAAOA,sBAAuB,gCACrBC,eAAkB,2BAClBC,gBAAmB,8BAa5B,MAAMC,8BAA8BH,kBAEnC,eAAWI,GAEV,MAAO,uBAER,CAUA,WAAAC,CAAaC,EAAUC,EAAWC,EAAW,MAE5CC,MAAOH,EAAUC,EAAWC,GAS5BE,KAAKF,SAAWA,EAEhBE,KAAKC,SAAUT,YAEhB,CASA,eAAAU,CAAiBC,GAIhB,OAFAH,KAAKI,UAA8B,OAAlBJ,KAAKF,SAAoBE,KAAKF,SAAWK,EAAML,SAEzDE,KAAKI,SAEb,iBAIcX,6BAaR,MAAMY,kBAAoB,CAAEC,EAAMZ,EAAMI,EAAW,OAAUP,WAAY,IAAIE,sBAAuBa,EAAMZ,EAAMI","ignoreList":[]}