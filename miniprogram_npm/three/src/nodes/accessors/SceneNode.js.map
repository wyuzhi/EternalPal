{"version":3,"file":"node_modules/three/src/nodes/accessors/SceneNode.js","names":["UVMapping","Euler","Matrix4","Node","renderGroup","nodeImmutable","uniform","reference","_e1","_m1","SceneNode","type","constructor","scope","BACKGROUND_BLURRINESS","scene","super","this","setup","builder","output","BACKGROUND_INTENSITY","BACKGROUND_ROTATION","setName","setGroup","onRenderUpdate","background","isTexture","mapping","copy","backgroundRotation","x","y","z","makeRotationFromEuler","identity","console","error","backgroundBlurriness","backgroundIntensity"],"sources":["node_modules/three/src/nodes/accessors/SceneNode.js"],"sourcesContent":["import { UVMapping } from '../../constants.js';\nimport { Euler } from '../../math/Euler.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport Node from '../core/Node.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { nodeImmutable, uniform } from '../tsl/TSLBase.js';\nimport { reference } from './ReferenceNode.js';\n\nconst _e1 = /*@__PURE__*/ new Euler();\nconst _m1 = /*@__PURE__*/ new Matrix4();\n\n/**\n * This module allows access to a collection of scene properties. The following predefined TSL objects\n * are available for easier use:\n *\n * - `backgroundBlurriness`: A node that represents the scene's background blurriness.\n * - `backgroundIntensity`: A node that represents the scene's background intensity.\n * - `backgroundRotation`: A node that represents the scene's background rotation.\n *\n * @augments Node\n */\nclass SceneNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SceneNode';\n\n\t}\n\n\t/**\n\t * Constructs a new scene node.\n\t *\n\t * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.\n\t * @param {?Scene} [scene=null] - A reference to the scene.\n\t */\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scope defines the type of scene property that is accessed.\n\t\t *\n\t\t * @type {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * A reference to the scene that is going to be accessed.\n\t\t *\n\t\t * @type {?Scene}\n\t\t * @default null\n\t\t */\n\t\tthis.scene = scene;\n\n\t}\n\n\t/**\n\t * Depending on the scope, the method returns a different type of node that represents\n\t * the respective scene property.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Node} The output node.\n\t */\n\tsetup( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\n\n\t\tlet output;\n\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\n\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\n\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\n\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\n\n\t\t} else if ( scope === SceneNode.BACKGROUND_ROTATION ) {\n\n\t\t\toutput = uniform( 'mat4' ).setName( 'backgroundRotation' ).setGroup( renderGroup ).onRenderUpdate( () => {\n\n\t\t\t\tconst background = scene.background;\n\n\t\t\t\tif ( background !== null && background.isTexture && background.mapping !== UVMapping ) {\n\n\t\t\t\t\t_e1.copy( scene.backgroundRotation );\n\n\t\t\t\t\t// accommodate left-handed frame\n\t\t\t\t\t_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;\n\n\t\t\t\t\t_m1.makeRotationFromEuler( _e1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_m1.identity();\n\n\t\t\t\t}\n\n\t\t\t\treturn _m1;\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\nSceneNode.BACKGROUND_ROTATION = 'backgroundRotation';\n\nexport default SceneNode;\n\n/**\n * TSL object that represents the scene's background blurriness.\n *\n * @tsl\n * @type {SceneNode}\n */\nexport const backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\n\n/**\n * TSL object that represents the scene's background intensity.\n *\n * @tsl\n * @type {SceneNode}\n */\nexport const backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\n\n/**\n * TSL object that represents the scene's background rotation.\n *\n * @tsl\n * @type {SceneNode}\n */\nexport const backgroundRotation = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_ROTATION );\n"],"mappings":"OAASA,cAAiB,4BACjBC,UAAa,6BACbC,YAAe,+BACjBC,SAAU,yBACRC,gBAAmB,qCACnBC,cAAeC,YAAe,2BAC9BC,cAAiB,qBAE1B,MAAMC,IAAoB,IAAIP,MACxBQ,IAAoB,IAAIP,QAY9B,MAAMQ,kBAAkBP,KAEvB,eAAWQ,GAEV,MAAO,WAER,CAQA,WAAAC,CAAaC,EAAQH,UAAUI,sBAAuBC,EAAQ,MAE7DC,QAOAC,KAAKJ,MAAQA,EAQbI,KAAKF,MAAQA,CAEd,CASA,KAAAG,CAAOC,GAEN,MAAMN,EAAQI,KAAKJ,MACbE,EAAuB,OAAfE,KAAKF,MAAiBE,KAAKF,MAAQI,EAAQJ,MAEzD,IAAIK,EAyCJ,OAvCKP,IAAUH,UAAUI,sBAExBM,EAASb,UAAW,uBAAwB,QAASQ,GAE1CF,IAAUH,UAAUW,qBAE/BD,EAASb,UAAW,sBAAuB,QAASQ,GAEzCF,IAAUH,UAAUY,oBAE/BF,EAASd,QAAS,QAASiB,QAAS,sBAAuBC,SAAUpB,aAAcqB,gBAAgB,KAElG,MAAMC,EAAaX,EAAMW,WAiBzB,OAfoB,OAAfA,GAAuBA,EAAWC,WAAaD,EAAWE,UAAY5B,WAE1EQ,IAAIqB,KAAMd,EAAMe,oBAGhBtB,IAAIuB,IAAO,EAAGvB,IAAIwB,IAAO,EAAGxB,IAAIyB,IAAO,EAEvCxB,IAAIyB,sBAAuB1B,MAI3BC,IAAI0B,WAIE1B,GAAG,IAMX2B,QAAQC,MAAO,kCAAmCxB,GAI5CO,CAER,EAIDV,UAAUI,sBAAwB,uBAClCJ,UAAUW,qBAAuB,sBACjCX,UAAUY,oBAAsB,oCAEjBZ,iBAQR,MAAM4B,qBAAqCjC,cAAeK,UAAWA,UAAUI,8BAQ/E,MAAMyB,oBAAoClC,cAAeK,UAAWA,UAAUW,6BAQ9E,MAAMS,mBAAmCzB,cAAeK,UAAWA,UAAUY","ignoreList":[]}