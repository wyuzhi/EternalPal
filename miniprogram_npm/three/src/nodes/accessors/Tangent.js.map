{"version":3,"file":"node_modules/three/src/nodes/accessors/Tangent.js","names":["attribute","cameraViewMatrix","modelViewMatrix","Fn","vec4","tangentViewFrame","directionToFaceDirection","tangentGeometry","builder","geometry","hasAttribute","computeTangents","tangentLocal","xyz","toVar","tangentView","subBuildFn","material","node","mul","toVarying","normalize","flatShading","once","tangentWorld","transformDirection"],"sources":["node_modules/three/src/nodes/accessors/Tangent.js"],"sourcesContent":["import { attribute } from '../core/AttributeNode.js';\nimport { cameraViewMatrix } from './Camera.js';\nimport { modelViewMatrix } from './ModelNode.js';\nimport { Fn, vec4 } from '../tsl/TSLBase.js';\nimport { tangentViewFrame } from './TangentUtils.js';\nimport { directionToFaceDirection } from '../display/FrontFacingNode.js';\n\n/**\n * TSL object that represents the tangent attribute of the current rendered object.\n *\n * @tsl\n * @type {Node<vec4>}\n */\nexport const tangentGeometry = /*@__PURE__*/ Fn( ( builder ) => {\n\n\tif ( builder.geometry.hasAttribute( 'tangent' ) === false ) {\n\n\t\tbuilder.geometry.computeTangents();\n\n\t}\n\n\treturn attribute( 'tangent', 'vec4' );\n\n} )();\n\n/**\n * TSL object that represents the vertex tangent in local space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const tangentLocal = /*@__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );\n\n/**\n * TSL object that represents the vertex tangent in view space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const tangentView = /*@__PURE__*/ ( Fn( ( { subBuildFn, geometry, material } ) => {\n\n\tlet node;\n\n\tif ( subBuildFn === 'VERTEX' || geometry.hasAttribute( 'tangent' ) ) {\n\n\t\tnode = modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz.toVarying( 'v_tangentView' ).normalize();\n\n\t} else {\n\n\t\tnode = tangentViewFrame;\n\n\t}\n\n\tif ( material.flatShading !== true ) {\n\n\t\tnode = directionToFaceDirection( node );\n\n\t}\n\n\treturn node;\n\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'tangentView' );\n\n/**\n * TSL object that represents the vertex tangent in world space of the current rendered object.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const tangentWorld = /*@__PURE__*/ tangentView.transformDirection( cameraViewMatrix ).toVarying( 'v_tangentWorld' ).normalize().toVar( 'tangentWorld' );\n"],"mappings":"OAASA,cAAiB,kCACjBC,qBAAwB,qBACxBC,oBAAuB,wBACvBC,GAAIC,SAAY,2BAChBC,qBAAwB,2BACxBC,6BAAgC,uCAQlC,MAAMC,gBAAgCJ,IAAMK,KAEE,IAA/CA,EAAQC,SAASC,aAAc,YAEnCF,EAAQC,SAASE,kBAIXX,UAAW,UAAW,UAReG,UAkBtC,MAAMS,aAA6BL,gBAAgBM,IAAIC,MAAO,uBAQ9D,MAAMC,YAA8BZ,IAAI,EAAIa,aAAYP,WAAUQ,eAExE,IAAIC,EAkBJ,OAdCA,EAFmB,WAAfF,GAA2BP,EAASC,aAAc,WAE/CR,gBAAgBiB,IAAKf,KAAMQ,aAAc,IAAMC,IAAIO,UAAW,iBAAkBC,YAIhFhB,kBAIsB,IAAzBY,EAASK,cAEbJ,EAAOZ,yBAA0BY,IAI3BA,CAAI,GAET,QAASK,KAAM,CAAE,SAAU,UAtBW,GAsBMT,MAAO,sBAQ/C,MAAMU,aAA6BT,YAAYU,mBAAoBxB,kBAAmBmB,UAAW,kBAAmBC,YAAYP,MAAO","ignoreList":[]}