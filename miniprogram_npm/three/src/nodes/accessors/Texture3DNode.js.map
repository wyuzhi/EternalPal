{"version":3,"file":"node_modules/three/src/nodes/accessors/Texture3DNode.js","names":["TextureNode","nodeProxy","vec3","Fn","If","int","textureSize","normal","texture","uv","epsilon","ret","toVar","x","lessThan","assign","ElseIf","y","z","greaterThan","Else","step","sample","add","r","sub","normalize","Texture3DNode","type","constructor","value","uvNode","levelNode","super","this","isTexture3DNode","getInputType","getDefaultUV","setUpdateMatrix","setupUV","builder","isFlipY","isRenderTargetTexture","isFramebufferTexture","sampler","flipY","setY","generateUV","build","texture3D","setParameterLength"],"sources":["node_modules/three/src/nodes/accessors/Texture3DNode.js"],"sourcesContent":["import TextureNode from './TextureNode.js';\nimport { nodeProxy, vec3, Fn, If, int } from '../tsl/TSLBase.js';\nimport { textureSize } from './TextureSizeNode.js';\n\nconst normal = Fn( ( { texture, uv } ) => {\n\n\tconst epsilon = 0.0001;\n\n\tconst ret = vec3().toVar();\n\n\tIf( uv.x.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 1, 0 ) );\n\n\t} ).ElseIf( uv.z.lessThan( epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, 1 ) );\n\n\t} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( - 1, 0, 0 ) );\n\n\t} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, - 1, 0 ) );\n\n\t} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {\n\n\t\tret.assign( vec3( 0, 0, - 1 ) );\n\n\t} ).Else( () => {\n\n\t\tconst step = 0.01;\n\n\t\tconst x = texture.sample( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\n\t\tconst y = texture.sample( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\n\t\tconst z = texture.sample( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\n\n\t\tret.assign( vec3( x, y, z ) );\n\n\t} );\n\n\treturn ret.normalize();\n\n} );\n\n/**\n * This type of uniform node represents a 3D texture.\n *\n * @augments TextureNode\n */\nclass Texture3DNode extends TextureNode {\n\n\tstatic get type() {\n\n\t\treturn 'Texture3DNode';\n\n\t}\n\n\t/**\n\t * Constructs a new 3D texture node.\n\t *\n\t * @param {Data3DTexture} value - The 3D texture.\n\t * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n\t * @param {?Node<int>} [levelNode=null] - The level node.\n\t */\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTexture3DNode = true;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to return a fixed value `'texture3D'`.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture3D';\n\n\t}\n\n\t/**\n\t * Returns a default uv node which is in context of 3D textures a three-dimensional\n\t * uv node.\n\t *\n\t * @return {Node<vec3>} The default uv node.\n\t */\n\tgetDefaultUV() {\n\n\t\treturn vec3( 0.5, 0.5, 0.5 );\n\n\t}\n\n\t/**\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\n\t * for 3D textures. The uv transformation matrix is not applied to 3D textures.\n\t *\n\t * @param {boolean} value - The update toggle.\n\t */\n\tsetUpdateMatrix( /*value*/ ) { } // Ignore .updateMatrix for 3d TextureNode\n\n\t/**\n\t * Overwrites the default implementation to return the unmodified uv node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to setup.\n\t * @return {Node} The unmodified uv node.\n\t */\n\tsetupUV( builder, uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true ) ) {\n\n\t\t\tif ( this.sampler ) {\n\n\t\t\t\tuvNode = uvNode.flipY();\n\n\t\t\t} else {\n\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uvNode;\n\n\t}\n\n\t/**\n\t * Generates the uv code snippet.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {Node} uvNode - The uv node to generate code for.\n\t * @return {string} The generated code snippet.\n\t */\n\tgenerateUV( builder, uvNode ) {\n\n\t\treturn uvNode.build( builder, 'vec3' );\n\n\t}\n\n\t/**\n\t * TODO.\n\t *\n\t * @param {Node<vec3>} uvNode - The uv node .\n\t * @return {Node<vec3>} TODO.\n\t */\n\tnormal( uvNode ) {\n\n\t\treturn normal( { texture: this, uv: uvNode } );\n\n\t}\n\n}\n\nexport default Texture3DNode;\n\n/**\n * TSL function for creating a 3D texture node.\n *\n * @tsl\n * @function\n * @param {Data3DTexture} value - The 3D texture.\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\n * @param {?Node<int>} [levelNode=null] - The level node.\n * @returns {Texture3DNode}\n */\nexport const texture3D = /*@__PURE__*/ nodeProxy( Texture3DNode ).setParameterLength( 1, 3 );\n"],"mappings":"OAAOA,gBAAiB,0BACfC,UAAWC,KAAMC,GAAIC,GAAIC,QAAW,2BACpCC,gBAAmB,uBAE5B,MAAMC,OAASJ,IAAI,EAAIK,UAASC,SAE/B,MAAMC,EAAU,KAEVC,EAAMT,OAAOU,QAsCnB,OApCAR,GAAIK,EAAGI,EAAEC,SAAUJ,IAAW,KAE7BC,EAAII,OAAQb,KAAM,EAAG,EAAG,GAAK,IAE1Bc,OAAQP,EAAGQ,EAAEH,SAAUJ,IAAW,KAErCC,EAAII,OAAQb,KAAM,EAAG,EAAG,GAAK,IAE1Bc,OAAQP,EAAGS,EAAEJ,SAAUJ,IAAW,KAErCC,EAAII,OAAQb,KAAM,EAAG,EAAG,GAAK,IAE1Bc,OAAQP,EAAGI,EAAEM,YAAa,QAAe,KAE5CR,EAAII,OAAQb,MAAQ,EAAG,EAAG,GAAK,IAE5Bc,OAAQP,EAAGQ,EAAEE,YAAa,QAAe,KAE5CR,EAAII,OAAQb,KAAM,GAAK,EAAG,GAAK,IAE5Bc,OAAQP,EAAGS,EAAEC,YAAa,QAAe,KAE5CR,EAAII,OAAQb,KAAM,EAAG,GAAK,GAAK,IAE5BkB,MAAM,KAET,MAAMC,EAAO,IAEPR,EAAIL,EAAQc,OAAQb,EAAGc,IAAKrB,MAAM,IAAQ,EAAK,KAAUsB,EAAEC,IAAKjB,EAAQc,OAAQb,EAAGc,IAAKrB,KAAMmB,EAAM,EAAK,KAAUG,GACnHP,EAAIT,EAAQc,OAAQb,EAAGc,IAAKrB,KAAM,GAAK,IAAQ,KAAUsB,EAAEC,IAAKjB,EAAQc,OAAQb,EAAGc,IAAKrB,KAAM,EAAKmB,EAAM,KAAUG,GACnHN,EAAIV,EAAQc,OAAQb,EAAGc,IAAKrB,KAAM,EAAK,GAAK,OAAasB,EAAEC,IAAKjB,EAAQc,OAAQb,EAAGc,IAAKrB,KAAM,EAAK,EAAKmB,KAAWG,GAEzHb,EAAII,OAAQb,KAAMW,EAAGI,EAAGC,GAAK,IAIvBP,EAAIe,WAAW,IASvB,MAAMC,sBAAsB3B,YAE3B,eAAW4B,GAEV,MAAO,eAER,CASA,WAAAC,CAAaC,EAAOC,EAAS,KAAMC,EAAY,MAE9CC,MAAOH,EAAOC,EAAQC,GAStBE,KAAKC,iBAAkB,CAExB,CAQA,YAAAC,GAEC,MAAO,WAER,CAQA,YAAAC,GAEC,OAAOnC,KAAM,GAAK,GAAK,GAExB,CAQA,eAAAoC,GAA+B,CAS/B,OAAAC,CAASC,EAAST,GAEjB,MAAMvB,EAAU0B,KAAKJ,MAgBrB,OAdKU,EAAQC,YAAiD,IAAlCjC,EAAQkC,wBAAmE,IAAjClC,EAAQmC,uBAI5EZ,EAFIG,KAAKU,QAEAb,EAAOc,QAIPd,EAAOe,KAAMzC,IAAKC,YAAa4B,KAAMA,KAAKF,WAAYf,GAAIQ,IAAKM,EAAOd,GAAIQ,IAAK,KAMnFM,CAER,CASA,UAAAgB,CAAYP,EAAST,GAEpB,OAAOA,EAAOiB,MAAOR,EAAS,OAE/B,CAQA,MAAAjC,CAAQwB,GAEP,OAAOxB,OAAQ,CAAEC,QAAS0B,KAAMzB,GAAIsB,GAErC,iBAIcJ,qBAYR,MAAMsB,UAA0BhD,UAAW0B,eAAgBuB,mBAAoB,EAAG","ignoreList":[]}