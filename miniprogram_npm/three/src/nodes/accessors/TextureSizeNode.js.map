{"version":3,"file":"node_modules/three/src/nodes/accessors/TextureSizeNode.js","names":["Node","nodeProxy","TextureSizeNode","type","constructor","textureNode","levelNode","super","this","isTextureSizeNode","generate","builder","output","textureProperty","build","level","format","getMethod","getNodeType","textureSize","setParameterLength"],"sources":["node_modules/three/src/nodes/accessors/TextureSizeNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\n/**\n * A node that represents the dimensions of a texture. The texture size is\n * retrieved in the shader via built-in shader functions like `textureDimensions()`\n * or `textureSize()`.\n *\n * @augments Node\n */\nclass TextureSizeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TextureSizeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new texture size node.\n\t *\n\t * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n\t * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\n\t */\n\tconstructor( textureNode, levelNode = null ) {\n\n\t\tsuper( 'uvec2' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTextureSizeNode = true;\n\n\t\t/**\n\t\t * A texture node which size should be retrieved.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * A level node which defines the requested mip.\n\t\t *\n\t\t * @type {Node<int>}\n\t\t * @default null\n\t\t */\n\t\tthis.levelNode = levelNode;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst textureProperty = this.textureNode.build( builder, 'property' );\n\t\tconst level = this.levelNode === null ? '0' : this.levelNode.build( builder, 'int' );\n\n\t\treturn builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ level } )`, this.getNodeType( builder ), output );\n\n\t}\n\n}\n\nexport default TextureSizeNode;\n\n/**\n * TSL function for creating a texture size node.\n *\n * @tsl\n * @function\n * @param {TextureNode} textureNode - A texture node which size should be retrieved.\n * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\n * @returns {TextureSizeNode}\n */\nexport const textureSize = /*@__PURE__*/ nodeProxy( TextureSizeNode ).setParameterLength( 1, 2 );\n"],"mappings":"OAAOA,SAAU,yBACRC,cAAiB,oBAS1B,MAAMC,wBAAwBF,KAE7B,eAAWG,GAEV,MAAO,iBAER,CAQA,WAAAC,CAAaC,EAAaC,EAAY,MAErCC,MAAO,SASPC,KAAKC,mBAAoB,EAOzBD,KAAKH,YAAcA,EAQnBG,KAAKF,UAAYA,CAElB,CAEA,QAAAI,CAAUC,EAASC,GAElB,MAAMC,EAAkBL,KAAKH,YAAYS,MAAOH,EAAS,YACnDI,EAA2B,OAAnBP,KAAKF,UAAqB,IAAME,KAAKF,UAAUQ,MAAOH,EAAS,OAE7E,OAAOA,EAAQK,OAAQ,GAAIL,EAAQM,UAAW,yBAA4BJ,MAAsBE,MAAYP,KAAKU,YAAaP,GAAWC,EAE1I,iBAIcV,uBAWR,MAAMiB,YAA4BlB,UAAWC,iBAAkBkB,mBAAoB,EAAG","ignoreList":[]}