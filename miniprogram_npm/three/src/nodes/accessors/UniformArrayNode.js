import{nodeObject}from"../tsl/TSLBase.js";import{NodeUpdateType}from"../core/constants.js";import{getValueType}from"../core/NodeUtils.js";import ArrayElementNode from"../utils/ArrayElementNode.js";import BufferNode from"./BufferNode.js";class UniformArrayElementNode extends ArrayElementNode{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),n=this.node.getPaddedType();return e.format(t,n,r)}}class UniformArrayNode extends BufferNode{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?getValueType(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=NodeUpdateType.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const n=4*r,s=e[r];t[n]=s.r,t[n+1]=s.g,t[n+2]=s.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const n=4*r,s=e[r];t[n]=s.elements[0],t[n+1]=s.elements[1],t[n+2]=s.elements[2],t[n+3]=s.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const n=16*r,s=e[r];t[n]=s.elements[0],t[n+1]=s.elements[1],t[n+2]=s.elements[2],t[n+4]=s.elements[3],t[n+5]=s.elements[4],t[n+6]=s.elements[5],t[n+8]=s.elements[6],t[n+9]=s.elements[7],t[n+10]=s.elements[8],t[n+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const n=16*r,s=e[r];for(let e=0;e<s.elements.length;e++)t[n+e]=s.elements[e]}else for(let r=0;r<e.length;r++){const n=4*r,s=e[r];t[n]=s.x,t[n+1]=s.y,t[n+2]=s.z||0,t[n+3]=s.w||0}}setup(e){const t=this.array.length,r=this.elementType;let n=Float32Array;const s=this.paddedType,o=e.getTypeLength(s);return"i"===r.charAt(0)&&(n=Int32Array),"u"===r.charAt(0)&&(n=Uint32Array),this.value=new n(t*o),this.bufferCount=t,this.bufferType=s,super.setup(e)}element(e){return nodeObject(new UniformArrayElementNode(this,nodeObject(e)))}}export default UniformArrayNode;export const uniformArray=(e,t)=>nodeObject(new UniformArrayNode(e,t));
//# sourceMappingURL=UniformArrayNode.js.map