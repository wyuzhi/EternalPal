{"version":3,"file":"node_modules/three/src/nodes/accessors/UserDataNode.js","names":["ReferenceNode","nodeObject","UserDataNode","type","constructor","property","inputType","userData","super","this","updateReference","state","reference","object","name"],"sources":["node_modules/three/src/nodes/accessors/UserDataNode.js"],"sourcesContent":["import ReferenceNode from './ReferenceNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\n/**\n * A special type of reference node that allows to link values in\n * `userData` fields to node objects.\n * ```js\n * sprite.userData.rotation = 1; // stores individual rotation per sprite\n *\n * const material = new THREE.SpriteNodeMaterial();\n * material.rotationNode = userData( 'rotation', 'float' );\n * ```\n * Since `UserDataNode` is extended from {@link ReferenceNode}, the node value\n * will automatically be updated when the `rotation` user data field changes.\n *\n * @augments ReferenceNode\n */\nclass UserDataNode extends ReferenceNode {\n\n\tstatic get type() {\n\n\t\treturn 'UserDataNode';\n\n\t}\n\n\t/**\n\t * Constructs a new user data node.\n\t *\n\t * @param {string} property - The property name that should be referenced by the node.\n\t * @param {string} inputType - The node data type of the reference.\n\t * @param {?Object} [userData=null] - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n\t */\n\tconstructor( property, inputType, userData = null ) {\n\n\t\tsuper( property, inputType, userData );\n\n\t\t/**\n\t\t * A reference to the `userData` object. If not provided, the `userData`\n\t\t * property of the 3D object that uses the node material is evaluated.\n\t\t *\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis.userData = userData;\n\n\t}\n\n\t/**\n\t * Overwritten to make sure {@link ReferenceNode#reference} points to the correct\n\t * `userData` field.\n\t *\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state to evaluate.\n\t * @return {Object} A reference to the `userData` field.\n\t */\n\tupdateReference( state ) {\n\n\t\tthis.reference = this.userData !== null ? this.userData : state.object.userData;\n\n\t\treturn this.reference;\n\n\t}\n\n}\n\nexport default UserDataNode;\n\n/**\n * TSL function for creating a user data node.\n *\n * @tsl\n * @function\n * @param {string} name - The property name that should be referenced by the node.\n * @param {string} inputType - The node data type of the reference.\n * @param {?Object} userData - A reference to the `userData` object. If not provided, the `userData` property of the 3D object that uses the node material is evaluated.\n * @returns {UserDataNode}\n */\nexport const userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\n"],"mappings":"OAAOA,kBAAmB,4BACjBC,eAAkB,oBAgB3B,MAAMC,qBAAqBF,cAE1B,eAAWG,GAEV,MAAO,cAER,CASA,WAAAC,CAAaC,EAAUC,EAAWC,EAAW,MAE5CC,MAAOH,EAAUC,EAAWC,GAS5BE,KAAKF,SAAWA,CAEjB,CASA,eAAAG,CAAiBC,GAIhB,OAFAF,KAAKG,UAA8B,OAAlBH,KAAKF,SAAoBE,KAAKF,SAAWI,EAAME,OAAON,SAEhEE,KAAKG,SAEb,iBAIcV,oBAYR,MAAMK,SAAW,CAAEO,EAAMR,EAAWC,IAAcN,WAAY,IAAIC,aAAcY,EAAMR,EAAWC","ignoreList":[]}