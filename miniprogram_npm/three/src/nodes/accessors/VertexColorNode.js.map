{"version":3,"file":"node_modules/three/src/nodes/accessors/VertexColorNode.js","names":["AttributeNode","nodeObject","Vector4","VertexColorNode","type","constructor","index","super","this","isVertexColorNode","getAttributeName","generate","builder","attributeName","result","hasGeometryAttribute","generateConst","nodeType","serialize","data","deserialize","vertexColor"],"sources":["node_modules/three/src/nodes/accessors/VertexColorNode.js"],"sourcesContent":["import AttributeNode from '../core/AttributeNode.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\n/**\n * An attribute node for representing vertex colors.\n *\n * @augments AttributeNode\n */\nclass VertexColorNode extends AttributeNode {\n\n\tstatic get type() {\n\n\t\treturn 'VertexColorNode';\n\n\t}\n\n\t/**\n\t * Constructs a new vertex color node.\n\t *\n\t * @param {number} index - The attribute index.\n\t */\n\tconstructor( index ) {\n\n\t\tsuper( null, 'vec4' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isVertexColorNode = true;\n\n\t\t/**\n\t\t * The attribute index to enable more than one sets of vertex colors.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.index = index;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation by honoring the attribute index.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The attribute name.\n\t */\n\tgetAttributeName( /*builder*/ ) {\n\n\t\tconst index = this.index;\n\n\t\treturn 'color' + ( index > 0 ? index : '' );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst attributeName = this.getAttributeName( builder );\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\n\n\t\tlet result;\n\n\t\tif ( geometryAttribute === true ) {\n\n\t\t\tresult = super.generate( builder );\n\n\t\t} else {\n\n\t\t\t// Vertex color fallback should be white\n\t\t\tresult = builder.generateConst( this.nodeType, new Vector4( 1, 1, 1, 1 ) );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.index = this.index;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.index = data.index;\n\n\t}\n\n}\n\nexport default VertexColorNode;\n\n/**\n * TSL function for creating a reference node.\n *\n * @tsl\n * @function\n * @param {number} [index=0] - The attribute index.\n * @returns {VertexColorNode}\n */\nexport const vertexColor = ( index = 0 ) => nodeObject( new VertexColorNode( index ) );\n"],"mappings":"OAAOA,kBAAmB,kCACjBC,eAAkB,2BAClBC,YAAe,wBAOxB,MAAMC,wBAAwBH,cAE7B,eAAWI,GAEV,MAAO,iBAER,CAOA,WAAAC,CAAaC,GAEZC,MAAO,KAAM,QASbC,KAAKC,mBAAoB,EAQzBD,KAAKF,MAAQA,CAEd,CAQA,gBAAAI,GAEC,MAAMJ,EAAQE,KAAKF,MAEnB,MAAO,SAAYA,EAAQ,EAAIA,EAAQ,GAExC,CAEA,QAAAK,CAAUC,GAET,MAAMC,EAAgBL,KAAKE,iBAAkBE,GAG7C,IAAIE,EAaJ,OATCA,GAF0B,IAJDF,EAAQG,qBAAsBF,GAM9CN,MAAMI,SAAUC,GAKhBA,EAAQI,cAAeR,KAAKS,SAAU,IAAIf,QAAS,EAAG,EAAG,EAAG,IAI/DY,CAER,CAEA,SAAAI,CAAWC,GAEVZ,MAAMW,UAAWC,GAEjBA,EAAKb,MAAQE,KAAKF,KAEnB,CAEA,WAAAc,CAAaD,GAEZZ,MAAMa,YAAaD,GAEnBX,KAAKF,MAAQa,EAAKb,KAEnB,iBAIcH,uBAUR,MAAMkB,YAAc,CAAEf,EAAQ,IAAOL,WAAY,IAAIE,gBAAiBG","ignoreList":[]}