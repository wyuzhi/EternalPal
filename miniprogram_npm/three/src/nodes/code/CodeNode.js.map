{"version":3,"file":"node_modules/three/src/nodes/code/CodeNode.js","names":["Node","nodeProxy","CodeNode","type","constructor","code","includes","language","super","this","isCodeNode","global","setIncludes","getIncludes","generate","builder","include","build","nodeCode","getCodeFromNode","getNodeType","serialize","data","deserialize","setParameterLength","js","src","wgsl","glsl"],"sources":["node_modules/three/src/nodes/code/CodeNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\n/**\n * This class represents native code sections. It is the base\n * class for modules like {@link FunctionNode} which allows to implement\n * functions with native shader languages.\n *\n * @augments Node\n */\nclass CodeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'CodeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new code node.\n\t *\n\t * @param {string} [code=''] - The native code.\n\t * @param {Array<Node>} [includes=[]] - An array of includes.\n\t * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\n\t */\n\tconstructor( code = '', includes = [], language = '' ) {\n\n\t\tsuper( 'code' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCodeNode = true;\n\n\t\t/**\n\t\t * This flag is used for global cache.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.global = true;\n\n\t\t/**\n\t\t * The native code.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.code = code;\n\n\t\t/**\n\t\t * An array of includes\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t * @default []\n\t\t */\n\t\tthis.includes = includes;\n\n\t\t/**\n\t\t * The used language.\n\t\t *\n\t\t * @type {('js'|'wgsl'|'glsl')}\n\t\t * @default ''\n\t\t */\n\t\tthis.language = language;\n\n\t}\n\n\t/**\n\t * Sets the includes of this code node.\n\t *\n\t * @param {Array<Node>} includes - The includes to set.\n\t * @return {CodeNode} A reference to this node.\n\t */\n\tsetIncludes( includes ) {\n\n\t\tthis.includes = includes;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the includes of this code node.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {Array<Node>} The includes.\n\t */\n\tgetIncludes( /*builder*/ ) {\n\n\t\treturn this.includes;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst includes = this.getIncludes( builder );\n\n\t\tfor ( const include of includes ) {\n\n\t\t\tinclude.build( builder );\n\n\t\t}\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\n\t\tnodeCode.code = this.code;\n\n\t\treturn nodeCode.code;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.code = this.code;\n\t\tdata.language = this.language;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.code = data.code;\n\t\tthis.language = data.language;\n\n\t}\n\n}\n\nexport default CodeNode;\n\n/**\n * TSL function for creating a code node.\n *\n * @tsl\n * @function\n * @param {string} [code] - The native code.\n * @param {?Array<Node>} [includes=[]] - An array of includes.\n * @param {?('js'|'wgsl'|'glsl')} [language=''] - The used language.\n * @returns {CodeNode}\n */\nexport const code = /*@__PURE__*/ nodeProxy( CodeNode ).setParameterLength( 1, 3 );\n\n/**\n * TSL function for creating a JS code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nexport const js = ( src, includes ) => code( src, includes, 'js' );\n\n/**\n * TSL function for creating a WGSL code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nexport const wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\n\n/**\n * TSL function for creating a GLSL code node.\n *\n * @tsl\n * @function\n * @param {string} src - The native code.\n * @param {Array<Node>} includes - An array of includes.\n * @returns {CodeNode}\n */\nexport const glsl = ( src, includes ) => code( src, includes, 'glsl' );\n"],"mappings":"OAAOA,SAAU,yBACRC,cAAiB,oBAS1B,MAAMC,iBAAiBF,KAEtB,eAAWG,GAEV,MAAO,UAER,CASA,WAAAC,CAAaC,EAAO,GAAIC,EAAW,GAAIC,EAAW,IAEjDC,MAAO,QASPC,KAAKC,YAAa,EAQlBD,KAAKE,QAAS,EAQdF,KAAKJ,KAAOA,EAQZI,KAAKH,SAAWA,EAQhBG,KAAKF,SAAWA,CAEjB,CAQA,WAAAK,CAAaN,GAIZ,OAFAG,KAAKH,SAAWA,EAETG,IAER,CAQA,WAAAI,GAEC,OAAOJ,KAAKH,QAEb,CAEA,QAAAQ,CAAUC,GAET,MAAMT,EAAWG,KAAKI,YAAaE,GAEnC,IAAM,MAAMC,KAAWV,EAEtBU,EAAQC,MAAOF,GAIhB,MAAMG,EAAWH,EAAQI,gBAAiBV,KAAMA,KAAKW,YAAaL,IAGlE,OAFAG,EAASb,KAAOI,KAAKJ,KAEda,EAASb,IAEjB,CAEA,SAAAgB,CAAWC,GAEVd,MAAMa,UAAWC,GAEjBA,EAAKjB,KAAOI,KAAKJ,KACjBiB,EAAKf,SAAWE,KAAKF,QAEtB,CAEA,WAAAgB,CAAaD,GAEZd,MAAMe,YAAaD,GAEnBb,KAAKJ,KAAOiB,EAAKjB,KACjBI,KAAKF,SAAWe,EAAKf,QAEtB,iBAIcL,gBAYR,MAAMG,KAAqBJ,UAAWC,UAAWsB,mBAAoB,EAAG,UAWxE,MAAMC,GAAK,CAAEC,EAAKpB,IAAcD,KAAMqB,EAAKpB,EAAU,aAWrD,MAAMqB,KAAO,CAAED,EAAKpB,IAAcD,KAAMqB,EAAKpB,EAAU,eAWvD,MAAMsB,KAAO,CAAEF,EAAKpB,IAAcD,KAAMqB,EAAKpB,EAAU","ignoreList":[]}