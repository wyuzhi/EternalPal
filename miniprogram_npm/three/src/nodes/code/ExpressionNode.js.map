{"version":3,"file":"node_modules/three/src/nodes/code/ExpressionNode.js","names":["Node","nodeProxy","ExpressionNode","type","constructor","snippet","nodeType","super","this","generate","builder","output","getNodeType","format","addLineFlowCode","expression","setParameterLength"],"sources":["node_modules/three/src/nodes/code/ExpressionNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { nodeProxy } from '../tsl/TSLCore.js';\n\n/**\n * This class can be used to implement basic expressions in shader code.\n * Basic examples for that are `return`, `continue` or `discard` statements.\n *\n * @augments Node\n */\nclass ExpressionNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ExpressionNode';\n\n\t}\n\n\t/**\n\t * Constructs a new expression node.\n\t *\n\t * @param {string} [snippet=''] - The native code snippet.\n\t * @param {string} [nodeType='void'] - The node type.\n\t */\n\tconstructor( snippet = '', nodeType = 'void' ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The native code snippet.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.snippet = snippet;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst snippet = this.snippet;\n\n\t\tif ( type === 'void' ) {\n\n\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t} else {\n\n\t\t\treturn builder.format( snippet, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default ExpressionNode;\n\n/**\n * TSL function for creating an expression node.\n *\n * @tsl\n * @function\n * @param {string} [snippet] - The native code snippet.\n * @param {?string} [nodeType='void'] - The node type.\n * @returns {ExpressionNode}\n */\nexport const expression = /*@__PURE__*/ nodeProxy( ExpressionNode ).setParameterLength( 1, 2 );\n"],"mappings":"OAAOA,SAAU,yBACRC,cAAiB,oBAQ1B,MAAMC,uBAAuBF,KAE5B,eAAWG,GAEV,MAAO,gBAER,CAQA,WAAAC,CAAaC,EAAU,GAAIC,EAAW,QAErCC,MAAOD,GAQPE,KAAKH,QAAUA,CAEhB,CAEA,QAAAI,CAAUC,EAASC,GAElB,MAAMR,EAAOK,KAAKI,YAAaF,GACzBL,EAAUG,KAAKH,QAErB,GAAc,SAATF,EAMJ,OAAOO,EAAQG,OAAQR,EAASF,EAAMQ,GAJtCD,EAAQI,gBAAiBT,EAASG,KAQpC,iBAIcN,sBAWR,MAAMa,WAA2Bd,UAAWC,gBAAiBc,mBAAoB,EAAG","ignoreList":[]}