import CodeNode from"./CodeNode.js";import{nodeObject}from"../tsl/TSLBase.js";class FunctionNode extends CodeNode{static get type(){return"FunctionNode"}constructor(e="",t=[],o=""){super(e,t,o)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let o=t.nodeFunction;return void 0===o&&(o=e.parser.parseFunction(this.code),t.nodeFunction=o),o}generate(e,t){super.generate(e);const o=this.getNodeFunction(e),n=o.name,r=o.type,s=e.getCodeFromNode(this,r);""!==n&&(s.name=n);const c=e.getPropertyName(s),d=this.getNodeFunction(e).getCode(c);return s.code=d+"\n","property"===t?c:e.format(`${c}()`,r,t)}}export default FunctionNode;const nativeFn=(e,t=[],o="")=>{for(let e=0;e<t.length;e++){const o=t[e];"function"==typeof o&&(t[e]=o.functionNode)}const n=nodeObject(new FunctionNode(e,t,o)),r=(...e)=>n.call(...e);return r.functionNode=n,r};export const glslFn=(e,t)=>nativeFn(e,t,"glsl");export const wgslFn=(e,t)=>nativeFn(e,t,"wgsl");
//# sourceMappingURL=FunctionNode.js.map