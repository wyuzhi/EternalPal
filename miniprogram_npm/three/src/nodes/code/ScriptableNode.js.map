{"version":3,"file":"node_modules/three/src/nodes/code/ScriptableNode.js","names":["Node","scriptableValue","nodeProxy","float","hashArray","hashString","Resources","Map","get","key","callback","params","this","has","super","value","set","Parameters","constructor","scriptableNode","parameters","layout","getLayout","getInputLayout","id","name","param","getValue","ScriptableNodeResources","ScriptableNode","type","codeNode","_local","_output","_outputs","_source","source","_method","_object","_value","_needsOutputUpdate","onRefresh","bind","isScriptableNode","code","setLocal","getLocal","_refresh","element","inputType","getOutputLayout","outputType","setOutput","outputs","undefined","getOutput","getParameter","setParameter","deleteParameter","getDefaultOutput","events","addEventListener","isScriptableValueNode","valueNode","removeEventListener","clearParameters","Object","keys","needsUpdate","call","method","getObject","callAsync","getNodeType","builder","getDefaultOutputNode","refresh","output","dispose","THREE","TSL","getMethod","cache","clear","Array","isArray","elements","deserialize","data","isNode","_exec","properties","join","returns","Function","setup","getCacheKey","force","values","push","scriptable","setParameterLength"],"sources":["node_modules/three/src/nodes/code/ScriptableNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { scriptableValue } from './ScriptableValueNode.js';\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\nimport { hashArray, hashString } from '../core/NodeUtils.js';\n\n/**\n * A Map-like data structure for managing resources of scriptable nodes.\n *\n * @augments Map\n */\nclass Resources extends Map {\n\n\tget( key, callback = null, ...params ) {\n\n\t\tif ( this.has( key ) ) return super.get( key );\n\n\t\tif ( callback !== null ) {\n\n\t\t\tconst value = callback( ...params );\n\t\t\tthis.set( key, value );\n\t\t\treturn value;\n\n\t\t}\n\n\t}\n\n}\n\nclass Parameters {\n\n\tconstructor( scriptableNode ) {\n\n\t\tthis.scriptableNode = scriptableNode;\n\n\t}\n\n\tget parameters() {\n\n\t\treturn this.scriptableNode.parameters;\n\n\t}\n\n\tget layout() {\n\n\t\treturn this.scriptableNode.getLayout();\n\n\t}\n\n\tgetInputLayout( id ) {\n\n\t\treturn this.scriptableNode.getInputLayout( id );\n\n\t}\n\n\tget( name ) {\n\n\t\tconst param = this.parameters[ name ];\n\t\tconst value = param ? param.getValue() : null;\n\n\t\treturn value;\n\n\t}\n\n}\n\n/**\n * Defines the resources (e.g. namespaces) of scriptable nodes.\n *\n * @type {Resources}\n */\nexport const ScriptableNodeResources = new Resources();\n\n/**\n * This type of node allows to implement nodes with custom scripts. The script\n * section is represented as an instance of `CodeNode` written with JavaScript.\n * The script itself must adhere to a specific structure.\n *\n * - main(): Executed once by default and every time `node.needsUpdate` is set.\n * - layout: The layout object defines the script's interface (inputs and outputs).\n *\n * ```js\n * ScriptableNodeResources.set( 'TSL', TSL );\n *\n * const scriptableNode = scriptable( js( `\n * \tlayout = {\n * \t\toutputType: 'node',\n * \t\telements: [\n * \t\t\t{ name: 'source', inputType: 'node' },\n * \t\t]\n * \t};\n *\n * \tconst { mul, oscSine } = TSL;\n *\n * \tfunction main() {\n * \t\tconst source = parameters.get( 'source' ) || float();\n * \t\treturn mul( source, oscSine() ) );\n * \t}\n *\n * ` ) );\n *\n * scriptableNode.setParameter( 'source', color( 1, 0, 0 ) );\n *\n * const material = new THREE.MeshBasicNodeMaterial();\n * material.colorNode = scriptableNode;\n * ```\n *\n * @augments Node\n */\nclass ScriptableNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScriptableNode';\n\n\t}\n\n\t/**\n\t * Constructs a new scriptable node.\n\t *\n\t * @param {?CodeNode} [codeNode=null] - The code node.\n\t * @param {Object} [parameters={}] - The parameters definition.\n\t */\n\tconstructor( codeNode = null, parameters = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The code node.\n\t\t *\n\t\t * @type {?CodeNode}\n\t\t * @default null\n\t\t */\n\t\tthis.codeNode = codeNode;\n\n\t\t/**\n\t\t * The parameters definition.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {}\n\t\t */\n\t\tthis.parameters = parameters;\n\n\t\tthis._local = new Resources();\n\t\tthis._output = scriptableValue( null );\n\t\tthis._outputs = {};\n\t\tthis._source = this.source;\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\n\t\tthis.onRefresh = this.onRefresh.bind( this );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isScriptableNode = true;\n\n\t}\n\n\t/**\n\t * The source code of the scriptable node.\n\t *\n\t * @type {string}\n\t */\n\tget source() {\n\n\t\treturn this.codeNode ? this.codeNode.code : '';\n\n\t}\n\n\t/**\n\t * Sets the reference of a local script variable.\n\t *\n\t * @param {string} name - The variable name.\n\t * @param {Object} value - The reference to set.\n\t * @return {Resources} The resource map\n\t */\n\tsetLocal( name, value ) {\n\n\t\treturn this._local.set( name, value );\n\n\t}\n\n\t/**\n\t * Gets the value of a local script variable.\n\t *\n\t * @param {string} name - The variable name.\n\t * @return {Object} The value.\n\t */\n\tgetLocal( name ) {\n\n\t\treturn this._local.get( name );\n\n\t}\n\n\t/**\n\t * Event listener for the `refresh` event.\n\t */\n\tonRefresh() {\n\n\t\tthis._refresh();\n\n\t}\n\n\t/**\n\t * Returns an input from the layout with the given id/name.\n\t *\n\t * @param {string} id - The id/name of the input.\n\t * @return {Object} The element entry.\n\t */\n\tgetInputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns an output from the layout with the given id/name.\n\t *\n\t * @param {string} id - The id/name of the output.\n\t * @return {Object} The element entry.\n\t */\n\tgetOutputLayout( id ) {\n\n\t\tfor ( const element of this.getLayout() ) {\n\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\n\n\t\t\t\treturn element;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Defines a script output for the given name and value.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @param {Node} value - The node value.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tsetOutput( name, value ) {\n\n\t\tconst outputs = this._outputs;\n\n\t\tif ( outputs[ name ] === undefined ) {\n\n\t\t\toutputs[ name ] = scriptableValue( value );\n\n\t\t} else {\n\n\t\t\toutputs[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a script output for the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {ScriptableValueNode} The node value.\n\t */\n\tgetOutput( name ) {\n\n\t\treturn this._outputs[ name ];\n\n\t}\n\n\t/**\n\t * Returns a parameter for the given name\n\t *\n\t * @param {string} name - The name of the parameter.\n\t * @return {ScriptableValueNode} The node value.\n\t */\n\tgetParameter( name ) {\n\n\t\treturn this.parameters[ name ];\n\n\t}\n\n\t/**\n\t * Sets a value for the given parameter name.\n\t *\n\t * @param {string} name - The parameter name.\n\t * @param {any} value - The parameter value.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tsetParameter( name, value ) {\n\n\t\tconst parameters = this.parameters;\n\n\t\tif ( value && value.isScriptableNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( value && value.isScriptableValueNode ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t\tparameters[ name ] = value;\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else if ( parameters[ name ] === undefined ) {\n\n\t\t\tparameters[ name ] = scriptableValue( value );\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t} else {\n\n\t\t\tparameters[ name ].value = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the value of this node which is the value of\n\t * the default output.\n\t *\n\t * @return {Node} The value.\n\t */\n\tgetValue() {\n\n\t\treturn this.getDefaultOutput().getValue();\n\n\t}\n\n\t/**\n\t * Deletes a parameter from the script.\n\t *\n\t * @param {string} name - The parameter to remove.\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tdeleteParameter( name ) {\n\n\t\tlet valueNode = this.parameters[ name ];\n\n\t\tif ( valueNode ) {\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Deletes all parameters from the script.\n\t *\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\tclearParameters() {\n\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\n\n\t\t\tthis.deleteParameter( name );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Calls a function from the script.\n\t *\n\t * @param {string} name - The function name.\n\t * @param {...any} params - A list of parameters.\n\t * @return {any} The result of the function call.\n\t */\n\tcall( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method( ...params );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Asynchronously calls a function from the script.\n\t *\n\t * @param {string} name - The function name.\n\t * @param {...any} params - A list of parameters.\n\t * @return {Promise<any>} The result of the function call.\n\t */\n\tasync callAsync( name, ...params ) {\n\n\t\tconst object = this.getObject();\n\t\tconst method = object[ name ];\n\n\t\tif ( typeof method === 'function' ) {\n\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwritten since the node types is inferred from the script's output.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\n\n\t}\n\n\t/**\n\t * Refreshes the script node.\n\t *\n\t * @param {?string} [output=null] - An optional output.\n\t */\n\trefresh( output = null ) {\n\n\t\tif ( output !== null ) {\n\n\t\t\tthis.getOutput( output ).refresh();\n\n\t\t} else {\n\n\t\t\tthis._refresh();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns an object representation of the script.\n\t *\n\t * @return {Object} The result object.\n\t */\n\tgetObject() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._object !== null ) return this._object;\n\n\t\t//\n\n\t\tconst refresh = () => this.refresh();\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\n\n\t\tconst parameters = new Parameters( this );\n\n\t\tconst THREE = ScriptableNodeResources.get( 'THREE' );\n\t\tconst TSL = ScriptableNodeResources.get( 'TSL' );\n\n\t\tconst method = this.getMethod();\n\t\tconst params = [ parameters, this._local, ScriptableNodeResources, refresh, setOutput, THREE, TSL ];\n\n\t\tthis._object = method( ...params );\n\n\t\tconst layout = this._object.layout;\n\n\t\tif ( layout ) {\n\n\t\t\tif ( layout.cache === false ) {\n\n\t\t\t\tthis._local.clear();\n\n\t\t\t}\n\n\t\t\t// default output\n\t\t\tthis._output.outputType = layout.outputType || null;\n\n\t\t\tif ( Array.isArray( layout.elements ) ) {\n\n\t\t\t\tfor ( const element of layout.elements ) {\n\n\t\t\t\t\tconst id = element.id || element.name;\n\n\t\t\t\t\tif ( element.inputType ) {\n\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\n\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.outputType ) {\n\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\n\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._object;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tfor ( const name in this.parameters ) {\n\n\t\t\tlet valueNode = this.parameters[ name ];\n\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\n\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the layout of the script.\n\t *\n\t * @return {Object} The script's layout.\n\t */\n\tgetLayout() {\n\n\t\treturn this.getObject().layout;\n\n\t}\n\n\t/**\n\t * Returns default node output of the script.\n\t *\n\t * @return {Node} The default node output.\n\t */\n\tgetDefaultOutputNode() {\n\n\t\tconst output = this.getDefaultOutput().value;\n\n\t\tif ( output && output.isNode ) {\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\treturn float();\n\n\t}\n\n\t/**\n\t * Returns default output of the script.\n\t *\n\t * @return {ScriptableValueNode} The default output.\n\t */\n\tgetDefaultOutput()\t{\n\n\t\treturn this._exec()._output;\n\n\t}\n\n\t/**\n\t * Returns a function created from the node's script.\n\t *\n\t * @return {Function} The function representing the node's code.\n\t */\n\tgetMethod() {\n\n\t\tif ( this.needsUpdate ) this.dispose();\n\t\tif ( this._method !== null ) return this._method;\n\n\t\t//\n\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\n\n\t\tconst properties = interfaceProps.join( ', ' );\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\n\n\t\tconst code = declarations + this.codeNode.code + returns;\n\n\t\t//\n\n\t\tthis._method = new Function( ...parametersProps, code );\n\n\t\treturn this._method;\n\n\t}\n\n\t/**\n\t * Frees all internal resources.\n\t */\n\tdispose() {\n\n\t\tif ( this._method === null ) return;\n\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\n\n\t\t\tthis._object.dispose();\n\n\t\t}\n\n\t\tthis._method = null;\n\t\tthis._object = null;\n\t\tthis._source = null;\n\t\tthis._value = null;\n\t\tthis._needsOutputUpdate = true;\n\t\tthis._output.value = null;\n\t\tthis._outputs = {};\n\n\t}\n\n\tsetup() {\n\n\t\treturn this.getDefaultOutputNode();\n\n\t}\n\n\tgetCacheKey( force ) {\n\n\t\tconst values = [ hashString( this.source ), this.getDefaultOutputNode().getCacheKey( force ) ];\n\n\t\tfor ( const param in this.parameters ) {\n\n\t\t\tvalues.push( this.parameters[ param ].getCacheKey( force ) );\n\n\t\t}\n\n\t\treturn hashArray( values );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.dispose();\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn this.source !== this._source;\n\n\t}\n\n\t/**\n\t * Executes the `main` function of the script.\n\t *\n\t * @private\n\t * @return {ScriptableNode} A reference to this node.\n\t */\n\t_exec()\t{\n\n\t\tif ( this.codeNode === null ) return this;\n\n\t\tif ( this._needsOutputUpdate === true ) {\n\n\t\t\tthis._value = this.call( 'main' );\n\n\t\t\tthis._needsOutputUpdate = false;\n\n\t\t}\n\n\t\tthis._output.value = this._value;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Executes the refresh.\n\t *\n\t * @private\n\t */\n\t_refresh() {\n\n\t\tthis.needsUpdate = true;\n\n\t\tthis._exec();\n\n\t\tthis._output.refresh();\n\n\t}\n\n}\n\nexport default ScriptableNode;\n\n/**\n * TSL function for creating a scriptable node.\n *\n * @tsl\n * @function\n * @param {CodeNode} [codeNode] - The code node.\n * @param {?Object} [parameters={}] - The parameters definition.\n * @returns {ScriptableNode}\n */\nexport const scriptable = /*@__PURE__*/ nodeProxy( ScriptableNode ).setParameterLength( 1, 2 );\n"],"mappings":"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","ignoreList":[]}