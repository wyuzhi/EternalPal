{"version":3,"file":"node_modules/three/src/nodes/core/ArrayNode.js","names":["TempNode","addMethodChaining","nodeObject","ArrayNode","type","constructor","nodeType","count","values","super","this","isArrayNode","getArrayCount","getNodeType","builder","getElementType","generate","generateArray","array","params","node","length","Array","fill"],"sources":["node_modules/three/src/nodes/core/ArrayNode.js"],"sourcesContent":["import TempNode from './TempNode.js';\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * ArrayNode represents a collection of nodes, typically created using the {@link array} function.\n * ```js\n * const colors = array( [\n * \tvec3( 1, 0, 0 ),\n * \tvec3( 0, 1, 0 ),\n * \tvec3( 0, 0, 1 )\n * ] );\n *\n * const redColor = tintColors.element( 0 );\n *\n * @augments TempNode\n */\nclass ArrayNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'ArrayNode';\n\n\t}\n\n\t/**\n\t * Constructs a new array node.\n\t *\n\t * @param {?string} nodeType - The data type of the elements.\n\t * @param {number} count - Size of the array.\n\t * @param {?Array<Node>} [values=null] - Array default values.\n\t */\n\tconstructor( nodeType, count, values = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * Array size.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t * Array default values.\n\t\t *\n\t\t * @type {?Array<Node>}\n\t\t */\n\t\tthis.values = values;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isArrayNode = true;\n\n\t}\n\n\t/**\n\t * Returns the number of elements in the node array.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {number} The number of elements in the node array.\n\t */\n\tgetArrayCount( /*builder*/ ) {\n\n\t\treturn this.count;\n\n\t}\n\n\t/**\n\t * Returns the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType === null ) {\n\n\t\t\tthis.nodeType = this.values[ 0 ].getNodeType( builder );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * Returns the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The type of the node.\n\t */\n\tgetElementType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\t/**\n\t * This method builds the output node and returns the resulting array as a shader string.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated shader string.\n\t */\n\tgenerate( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\treturn builder.generateArray( type, this.count, this.values );\n\n\t}\n\n}\n\nexport default ArrayNode;\n\n/**\n * TSL function for creating an array node.\n *\n * @tsl\n * @function\n * @param {string|Array<Node>} nodeTypeOrValues - A string representing the element type (e.g., 'vec3')\n * or an array containing the default values (e.g., [ vec3() ]).\n * @param {?number} [count] - Size of the array.\n * @returns {ArrayNode}\n */\nexport const array = ( ...params ) => {\n\n\tlet node;\n\n\tif ( params.length === 1 ) {\n\n\t\tconst values = params[ 0 ];\n\n\t\tnode = new ArrayNode( null, values.length, values );\n\n\t} else {\n\n\t\tconst nodeType = params[ 0 ];\n\t\tconst count = params[ 1 ];\n\n\t\tnode = new ArrayNode( nodeType, count );\n\n\t}\n\n\treturn nodeObject( node );\n\n};\n\naddMethodChaining( 'toArray', ( node, count ) => array( Array( count ).fill( node ) ) );\n"],"mappings":"OAAOA,aAAc,uBACZC,kBAAmBC,eAAkB,oBAe9C,MAAMC,kBAAkBH,SAEvB,eAAWI,GAEV,MAAO,WAER,CASA,WAAAC,CAAaC,EAAUC,EAAOC,EAAS,MAEtCC,MAAOH,GAOPI,KAAKH,MAAQA,EAObG,KAAKF,OAASA,EASdE,KAAKC,aAAc,CAEpB,CAQA,aAAAC,GAEC,OAAOF,KAAKH,KAEb,CAQA,WAAAM,CAAaC,GAQZ,OANuB,OAAlBJ,KAAKJ,WAETI,KAAKJ,SAAWI,KAAKF,OAAQ,GAAIK,YAAaC,IAIxCJ,KAAKJ,QAEb,CAQA,cAAAS,CAAgBD,GAEf,OAAOJ,KAAKG,YAAaC,EAE1B,CAQA,QAAAE,CAAUF,GAET,MAAMV,EAAOM,KAAKG,YAAaC,GAE/B,OAAOA,EAAQG,cAAeb,EAAMM,KAAKH,MAAOG,KAAKF,OAEtD,iBAIcL,iBAYR,MAAMe,MAAQ,IAAKC,KAEzB,IAAIC,EAEJ,GAAuB,IAAlBD,EAAOE,OAAe,CAE1B,MAAMb,EAASW,EAAQ,GAEvBC,EAAO,IAAIjB,UAAW,KAAMK,EAAOa,OAAQb,EAE5C,KAAO,CAEN,MAAMF,EAAWa,EAAQ,GACnBZ,EAAQY,EAAQ,GAEtBC,EAAO,IAAIjB,UAAWG,EAAUC,EAEjC,CAEA,OAAOL,WAAYkB,EAAM,EAI1BnB,kBAAmB,WAAW,CAAEmB,EAAMb,IAAWW,MAAOI,MAAOf,GAAQgB,KAAMH","ignoreList":[]}