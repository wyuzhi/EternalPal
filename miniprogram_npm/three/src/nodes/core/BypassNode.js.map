{"version":3,"file":"node_modules/three/src/nodes/core/BypassNode.js","names":["Node","addMethodChaining","nodeProxy","BypassNode","type","constructor","outputNode","callNode","super","this","isBypassNode","getNodeType","builder","generate","snippet","build","addLineFlowCode","bypass","setParameterLength"],"sources":["node_modules/three/src/nodes/core/BypassNode.js"],"sourcesContent":["import Node from './Node.js';\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\n\n/**\n * The class generates the code of a given node but returns another node in the output.\n * This can be used to call a method or node that does not return a value, i.e.\n * type `void` on an input where returning a value is required. Example:\n *\n * ```js\n * material.colorNode = myColor.bypass( runVoidFn() )\n *```\n *\n * @augments Node\n */\nclass BypassNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'BypassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new bypass node.\n\t *\n\t * @param {Node} outputNode - The output node.\n\t * @param {Node} callNode - The call node.\n\t */\n\tconstructor( outputNode, callNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isBypassNode = true;\n\n\t\t/**\n\t\t * The output node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.outputNode = outputNode;\n\n\t\t/**\n\t\t * The call node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.callNode = callNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst snippet = this.callNode.build( builder, 'void' );\n\n\t\tif ( snippet !== '' ) {\n\n\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t}\n\n\t\treturn this.outputNode.build( builder );\n\n\t}\n\n}\n\nexport default BypassNode;\n\n/**\n * TSL function for creating a bypass node.\n *\n * @tsl\n * @function\n * @param {Node} outputNode - The output node.\n * @param {Node} callNode - The call node.\n * @returns {BypassNode}\n */\nexport const bypass = /*@__PURE__*/ nodeProxy( BypassNode ).setParameterLength( 2 );\n\naddMethodChaining( 'bypass', bypass );\n"],"mappings":"OAAOA,SAAU,mBACRC,kBAAmBC,cAAiB,oBAa7C,MAAMC,mBAAmBH,KAExB,eAAWI,GAEV,MAAO,YAER,CAQA,WAAAC,CAAaC,EAAYC,GAExBC,QASAC,KAAKC,cAAe,EAOpBD,KAAKH,WAAaA,EAOlBG,KAAKF,SAAWA,CAEjB,CAEA,WAAAI,CAAaC,GAEZ,OAAOH,KAAKH,WAAWK,YAAaC,EAErC,CAEA,QAAAC,CAAUD,GAET,MAAME,EAAUL,KAAKF,SAASQ,MAAOH,EAAS,QAQ9C,MANiB,KAAZE,GAEJF,EAAQI,gBAAiBF,EAASL,MAI5BA,KAAKH,WAAWS,MAAOH,EAE/B,iBAIcT,kBAWR,MAAMc,OAAuBf,UAAWC,YAAae,mBAAoB,GAEhFjB,kBAAmB,SAAUgB","ignoreList":[]}