{"version":3,"file":"node_modules/three/src/nodes/core/CacheNode.js","names":["Node","addMethodChaining","nodeObject","CacheNode","type","constructor","node","parent","super","this","isCacheNode","getNodeType","builder","previousCache","getCache","cache","getCacheFromNode","setCache","nodeType","build","params","data"],"sources":["node_modules/three/src/nodes/core/CacheNode.js"],"sourcesContent":["import Node from './Node.js';\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * This node can be used as a cache management component for another node.\n * Caching is in general used by default in {@link NodeBuilder} but this node\n * allows the usage of a shared parent cache during the build process.\n *\n * @augments Node\n */\nclass CacheNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'CacheNode';\n\n\t}\n\n\t/**\n\t * Constructs a new cache node.\n\t *\n\t * @param {Node} node - The node that should be cached.\n\t * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\n\t */\n\tconstructor( node, parent = true ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be cached.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * Whether this node refers to a shared parent cache or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCacheNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst previousCache = builder.getCache();\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\n\n\t\tbuilder.setCache( cache );\n\n\t\tconst nodeType = this.node.getNodeType( builder );\n\n\t\tbuilder.setCache( previousCache );\n\n\t\treturn nodeType;\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tconst previousCache = builder.getCache();\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\n\n\t\tbuilder.setCache( cache );\n\n\t\tconst data = this.node.build( builder, ...params );\n\n\t\tbuilder.setCache( previousCache );\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport default CacheNode;\n\n/**\n * TSL function for creating a cache node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be cached.\n * @param {boolean} [parent] - Whether this node refers to a shared parent cache or not.\n * @returns {CacheNode}\n */\nexport const cache = ( node, parent ) => nodeObject( new CacheNode( nodeObject( node ), parent ) );\n\naddMethodChaining( 'cache', cache );\n"],"mappings":"OAAOA,SAAU,mBACRC,kBAAmBC,eAAkB,oBAS9C,MAAMC,kBAAkBH,KAEvB,eAAWI,GAEV,MAAO,WAER,CAQA,WAAAC,CAAaC,EAAMC,GAAS,GAE3BC,QAOAC,KAAKH,KAAOA,EAQZG,KAAKF,OAASA,EASdE,KAAKC,aAAc,CAEpB,CAEA,WAAAC,CAAaC,GAEZ,MAAMC,EAAgBD,EAAQE,WACxBC,EAAQH,EAAQI,iBAAkBP,KAAMA,KAAKF,QAEnDK,EAAQK,SAAUF,GAElB,MAAMG,EAAWT,KAAKH,KAAKK,YAAaC,GAIxC,OAFAA,EAAQK,SAAUJ,GAEXK,CAER,CAEA,KAAAC,CAAOP,KAAYQ,GAElB,MAAMP,EAAgBD,EAAQE,WACxBC,EAAQH,EAAQI,iBAAkBP,KAAMA,KAAKF,QAEnDK,EAAQK,SAAUF,GAElB,MAAMM,EAAOZ,KAAKH,KAAKa,MAAOP,KAAYQ,GAI1C,OAFAR,EAAQK,SAAUJ,GAEXQ,CAER,iBAIclB,iBAWR,MAAMY,MAAQ,CAAET,EAAMC,IAAYL,WAAY,IAAIC,UAAWD,WAAYI,GAAQC,IAExFN,kBAAmB,QAASc","ignoreList":[]}