{"version":3,"file":"node_modules/three/src/nodes/core/ConstNode.js","names":["InputNode","_regNum","ConstNode","type","constructor","value","nodeType","super","this","isConstNode","generateConst","builder","getNodeType","generate","output","test","format"],"sources":["node_modules/three/src/nodes/core/ConstNode.js"],"sourcesContent":["import InputNode from './InputNode.js';\n\nconst _regNum = /float|u?int/;\n\n/**\n * Class for representing a constant value in the shader.\n *\n * @augments InputNode\n */\nclass ConstNode extends InputNode {\n\n\tstatic get type() {\n\n\t\treturn 'ConstNode';\n\n\t}\n\n\t/**\n\t * Constructs a new input node.\n\t *\n\t * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\n\t */\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( value, nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isConstNode = true;\n\n\t}\n\n\t/**\n\t * Generates the shader string of the value with the current node builder.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The generated value as a shader string.\n\t */\n\tgenerateConst( builder ) {\n\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tif ( _regNum.test( type ) && _regNum.test( output ) ) {\n\n\t\t\treturn builder.generateConst( output, this.value );\n\n\t\t}\n\n\t\treturn builder.format( this.generateConst( builder ), type, output );\n\n\t}\n\n}\n\nexport default ConstNode;\n"],"mappings":"OAAOA,cAAe,iBAEtB,MAAMC,QAAU,cAOhB,MAAMC,kBAAkBF,UAEvB,eAAWG,GAEV,MAAO,WAER,CAQA,WAAAC,CAAaC,EAAOC,EAAW,MAE9BC,MAAOF,EAAOC,GASdE,KAAKC,aAAc,CAEpB,CAQA,aAAAC,CAAeC,GAEd,OAAOA,EAAQD,cAAeF,KAAKI,YAAaD,GAAWH,KAAKH,MAEjE,CAEA,QAAAQ,CAAUF,EAASG,GAElB,MAAMX,EAAOK,KAAKI,YAAaD,GAE/B,OAAKV,QAAQc,KAAMZ,IAAUF,QAAQc,KAAMD,GAEnCH,EAAQD,cAAeI,EAAQN,KAAKH,OAIrCM,EAAQK,OAAQR,KAAKE,cAAeC,GAAWR,EAAMW,EAE7D,iBAIcZ","ignoreList":[]}