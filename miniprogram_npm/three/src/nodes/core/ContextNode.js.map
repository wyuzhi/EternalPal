{"version":3,"file":"node_modules/three/src/nodes/core/ContextNode.js","names":["Node","addMethodChaining","nodeProxy","ContextNode","type","constructor","node","value","super","this","isContextNode","getScope","getNodeType","builder","analyze","previousContext","getContext","setContext","context","build","setup","generate","output","snippet","setParameterLength","setName","name","nodeName","label","console","warn"],"sources":["node_modules/three/src/nodes/core/ContextNode.js"],"sourcesContent":["import Node from './Node.js';\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\n\n/**\n * This node can be used as a context management component for another node.\n * {@link NodeBuilder} performs its node building process in a specific context and\n * this node allows the modify the context. A typical use case is to overwrite `getUV()` e.g.:\n *\n * ```js\n *node.context( { getUV: () => customCoord } );\n *```\n * @augments Node\n */\nclass ContextNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ContextNode';\n\n\t}\n\n\t/**\n\t * Constructs a new context node.\n\t *\n\t * @param {Node} node - The node whose context should be modified.\n\t * @param {Object} [value={}] - The modified context data.\n\t */\n\tconstructor( node, value = {} ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isContextNode = true;\n\n\t\t/**\n\t\t * The node whose context should be modified.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The modified context data.\n\t\t *\n\t\t * @type {Object}\n\t\t * @default {}\n\t\t */\n\t\tthis.value = value;\n\n\t}\n\n\t/**\n\t * This method is overwritten to ensure it returns the reference to {@link ContextNode#node}.\n\t *\n\t * @return {Node} A reference to {@link ContextNode#node}.\n\t */\n\tgetScope() {\n\n\t\treturn this.node.getScope();\n\n\t}\n\n\t/**\n\t * This method is overwritten to ensure it returns the type of {@link ContextNode#node}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\n\n\t\tthis.node.build( builder );\n\n\t\tbuilder.setContext( previousContext );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\n\n\t\tthis.node.build( builder );\n\n\t\tbuilder.setContext( previousContext );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\n\n\t\tconst snippet = this.node.build( builder, output );\n\n\t\tbuilder.setContext( previousContext );\n\n\t\treturn snippet;\n\n\t}\n\n}\n\nexport default ContextNode;\n\n/**\n * TSL function for creating a context node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node whose context should be modified.\n * @param {Object} [value={}] - The modified context data.\n * @returns {ContextNode}\n */\nexport const context = /*@__PURE__*/ nodeProxy( ContextNode ).setParameterLength( 1, 2 );\n\n/**\n * TSL function for defining a name for the context value for a given node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node whose context should be modified.\n * @param {string} name - The name to set.\n * @returns {ContextNode}\n */\nexport const setName = ( node, name ) => context( node, { nodeName: name } );\n\n/**\n * TSL function for defining a label context value for a given node.\n *\n * @tsl\n * @function\n * @deprecated\n * @param {Node} node - The node whose context should be modified.\n * @param {string} name - The name/label to set.\n * @returns {ContextNode}\n */\nexport function label( node, name ) {\n\n\tconsole.warn( 'THREE.TSL: \"label()\" has been deprecated. Use \"setName()\" instead.' ); // @deprecated r179\n\n\treturn setName( node, name );\n\n}\n\naddMethodChaining( 'context', context );\naddMethodChaining( 'label', label );\naddMethodChaining( 'setName', setName );\n"],"mappings":"OAAOA,SAAU,mBACRC,kBAAmBC,cAAiB,oBAY7C,MAAMC,oBAAoBH,KAEzB,eAAWI,GAEV,MAAO,aAER,CAQA,WAAAC,CAAaC,EAAMC,EAAQ,CAAC,GAE3BC,QASAC,KAAKC,eAAgB,EAOrBD,KAAKH,KAAOA,EAQZG,KAAKF,MAAQA,CAEd,CAOA,QAAAI,GAEC,OAAOF,KAAKH,KAAKK,UAElB,CAQA,WAAAC,CAAaC,GAEZ,OAAOJ,KAAKH,KAAKM,YAAaC,EAE/B,CAEA,OAAAC,CAASD,GAER,MAAME,EAAkBF,EAAQG,aAEhCH,EAAQI,WAAY,IAAKJ,EAAQK,WAAYT,KAAKF,QAElDE,KAAKH,KAAKa,MAAON,GAEjBA,EAAQI,WAAYF,EAErB,CAEA,KAAAK,CAAOP,GAEN,MAAME,EAAkBF,EAAQG,aAEhCH,EAAQI,WAAY,IAAKJ,EAAQK,WAAYT,KAAKF,QAElDE,KAAKH,KAAKa,MAAON,GAEjBA,EAAQI,WAAYF,EAErB,CAEA,QAAAM,CAAUR,EAASS,GAElB,MAAMP,EAAkBF,EAAQG,aAEhCH,EAAQI,WAAY,IAAKJ,EAAQK,WAAYT,KAAKF,QAElD,MAAMgB,EAAUd,KAAKH,KAAKa,MAAON,EAASS,GAI1C,OAFAT,EAAQI,WAAYF,GAEbQ,CAER,iBAIcpB,mBAWR,MAAMe,QAAwBhB,UAAWC,aAAcqB,mBAAoB,EAAG,UAW9E,MAAMC,QAAU,CAAEnB,EAAMoB,IAAUR,QAASZ,EAAM,CAAEqB,SAAUD,WAY7D,SAASE,MAAOtB,EAAMoB,GAI5B,OAFAG,QAAQC,KAAM,sEAEPL,QAASnB,EAAMoB,EAEvB,CAEAzB,kBAAmB,UAAWiB,SAC9BjB,kBAAmB,QAAS2B,OAC5B3B,kBAAmB,UAAWwB","ignoreList":[]}