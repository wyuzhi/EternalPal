{"version":3,"file":"node_modules/three/src/nodes/core/MRTNode.js","names":["OutputStructNode","nodeProxy","vec4","getTextureIndex","textures","name","i","length","MRTNode","type","constructor","outputNodes","super","this","isMRTNode","has","undefined","get","merge","mrtNode","outputs","mrt","setup","builder","members","renderer","getRenderTarget"],"sources":["node_modules/three/src/nodes/core/MRTNode.js"],"sourcesContent":["import OutputStructNode from './OutputStructNode.js';\nimport { nodeProxy, vec4 } from '../tsl/TSLBase.js';\n\n/**\n * Returns the MRT texture index for the given name.\n *\n * @param {Array<Texture>} textures - The textures of a MRT-configured render target.\n * @param {string} name - The name of the MRT texture which index is requested.\n * @return {number} The texture index.\n */\nexport function getTextureIndex( textures, name ) {\n\n\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\tif ( textures[ i ].name === name ) {\n\n\t\t\treturn i;\n\n\t\t}\n\n\t}\n\n\treturn - 1;\n\n}\n\n/**\n * This node can be used setup a MRT context for rendering. A typical MRT setup for\n * post-processing is shown below:\n * ```js\n * const mrtNode = mrt( {\n *   output: output,\n *   normal: normalView\n * } ) );\n * ```\n * The MRT output is defined as a dictionary.\n *\n * @augments OutputStructNode\n */\nclass MRTNode extends OutputStructNode {\n\n\tstatic get type() {\n\n\t\treturn 'MRTNode';\n\n\t}\n\n\t/**\n\t * Constructs a new output struct node.\n\t *\n\t * @param {Object<string, Node>} outputNodes - The MRT outputs.\n\t */\n\tconstructor( outputNodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * A dictionary representing the MRT outputs. The key\n\t\t * is the name of the output, the value the node which produces\n\t\t * the output result.\n\t\t *\n\t\t * @type {Object<string, Node>}\n\t\t */\n\t\tthis.outputNodes = outputNodes;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isMRTNode = true;\n\n\t}\n\n\t/**\n\t * Returns `true` if the MRT node has an output with the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {NodeBuilder} Whether the MRT node has an output for the given name or not.\n\t */\n\thas( name ) {\n\n\t\treturn this.outputNodes[ name ] !== undefined;\n\n\t}\n\n\t/**\n\t * Returns the output node for the given name.\n\t *\n\t * @param {string} name - The name of the output.\n\t * @return {Node} The output node.\n\t */\n\tget( name ) {\n\n\t\treturn this.outputNodes[ name ];\n\n\t}\n\n\t/**\n\t * Merges the outputs of the given MRT node with the outputs of this node.\n\t *\n\t * @param {MRTNode} mrtNode - The MRT to merge.\n\t * @return {MRTNode} A new MRT node with merged outputs..\n\t */\n\tmerge( mrtNode ) {\n\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\n\n\t\treturn mrt( outputs );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst outputNodes = this.outputNodes;\n\t\tconst mrt = builder.renderer.getRenderTarget();\n\n\t\tconst members = [];\n\n\t\tconst textures = mrt.textures;\n\n\t\tfor ( const name in outputNodes ) {\n\n\t\t\tconst index = getTextureIndex( textures, name );\n\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\n\n\t\t}\n\n\t\tthis.members = members;\n\n\t\treturn super.setup( builder );\n\n\t}\n\n}\n\nexport default MRTNode;\n\n/**\n * TSL function for creating a MRT node.\n *\n * @tsl\n * @function\n * @param {Object<string, Node>} outputNodes - The MRT outputs.\n * @returns {MRTNode}\n */\nexport const mrt = /*@__PURE__*/ nodeProxy( MRTNode );\n"],"mappings":"OAAOA,qBAAsB,+BACpBC,UAAWC,SAAY,2BASzB,SAASC,gBAAiBC,EAAUC,GAE1C,IAAM,IAAIC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAErC,GAAKF,EAAUE,GAAID,OAASA,EAE3B,OAAOC,EAMT,OAAS,CAEV,CAeA,MAAME,gBAAgBR,iBAErB,eAAWS,GAEV,MAAO,SAER,CAOA,WAAAC,CAAaC,GAEZC,QASAC,KAAKF,YAAcA,EASnBE,KAAKC,WAAY,CAElB,CAQA,GAAAC,CAAKV,GAEJ,YAAoCW,IAA7BH,KAAKF,YAAaN,EAE1B,CAQA,GAAAY,CAAKZ,GAEJ,OAAOQ,KAAKF,YAAaN,EAE1B,CAQA,KAAAa,CAAOC,GAEN,MAAMC,EAAU,IAAKP,KAAKF,eAAgBQ,EAAQR,aAElD,OAAOU,IAAKD,EAEb,CAEA,KAAAE,CAAOC,GAEN,MAAMZ,EAAcE,KAAKF,YAGnBa,EAAU,GAEVpB,EAJMmB,EAAQE,SAASC,kBAIRtB,SAErB,IAAM,MAAMC,KAAQM,EAAc,CAIjCa,EAFcrB,gBAAiBC,EAAUC,IAEtBH,KAAMS,EAAaN,GAEvC,CAIA,OAFAQ,KAAKW,QAAUA,EAERZ,MAAMU,MAAOC,EAErB,iBAIcf,eAUR,MAAMa,IAAoBpB,UAAWO","ignoreList":[]}