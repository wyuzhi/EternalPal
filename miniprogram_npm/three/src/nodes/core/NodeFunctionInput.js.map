{"version":3,"file":"node_modules/three/src/nodes/core/NodeFunctionInput.js","names":["NodeFunctionInput","constructor","type","name","count","qualifier","isConst","this","isNodeFunctionInput"],"sources":["node_modules/three/src/nodes/core/NodeFunctionInput.js"],"sourcesContent":["/**\n * Describes the input of a {@link NodeFunction}.\n */\nclass NodeFunctionInput {\n\n\t/**\n\t * Constructs a new node function input.\n\t *\n\t * @param {string} type - The input type.\n\t * @param {string} name - The input name.\n\t * @param {?number} [count=null] - If the input is an Array, count will be the length.\n\t * @param {('in'|'out'|'inout')} [qualifier=''] - The parameter qualifier (only relevant for GLSL).\n\t * @param {boolean} [isConst=false] - Whether the input uses a const qualifier or not (only relevant for GLSL).\n\t */\n\tconstructor( type, name, count = null, qualifier = '', isConst = false ) {\n\n\t\t/**\n\t\t *  The input type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The input name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * If the input is an Array, count will be the length.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.count = count;\n\n\t\t/**\n\t\t *The parameter qualifier (only relevant for GLSL).\n\t\t *\n\t\t * @type {('in'|'out'|'inout')}\n\t\t * @default ''\n\t\t */\n\t\tthis.qualifier = qualifier;\n\n\t\t/**\n\t\t * Whether the input uses a const qualifier or not (only relevant for GLSL).\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isConst = isConst;\n\n\t}\n\n}\n\nNodeFunctionInput.isNodeFunctionInput = true;\n\nexport default NodeFunctionInput;\n"],"mappings":"AAGA,MAAMA,kBAWL,WAAAC,CAAaC,EAAMC,EAAMC,EAAQ,KAAMC,EAAY,GAAIC,GAAU,GAOhEC,KAAKL,KAAOA,EAOZK,KAAKJ,KAAOA,EAQZI,KAAKH,MAAQA,EAQbG,KAAKF,UAAYA,EAQjBE,KAAKD,QAAUA,CAEhB,EAIDN,kBAAkBQ,qBAAsB,iBAEzBR","ignoreList":[]}