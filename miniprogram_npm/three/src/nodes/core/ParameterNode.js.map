{"version":3,"file":"node_modules/three/src/nodes/core/ParameterNode.js","names":["nodeObject","PropertyNode","ParameterNode","type","constructor","nodeType","name","super","this","isParameterNode","getHash","uuid","generate","parameter"],"sources":["node_modules/three/src/nodes/core/ParameterNode.js"],"sourcesContent":["import { nodeObject } from '../tsl/TSLBase.js';\nimport PropertyNode from './PropertyNode.js';\n\n/**\n * Special version of {@link PropertyNode} which is used for parameters.\n *\n * @augments PropertyNode\n */\nclass ParameterNode extends PropertyNode {\n\n\tstatic get type() {\n\n\t\treturn 'ParameterNode';\n\n\t}\n\n\t/**\n\t * Constructs a new parameter node.\n\t *\n\t * @param {string} nodeType - The type of the node.\n\t * @param {?string} [name=null] - The name of the parameter in the shader.\n\t */\n\tconstructor( nodeType, name = null ) {\n\n\t\tsuper( nodeType, name );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isParameterNode = true;\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgenerate() {\n\n\t\treturn this.name;\n\n\t}\n\n}\n\nexport default ParameterNode;\n\n/**\n * TSL function for creating a parameter node.\n *\n * @tsl\n * @function\n * @param {string} type - The type of the node.\n * @param {?string} name - The name of the parameter in the shader.\n * @returns {ParameterNode}\n */\nexport const parameter = ( type, name ) => nodeObject( new ParameterNode( type, name ) );\n"],"mappings":"OAASA,eAAkB,2BACpBC,iBAAkB,oBAOzB,MAAMC,sBAAsBD,aAE3B,eAAWE,GAEV,MAAO,eAER,CAQA,WAAAC,CAAaC,EAAUC,EAAO,MAE7BC,MAAOF,EAAUC,GASjBE,KAAKC,iBAAkB,CAExB,CAEA,OAAAC,GAEC,OAAOF,KAAKG,IAEb,CAEA,QAAAC,GAEC,OAAOJ,KAAKF,IAEb,iBAIcJ,qBAWR,MAAMW,UAAY,CAAEV,EAAMG,IAAUN,WAAY,IAAIE,cAAeC,EAAMG","ignoreList":[]}