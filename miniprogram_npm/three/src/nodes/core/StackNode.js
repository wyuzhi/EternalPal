import Node from"./Node.js";import{select}from"../math/ConditionalNode.js";import{ShaderNode,nodeProxy,getCurrentStack,setCurrentStack,nodeObject}from"../tsl/TSLBase.js";class StackNode extends Node{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this._expressionNode=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new ShaderNode(t);return this._currentCond=select(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new ShaderNode(t),o=select(e,r);return this._currentCond.elseNode=o,this._currentCond=o,this}Else(e){return this._currentCond.elseNode=new ShaderNode(e),this}Switch(e){return this._expressionNode=nodeObject(e),this}Case(...e){const t=[];if(!(e.length>=2))throw new Error("TSL: Invalid parameter length. Case() requires at least two parameters.");for(let r=0;r<e.length-1;r++)t.push(this._expressionNode.equal(nodeObject(e[r])));const r=e[e.length-1],o=new ShaderNode(r);let s=t[0];for(let e=1;e<t.length;e++)s=s.or(t[e]);const n=select(s,o);return null===this._currentCond?(this._currentCond=n,this.add(this._currentCond)):(this._currentCond.elseNode=n,this._currentCond=n,this)}Default(e){return this.Else(e),this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const o of this.getChildren()){if(o.isVarNode&&!0===o.intent){if(!0!==e.getNodeProperties(o).assign)continue}t["node"+r++]=o}return t.outputNode||null}build(e,...t){const r=e.currentStack,o=getCurrentStack();setCurrentStack(this),e.currentStack=this;const s=e.buildStage;for(const t of this.nodes){if(t.isVarNode&&!0===t.intent){if(!0!==e.getNodeProperties(t).assign)continue}if("setup"===s)t.build(e);else if("analyze"===s)t.build(e,this);else if("generate"===s){const r=e.getDataFromNode(t,"any").stages,o=r&&r[e.shaderStage];if(t.isVarNode&&o&&1===o.length&&o[0]&&o[0].isStackNode)continue;t.build(e,"void")}}const n=this.outputNode?this.outputNode.build(e,...t):super.build(e,...t);return setCurrentStack(o),e.currentStack=r,n}}export default StackNode;export const stack=nodeProxy(StackNode).setParameterLength(0,1);
//# sourceMappingURL=StackNode.js.map