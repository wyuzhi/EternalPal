{"version":3,"file":"node_modules/three/src/nodes/core/StructNode.js","names":["Node","StructTypeNode","nodeObject","StructNode","type","constructor","structLayoutNode","values","super","this","isStructNode","getNodeType","builder","getMemberType","name","generate","nodeVar","getVarFromNode","structType","propertyName","getPropertyName","addLineFlowCode","generateStruct","membersLayout","struct","structLayout","params","length","isNode","names","Object","keys","i","layout","isStruct"],"sources":["node_modules/three/src/nodes/core/StructNode.js"],"sourcesContent":["import Node from './Node.js';\nimport StructTypeNode from './StructTypeNode.js';\nimport { nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * StructNode allows to create custom structures with multiple members.\n * This can also be used to define structures in attribute and uniform data.\n *\n * ```js\n * // Define a custom struct\n * const BoundingBox = struct( { min: 'vec3', max: 'vec3' } );\n *\n * // Create a new instance of the struct\n * const bb = BoundingBox( vec3( 0 ), vec3( 1 ) ); // style 1\n * const bb = BoundingBox( { min: vec3( 0 ), max: vec3( 1 ) } ); // style 2\n *\n * // Access the struct members\n * const min = bb.get( 'min' );\n *\n * // Assign a new value to a member\n * min.assign( vec3() );\n * ```\n * @augments Node\n */\nclass StructNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'StructNode';\n\n\t}\n\n\tconstructor( structLayoutNode, values ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.structLayoutNode = structLayoutNode;\n\t\tthis.values = values;\n\n\t\tthis.isStructNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.structLayoutNode.getNodeType( builder );\n\n\t}\n\n\tgetMemberType( builder, name ) {\n\n\t\treturn this.structLayoutNode.getMemberType( builder, name );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeVar = builder.getVarFromNode( this );\n\t\tconst structType = nodeVar.type;\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tbuilder.addLineFlowCode( `${ propertyName } = ${ builder.generateStruct( structType, this.structLayoutNode.membersLayout, this.values ) }`, this );\n\n\t\treturn nodeVar.name;\n\n\t}\n\n}\n\nexport default StructNode;\n\n/**\n * TSL function for creating a struct node.\n *\n * @tsl\n * @function\n * @param {Object} membersLayout - The layout of the struct members.\n * @param {?string} [name=null] - The name of the struct.\n * @returns {Function} The struct function.\n */\nexport const struct = ( membersLayout, name = null ) => {\n\n\tconst structLayout = new StructTypeNode( membersLayout, name );\n\n\tconst struct = ( ...params ) => {\n\n\t\tlet values = null;\n\n\t\tif ( params.length > 0 ) {\n\n\t\t\tif ( params[ 0 ].isNode ) {\n\n\t\t\t\tvalues = {};\n\n\t\t\t\tconst names = Object.keys( membersLayout );\n\n\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\t\tvalues[ names[ i ] ] = params[ i ];\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvalues = params[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeObject( new StructNode( structLayout, values ) );\n\n\t};\n\n\tstruct.layout = structLayout;\n\tstruct.isStruct = true;\n\n\treturn struct;\n\n};\n"],"mappings":"OAAOA,SAAU,mBACVC,mBAAoB,6BAClBC,eAAkB,oBAsB3B,MAAMC,mBAAmBH,KAExB,eAAWI,GAEV,MAAO,YAER,CAEA,WAAAC,CAAaC,EAAkBC,GAE9BC,MAAO,QAEPC,KAAKH,iBAAmBA,EACxBG,KAAKF,OAASA,EAEdE,KAAKC,cAAe,CAErB,CAEA,WAAAC,CAAaC,GAEZ,OAAOH,KAAKH,iBAAiBK,YAAaC,EAE3C,CAEA,aAAAC,CAAeD,EAASE,GAEvB,OAAOL,KAAKH,iBAAiBO,cAAeD,EAASE,EAEtD,CAEA,QAAAC,CAAUH,GAET,MAAMI,EAAUJ,EAAQK,eAAgBR,MAClCS,EAAaF,EAAQZ,KACrBe,EAAeP,EAAQQ,gBAAiBJ,GAI9C,OAFAJ,EAAQS,gBAAiB,GAAIF,OAAoBP,EAAQU,eAAgBJ,EAAYT,KAAKH,iBAAiBiB,cAAed,KAAKF,UAAaE,MAErIO,EAAQF,IAEhB,iBAIcX,kBAWR,MAAMqB,OAAS,CAAED,EAAeT,EAAO,QAE7C,MAAMW,EAAe,IAAIxB,eAAgBsB,EAAeT,GAElDU,EAAS,IAAKE,KAEnB,IAAInB,EAAS,KAEb,GAAKmB,EAAOC,OAAS,EAEpB,GAAKD,EAAQ,GAAIE,OAAS,CAEzBrB,EAAS,CAAC,EAEV,MAAMsB,EAAQC,OAAOC,KAAMR,GAE3B,IAAM,IAAIS,EAAI,EAAGA,EAAIN,EAAOC,OAAQK,IAEnCzB,EAAQsB,EAAOG,IAAQN,EAAQM,EAIjC,MAECzB,EAASmB,EAAQ,GAMnB,OAAOxB,WAAY,IAAIC,WAAYsB,EAAclB,GAAU,EAO5D,OAHAiB,EAAOS,OAASR,EAChBD,EAAOU,UAAW,EAEXV,CAAM","ignoreList":[]}