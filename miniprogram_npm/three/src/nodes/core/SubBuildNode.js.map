{"version":3,"file":"node_modules/three/src/nodes/core/SubBuildNode.js","names":["Node","nodeObject","SubBuildNode","type","constructor","node","name","nodeType","super","this","isSubBuildNode","getNodeType","builder","addSubBuild","removeSubBuild","build","params","data","subBuild"],"sources":["node_modules/three/src/nodes/core/SubBuildNode.js"],"sourcesContent":["import Node from './Node.js';\nimport { nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * This node is used to build a sub-build in the node system.\n *\n * @augments Node\n * @param {Node} node - The node to be built in the sub-build.\n * @param {string} name - The name of the sub-build.\n * @param {string|null} [nodeType=null] - The type of the node, if known.\n */\nclass SubBuildNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SubBuild';\n\n\t}\n\n\tconstructor( node, name, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The node to be built in the sub-build.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The name of the sub-build.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSubBuildNode = true;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType !== null ) return this.nodeType;\n\n\t\tbuilder.addSubBuild( this.name );\n\n\t\tconst nodeType = this.node.getNodeType( builder );\n\n\t\tbuilder.removeSubBuild();\n\n\t\treturn nodeType;\n\n\t}\n\n\tbuild( builder, ...params ) {\n\n\t\tbuilder.addSubBuild( this.name );\n\n\t\tconst data = this.node.build( builder, ...params );\n\n\t\tbuilder.removeSubBuild();\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport default SubBuildNode;\n\n/**\n * Creates a new sub-build node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node to be built in the sub-build.\n * @param {string} name - The name of the sub-build.\n * @param {string|null} [type=null] - The type of the node, if known.\n * @returns {Node} A node object wrapping the SubBuildNode instance.\n */\nexport const subBuild = ( node, name, type = null ) => nodeObject( new SubBuildNode( nodeObject( node ), name, type ) );\n"],"mappings":"OAAOA,SAAU,mBACRC,eAAkB,oBAU3B,MAAMC,qBAAqBF,KAE1B,eAAWG,GAEV,MAAO,UAER,CAEA,WAAAC,CAAaC,EAAMC,EAAMC,EAAW,MAEnCC,MAAOD,GAOPE,KAAKJ,KAAOA,EAOZI,KAAKH,KAAOA,EASZG,KAAKC,gBAAiB,CAEvB,CAEA,WAAAC,CAAaC,GAEZ,GAAuB,OAAlBH,KAAKF,SAAoB,OAAOE,KAAKF,SAE1CK,EAAQC,YAAaJ,KAAKH,MAE1B,MAAMC,EAAWE,KAAKJ,KAAKM,YAAaC,GAIxC,OAFAA,EAAQE,iBAEDP,CAER,CAEA,KAAAQ,CAAOH,KAAYI,GAElBJ,EAAQC,YAAaJ,KAAKH,MAE1B,MAAMW,EAAOR,KAAKJ,KAAKU,MAAOH,KAAYI,GAI1C,OAFAJ,EAAQE,iBAEDG,CAER,iBAIcf,oBAYR,MAAMgB,SAAW,CAAEb,EAAMC,EAAMH,EAAO,OAAUF,WAAY,IAAIC,aAAcD,WAAYI,GAAQC,EAAMH","ignoreList":[]}