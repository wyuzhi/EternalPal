{"version":3,"file":"node_modules/three/src/nodes/core/TempNode.js","names":["Node","TempNode","type","constructor","nodeType","super","this","isTempNode","hasDependencies","builder","getDataFromNode","usageCount","build","output","getBuildStage","getVectorType","getNodeType","nodeData","undefined","propertyName","format","snippet","nodeVar","getVarFromNode","getPropertyName","addLineFlowCode"],"sources":["node_modules/three/src/nodes/core/TempNode.js"],"sourcesContent":["import Node from './Node.js';\n\n/**\n * This module uses cache management to create temporary variables\n * if the node is used more than once to prevent duplicate calculations.\n *\n * The class acts as a base class for many other nodes types.\n *\n * @augments Node\n */\nclass TempNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'TempNode';\n\n\t}\n\n\t/**\n\t * Constructs a temp node.\n\t *\n\t * @param {?string} nodeType - The node type.\n\t */\n\tconstructor( nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isTempNode = true;\n\n\t}\n\n\t/**\n\t * Whether this node is used more than once in context of other nodes.\n\t *\n\t * @param {NodeBuilder} builder - The node builder.\n\t * @return {boolean} A flag that indicates if there is more than one dependency to other nodes.\n\t */\n\thasDependencies( builder ) {\n\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\n\n\t}\n\n\tbuild( builder, output ) {\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'generate' ) {\n\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tif ( nodeData.propertyName !== undefined ) {\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\n\n\t\t\t\tconst snippet = super.build( builder, type );\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tbuilder.addLineFlowCode( `${ propertyName } = ${ snippet }`, this );\n\n\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.build( builder, output );\n\n\t}\n\n}\n\nexport default TempNode;\n"],"mappings":"OAAOA,SAAU,YAUjB,MAAMC,iBAAiBD,KAEtB,eAAWE,GAEV,MAAO,UAER,CAOA,WAAAC,CAAaC,EAAW,MAEvBC,MAAOD,GASPE,KAAKC,YAAa,CAEnB,CAQA,eAAAC,CAAiBC,GAEhB,OAAOA,EAAQC,gBAAiBJ,MAAOK,WAAa,CAErD,CAEA,KAAAC,CAAOH,EAASI,GAIf,GAAoB,aAFDJ,EAAQK,gBAEM,CAEhC,MAAMZ,EAAOO,EAAQM,cAAeT,KAAKU,YAAaP,EAASI,IACzDI,EAAWR,EAAQC,gBAAiBJ,MAE1C,QAA+BY,IAA1BD,EAASE,aAEb,OAAOV,EAAQW,OAAQH,EAASE,aAAcjB,EAAMW,GAE9C,GAAc,SAATX,GAA8B,SAAXW,GAAqBP,KAAKE,gBAAiBC,GAAY,CAErF,MAAMY,EAAUhB,MAAMO,MAAOH,EAASP,GAEhCoB,EAAUb,EAAQc,eAAgBjB,KAAM,KAAMJ,GAC9CiB,EAAeV,EAAQe,gBAAiBF,GAO9C,OALAb,EAAQgB,gBAAiB,GAAIN,OAAoBE,IAAYf,MAE7DW,EAASI,QAAUA,EACnBJ,EAASE,aAAeA,EAEjBV,EAAQW,OAAQH,EAASE,aAAcjB,EAAMW,EAErD,CAED,CAEA,OAAOR,MAAMO,MAAOH,EAASI,EAE9B,iBAIcZ","ignoreList":[]}