import InputNode from"./InputNode.js";import{objectGroup}from"./UniformGroupNode.js";import{nodeObject,getConstNodeType}from"../tsl/TSLCore.js";class UniformNode extends InputNode{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=objectGroup}setName(e){return this.name=e,this}label(e){return console.warn('THREE.TSL: "label()" has been deprecated. Use "setName()" instead.'),this.setName(e)}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const o=this.getSelf();return e=e.bind(o),super.onUpdate((t=>{const r=e(t,o);void 0!==r&&(this.value=r)}),t)}getInputType(e){let t=super.getInputType(e);return"bool"===t&&(t="uint"),t}generate(e,t){const o=this.getNodeType(e),r=this.getUniformHash(e);let n=e.getNodeFromHash(r);void 0===n&&(e.setHashNode(this,r),n=this);const s=n.getInputType(e),i=e.getUniformFromNode(n,s,e.shaderStage,this.name||e.context.nodeName),d=e.getPropertyName(i);void 0!==e.context.nodeName&&delete e.context.nodeName;let a=d;if("bool"===o){const t=e.getDataFromNode(this);let r=t.propertyName;if(void 0===r){const n=e.getVarFromNode(this,null,"bool");r=e.getPropertyName(n),t.propertyName=r,a=e.format(d,s,o),e.addLineFlowCode(`${r} = ${a}`,this)}a=r}return e.format(a,o,t)}}export default UniformNode;export const uniform=(e,t)=>{const o=getConstNodeType(t||e),r=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return nodeObject(new UniformNode(r,o))};
//# sourceMappingURL=UniformNode.js.map