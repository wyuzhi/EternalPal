{"version":3,"file":"node_modules/three/src/nodes/core/constants.js","names":["NodeShaderStage","VERTEX","FRAGMENT","NodeUpdateType","NONE","FRAME","RENDER","OBJECT","NodeType","BOOLEAN","INTEGER","FLOAT","VECTOR2","VECTOR3","VECTOR4","MATRIX2","MATRIX3","MATRIX4","NodeAccess","READ_ONLY","WRITE_ONLY","READ_WRITE","defaultShaderStages","defaultBuildStages","shaderStages","vectorComponents"],"sources":["node_modules/three/src/nodes/core/constants.js"],"sourcesContent":["/**\n * Possible shader stages.\n *\n * @property {string} VERTEX The vertex shader stage.\n * @property {string} FRAGMENT The fragment shader stage.\n */\nexport const NodeShaderStage = {\n\tVERTEX: 'vertex',\n\tFRAGMENT: 'fragment'\n};\n\n/**\n * Update types of a node.\n *\n * @property {string} NONE The update method is not executed.\n * @property {string} FRAME The update method is executed per frame.\n * @property {string} RENDER The update method is executed per render. A frame might be produced by multiple render calls so this value allows more detailed updates than FRAME.\n * @property {string} OBJECT The update method is executed per {@link Object3D} that uses the node for rendering.\n */\nexport const NodeUpdateType = {\n\tNONE: 'none',\n\tFRAME: 'frame',\n\tRENDER: 'render',\n\tOBJECT: 'object'\n};\n\n/**\n * Data types of a node.\n *\n * @property {string} BOOLEAN Boolean type.\n * @property {string} INTEGER Integer type.\n * @property {string} FLOAT Float type.\n * @property {string} VECTOR2 Two-dimensional vector type.\n * @property {string} VECTOR3 Three-dimensional vector type.\n * @property {string} VECTOR4 Four-dimensional vector type.\n * @property {string} MATRIX2 2x2 matrix type.\n * @property {string} MATRIX3 3x3 matrix type.\n * @property {string} MATRIX4 4x4 matrix type.\n */\nexport const NodeType = {\n\tBOOLEAN: 'bool',\n\tINTEGER: 'int',\n\tFLOAT: 'float',\n\tVECTOR2: 'vec2',\n\tVECTOR3: 'vec3',\n\tVECTOR4: 'vec4',\n\tMATRIX2: 'mat2',\n\tMATRIX3: 'mat3',\n\tMATRIX4: 'mat4'\n};\n\n/**\n * Access types of a node. These are relevant for compute and storage usage.\n *\n * @property {string} READ_ONLY Read-only access\n * @property {string} WRITE_ONLY Write-only access.\n * @property {string} READ_WRITE Read and write access.\n */\nexport const NodeAccess = {\n\tREAD_ONLY: 'readOnly',\n\tWRITE_ONLY: 'writeOnly',\n\tREAD_WRITE: 'readWrite',\n};\n\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\nexport const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\nexport const vectorComponents = [ 'x', 'y', 'z', 'w' ];\n"],"mappings":"OAMO,MAAMA,gBAAkB,CAC9BC,OAAQ,SACRC,SAAU,mBAWJ,MAAMC,eAAiB,CAC7BC,KAAM,OACNC,MAAO,QACPC,OAAQ,SACRC,OAAQ,iBAgBF,MAAMC,SAAW,CACvBC,QAAS,OACTC,QAAS,MACTC,MAAO,QACPC,QAAS,OACTC,QAAS,OACTC,QAAS,OACTC,QAAS,OACTC,QAAS,OACTC,QAAS,eAUH,MAAMC,WAAa,CACzBC,UAAW,WACXC,WAAY,YACZC,WAAY,oBAGN,MAAMC,oBAAsB,CAAE,WAAY,iBAC1C,MAAMC,mBAAqB,CAAE,QAAS,UAAW,mBACjD,MAAMC,aAAe,IAAKF,oBAAqB,kBAC/C,MAAMG,iBAAmB,CAAE,IAAK,IAAK,IAAK","ignoreList":[]}