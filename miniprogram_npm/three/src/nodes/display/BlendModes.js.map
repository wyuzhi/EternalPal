{"version":3,"file":"node_modules/three/src/nodes/display/BlendModes.js","names":["Fn","If","vec4","mix","min","step","blendBurn","base","blend","oneMinus","div","setLayout","name","type","inputs","blendDodge","blendScreen","mul","blendOverlay","blendColor","outAlpha","a","add","rgb","premultiplyAlpha","color","return","unpremultiplyAlpha","equal","burn","params","console","warn","dodge","screen","overlay"],"sources":["node_modules/three/src/nodes/display/BlendModes.js"],"sourcesContent":["import { Fn, If, vec4 } from '../tsl/TSLBase.js';\nimport { mix, min, step } from '../math/MathNode.js';\n\n/**\n * Represents a \"Color Burn\" blend mode.\n *\n * It's designed to darken the base layer's colors based on the color of the blend layer.\n * It significantly increases the contrast of the base layer, making the colors more vibrant and saturated.\n * The darker the color in the blend layer, the stronger the darkening and contrast effect on the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A white (#ffffff) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nexport const blendBurn = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min( 1.0, base.oneMinus().div( blend ) ).oneMinus();\n\n} ).setLayout( {\n\tname: 'blendBurn',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Color Dodge\" blend mode.\n *\n * It's designed to lighten the base layer's colors based on the color of the blend layer.\n * It significantly increases the brightness of the base layer, making the colors lighter and more vibrant.\n * The brighter the color in the blend layer, the stronger the lightening and contrast effect on the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nexport const blendDodge = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn min( base.div( blend.oneMinus() ), 1.0 );\n\n} ).setLayout( {\n\tname: 'blendDodge',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Screen\" blend mode.\n *\n * Similar to `blendDodge()`, this mode also lightens the base layer's colors based on the color of the blend layer.\n * The \"Screen\" blend mode is better for general brightening whereas the \"Dodge\" results in more subtle and nuanced\n * effects.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\n * @return {Node<vec3>} The result.\n */\nexport const blendScreen = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn base.oneMinus().mul( blend.oneMinus() ).oneMinus();\n\n} ).setLayout( {\n\tname: 'blendScreen',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * Represents a \"Overlay\" blend mode.\n *\n * It's designed to increase the contrast of the base layer based on the color of the blend layer.\n * It amplifies the existing colors and contrast in the base layer, making lighter areas lighter and darker areas darker.\n * The color of the blend layer significantly influences the resulting contrast and color shift in the base layer.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} base - The base color.\n * @param {Node<vec3>} blend - The blend color\n * @return {Node<vec3>} The result.\n */\nexport const blendOverlay = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\treturn mix( base.mul( 2.0 ).mul( blend ), base.oneMinus().mul( 2.0 ).mul( blend.oneMinus() ).oneMinus(), step( 0.5, base ) );\n\n} ).setLayout( {\n\tname: 'blendOverlay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec3' },\n\t\t{ name: 'blend', type: 'vec3' }\n\t]\n} );\n\n/**\n * This function blends two color based on their alpha values by replicating the behavior of `THREE.NormalBlending`.\n * It assumes both input colors have non-premultiplied alpha.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} base - The base color.\n * @param {Node<vec4>} blend - The blend color\n * @return {Node<vec4>} The result.\n */\nexport const blendColor = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\n\n\tconst outAlpha = blend.a.add( base.a.mul( blend.a.oneMinus() ) );\n\n\treturn vec4( blend.rgb.mul( blend.a ).add( base.rgb.mul( base.a ).mul( blend.a.oneMinus() ) ).div( outAlpha ), outAlpha );\n\n} ).setLayout( {\n\tname: 'blendColor',\n\ttype: 'vec4',\n\tinputs: [\n\t\t{ name: 'base', type: 'vec4' },\n\t\t{ name: 'blend', type: 'vec4' }\n\t]\n} );\n\n/**\n * Premultiplies the RGB channels of a color by its alpha channel.\n *\n * This function is useful for converting a non-premultiplied alpha color\n * into a premultiplied alpha format, where the RGB values are scaled\n * by the alpha value. Premultiplied alpha is often used in graphics\n * rendering for certain operations, such as compositing and image processing.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} color - The input color with non-premultiplied alpha.\n * @return {Node<vec4>} The color with premultiplied alpha.\n */\nexport const premultiplyAlpha = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\treturn vec4( color.rgb.mul( color.a ), color.a );\n\n}, { color: 'vec4', return: 'vec4' } );\n\n/**\n * Unpremultiplies the RGB channels of a color by its alpha channel.\n *\n * This function is useful for converting a premultiplied alpha color\n * back into a non-premultiplied alpha format, where the RGB values are\n * divided by the alpha value. Unpremultiplied alpha is often used in graphics\n * rendering for certain operations, such as compositing and image processing.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} color - The input color with premultiplied alpha.\n * @return {Node<vec4>} The color with non-premultiplied alpha.\n */\nexport const unpremultiplyAlpha = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tIf( color.a.equal( 0.0 ), () => vec4( 0.0 ) );\n\n\treturn vec4( color.rgb.div( color.a ), color.a );\n\n}, { color: 'vec4', return: 'vec4' } );\n\n\n// Deprecated\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendBurn} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nexport const burn = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"burn\" has been renamed. Use \"blendBurn\" instead.' );\n\treturn blendBurn( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendDodge} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nexport const dodge = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"dodge\" has been renamed. Use \"blendDodge\" instead.' );\n\treturn blendDodge( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendScreen} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nexport const screen = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"screen\" has been renamed. Use \"blendScreen\" instead.' );\n\treturn blendScreen( params );\n\n};\n\n/**\n * @tsl\n * @function\n * @deprecated since r171. Use {@link blendOverlay} instead.\n *\n * @param {...any} params\n * @returns {Function}\n */\nexport const overlay = ( ...params ) => { // @deprecated, r171\n\n\tconsole.warn( 'THREE.TSL: \"overlay\" has been renamed. Use \"blendOverlay\" instead.' );\n\treturn blendOverlay( params );\n\n};\n"],"mappings":"OAASA,GAAIC,GAAIC,SAAY,2BACpBC,IAAKC,IAAKC,SAAY,6BAexB,MAAMC,UAA0BN,IAAI,EAAIO,EAAMC,KAE7CJ,IAAK,EAAKG,EAAKE,WAAWC,IAAKF,IAAUC,aAE7CE,UAAW,CACdC,KAAM,YACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,QAASC,KAAM,kBAiBlB,MAAME,WAA2Bf,IAAI,EAAIO,EAAMC,KAE9CJ,IAAKG,EAAKG,IAAKF,EAAMC,YAAc,KAEvCE,UAAW,CACdC,KAAM,aACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,QAASC,KAAM,kBAiBlB,MAAMG,YAA4BhB,IAAI,EAAIO,EAAMC,KAE/CD,EAAKE,WAAWQ,IAAKT,EAAMC,YAAaA,aAE5CE,UAAW,CACdC,KAAM,cACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,QAASC,KAAM,kBAiBlB,MAAMK,aAA6BlB,IAAI,EAAIO,EAAMC,KAEhDL,IAAKI,EAAKU,IAAK,GAAMA,IAAKT,GAASD,EAAKE,WAAWQ,IAAK,GAAMA,IAAKT,EAAMC,YAAaA,WAAYJ,KAAM,GAAKE,MAEjHI,UAAW,CACdC,KAAM,eACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,QAASC,KAAM,kBAclB,MAAMM,WAA2BnB,IAAI,EAAIO,EAAMC,MAErD,MAAMY,EAAWZ,EAAMa,EAAEC,IAAKf,EAAKc,EAAEJ,IAAKT,EAAMa,EAAEZ,aAElD,OAAOP,KAAMM,EAAMe,IAAIN,IAAKT,EAAMa,GAAIC,IAAKf,EAAKgB,IAAIN,IAAKV,EAAKc,GAAIJ,IAAKT,EAAMa,EAAEZ,aAAeC,IAAKU,GAAYA,EAAU,IAEtHT,UAAW,CACdC,KAAM,aACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,OAAQC,KAAM,QACtB,CAAED,KAAM,QAASC,KAAM,kBAiBlB,MAAMW,iBAAiCxB,IAAI,EAAIyB,KAE9CvB,KAAMuB,EAAMF,IAAIN,IAAKQ,EAAMJ,GAAKI,EAAMJ,IAE3C,CAAEI,MAAO,OAAQC,OAAQ,gBAerB,MAAMC,mBAAmC3B,IAAI,EAAIyB,MAEvDxB,GAAIwB,EAAMJ,EAAEO,MAAO,IAAO,IAAM1B,KAAM,KAE/BA,KAAMuB,EAAMF,IAAIb,IAAKe,EAAMJ,GAAKI,EAAMJ,KAE3C,CAAEI,MAAO,OAAQC,OAAQ,gBAarB,MAAMG,KAAO,IAAKC,KAExBC,QAAQC,KAAM,gEACP1B,UAAWwB,WAYZ,MAAMG,MAAQ,IAAKH,KAEzBC,QAAQC,KAAM,kEACPjB,WAAYe,WAYb,MAAMI,OAAS,IAAKJ,KAE1BC,QAAQC,KAAM,oEACPhB,YAAac,WAYd,MAAMK,QAAU,IAAKL,KAE3BC,QAAQC,KAAM,sEACPd,aAAcY","ignoreList":[]}