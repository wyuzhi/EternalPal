{"version":3,"file":"node_modules/three/src/nodes/display/BumpMapNode.js","names":["TempNode","uv","normalView","positionView","faceDirection","Fn","nodeProxy","float","vec2","dHdxy_fwd","textureNode","bumpScale","sampleTexture","callback","cache","context","getUV","texNode","uvNode","forceUVContext","Hll","add","dFdx","sub","dFdy","mul","perturbNormalArb","inputs","surf_pos","surf_norm","dHdxy","vSigmaX","normalize","vN","R1","cross","R2","fDet","dot","vGrad","sign","x","y","abs","BumpMapNode","type","constructor","scaleNode","super","this","setup","bumpMap","setParameterLength"],"sources":["node_modules/three/src/nodes/display/BumpMapNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { uv } from '../accessors/UV.js';\nimport { normalView } from '../accessors/Normal.js';\nimport { positionView } from '../accessors/Position.js';\nimport { faceDirection } from './FrontFacingNode.js';\nimport { Fn, nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\n\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\nconst dHdxy_fwd = Fn( ( { textureNode, bumpScale } ) => {\n\n\t// It's used to preserve the same TextureNode instance\n\tconst sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );\n\n\tconst Hll = float( sampleTexture( ( uvNode ) => uvNode ) );\n\n\treturn vec2(\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\n\t).mul( bumpScale );\n\n} );\n\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\nconst perturbNormalArb = Fn( ( inputs ) => {\n\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\n\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\n\tconst vSigmaX = surf_pos.dFdx().normalize();\n\tconst vSigmaY = surf_pos.dFdy().normalize();\n\tconst vN = surf_norm; // normalized\n\n\tconst R1 = vSigmaY.cross( vN );\n\tconst R2 = vN.cross( vSigmaX );\n\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\n\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\n\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\n\n} );\n\n/**\n * This class can be used for applying bump maps to materials.\n *\n * ```js\n * material.normalNode = bumpMap( texture( bumpTex ) );\n * ```\n *\n * @augments TempNode\n */\nclass BumpMapNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'BumpMapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new bump map node.\n\t *\n\t * @param {Node<float>} textureNode - Represents the bump map data.\n\t * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\n\t */\n\tconstructor( textureNode, scaleNode = null ) {\n\n\t\tsuper( 'vec3' );\n\n\t\t/**\n\t\t * Represents the bump map data.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * Controls the intensity of the bump effect.\n\t\t *\n\t\t * @type {?Node<float>}\n\t\t * @default null\n\t\t */\n\t\tthis.scaleNode = scaleNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\n\n\t\treturn perturbNormalArb( {\n\t\t\tsurf_pos: positionView,\n\t\t\tsurf_norm: normalView,\n\t\t\tdHdxy\n\t\t} );\n\n\t}\n\n}\n\nexport default BumpMapNode;\n\n/**\n * TSL function for creating a bump map node.\n *\n * @tsl\n * @function\n * @param {Node<float>} textureNode - Represents the bump map data.\n * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\n * @returns {BumpMapNode}\n */\nexport const bumpMap = /*@__PURE__*/ nodeProxy( BumpMapNode ).setParameterLength( 1, 2 );\n"],"mappings":"OAAOA,aAAc,6BACZC,OAAU,4BACVC,eAAkB,gCAClBC,iBAAoB,kCACpBC,kBAAqB,8BACrBC,GAAIC,UAAWC,MAAOC,SAAY,oBAK3C,MAAMC,UAAYJ,IAAI,EAAIK,cAAaC,gBAGtC,MAAMC,EAAkBC,GAAcH,EAAYI,QAAQC,QAAS,CAAEC,MAASC,GAAaJ,EAAUI,EAAQC,QAAUjB,MAAQkB,gBAAgB,IAEzIC,EAAMb,MAAOK,GAAiBM,GAAYA,KAEhD,OAAOV,KACND,MAAOK,GAAiBM,GAAYA,EAAOG,IAAKH,EAAOI,WAAaC,IAAKH,GACzEb,MAAOK,GAAiBM,GAAYA,EAAOG,IAAKH,EAAOM,WAAaD,IAAKH,IACxEK,IAAKd,EAAW,IAMbe,iBAAmBrB,IAAMsB,IAE9B,MAAMC,SAAEA,EAAQC,UAAEA,EAASC,MAAEA,GAAUH,EAGjCI,EAAUH,EAASN,OAAOU,YAE1BC,EAAKJ,EAELK,EAHUN,EAASJ,OAAOQ,YAGbG,MAAOF,GACpBG,EAAKH,EAAGE,MAAOJ,GAEfM,EAAON,EAAQO,IAAKJ,GAAKT,IAAKrB,eAE9BmC,EAAQF,EAAKG,OAAOf,IAAKK,EAAMW,EAAEhB,IAAKS,GAAKb,IAAKS,EAAMY,EAAEjB,IAAKW,KAEnE,OAAOC,EAAKM,MAAMlB,IAAKI,GAAYN,IAAKgB,GAAQP,WAAW,IAa5D,MAAMY,oBAAoB5C,SAEzB,eAAW6C,GAEV,MAAO,aAER,CAQA,WAAAC,CAAapC,EAAaqC,EAAY,MAErCC,MAAO,QAOPC,KAAKvC,YAAcA,EAQnBuC,KAAKF,UAAYA,CAElB,CAEA,KAAAG,GAEC,MAAMvC,EAA+B,OAAnBsC,KAAKF,UAAqBE,KAAKF,UAAY,EACvDjB,EAAQrB,UAAW,CAAEC,YAAauC,KAAKvC,YAAaC,cAE1D,OAAOe,iBAAkB,CACxBE,SAAUzB,aACV0B,UAAW3B,WACX4B,SAGF,iBAIcc,mBAWR,MAAMO,QAAwB7C,UAAWsC,aAAcQ,mBAAoB,EAAG","ignoreList":[]}