import{dot,max,mix}from"../math/MathNode.js";import{add}from"../math/OperatorNode.js";import{Fn,If,float,vec3,vec4}from"../tsl/TSLBase.js";import{ColorManagement}from"../../math/ColorManagement.js";import{Vector3}from"../../math/Vector3.js";import{LinearSRGBColorSpace}from"../../constants.js";export const grayscale=Fn((([o])=>luminance(o.rgb)));export const saturation=Fn((([o,r=float(1)])=>r.mix(luminance(o.rgb),o.rgb)));export const vibrance=Fn((([o,r=float(1)])=>{const e=add(o.r,o.g,o.b).div(3),t=o.r.max(o.g.max(o.b)),a=t.sub(e).mul(r).mul(-3);return mix(o.rgb,t,a)}));export const hue=Fn((([o,r=float(1)])=>{const e=vec3(.57735,.57735,.57735),t=r.cos();return vec3(o.rgb.mul(t).add(e.cross(o.rgb).mul(r.sin()).add(e.mul(dot(e,o.rgb).mul(t.oneMinus())))))}));export const luminance=(o,r=vec3(ColorManagement.getLuminanceCoefficients(new Vector3)))=>dot(o,r);export const cdl=Fn((([o,r=vec3(1),e=vec3(0),t=vec3(1),a=float(1),n=vec3(ColorManagement.getLuminanceCoefficients(new Vector3,LinearSRGBColorSpace))])=>{const m=o.rgb.dot(vec3(n)),c=max(o.rgb.mul(r).add(e),0).toVar(),s=c.pow(t).toVar();return If(c.r.greaterThan(0),(()=>{c.r.assign(s.r)})),If(c.g.greaterThan(0),(()=>{c.g.assign(s.g)})),If(c.b.greaterThan(0),(()=>{c.b.assign(s.b)})),c.assign(m.add(c.sub(m).mul(a))),vec4(c.rgb,o.a)}));
//# sourceMappingURL=ColorAdjustment.js.map