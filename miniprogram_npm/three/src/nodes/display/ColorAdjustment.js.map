{"version":3,"file":"node_modules/three/src/nodes/display/ColorAdjustment.js","names":["dot","max","mix","add","Fn","If","float","vec3","vec4","ColorManagement","Vector3","LinearSRGBColorSpace","grayscale","color","luminance","rgb","saturation","adjustment","vibrance","average","r","g","b","div","mx","amt","sub","mul","hue","k","cosAngle","cos","cross","sin","oneMinus","luminanceCoefficients","getLuminanceCoefficients","cdl","slope","offset","power","luma","v","toVar","pv","pow","greaterThan","assign","a"],"sources":["node_modules/three/src/nodes/display/ColorAdjustment.js"],"sourcesContent":["import { dot, max, mix } from '../math/MathNode.js';\nimport { add } from '../math/OperatorNode.js';\nimport { Fn, If, float, vec3, vec4 } from '../tsl/TSLBase.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { LinearSRGBColorSpace } from '../../constants.js';\n\n/**\n * Computes a grayscale value for the given RGB color value.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color value to compute the grayscale for.\n * @return {Node<vec3>} The grayscale color.\n */\nexport const grayscale = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\treturn luminance( color.rgb );\n\n} );\n\n/**\n * Super-saturates or desaturates the given RGB color.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Specifies the amount of the conversion. A value under `1` desaturates the color, a value over `1` super-saturates it.\n * @return {Node<vec3>} The saturated color.\n */\nexport const saturation = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\n\n} );\n\n/**\n * Selectively enhance the intensity of less saturated RGB colors. Can result\n * in a more natural and visually appealing image with enhanced color depth\n * compared to {@link ColorAdjustment#saturation}.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Controls the intensity of the vibrance effect.\n * @return {Node<vec3>} The updated color.\n */\nexport const vibrance = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\n\n\tconst mx = color.r.max( color.g.max( color.b ) );\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( - 3.0 );\n\n\treturn mix( color.rgb, mx, amt );\n\n} );\n\n/**\n * Updates the hue component of the given RGB color while preserving its luminance and saturation.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The input color.\n * @param {Node<float>} [adjustment=1] - Defines the degree of hue rotation in radians. A positive value rotates the hue clockwise, while a negative value rotates it counterclockwise.\n * @return {Node<vec3>} The updated color.\n */\nexport const hue = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\n\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\n\n\tconst cosAngle = adjustment.cos();\n\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\n\n} );\n\n/**\n * Computes the luminance for the given RGB color value.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color value to compute the luminance for.\n * @param {?Node<vec3>} luminanceCoefficients - The luminance coefficients. By default predefined values of the current working color space are used.\n * @return {Node<vec3>} The luminance.\n */\nexport const luminance = (\n\tcolor,\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3() ) )\n) => dot( color, luminanceCoefficients );\n\n/**\n * Color Decision List (CDL) v1.2\n *\n * Compact representation of color grading information, defined by slope, offset, power, and\n * saturation. The CDL should be typically be given input in a log space (such as LogC, ACEScc,\n * or AgX Log), and will return output in the same space. Output may require clamping >=0.\n *\n * @tsl\n * @function\n * @param {Node<vec4>} color Input (-Infinity < input < +Infinity)\n * @param {Node<vec3>} slope Slope (0 ≤ slope < +Infinity)\n * @param {Node<vec3>} offset Offset (-Infinity < offset < +Infinity; typically -1 < offset < 1)\n * @param {Node<vec3>} power Power (0 < power < +Infinity)\n * @param {Node<float>} saturation Saturation (0 ≤ saturation < +Infinity; typically 0 ≤ saturation < 4)\n * @param {Node<vec3>} luminanceCoefficients Luminance coefficients for saturation term, typically Rec. 709\n * @return {Node<vec4>} Output, -Infinity < output < +Infinity\n *\n * References:\n * - ASC CDL v1.2\n * - {@link https://blender.stackexchange.com/a/55239/43930}\n * - {@link https://docs.acescentral.com/specifications/acescc/}\n */\nexport const cdl = /*@__PURE__*/ Fn( ( [\n\tcolor,\n\tslope = vec3( 1 ),\n\toffset = vec3( 0 ),\n\tpower = vec3( 1 ),\n\tsaturation = float( 1 ),\n\t// ASC CDL v1.2 explicitly requires Rec. 709 luminance coefficients.\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3(), LinearSRGBColorSpace ) )\n] ) => {\n\n\t// NOTE: The ASC CDL v1.2 defines a [0, 1] clamp on the slope+offset term, and another on the\n\t// saturation term. Per the ACEScc specification and Filament, limits may be omitted to support\n\t// values outside [0, 1], requiring a workaround for negative values in the power expression.\n\n\tconst luma = color.rgb.dot( vec3( luminanceCoefficients ) );\n\n\tconst v = max( color.rgb.mul( slope ).add( offset ), 0.0 ).toVar();\n\tconst pv = v.pow( power ).toVar();\n\n\tIf( v.r.greaterThan( 0.0 ), () => { v.r.assign( pv.r ); } ); // eslint-disable-line\n\tIf( v.g.greaterThan( 0.0 ), () => { v.g.assign( pv.g ); } ); // eslint-disable-line\n\tIf( v.b.greaterThan( 0.0 ), () => { v.b.assign( pv.b ); } ); // eslint-disable-line\n\n\tv.assign( luma.add( v.sub( luma ).mul( saturation ) ) );\n\n\treturn vec4( v.rgb, color.a );\n\n} );\n"],"mappings":"OAASA,IAAKC,IAAKC,QAAW,6BACrBC,QAAW,iCACXC,GAAIC,GAAIC,MAAOC,KAAMC,SAAY,2BACjCC,oBAAuB,uCACvBC,YAAe,+BACfC,yBAA4B,4BAU9B,MAAMC,UAA0BR,IAAI,EAAIS,KAEvCC,UAAWD,EAAME,cAalB,MAAMC,WAA2BZ,IAAI,EAAIS,EAAOI,EAAaX,MAAO,MAEnEW,EAAWf,IAAKY,UAAWD,EAAME,KAAOF,EAAME,cAe/C,MAAMG,SAAyBd,IAAI,EAAIS,EAAOI,EAAaX,MAAO,OAExE,MAAMa,EAAUhB,IAAKU,EAAMO,EAAGP,EAAMQ,EAAGR,EAAMS,GAAIC,IAAK,GAEhDC,EAAKX,EAAMO,EAAEnB,IAAKY,EAAMQ,EAAEpB,IAAKY,EAAMS,IACrCG,EAAMD,EAAGE,IAAKP,GAAUQ,IAAKV,GAAaU,KAAO,GAEvD,OAAOzB,IAAKW,EAAME,IAAKS,EAAIC,EAAK,WAa1B,MAAMG,IAAoBxB,IAAI,EAAIS,EAAOI,EAAaX,MAAO,OAEnE,MAAMuB,EAAItB,KAAM,OAAS,OAAS,QAE5BuB,EAAWb,EAAWc,MAE5B,OAAOxB,KAAMM,EAAME,IAAIY,IAAKG,GAAW3B,IAAK0B,EAAEG,MAAOnB,EAAME,KAAMY,IAAKV,EAAWgB,OAAQ9B,IAAK0B,EAAEF,IAAK3B,IAAK6B,EAAGhB,EAAME,KAAMY,IAAKG,EAASI,eAAoB,WAarJ,MAAMpB,UAAY,CACxBD,EACAsB,EAAwB5B,KAAME,gBAAgB2B,yBAA0B,IAAI1B,YACxEV,IAAKa,EAAOsB,UAwBV,MAAME,IAAoBjC,IAAI,EACpCS,EACAyB,EAAQ/B,KAAM,GACdgC,EAAShC,KAAM,GACfiC,EAAQjC,KAAM,GACdS,EAAaV,MAAO,GAEpB6B,EAAwB5B,KAAME,gBAAgB2B,yBAA0B,IAAI1B,QAAWC,2BAOvF,MAAM8B,EAAO5B,EAAME,IAAIf,IAAKO,KAAM4B,IAE5BO,EAAIzC,IAAKY,EAAME,IAAIY,IAAKW,GAAQnC,IAAKoC,GAAU,GAAMI,QACrDC,EAAKF,EAAEG,IAAKL,GAAQG,QAQ1B,OANAtC,GAAIqC,EAAEtB,EAAE0B,YAAa,IAAO,KAAQJ,EAAEtB,EAAE2B,OAAQH,EAAGxB,EAAG,IACtDf,GAAIqC,EAAErB,EAAEyB,YAAa,IAAO,KAAQJ,EAAErB,EAAE0B,OAAQH,EAAGvB,EAAG,IACtDhB,GAAIqC,EAAEpB,EAAEwB,YAAa,IAAO,KAAQJ,EAAEpB,EAAEyB,OAAQH,EAAGtB,EAAG,IAEtDoB,EAAEK,OAAQN,EAAKtC,IAAKuC,EAAEhB,IAAKe,GAAOd,IAAKX,KAEhCR,KAAMkC,EAAE3B,IAAKF,EAAMmC,EAAG","ignoreList":[]}