{"version":3,"file":"node_modules/three/src/nodes/display/ColorSpaceNode.js","names":["TempNode","addMethodChaining","mat3","nodeObject","vec4","SRGBTransfer","ColorManagement","sRGBTransferEOTF","sRGBTransferOETF","Matrix3","WORKING_COLOR_SPACE","OUTPUT_COLOR_SPACE","ColorSpaceNode","type","constructor","colorNode","source","target","super","this","resolveColorSpace","builder","colorSpace","workingColorSpace","context","outputColorSpace","renderer","setup","outputNode","enabled","getTransfer","rgb","a","getPrimaries","_getMatrix","mul","workingToColorSpace","node","targetColorSpace","colorSpaceToWorking","sourceColorSpace","convertColorSpace"],"sources":["node_modules/three/src/nodes/display/ColorSpaceNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addMethodChaining, mat3, nodeObject, vec4 } from '../tsl/TSLCore.js';\n\nimport { SRGBTransfer } from '../../constants.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\nimport { sRGBTransferEOTF, sRGBTransferOETF } from './ColorSpaceFunctions.js';\nimport { Matrix3 } from '../../math/Matrix3.js';\n\nconst WORKING_COLOR_SPACE = 'WorkingColorSpace';\nconst OUTPUT_COLOR_SPACE = 'OutputColorSpace';\n\n/**\n * This node represents a color space conversion. Meaning it converts\n * a color value from a source to a target color space.\n *\n * @augments TempNode\n */\nclass ColorSpaceNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'ColorSpaceNode';\n\n\t}\n\n\t/**\n\t * Constructs a new color space node.\n\t *\n\t * @param {Node} colorNode - Represents the color to convert.\n\t * @param {string} source - The source color space.\n\t * @param {string} target - The target color space.\n\t */\n\tconstructor( colorNode, source, target ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * Represents the color to convert.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * The source color space.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The target color space.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.target = target;\n\n\t}\n\n\t/**\n\t * This method resolves the constants `WORKING_COLOR_SPACE` and\n\t * `OUTPUT_COLOR_SPACE` based on the current configuration of the\n\t * color management and renderer.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @param {string} colorSpace - The color space to resolve.\n\t * @return {string} The resolved color space.\n\t */\n\tresolveColorSpace( builder, colorSpace ) {\n\n\t\tif ( colorSpace === WORKING_COLOR_SPACE ) {\n\n\t\t\treturn ColorManagement.workingColorSpace;\n\n\t\t} else if ( colorSpace === OUTPUT_COLOR_SPACE ) {\n\n\t\t\treturn builder.context.outputColorSpace || builder.renderer.outputColorSpace;\n\n\t\t}\n\n\t\treturn colorSpace;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { colorNode } = this;\n\n\t\tconst source = this.resolveColorSpace( builder, this.source );\n\t\tconst target = this.resolveColorSpace( builder, this.target );\n\n\t\tlet outputNode = colorNode;\n\n\t\tif ( ColorManagement.enabled === false || source === target || ! source || ! target ) {\n\n\t\t\treturn outputNode;\n\n\t\t}\n\n\t\tif ( ColorManagement.getTransfer( source ) === SRGBTransfer ) {\n\n\t\t\toutputNode = vec4( sRGBTransferEOTF( outputNode.rgb ), outputNode.a );\n\n\t\t}\n\n\t\tif ( ColorManagement.getPrimaries( source ) !== ColorManagement.getPrimaries( target ) ) {\n\n\t\t\toutputNode = vec4(\n\t\t\t\tmat3( ColorManagement._getMatrix( new Matrix3(), source, target ) ).mul( outputNode.rgb ),\n\t\t\t\toutputNode.a\n\t\t\t);\n\n\t\t}\n\n\t\tif ( ColorManagement.getTransfer( target ) === SRGBTransfer ) {\n\n\t\t\toutputNode = vec4( sRGBTransferOETF( outputNode.rgb ), outputNode.a );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default ColorSpaceNode;\n\n/**\n * TSL function for converting a given color node from the current working color space to the given color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} targetColorSpace - The target color space.\n * @returns {ColorSpaceNode}\n */\nexport const workingToColorSpace = ( node, targetColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, targetColorSpace ) );\n\n/**\n * TSL function for converting a given color node from the given color space to the current working color space.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} sourceColorSpace - The source color space.\n * @returns {ColorSpaceNode}\n */\nexport const colorSpaceToWorking = ( node, sourceColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), sourceColorSpace, WORKING_COLOR_SPACE ) );\n\n/**\n * TSL function for converting a given color node from one color space to another one.\n *\n * @tsl\n * @function\n * @param {Node} node - Represents the node to convert.\n * @param {string} sourceColorSpace - The source color space.\n * @param {string} targetColorSpace - The target color space.\n * @returns {ColorSpaceNode}\n */\nexport const convertColorSpace = ( node, sourceColorSpace, targetColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), sourceColorSpace, targetColorSpace ) );\n\naddMethodChaining( 'workingToColorSpace', workingToColorSpace );\naddMethodChaining( 'colorSpaceToWorking', colorSpaceToWorking );\n"],"mappings":"OAAOA,aAAc,6BACZC,kBAAmBC,KAAMC,WAAYC,SAAY,2BAEjDC,iBAAoB,4BACpBC,oBAAuB,uCACvBC,iBAAkBC,qBAAwB,kCAC1CC,YAAe,wBAExB,MAAMC,oBAAsB,oBACtBC,mBAAqB,mBAQ3B,MAAMC,uBAAuBZ,SAE5B,eAAWa,GAEV,MAAO,gBAER,CASA,WAAAC,CAAaC,EAAWC,EAAQC,GAE/BC,MAAO,QAOPC,KAAKJ,UAAYA,EAOjBI,KAAKH,OAASA,EAOdG,KAAKF,OAASA,CAEf,CAWA,iBAAAG,CAAmBC,EAASC,GAE3B,MA9D0B,sBA8DrBA,EAEGhB,gBAAgBiB,kBA/DC,qBAiEbD,EAEJD,EAAQG,QAAQC,kBAAoBJ,EAAQK,SAASD,iBAItDH,CAER,CAEA,KAAAK,CAAON,GAEN,MAAMN,UAAEA,GAAcI,KAEhBH,EAASG,KAAKC,kBAAmBC,EAASF,KAAKH,QAC/CC,EAASE,KAAKC,kBAAmBC,EAASF,KAAKF,QAErD,IAAIW,EAAab,EAEjB,OAAiC,IAA5BT,gBAAgBuB,SAAqBb,IAAWC,GAAYD,GAAYC,GAMxEX,gBAAgBwB,YAAad,KAAaX,eAE9CuB,EAAaxB,KAAMG,iBAAkBqB,EAAWG,KAAOH,EAAWI,IAI9D1B,gBAAgB2B,aAAcjB,KAAaV,gBAAgB2B,aAAchB,KAE7EW,EAAaxB,KACZF,KAAMI,gBAAgB4B,WAAY,IAAIzB,QAAWO,EAAQC,IAAWkB,IAAKP,EAAWG,KACpFH,EAAWI,IAKR1B,gBAAgBwB,YAAab,KAAaZ,eAE9CuB,EAAaxB,KAAMI,iBAAkBoB,EAAWG,KAAOH,EAAWI,IAI5DJ,GAzBCA,CA2BT,iBAIchB,sBAWR,MAAMwB,oBAAsB,CAAEC,EAAMC,IAAsBnC,WAAY,IAAIS,eAAgBT,WAAYkC,GAjIjF,oBAiI8GC,WAWnI,MAAMC,oBAAsB,CAAEF,EAAMG,IAAsBrC,WAAY,IAAIS,eAAgBT,WAAYkC,GAAQG,EA5IzF,6BAwJrB,MAAMC,kBAAoB,CAAEJ,EAAMG,EAAkBF,IAAsBnC,WAAY,IAAIS,eAAgBT,WAAYkC,GAAQG,EAAkBF,IAEvJrC,kBAAmB,sBAAuBmC,qBAC1CnC,kBAAmB,sBAAuBsC","ignoreList":[]}