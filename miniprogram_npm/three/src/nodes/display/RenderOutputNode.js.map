{"version":3,"file":"node_modules/three/src/nodes/display/RenderOutputNode.js","names":["TempNode","addMethodChaining","nodeObject","NoColorSpace","NoToneMapping","ColorManagement","RenderOutputNode","type","constructor","colorNode","toneMapping","outputColorSpace","super","this","isRenderOutputNode","setup","context","outputNode","color","workingColorSpace","workingToColorSpace","renderOutput"],"sources":["node_modules/three/src/nodes/display/RenderOutputNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\n\nimport { NoColorSpace, NoToneMapping } from '../../constants.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\n\n/**\n * Normally, tone mapping and color conversion happens automatically\n * before outputting pixel too the default (screen) framebuffer. In certain\n * post processing setups this happens to late because certain effects\n * require e.g. sRGB input. For such scenarios, `RenderOutputNode` can be used\n * to apply tone mapping and color space conversion at an arbitrary point\n * in the effect chain.\n *\n * When applying tone mapping and color space conversion manually with this node,\n * you have to set {@link PostProcessing#outputColorTransform} to `false`.\n *\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n * postProcessing.outputColorTransform = false;\n *\n * const scenePass = pass( scene, camera );\n * const outputPass = renderOutput( scenePass );\n *\n * postProcessing.outputNode = outputPass;\n * ```\n *\n * @augments TempNode\n */\nclass RenderOutputNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'RenderOutputNode';\n\n\t}\n\n\t/**\n\t * Constructs a new render output node.\n\t *\n\t * @param {Node} colorNode - The color node to process.\n\t * @param {?number} toneMapping - The tone mapping type.\n\t * @param {?string} outputColorSpace - The output color space.\n\t */\n\tconstructor( colorNode, toneMapping, outputColorSpace ) {\n\n\t\tsuper( 'vec4' );\n\n\t\t/**\n\t\t * The color node to process.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * The tone mapping type.\n\t\t *\n\t\t * @type {?number}\n\t\t */\n\t\tthis.toneMapping = toneMapping;\n\n\t\t/**\n\t\t * The output color space.\n\t\t *\n\t\t * @type {?string}\n\t\t */\n\t\tthis.outputColorSpace = outputColorSpace;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isRenderOutputNode = true;\n\n\t}\n\n\tsetup( { context } ) {\n\n\t\tlet outputNode = this.colorNode || context.color;\n\n\t\t// tone mapping\n\n\t\tconst toneMapping = ( this.toneMapping !== null ? this.toneMapping : context.toneMapping ) || NoToneMapping;\n\t\tconst outputColorSpace = ( this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace ) || NoColorSpace;\n\n\t\tif ( toneMapping !== NoToneMapping ) {\n\n\t\t\toutputNode = outputNode.toneMapping( toneMapping );\n\n\t\t}\n\n\t\t// working to output color space\n\n\t\tif ( outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace ) {\n\n\t\t\toutputNode = outputNode.workingToColorSpace( outputColorSpace );\n\n\t\t}\n\n\t\treturn outputNode;\n\n\t}\n\n}\n\nexport default RenderOutputNode;\n\n/**\n * TSL function for creating a posterize node.\n *\n * @tsl\n * @function\n * @param {Node} color - The color node to process.\n * @param {?number} [toneMapping=null] - The tone mapping type.\n * @param {?string} [outputColorSpace=null] - The output color space.\n * @returns {RenderOutputNode}\n */\nexport const renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );\n\naddMethodChaining( 'renderOutput', renderOutput );\n"],"mappings":"OAAOA,aAAc,6BACZC,kBAAmBC,eAAkB,2BAErCC,aAAcC,kBAAqB,4BACnCC,oBAAuB,gCAyBhC,MAAMC,yBAAyBN,SAE9B,eAAWO,GAEV,MAAO,kBAER,CASA,WAAAC,CAAaC,EAAWC,EAAaC,GAEpCC,MAAO,QAOPC,KAAKJ,UAAYA,EAOjBI,KAAKH,YAAcA,EAOnBG,KAAKF,iBAAmBA,EASxBE,KAAKC,oBAAqB,CAE3B,CAEA,KAAAC,EAAOC,QAAEA,IAER,IAAIC,EAAaJ,KAAKJ,WAAaO,EAAQE,MAI3C,MAAMR,GAAqC,OAArBG,KAAKH,YAAuBG,KAAKH,YAAcM,EAAQN,cAAiBN,cACxFO,GAA+C,OAA1BE,KAAKF,iBAA4BE,KAAKF,iBAAmBK,EAAQL,mBAAsBR,aAgBlH,OAdKO,IAAgBN,gBAEpBa,EAAaA,EAAWP,YAAaA,IAMjCC,IAAqBR,cAAgBQ,IAAqBN,gBAAgBc,oBAE9EF,EAAaA,EAAWG,oBAAqBT,IAIvCM,CAER,iBAIcX,wBAYR,MAAMe,aAAe,CAAEH,EAAOR,EAAc,KAAMC,EAAmB,OAAUT,WAAY,IAAII,iBAAkBJ,WAAYgB,GAASR,EAAaC,IAE1JV,kBAAmB,eAAgBoB","ignoreList":[]}