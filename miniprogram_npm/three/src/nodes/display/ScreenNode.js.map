{"version":3,"file":"node_modules/three/src/nodes/display/ScreenNode.js","names":["Node","NodeUpdateType","uniform","Fn","nodeImmutable","vec2","Vector2","Vector4","screenSizeVec","viewportVec","ScreenNode","type","constructor","scope","super","this","isViewportNode","getNodeType","VIEWPORT","getUpdateType","updateType","NONE","SIZE","RENDER","update","renderer","renderTarget","getRenderTarget","copy","viewport","getViewport","multiplyScalar","getPixelRatio","width","height","getDrawingBufferSize","setup","output","screenCoordinate","div","screenSize","generate","builder","COORDINATE","coord","getFragCoord","isFlipY","size","getNodeProperties","outputNode","build","getType","UV","screenUV","viewportSize","zw","viewportCoordinate","sub","xy","viewportUV","viewportResolution","console","warn","once"],"sources":["node_modules/three/src/nodes/display/ScreenNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { Fn, nodeImmutable, vec2 } from '../tsl/TSLBase.js';\n\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector4 } from '../../math/Vector4.js';\n\nlet screenSizeVec, viewportVec;\n\n/**\n * This node provides a collection of screen related metrics.\n * Depending on {@link ScreenNode#scope}, the nodes can represent\n * resolution or viewport data as well as fragment or uv coordinates.\n *\n * @augments Node\n */\nclass ScreenNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ScreenNode';\n\n\t}\n\n\t/**\n\t * Constructs a new screen node.\n\t *\n\t * @param {('coordinate'|'viewport'|'size'|'uv')} scope - The node's scope.\n\t */\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node represents different metric depending on which scope is selected.\n\t\t *\n\t\t * - `ScreenNode.COORDINATE`: Window-relative coordinates of the current fragment according to WebGPU standards.\n\t\t * - `ScreenNode.VIEWPORT`: The current viewport defined as a four-dimensional vector.\n\t\t * - `ScreenNode.SIZE`: The dimensions of the current bound framebuffer.\n\t\t * - `ScreenNode.UV`: Normalized coordinates.\n\t\t *\n\t\t * @type {('coordinate'|'viewport'|'size'|'uv')}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isViewportNode = true;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type depends on the selected scope.\n\t *\n\t * @return {('vec2'|'vec4')} The node type.\n\t */\n\tgetNodeType() {\n\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) return 'vec4';\n\t\telse return 'vec2';\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node's update type depends on the selected scope.\n\t *\n\t * @return {NodeUpdateType} The update type.\n\t */\n\tgetUpdateType() {\n\n\t\tlet updateType = NodeUpdateType.NONE;\n\n\t\tif ( this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT ) {\n\n\t\t\tupdateType = NodeUpdateType.RENDER;\n\n\t\t}\n\n\t\tthis.updateType = updateType;\n\n\t\treturn updateType;\n\n\t}\n\n\t/**\n\t * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information\n\t * from the current renderer.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( { renderer } ) {\n\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) {\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tviewportVec.copy( renderTarget.viewport );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getViewport( viewportVec );\n\n\t\t\t\tviewportVec.multiplyScalar( renderer.getPixelRatio() );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( renderTarget !== null ) {\n\n\t\t\t\tscreenSizeVec.width = renderTarget.width;\n\t\t\t\tscreenSizeVec.height = renderTarget.height;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( screenSizeVec );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tsetup( /*builder*/ ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet output = null;\n\n\t\tif ( scope === ScreenNode.SIZE ) {\n\n\t\t\toutput = uniform( screenSizeVec || ( screenSizeVec = new Vector2() ) );\n\n\t\t} else if ( scope === ScreenNode.VIEWPORT ) {\n\n\t\t\toutput = uniform( viewportVec || ( viewportVec = new Vector4() ) );\n\n\t\t} else {\n\n\t\t\toutput = vec2( screenCoordinate.div( screenSize ) );\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tif ( this.scope === ScreenNode.COORDINATE ) {\n\n\t\t\tlet coord = builder.getFragCoord();\n\n\t\t\tif ( builder.isFlipY() ) {\n\n\t\t\t\t// follow webgpu standards\n\n\t\t\t\tconst size = builder.getNodeProperties( screenSize ).outputNode.build( builder );\n\n\t\t\t\tcoord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ size }.y - ${ coord }.y )`;\n\n\t\t\t}\n\n\t\t\treturn coord;\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n}\n\nScreenNode.COORDINATE = 'coordinate';\nScreenNode.VIEWPORT = 'viewport';\nScreenNode.SIZE = 'size';\nScreenNode.UV = 'uv';\n\nexport default ScreenNode;\n\n// Screen\n\n/**\n * TSL object that represents normalized screen coordinates, unitless in `[0, 1]`.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const screenUV = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.UV );\n\n/**\n * TSL object that represents the screen resolution in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const screenSize = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.SIZE );\n\n/**\n * TSL object that represents the current `x`/`y` pixel position on the screen in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const screenCoordinate = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.COORDINATE );\n\n// Viewport\n\n/**\n * TSL object that represents the viewport rectangle as `x`, `y`, `width` and `height` in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec4>}\n */\nexport const viewport = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.VIEWPORT );\n\n/**\n * TSL object that represents the viewport resolution in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const viewportSize = viewport.zw;\n\n/**\n * TSL object that represents the current `x`/`y` pixel position on the viewport in physical pixel units.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const viewportCoordinate = /*@__PURE__*/ screenCoordinate.sub( viewport.xy );\n\n/**\n * TSL object that represents normalized viewport coordinates, unitless in `[0, 1]`.\n *\n * @tsl\n * @type {ScreenNode<vec2>}\n */\nexport const viewportUV = /*@__PURE__*/ viewportCoordinate.div( viewportSize );\n\n// Deprecated\n\n/**\n * @deprecated since r169. Use {@link screenSize} instead.\n */\nexport const viewportResolution = /*@__PURE__*/ ( Fn( () => { // @deprecated, r169\n\n\tconsole.warn( 'THREE.TSL: \"viewportResolution\" is deprecated. Use \"screenSize\" instead.' );\n\n\treturn screenSize;\n\n}, 'vec2' ).once() )();\n"],"mappings":"OAAOA,SAAU,yBACRC,mBAAsB,8BACtBC,YAAe,gCACfC,GAAIC,cAAeC,SAAY,2BAE/BC,YAAe,+BACfC,YAAe,wBAExB,IAAIC,cAAeC,YASnB,MAAMC,mBAAmBV,KAExB,eAAWW,GAEV,MAAO,YAER,CAOA,WAAAC,CAAaC,GAEZC,QAYAC,KAAKF,MAAQA,EASbE,KAAKC,gBAAiB,CAEvB,CAOA,WAAAC,GAEC,OAAKF,KAAKF,QAAUH,WAAWQ,SAAkB,OACrC,MAEb,CAOA,aAAAC,GAEC,IAAIC,EAAanB,eAAeoB,KAUhC,OARKN,KAAKF,QAAUH,WAAWY,MAAQP,KAAKF,QAAUH,WAAWQ,WAEhEE,EAAanB,eAAesB,QAI7BR,KAAKK,WAAaA,EAEXA,CAER,CAQA,MAAAI,EAAQC,SAAEA,IAET,MAAMC,EAAeD,EAASE,kBAEzBZ,KAAKF,QAAUH,WAAWQ,SAER,OAAjBQ,EAEJjB,YAAYmB,KAAMF,EAAaG,WAI/BJ,EAASK,YAAarB,aAEtBA,YAAYsB,eAAgBN,EAASO,kBAMhB,OAAjBN,GAEJlB,cAAcyB,MAAQP,EAAaO,MACnCzB,cAAc0B,OAASR,EAAaQ,QAIpCT,EAASU,qBAAsB3B,cAMlC,CAEA,KAAA4B,GAEC,MAAMvB,EAAQE,KAAKF,MAEnB,IAAIwB,EAAS,KAgBb,OAZCA,EAFIxB,IAAUH,WAAWY,KAEhBpB,QAASM,gBAAmBA,cAAgB,IAAIF,UAE9CO,IAAUH,WAAWQ,SAEvBhB,QAASO,cAAiBA,YAAc,IAAIF,UAI5CF,KAAMiC,iBAAiBC,IAAKC,aAI/BH,CAER,CAEA,QAAAI,CAAUC,GAET,GAAK3B,KAAKF,QAAUH,WAAWiC,WAAa,CAE3C,IAAIC,EAAQF,EAAQG,eAEpB,GAAKH,EAAQI,UAAY,CAIxB,MAAMC,EAAOL,EAAQM,kBAAmBR,YAAaS,WAAWC,MAAOR,GAEvEE,EAAQ,GAAIF,EAAQS,QAAS,YAAeP,QAAcG,SAAcH,OAEzE,CAEA,OAAOA,CAER,CAEA,OAAO9B,MAAM2B,SAAUC,EAExB,EAIDhC,WAAWiC,WAAa,aACxBjC,WAAWQ,SAAW,WACtBR,WAAWY,KAAO,OAClBZ,WAAW0C,GAAK,oBAED1C,kBAUR,MAAM2C,SAAyBjD,cAAeM,WAAYA,WAAW0C,WAQrE,MAAMZ,WAA2BpC,cAAeM,WAAYA,WAAWY,aAQvE,MAAMgB,iBAAiClC,cAAeM,WAAYA,WAAWiC,mBAU7E,MAAMd,SAAyBzB,cAAeM,WAAYA,WAAWQ,iBAQrE,MAAMoC,aAAezB,SAAS0B,UAQ9B,MAAMC,mBAAmClB,iBAAiBmB,IAAK5B,SAAS6B,WAQxE,MAAMC,WAA2BH,mBAAmBjB,IAAKe,qBAOzD,MAAMM,mBAAqCzD,IAAI,KAErD0D,QAAQC,KAAM,4EAEPtB,aAEL,QAASuB,MANoC","ignoreList":[]}