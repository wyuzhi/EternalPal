{"version":3,"file":"node_modules/three/src/nodes/display/ToneMappingFunctions.js","names":["Fn","float","mat3","vec3","If","select","clamp","log2","max","min","pow","mix","mul","sub","div","linearToneMapping","color","exposure","setLayout","name","type","inputs","reinhardToneMapping","add","cineonToneMapping","a","b","RRTAndODTFit","acesFilmicToneMapping","ACESInputMat","ACESOutputMat","LINEAR_REC2020_TO_LINEAR_SRGB","LINEAR_SRGB_TO_LINEAR_REC2020","agxDefaultContrastApprox","x_immutable","x","toVar","x2","x4","agxToneMapping","colortone","AgXInsetMatrix","AgXOutsetMatrix","AgxMinEv","AgxMaxEv","mulAssign","assign","neutralToneMapping","StartCompression","Desaturation","r","g","offset","lessThan","subAssign","peak","d","newPeak"],"sources":["node_modules/three/src/nodes/display/ToneMappingFunctions.js"],"sourcesContent":["import { Fn, float, mat3, vec3, If } from '../tsl/TSLBase.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { clamp, log2, max, min, pow, mix } from '../math/MathNode.js';\nimport { mul, sub, div } from '../math/OperatorNode.js';\n\n/**\n * Linear tone mapping, exposure only.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\treturn color.mul( exposure ).clamp();\n\n} ).setLayout( {\n\tname: 'linearToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Reinhard tone mapping.\n *\n * Reference: {@link https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tcolor = color.mul( exposure );\n\n\treturn color.div( color.add( 1.0 ) ).clamp();\n\n} ).setLayout( {\n\tname: 'reinhardToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Cineon tone mapping.\n *\n * Reference: {@link http://filmicworlds.com/blog/filmic-tonemapping-operators/}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor = color.mul( exposure );\n\tcolor = color.sub( 0.004 ).max( 0.0 );\n\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\n\n\treturn a.div( b ).pow( 2.2 );\n\n} ).setLayout( {\n\tname: 'cineonToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\n\nconst RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {\n\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\n\n\treturn a.div( b );\n\n} );\n\n/**\n * ACESFilmic tone mapping.\n *\n * Reference: {@link https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst ACESInputMat = mat3(\n\t\t0.59719, 0.35458, 0.04823,\n\t\t0.07600, 0.90834, 0.01566,\n\t\t0.02840, 0.13383, 0.83777\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst ACESOutputMat = mat3(\n\t\t1.60475, - 0.53108, - 0.07367,\n\t\t- 0.10208, 1.10813, - 0.00605,\n\t\t- 0.00327, - 0.07276, 1.07602\n\t);\n\n\tcolor = color.mul( exposure ).div( 0.6 );\n\n\tcolor = ACESInputMat.mul( color );\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat.mul( color );\n\n\t// Clamp to [0, 1]\n\treturn color.clamp();\n\n} ).setLayout( {\n\tname: 'acesFilmicToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\nconst LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\n\nconst agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = vec3( x_immutable ).toVar();\n\tconst x2 = vec3( x.mul( x ) ).toVar();\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\n\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\n\n} );\n\n/**\n * AgX tone mapping.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst colortone = vec3( color ).toVar();\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\n\tconst AgxMinEv = float( - 12.47393 );\n\tconst AgxMaxEv = float( 4.026069 );\n\tcolortone.mulAssign( exposure );\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\n\tcolortone.assign( max( colortone, 1e-10 ) );\n\tcolortone.assign( log2( colortone ) );\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\n\n\treturn colortone;\n\n} ).setLayout( {\n\tname: 'agxToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n\n/**\n * Neutral tone mapping.\n *\n * Reference: {@link https://modelviewer.dev/examples/tone-mapping}\n *\n * @tsl\n * @function\n * @param {Node<vec3>} color - The color that should be tone mapped.\n * @param {Node<float>} exposure - The exposure.\n * @return {Node<vec3>} The tone mapped color.\n */\nexport const neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\n\n\tconst StartCompression = float( 0.8 - 0.04 );\n\tconst Desaturation = float( 0.15 );\n\n\tcolor = color.mul( exposure );\n\n\tconst x = min( color.r, min( color.g, color.b ) );\n\tconst offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\n\n\tcolor.subAssign( offset );\n\n\tconst peak = max( color.r, max( color.g, color.b ) );\n\n\tIf( peak.lessThan( StartCompression ), () => {\n\n\t\treturn color;\n\n\t} );\n\n\tconst d = sub( 1, StartCompression );\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\n\tcolor.mulAssign( newPeak.div( peak ) );\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\n\n\treturn mix( color, vec3( newPeak ), g );\n\n} ).setLayout( {\n\tname: 'neutralToneMapping',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'color', type: 'vec3' },\n\t\t{ name: 'exposure', type: 'float' }\n\t]\n} );\n"],"mappings":"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","ignoreList":[]}