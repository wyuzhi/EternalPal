{"version":3,"file":"node_modules/three/src/nodes/display/ToonOutlinePassNode.js","names":["float","nodeObject","normalize","vec4","Color","NodeMaterial","cameraProjectionMatrix","modelViewMatrix","positionLocal","normalLocal","BackSide","PassNode","ToonOutlinePassNode","type","constructor","scene","camera","colorNode","thicknessNode","alphaNode","super","COLOR","this","_materialCache","WeakMap","updateBefore","frame","renderer","currentRenderObjectFunction","getRenderObjectFunction","setRenderObjectFunction","object","geometry","material","group","lightsNode","clippingContext","isMeshToonMaterial","isMeshToonNodeMaterial","wireframe","outlineMaterial","_getOutlineMaterial","renderObject","_createMaterial","isMeshToonOutlineMaterial","name","side","outlineNormal","negate","mvp","mul","ratio","pos","pos2","add","norm","sub","vertexNode","w","originalMaterial","get","undefined","set","toonOutlinePass","color","thickness","alpha"],"sources":["node_modules/three/src/nodes/display/ToonOutlinePassNode.js"],"sourcesContent":["import { float, nodeObject, normalize, vec4 } from '../tsl/TSLBase.js';\nimport { Color } from '../../math/Color.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport { cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\nimport { modelViewMatrix } from '../../nodes/accessors/ModelNode.js';\nimport { positionLocal } from '../../nodes/accessors/Position.js';\nimport { normalLocal } from '../../nodes/accessors/Normal.js';\nimport { BackSide } from '../../constants.js';\nimport PassNode from './PassNode.js';\n\n/**\n * Represents a render pass for producing a toon outline effect on compatible objects.\n * Only 3D objects with materials of type `MeshToonMaterial` and `MeshToonNodeMaterial`\n * will receive the outline.\n *\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n *\n * const scenePass = toonOutlinePass( scene, camera );\n *\n * postProcessing.outputNode = scenePass;\n * ```\n * @augments PassNode\n */\nclass ToonOutlinePassNode extends PassNode {\n\n\tstatic get type() {\n\n\t\treturn 'ToonOutlinePassNode';\n\n\t}\n\n\t/**\n\t * Constructs a new outline pass node.\n\t *\n\t * @param {Scene} scene - A reference to the scene.\n\t * @param {Camera} camera - A reference to the camera.\n\t * @param {Node} colorNode - Defines the outline's color.\n\t * @param {Node} thicknessNode - Defines the outline's thickness.\n\t * @param {Node} alphaNode - Defines the outline's alpha.\n\t */\n\tconstructor( scene, camera, colorNode, thicknessNode, alphaNode ) {\n\n\t\tsuper( PassNode.COLOR, scene, camera );\n\n\t\t/**\n\t\t * Defines the outline's color.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.colorNode = colorNode;\n\n\t\t/**\n\t\t * Defines the outline's thickness.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.thicknessNode = thicknessNode;\n\n\t\t/**\n\t\t * Defines the outline's alpha.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.alphaNode = alphaNode;\n\n\t\t/**\n\t\t * An internal material cache.\n\t\t *\n\t\t * @private\n\t\t * @type {WeakMap<Material, NodeMaterial>}\n\t\t */\n\t\tthis._materialCache = new WeakMap();\n\n\t}\n\n\tupdateBefore( frame ) {\n\n\t\tconst { renderer } = frame;\n\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\n\n\t\trenderer.setRenderObjectFunction( ( object, scene, camera, geometry, material, group, lightsNode, clippingContext ) => {\n\n\t\t\t// only render outline for supported materials\n\n\t\t\tif ( material.isMeshToonMaterial || material.isMeshToonNodeMaterial ) {\n\n\t\t\t\tif ( material.wireframe === false ) {\n\n\t\t\t\t\tconst outlineMaterial = this._getOutlineMaterial( material );\n\t\t\t\t\trenderer.renderObject( object, scene, camera, geometry, outlineMaterial, group, lightsNode, clippingContext );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// default\n\n\t\t\trenderer.renderObject( object, scene, camera, geometry, material, group, lightsNode, clippingContext );\n\n\t\t} );\n\n\t\tsuper.updateBefore( frame );\n\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\n\n\t}\n\n\t/**\n\t * Creates the material used for outline rendering.\n\t *\n\t * @private\n\t * @return {NodeMaterial} The outline material.\n\t */\n\t_createMaterial() {\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.isMeshToonOutlineMaterial = true;\n\t\tmaterial.name = 'Toon_Outline';\n\t\tmaterial.side = BackSide;\n\n\t\t// vertex node\n\n\t\tconst outlineNormal = normalLocal.negate();\n\t\tconst mvp = cameraProjectionMatrix.mul( modelViewMatrix );\n\n\t\tconst ratio = float( 1.0 ); // TODO: support outline thickness ratio for each vertex\n\t\tconst pos = mvp.mul( vec4( positionLocal, 1.0 ) );\n\t\tconst pos2 = mvp.mul( vec4( positionLocal.add( outlineNormal ), 1.0 ) );\n\t\tconst norm = normalize( pos.sub( pos2 ) ); // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n\n\t\tmaterial.vertexNode = pos.add( norm.mul( this.thicknessNode ).mul( pos.w ).mul( ratio ) );\n\n\t\t// color node\n\n\t\tmaterial.colorNode = vec4( this.colorNode, this.alphaNode );\n\n\t\treturn material;\n\n\t}\n\n\t/**\n\t * For the given toon material, this method returns a corresponding\n\t * outline material.\n\t *\n\t * @private\n\t * @param {(MeshToonMaterial|MeshToonNodeMaterial)} originalMaterial - The toon material.\n\t * @return {NodeMaterial} The outline material.\n\t */\n\t_getOutlineMaterial( originalMaterial ) {\n\n\t\tlet outlineMaterial = this._materialCache.get( originalMaterial );\n\n\t\tif ( outlineMaterial === undefined ) {\n\n\t\t\toutlineMaterial = this._createMaterial();\n\n\t\t\tthis._materialCache.set( originalMaterial, outlineMaterial );\n\n\t\t}\n\n\t\treturn outlineMaterial;\n\n\t}\n\n}\n\nexport default ToonOutlinePassNode;\n\n/**\n * TSL function for creating a toon outline pass node.\n *\n * @tsl\n * @function\n * @param {Scene} scene - A reference to the scene.\n * @param {Camera} camera - A reference to the camera.\n * @param {Color} color - Defines the outline's color.\n * @param {number} [thickness=0.003] - Defines the outline's thickness.\n * @param {number} [alpha=1] - Defines the outline's alpha.\n * @returns {ToonOutlinePassNode}\n */\nexport const toonOutlinePass = ( scene, camera, color = new Color( 0, 0, 0 ), thickness = 0.003, alpha = 1 ) => nodeObject( new ToonOutlinePassNode( scene, camera, nodeObject( color ), nodeObject( thickness ), nodeObject( alpha ) ) );\n"],"mappings":"OAASA,MAAOC,WAAYC,UAAWC,SAAY,2BAC1CC,UAAa,6BACfC,iBAAkB,+CAChBC,2BAA8B,yCAC9BC,oBAAuB,4CACvBC,kBAAqB,2CACrBC,gBAAmB,yCACnBC,aAAgB,4BAClBC,aAAc,gBAgBrB,MAAMC,4BAA4BD,SAEjC,eAAWE,GAEV,MAAO,qBAER,CAWA,WAAAC,CAAaC,EAAOC,EAAQC,EAAWC,EAAeC,GAErDC,MAAOT,SAASU,MAAON,EAAOC,GAO9BM,KAAKL,UAAYA,EAOjBK,KAAKJ,cAAgBA,EAOrBI,KAAKH,UAAYA,EAQjBG,KAAKC,eAAiB,IAAIC,OAE3B,CAEA,YAAAC,CAAcC,GAEb,MAAMC,SAAEA,GAAaD,EAEfE,EAA8BD,EAASE,0BAE7CF,EAASG,yBAAyB,CAAEC,EAAQhB,EAAOC,EAAQgB,EAAUC,EAAUC,EAAOC,EAAYC,KAIjG,IAAKH,EAASI,oBAAsBJ,EAASK,0BAEhB,IAAvBL,EAASM,UAAsB,CAEnC,MAAMC,EAAkBlB,KAAKmB,oBAAqBR,GAClDN,EAASe,aAAcX,EAAQhB,EAAOC,EAAQgB,EAAUQ,EAAiBN,EAAOC,EAAYC,EAE7F,CAMDT,EAASe,aAAcX,EAAQhB,EAAOC,EAAQgB,EAAUC,EAAUC,EAAOC,EAAYC,EAAiB,IAIvGhB,MAAMK,aAAcC,GAEpBC,EAASG,wBAAyBF,EAEnC,CAQA,eAAAe,GAEC,MAAMV,EAAW,IAAI5B,aACrB4B,EAASW,2BAA4B,EACrCX,EAASY,KAAO,eAChBZ,EAASa,KAAOpC,SAIhB,MAAMqC,EAAgBtC,YAAYuC,SAC5BC,EAAM3C,uBAAuB4C,IAAK3C,iBAElC4C,EAAQnD,MAAO,GACfoD,EAAMH,EAAIC,IAAK/C,KAAMK,cAAe,IACpC6C,EAAOJ,EAAIC,IAAK/C,KAAMK,cAAc8C,IAAKP,GAAiB,IAC1DQ,EAAOrD,UAAWkD,EAAII,IAAKH,IAQjC,OANApB,EAASwB,WAAaL,EAAIE,IAAKC,EAAKL,IAAK5B,KAAKJ,eAAgBgC,IAAKE,EAAIM,GAAIR,IAAKC,IAIhFlB,EAAShB,UAAYd,KAAMmB,KAAKL,UAAWK,KAAKH,WAEzCc,CAER,CAUA,mBAAAQ,CAAqBkB,GAEpB,IAAInB,EAAkBlB,KAAKC,eAAeqC,IAAKD,GAU/C,YARyBE,IAApBrB,IAEJA,EAAkBlB,KAAKqB,kBAEvBrB,KAAKC,eAAeuC,IAAKH,EAAkBnB,IAIrCA,CAER,iBAIc5B,2BAcR,MAAMmD,gBAAkB,CAAEhD,EAAOC,EAAQgD,EAAQ,IAAI5D,MAAO,EAAG,EAAG,GAAK6D,EAAY,KAAOC,EAAQ,IAAOjE,WAAY,IAAIW,oBAAqBG,EAAOC,EAAQf,WAAY+D,GAAS/D,WAAYgE,GAAahE,WAAYiE","ignoreList":[]}