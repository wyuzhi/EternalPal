import Node from"../core/Node.js";import{float,log,log2,nodeImmutable,nodeProxy}from"../tsl/TSLBase.js";import{cameraNear,cameraFar}from"../accessors/Camera.js";import{positionView}from"../accessors/Position.js";import{viewportDepthTexture}from"./ViewportDepthTextureNode.js";class ViewportDepthNode extends Node{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===ViewportDepthNode.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,o=this.valueNode;let r=null;if(t===ViewportDepthNode.DEPTH_BASE)null!==o&&(r=depthBase().assign(o));else if(t===ViewportDepthNode.DEPTH)r=e.isPerspectiveCamera?viewZToPerspectiveDepth(positionView.z,cameraNear,cameraFar):viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);else if(t===ViewportDepthNode.LINEAR_DEPTH)if(null!==o)if(e.isPerspectiveCamera){const e=perspectiveDepthToViewZ(o,cameraNear,cameraFar);r=viewZToOrthographicDepth(e,cameraNear,cameraFar)}else r=o;else r=viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);return r}}ViewportDepthNode.DEPTH_BASE="depthBase",ViewportDepthNode.DEPTH="depth",ViewportDepthNode.LINEAR_DEPTH="linearDepth";export default ViewportDepthNode;export const viewZToOrthographicDepth=(e,t,o)=>e.add(t).div(t.sub(o));export const orthographicDepthToViewZ=(e,t,o)=>t.sub(o).mul(e).sub(t);export const viewZToPerspectiveDepth=(e,t,o)=>t.add(e).mul(o).div(o.sub(t).mul(e));export const perspectiveDepthToViewZ=(e,t,o)=>t.mul(o).div(o.sub(t).mul(e).sub(o));export const viewZToLogarithmicDepth=(e,t,o)=>{t=t.max(1e-6).toVar();const r=log2(e.negate().div(t)),p=log2(o.div(t));return r.div(p)};export const logarithmicDepthToViewZ=(e,t,o)=>{const r=e.mul(log(o.div(t)));return float(Math.E).pow(r).mul(t).negate()};const depthBase=nodeProxy(ViewportDepthNode,ViewportDepthNode.DEPTH_BASE);export const depth=nodeImmutable(ViewportDepthNode,ViewportDepthNode.DEPTH);export const linearDepth=nodeProxy(ViewportDepthNode,ViewportDepthNode.LINEAR_DEPTH).setParameterLength(0,1);export const viewportLinearDepth=linearDepth(viewportDepthTexture());depth.assign=e=>depthBase(e);
//# sourceMappingURL=ViewportDepthNode.js.map