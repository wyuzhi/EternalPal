import F_Schlick from"./F_Schlick.js";import V_GGX_SmithCorrelated from"./V_GGX_SmithCorrelated.js";import V_GGX_SmithCorrelated_Anisotropic from"./V_GGX_SmithCorrelated_Anisotropic.js";import D_GGX from"./D_GGX.js";import D_GGX_Anisotropic from"./D_GGX_Anisotropic.js";import{normalView as NormalView}from"../../accessors/Normal.js";import{positionViewDirection}from"../../accessors/Position.js";import{iridescence,alphaT,anisotropyT,anisotropyB}from"../../core/PropertyNode.js";import{Fn,defined}from"../../tsl/TSLBase.js";const BRDF_GGX=Fn((({lightDirection:o,f0:i,f90:t,roughness:r,f:e,normalView:a=NormalView,USE_IRIDESCENCE:s,USE_ANISOTROPY:p})=>{const n=r.pow2(),d=o.add(positionViewDirection).normalize(),m=a.dot(o).clamp(),c=a.dot(positionViewDirection).clamp(),l=a.dot(d).clamp(),_=positionViewDirection.dot(d).clamp();let G,V,h=F_Schlick({f0:i,f90:t,dotVH:_});if(defined(s)&&(h=iridescence.mix(h,e)),defined(p)){const i=anisotropyT.dot(o),t=anisotropyT.dot(positionViewDirection),r=anisotropyT.dot(d),e=anisotropyB.dot(o),a=anisotropyB.dot(positionViewDirection),s=anisotropyB.dot(d);G=V_GGX_SmithCorrelated_Anisotropic({alphaT:alphaT,alphaB:n,dotTV:t,dotBV:a,dotTL:i,dotBL:e,dotNV:c,dotNL:m}),V=D_GGX_Anisotropic({alphaT:alphaT,alphaB:n,dotNH:l,dotTH:r,dotBH:s})}else G=V_GGX_SmithCorrelated({alpha:n,dotNL:m,dotNV:c}),V=D_GGX({alpha:n,dotNH:l});return h.mul(G).mul(V)}));export default BRDF_GGX;
//# sourceMappingURL=BRDF_GGX.js.map