{"version":3,"file":"node_modules/three/src/nodes/functions/BSDF/BRDF_GGX.js","names":["F_Schlick","V_GGX_SmithCorrelated","V_GGX_SmithCorrelated_Anisotropic","D_GGX","D_GGX_Anisotropic","NormalView","positionViewDirection","iridescence","alphaT","anisotropyT","anisotropyB","Fn","defined","BRDF_GGX","lightDirection","f0","f90","roughness","f","normalView","USE_IRIDESCENCE","USE_ANISOTROPY","alpha","pow2","halfDir","add","normalize","dotNL","dot","clamp","dotNV","dotNH","dotVH","V","D","F","mix","dotTL","dotTV","dotTH","dotBL","dotBV","dotBH","alphaB","mul"],"sources":["node_modules/three/src/nodes/functions/BSDF/BRDF_GGX.js"],"sourcesContent":["import F_Schlick from './F_Schlick.js';\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\nimport D_GGX from './D_GGX.js';\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\nimport { normalView as NormalView } from '../../accessors/Normal.js';\nimport { positionViewDirection } from '../../accessors/Position.js';\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\nimport { Fn, defined } from '../../tsl/TSLBase.js';\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nconst BRDF_GGX = /*@__PURE__*/ Fn( ( { lightDirection, f0, f90, roughness, f, normalView = NormalView, USE_IRIDESCENCE, USE_ANISOTROPY } ) => {\n\n\tconst alpha = roughness.pow2(); // UE4's roughness\n\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\n\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\tconst dotNH = normalView.dot( halfDir ).clamp();\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\n\n\tlet F = F_Schlick( { f0, f90, dotVH } );\n\tlet V, D;\n\n\tif ( defined( USE_IRIDESCENCE ) ) {\n\n\t\tF = iridescence.mix( F, f );\n\n\t}\n\n\tif ( defined( USE_ANISOTROPY ) ) {\n\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\n\t\tconst dotTH = anisotropyT.dot( halfDir );\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\n\t\tconst dotBH = anisotropyB.dot( halfDir );\n\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\n\n\t} else {\n\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\n\t\tD = D_GGX( { alpha, dotNH } );\n\n\t}\n\n\treturn F.mul( V ).mul( D );\n\n} ); // validated\n\nexport default BRDF_GGX;\n"],"mappings":"OAAOA,cAAe,wBACfC,0BAA2B,oCAC3BC,sCAAuC,gDACvCC,UAAW,oBACXC,sBAAuB,8CACPC,eAAkB,mCAChCC,0BAA6B,qCAC7BC,YAAaC,OAAQC,YAAaC,gBAAmB,oCACrDC,GAAIC,YAAe,uBAG5B,MAAMC,SAAyBF,IAAI,EAAIG,iBAAgBC,KAAIC,MAAKC,YAAWC,IAAGC,aAAad,WAAYe,kBAAiBC,qBAEvH,MAAMC,EAAQL,EAAUM,OAElBC,EAAUV,EAAeW,IAAKnB,uBAAwBoB,YAEtDC,EAAQR,EAAWS,IAAKd,GAAiBe,QACzCC,EAAQX,EAAWS,IAAKtB,uBAAwBuB,QAChDE,EAAQZ,EAAWS,IAAKJ,GAAUK,QAClCG,EAAQ1B,sBAAsBsB,IAAKJ,GAAUK,QAEnD,IACII,EAAGC,EADHC,EAAInC,UAAW,CAAEe,KAAIC,MAAKgB,UAS9B,GANKpB,QAASQ,KAEbe,EAAI5B,YAAY6B,IAAKD,EAAGjB,IAIpBN,QAASS,GAAmB,CAEhC,MAAMgB,EAAQ5B,YAAYmB,IAAKd,GACzBwB,EAAQ7B,YAAYmB,IAAKtB,uBACzBiC,EAAQ9B,YAAYmB,IAAKJ,GACzBgB,EAAQ9B,YAAYkB,IAAKd,GACzB2B,EAAQ/B,YAAYkB,IAAKtB,uBACzBoC,EAAQhC,YAAYkB,IAAKJ,GAE/BS,EAAI/B,kCAAmC,CAAEM,cAAQmC,OAAQrB,EAAOgB,QAAOG,QAAOJ,QAAOG,QAAOV,QAAOH,UACnGO,EAAI9B,kBAAmB,CAAEI,cAAQmC,OAAQrB,EAAOS,QAAOQ,QAAOG,SAE/D,MAECT,EAAIhC,sBAAuB,CAAEqB,QAAOK,QAAOG,UAC3CI,EAAI/B,MAAO,CAAEmB,QAAOS,UAIrB,OAAOI,EAAES,IAAKX,GAAIW,IAAKV,EAAG,mBAIZrB","ignoreList":[]}