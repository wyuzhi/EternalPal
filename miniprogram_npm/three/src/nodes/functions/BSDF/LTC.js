import{Fn,If,mat3,vec2,vec3}from"../../tsl/TSLBase.js";import{max}from"../../math/MathNode.js";const LTC_Uv=Fn((({N:e,V:t,roughness:a})=>{const o=e.dot(t).saturate(),r=vec2(a,o.oneMinus().sqrt());return r.assign(r.mul(.984375).add(.0078125)),r})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),LTC_ClippedSphereFormFactor=Fn((({f:e})=>{const t=e.length();return max(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),LTC_EdgeVectorFormFactor=Fn((({v1:e,v2:t})=>{const a=e.dot(t),o=a.abs().toVar(),r=o.mul(.0145206).add(.4965155).mul(o).add(.8543985).toVar(),n=o.add(4.1616724).mul(o).add(3.417594).toVar(),s=r.div(n),m=a.greaterThan(0).select(s,max(a.mul(a).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(s));return e.cross(t).mul(m)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),LTC_Evaluate=Fn((({N:e,V:t,P:a,mInv:o,p0:r,p1:n,p2:s,p3:m})=>{const c=n.sub(r).toVar(),v=m.sub(r).toVar(),p=c.cross(v),u=vec3().toVar();return If(p.dot(a.sub(r)).greaterThanEqual(0),(()=>{const c=t.sub(e.mul(t.dot(e))).normalize(),v=e.cross(c).negate(),p=o.mul(mat3(c,v,e).transpose()).toVar(),d=p.mul(r.sub(a)).normalize().toVar(),l=p.mul(n.sub(a)).normalize().toVar(),i=p.mul(s.sub(a)).normalize().toVar(),V=p.mul(m.sub(a)).normalize().toVar(),F=vec3(0).toVar();F.addAssign(LTC_EdgeVectorFormFactor({v1:d,v2:l})),F.addAssign(LTC_EdgeVectorFormFactor({v1:l,v2:i})),F.addAssign(LTC_EdgeVectorFormFactor({v1:i,v2:V})),F.addAssign(LTC_EdgeVectorFormFactor({v1:V,v2:d})),u.assign(vec3(LTC_ClippedSphereFormFactor({f:F})))})),u})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),LTC_Evaluate_Volume=Fn((({P:e,p0:t,p1:a,p2:o,p3:r})=>{const n=a.sub(t).toVar(),s=r.sub(t).toVar(),m=n.cross(s),c=vec3().toVar();return If(m.dot(e.sub(t)).greaterThanEqual(0),(()=>{const n=t.sub(e).normalize().toVar(),s=a.sub(e).normalize().toVar(),m=o.sub(e).normalize().toVar(),v=r.sub(e).normalize().toVar(),p=vec3(0).toVar();p.addAssign(LTC_EdgeVectorFormFactor({v1:n,v2:s})),p.addAssign(LTC_EdgeVectorFormFactor({v1:s,v2:m})),p.addAssign(LTC_EdgeVectorFormFactor({v1:m,v2:v})),p.addAssign(LTC_EdgeVectorFormFactor({v1:v,v2:n})),c.assign(vec3(LTC_ClippedSphereFormFactor({f:p.abs()})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]});export{LTC_Evaluate,LTC_Evaluate_Volume,LTC_Uv};
//# sourceMappingURL=LTC.js.map