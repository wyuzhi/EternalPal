{"version":3,"file":"node_modules/three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js","names":["div","EPSILON","Fn","V_GGX_SmithCorrelated","alpha","dotNL","dotNV","a2","pow2","gv","mul","add","oneMinus","sqrt","gl","max","setLayout","name","type","inputs"],"sources":["node_modules/three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js"],"sourcesContent":["import { div } from '../../math/OperatorNode.js';\nimport { EPSILON } from '../../math/MathNode.js';\nimport { Fn } from '../../tsl/TSLBase.js';\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nconst V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {\n\n\tconst a2 = alpha.pow2();\n\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\n\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\n\n} ).setLayout( {\n\tname: 'V_GGX_SmithCorrelated',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'alpha', type: 'float' },\n\t\t{ name: 'dotNL', type: 'float' },\n\t\t{ name: 'dotNV', type: 'float' }\n\t]\n} ); // validated\n\nexport default V_GGX_SmithCorrelated;\n"],"mappings":"OAASA,QAAW,oCACXC,YAAe,gCACfC,OAAU,uBAInB,MAAMC,sBAAsCD,IAAI,EAAIE,QAAOC,QAAOC,YAEjE,MAAMC,EAAKH,EAAMI,OAEXC,EAAKJ,EAAMK,IAAKH,EAAGI,IAAKJ,EAAGK,WAAWF,IAAKJ,EAAME,SAAWK,QAC5DC,EAAKR,EAAMI,IAAKH,EAAGI,IAAKJ,EAAGK,WAAWF,IAAKL,EAAMG,SAAWK,QAElE,OAAOb,IAAK,GAAKS,EAAGE,IAAKG,GAAKC,IAAKd,SAAW,IAE3Ce,UAAW,CACdC,KAAM,wBACNC,KAAM,QACNC,OAAQ,CACP,CAAEF,KAAM,QAASC,KAAM,SACvB,CAAED,KAAM,QAASC,KAAM,SACvB,CAAED,KAAM,QAASC,KAAM,2BAIVf","ignoreList":[]}