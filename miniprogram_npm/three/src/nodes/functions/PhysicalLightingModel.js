import BRDF_Lambert from"./BSDF/BRDF_Lambert.js";import BRDF_GGX from"./BSDF/BRDF_GGX.js";import DFGApprox from"./BSDF/DFGApprox.js";import EnvironmentBRDF from"./BSDF/EnvironmentBRDF.js";import F_Schlick from"./BSDF/F_Schlick.js";import Schlick_to_F0 from"./BSDF/Schlick_to_F0.js";import BRDF_Sheen from"./BSDF/BRDF_Sheen.js";import{LTC_Evaluate,LTC_Uv}from"./BSDF/LTC.js";import LightingModel from"../core/LightingModel.js";import{diffuseColor,specularColor,specularF90,roughness,clearcoat,clearcoatRoughness,sheen,sheenRoughness,iridescence,iridescenceIOR,iridescenceThickness,ior,thickness,transmission,attenuationDistance,attenuationColor,dispersion}from"../core/PropertyNode.js";import{normalView,clearcoatNormalView,normalWorld}from"../accessors/Normal.js";import{positionViewDirection,positionView,positionWorld}from"../accessors/Position.js";import{Fn,float,vec2,vec3,vec4,mat3,If}from"../tsl/TSLBase.js";import{select}from"../math/ConditionalNode.js";import{mix,normalize,refract,length,clamp,log2,log,exp,smoothstep}from"../math/MathNode.js";import{div}from"../math/OperatorNode.js";import{cameraPosition,cameraProjectionMatrix,cameraViewMatrix}from"../accessors/Camera.js";import{modelWorldMatrix}from"../accessors/ModelNode.js";import{screenSize}from"../display/ScreenNode.js";import{viewportMipTexture}from"../display/ViewportTextureNode.js";import{textureBicubicLevel}from"../accessors/TextureBicubic.js";import{Loop}from"../utils/LoopNode.js";import{BackSide}from"../../constants.js";const getVolumeTransmissionRay=Fn((([e,t,i,s,o])=>{const a=vec3(refract(t.negate(),normalize(e),div(1,s))),r=vec3(length(o[0].xyz),length(o[1].xyz),length(o[2].xyz));return normalize(a).mul(i.mul(r))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),applyIorToRoughness=Fn((([e,t])=>e.mul(clamp(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),viewportBackSideTexture=viewportMipTexture(),viewportFrontSideTexture=viewportMipTexture(),getTransmissionSample=Fn((([e,t,i],{material:s})=>{const o=(s.side===BackSide?viewportBackSideTexture:viewportFrontSideTexture).sample(e),a=log2(screenSize.x).mul(applyIorToRoughness(t,i));return textureBicubicLevel(o,a)})),volumeAttenuation=Fn((([e,t,i])=>(If(i.notEqual(0),(()=>{const s=log(t).negate().div(i);return exp(s.negate().mul(e))})),vec3(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),getIBLVolumeRefraction=Fn((([e,t,i,s,o,a,r,n,c,l,u,m,d,p,h])=>{let f,g;if(h){f=vec4().toVar(),g=vec3().toVar();const o=u.sub(1).mul(h.mul(.025)),a=vec3(u.sub(o),u,u.add(o));Loop({start:0,end:3},(({i:o})=>{const u=a.element(o),h=getVolumeTransmissionRay(e,t,m,u,n),v=r.add(h),F=l.mul(c.mul(vec4(v,1))),S=vec2(F.xy.div(F.w)).toVar();S.addAssign(1),S.divAssign(2),S.assign(vec2(S.x,S.y.oneMinus()));const D=getTransmissionSample(S,i,u);f.element(o).assign(D.element(o)),f.a.addAssign(D.a),g.element(o).assign(s.element(o).mul(volumeAttenuation(length(h),d,p).element(o)))})),f.a.divAssign(3)}else{const o=getVolumeTransmissionRay(e,t,m,u,n),a=r.add(o),h=l.mul(c.mul(vec4(a,1))),v=vec2(h.xy.div(h.w)).toVar();v.addAssign(1),v.divAssign(2),v.assign(vec2(v.x,v.y.oneMinus())),f=getTransmissionSample(v,i,u),g=s.mul(volumeAttenuation(length(o),d,p))}const v=g.rgb.mul(f.rgb),F=e.dot(t).clamp(),S=vec3(EnvironmentBRDF({dotNV:F,specularColor:o,specularF90:a,roughness:i})),D=g.r.add(g.g,g.b).div(3);return vec4(S.oneMinus().mul(v),f.a.oneMinus().mul(D).oneMinus())})),XYZ_TO_REC709=mat3(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),Fresnel0ToIor=e=>{const t=e.sqrt();return vec3(1).add(t).div(vec3(1).sub(t))},IorToFresnel0=(e,t)=>e.sub(t).div(e.add(t)).pow2(),evalSensitivity=(e,t)=>{const i=e.mul(2*Math.PI*1e-9),s=vec3(54856e-17,44201e-17,52481e-17),o=vec3(1681e3,1795300,2208400),a=vec3(43278e5,93046e5,66121e5),r=float(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(i.mul(2239900).add(t.x).cos()).mul(i.pow2().mul(-45282e5).exp());let n=s.mul(a.mul(2*Math.PI).sqrt()).mul(o.mul(i).add(t).cos()).mul(i.pow2().negate().mul(a).exp());n=vec3(n.x.add(r),n.y,n.z).div(1.0685e-7);return XYZ_TO_REC709.mul(n)},evalIridescence=Fn((({outsideIOR:e,eta2:t,cosTheta1:i,thinFilmThickness:s,baseF0:o})=>{const a=mix(e,t,smoothstep(0,.03,s)),r=e.div(a).pow2().mul(i.pow2().oneMinus()).oneMinus();If(r.lessThan(0),(()=>vec3(1)));const n=r.sqrt(),c=IorToFresnel0(a,e),l=F_Schlick({f0:c,f90:1,dotVH:i}),u=l.oneMinus(),m=a.lessThan(e).select(Math.PI,0),d=float(Math.PI).sub(m),p=Fresnel0ToIor(o.clamp(0,.9999)),h=IorToFresnel0(p,a.toVec3()),f=F_Schlick({f0:h,f90:1,dotVH:n}),g=vec3(p.x.lessThan(a).select(Math.PI,0),p.y.lessThan(a).select(Math.PI,0),p.z.lessThan(a).select(Math.PI,0)),v=a.mul(s,n,2),F=vec3(d).add(g),S=l.mul(f).clamp(1e-5,.9999),D=S.sqrt(),V=u.pow2().mul(f).div(vec3(1).sub(S)),x=l.add(V).toVar(),y=V.sub(u).toVar();return Loop({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{y.mulAssign(D);const t=evalSensitivity(float(e).mul(v),float(e).mul(F)).mul(2);x.addAssign(y.mul(t))})),x.max(vec3(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),IBLSheenBRDF=Fn((({normal:e,viewDir:t,roughness:i})=>{const s=e.dot(t).saturate(),o=i.pow2(),a=select(i.lessThan(.25),float(-339.2).mul(o).add(float(161.4).mul(i)).sub(25.9),float(-8.48).mul(o).add(float(14.3).mul(i)).sub(9.95)),r=select(i.lessThan(.25),float(44).mul(o).sub(float(23.7).mul(i)).add(3.26),float(1.97).mul(o).sub(float(3.27).mul(i)).add(.72));return select(i.lessThan(.25),0,float(.1).mul(i).sub(.025)).add(a.mul(s).add(r).exp()).mul(1/Math.PI).saturate()})),clearcoatF0=vec3(.04),clearcoatF90=float(1);class PhysicalLightingModel extends LightingModel{constructor(e=!1,t=!1,i=!1,s=!1,o=!1,a=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=i,this.anisotropy=s,this.transmission=o,this.dispersion=a,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=vec3().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=vec3().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=vec3().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=vec3().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=vec3().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=normalView.dot(positionViewDirection).clamp();this.iridescenceFresnel=evalIridescence({outsideIOR:float(1),eta2:iridescenceIOR,cosTheta1:e,thinFilmThickness:iridescenceThickness,baseF0:specularColor}),this.iridescenceF0=Schlick_to_F0({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=positionWorld,i=cameraPosition.sub(positionWorld).normalize(),s=normalWorld,o=e.context;o.backdrop=getIBLVolumeRefraction(s,i,roughness,diffuseColor,specularColor,specularF90,t,modelWorldMatrix,cameraViewMatrix,cameraProjectionMatrix,ior,thickness,attenuationColor,attenuationDistance,this.dispersion?dispersion:null),o.backdropAlpha=transmission,diffuseColor.a.mulAssign(mix(1,o.backdrop.a,transmission))}super.start(e)}computeMultiscattering(e,t,i){const s=normalView.dot(positionViewDirection).clamp(),o=DFGApprox({roughness:roughness,dotNV:s}),a=(this.iridescenceF0?iridescence.mix(specularColor,this.iridescenceF0):specularColor).mul(o.x).add(i.mul(o.y)),r=o.x.add(o.y).oneMinus(),n=specularColor.add(specularColor.oneMinus().mul(.047619)),c=a.mul(n).div(r.mul(n).oneMinus());e.addAssign(a),t.addAssign(c.mul(r))}direct({lightDirection:e,lightColor:t,reflectedLight:i}){const s=normalView.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(BRDF_Sheen({lightDirection:e}))),!0===this.clearcoat){const i=clearcoatNormalView.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(i.mul(BRDF_GGX({lightDirection:e,f0:clearcoatF0,f90:clearcoatF90,roughness:clearcoatRoughness,normalView:clearcoatNormalView})))}i.directDiffuse.addAssign(s.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb}))),i.directSpecular.addAssign(s.mul(BRDF_GGX({lightDirection:e,f0:specularColor,f90:1,roughness:roughness,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:i,halfHeight:s,reflectedLight:o,ltc_1:a,ltc_2:r}){const n=t.add(i).sub(s),c=t.sub(i).sub(s),l=t.sub(i).add(s),u=t.add(i).add(s),m=normalView,d=positionViewDirection,p=positionView.toVar(),h=LTC_Uv({N:m,V:d,roughness:roughness}),f=a.sample(h).toVar(),g=r.sample(h).toVar(),v=mat3(vec3(f.x,0,f.y),vec3(0,1,0),vec3(f.z,0,f.w)).toVar(),F=specularColor.mul(g.x).add(specularColor.oneMinus().mul(g.y)).toVar();o.directSpecular.addAssign(e.mul(F).mul(LTC_Evaluate({N:m,V:d,P:p,mInv:v,p0:n,p1:c,p2:l,p3:u}))),o.directDiffuse.addAssign(e.mul(diffuseColor).mul(LTC_Evaluate({N:m,V:d,P:p,mInv:mat3(1,0,0,0,1,0,0,0,1),p0:n,p1:c,p2:l,p3:u})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:i}=e.context;i.indirectDiffuse.addAssign(t.mul(BRDF_Lambert({diffuseColor:diffuseColor})))}indirectSpecular(e){const{radiance:t,iblIrradiance:i,reflectedLight:s}=e.context;if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(i.mul(sheen,IBLSheenBRDF({normal:normalView,viewDir:positionViewDirection,roughness:sheenRoughness}))),!0===this.clearcoat){const e=clearcoatNormalView.dot(positionViewDirection).clamp(),t=EnvironmentBRDF({dotNV:e,specularColor:clearcoatF0,specularF90:clearcoatF90,roughness:clearcoatRoughness});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const o=vec3().toVar("singleScattering"),a=vec3().toVar("multiScattering"),r=i.mul(1/Math.PI);this.computeMultiscattering(o,a,specularF90);const n=o.add(a),c=diffuseColor.mul(n.r.max(n.g).max(n.b).oneMinus());s.indirectSpecular.addAssign(t.mul(o)),s.indirectSpecular.addAssign(a.mul(r)),s.indirectDiffuse.addAssign(c.mul(r))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:i}=e.context,s=normalView.dot(positionViewDirection).clamp().add(t),o=roughness.mul(-16).oneMinus().negate().exp2(),a=t.sub(s.pow(o).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(t),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(t),i.indirectDiffuse.mulAssign(t),i.indirectSpecular.mulAssign(a)}finish({context:e}){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=clearcoatNormalView.dot(positionViewDirection).clamp(),i=F_Schlick({dotVH:e,f0:clearcoatF0,f90:clearcoatF90}),s=t.mul(clearcoat.mul(i).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));t.assign(s)}if(!0===this.sheen){const e=sheen.r.max(sheen.g).max(sheen.b).mul(.157).oneMinus(),i=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(i)}}}export default PhysicalLightingModel;
//# sourceMappingURL=PhysicalLightingModel.js.map