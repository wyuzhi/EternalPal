{"version":3,"file":"node_modules/three/src/nodes/functions/PhysicalLightingModel.js","names":["BRDF_Lambert","BRDF_GGX","DFGApprox","EnvironmentBRDF","F_Schlick","Schlick_to_F0","BRDF_Sheen","LTC_Evaluate","LTC_Uv","LightingModel","diffuseColor","specularColor","specularF90","roughness","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","ior","thickness","transmission","attenuationDistance","attenuationColor","dispersion","normalView","clearcoatNormalView","normalWorld","positionViewDirection","positionView","positionWorld","Fn","float","vec2","vec3","vec4","mat3","If","select","mix","normalize","refract","length","clamp","log2","log","exp","smoothstep","div","cameraPosition","cameraProjectionMatrix","cameraViewMatrix","modelWorldMatrix","screenSize","viewportMipTexture","textureBicubicLevel","Loop","BackSide","getVolumeTransmissionRay","n","v","modelMatrix","refractionVector","negate","modelScale","xyz","mul","setLayout","name","type","inputs","applyIorToRoughness","sub","viewportBackSideTexture","viewportFrontSideTexture","getTransmissionSample","fragCoord","material","transmissionSample","side","sample","lod","x","volumeAttenuation","transmissionDistance","notEqual","attenuationCoefficient","getIBLVolumeRefraction","position","viewMatrix","projMatrix","transmittedLight","transmittance","toVar","halfSpread","iors","add","start","end","i","element","transmissionRay","refractedRayExit","ndcPos","refractionCoords","xy","w","addAssign","divAssign","assign","y","oneMinus","a","attenuatedColor","rgb","dotNV","dot","F","transmittanceFactor","r","g","b","XYZ_TO_REC709","Fresnel0ToIor","fresnel0","sqrtF0","sqrt","IorToFresnel0","transmittedIor","incidentIor","pow2","evalSensitivity","OPD","shift","phase","Math","PI","val","pos","VAR","cos","z","evalIridescence","outsideIOR","eta2","cosTheta1","thinFilmThickness","baseF0","cosTheta2Sq","lessThan","cosTheta2","R0","R12","f0","f90","dotVH","T121","phi12","phi21","baseIOR","R1","toVec3","R23","phi23","phi","R123","r123","Rs","I","Cm","condition","m","mulAssign","Sm","max","IBLSheenBRDF","normal","viewDir","saturate","r2","clearcoatF0","clearcoatF90","PhysicalLightingModel","constructor","anisotropy","super","this","clearcoatRadiance","clearcoatSpecularDirect","clearcoatSpecularIndirect","sheenSpecularDirect","sheenSpecularIndirect","iridescenceFresnel","iridescenceF0","builder","dotNVi","f","context","backdrop","backdropAlpha","computeMultiscattering","singleScatter","multiScatter","fab","FssEss","Ems","Favg","Fms","direct","lightDirection","lightColor","reflectedLight","irradiance","ccIrradiance","directDiffuse","directSpecular","USE_IRIDESCENCE","USE_ANISOTROPY","directRectArea","lightPosition","halfWidth","halfHeight","ltc_1","ltc_2","p0","p1","p2","p3","N","V","P","uv","t1","t2","mInv","fresnel","indirect","indirectDiffuse","indirectSpecular","ambientOcclusion","radiance","iblIrradiance","dotNVcc","clearcoatEnv","singleScattering","multiScattering","cosineWeightedIrradiance","totalScattering","diffuse","aoNV","aoExp","exp2","aoNode","pow","finish","outgoingLight","Fcc","clearcoatLight","sheenEnergyComp","sheenLight"],"sources":["node_modules/three/src/nodes/functions/PhysicalLightingModel.js"],"sourcesContent":["import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\nimport DFGApprox from './BSDF/DFGApprox.js';\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\nimport F_Schlick from './BSDF/F_Schlick.js';\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\nimport { LTC_Evaluate, LTC_Uv } from './BSDF/LTC.js';\nimport LightingModel from '../core/LightingModel.js';\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\nimport { normalView, clearcoatNormalView, normalWorld } from '../accessors/Normal.js';\nimport { positionViewDirection, positionView, positionWorld } from '../accessors/Position.js';\nimport { Fn, float, vec2, vec3, vec4, mat3, If } from '../tsl/TSLBase.js';\nimport { select } from '../math/ConditionalNode.js';\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\nimport { div } from '../math/OperatorNode.js';\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/Camera.js';\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { screenSize } from '../display/ScreenNode.js';\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\nimport { textureBicubicLevel } from '../accessors/TextureBicubic.js';\nimport { Loop } from '../utils/LoopNode.js';\nimport { BackSide } from '../../constants.js';\n\n//\n// Transmission\n//\n\nconst getVolumeTransmissionRay = /*@__PURE__*/ Fn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\n\n\t// Direction of refracted light.\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\n\n\t// Compute rotation-independent scaling of the model matrix.\n\tconst modelScale = vec3(\n\t\tlength( modelMatrix[ 0 ].xyz ),\n\t\tlength( modelMatrix[ 1 ].xyz ),\n\t\tlength( modelMatrix[ 2 ].xyz )\n\t);\n\n\t// The thickness is specified in local space.\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\n\n} ).setLayout( {\n\tname: 'getVolumeTransmissionRay',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'n', type: 'vec3' },\n\t\t{ name: 'v', type: 'vec3' },\n\t\t{ name: 'thickness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' },\n\t\t{ name: 'modelMatrix', type: 'mat4' }\n\t]\n} );\n\nconst applyIorToRoughness = /*@__PURE__*/ Fn( ( [ roughness, ior ] ) => {\n\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\n\n} ).setLayout( {\n\tname: 'applyIorToRoughness',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'roughness', type: 'float' },\n\t\t{ name: 'ior', type: 'float' }\n\t]\n} );\n\nconst viewportBackSideTexture = /*@__PURE__*/ viewportMipTexture();\nconst viewportFrontSideTexture = /*@__PURE__*/ viewportMipTexture();\n\nconst getTransmissionSample = /*@__PURE__*/ Fn( ( [ fragCoord, roughness, ior ], { material } ) => {\n\n\tconst vTexture = material.side === BackSide ? viewportBackSideTexture : viewportFrontSideTexture;\n\n\tconst transmissionSample = vTexture.sample( fragCoord );\n\t//const transmissionSample = viewportMipTexture( fragCoord );\n\n\tconst lod = log2( screenSize.x ).mul( applyIorToRoughness( roughness, ior ) );\n\n\treturn textureBicubicLevel( transmissionSample, lod );\n\n} );\n\nconst volumeAttenuation = /*@__PURE__*/ Fn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\n\n\tIf( attenuationDistance.notEqual( 0 ), () => {\n\n\t\t// Compute light attenuation using Beer's law.\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\n\n\t\treturn transmittance;\n\n\t} );\n\n\t// Attenuation distance is +âˆž, i.e. the transmitted color is not attenuated at all.\n\treturn vec3( 1.0 );\n\n} ).setLayout( {\n\tname: 'volumeAttenuation',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'transmissionDistance', type: 'float' },\n\t\t{ name: 'attenuationColor', type: 'vec3' },\n\t\t{ name: 'attenuationDistance', type: 'float' }\n\t]\n} );\n\nconst getIBLVolumeRefraction = /*@__PURE__*/ Fn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\n\n\tlet transmittedLight, transmittance;\n\n\tif ( dispersion ) {\n\n\t\ttransmittedLight = vec4().toVar();\n\t\ttransmittance = vec3().toVar();\n\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\n\n\t\tLoop( { start: 0, end: 3 }, ( { i } ) => {\n\n\t\t\tconst ior = iors.element( i );\n\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\t\trefractionCoords.addAssign( 1.0 );\n\t\t\trefractionCoords.divAssign( 2.0 );\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\n\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\n\n\t\t} );\n\n\t\ttransmittedLight.a.divAssign( 3.0 );\n\n\t} else {\n\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tconst refractedRayExit = position.add( transmissionRay );\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\n\t\trefractionCoords.addAssign( 1.0 );\n\t\trefractionCoords.divAssign( 2.0 );\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\n\n\t}\n\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\n\tconst dotNV = n.dot( v ).clamp();\n\n\t// Get the specular component.\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\n\t\tdotNV,\n\t\tspecularColor,\n\t\tspecularF90,\n\t\troughness\n\t} ) );\n\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\n\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\n\n} );\n\n//\n// Iridescence\n//\n\n// XYZ to linear-sRGB color space\nconst XYZ_TO_REC709 = /*@__PURE__*/ mat3(\n\t3.2404542, - 0.9692660, 0.0556434,\n\t- 1.5371385, 1.8760108, - 0.2040259,\n\t- 0.4985314, 0.0415560, 1.0572252\n);\n\n// Assume air interface for top\n// Note: We don't handle the case fresnel0 == 1\nconst Fresnel0ToIor = ( fresnel0 ) => {\n\n\tconst sqrtF0 = fresnel0.sqrt();\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\n\n};\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\n\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\n\n};\n\n// Fresnel equations for dielectric/dielectric interfaces.\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\n// Evaluation XYZ sensitivity curves in Fourier space\nconst evalSensitivity = ( OPD, shift ) => {\n\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );\n\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\n\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\n\n\treturn rgb;\n\n};\n\nconst evalIridescence = /*@__PURE__*/ Fn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\n\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( cosTheta1.pow2().oneMinus() );\n\n\t// Handle TIR:\n\tconst cosTheta2Sq = sinTheta2Sq.oneMinus();\n\n\tIf( cosTheta2Sq.lessThan( 0 ), () => {\n\n\t\treturn vec3( 1.0 );\n\n\t} );\n\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\n\n\t// First interface\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\n\t//const R21 = R12;\n\tconst T121 = R12.oneMinus();\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).select( Math.PI, 0.0 );\n\tconst phi21 = float( Math.PI ).sub( phi12 );\n\n\t// Second interface\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\n\tconst phi23 = vec3(\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).select( Math.PI, 0.0 ),\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).select( Math.PI, 0.0 )\n\t);\n\n\t// Phase shift\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\n\tconst phi = vec3( phi21 ).add( phi23 );\n\n\t// Compound terms\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\n\tconst r123 = R123.sqrt();\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tconst C0 = R12.add( Rs );\n\tconst I = C0.toVar();\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tconst Cm = Rs.sub( T121 ).toVar();\n\n\tLoop( { start: 1, end: 2, condition: '<=', name: 'm' }, ( { m } ) => {\n\n\t\tCm.mulAssign( r123 );\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\n\t\tI.addAssign( Cm.mul( Sm ) );\n\n\t} );\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn I.max( vec3( 0.0 ) );\n\n} ).setLayout( {\n\tname: 'evalIridescence',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'outsideIOR', type: 'float' },\n\t\t{ name: 'eta2', type: 'float' },\n\t\t{ name: 'cosTheta1', type: 'float' },\n\t\t{ name: 'thinFilmThickness', type: 'float' },\n\t\t{ name: 'baseF0', type: 'vec3' }\n\t]\n} );\n\n//\n//\tSheen\n//\n\n// This is a curve-fit approximation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\nconst IBLSheenBRDF = /*@__PURE__*/ Fn( ( { normal, viewDir, roughness } ) => {\n\n\tconst dotNV = normal.dot( viewDir ).saturate();\n\n\tconst r2 = roughness.pow2();\n\n\tconst a = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\n\t\tfloat( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\n\t);\n\n\tconst b = select(\n\t\troughness.lessThan( 0.25 ),\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\n\t);\n\n\tconst DG = select( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\n\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\n\n} );\n\nconst clearcoatF0 = vec3( 0.04 );\nconst clearcoatF90 = float( 1 );\n\n\n/**\n * Represents the lighting model for a PBR material.\n *\n * @augments LightingModel\n */\nclass PhysicalLightingModel extends LightingModel {\n\n\t/**\n\t * Constructs a new physical lighting model.\n\t *\n\t * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.\n\t * @param {boolean} [sheen=false] - Whether sheen is supported or not.\n\t * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.\n\t * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.\n\t * @param {boolean} [transmission=false] - Whether transmission is supported or not.\n\t * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.\n\t */\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * Whether clearcoat is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearcoat = clearcoat;\n\n\t\t/**\n\t\t * Whether sheen is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.sheen = sheen;\n\n\t\t/**\n\t\t * Whether iridescence is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.iridescence = iridescence;\n\n\t\t/**\n\t\t * Whether anisotropy is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.anisotropy = anisotropy;\n\n\t\t/**\n\t\t * Whether transmission is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.transmission = transmission;\n\n\t\t/**\n\t\t * Whether dispersion is supported or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.dispersion = dispersion;\n\n\t\t/**\n\t\t * The clear coat radiance.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatRadiance = null;\n\n\t\t/**\n\t\t * The clear coat specular direct.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatSpecularDirect = null;\n\n\t\t/**\n\t\t * The clear coat specular indirect.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.clearcoatSpecularIndirect = null;\n\n\t\t/**\n\t\t * The sheen specular direct.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenSpecularDirect = null;\n\n\t\t/**\n\t\t * The sheen specular indirect.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.sheenSpecularIndirect = null;\n\n\t\t/**\n\t\t * The iridescence Fresnel.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceFresnel = null;\n\n\t\t/**\n\t\t * The iridescence F0.\n\t\t *\n\t\t * @type {?Node}\n\t\t * @default null\n\t\t */\n\t\tthis.iridescenceF0 = null;\n\n\t}\n\n\t/**\n\t * Depending on what features are requested, the method prepares certain node variables\n\t * which are later used for lighting computations.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tstart( builder ) {\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatRadiance = vec3().toVar( 'clearcoatRadiance' );\n\t\t\tthis.clearcoatSpecularDirect = vec3().toVar( 'clearcoatSpecularDirect' );\n\t\t\tthis.clearcoatSpecularIndirect = vec3().toVar( 'clearcoatSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect = vec3().toVar( 'sheenSpecularDirect' );\n\t\t\tthis.sheenSpecularIndirect = vec3().toVar( 'sheenSpecularIndirect' );\n\n\t\t}\n\n\t\tif ( this.iridescence === true ) {\n\n\t\t\tconst dotNVi = normalView.dot( positionViewDirection ).clamp();\n\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\n\t\t\t\toutsideIOR: float( 1.0 ),\n\t\t\t\teta2: iridescenceIOR,\n\t\t\t\tcosTheta1: dotNVi,\n\t\t\t\tthinFilmThickness: iridescenceThickness,\n\t\t\t\tbaseF0: specularColor\n\t\t\t} );\n\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\n\n\t\t}\n\n\t\tif ( this.transmission === true ) {\n\n\t\t\tconst position = positionWorld;\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\n\t\t\tconst n = normalWorld;\n\n\t\t\tconst context = builder.context;\n\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\n\t\t\t\tn,\n\t\t\t\tv,\n\t\t\t\troughness,\n\t\t\t\tdiffuseColor,\n\t\t\t\tspecularColor,\n\t\t\t\tspecularF90, // specularF90\n\t\t\t\tposition, // positionWorld\n\t\t\t\tmodelWorldMatrix, // modelMatrix\n\t\t\t\tcameraViewMatrix, // viewMatrix\n\t\t\t\tcameraProjectionMatrix, // projMatrix\n\t\t\t\tior,\n\t\t\t\tthickness,\n\t\t\t\tattenuationColor,\n\t\t\t\tattenuationDistance,\n\t\t\t\tthis.dispersion ? dispersion : null\n\t\t\t);\n\n\t\t\tcontext.backdropAlpha = transmission;\n\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\n\n\t\t}\n\n\t\tsuper.start( builder );\n\n\t}\n\n\t// Fdez-AgÃ¼era's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\n\t// Approximates multi-scattering in order to preserve energy.\n\t// http://www.jcgt.org/published/0008/01/03/\n\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\n\n\t\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\n\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\n\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\n\n\t\tconst Ess = fab.x.add( fab.y );\n\t\tconst Ems = Ess.oneMinus();\n\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\n\n\t\tsingleScatter.addAssign( FssEss );\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\n\n\t}\n\n\t/**\n\t * Implements the direct light.\n\t *\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight }, /* builder */ ) {\n\n\t\tconst dotNL = normalView.dot( lightDirection ).clamp();\n\t\tconst irradiance = dotNL.mul( lightColor );\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNLcc = clearcoatNormalView.dot( lightDirection ).clamp();\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\n\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: clearcoatNormalView } ) ) );\n\n\t\t}\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\n\n\t}\n\n\t/**\n\t * This method is intended for implementing the direct light term for\n\t * rect area light nodes.\n\t *\n\t * @param {Object} input - The input data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 }, /* builder */ ) {\n\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\n\n\t\tconst N = normalView;\n\t\tconst V = positionViewDirection;\n\t\tconst P = positionView.toVar();\n\n\t\tconst uv = LTC_Uv( { N, V, roughness } );\n\n\t\tconst t1 = ltc_1.sample( uv ).toVar();\n\t\tconst t2 = ltc_2.sample( uv ).toVar();\n\n\t\tconst mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3( 0, 1, 0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t).toVar();\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tconst fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();\n\n\t\treflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );\n\n\t\treflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect lighting.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( builder ) {\n\n\t\tthis.indirectDiffuse( builder );\n\t\tthis.indirectSpecular( builder );\n\t\tthis.ambientOcclusion( builder );\n\n\t}\n\n\t/**\n\t * Implements the indirect diffuse term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirectDiffuse( builder ) {\n\n\t\tconst { irradiance, reflectedLight } = builder.context;\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect specular term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirectSpecular( builder ) {\n\n\t\tconst { radiance, iblIrradiance, reflectedLight } = builder.context;\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\n\t\t\t\tsheen,\n\t\t\t\tIBLSheenBRDF( {\n\t\t\t\t\tnormal: normalView,\n\t\t\t\t\tviewDir: positionViewDirection,\n\t\t\t\t\troughness: sheenRoughness\n\t\t\t\t} )\n\t\t\t) );\n\n\t\t}\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = clearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\n\t\t\t\tdotNV: dotNVcc,\n\t\t\t\tspecularColor: clearcoatF0,\n\t\t\t\tspecularF90: clearcoatF90,\n\t\t\t\troughness: clearcoatRoughness\n\t\t\t} );\n\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\n\n\t\t}\n\n\t\t// Both indirect specular and indirect diffuse light accumulate here\n\n\t\tconst singleScattering = vec3().toVar( 'singleScattering' );\n\t\tconst multiScattering = vec3().toVar( 'multiScattering' );\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\n\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\n\n\t\tconst totalScattering = singleScattering.add( multiScattering );\n\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\n\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\n\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\n\n\t}\n\n\t/**\n\t * Implements the ambient occlusion term.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tambientOcclusion( builder ) {\n\n\t\tconst { ambientOcclusion, reflectedLight } = builder.context;\n\n\t\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\n\t\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\n\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\n\n\t\t}\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\n\n\t}\n\n\t/**\n\t * Used for final lighting accumulations depending on the requested features.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( { context } ) {\n\n\t\tconst { outgoingLight } = context;\n\n\t\tif ( this.clearcoat === true ) {\n\n\t\t\tconst dotNVcc = clearcoatNormalView.dot( positionViewDirection ).clamp();\n\n\t\t\tconst Fcc = F_Schlick( {\n\t\t\t\tdotVH: dotNVcc,\n\t\t\t\tf0: clearcoatF0,\n\t\t\t\tf90: clearcoatF90\n\t\t\t} );\n\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\n\n\t\t\toutgoingLight.assign( clearcoatLight );\n\n\t\t}\n\n\t\tif ( this.sheen === true ) {\n\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\n\n\t\t\toutgoingLight.assign( sheenLight );\n\n\t\t}\n\n\t}\n\n}\n\nexport default PhysicalLightingModel;\n"],"mappings":"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","ignoreList":[]}