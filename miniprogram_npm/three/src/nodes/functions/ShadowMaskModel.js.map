{"version":3,"file":"node_modules/three/src/nodes/functions/ShadowMaskModel.js","names":["LightingModel","diffuseColor","float","ShadowMaskModel","constructor","super","this","shadowNode","toVar","direct","lightNode","mulAssign","finish","context","a","oneMinus","outgoingLight","rgb","assign"],"sources":["node_modules/three/src/nodes/functions/ShadowMaskModel.js"],"sourcesContent":["import LightingModel from '../core/LightingModel.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { float } from '../tsl/TSLBase.js';\n\n/**\n * Represents lighting model for a shadow material. Used in {@link ShadowNodeMaterial}.\n *\n * @augments LightingModel\n */\nclass ShadowMaskModel extends LightingModel {\n\n\t/**\n\t * Constructs a new shadow mask model.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The shadow mask node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.shadowNode = float( 1 ).toVar( 'shadowMask' );\n\n\t}\n\n\t/**\n\t * Only used to save the shadow mask.\n\t *\n\t * @param {Object} input - The input data.\n\t */\n\tdirect( { lightNode } ) {\n\n\t\tif ( lightNode.shadowNode !== null ) {\n\n\t\t\tthis.shadowNode.mulAssign( lightNode.shadowNode );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Uses the shadow mask to produce the final color.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tfinish( { context } ) {\n\n\t\tdiffuseColor.a.mulAssign( this.shadowNode.oneMinus() );\n\n\t\tcontext.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment\n\n\t}\n\n}\n\nexport default ShadowMaskModel;\n"],"mappings":"OAAOA,kBAAmB,kCACjBC,iBAAoB,iCACpBC,UAAa,oBAOtB,MAAMC,wBAAwBH,cAK7B,WAAAI,GAECC,QAOAC,KAAKC,WAAaL,MAAO,GAAIM,MAAO,aAErC,CAOA,MAAAC,EAAQC,UAAEA,IAEqB,OAAzBA,EAAUH,YAEdD,KAAKC,WAAWI,UAAWD,EAAUH,WAIvC,CAOA,MAAAK,EAAQC,QAAEA,IAETZ,aAAaa,EAAEH,UAAWL,KAAKC,WAAWQ,YAE1CF,EAAQG,cAAcC,IAAIC,OAAQjB,aAAagB,IAEhD,iBAIcd","ignoreList":[]}