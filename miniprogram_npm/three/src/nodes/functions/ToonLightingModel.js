import LightingModel from"../core/LightingModel.js";import BRDF_Lambert from"./BSDF/BRDF_Lambert.js";import{diffuseColor}from"../core/PropertyNode.js";import{normalGeometry}from"../accessors/Normal.js";import{Fn,float,vec2,vec3}from"../tsl/TSLBase.js";import{mix,smoothstep}from"../math/MathNode.js";import{materialReference}from"../accessors/MaterialReferenceNode.js";const getGradientIrradiance=Fn((({normal:e,lightDirection:t,builder:r})=>{const o=e.dot(t),i=vec2(o.mul(.5).add(.5),0);if(r.material.gradientMap){const e=materialReference("gradientMap","texture").context({getUV:()=>i});return vec3(e.r)}{const e=i.fwidth().mul(.5);return mix(vec3(.7),vec3(1),smoothstep(float(.7).sub(e.x),float(.7).add(e.x),i.x))}}));class ToonLightingModel extends LightingModel{direct({lightDirection:e,lightColor:t,reflectedLight:r},o){const i=getGradientIrradiance({normal:normalGeometry,lightDirection:e,builder:o}).mul(t);r.directDiffuse.addAssign(i.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:o}=e.context;o.indirectDiffuse.addAssign(r.mul(BRDF_Lambert({diffuseColor:diffuseColor}))),o.indirectDiffuse.mulAssign(t)}}export default ToonLightingModel;
//# sourceMappingURL=ToonLightingModel.js.map