{"version":3,"file":"node_modules/three/src/nodes/functions/ToonLightingModel.js","names":["LightingModel","BRDF_Lambert","diffuseColor","normalGeometry","Fn","float","vec2","vec3","mix","smoothstep","materialReference","getGradientIrradiance","normal","lightDirection","builder","dotNL","dot","coord","mul","add","material","gradientMap","context","getUV","r","fw","fwidth","sub","x","ToonLightingModel","direct","lightColor","reflectedLight","irradiance","directDiffuse","addAssign","rgb","indirect","ambientOcclusion","indirectDiffuse","mulAssign"],"sources":["node_modules/three/src/nodes/functions/ToonLightingModel.js"],"sourcesContent":["import LightingModel from '../core/LightingModel.js';\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\nimport { diffuseColor } from '../core/PropertyNode.js';\nimport { normalGeometry } from '../accessors/Normal.js';\nimport { Fn, float, vec2, vec3 } from '../tsl/TSLBase.js';\nimport { mix, smoothstep } from '../math/MathNode.js';\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\n\nconst getGradientIrradiance = /*@__PURE__*/ Fn( ( { normal, lightDirection, builder } ) => {\n\n\t// dotNL will be from -1.0 to 1.0\n\tconst dotNL = normal.dot( lightDirection );\n\tconst coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );\n\n\tif ( builder.material.gradientMap ) {\n\n\t\tconst gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );\n\n\t\treturn vec3( gradientMap.r );\n\n\t} else {\n\n\t\tconst fw = coord.fwidth().mul( 0.5 );\n\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );\n\n\t}\n\n} );\n\n/**\n * Represents the lighting model for a toon material. Used in {@link MeshToonNodeMaterial}.\n *\n * @augments LightingModel\n */\nclass ToonLightingModel extends LightingModel {\n\n\t/**\n\t * Implements the direct lighting. Instead of using a conventional smooth irradiance, the irradiance is\n\t * reduced to a small number of discrete shades to create a comic-like, flat look.\n\t *\n\t * @param {Object} lightData - The light data.\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tdirect( { lightDirection, lightColor, reflectedLight }, builder ) {\n\n\t\tconst irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );\n\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\n\n\t}\n\n\t/**\n\t * Implements the indirect lighting.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t */\n\tindirect( builder ) {\n\n\t\tconst { ambientOcclusion, irradiance, reflectedLight } = builder.context;\n\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\n\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\n\n\t}\n\n}\n\nexport default ToonLightingModel;\n"],"mappings":"OAAOA,kBAAmB,kCACnBC,iBAAkB,gCAChBC,iBAAoB,iCACpBC,mBAAsB,gCACtBC,GAAIC,MAAOC,KAAMC,SAAY,2BAC7BC,IAAKC,eAAkB,6BACvBC,sBAAyB,wCAElC,MAAMC,sBAAsCP,IAAI,EAAIQ,SAAQC,iBAAgBC,cAG3E,MAAMC,EAAQH,EAAOI,IAAKH,GACpBI,EAAQX,KAAMS,EAAMG,IAAK,IAAMC,IAAK,IAAO,GAEjD,GAAKL,EAAQM,SAASC,YAAc,CAEnC,MAAMA,EAAcX,kBAAmB,cAAe,WAAYY,QAAS,CAAEC,MAAO,IAAMN,IAE1F,OAAOV,KAAMc,EAAYG,EAE1B,CAAO,CAEN,MAAMC,EAAKR,EAAMS,SAASR,IAAK,IAE/B,OAAOV,IAAKD,KAAM,IAAOA,KAAM,GAAOE,WAAYJ,MAAO,IAAMsB,IAAKF,EAAGG,GAAKvB,MAAO,IAAMc,IAAKM,EAAGG,GAAKX,EAAMW,GAE7G,KASD,MAAMC,0BAA0B7B,cAS/B,MAAA8B,EAAQjB,eAAEA,EAAckB,WAAEA,EAAUC,eAAEA,GAAkBlB,GAEvD,MAAMmB,EAAatB,sBAAuB,CAAEC,OAAQT,eAAgBU,iBAAgBC,YAAYI,IAAKa,GAErGC,EAAeE,cAAcC,UAAWF,EAAWf,IAAKjB,aAAc,CAAEC,aAAcA,aAAakC,OAEpG,CAOA,QAAAC,CAAUvB,GAET,MAAMwB,iBAAEA,EAAgBL,WAAEA,EAAUD,eAAEA,GAAmBlB,EAAQQ,QAEjEU,EAAeO,gBAAgBJ,UAAWF,EAAWf,IAAKjB,aAAc,CAAEC,8BAE1E8B,EAAeO,gBAAgBC,UAAWF,EAE3C,iBAIcT","ignoreList":[]}