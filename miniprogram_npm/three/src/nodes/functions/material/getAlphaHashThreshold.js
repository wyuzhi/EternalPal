import{abs,add,ceil,clamp,dFdx,dFdy,exp2,float,floor,Fn,fract,length,log2,max,min,mul,sin,sub,vec2,vec3}from"../../tsl/TSLBase.js";const ALPHA_HASH_SCALE=.05,hash2D=Fn((([l])=>fract(mul(1e4,sin(mul(17,l.x).add(mul(.1,l.y)))).mul(add(.1,abs(sin(mul(13,l.y).add(l.x)))))))),hash3D=Fn((([l])=>hash2D(vec2(hash2D(l.xy),l.z)))),getAlphaHashThreshold=Fn((([l])=>{const e=max(length(dFdx(l.xyz)),length(dFdy(l.xyz))),s=float(1).div(float(.05).mul(e)).toVar("pixScale"),a=vec2(exp2(floor(log2(s))),exp2(ceil(log2(s)))),u=vec2(hash3D(floor(a.x.mul(l.xyz))),hash3D(floor(a.y.mul(l.xyz)))),o=fract(log2(s)),h=add(mul(o.oneMinus(),u.x),mul(o,u.y)),t=min(o,o.oneMinus()),m=vec3(h.mul(h).div(mul(2,t).mul(sub(1,t))),h.sub(mul(.5,t)).div(sub(1,t)),sub(1,sub(1,h).mul(sub(1,h)).div(mul(2,t).mul(sub(1,t))))),n=h.lessThan(t.oneMinus()).select(h.lessThan(t).select(m.x,m.y),m.z);return clamp(n,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});export default getAlphaHashThreshold;
//# sourceMappingURL=getAlphaHashThreshold.js.map