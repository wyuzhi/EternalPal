{"version":3,"file":"node_modules/three/src/nodes/functions/material/getAlphaHashThreshold.js","names":["abs","add","ceil","clamp","dFdx","dFdy","exp2","float","floor","Fn","fract","length","log2","max","min","mul","sin","sub","vec2","vec3","ALPHA_HASH_SCALE","hash2D","value","x","y","hash3D","xy","z","getAlphaHashThreshold","position","maxDeriv","xyz","pixScale","div","toVar","pixScales","alpha","lerpFactor","oneMinus","a","cases","threshold","lessThan","select","setLayout","name","type","inputs"],"sources":["node_modules/three/src/nodes/functions/material/getAlphaHashThreshold.js"],"sourcesContent":["import { abs, add, ceil, clamp, dFdx, dFdy, exp2, float, floor, Fn, fract, length, log2, max, min, mul, sin, sub, vec2, vec3 } from '../../tsl/TSLBase.js';\n\n// See: https://casual-effects.com/research/Wyman2017Hashed/index.html\n\nconst ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\n\nconst hash2D = /*@__PURE__*/ Fn( ( [ value ] ) => {\n\n\treturn fract( mul( 1.0e4, sin( mul( 17.0, value.x ).add( mul( 0.1, value.y ) ) ) ).mul( add( 0.1, abs( sin( mul( 13.0, value.y ).add( value.x ) ) ) ) ) );\n\n} );\n\nconst hash3D = /*@__PURE__*/ Fn( ( [ value ] ) => {\n\n\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\n} );\n\nconst getAlphaHashThreshold = /*@__PURE__*/ Fn( ( [ position ] ) => {\n\n\t// Find the discretized derivatives of our coordinates\n\tconst maxDeriv = max(\n\t\tlength( dFdx( position.xyz ) ),\n\t\tlength( dFdy( position.xyz ) )\n\t);\n\n\tconst pixScale = float( 1 ).div( float( ALPHA_HASH_SCALE ).mul( maxDeriv ) ).toVar( 'pixScale' );\n\n\t// Find two nearest log-discretized noise scales\n\tconst pixScales = vec2(\n\t\texp2( floor( log2( pixScale ) ) ),\n\t\texp2( ceil( log2( pixScale ) ) )\n\t);\n\n\t// Compute alpha thresholds at our two noise scales\n\tconst alpha = vec2(\n\t\thash3D( floor( pixScales.x.mul( position.xyz ) ) ),\n\t\thash3D( floor( pixScales.y.mul( position.xyz ) ) ),\n\t);\n\n\t// Factor to interpolate lerp with\n\tconst lerpFactor = fract( log2( pixScale ) );\n\n\t// Interpolate alpha threshold from noise at two scales\n\tconst x = add( mul( lerpFactor.oneMinus(), alpha.x ), mul( lerpFactor, alpha.y ) );\n\n\t// Pass into CDF to compute uniformly distrib threshold\n\tconst a = min( lerpFactor, lerpFactor.oneMinus() );\n\tconst cases = vec3(\n\t\tx.mul( x ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ),\n\t\tx.sub( mul( 0.5, a ) ).div( sub( 1.0, a ) ),\n\t\tsub( 1.0, sub( 1.0, x ).mul( sub( 1.0, x ) ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ) ) );\n\n\t// Find our final, uniformly distributed alpha threshold (ατ)\n\tconst threshold = x.lessThan( a.oneMinus() ).select( x.lessThan( a ).select( cases.x, cases.y ), cases.z );\n\n\t// Avoids ατ == 0. Could also do ατ =1-ατ\n\treturn clamp( threshold, 1.0e-6, 1.0 );\n\n} ).setLayout( {\n\tname: 'getAlphaHashThreshold',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'position', type: 'vec3' }\n\t]\n} );\n\nexport default getAlphaHashThreshold;\n"],"mappings":"OAASA,IAAKC,IAAKC,KAAMC,MAAOC,KAAMC,KAAMC,KAAMC,MAAOC,MAAOC,GAAIC,MAAOC,OAAQC,KAAMC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,KAAMC,SAAY,uBAIpI,MAAMC,iBAAmB,IAEnBC,OAAuBZ,IAAI,EAAIa,KAE7BZ,MAAOK,IAAK,IAAOC,IAAKD,IAAK,GAAMO,EAAMC,GAAItB,IAAKc,IAAK,GAAKO,EAAME,MAAUT,IAAKd,IAAK,GAAKD,IAAKgB,IAAKD,IAAK,GAAMO,EAAME,GAAIvB,IAAKqB,EAAMC,UAIvIE,OAAuBhB,IAAI,EAAIa,KAE7BD,OAAQH,KAAMG,OAAQC,EAAMI,IAAMJ,EAAMK,MAI1CC,sBAAsCnB,IAAI,EAAIoB,MAGnD,MAAMC,EAAWjB,IAChBF,OAAQP,KAAMyB,EAASE,MACvBpB,OAAQN,KAAMwB,EAASE,OAGlBC,EAAWzB,MAAO,GAAI0B,IAAK1B,MAtBT,KAsBmCQ,IAAKe,IAAaI,MAAO,YAG9EC,EAAYjB,KACjBZ,KAAME,MAAOI,KAAMoB,KACnB1B,KAAMJ,KAAMU,KAAMoB,MAIbI,EAAQlB,KACbO,OAAQjB,MAAO2B,EAAUZ,EAAER,IAAKc,EAASE,OACzCN,OAAQjB,MAAO2B,EAAUX,EAAET,IAAKc,EAASE,QAIpCM,EAAa3B,MAAOE,KAAMoB,IAG1BT,EAAItB,IAAKc,IAAKsB,EAAWC,WAAYF,EAAMb,GAAKR,IAAKsB,EAAYD,EAAMZ,IAGvEe,EAAIzB,IAAKuB,EAAYA,EAAWC,YAChCE,EAAQrB,KACbI,EAAER,IAAKQ,GAAIU,IAAKlB,IAAK,EAAKwB,GAAIxB,IAAKE,IAAK,EAAKsB,KAC7ChB,EAAEN,IAAKF,IAAK,GAAKwB,IAAMN,IAAKhB,IAAK,EAAKsB,IACtCtB,IAAK,EAAKA,IAAK,EAAKM,GAAIR,IAAKE,IAAK,EAAKM,IAAMU,IAAKlB,IAAK,EAAKwB,GAAIxB,IAAKE,IAAK,EAAKsB,OAG1EE,EAAYlB,EAAEmB,SAAUH,EAAED,YAAaK,OAAQpB,EAAEmB,SAAUH,GAAII,OAAQH,EAAMjB,EAAGiB,EAAMhB,GAAKgB,EAAMb,GAGvG,OAAOxB,MAAOsC,EAAW,KAAQ,EAAK,IAEnCG,UAAW,CACdC,KAAM,wBACNC,KAAM,QACNC,OAAQ,CACP,CAAEF,KAAM,WAAYC,KAAM,0BAIblB","ignoreList":[]}