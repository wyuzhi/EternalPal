{"version":3,"file":"node_modules/three/src/nodes/functions/material/getParallaxCorrectNormal.js","names":["positionWorld","float","Fn","min","normalize","sub","vec3","getParallaxCorrectNormal","normal","cubeSize","cubePos","nDir","toVar","rbmax","mul","div","rbmin","rbminmax","x","greaterThan","select","y","z","correction","add"],"sources":["node_modules/three/src/nodes/functions/material/getParallaxCorrectNormal.js"],"sourcesContent":["import { positionWorld } from '../../accessors/Position.js';\nimport { float, Fn, min, normalize, sub, vec3 } from '../../tsl/TSLBase.js';\n\n/**\n * This computes a parallax corrected normal which is used for box-projected cube mapping (BPCEM).\n *\n * Reference: {@link https://devlog-martinsh.blogspot.com/2011/09/box-projected-cube-environment-mapping.html}\n *\n * ```js\n * const uvNode = getParallaxCorrectNormal( reflectVector, vec3( 200, 100, 100 ), vec3( 0, - 50, 0 ) );\n * material.envNode = pmremTexture( renderTarget.texture, uvNode );\n * ```\n *\n * @tsl\n * @function\n * @param {Node<vec3>} normal - The normal to correct.\n * @param {Node<vec3>} cubeSize - The cube size should reflect the size of the environment (BPCEM is usually applied in closed environments like rooms).\n * @param {Node<vec3>} cubePos - The cube position.\n * @return {Node<vec3>} The parallax corrected normal.\n */\nconst getParallaxCorrectNormal = /*@__PURE__*/ Fn( ( [ normal, cubeSize, cubePos ] ) => {\n\n\tconst nDir = normalize( normal ).toVar();\n\tconst rbmax = sub( float( 0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\n\tconst rbmin = sub( float( - 0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\n\tconst rbminmax = vec3().toVar();\n\trbminmax.x = nDir.x.greaterThan( float( 0 ) ).select( rbmax.x, rbmin.x );\n\trbminmax.y = nDir.y.greaterThan( float( 0 ) ).select( rbmax.y, rbmin.y );\n\trbminmax.z = nDir.z.greaterThan( float( 0 ) ).select( rbmax.z, rbmin.z );\n\n\tconst correction = min( rbminmax.x, rbminmax.y, rbminmax.z ).toVar();\n\tconst boxIntersection = positionWorld.add( nDir.mul( correction ) ).toVar();\n\treturn boxIntersection.sub( cubePos );\n\n} );\n\nexport default getParallaxCorrectNormal;\n"],"mappings":"OAASA,kBAAqB,qCACrBC,MAAOC,GAAIC,IAAKC,UAAWC,IAAKC,SAAY,uBAmBrD,MAAMC,yBAAyCL,IAAI,EAAIM,EAAQC,EAAUC,MAExE,MAAMC,EAAOP,UAAWI,GAASI,QAC3BC,EAAQR,IAAKJ,MAAO,IAAMa,IAAKL,EAASJ,IAAKK,IAAaV,eAAgBe,IAAKJ,GAAOC,QACtFI,EAAQX,IAAKJ,OAAS,IAAMa,IAAKL,EAASJ,IAAKK,IAAaV,eAAgBe,IAAKJ,GAAOC,QACxFK,EAAWX,OAAOM,QACxBK,EAASC,EAAIP,EAAKO,EAAEC,YAAalB,MAAO,IAAMmB,OAAQP,EAAMK,EAAGF,EAAME,GACrED,EAASI,EAAIV,EAAKU,EAAEF,YAAalB,MAAO,IAAMmB,OAAQP,EAAMQ,EAAGL,EAAMK,GACrEJ,EAASK,EAAIX,EAAKW,EAAEH,YAAalB,MAAO,IAAMmB,OAAQP,EAAMS,EAAGN,EAAMM,GAErE,MAAMC,EAAapB,IAAKc,EAASC,EAAGD,EAASI,EAAGJ,EAASK,GAAIV,QAE7D,OADwBZ,cAAcwB,IAAKb,EAAKG,IAAKS,IAAeX,QAC7CP,IAAKK,EAAS,mBAIvBH","ignoreList":[]}