{"version":3,"file":"node_modules/three/src/nodes/gpgpu/ComputeBuiltinNode.js","names":["Node","nodeObject","ComputeBuiltinNode","type","constructor","builtinName","nodeType","super","this","_builtinName","getHash","builder","getBuiltinName","getNodeType","setBuiltinName","hasBuiltin","generate","output","shaderStage","format","console","warn","generateConst","serialize","data","global","deserialize","computeBuiltin","name","numWorkgroups","workgroupId","globalId","localId","subgroupSize"],"sources":["node_modules/three/src/nodes/gpgpu/ComputeBuiltinNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { nodeObject } from '../tsl/TSLBase.js';\n\n/**\n * `ComputeBuiltinNode` represents a compute-scope builtin value that expose information\n * about the currently running dispatch and/or the device it is running on.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass ComputeBuiltinNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ComputeBuiltinNode';\n\n\t}\n\n\t/**\n\t * Constructs a new compute builtin node.\n\t *\n\t * @param {string} builtinName - The built-in name.\n\t * @param {string} nodeType - The node type.\n\t */\n\tconstructor( builtinName, nodeType ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * The built-in name.\n\t\t *\n\t\t * @private\n\t\t * @type {string}\n\t\t */\n\t\tthis._builtinName = builtinName;\n\n\t}\n\n\t/**\n\t * This method is overwritten since hash is derived from the built-in name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The hash.\n\t */\n\tgetHash( builder ) {\n\n\t\treturn this.getBuiltinName( builder );\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is simply derived from `nodeType`..\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.nodeType;\n\n\t}\n\n\t/**\n\t * Sets the builtin name.\n\t *\n\t * @param {string} builtinName - The built-in name.\n\t * @return {ComputeBuiltinNode} A reference to this node.\n\t */\n\tsetBuiltinName( builtinName ) {\n\n\t\tthis._builtinName = builtinName;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns the builtin name.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The builtin name.\n\t */\n\tgetBuiltinName( /*builder*/ ) {\n\n\t\treturn this._builtinName;\n\n\t}\n\n\t/**\n\t * Whether the current node builder has the builtin or not.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {boolean} Whether the builder has the builtin or not.\n\t */\n\thasBuiltin( builder ) {\n\n\t\treturn builder.hasBuiltin( this._builtinName );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst builtinName = this.getBuiltinName( builder );\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( builder.shaderStage === 'compute' ) {\n\n\t\t\treturn builder.format( builtinName, nodeType, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( `ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage` );\n\t\t\treturn builder.generateConst( nodeType );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.global = this.global;\n\t\tdata._builtinName = this._builtinName;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.global = data.global;\n\t\tthis._builtinName = data._builtinName;\n\n\t}\n\n}\n\nexport default ComputeBuiltinNode;\n\n/**\n * TSL function for creating a compute builtin node.\n *\n * @tsl\n * @function\n * @param {string} name - The built-in name.\n * @param {string} nodeType - The node type.\n * @returns {ComputeBuiltinNode}\n */\nconst computeBuiltin = ( name, nodeType ) => nodeObject( new ComputeBuiltinNode( name, nodeType ) );\n\n/**\n * Represents the number of workgroups dispatched by the compute shader.\n * ```js\n * // Run 512 invocations/threads with a workgroup size of 128.\n * const computeFn = Fn(() => {\n *\n *     // numWorkgroups.x = 4\n *     storageBuffer.element(0).assign(numWorkgroups.x)\n *\n * })().compute(512, [128]);\n *\n * // Run 512 invocations/threads with the default workgroup size of 64.\n * const computeFn = Fn(() => {\n *\n *     // numWorkgroups.x = 8\n *     storageBuffer.element(0).assign(numWorkgroups.x)\n *\n * })().compute(512);\n * ```\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nexport const numWorkgroups = /*@__PURE__*/ computeBuiltin( 'numWorkgroups', 'uvec3' );\n\n/**\n * Represents the 3-dimensional index of the workgroup the current compute invocation belongs to.\n * ```js\n * // Execute 12 compute threads with a workgroup size of 3.\n * const computeFn = Fn( () => {\n *\n * \tIf( workgroupId.x.mod( 2 ).equal( 0 ), () => {\n *\n * \t\tstorageBuffer.element( instanceIndex ).assign( instanceIndex );\n *\n * \t} ).Else( () => {\n *\n * \t\tstorageBuffer.element( instanceIndex ).assign( 0 );\n *\n * \t} );\n *\n * } )().compute( 12, [ 3 ] );\n *\n * // workgroupId.x =  [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];\n * // Buffer Output =  [0, 1, 2, 0, 0, 0, 6, 7, 8, 0, 0, 0];\n * ```\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nexport const workgroupId = /*@__PURE__*/ computeBuiltin( 'workgroupId', 'uvec3' );\n\n/**\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D global grid.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nexport const globalId = /*@__PURE__*/ computeBuiltin( 'globalId', 'uvec3' );\n/**\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D workgroup grid.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uvec3>}\n */\nexport const localId = /*@__PURE__*/ computeBuiltin( 'localId', 'uvec3' );\n\n/**\n * A device dependent variable that exposes the size of the current invocation's subgroup.\n *\n * @tsl\n * @type {ComputeBuiltinNode<uint>}\n */\nexport const subgroupSize = /*@__PURE__*/ computeBuiltin( 'subgroupSize', 'uint' );\n\n"],"mappings":"OAAOA,SAAU,yBACRC,eAAkB,oBAU3B,MAAMC,2BAA2BF,KAEhC,eAAWG,GAEV,MAAO,oBAER,CAQA,WAAAC,CAAaC,EAAaC,GAEzBC,MAAOD,GAQPE,KAAKC,aAAeJ,CAErB,CAQA,OAAAK,CAASC,GAER,OAAOH,KAAKI,eAAgBD,EAE7B,CAQA,WAAAE,GAEC,OAAOL,KAAKF,QAEb,CAQA,cAAAQ,CAAgBT,GAIf,OAFAG,KAAKC,aAAeJ,EAEbG,IAER,CAQA,cAAAI,GAEC,OAAOJ,KAAKC,YAEb,CAQA,UAAAM,CAAYJ,GAEX,OAAOA,EAAQI,WAAYP,KAAKC,aAEjC,CAEA,QAAAO,CAAUL,EAASM,GAElB,MAAMZ,EAAcG,KAAKI,eAAgBD,GACnCL,EAAWE,KAAKK,YAAaF,GAEnC,MAA6B,YAAxBA,EAAQO,YAELP,EAAQQ,OAAQd,EAAaC,EAAUW,IAI9CG,QAAQC,KAAM,8CAA8ChB,gCAA0CM,EAAQO,qBACvGP,EAAQW,cAAehB,GAIhC,CAEA,SAAAiB,CAAWC,GAEVjB,MAAMgB,UAAWC,GAEjBA,EAAKC,OAASjB,KAAKiB,OACnBD,EAAKf,aAAeD,KAAKC,YAE1B,CAEA,WAAAiB,CAAaF,GAEZjB,MAAMmB,YAAaF,GAEnBhB,KAAKiB,OAASD,EAAKC,OACnBjB,KAAKC,aAAee,EAAKf,YAE1B,iBAIcP,mBAWf,MAAMyB,eAAiB,CAAEC,EAAMtB,IAAcL,WAAY,IAAIC,mBAAoB0B,EAAMtB,WAyBhF,MAAMuB,cAA8BF,eAAgB,gBAAiB,gBA2BrE,MAAMG,YAA4BH,eAAgB,cAAe,gBAQjE,MAAMI,SAAyBJ,eAAgB,WAAY,gBAO3D,MAAMK,QAAwBL,eAAgB,UAAW,gBAQzD,MAAMM,aAA6BN,eAAgB,eAAgB","ignoreList":[]}