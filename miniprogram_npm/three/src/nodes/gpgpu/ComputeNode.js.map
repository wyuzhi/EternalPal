{"version":3,"file":"node_modules/three/src/nodes/gpgpu/ComputeNode.js","names":["Node","NodeUpdateType","addMethodChaining","nodeObject","ComputeNode","type","constructor","computeNode","workgroupSize","super","this","isComputeNode","count","version","name","updateBeforeType","OBJECT","onInitFunction","setCount","getCount","dispose","dispatchEvent","setName","label","console","warn","onInit","callback","updateBefore","renderer","compute","setup","builder","result","build","getNodeProperties","outputComputeNode","outputNode","generate","output","shaderStage","snippet","addLineFlowCode","computeKernel","node","length","error","i","val","Number","isInteger","push"],"sources":["node_modules/three/src/nodes/gpgpu/ComputeNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * TODO\n *\n * @augments Node\n */\nclass ComputeNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ComputeNode';\n\n\t}\n\n\t/**\n\t * Constructs a new compute node.\n\t *\n\t * @param {Node} computeNode - TODO\n\t * @param {Array<number>} workgroupSize - TODO.\n\t */\n\tconstructor( computeNode, workgroupSize ) {\n\n\t\tsuper( 'void' );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isComputeNode = true;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.computeNode = computeNode;\n\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {Array<number>}\n\t\t * @default [ 64 ]\n\t\t */\n\t\tthis.workgroupSize = workgroupSize;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.count = null;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = 1;\n\n\t\t/**\n\t\t * The name or label of the uniform.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.OBJECT` since {@link ComputeNode#updateBefore}\n\t\t * is executed once per object by default.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'object'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.OBJECT;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {?Function}\n\t\t */\n\t\tthis.onInitFunction = null;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n\tgetCount() {\n\n\t\treturn this.count;\n\n\t}\n\n\t/**\n\t * Executes the `dispose` event for this node.\n\t */\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\t/**\n\t * Sets the {@link ComputeNode#name} property.\n\t *\n\t * @param {string} name - The name of the uniform.\n\t * @return {ComputeNode} A reference to this node.\n\t */\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the {@link ComputeNode#name} property.\n\t *\n\t * @deprecated\n\t * @param {string} name - The name of the uniform.\n\t * @return {ComputeNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tconsole.warn( 'THREE.TSL: \"label()\" has been deprecated. Use \"setName()\" instead.' ); // @deprecated r179\n\n\t\treturn this.setName( name );\n\n\t}\n\n\t/**\n\t * TODO\n\t *\n\t * @param {Function} callback - TODO.\n\t * @return {ComputeNode} A reference to this node.\n\t */\n\tonInit( callback ) {\n\n\t\tthis.onInitFunction = callback;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * The method execute the compute for this node.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdateBefore( { renderer } ) {\n\n\t\trenderer.compute( this );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst result = this.computeNode.build( builder );\n\n\t\tif ( result ) {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\t\t\tproperties.outputComputeNode = result.outputNode;\n\n\t\t\tresult.outputNode = null;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { shaderStage } = builder;\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\n\n\t\t\tif ( snippet !== '' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\t\t\tconst outputComputeNode = properties.outputComputeNode;\n\n\t\t\tif ( outputComputeNode ) {\n\n\t\t\t\treturn outputComputeNode.build( builder, output );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default ComputeNode;\n\n/**\n * TSL function for creating a compute kernel node.\n *\n * @tsl\n * @function\n * @param {Node} node - TODO\n * @param {Array<number>} [workgroupSize=[64]] - TODO.\n * @returns {AtomicFunctionNode}\n */\nexport const computeKernel = ( node, workgroupSize = [ 64 ] ) => {\n\n\tif ( workgroupSize.length === 0 || workgroupSize.length > 3 ) {\n\n\t\tconsole.error( 'THREE.TSL: compute() workgroupSize must have 1, 2, or 3 elements' );\n\n\t}\n\n\tfor ( let i = 0; i < workgroupSize.length; i ++ ) {\n\n\t\tconst val = workgroupSize[ i ];\n\n\t\tif ( typeof val !== 'number' || val <= 0 || ! Number.isInteger( val ) ) {\n\n\t\t\tconsole.error( `THREE.TSL: compute() workgroupSize element at index [ ${ i } ] must be a positive integer` );\n\n\t\t}\n\n\t}\n\n\t// Implicit fill-up to [ x, y, z ] with 1s, just like WGSL treats @workgroup_size when fewer dimensions are specified\n\n\twhile ( workgroupSize.length < 3 ) workgroupSize.push( 1 );\n\n\t//\n\n\treturn nodeObject( new ComputeNode( nodeObject( node ), workgroupSize ) );\n\n};\n\n/**\n * TSL function for creating a compute node.\n *\n * @tsl\n * @function\n * @param {Node} node - TODO\n * @param {number} count - TODO.\n * @param {Array<number>} [workgroupSize=[64]] - TODO.\n * @returns {AtomicFunctionNode}\n */\nexport const compute = ( node, count, workgroupSize ) => computeKernel( node, workgroupSize ).setCount( count );\n\naddMethodChaining( 'compute', compute );\naddMethodChaining( 'computeKernel', computeKernel );\n"],"mappings":"OAAOA,SAAU,yBACRC,mBAAsB,8BACtBC,kBAAmBC,eAAkB,oBAO9C,MAAMC,oBAAoBJ,KAEzB,eAAWK,GAEV,MAAO,aAER,CAQA,WAAAC,CAAaC,EAAaC,GAEzBC,MAAO,QASPC,KAAKC,eAAgB,EAOrBD,KAAKH,YAAcA,EASnBG,KAAKF,cAAgBA,EAOrBE,KAAKE,MAAQ,KAObF,KAAKG,QAAU,EAQfH,KAAKI,KAAO,GASZJ,KAAKK,iBAAmBd,eAAee,OAOvCN,KAAKO,eAAiB,IAEvB,CAEA,QAAAC,CAAUN,GAIT,OAFAF,KAAKE,MAAQA,EAENF,IAER,CAEA,QAAAS,GAEC,OAAOT,KAAKE,KAEb,CAKA,OAAAQ,GAECV,KAAKW,cAAe,CAAEhB,KAAM,WAE7B,CAQA,OAAAiB,CAASR,GAIR,OAFAJ,KAAKI,KAAOA,EAELJ,IAER,CASA,KAAAa,CAAOT,GAIN,OAFAU,QAAQC,KAAM,sEAEPf,KAAKY,QAASR,EAEtB,CAQA,MAAAY,CAAQC,GAIP,OAFAjB,KAAKO,eAAiBU,EAEfjB,IAER,CAOA,YAAAkB,EAAcC,SAAEA,IAEfA,EAASC,QAASpB,KAEnB,CAEA,KAAAqB,CAAOC,GAEN,MAAMC,EAASvB,KAAKH,YAAY2B,MAAOF,GAEvC,GAAKC,EAAS,CAEMD,EAAQG,kBAAmBzB,MACnC0B,kBAAoBH,EAAOI,WAEtCJ,EAAOI,WAAa,IAErB,CAEA,OAAOJ,CAER,CAEA,QAAAK,CAAUN,EAASO,GAElB,MAAMC,YAAEA,GAAgBR,EAExB,GAAqB,YAAhBQ,EAA4B,CAEhC,MAAMC,EAAU/B,KAAKH,YAAY2B,MAAOF,EAAS,QAEhC,KAAZS,GAEJT,EAAQU,gBAAiBD,EAAS/B,KAIpC,KAAO,CAEN,MACM0B,EADaJ,EAAQG,kBAAmBzB,MACT0B,kBAErC,GAAKA,EAEJ,OAAOA,EAAkBF,MAAOF,EAASO,EAI3C,CAED,iBAIcnC,mBAWR,MAAMuC,cAAgB,CAAEC,EAAMpC,EAAgB,CAAE,QAExB,IAAzBA,EAAcqC,QAAgBrC,EAAcqC,OAAS,IAEzDrB,QAAQsB,MAAO,oEAIhB,IAAM,IAAIC,EAAI,EAAGA,EAAIvC,EAAcqC,OAAQE,IAAO,CAEjD,MAAMC,EAAMxC,EAAeuC,IAEP,iBAARC,GAAoBA,GAAO,IAAOC,OAAOC,UAAWF,KAE/DxB,QAAQsB,MAAO,yDAA0DC,iCAI3E,CAIA,KAAQvC,EAAcqC,OAAS,GAAIrC,EAAc2C,KAAM,GAIvD,OAAOhD,WAAY,IAAIC,YAAaD,WAAYyC,GAAQpC,GAAiB,SAcnE,MAAMsB,QAAU,CAAEc,EAAMhC,EAAOJ,IAAmBmC,cAAeC,EAAMpC,GAAgBU,SAAUN,GAExGV,kBAAmB,UAAW4B,SAC9B5B,kBAAmB,gBAAiByC","ignoreList":[]}