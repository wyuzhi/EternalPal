{"version":3,"file":"node_modules/three/src/nodes/gpgpu/WorkgroupInfoNode.js","names":["ArrayElementNode","nodeObject","Node","WorkgroupInfoElementNode","constructor","workgroupInfoNode","indexNode","super","this","isWorkgroupInfoElementNode","generate","builder","output","snippet","isAssignContext","context","assign","type","getNodeType","format","WorkgroupInfoNode","scope","bufferType","bufferCount","isWorkgroupInfoNode","elementType","name","setName","label","console","warn","setScope","getElementType","getInputType","element","id","getScopedArray","toLowerCase","workgroupArray","count"],"sources":["node_modules/three/src/nodes/gpgpu/WorkgroupInfoNode.js"],"sourcesContent":["import ArrayElementNode from '../utils/ArrayElementNode.js';\nimport { nodeObject } from '../tsl/TSLCore.js';\nimport Node from '../core/Node.js';\n\n/**\n * Represents an element of a 'workgroup' scoped buffer.\n *\n * @augments ArrayElementNode\n */\nclass WorkgroupInfoElementNode extends ArrayElementNode {\n\n\t/**\n\t * Constructs a new workgroup info element node.\n\t *\n\t * @param {Node} workgroupInfoNode - The workgroup info node.\n\t * @param {Node} indexNode - The index node that defines the element access.\n\t */\n\tconstructor( workgroupInfoNode, indexNode ) {\n\n\t\tsuper( workgroupInfoNode, indexNode );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWorkgroupInfoElementNode = true;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet snippet;\n\n\t\tconst isAssignContext = builder.context.assign;\n\t\tsnippet = super.generate( builder );\n\n\t\tif ( isAssignContext !== true ) {\n\n\t\t\tconst type = this.getNodeType( builder );\n\n\t\t\tsnippet = builder.format( snippet, type, output );\n\n\t\t}\n\n\t\t// TODO: Possibly activate clip distance index on index access rather than from clipping context\n\n\t\treturn snippet;\n\n\t}\n\n}\n\n/**\n * A node allowing the user to create a 'workgroup' scoped buffer within the\n * context of a compute shader. Typically, workgroup scoped buffers are\n * created to hold data that is transferred from a global storage scope into\n * a local workgroup scope. For invocations within a workgroup, data\n * access speeds on 'workgroup' scoped buffers can be significantly faster\n * than similar access operations on globally accessible storage buffers.\n *\n * This node can only be used with a WebGPU backend.\n *\n * @augments Node\n */\nclass WorkgroupInfoNode extends Node {\n\n\t/**\n\t * Constructs a new buffer scoped to type scope.\n\t *\n\t * @param {string} scope - TODO.\n\t * @param {string} bufferType - The data type of a 'workgroup' scoped buffer element.\n\t * @param {number} [bufferCount=0] - The number of elements in the buffer.\n\t */\n\tconstructor( scope, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( bufferType );\n\n\t\t/**\n\t\t * The buffer type.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.bufferType = bufferType;\n\n\t\t/**\n\t\t * The buffer count.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.bufferCount = bufferCount;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isWorkgroupInfoNode = true;\n\n\t\t/**\n\t\t * The data type of the array buffer.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.elementType = bufferType;\n\n\t\t/**\n\t\t * TODO.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.scope = scope;\n\n\t\t/**\n\t\t * The name of the workgroup scoped buffer.\n\t\t *\n\t\t * @type {string}\n\t\t * @default ''\n\t\t */\n\t\tthis.name = '';\n\n\t}\n\n\t/**\n\t * Sets the name of this node.\n\t *\n\t * @param {string} name - The name to set.\n\t * @return {WorkgroupInfoNode} A reference to this node.\n\t */\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the name/label of this node.\n\t *\n\t * @deprecated\n\t * @param {string} name - The name to set.\n\t * @return {WorkgroupInfoNode} A reference to this node.\n\t */\n\tlabel( name ) {\n\n\t\tconsole.warn( 'THREE.TSL: \"label()\" has been deprecated. Use \"setName()\" instead.' ); // @deprecated r179\n\n\t\treturn this.setName( name );\n\n\t}\n\n\t/**\n\t * Sets the scope of this node.\n\t *\n\t * @param {string} scope - The scope to set.\n\t * @return {WorkgroupInfoNode} A reference to this node.\n\t */\n\tsetScope( scope ) {\n\n\t\tthis.scope = scope;\n\n\t\treturn this;\n\n\t}\n\n\n\t/**\n\t * The data type of the array buffer.\n\t *\n\t * @return {string} The element type.\n\t */\n\tgetElementType() {\n\n\t\treturn this.elementType;\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation since the input type\n\t * is inferred from the scope.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The input type.\n\t */\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn `${this.scope}Array`;\n\n\t}\n\n\t/**\n\t * This method can be used to access elements via an index node.\n\t *\n\t * @param {IndexNode} indexNode - indexNode.\n\t * @return {WorkgroupInfoElementNode} A reference to an element.\n\t */\n\telement( indexNode ) {\n\n\t\treturn nodeObject( new WorkgroupInfoElementNode( this, indexNode ) );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst name = ( this.name !== '' ) ? this.name : `${this.scope}Array_${this.id}`;\n\n\t\treturn builder.getScopedArray( name, this.scope.toLowerCase(), this.bufferType, this.bufferCount );\n\n\t}\n\n}\n\nexport default WorkgroupInfoNode;\n\n/**\n * TSL function for creating a workgroup info node.\n * Creates a new 'workgroup' scoped array buffer.\n *\n * @tsl\n * @function\n * @param {string} type - The data type of a 'workgroup' scoped buffer element.\n * @param {number} [count=0] - The number of elements in the buffer.\n * @returns {WorkgroupInfoNode}\n */\nexport const workgroupArray = ( type, count ) => nodeObject( new WorkgroupInfoNode( 'Workgroup', type, count ) );\n\n\n"],"mappings":"OAAOA,qBAAsB,sCACpBC,eAAkB,2BACpBC,SAAU,kBAOjB,MAAMC,iCAAiCH,iBAQtC,WAAAI,CAAaC,EAAmBC,GAE/BC,MAAOF,EAAmBC,GAS1BE,KAAKC,4BAA6B,CAEnC,CAEA,QAAAC,CAAUC,EAASC,GAElB,IAAIC,EAEJ,MAAMC,EAAkBH,EAAQI,QAAQC,OAGxC,GAFAH,EAAUN,MAAMG,SAAUC,IAED,IAApBG,EAA2B,CAE/B,MAAMG,EAAOT,KAAKU,YAAaP,GAE/BE,EAAUF,EAAQQ,OAAQN,EAASI,EAAML,EAE1C,CAIA,OAAOC,CAER,EAgBD,MAAMO,0BAA0BlB,KAS/B,WAAAE,CAAaiB,EAAOC,EAAYC,EAAc,GAE7ChB,MAAOe,GAOPd,KAAKc,WAAaA,EAQlBd,KAAKe,YAAcA,EASnBf,KAAKgB,qBAAsB,EAO3BhB,KAAKiB,YAAcH,EAOnBd,KAAKa,MAAQA,EAQbb,KAAKkB,KAAO,EAEb,CAQA,OAAAC,CAASD,GAIR,OAFAlB,KAAKkB,KAAOA,EAELlB,IAER,CASA,KAAAoB,CAAOF,GAIN,OAFAG,QAAQC,KAAM,sEAEPtB,KAAKmB,QAASD,EAEtB,CAQA,QAAAK,CAAUV,GAIT,OAFAb,KAAKa,MAAQA,EAENb,IAER,CAQA,cAAAwB,GAEC,OAAOxB,KAAKiB,WAEb,CASA,YAAAQ,GAEC,MAAO,GAAGzB,KAAKa,YAEhB,CAQA,OAAAa,CAAS5B,GAER,OAAOL,WAAY,IAAIE,yBAA0BK,KAAMF,GAExD,CAEA,QAAAI,CAAUC,GAET,MAAMe,EAAuB,KAAdlB,KAAKkB,KAAgBlB,KAAKkB,KAAO,GAAGlB,KAAKa,cAAcb,KAAK2B,KAE3E,OAAOxB,EAAQyB,eAAgBV,EAAMlB,KAAKa,MAAMgB,cAAe7B,KAAKc,WAAYd,KAAKe,YAEtF,iBAIcH,yBAYR,MAAMkB,eAAiB,CAAErB,EAAMsB,IAAWtC,WAAY,IAAImB,kBAAmB,YAAaH,EAAMsB","ignoreList":[]}