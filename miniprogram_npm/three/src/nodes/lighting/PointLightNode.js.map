{"version":3,"file":"node_modules/three/src/nodes/lighting/PointLightNode.js","names":["AnalyticLightNode","getDistanceAttenuation","uniform","renderGroup","pointShadow","directPointLight","color","lightVector","cutoffDistance","decayExponent","lightDirection","normalize","lightDistance","length","attenuation","lightColor","mul","PointLightNode","type","constructor","light","super","this","cutoffDistanceNode","setGroup","decayExponentNode","update","frame","value","distance","decay","setupShadowNode","setupDirect","builder","colorNode","getLightVector"],"sources":["node_modules/three/src/nodes/lighting/PointLightNode.js"],"sourcesContent":["import AnalyticLightNode from './AnalyticLightNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { pointShadow } from './PointShadowNode.js';\n\nexport const directPointLight = ( { color, lightVector, cutoffDistance, decayExponent } ) => {\n\n\tconst lightDirection = lightVector.normalize();\n\tconst lightDistance = lightVector.length();\n\n\tconst attenuation = getDistanceAttenuation( {\n\t\tlightDistance,\n\t\tcutoffDistance,\n\t\tdecayExponent\n\t} );\n\n\tconst lightColor = color.mul( attenuation );\n\n\treturn { lightDirection, lightColor };\n\n};\n\n/**\n * Module for representing point lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass PointLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'PointLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new point light node.\n\t *\n\t * @param {?PointLight} [light=null] - The point light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the cutoff distance.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the decay exponent.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.decayExponentNode = uniform( 2 ).setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Overwritten to updated point light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tconst { light } = this;\n\n\t\tsuper.update( frame );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\t/**\n\t * Overwritten to setup point light specific shadow.\n\t *\n\t * @return {PointShadowNode}\n\t */\n\tsetupShadowNode() {\n\n\t\treturn pointShadow( this.light );\n\n\t}\n\n\tsetupDirect( builder ) {\n\n\t\treturn directPointLight( {\n\t\t\tcolor: this.colorNode,\n\t\t\tlightVector: this.getLightVector( builder ),\n\t\t\tcutoffDistance: this.cutoffDistanceNode,\n\t\t\tdecayExponent: this.decayExponentNode\n\t\t} );\n\n\t}\n\n}\n\nexport default PointLightNode;\n"],"mappings":"OAAOA,sBAAuB,gCACrBC,2BAA8B,yBAC9BC,YAAe,gCACfC,gBAAmB,qCACnBC,gBAAmB,8BAErB,MAAMC,iBAAmB,EAAIC,QAAOC,cAAaC,iBAAgBC,oBAEvE,MAAMC,EAAiBH,EAAYI,YAC7BC,EAAgBL,EAAYM,SAE5BC,EAAcb,uBAAwB,CAC3CW,gBACAJ,iBACAC,kBAKD,MAAO,CAAEC,iBAAgBK,WAFNT,EAAMU,IAAKF,GAEO,EAStC,MAAMG,uBAAuBjB,kBAE5B,eAAWkB,GAEV,MAAO,gBAER,CAOA,WAAAC,CAAaC,EAAQ,MAEpBC,MAAOD,GAOPE,KAAKC,mBAAqBrB,QAAS,GAAIsB,SAAUrB,aAOjDmB,KAAKG,kBAAoBvB,QAAS,GAAIsB,SAAUrB,YAEjD,CAOA,MAAAuB,CAAQC,GAEP,MAAMP,MAAEA,GAAUE,KAElBD,MAAMK,OAAQC,GAEdL,KAAKC,mBAAmBK,MAAQR,EAAMS,SACtCP,KAAKG,kBAAkBG,MAAQR,EAAMU,KAEtC,CAOA,eAAAC,GAEC,OAAO3B,YAAakB,KAAKF,MAE1B,CAEA,WAAAY,CAAaC,GAEZ,OAAO5B,iBAAkB,CACxBC,MAAOgB,KAAKY,UACZ3B,YAAae,KAAKa,eAAgBF,GAClCzB,eAAgBc,KAAKC,mBACrBd,cAAea,KAAKG,mBAGtB,iBAIcR","ignoreList":[]}