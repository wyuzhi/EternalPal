import SpotLightNode from"./SpotLightNode.js";import{float,Fn,If,vec2}from"../tsl/TSLCore.js";import{length,min,max,saturate,acos}from"../math/MathNode.js";import{div,sub}from"../math/OperatorNode.js";import{lightShadowMatrix}from"../accessors/Lights.js";import{positionWorld}from"../accessors/Position.js";const sdBox=Fn((([t,o])=>{const s=t.abs().sub(o);return length(max(s,0)).add(min(max(s.x,s.y),0))}));class ProjectorLightNode extends SpotLightNode{static get type(){return"ProjectorLightNode"}update(t){super.update(t);const o=this.light;if(this.penumbraCosNode.value=Math.min(Math.cos(o.angle*(1-o.penumbra)),.99999),null===o.aspect){let t=1;null!==o.map&&(t=o.map.width/o.map.height),o.shadow.aspect=t}else o.shadow.aspect=o.aspect}getSpotAttenuation(t){const o=float(0),s=this.penumbraCosNode,e=lightShadowMatrix(this.light).mul(t.context.positionWorld||positionWorld);return If(e.w.greaterThan(0),(()=>{const t=e.xyz.div(e.w),a=sdBox(t.xy.sub(vec2(.5)),vec2(.5)),i=div(-1,sub(1,acos(s)).sub(1));o.assign(saturate(a.mul(-2).mul(i)))})),o}}export default ProjectorLightNode;
//# sourceMappingURL=ProjectorLightNode.js.map