{"version":3,"file":"node_modules/three/src/nodes/lighting/ProjectorLightNode.js","names":["SpotLightNode","float","Fn","If","vec2","length","min","max","saturate","acos","div","sub","lightShadowMatrix","positionWorld","sdBox","p","b","d","abs","add","x","y","ProjectorLightNode","type","update","frame","super","light","this","penumbraCosNode","value","Math","cos","angle","penumbra","aspect","map","width","height","shadow","getSpotAttenuation","builder","attenuation","penumbraCos","spotLightCoord","mul","context","w","greaterThan","projectionUV","xyz","boxDist","xy","angleFactor","assign"],"sources":["node_modules/three/src/nodes/lighting/ProjectorLightNode.js"],"sourcesContent":["import SpotLightNode from './SpotLightNode.js';\n\nimport { float, Fn, If, vec2 } from '../tsl/TSLCore.js';\nimport { length, min, max, saturate, acos } from '../math/MathNode.js';\nimport { div, sub } from '../math/OperatorNode.js';\nimport { lightShadowMatrix } from '../accessors/Lights.js';\nimport { positionWorld } from '../accessors/Position.js';\n\nconst sdBox = /*@__PURE__*/ Fn( ( [ p, b ] ) => {\n\n\tconst d = p.abs().sub( b );\n\n\treturn length( max( d, 0.0 ) ).add( min( max( d.x, d.y ), 0.0 ) );\n\n} );\n\n/**\n * An implementation of a projector light node.\n *\n * @augments SpotLightNode\n */\nclass ProjectorLightNode extends SpotLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'ProjectorLightNode';\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst light = this.light;\n\n\t\tthis.penumbraCosNode.value = Math.min( Math.cos( light.angle * ( 1 - light.penumbra ) ), .99999 );\n\n\t\tif ( light.aspect === null ) {\n\n\t\t\tlet aspect = 1;\n\n\t\t\tif ( light.map !== null ) {\n\n\t\t\t\taspect = light.map.width / light.map.height;\n\n\t\t\t}\n\n\t\t\tlight.shadow.aspect = aspect;\n\n\t\t} else {\n\n\t\t\tlight.shadow.aspect = light.aspect;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Overwrites the default implementation to compute projection attenuation.\n\t *\n\t * @param {NodeBuilder} builder - The node builder.\n\t * @return {Node<float>} The spot attenuation.\n\t */\n\tgetSpotAttenuation( builder ) {\n\n\t\tconst attenuation = float( 0 );\n\t\tconst penumbraCos = this.penumbraCosNode;\n\n\t\t// compute the fragment's position in the light's clip space\n\n\t\tconst spotLightCoord = lightShadowMatrix( this.light ).mul( builder.context.positionWorld || positionWorld );\n\n\t\t// the sign of w determines whether the current fragment is in front or behind the light.\n\t\t// to avoid a back-projection, it's important to only compute an attenuation if w is positive\n\n\t\tIf( spotLightCoord.w.greaterThan( 0 ), () => {\n\n\t\t\tconst projectionUV = spotLightCoord.xyz.div( spotLightCoord.w );\n\t\t\tconst boxDist = sdBox( projectionUV.xy.sub( vec2( 0.5 ) ), vec2( 0.5 ) );\n\t\t\tconst angleFactor = div( - 1.0, sub( 1.0, acos( penumbraCos ) ).sub( 1.0 ) );\n\t\t\tattenuation.assign( saturate( boxDist.mul( - 2.0 ).mul( angleFactor ) ) );\n\n\t\t} );\n\n\t\treturn attenuation;\n\n\t}\n\n}\n\nexport default ProjectorLightNode;\n"],"mappings":"OAAOA,kBAAmB,4BAEjBC,MAAOC,GAAIC,GAAIC,SAAY,2BAC3BC,OAAQC,IAAKC,IAAKC,SAAUC,SAAY,6BACxCC,IAAKC,QAAW,iCAChBC,sBAAyB,gCACzBC,kBAAqB,2BAE9B,MAAMC,MAAsBZ,IAAI,EAAIa,EAAGC,MAEtC,MAAMC,EAAIF,EAAEG,MAAMP,IAAKK,GAEvB,OAAOX,OAAQE,IAAKU,EAAG,IAAQE,IAAKb,IAAKC,IAAKU,EAAEG,EAAGH,EAAEI,GAAK,GAAO,IASlE,MAAMC,2BAA2BtB,cAEhC,eAAWuB,GAEV,MAAO,oBAER,CAEA,MAAAC,CAAQC,GAEPC,MAAMF,OAAQC,GAEd,MAAME,EAAQC,KAAKD,MAInB,GAFAC,KAAKC,gBAAgBC,MAAQC,KAAKzB,IAAKyB,KAAKC,IAAKL,EAAMM,OAAU,EAAIN,EAAMO,WAAc,QAEnE,OAAjBP,EAAMQ,OAAkB,CAE5B,IAAIA,EAAS,EAEM,OAAdR,EAAMS,MAEVD,EAASR,EAAMS,IAAIC,MAAQV,EAAMS,IAAIE,QAItCX,EAAMY,OAAOJ,OAASA,CAEvB,MAECR,EAAMY,OAAOJ,OAASR,EAAMQ,MAI9B,CAQA,kBAAAK,CAAoBC,GAEnB,MAAMC,EAAczC,MAAO,GACrB0C,EAAcf,KAAKC,gBAInBe,EAAiBhC,kBAAmBgB,KAAKD,OAAQkB,IAAKJ,EAAQK,QAAQjC,eAAiBA,eAc7F,OATAV,GAAIyC,EAAeG,EAAEC,YAAa,IAAK,KAEtC,MAAMC,EAAeL,EAAeM,IAAIxC,IAAKkC,EAAeG,GACtDI,EAAUrC,MAAOmC,EAAaG,GAAGzC,IAAKP,KAAM,KAASA,KAAM,KAC3DiD,EAAc3C,KAAO,EAAKC,IAAK,EAAKF,KAAMkC,IAAgBhC,IAAK,IACrE+B,EAAYY,OAAQ9C,SAAU2C,EAAQN,KAAO,GAAMA,IAAKQ,IAAiB,IAInEX,CAER,iBAIcpB","ignoreList":[]}