import AnalyticLightNode from"./AnalyticLightNode.js";import{texture}from"../accessors/TextureNode.js";import{uniform}from"../core/UniformNode.js";import{lightViewPosition}from"../accessors/Lights.js";import{renderGroup}from"../core/UniformGroupNode.js";import{Matrix4}from"../../math/Matrix4.js";import{Vector3}from"../../math/Vector3.js";import{NodeUpdateType}from"../core/constants.js";const _matrix41=new Matrix4,_matrix42=new Matrix4;let _ltcLib=null;class RectAreaLightNode extends AnalyticLightNode{static get type(){return"RectAreaLightNode"}constructor(t=null){super(t),this.halfHeight=uniform(new Vector3).setGroup(renderGroup),this.halfWidth=uniform(new Vector3).setGroup(renderGroup),this.updateType=NodeUpdateType.RENDER}update(t){super.update(t);const{light:e}=this,i=t.camera.matrixWorldInverse;_matrix42.identity(),_matrix41.copy(e.matrixWorld),_matrix41.premultiply(i),_matrix42.extractRotation(_matrix41),this.halfWidth.value.set(.5*e.width,0,0),this.halfHeight.value.set(0,.5*e.height,0),this.halfWidth.value.applyMatrix4(_matrix42),this.halfHeight.value.applyMatrix4(_matrix42)}setupDirectRectArea(t){let e,i;t.isAvailable("float32Filterable")?(e=texture(_ltcLib.LTC_FLOAT_1),i=texture(_ltcLib.LTC_FLOAT_2)):(e=texture(_ltcLib.LTC_HALF_1),i=texture(_ltcLib.LTC_HALF_2));const{colorNode:r,light:o}=this;return{lightColor:r,lightPosition:lightViewPosition(o),halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:e,ltc_2:i}}static setLTC(t){_ltcLib=t}}export default RectAreaLightNode;
//# sourceMappingURL=RectAreaLightNode.js.map