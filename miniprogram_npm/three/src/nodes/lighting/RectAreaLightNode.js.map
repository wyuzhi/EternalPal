{"version":3,"file":"node_modules/three/src/nodes/lighting/RectAreaLightNode.js","names":["AnalyticLightNode","texture","uniform","lightViewPosition","renderGroup","Matrix4","Vector3","NodeUpdateType","_matrix41","_matrix42","_ltcLib","RectAreaLightNode","type","constructor","light","super","this","halfHeight","setGroup","halfWidth","updateType","RENDER","update","frame","viewMatrix","camera","matrixWorldInverse","identity","copy","matrixWorld","premultiply","extractRotation","value","set","width","height","applyMatrix4","setupDirectRectArea","builder","ltc_1","ltc_2","isAvailable","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","colorNode","lightColor","lightPosition","setLTC","ltc"],"sources":["node_modules/three/src/nodes/lighting/RectAreaLightNode.js"],"sourcesContent":["import AnalyticLightNode from './AnalyticLightNode.js';\nimport { texture } from '../accessors/TextureNode.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { lightViewPosition } from '../accessors/Lights.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\n\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nconst _matrix41 = /*@__PURE__*/ new Matrix4();\nconst _matrix42 = /*@__PURE__*/ new Matrix4();\n\nlet _ltcLib = null;\n\n/**\n * Module for representing rect area lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass RectAreaLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'RectAreaLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new rect area light node.\n\t *\n\t * @param {?RectAreaLight} [light=null] - The rect area light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the half height of the are light.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.halfHeight = uniform( new Vector3() ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the half width of the are light.\n\t\t *\n\t\t * @type {UniformNode<vec3>}\n\t\t */\n\t\tthis.halfWidth = uniform( new Vector3() ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * The `updateType` is set to `NodeUpdateType.RENDER` since the light\n\t\t * relies on `viewMatrix` which might vary per render call.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.RENDER;\n\n\t}\n\n\t/**\n\t * Overwritten to updated rect area light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tconst viewMatrix = frame.camera.matrixWorldInverse;\n\n\t\t_matrix42.identity();\n\t\t_matrix41.copy( light.matrixWorld );\n\t\t_matrix41.premultiply( viewMatrix );\n\t\t_matrix42.extractRotation( _matrix41 );\n\n\t\tthis.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );\n\t\tthis.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\tthis.halfWidth.value.applyMatrix4( _matrix42 );\n\t\tthis.halfHeight.value.applyMatrix4( _matrix42 );\n\n\t}\n\n\tsetupDirectRectArea( builder ) {\n\n\t\tlet ltc_1, ltc_2;\n\n\t\tif ( builder.isAvailable( 'float32Filterable' ) ) {\n\n\t\t\tltc_1 = texture( _ltcLib.LTC_FLOAT_1 );\n\t\t\tltc_2 = texture( _ltcLib.LTC_FLOAT_2 );\n\n\t\t} else {\n\n\t\t\tltc_1 = texture( _ltcLib.LTC_HALF_1 );\n\t\t\tltc_2 = texture( _ltcLib.LTC_HALF_2 );\n\n\t\t}\n\n\t\tconst { colorNode, light } = this;\n\n\t\tconst lightPosition = lightViewPosition( light );\n\n\t\treturn {\n\t\t\tlightColor: colorNode,\n\t\t\tlightPosition,\n\t\t\thalfWidth: this.halfWidth,\n\t\t\thalfHeight: this.halfHeight,\n\t\t\tltc_1,\n\t\t\tltc_2\n\t\t};\n\n\t}\n\n\t/**\n\t * Used to configure the internal BRDF approximation texture data.\n\t *\n\t * @param {RectAreaLightTexturesLib} ltc - The BRDF approximation texture data.\n\t */\n\tstatic setLTC( ltc ) {\n\n\t\t_ltcLib = ltc;\n\n\t}\n\n}\n\nexport default RectAreaLightNode;\n"],"mappings":"OAAOA,sBAAuB,gCACrBC,YAAe,qCACfC,YAAe,gCACfC,sBAAyB,gCACzBC,gBAAmB,qCAEnBC,YAAe,+BACfC,YAAe,+BACfC,mBAAsB,uBAE/B,MAAMC,UAA0B,IAAIH,QAC9BI,UAA0B,IAAIJ,QAEpC,IAAIK,QAAU,KAOd,MAAMC,0BAA0BX,kBAE/B,eAAWY,GAEV,MAAO,mBAER,CAOA,WAAAC,CAAaC,EAAQ,MAEpBC,MAAOD,GAOPE,KAAKC,WAAaf,QAAS,IAAII,SAAYY,SAAUd,aAOrDY,KAAKG,UAAYjB,QAAS,IAAII,SAAYY,SAAUd,aASpDY,KAAKI,WAAab,eAAec,MAElC,CAOA,MAAAC,CAAQC,GAEPR,MAAMO,OAAQC,GAEd,MAAMT,MAAEA,GAAUE,KAEZQ,EAAaD,EAAME,OAAOC,mBAEhCjB,UAAUkB,WACVnB,UAAUoB,KAAMd,EAAMe,aACtBrB,UAAUsB,YAAaN,GACvBf,UAAUsB,gBAAiBvB,WAE3BQ,KAAKG,UAAUa,MAAMC,IAAmB,GAAdnB,EAAMoB,MAAa,EAAK,GAClDlB,KAAKC,WAAWe,MAAMC,IAAK,EAAoB,GAAfnB,EAAMqB,OAAc,GAEpDnB,KAAKG,UAAUa,MAAMI,aAAc3B,WACnCO,KAAKC,WAAWe,MAAMI,aAAc3B,UAErC,CAEA,mBAAA4B,CAAqBC,GAEpB,IAAIC,EAAOC,EAENF,EAAQG,YAAa,sBAEzBF,EAAQtC,QAASS,QAAQgC,aACzBF,EAAQvC,QAASS,QAAQiC,eAIzBJ,EAAQtC,QAASS,QAAQkC,YACzBJ,EAAQvC,QAASS,QAAQmC,aAI1B,MAAMC,UAAEA,EAAShC,MAAEA,GAAUE,KAI7B,MAAO,CACN+B,WAAYD,EACZE,cAJqB7C,kBAAmBW,GAKxCK,UAAWH,KAAKG,UAChBF,WAAYD,KAAKC,WACjBsB,QACAC,QAGF,CAOA,aAAOS,CAAQC,GAEdxC,QAAUwC,CAEX,iBAIcvC","ignoreList":[]}