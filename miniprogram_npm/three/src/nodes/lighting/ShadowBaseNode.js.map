{"version":3,"file":"node_modules/three/src/nodes/lighting/ShadowBaseNode.js","names":["Node","NodeUpdateType","property","positionWorld","ShadowBaseNode","type","constructor","light","super","this","updateBeforeType","RENDER","isShadowBaseNode","setupShadowPosition","context","material","shadowPositionWorld","assign","receivedShadowPositionNode"],"sources":["node_modules/three/src/nodes/lighting/ShadowBaseNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { property } from '../tsl/TSLBase.js';\nimport { positionWorld } from '../accessors/Position.js';\n\n/**\n * Base class for all shadow nodes.\n *\n * Shadow nodes encapsulate shadow related logic and are always coupled to lighting nodes.\n * Lighting nodes might share the same shadow node type or use specific ones depending on\n * their requirements.\n *\n * @augments Node\n */\nclass ShadowBaseNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ShadowBaseNode';\n\n\t}\n\n\t/**\n\t * Constructs a new shadow base node.\n\t *\n\t * @param {Light} light - The shadow casting light.\n\t */\n\tconstructor( light ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The shadow casting light.\n\t\t *\n\t\t * @type {Light}\n\t\t */\n\t\tthis.light = light;\n\n\t\t/**\n\t\t * Overwritten since shadows are updated by default per render.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'render'\n\t\t */\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isShadowBaseNode = true;\n\n\t}\n\n\t/**\n\t * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.\n\t *\n\t * @param {NodeBuilder} object - A configuration object that must at least hold a material reference.\n\t */\n\tsetupShadowPosition( { context, material } ) {\n\n\t\t// Use assign inside an Fn()\n\n\t\tshadowPositionWorld.assign( material.receivedShadowPositionNode || context.shadowPositionWorld || positionWorld );\n\n\t}\n\n}\n\n/**\n * TSL object that represents the vertex position in world space during the shadow pass.\n *\n * @tsl\n * @type {Node<vec3>}\n */\nexport const shadowPositionWorld = /*@__PURE__*/ property( 'vec3', 'shadowPositionWorld' );\n\nexport default ShadowBaseNode;\n"],"mappings":"OAAOA,SAAU,yBACRC,mBAAsB,8BACtBC,aAAgB,2BAChBC,kBAAqB,2BAW9B,MAAMC,uBAAuBJ,KAE5B,eAAWK,GAEV,MAAO,gBAER,CAOA,WAAAC,CAAaC,GAEZC,QAOAC,KAAKF,MAAQA,EAQbE,KAAKC,iBAAmBT,eAAeU,OASvCF,KAAKG,kBAAmB,CAEzB,CAOA,mBAAAC,EAAqBC,QAAEA,EAAOC,SAAEA,IAI/BC,oBAAoBC,OAAQF,EAASG,4BAA8BJ,EAAQE,qBAAuBb,cAEnG,SAUM,MAAMa,oBAAoCd,SAAU,OAAQ,sCAEpDE","ignoreList":[]}