{"version":3,"file":"node_modules/three/src/nodes/lighting/SpotLightNode.js","names":["AnalyticLightNode","getDistanceAttenuation","uniform","smoothstep","renderGroup","lightTargetDirection","lightProjectionUV","texture","SpotLightNode","type","constructor","light","super","this","coneCosNode","setGroup","penumbraCosNode","cutoffDistanceNode","decayExponentNode","colorNode","color","update","frame","value","Math","cos","angle","penumbra","distance","decay","getSpotAttenuation","builder","angleCosine","getLightCoord","properties","getNodeProperties","projectionUV","undefined","context","positionWorld","setupDirect","lightVector","getLightVector","lightDirection","normalize","angleCos","dot","spotAttenuation","lightDistance","length","lightAttenuation","cutoffDistance","decayExponent","projected","lightCoord","lightColor","mul","map","xy","onRenderUpdate","sub","abs","lessThan","all","select"],"sources":["node_modules/three/src/nodes/lighting/SpotLightNode.js"],"sourcesContent":["import AnalyticLightNode from './AnalyticLightNode.js';\nimport { getDistanceAttenuation } from './LightUtils.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { smoothstep } from '../math/MathNode.js';\nimport { renderGroup } from '../core/UniformGroupNode.js';\nimport { lightTargetDirection, lightProjectionUV } from '../accessors/Lights.js';\nimport { texture } from '../accessors/TextureNode.js';\n\n/**\n * Module for representing spot lights as nodes.\n *\n * @augments AnalyticLightNode\n */\nclass SpotLightNode extends AnalyticLightNode {\n\n\tstatic get type() {\n\n\t\treturn 'SpotLightNode';\n\n\t}\n\n\t/**\n\t * Constructs a new spot light node.\n\t *\n\t * @param {?SpotLight} [light=null] - The spot light source.\n\t */\n\tconstructor( light = null ) {\n\n\t\tsuper( light );\n\n\t\t/**\n\t\t * Uniform node representing the cone cosine.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.coneCosNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the penumbra cosine.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.penumbraCosNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the cutoff distance.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.cutoffDistanceNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the decay exponent.\n\t\t *\n\t\t * @type {UniformNode<float>}\n\t\t */\n\t\tthis.decayExponentNode = uniform( 0 ).setGroup( renderGroup );\n\n\t\t/**\n\t\t * Uniform node representing the light color.\n\t\t *\n\t\t * @type {UniformNode<Color>}\n\t\t */\n\t\tthis.colorNode = uniform( this.color ).setGroup( renderGroup );\n\n\t}\n\n\t/**\n\t * Overwritten to updated spot light specific uniforms.\n\t *\n\t * @param {NodeFrame} frame - A reference to the current node frame.\n\t */\n\tupdate( frame ) {\n\n\t\tsuper.update( frame );\n\n\t\tconst { light } = this;\n\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\n\t\tthis.cutoffDistanceNode.value = light.distance;\n\t\tthis.decayExponentNode.value = light.decay;\n\n\t}\n\n\t/**\n\t * Computes the spot attenuation for the given angle.\n\t *\n\t * @param {NodeBuilder} builder - The node builder.\n\t * @param {Node<float>} angleCosine - The angle to compute the spot attenuation for.\n\t * @return {Node<float>} The spot attenuation.\n\t */\n\tgetSpotAttenuation( builder, angleCosine ) {\n\n\t\tconst { coneCosNode, penumbraCosNode } = this;\n\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\n\n\t}\n\n\tgetLightCoord( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\t\tlet projectionUV = properties.projectionUV;\n\n\t\tif ( projectionUV === undefined ) {\n\n\t\t\tprojectionUV = lightProjectionUV( this.light, builder.context.positionWorld );\n\n\t\t\tproperties.projectionUV = projectionUV;\n\n\t\t}\n\n\t\treturn projectionUV;\n\n\t}\n\n\tsetupDirect( builder ) {\n\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\n\n\t\tconst lightVector = this.getLightVector( builder );\n\n\t\tconst lightDirection = lightVector.normalize();\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\n\n\t\tconst spotAttenuation = this.getSpotAttenuation( builder, angleCos );\n\n\t\tconst lightDistance = lightVector.length();\n\n\t\tconst lightAttenuation = getDistanceAttenuation( {\n\t\t\tlightDistance,\n\t\t\tcutoffDistance: cutoffDistanceNode,\n\t\t\tdecayExponent: decayExponentNode\n\t\t} );\n\n\t\tlet lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\n\n\t\tlet projected, lightCoord;\n\n\t\tif ( light.colorNode ) {\n\n\t\t\tlightCoord = this.getLightCoord( builder );\n\t\t\tprojected = light.colorNode( lightCoord );\n\n\t\t} else if ( light.map ) {\n\n\t\t\tlightCoord = this.getLightCoord( builder );\n\t\t\tprojected = texture( light.map, lightCoord.xy ).onRenderUpdate( () => light.map );\n\n\t\t}\n\n\t\tif ( projected ) {\n\n\t\t\tconst inSpotLightMap = lightCoord.mul( 2. ).sub( 1. ).abs().lessThan( 1. ).all();\n\n\t\t\tlightColor = inSpotLightMap.select( lightColor.mul( projected ), lightColor );\n\n\t\t}\n\n\t\treturn { lightColor, lightDirection };\n\n\t}\n\n}\n\nexport default SpotLightNode;\n"],"mappings":"OAAOA,sBAAuB,gCACrBC,2BAA8B,yBAC9BC,YAAe,gCACfC,eAAkB,6BAClBC,gBAAmB,qCACnBC,qBAAsBC,sBAAyB,gCAC/CC,YAAe,8BAOxB,MAAMC,sBAAsBR,kBAE3B,eAAWS,GAEV,MAAO,eAER,CAOA,WAAAC,CAAaC,EAAQ,MAEpBC,MAAOD,GAOPE,KAAKC,YAAcZ,QAAS,GAAIa,SAAUX,aAO1CS,KAAKG,gBAAkBd,QAAS,GAAIa,SAAUX,aAO9CS,KAAKI,mBAAqBf,QAAS,GAAIa,SAAUX,aAOjDS,KAAKK,kBAAoBhB,QAAS,GAAIa,SAAUX,aAOhDS,KAAKM,UAAYjB,QAASW,KAAKO,OAAQL,SAAUX,YAElD,CAOA,MAAAiB,CAAQC,GAEPV,MAAMS,OAAQC,GAEd,MAAMX,MAAEA,GAAUE,KAElBA,KAAKC,YAAYS,MAAQC,KAAKC,IAAKd,EAAMe,OACzCb,KAAKG,gBAAgBO,MAAQC,KAAKC,IAAKd,EAAMe,OAAU,EAAIf,EAAMgB,WAEjEd,KAAKI,mBAAmBM,MAAQZ,EAAMiB,SACtCf,KAAKK,kBAAkBK,MAAQZ,EAAMkB,KAEtC,CASA,kBAAAC,CAAoBC,EAASC,GAE5B,MAAMlB,YAAEA,EAAWE,gBAAEA,GAAoBH,KAEzC,OAAOV,WAAYW,EAAaE,EAAiBgB,EAElD,CAEA,aAAAC,CAAeF,GAEd,MAAMG,EAAaH,EAAQI,kBAAmBtB,MAC9C,IAAIuB,EAAeF,EAAWE,aAU9B,YARsBC,IAAjBD,IAEJA,EAAe9B,kBAAmBO,KAAKF,MAAOoB,EAAQO,QAAQC,eAE9DL,EAAWE,aAAeA,GAIpBA,CAER,CAEA,WAAAI,CAAaT,GAEZ,MAAMZ,UAAEA,EAASF,mBAAEA,EAAkBC,kBAAEA,EAAiBP,MAAEA,GAAUE,KAE9D4B,EAAc5B,KAAK6B,eAAgBX,GAEnCY,EAAiBF,EAAYG,YAC7BC,EAAWF,EAAeG,IAAKzC,qBAAsBM,IAErDoC,EAAkBlC,KAAKiB,mBAAoBC,EAASc,GAEpDG,EAAgBP,EAAYQ,SAE5BC,EAAmBjD,uBAAwB,CAChD+C,gBACAG,eAAgBlC,EAChBmC,cAAelC,IAGhB,IAEImC,EAAWC,EAFXC,EAAapC,EAAUqC,IAAKT,GAAkBS,IAAKN,GAgBvD,GAZKvC,EAAMQ,WAEVmC,EAAazC,KAAKoB,cAAeF,GACjCsB,EAAY1C,EAAMQ,UAAWmC,IAElB3C,EAAM8C,MAEjBH,EAAazC,KAAKoB,cAAeF,GACjCsB,EAAY9C,QAASI,EAAM8C,IAAKH,EAAWI,IAAKC,gBAAgB,IAAMhD,EAAM8C,OAIxEJ,EAAY,CAIhBE,EAFuBD,EAAWE,IAAK,GAAKI,IAAK,GAAKC,MAAMC,SAAU,GAAKC,MAE/CC,OAAQT,EAAWC,IAAKH,GAAaE,EAElE,CAEA,MAAO,CAAEA,aAAYZ,iBAEtB,iBAIcnC","ignoreList":[]}