{"version":3,"file":"node_modules/three/src/nodes/materialx/MaterialXNodes.js","names":["mx_perlin_noise_float","mx_perlin_noise_vec3","worley_noise_float","worley_noise_vec2","worley_noise_vec3","cell_noise_float","unifiednoise2d","unifiednoise3d","fractal_noise_float","fractal_noise_vec2","fractal_noise_vec3","fractal_noise_vec4","mx_hsvtorgb","mx_rgbtohsv","mx_srgb_texture_to_lin_rec709","float","vec2","vec3","vec4","int","add","sub","mul","div","mod","atan","mix","pow","smoothstep","uv","bumpMap","rotate","frameId","time","mx_aastep","threshold","value","afwidth","dFdx","dFdy","length","_ramp","a","b","p","clamp","mx_ramplr","valuel","valuer","texcoord","mx_ramptb","valuet","valueb","mx_ramp4","valuetl","valuetr","valuebl","valuebr","u","x","v","y","top","bottom","_split","center","mx_splitlr","mx_splittb","mx_transform_uv","uv_scale","uv_offset","uv_geo","mx_safepower","in1","in2","abs","sign","mx_contrast","input","amount","pivot","mx_noise_float","amplitude","convert","mx_noise_vec3","mx_noise_vec4","mx_unifiednoise2d","noiseType","freq","offset","jitter","outmin","outmax","clampoutput","octaves","lacunarity","diminish","mx_unifiednoise3d","mx_worley_noise_float","mx_worley_noise_vec2","mx_worley_noise_vec3","mx_cell_noise_float","mx_fractal_noise_float","position","mx_fractal_noise_vec2","mx_fractal_noise_vec3","mx_fractal_noise_vec4","mx_add","mx_subtract","mx_multiply","mx_divide","mx_modulo","mx_power","mx_atan2","mx_timer","mx_frame","mx_invert","mx_ifgreater","value1","value2","greaterThan","mx_ifgreatereq","greaterThanEqual","mx_ifequal","equal","mx_separate","channelOrOut","map","r","g","z","w","c","replace","toLowerCase","undefined","element","mx_place2d","scale","rad","Math","PI","cosR","cos","sinR","sin","mx_rotate2d","radians","mx_rotate3d","axis","nAxis","normalize","cosA","sinA","oneMinusCosA","cross","dot","mx_heighttonormal"],"sources":["node_modules/three/src/nodes/materialx/MaterialXNodes.js"],"sourcesContent":["import {\n\tmx_perlin_noise_float, mx_perlin_noise_vec3,\n\tmx_worley_noise_float as worley_noise_float, mx_worley_noise_vec2 as worley_noise_vec2, mx_worley_noise_vec3 as worley_noise_vec3,\n\tmx_cell_noise_float as cell_noise_float,\n\tmx_unifiednoise2d as unifiednoise2d, mx_unifiednoise3d as unifiednoise3d,\n\tmx_fractal_noise_float as fractal_noise_float, mx_fractal_noise_vec2 as fractal_noise_vec2, mx_fractal_noise_vec3 as fractal_noise_vec3, mx_fractal_noise_vec4 as fractal_noise_vec4\n} from './lib/mx_noise.js';\nimport { mx_hsvtorgb, mx_rgbtohsv } from './lib/mx_hsv.js';\nimport { mx_srgb_texture_to_lin_rec709 } from './lib/mx_transform_color.js';\n\nimport { float, vec2, vec3, vec4, int, add, sub, mul, div, mod, atan, mix, pow, smoothstep } from '../tsl/TSLBase.js';\nimport { uv } from '../accessors/UV.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { rotate } from '../utils/RotateNode.js';\nimport { frameId, time } from '../utils/Timer.js';\n\nexport const mx_aastep = ( threshold, value ) => {\n\n\tthreshold = float( threshold );\n\tvalue = float( value );\n\n\tconst afwidth = vec2( value.dFdx(), value.dFdy() ).length().mul( 0.70710678118654757 );\n\n\treturn smoothstep( threshold.sub( afwidth ), threshold.add( afwidth ), value );\n\n};\n\nconst _ramp = ( a, b, uv, p ) => mix( a, b, uv[ p ].clamp() );\nexport const mx_ramplr = ( valuel, valuer, texcoord = uv() ) => _ramp( valuel, valuer, texcoord, 'x' );\nexport const mx_ramptb = ( valuet, valueb, texcoord = uv() ) => _ramp( valuet, valueb, texcoord, 'y' );\n\n// Bilinear ramp: interpolate between four corners (tl, tr, bl, br) using texcoord.x and texcoord.y\nexport const mx_ramp4 = (\n\tvaluetl, valuetr, valuebl, valuebr, texcoord = uv()\n) => {\n\n\tconst u = texcoord.x.clamp();\n\tconst v = texcoord.y.clamp();\n\tconst top = mix( valuetl, valuetr, u );\n\tconst bottom = mix( valuebl, valuebr, u );\n\treturn mix( top, bottom, v );\n\n};\n\nconst _split = ( a, b, center, uv, p ) => mix( a, b, mx_aastep( center, uv[ p ] ) );\nexport const mx_splitlr = ( valuel, valuer, center, texcoord = uv() ) => _split( valuel, valuer, center, texcoord, 'x' );\nexport const mx_splittb = ( valuet, valueb, center, texcoord = uv() ) => _split( valuet, valueb, center, texcoord, 'y' );\n\nexport const mx_transform_uv = ( uv_scale = 1, uv_offset = 0, uv_geo = uv() ) => uv_geo.mul( uv_scale ).add( uv_offset );\n\nexport const mx_safepower = ( in1, in2 = 1 ) => {\n\n\tin1 = float( in1 );\n\n\treturn in1.abs().pow( in2 ).mul( in1.sign() );\n\n};\n\nexport const mx_contrast = ( input, amount = 1, pivot = .5 ) => float( input ).sub( pivot ).mul( amount ).add( pivot );\n\nexport const mx_noise_float = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_float( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\n//export const mx_noise_vec2 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\nexport const mx_noise_vec3 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => mx_perlin_noise_vec3( texcoord.convert( 'vec2|vec3' ) ).mul( amplitude ).add( pivot );\nexport const mx_noise_vec4 = ( texcoord = uv(), amplitude = 1, pivot = 0 ) => {\n\n\ttexcoord = texcoord.convert( 'vec2|vec3' ); // overloading type\n\n\tconst noise_vec4 = vec4( mx_perlin_noise_vec3( texcoord ), mx_perlin_noise_float( texcoord.add( vec2( 19, 73 ) ) ) );\n\n\treturn noise_vec4.mul( amplitude ).add( pivot );\n\n};\n\nexport const mx_unifiednoise2d = ( noiseType, texcoord = uv(), freq = vec2( 1, 1 ), offset = vec2( 0, 0 ), jitter = 1, outmin = 0, outmax = 1, clampoutput = false, octaves = 1, lacunarity = 2, diminish = .5 ) => unifiednoise2d( noiseType, texcoord.convert( 'vec2|vec3' ), freq, offset, jitter, outmin, outmax, clampoutput, octaves, lacunarity, diminish );\nexport const mx_unifiednoise3d = ( noiseType, texcoord = uv(), freq = vec2( 1, 1 ), offset = vec2( 0, 0 ), jitter = 1, outmin = 0, outmax = 1, clampoutput = false, octaves = 1, lacunarity = 2, diminish = .5 ) => unifiednoise3d( noiseType, texcoord.convert( 'vec2|vec3' ), freq, offset, jitter, outmin, outmax, clampoutput, octaves, lacunarity, diminish );\n\nexport const mx_worley_noise_float = ( texcoord = uv(), jitter = 1 ) => worley_noise_float( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\nexport const mx_worley_noise_vec2 = ( texcoord = uv(), jitter = 1 ) => worley_noise_vec2( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\nexport const mx_worley_noise_vec3 = ( texcoord = uv(), jitter = 1 ) => worley_noise_vec3( texcoord.convert( 'vec2|vec3' ), jitter, int( 1 ) );\n\nexport const mx_cell_noise_float = ( texcoord = uv() ) => cell_noise_float( texcoord.convert( 'vec2|vec3' ) );\n\nexport const mx_fractal_noise_float = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_float( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nexport const mx_fractal_noise_vec2 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec2( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nexport const mx_fractal_noise_vec3 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec3( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\nexport const mx_fractal_noise_vec4 = ( position = uv(), octaves = 3, lacunarity = 2, diminish = .5, amplitude = 1 ) => fractal_noise_vec4( position, int( octaves ), lacunarity, diminish ).mul( amplitude );\n\nexport { mx_hsvtorgb, mx_rgbtohsv, mx_srgb_texture_to_lin_rec709 };\n\n// === Moved from MaterialXLoader.js ===\n\n// Math ops\nexport const mx_add = ( in1, in2 = float( 0 ) ) => add( in1, in2 );\nexport const mx_subtract = ( in1, in2 = float( 0 ) ) => sub( in1, in2 );\nexport const mx_multiply = ( in1, in2 = float( 1 ) ) => mul( in1, in2 );\nexport const mx_divide = ( in1, in2 = float( 1 ) ) => div( in1, in2 );\nexport const mx_modulo = ( in1, in2 = float( 1 ) ) => mod( in1, in2 );\nexport const mx_power = ( in1, in2 = float( 1 ) ) => pow( in1, in2 );\nexport const mx_atan2 = ( in1 = float( 0 ), in2 = float( 1 ) ) => atan( in1, in2 );\nexport const mx_timer = () => time;\nexport const mx_frame = () => frameId;\nexport const mx_invert = ( in1, amount = float( 1 ) ) => sub( amount, in1 );\nexport const mx_ifgreater = ( value1, value2, in1, in2 ) => value1.greaterThan( value2 ).mix( in1, in2 );\nexport const mx_ifgreatereq = ( value1, value2, in1, in2 ) => value1.greaterThanEqual( value2 ).mix( in1, in2 );\nexport const mx_ifequal = ( value1, value2, in1, in2 ) => value1.equal( value2 ).mix( in1, in2 );\n\n// Enhanced separate node to support multi-output referencing (outx, outy, outz, outw)\nexport const mx_separate = ( in1, channelOrOut = null ) => {\n\n\tif ( typeof channelOrOut === 'string' ) {\n\n\t\tconst map = { x: 0, r: 0, y: 1, g: 1, z: 2, b: 2, w: 3, a: 3 };\n\t\tconst c = channelOrOut.replace( /^out/, '' ).toLowerCase();\n\t\tif ( map[ c ] !== undefined ) return in1.element( map[ c ] );\n\n\t}\n\n\tif ( typeof channelOrOut === 'number' ) {\n\n\t\treturn in1.element( channelOrOut );\n\n\t}\n\n\tif ( typeof channelOrOut === 'string' && channelOrOut.length === 1 ) {\n\n\t\tconst map = { x: 0, r: 0, y: 1, g: 1, z: 2, b: 2, w: 3, a: 3 };\n\t\tif ( map[ channelOrOut ] !== undefined ) return in1.element( map[ channelOrOut ] );\n\n\t}\n\n\treturn in1;\n\n};\n\nexport const mx_place2d = (\n\ttexcoord, pivot = vec2( 0.5, 0.5 ), scale = vec2( 1, 1 ), rotate = float( 0 ), offset = vec2( 0, 0 )/*, operationorder = int( 0 )*/\n) => {\n\n\tlet uv = texcoord;\n\tif ( pivot ) uv = uv.sub( pivot );\n\tif ( scale ) uv = uv.mul( scale );\n\tif ( rotate ) {\n\n\t\tconst rad = rotate.mul( Math.PI / 180.0 );\n\t\tconst cosR = rad.cos();\n\t\tconst sinR = rad.sin();\n\t\tuv = vec2(\n\t\t\tuv.x.mul( cosR ).sub( uv.y.mul( sinR ) ),\n\t\t\tuv.x.mul( sinR ).add( uv.y.mul( cosR ) )\n\t\t);\n\n\t}\n\n\tif ( pivot ) uv = uv.add( pivot );\n\tif ( offset ) uv = uv.add( offset );\n\treturn uv;\n\n};\n\nexport const mx_rotate2d = ( input, amount ) => {\n\n\tinput = vec2( input );\n\tamount = float( amount );\n\n\tconst radians = amount.mul( Math.PI / 180.0 );\n\treturn rotate( input, radians );\n\n};\n\nexport const mx_rotate3d = ( input, amount, axis ) => {\n\n\tinput = vec3( input );\n\tamount = float( amount );\n\taxis = vec3( axis );\n\n\n\tconst radians = amount.mul( Math.PI / 180.0 );\n\tconst nAxis = axis.normalize();\n\tconst cosA = radians.cos();\n\tconst sinA = radians.sin();\n\tconst oneMinusCosA = float( 1 ).sub( cosA );\n\tconst rot =\n\t\tinput.mul( cosA )\n\t\t\t.add( nAxis.cross( input ).mul( sinA ) )\n\t\t\t.add( nAxis.mul( nAxis.dot( input ) ).mul( oneMinusCosA ) );\n\treturn rot;\n\n};\n\nexport const mx_heighttonormal = ( input, scale/*, texcoord*/ ) => {\n\n\tinput = vec3( input );\n\tscale = float( scale );\n\n\treturn bumpMap( input, scale );\n\n};\n"],"mappings":"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","ignoreList":[]}