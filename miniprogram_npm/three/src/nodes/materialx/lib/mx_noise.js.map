{"version":3,"file":"node_modules/three/src/nodes/materialx/lib/mx_noise.js","names":["int","uint","float","vec3","bool","uvec3","vec2","vec4","If","Fn","select","sub","mul","floor","abs","max","dot","min","sqrt","clamp","overloadingFn","Loop","mx_select","b_immutable","t_immutable","f_immutable","f","toVar","t","b","setLayout","name","type","inputs","mx_negate_if","val_immutable","val","negate","mx_floor","x_immutable","x","mx_floorfrac","i","assign","mx_bilerp_0","v0_immutable","v1_immutable","v2_immutable","v3_immutable","s_immutable","s","v3","v2","v1","v0","s1","add","mx_bilerp_1","mx_bilerp","mx_trilerp_0","v4_immutable","v5_immutable","v6_immutable","v7_immutable","r_immutable","r","v7","v6","v5","v4","t1","mx_trilerp_1","mx_trilerp","mx_gradient_float_0","hash_immutable","y_immutable","y","hash","h","bitAnd","u","lessThan","v","mx_gradient_float_1","z_immutable","z","equal","or","mx_gradient_float","mx_gradient_vec3_0","mx_gradient_vec3_1","mx_gradient_vec3","mx_gradient_scale2d_0","v_immutable","mx_gradient_scale3d_0","mx_gradient_scale2d_1","mx_gradient_scale2d","mx_gradient_scale3d_1","mx_gradient_scale3d","mx_rotl32","k_immutable","k","shiftLeft","bitOr","shiftRight","mx_bjmix","a","c","subAssign","bitXorAssign","addAssign","mx_bjfinal","a_immutable","c_immutable","mx_bits_to_01","bits_immutable","bits","div","mx_fade","mx_hash_int_0","len","seed","mx_hash_int_1","mx_hash_int_2","mx_hash_int_3","xx_immutable","xx","mx_hash_int_4","yy_immutable","yy","mx_hash_int","mx_hash_vec3_0","result","mx_hash_vec3_1","mx_hash_vec3","mx_perlin_noise_float_0","p_immutable","p","X","Y","fx","fy","mx_perlin_noise_float_1","Z","fz","w","mx_perlin_noise_float","mx_perlin_noise_vec3_0","mx_perlin_noise_vec3_1","mx_perlin_noise_vec3","mx_cell_noise_float_0","ix","mx_cell_noise_float_1","iy","mx_cell_noise_float_2","iz","mx_cell_noise_float_3","iw","mx_cell_noise_float","mx_cell_noise_vec3_0","mx_cell_noise_vec3_1","mx_cell_noise_vec3_2","mx_cell_noise_vec3_3","mx_cell_noise_vec3","mx_fractal_noise_float","octaves_immutable","lacunarity_immutable","diminish_immutable","diminish","lacunarity","octaves","amplitude","mulAssign","mx_fractal_noise_vec3","mx_fractal_noise_vec2","mx_fractal_noise_vec4","mx_worley_distance_0","xoff_immutable","yoff_immutable","jitter_immutable","metric_immutable","metric","jitter","yoff","xoff","tmp","off","cellpos","diff","mx_worley_distance_1","zoff_immutable","zoff","mx_worley_distance","mx_worley_noise_float_0","localpos","sqdist","start","end","condition","dist","mx_worley_noise_vec2_0","ElseIf","mx_worley_noise_vec3_0","mx_worley_noise_float_1","mx_worley_noise_float","mx_worley_noise_vec2_1","mx_worley_noise_vec2","mx_worley_noise_vec3_1","mx_worley_noise_vec3","mx_unifiednoise2d","noiseType_immutable","texcoord_immutable","freq_immutable","offset_immutable","outmin_immutable","outmax_immutable","clampoutput_immutable","noiseType","texcoord","freq","offset","outmin","outmax","clampoutput","mx_unifiednoise3d","position_immutable","position"],"sources":["node_modules/three/src/nodes/materialx/lib/mx_noise.js"],"sourcesContent":["// Three.js Transpiler\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\n\nimport { int, uint, float, vec3, bool, uvec3, vec2, vec4, If, Fn } from '../../tsl/TSLBase.js';\nimport { select } from '../../math/ConditionalNode.js';\nimport { sub, mul } from '../../math/OperatorNode.js';\nimport { floor, abs, max, dot, min, sqrt, clamp } from '../../math/MathNode.js';\nimport { overloadingFn } from '../../utils/FunctionOverloadingNode.js';\nimport { Loop } from '../../utils/LoopNode.js';\n\n\nexport const mx_select = /*@__PURE__*/ Fn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\n\n\tconst f = float( f_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst b = bool( b_immutable ).toVar();\n\n\treturn select( b, t, f );\n\n} ).setLayout( {\n\tname: 'mx_select',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'b', type: 'bool' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'f', type: 'float' }\n\t]\n} );\n\nexport const mx_negate_if = /*@__PURE__*/ Fn( ( [ val_immutable, b_immutable ] ) => {\n\n\tconst b = bool( b_immutable ).toVar();\n\tconst val = float( val_immutable ).toVar();\n\n\treturn select( b, val.negate(), val );\n\n} ).setLayout( {\n\tname: 'mx_negate_if',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'val', type: 'float' },\n\t\t{ name: 'b', type: 'bool' }\n\t]\n} );\n\nexport const mx_floor = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\n\treturn int( floor( x ) );\n\n} ).setLayout( {\n\tname: 'mx_floor',\n\ttype: 'int',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nexport const mx_floorfrac = /*@__PURE__*/ Fn( ( [ x_immutable, i ] ) => {\n\n\tconst x = float( x_immutable ).toVar();\n\ti.assign( mx_floor( x ) );\n\n\treturn x.sub( float( i ) );\n\n} );\n\nexport const mx_bilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_bilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_bilerp = /*@__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\n\nexport const mx_trilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = float( v7_immutable ).toVar();\n\tconst v6 = float( v6_immutable ).toVar();\n\tconst v5 = float( v5_immutable ).toVar();\n\tconst v4 = float( v4_immutable ).toVar();\n\tconst v3 = float( v3_immutable ).toVar();\n\tconst v2 = float( v2_immutable ).toVar();\n\tconst v1 = float( v1_immutable ).toVar();\n\tconst v0 = float( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v0', type: 'float' },\n\t\t{ name: 'v1', type: 'float' },\n\t\t{ name: 'v2', type: 'float' },\n\t\t{ name: 'v3', type: 'float' },\n\t\t{ name: 'v4', type: 'float' },\n\t\t{ name: 'v5', type: 'float' },\n\t\t{ name: 'v6', type: 'float' },\n\t\t{ name: 'v7', type: 'float' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nexport const mx_trilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\n\n\tconst r = float( r_immutable ).toVar();\n\tconst t = float( t_immutable ).toVar();\n\tconst s = float( s_immutable ).toVar();\n\tconst v7 = vec3( v7_immutable ).toVar();\n\tconst v6 = vec3( v6_immutable ).toVar();\n\tconst v5 = vec3( v5_immutable ).toVar();\n\tconst v4 = vec3( v4_immutable ).toVar();\n\tconst v3 = vec3( v3_immutable ).toVar();\n\tconst v2 = vec3( v2_immutable ).toVar();\n\tconst v1 = vec3( v1_immutable ).toVar();\n\tconst v0 = vec3( v0_immutable ).toVar();\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\n\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_trilerp_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v0', type: 'vec3' },\n\t\t{ name: 'v1', type: 'vec3' },\n\t\t{ name: 'v2', type: 'vec3' },\n\t\t{ name: 'v3', type: 'vec3' },\n\t\t{ name: 'v4', type: 'vec3' },\n\t\t{ name: 'v5', type: 'vec3' },\n\t\t{ name: 'v6', type: 'vec3' },\n\t\t{ name: 'v7', type: 'vec3' },\n\t\t{ name: 's', type: 'float' },\n\t\t{ name: 't', type: 'float' },\n\t\t{ name: 'r', type: 'float' }\n\t]\n} );\n\nexport const mx_trilerp = /*@__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\n\nexport const mx_gradient_float_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_float_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uint( hash_immutable ).toVar();\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\n\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uint' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_float = /*@__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\n\nexport const mx_gradient_vec3_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\n\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_vec3_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = float( z_immutable ).toVar();\n\tconst y = float( y_immutable ).toVar();\n\tconst x = float( x_immutable ).toVar();\n\tconst hash = uvec3( hash_immutable ).toVar();\n\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\n\n} ).setLayout( {\n\tname: 'mx_gradient_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'hash', type: 'uvec3' },\n\t\t{ name: 'x', type: 'float' },\n\t\t{ name: 'y', type: 'float' },\n\t\t{ name: 'z', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_vec3 = /*@__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\n\nexport const mx_gradient_scale2d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_scale3d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = float( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'v', type: 'float' }\n\t]\n} );\n\nexport const mx_gradient_scale2d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.6616, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale2d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nexport const mx_gradient_scale2d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\n\nexport const mx_gradient_scale3d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\n\n\tconst v = vec3( v_immutable ).toVar();\n\n\treturn mul( 0.9820, v );\n\n} ).setLayout( {\n\tname: 'mx_gradient_scale3d_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'v', type: 'vec3' }\n\t]\n} );\n\nexport const mx_gradient_scale3d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\n\nexport const mx_rotl32 = /*@__PURE__*/ Fn( ( [ x_immutable, k_immutable ] ) => {\n\n\tconst k = int( k_immutable ).toVar();\n\tconst x = uint( x_immutable ).toVar();\n\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\n\n} ).setLayout( {\n\tname: 'mx_rotl32',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'uint' },\n\t\t{ name: 'k', type: 'int' }\n\t]\n} );\n\nexport const mx_bjmix = /*@__PURE__*/ Fn( ( [ a, b, c ] ) => {\n\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\n\tb.addAssign( a );\n\ta.subAssign( c );\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\n\tc.addAssign( b );\n\tb.subAssign( a );\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\n\ta.addAssign( c );\n\tc.subAssign( b );\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\n\tb.addAssign( a );\n\n} );\n\nexport const mx_bjfinal = /*@__PURE__*/ Fn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\n\n\tconst c = uint( c_immutable ).toVar();\n\tconst b = uint( b_immutable ).toVar();\n\tconst a = uint( a_immutable ).toVar();\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\n\ta.bitXorAssign( c );\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\n\tb.bitXorAssign( a );\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\n\tc.bitXorAssign( b );\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\n\n\treturn c;\n\n} ).setLayout( {\n\tname: 'mx_bjfinal',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'a', type: 'uint' },\n\t\t{ name: 'b', type: 'uint' },\n\t\t{ name: 'c', type: 'uint' }\n\t]\n} );\n\nexport const mx_bits_to_01 = /*@__PURE__*/ Fn( ( [ bits_immutable ] ) => {\n\n\tconst bits = uint( bits_immutable ).toVar();\n\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_bits_to_01',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'bits', type: 'uint' }\n\t]\n} );\n\nexport const mx_fade = /*@__PURE__*/ Fn( ( [ t_immutable ] ) => {\n\n\tconst t = float( t_immutable ).toVar();\n\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\n\n} ).setLayout( {\n\tname: 'mx_fade',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 't', type: 'float' }\n\t]\n} );\n\nexport const mx_hash_int_0 = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\n\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 1 ) ).toVar();\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\n\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_0',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 2 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_1',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_2 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 3 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_2',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_3 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\n\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 4 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_3',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int_4 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\n\n\tconst yy = int( yy_immutable ).toVar();\n\tconst xx = int( xx_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst len = uint( uint( 5 ) ).toVar();\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\n\ta.addAssign( uint( x ) );\n\tb.addAssign( uint( y ) );\n\tc.addAssign( uint( z ) );\n\tmx_bjmix( a, b, c );\n\ta.addAssign( uint( xx ) );\n\tb.addAssign( uint( yy ) );\n\n\treturn mx_bjfinal( a, b, c );\n\n} ).setLayout( {\n\tname: 'mx_hash_int_4',\n\ttype: 'uint',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xx', type: 'int' },\n\t\t{ name: 'yy', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_int = /*@__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\n\nexport const mx_hash_vec3_0 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\n\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_0',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_vec3_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\n\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\n\tconst result = uvec3().toVar();\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_hash_vec3_1',\n\ttype: 'uvec3',\n\tinputs: [\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' }\n\t]\n} );\n\nexport const mx_hash_vec3 = /*@__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\n\nexport const mx_perlin_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_perlin_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_perlin_noise_float = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\n\nexport const mx_perlin_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\n\n\treturn mx_gradient_scale2d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_perlin_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\n\tconst u = float( mx_fade( fx ) ).toVar();\n\tconst v = float( mx_fade( fy ) ).toVar();\n\tconst w = float( mx_fade( fz ) ).toVar();\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\n\n\treturn mx_gradient_scale3d( result );\n\n} ).setLayout( {\n\tname: 'mx_perlin_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_perlin_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\n\nexport const mx_cell_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nexport const mx_cell_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_cell_noise_float_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_2',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_cell_noise_float_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_float_3',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nexport const mx_cell_noise_float = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\n\nexport const mx_cell_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = float( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'float' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec2( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec3( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_2',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\n\n\tconst p = vec4( p_immutable ).toVar();\n\tconst ix = int( mx_floor( p.x ) ).toVar();\n\tconst iy = int( mx_floor( p.y ) ).toVar();\n\tconst iz = int( mx_floor( p.z ) ).toVar();\n\tconst iw = int( mx_floor( p.w ) ).toVar();\n\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\n\n} ).setLayout( {\n\tname: 'mx_cell_noise_vec3_3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec4' }\n\t]\n} );\n\nexport const mx_cell_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\n\nexport const mx_fractal_noise_float = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = float( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_float',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec3 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst result = vec3( 0.0 ).toVar();\n\tconst amplitude = float( 1.0 ).toVar();\n\n\tLoop( octaves, () => {\n\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\n\t\tamplitude.mulAssign( diminish );\n\t\tp.mulAssign( lacunarity );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec2 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\n\treturn vec2( mx_fractal_noise_float( p, octaves, lacunarity, diminish ), mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec2',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_fractal_noise_vec4 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\n\n\tconst diminish = float( diminish_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst c = vec3( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) ).toVar();\n\tconst f = float( mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\n\n\treturn vec4( c, f );\n\n} ).setLayout( {\n\tname: 'mx_fractal_noise_vec4',\n\ttype: 'vec4',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\nexport const mx_worley_distance_0 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max( abs( diff.x ), abs( diff.y ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_distance_1 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst zoff = int( zoff_immutable ).toVar();\n\tconst yoff = int( yoff_immutable ).toVar();\n\tconst xoff = int( xoff_immutable ).toVar();\n\tconst z = int( z_immutable ).toVar();\n\tconst y = int( y_immutable ).toVar();\n\tconst x = int( x_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\n\toff.subAssign( 0.5 );\n\toff.mulAssign( jitter );\n\toff.addAssign( 0.5 );\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\n\n\tIf( metric.equal( int( 2 ) ), () => {\n\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\n\n\t} );\n\n\tIf( metric.equal( int( 3 ) ), () => {\n\n\t\treturn max( abs( diff.x ), abs( diff.y ), abs( diff.z ) );\n\n\t} );\n\n\treturn dot( diff, diff );\n\n} ).setLayout( {\n\tname: 'mx_worley_distance_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'x', type: 'int' },\n\t\t{ name: 'y', type: 'int' },\n\t\t{ name: 'z', type: 'int' },\n\t\t{ name: 'xoff', type: 'int' },\n\t\t{ name: 'yoff', type: 'int' },\n\t\t{ name: 'zoff', type: 'int' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_distance = /*@__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\n\nexport const mx_worley_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\t\t\tsqdist.assign( min( sqdist, dist ) );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_0',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec2_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_0',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec2( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar();\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\n\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_0',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = float( 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\t\t\t\tsqdist.assign( min( sqdist, dist ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_float_1',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_float = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\n\nexport const mx_worley_noise_vec2_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec2_1',\n\ttype: 'vec2',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec2 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\n\nexport const mx_worley_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\n\n\tconst metric = int( metric_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst p = vec3( p_immutable ).toVar();\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\n\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\n\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\n\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\n\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\n\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\n\t\t\t\t\tsqdist.x.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\n\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\n\t\t\t\t\tsqdist.y.assign( dist );\n\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\n\n\t\t\t\t\tsqdist.z.assign( dist );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t} );\n\n\t} );\n\n\tIf( metric.equal( int( 0 ) ), () => {\n\n\t\tsqdist.assign( sqrt( sqdist ) );\n\n\t} );\n\n\treturn sqdist;\n\n} ).setLayout( {\n\tname: 'mx_worley_noise_vec3_1',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'metric', type: 'int' }\n\t]\n} );\n\nexport const mx_worley_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\n\n// Unified Noise 2D\nexport const mx_unifiednoise2d = /*@__PURE__*/ Fn( ( [\n\tnoiseType_immutable, texcoord_immutable, freq_immutable, offset_immutable,\n\tjitter_immutable, outmin_immutable, outmax_immutable, clampoutput_immutable,\n\toctaves_immutable, lacunarity_immutable, diminish_immutable\n] ) => {\n\n\tconst noiseType = int( noiseType_immutable ).toVar();\n\tconst texcoord = vec2( texcoord_immutable ).toVar();\n\tconst freq = vec2( freq_immutable ).toVar();\n\tconst offset = vec2( offset_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst outmin = float( outmin_immutable ).toVar();\n\tconst outmax = float( outmax_immutable ).toVar();\n\tconst clampoutput = bool( clampoutput_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst diminish = float( diminish_immutable ).toVar();\n\n\t// Compute input position\n\tconst p = texcoord.mul( freq ).add( offset );\n\n\tconst result = float( 0.0 ).toVar();\n\n\t// Perlin\n\tIf( noiseType.equal( int( 0 ) ), () => {\n\n\t\tresult.assign( mx_perlin_noise_vec3( p ) );\n\n\t} );\n\n\t// Cell\n\tIf( noiseType.equal( int( 1 ) ), () => {\n\n\t\tresult.assign( mx_cell_noise_vec3( p ) );\n\n\t} );\n\n\t// Worley (metric=0 = euclidean)\n\tIf( noiseType.equal( int( 2 ) ), () => {\n\n\t\tresult.assign( mx_worley_noise_vec3( p, jitter, int( 0 ) ) );\n\n\t} );\n\n\t// Fractal (use vec3(p, 0.0) for 2D input)\n\tIf( noiseType.equal( int( 3 ) ), () => {\n\n\t\tresult.assign( mx_fractal_noise_vec3( vec3( p, 0.0 ), octaves, lacunarity, diminish ) );\n\n\t} );\n\n\t// Remap output to [outmin, outmax]\n\tresult.assign( result.mul( outmax.sub( outmin ) ).add( outmin ) );\n\n\t// Clamp if requested\n\tIf( clampoutput, () => {\n\n\t\tresult.assign( clamp( result, outmin, outmax ) );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_unifiednoise2d',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'noiseType', type: 'int' },\n\t\t{ name: 'texcoord', type: 'vec2' },\n\t\t{ name: 'freq', type: 'vec2' },\n\t\t{ name: 'offset', type: 'vec2' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'outmin', type: 'float' },\n\t\t{ name: 'outmax', type: 'float' },\n\t\t{ name: 'clampoutput', type: 'bool' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n\n// Unified Noise 3D\nexport const mx_unifiednoise3d = /*@__PURE__*/ Fn( ( [\n\tnoiseType_immutable, position_immutable, freq_immutable, offset_immutable,\n\tjitter_immutable, outmin_immutable, outmax_immutable, clampoutput_immutable,\n\toctaves_immutable, lacunarity_immutable, diminish_immutable\n] ) => {\n\n\tconst noiseType = int( noiseType_immutable ).toVar();\n\tconst position = vec3( position_immutable ).toVar();\n\tconst freq = vec3( freq_immutable ).toVar();\n\tconst offset = vec3( offset_immutable ).toVar();\n\tconst jitter = float( jitter_immutable ).toVar();\n\tconst outmin = float( outmin_immutable ).toVar();\n\tconst outmax = float( outmax_immutable ).toVar();\n\tconst clampoutput = bool( clampoutput_immutable ).toVar();\n\tconst octaves = int( octaves_immutable ).toVar();\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\n\tconst diminish = float( diminish_immutable ).toVar();\n\n\t// Compute input position\n\tconst p = position.mul( freq ).add( offset );\n\n\tconst result = float( 0.0 ).toVar();\n\n\t// Perlin\n\tIf( noiseType.equal( int( 0 ) ), () => {\n\n\t\tresult.assign( mx_perlin_noise_vec3( p ) );\n\n\t} );\n\n\t// Cell\n\tIf( noiseType.equal( int( 1 ) ), () => {\n\n\t\tresult.assign( mx_cell_noise_vec3( p ) );\n\n\t} );\n\n\t// Worley (metric=0 = euclidean)\n\tIf( noiseType.equal( int( 2 ) ), () => {\n\n\t\tresult.assign( mx_worley_noise_vec3( p, jitter, int( 0 ) ) );\n\n\t} );\n\n\t// Fractal\n\tIf( noiseType.equal( int( 3 ) ), () => {\n\n\t\tresult.assign( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) );\n\n\t} );\n\n\t// Remap output to [outmin, outmax]\n\tresult.assign( result.mul( outmax.sub( outmin ) ).add( outmin ) );\n\n\t// Clamp if requested\n\tIf( clampoutput, () => {\n\n\t\tresult.assign( clamp( result, outmin, outmax ) );\n\n\t} );\n\n\treturn result;\n\n} ).setLayout( {\n\tname: 'mx_unifiednoise3d',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'noiseType', type: 'int' },\n\t\t{ name: 'position', type: 'vec3' },\n\t\t{ name: 'freq', type: 'vec3' },\n\t\t{ name: 'offset', type: 'vec3' },\n\t\t{ name: 'jitter', type: 'float' },\n\t\t{ name: 'outmin', type: 'float' },\n\t\t{ name: 'outmax', type: 'float' },\n\t\t{ name: 'clampoutput', type: 'bool' },\n\t\t{ name: 'octaves', type: 'int' },\n\t\t{ name: 'lacunarity', type: 'float' },\n\t\t{ name: 'diminish', type: 'float' }\n\t]\n} );\n"],"mappings":"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","ignoreList":[]}