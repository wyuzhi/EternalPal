{"version":3,"file":"node_modules/three/src/nodes/math/MathUtils.js","names":["sub","mul","div","add","PI","pow","sin","parabola","x","k","gain","lessThan","pcurve","a","b","sinc"],"sources":["node_modules/three/src/nodes/math/MathUtils.js"],"sourcesContent":["import { sub, mul, div, add } from './OperatorNode.js';\nimport { PI, pow, sin } from './MathNode.js';\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * The corners are mapped to `0` and the center to `1`.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} k - Allows to control the remapping functions shape by rising the parabola to a power `k`.\n * @return {Node<float>} The remapped value.\n */\nexport const parabola = ( x, k ) => pow( mul( 4.0, x.mul( sub( 1.0, x ) ) ), k );\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * Expands the sides and compresses the center, and keeps `0.5` mapped to `0.5`.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} k - `k=1` is the identity curve,`k<1` produces the classic `gain()` shape, and `k>1` produces \"s\" shaped curves.\n * @return {Node<float>} The remapped value.\n */\nexport const gain = ( x, k ) => x.lessThan( 0.5 ) ? parabola( x.mul( 2.0 ), k ).div( 2.0 ) : sub( 1.0, parabola( mul( sub( 1.0, x ), 2.0 ), k ).div( 2.0 ) );\n\n/**\n * A function that remaps the `[0,1]` interval into the `[0,1]` interval.\n * A generalization of the `parabola()`. Keeps the corners mapped to 0 but allows the control of the shape one either side of the curve.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to remap.\n * @param {Node<float>} a - First control parameter.\n * @param {Node<float>} b - Second control parameter.\n * @return {Node<float>} The remapped value.\n */\nexport const pcurve = ( x, a, b ) => pow( div( pow( x, a ), add( pow( x, a ), pow( sub( 1.0, x ), b ) ) ), 1.0 / a );\n\n/**\n * A phase shifted sinus curve that starts at zero and ends at zero, with bouncing behavior.\n * Reference: {@link https://iquilezles.org/articles/functions/}.\n *\n * @tsl\n * @function\n * @param {Node<float>} x - The value to compute the sin for.\n * @param {Node<float>} k - Controls the amount of bounces.\n * @return {Node<float>} The result value.\n */\nexport const sinc = ( x, k ) => sin( PI.mul( k.mul( x ).sub( 1.0 ) ) ).div( PI.mul( k.mul( x ).sub( 1.0 ) ) );\n"],"mappings":"OAASA,IAAKC,IAAKC,IAAKC,QAAW,2BAC1BC,GAAIC,IAAKC,QAAW,uBAatB,MAAMC,SAAW,CAAEC,EAAGC,IAAOJ,IAAKJ,IAAK,EAAKO,EAAEP,IAAKD,IAAK,EAAKQ,KAASC,UAatE,MAAMC,KAAO,CAAEF,EAAGC,IAAOD,EAAEG,SAAU,IAAQJ,SAAUC,EAAEP,IAAK,GAAOQ,GAAIP,IAAK,GAAQF,IAAK,EAAKO,SAAUN,IAAKD,IAAK,EAAKQ,GAAK,GAAOC,GAAIP,IAAK,WAc9I,MAAMU,OAAS,CAAEJ,EAAGK,EAAGC,IAAOT,IAAKH,IAAKG,IAAKG,EAAGK,GAAKV,IAAKE,IAAKG,EAAGK,GAAKR,IAAKL,IAAK,EAAKQ,GAAKM,KAAS,EAAMD,UAY1G,MAAME,KAAO,CAAEP,EAAGC,IAAOH,IAAKF,GAAGH,IAAKQ,EAAER,IAAKO,GAAIR,IAAK,KAAUE,IAAKE,GAAGH,IAAKQ,EAAER,IAAKO,GAAIR,IAAK","ignoreList":[]}