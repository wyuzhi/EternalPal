import{WebGLCoordinateSystem}from"../../constants.js";import TempNode from"../core/TempNode.js";import{addMethodChaining,Fn,int,nodeProxyIntent}from"../tsl/TSLCore.js";const _vectorOperators={"==":"equal","!=":"notEqual","<":"lessThan",">":"greaterThan","<=":"lessThanEqual",">=":"greaterThanEqual","%":"mod"};class OperatorNode extends TempNode{static get type(){return"OperatorNode"}constructor(e,t,o,...r){if(super(),r.length>0){let n=new OperatorNode(e,t,o);for(let t=0;t<r.length-1;t++)n=new OperatorNode(e,n,r[t]);t=n,o=r[r.length-1]}this.op=e,this.aNode=t,this.bNode=o,this.isOperatorNode=!0}getOperatorMethod(e,t){return e.getMethod(_vectorOperators[this.op],t)}getNodeType(e){const t=this.op,o=this.aNode,r=this.bNode,n=o.getNodeType(e),a=r?r.getNodeType(e):null;if("void"===n||"void"===a)return"void";if("%"===t)return n;if("~"===t||"&"===t||"|"===t||"^"===t||">>"===t||"<<"===t)return e.getIntegerType(n);if("!"===t||"&&"===t||"||"===t||"^^"===t)return"bool";if("=="===t||"!="===t||"<"===t||">"===t||"<="===t||">="===t){const t=Math.max(e.getTypeLength(n),e.getTypeLength(a));return t>1?`bvec${t}`:"bool"}if(e.isMatrix(n)){if("float"===a)return n;if(e.isVector(a))return e.getVectorFromMatrix(n);if(e.isMatrix(a))return n}else if(e.isMatrix(a)){if("float"===n)return a;if(e.isVector(n))return e.getVectorFromMatrix(a)}return e.getTypeLength(a)>e.getTypeLength(n)?a:n}generate(e,t){const o=this.op,{aNode:r,bNode:n}=this,a=this.getNodeType(e);let d=null,i=null;"void"!==a?(d=r.getNodeType(e),i=n?n.getNodeType(e):null,"<"===o||">"===o||"<="===o||">="===o||"=="===o||"!="===o?e.isVector(d)?i=d:e.isVector(i)?d=i:d!==i&&(d=i="float"):">>"===o||"<<"===o?(d=a,i=e.changeComponentType(i,"uint")):"%"===o?(d=a,i=e.isInteger(d)&&e.isInteger(i)?i:d):e.isMatrix(d)?"float"===i?i="float":e.isVector(i)?i=e.getVectorFromMatrix(d):e.isMatrix(i)||(d=i=a):d=e.isMatrix(i)?"float"===d?"float":e.isVector(d)?e.getVectorFromMatrix(i):i=a:i=a):d=i=a;const s=r.build(e,d),h=n?n.build(e,i):null,g=e.getFunctionOperator(o);if("void"!==t){const r=e.renderer.coordinateSystem===WebGLCoordinateSystem;if("=="===o||"!="===o||"<"===o||">"===o||"<="===o||">="===o)return r&&e.isVector(d)?e.format(`${this.getOperatorMethod(e,t)}( ${s}, ${h} )`,a,t):e.format(`( ${s} ${o} ${h} )`,a,t);if("%"===o)return e.isInteger(i)?e.format(`( ${s} % ${h} )`,a,t):e.format(`${this.getOperatorMethod(e,a)}( ${s}, ${h} )`,a,t);if("!"===o||"~"===o)return e.format(`(${o}${s})`,d,t);if(g)return e.format(`${g}( ${s}, ${h} )`,a,t);if(e.isMatrix(d)&&"float"===i)return e.format(`( ${h} ${o} ${s} )`,a,t);if("float"===d&&e.isMatrix(i))return e.format(`${s} ${o} ${h}`,a,t);{let n=`( ${s} ${o} ${h} )`;return!r&&"bool"===a&&e.isVector(d)&&e.isVector(i)&&(n=`all${n}`),e.format(n,a,t)}}if("void"!==d)return g?e.format(`${g}( ${s}, ${h} )`,a,t):e.isMatrix(d)&&"float"===i?e.format(`${h} ${o} ${s}`,a,t):e.format(`${s} ${o} ${h}`,a,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}export default OperatorNode;export const add=nodeProxyIntent(OperatorNode,"+").setParameterLength(2,1/0).setName("add");export const sub=nodeProxyIntent(OperatorNode,"-").setParameterLength(2,1/0).setName("sub");export const mul=nodeProxyIntent(OperatorNode,"*").setParameterLength(2,1/0).setName("mul");export const div=nodeProxyIntent(OperatorNode,"/").setParameterLength(2,1/0).setName("div");export const mod=nodeProxyIntent(OperatorNode,"%").setParameterLength(2).setName("mod");export const equal=nodeProxyIntent(OperatorNode,"==").setParameterLength(2).setName("equal");export const notEqual=nodeProxyIntent(OperatorNode,"!=").setParameterLength(2).setName("notEqual");export const lessThan=nodeProxyIntent(OperatorNode,"<").setParameterLength(2).setName("lessThan");export const greaterThan=nodeProxyIntent(OperatorNode,">").setParameterLength(2).setName("greaterThan");export const lessThanEqual=nodeProxyIntent(OperatorNode,"<=").setParameterLength(2).setName("lessThanEqual");export const greaterThanEqual=nodeProxyIntent(OperatorNode,">=").setParameterLength(2).setName("greaterThanEqual");export const and=nodeProxyIntent(OperatorNode,"&&").setParameterLength(2,1/0).setName("and");export const or=nodeProxyIntent(OperatorNode,"||").setParameterLength(2,1/0).setName("or");export const not=nodeProxyIntent(OperatorNode,"!").setParameterLength(1).setName("not");export const xor=nodeProxyIntent(OperatorNode,"^^").setParameterLength(2).setName("xor");export const bitAnd=nodeProxyIntent(OperatorNode,"&").setParameterLength(2).setName("bitAnd");export const bitNot=nodeProxyIntent(OperatorNode,"~").setParameterLength(2).setName("bitNot");export const bitOr=nodeProxyIntent(OperatorNode,"|").setParameterLength(2).setName("bitOr");export const bitXor=nodeProxyIntent(OperatorNode,"^").setParameterLength(2).setName("bitXor");export const shiftLeft=nodeProxyIntent(OperatorNode,"<<").setParameterLength(2).setName("shiftLeft");export const shiftRight=nodeProxyIntent(OperatorNode,">>").setParameterLength(2).setName("shiftRight");export const incrementBefore=Fn((([e])=>(e.addAssign(1),e)));export const decrementBefore=Fn((([e])=>(e.subAssign(1),e)));export const increment=Fn((([e])=>{const t=int(e).toConst();return e.addAssign(1),t}));export const decrement=Fn((([e])=>{const t=int(e).toConst();return e.subAssign(1),t}));addMethodChaining("add",add),addMethodChaining("sub",sub),addMethodChaining("mul",mul),addMethodChaining("div",div),addMethodChaining("mod",mod),addMethodChaining("equal",equal),addMethodChaining("notEqual",notEqual),addMethodChaining("lessThan",lessThan),addMethodChaining("greaterThan",greaterThan),addMethodChaining("lessThanEqual",lessThanEqual),addMethodChaining("greaterThanEqual",greaterThanEqual),addMethodChaining("and",and),addMethodChaining("or",or),addMethodChaining("not",not),addMethodChaining("xor",xor),addMethodChaining("bitAnd",bitAnd),addMethodChaining("bitNot",bitNot),addMethodChaining("bitOr",bitOr),addMethodChaining("bitXor",bitXor),addMethodChaining("shiftLeft",shiftLeft),addMethodChaining("shiftRight",shiftRight),addMethodChaining("incrementBefore",incrementBefore),addMethodChaining("decrementBefore",decrementBefore),addMethodChaining("increment",increment),addMethodChaining("decrement",decrement);export const modInt=(e,t)=>(console.warn('THREE.TSL: "modInt()" is deprecated. Use "mod( int( ... ) )" instead.'),mod(int(e),int(t)));addMethodChaining("modInt",modInt);
//# sourceMappingURL=OperatorNode.js.map