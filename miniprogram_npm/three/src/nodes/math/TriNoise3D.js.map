{"version":3,"file":"node_modules/three/src/nodes/math/TriNoise3D.js","names":["Loop","float","vec3","Fn","tri","x","fract","sub","abs","setLayout","name","type","inputs","tri3","p","z","add","y","mul","triNoise3D","position","speed","time","toVar","rz","bp","start","end","condition","dg","addAssign","mulAssign","t","div"],"sources":["node_modules/three/src/nodes/math/TriNoise3D.js"],"sourcesContent":["// https://github.com/cabbibo/glsl-tri-noise-3d\n\nimport { Loop } from '../utils/LoopNode.js';\nimport { float, vec3, Fn } from '../tsl/TSLBase.js';\n\nconst tri = /*@__PURE__*/ Fn( ( [ x ] ) => {\n\n\treturn x.fract().sub( .5 ).abs();\n\n} ).setLayout( {\n\tname: 'tri',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'x', type: 'float' }\n\t]\n} );\n\nconst tri3 = /*@__PURE__*/ Fn( ( [ p ] ) => {\n\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\n\n} ).setLayout( {\n\tname: 'tri3',\n\ttype: 'vec3',\n\tinputs: [\n\t\t{ name: 'p', type: 'vec3' }\n\t]\n} );\n\n/**\n * Generates a noise value from the given position, speed and time parameters.\n *\n * @tsl\n * @function\n * @param {Node<vec3>} position - The position.\n * @param {Node<float>} speed - The speed.\n * @param {Node<float>} time - The time.\n * @return {Node<float>} The generated noise.\n */\nexport const triNoise3D = /*@__PURE__*/ Fn( ( [ position, speed, time ] ) => {\n\n\tconst p = vec3( position ).toVar();\n\tconst z = float( 1.4 ).toVar();\n\tconst rz = float( 0.0 ).toVar();\n\tconst bp = vec3( p ).toVar();\n\n\tLoop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\n\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( speed ) ) ) );\n\t\tbp.mulAssign( 1.8 );\n\t\tz.mulAssign( 1.5 );\n\t\tp.mulAssign( 1.2 );\n\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\n\t\trz.addAssign( t.div( z ) );\n\t\tbp.addAssign( 0.14 );\n\n\t} );\n\n\treturn rz;\n\n} ).setLayout( {\n\tname: 'triNoise3D',\n\ttype: 'float',\n\tinputs: [\n\t\t{ name: 'position', type: 'vec3' },\n\t\t{ name: 'speed', type: 'float' },\n\t\t{ name: 'time', type: 'float' }\n\t]\n} );\n"],"mappings":"OAESA,SAAY,8BACZC,MAAOC,KAAMC,OAAU,oBAEhC,MAAMC,IAAoBD,IAAI,EAAIE,KAE1BA,EAAEC,QAAQC,IAAK,IAAKC,QAExBC,UAAW,CACdC,KAAM,MACNC,KAAM,QACNC,OAAQ,CACP,CAAEF,KAAM,IAAKC,KAAM,YAIfE,KAAqBV,IAAI,EAAIW,KAE3BZ,KAAME,IAAKU,EAAEC,EAAEC,IAAKZ,IAAKU,EAAEG,EAAEC,IAAK,MAAYd,IAAKU,EAAEC,EAAEC,IAAKZ,IAAKU,EAAET,EAAEa,IAAK,MAAYd,IAAKU,EAAEG,EAAED,IAAKZ,IAAKU,EAAET,EAAEa,IAAK,SAEtHT,UAAW,CACdC,KAAM,OACNC,KAAM,OACNC,OAAQ,CACP,CAAEF,KAAM,IAAKC,KAAM,kBAcd,MAAMQ,WAA2BhB,IAAI,EAAIiB,EAAUC,EAAOC,MAEhE,MAAMR,EAAIZ,KAAMkB,GAAWG,QACrBR,EAAId,MAAO,KAAMsB,QACjBC,EAAKvB,MAAO,GAAMsB,QAClBE,EAAKvB,KAAMY,GAAIS,QAgBrB,OAdAvB,KAAM,CAAE0B,MAAOzB,MAAO,GAAO0B,IAAK1B,MAAO,GAAOU,KAAM,QAASiB,UAAW,OAAQ,KAEjF,MAAMC,EAAK3B,KAAMW,KAAMY,EAAGP,IAAK,KAAUK,QACzCT,EAAEgB,UAAWD,EAAGb,IAAKM,EAAKJ,IAAKjB,MAAO,IAAMiB,IAAKG,MACjDI,EAAGM,UAAW,KACdhB,EAAEgB,UAAW,KACbjB,EAAEiB,UAAW,KAEb,MAAMC,EAAI/B,MAAOG,IAAKU,EAAEC,EAAEC,IAAKZ,IAAKU,EAAET,EAAEW,IAAKZ,IAAKU,EAAEG,QAAcM,QAClEC,EAAGM,UAAWE,EAAEC,IAAKlB,IACrBU,EAAGK,UAAW,IAAM,IAIdN,CAAE,IAENf,UAAW,CACdC,KAAM,aACNC,KAAM,QACNC,OAAQ,CACP,CAAEF,KAAM,WAAYC,KAAM,QAC1B,CAAED,KAAM,QAASC,KAAM,SACvB,CAAED,KAAM,OAAQC,KAAM","ignoreList":[]}