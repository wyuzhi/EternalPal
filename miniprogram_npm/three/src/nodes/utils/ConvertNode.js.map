{"version":3,"file":"node_modules/three/src/nodes/utils/ConvertNode.js","names":["Node","ConvertNode","type","constructor","node","convertTo","super","this","getNodeType","builder","requestType","overloadingType","split","getTypeLength","serialize","data","deserialize","generate","output","snippet","build","format"],"sources":["node_modules/three/src/nodes/utils/ConvertNode.js"],"sourcesContent":["import Node from '../core/Node.js';\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * It represents a convert operation during the shader generation process\n * meaning it converts the data type of a node to a target data type.\n *\n * @augments Node\n */\nclass ConvertNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'ConvertNode';\n\n\t}\n\n\t/**\n\t * Constructs a new convert node.\n\t *\n\t * @param {Node} node - The node which type should be converted.\n\t * @param {string} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.\n\t */\n\tconstructor( node, convertTo ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node which type should be converted.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The target node type. Multiple types can be defined by separating them with a `|` sign.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.convertTo = convertTo;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the implementation tries to infer the best\n\t * matching type from the {@link ConvertNode#convertTo} property.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tconst requestType = this.node.getNodeType( builder );\n\n\t\tlet convertTo = null;\n\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\n\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\n\n\t\t\t\tconvertTo = overloadingType;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn convertTo;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.convertTo = this.convertTo;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.convertTo = data.convertTo;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst snippet = node.build( builder, type );\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default ConvertNode;\n"],"mappings":"OAAOA,SAAU,kBASjB,MAAMC,oBAAoBD,KAEzB,eAAWE,GAEV,MAAO,aAER,CAQA,WAAAC,CAAaC,EAAMC,GAElBC,QAOAC,KAAKH,KAAOA,EAOZG,KAAKF,UAAYA,CAElB,CASA,WAAAG,CAAaC,GAEZ,MAAMC,EAAcH,KAAKH,KAAKI,YAAaC,GAE3C,IAAIJ,EAAY,KAEhB,IAAM,MAAMM,KAAmBJ,KAAKF,UAAUO,MAAO,KAEjC,OAAdP,GAAsBI,EAAQI,cAAeH,KAAkBD,EAAQI,cAAeF,KAE1FN,EAAYM,GAMd,OAAON,CAER,CAEA,SAAAS,CAAWC,GAEVT,MAAMQ,UAAWC,GAEjBA,EAAKV,UAAYE,KAAKF,SAEvB,CAEA,WAAAW,CAAaD,GAEZT,MAAMU,YAAaD,GAEnBR,KAAKF,UAAYU,EAAKV,SAEvB,CAEA,QAAAY,CAAUR,EAASS,GAElB,MAAMd,EAAOG,KAAKH,KACZF,EAAOK,KAAKC,YAAaC,GAEzBU,EAAUf,EAAKgB,MAAOX,EAASP,GAErC,OAAOO,EAAQY,OAAQF,EAASjB,EAAMgB,EAEvC,iBAIcjB","ignoreList":[]}