import TempNode from"../core/TempNode.js";import{NodeUpdateType}from"../core/constants.js";import{nodeProxy}from"../tsl/TSLBase.js";import{CubeTexture}from"../../textures/CubeTexture.js";import{cubeTexture}from"../accessors/CubeTextureNode.js";import CubeRenderTarget from"../../renderers/common/CubeRenderTarget.js";import{CubeReflectionMapping,CubeRefractionMapping,EquirectangularReflectionMapping,EquirectangularRefractionMapping}from"../../constants.js";const _cache=new WeakMap;class CubeMapNode extends TempNode{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=cubeTexture(null);const t=new CubeTexture;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=NodeUpdateType.RENDER}updateBefore(e){const{renderer:t,material:r}=e,u=this.envNode;if(u.isTextureNode||u.isMaterialReferenceNode){const e=u.isTextureNode?u.value:r[u.property];if(e&&e.isTexture){const r=e.mapping;if(r===EquirectangularReflectionMapping||r===EquirectangularRefractionMapping){if(_cache.has(e)){const t=_cache.get(e);mapTextureMapping(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(isEquirectangularMapReady(r)){const u=new CubeRenderTarget(r.height);u.fromEquirectangularTexture(t,e),mapTextureMapping(u.texture,e.mapping),this._cubeTexture=u.texture,_cache.set(e,u.texture),e.addEventListener("dispose",onTextureDispose)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}export default CubeMapNode;function isEquirectangularMapReady(e){return null!=e&&e.height>0}function onTextureDispose(e){const t=e.target;t.removeEventListener("dispose",onTextureDispose);const r=_cache.get(t);void 0!==r&&(_cache.delete(t),r.dispose())}function mapTextureMapping(e,t){t===EquirectangularReflectionMapping?e.mapping=CubeReflectionMapping:t===EquirectangularRefractionMapping&&(e.mapping=CubeRefractionMapping)}export const cubeMapNode=nodeProxy(CubeMapNode).setParameterLength(1);
//# sourceMappingURL=CubeMapNode.js.map