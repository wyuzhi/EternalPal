{"version":3,"file":"node_modules/three/src/nodes/utils/EquirectUV.js","names":["positionWorldDirection","Fn","vec2","equirectUV","dir","u","z","atan","x","mul","Math","PI","add","v","y","clamp","asin"],"sources":["node_modules/three/src/nodes/utils/EquirectUV.js"],"sourcesContent":["import { positionWorldDirection } from '../accessors/Position.js';\nimport { Fn, vec2 } from '../tsl/TSLBase.js';\n\n/**\n * TSL function for creating an equirect uv node.\n *\n * Can be used to compute texture coordinates for projecting an\n * equirectangular texture onto a mesh for using it as the scene's\n * background.\n *\n * ```js\n * scene.backgroundNode = texture( equirectTexture, equirectUV() );\n * ```\n *\n * @tsl\n * @function\n * @param {?Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\n * @returns {Node<vec2>}\n */\nexport const equirectUV = /*@__PURE__*/ Fn( ( [ dir = positionWorldDirection ] ) => {\n\n\tconst u = dir.z.atan( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\n\tconst v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\n\n\treturn vec2( u, v );\n\n} );\n"],"mappings":"OAASA,2BAA8B,kCAC9BC,GAAIC,SAAY,2BAkBlB,MAAMC,WAA2BF,IAAI,EAAIG,EAAMJ,2BAErD,MAAMK,EAAID,EAAIE,EAAEC,KAAMH,EAAII,GAAIC,IAAK,GAAgB,EAAVC,KAAKC,KAAWC,IAAK,IACxDC,EAAIT,EAAIU,EAAEC,OAAS,EAAK,GAAMC,OAAOP,IAAK,EAAIC,KAAKC,IAAKC,IAAK,IAEnE,OAAOV,KAAMG,EAAGQ,EAAG","ignoreList":[]}