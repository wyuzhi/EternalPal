{"version":3,"file":"node_modules/three/src/nodes/utils/EventNode.js","names":["Node","NodeUpdateType","nodeObject","EventNode","type","constructor","eventType","callback","super","this","OBJECT","updateType","MATERIAL","RENDER","update","frame","createEvent","toStack","OnObjectUpdate","OnMaterialUpdate"],"sources":["node_modules/three/src/nodes/utils/EventNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeObject } from '../tsl/TSLCore.js';\n\n/**\n * EventNode is a node that executes a callback during specific update phases.\n *\n * @augments Node\n */\nclass EventNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'EventNode';\n\n\t}\n\n\t/**\n\t * Creates an EventNode.\n\t *\n\t * @param {string} eventType - The type of event\n\t * @param {Function} callback - The callback to execute on update.\n\t */\n\tconstructor( eventType, callback ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.eventType = eventType;\n\t\tthis.callback = callback;\n\n\t\tif ( eventType === EventNode.OBJECT ) {\n\n\t\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\t} else if ( eventType === EventNode.MATERIAL ) {\n\n\t\t\tthis.updateType = NodeUpdateType.RENDER;\n\n\t\t}\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tthis.callback( frame );\n\n\t}\n\n}\n\nEventNode.OBJECT = 'object';\nEventNode.MATERIAL = 'material';\n\nexport default EventNode;\n\n/**\n * Helper to create an EventNode and add it to the stack.\n *\n * @param {string} type - The event type.\n * @param {Function} callback - The callback function.\n * @returns {EventNode}\n */\nconst createEvent = ( type, callback ) => nodeObject( new EventNode( type, callback ) ).toStack();\n\n/**\n * Creates an event that triggers a function every time an object (Mesh|Sprite) is rendered.\n *\n * The event will be bound to the declared TSL function `Fn()`; it must be declared within a `Fn()` or the JS function call must be inherited from one.\n *\n * @param {Function} callback - The callback function.\n * @returns {EventNode}\n */\nexport const OnObjectUpdate = ( callback ) => createEvent( EventNode.OBJECT, callback );\n\n/**\n * Creates an event that triggers a function when the first object that uses the material is rendered.\n *\n * The event will be bound to the declared TSL function `Fn()`; it must be declared within a `Fn()` or the JS function call must be inherited from one.\n *\n * @param {Function} callback - The callback function.\n * @returns {EventNode}\n */\nexport const OnMaterialUpdate = ( callback ) => createEvent( EventNode.MATERIAL, callback );\n"],"mappings":"OAAOA,SAAU,yBACRC,mBAAsB,8BACtBC,eAAkB,oBAO3B,MAAMC,kBAAkBH,KAEvB,eAAWI,GAEV,MAAO,WAER,CAQA,WAAAC,CAAaC,EAAWC,GAEvBC,MAAO,QAEPC,KAAKH,UAAYA,EACjBG,KAAKF,SAAWA,EAEXD,IAAcH,UAAUO,OAE5BD,KAAKE,WAAaV,eAAeS,OAEtBJ,IAAcH,UAAUS,WAEnCH,KAAKE,WAAaV,eAAeY,OAInC,CAEA,MAAAC,CAAQC,GAEPN,KAAKF,SAAUQ,EAEhB,EAIDZ,UAAUO,OAAS,SACnBP,UAAUS,SAAW,0BAENT,UASf,MAAMa,YAAc,CAAEZ,EAAMG,IAAcL,WAAY,IAAIC,UAAWC,EAAMG,IAAaU,iBAUjF,MAAMC,eAAmBX,GAAcS,YAAab,UAAUO,OAAQH,UAUtE,MAAMY,iBAAqBZ,GAAcS,YAAab,UAAUS,SAAUL","ignoreList":[]}