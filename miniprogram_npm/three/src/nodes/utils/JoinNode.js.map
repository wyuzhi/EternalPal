{"version":3,"file":"node_modules/three/src/nodes/utils/JoinNode.js","names":["TempNode","JoinNode","type","constructor","nodes","nodeType","super","this","getNodeType","builder","getVectorType","getTypeFromLength","reduce","count","cur","getTypeLength","generate","output","maxLength","primitiveType","getComponentType","snippetValues","length","input","console","error","inputSnippet","inputType","inputTypeLength","build","inputPrimitiveType","format","push","snippet","getType","join"],"sources":["node_modules/three/src/nodes/utils/JoinNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * It represents a join operation during the shader generation process.\n * For example in can compose/join two single floats into a `vec2` type.\n *\n * @augments TempNode\n */\nclass JoinNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'JoinNode';\n\n\t}\n\n\t/**\n\t * Constructs a new join node.\n\t *\n\t * @param {Array<Node>} nodes - An array of nodes that should be joined.\n\t * @param {?string} [nodeType=null] - The node type.\n\t */\n\tconstructor( nodes = [], nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\t/**\n\t\t * An array of nodes that should be joined.\n\t\t *\n\t\t * @type {Array<Node>}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type must be inferred from the\n\t * joined data length if not explicitly defined.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\tif ( this.nodeType !== null ) {\n\n\t\t\treturn builder.getVectorType( this.nodeType );\n\n\t\t}\n\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst maxLength = builder.getTypeLength( type );\n\n\t\tconst nodes = this.nodes;\n\n\t\tconst primitiveType = builder.getComponentType( type );\n\n\t\tconst snippetValues = [];\n\n\t\tlet length = 0;\n\n\t\tfor ( const input of nodes ) {\n\n\t\t\tif ( length >= maxLength ) {\n\n\t\t\t\tconsole.error( `THREE.TSL: Length of parameters exceeds maximum length of function '${ type }()' type.` );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlet inputType = input.getNodeType( builder );\n\t\t\tlet inputTypeLength = builder.getTypeLength( inputType );\n\t\t\tlet inputSnippet;\n\n\t\t\tif ( length + inputTypeLength > maxLength ) {\n\n\t\t\t\tconsole.error( `THREE.TSL: Length of '${ type }()' data exceeds maximum length of output type.` );\n\n\t\t\t\tinputTypeLength = maxLength - length;\n\t\t\t\tinputType = builder.getTypeFromLength( inputTypeLength );\n\n\t\t\t}\n\n\t\t\tlength += inputTypeLength;\n\t\t\tinputSnippet = input.build( builder, inputType );\n\n\t\t\tconst inputPrimitiveType = builder.getComponentType( inputType );\n\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\n\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\n\n\t\t\t}\n\n\t\t\tsnippetValues.push( inputSnippet );\n\n\t\t}\n\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default JoinNode;\n"],"mappings":"OAAOA,aAAc,sBASrB,MAAMC,iBAAiBD,SAEtB,eAAWE,GAEV,MAAO,UAER,CAQA,WAAAC,CAAaC,EAAQ,GAAIC,EAAW,MAEnCC,MAAOD,GAOPE,KAAKH,MAAQA,CAEd,CASA,WAAAI,CAAaC,GAEZ,OAAuB,OAAlBF,KAAKF,SAEFI,EAAQC,cAAeH,KAAKF,UAI7BI,EAAQE,kBAAmBJ,KAAKH,MAAMQ,QAAQ,CAAEC,EAAOC,IAASD,EAAQJ,EAAQM,cAAeD,EAAIN,YAAaC,KAAa,GAErI,CAEA,QAAAO,CAAUP,EAASQ,GAElB,MAAMf,EAAOK,KAAKC,YAAaC,GACzBS,EAAYT,EAAQM,cAAeb,GAEnCE,EAAQG,KAAKH,MAEbe,EAAgBV,EAAQW,iBAAkBlB,GAE1CmB,EAAgB,GAEtB,IAAIC,EAAS,EAEb,IAAM,MAAMC,KAASnB,EAAQ,CAE5B,GAAKkB,GAAUJ,EAAY,CAE1BM,QAAQC,MAAO,uEAAwEvB,cACvF,KAED,CAEA,IAEIwB,EAFAC,EAAYJ,EAAMf,YAAaC,GAC/BmB,EAAkBnB,EAAQM,cAAeY,GAGxCL,EAASM,EAAkBV,IAE/BM,QAAQC,MAAO,yBAA0BvB,oDAEzC0B,EAAkBV,EAAYI,EAC9BK,EAAYlB,EAAQE,kBAAmBiB,IAIxCN,GAAUM,EACVF,EAAeH,EAAMM,MAAOpB,EAASkB,GAErC,MAAMG,EAAqBrB,EAAQW,iBAAkBO,GAEhDG,IAAuBX,IAE3BO,EAAejB,EAAQsB,OAAQL,EAAcI,EAAoBX,IAIlEE,EAAcW,KAAMN,EAErB,CAEA,MAAMO,EAAU,GAAIxB,EAAQyB,QAAShC,OAAamB,EAAcc,KAAM,UAEtE,OAAO1B,EAAQsB,OAAQE,EAAS/B,EAAMe,EAEvC,iBAIchB","ignoreList":[]}