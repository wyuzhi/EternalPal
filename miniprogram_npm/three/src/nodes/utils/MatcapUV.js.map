{"version":3,"file":"node_modules/three/src/nodes/utils/MatcapUV.js","names":["normalView","positionViewDirection","Fn","vec2","vec3","matcapUV","x","z","negate","normalize","y","cross","dot","mul","add","once","toVar"],"sources":["node_modules/three/src/nodes/utils/MatcapUV.js"],"sourcesContent":["import { normalView } from '../accessors/Normal.js';\nimport { positionViewDirection } from '../accessors/Position.js';\nimport { Fn, vec2, vec3 } from '../tsl/TSLBase.js';\n\n/**\n * TSL function for creating a matcap uv node.\n *\n * Can be used to compute texture coordinates for projecting a\n * matcap onto a mesh. Used by {@link MeshMatcapNodeMaterial}.\n *\n * @tsl\n * @function\n * @returns {Node<vec2>} The matcap UV coordinates.\n */\nexport const matcapUV = /*@__PURE__*/ Fn( () => {\n\n\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\n\tconst y = positionViewDirection.cross( x );\n\n\treturn vec2( x.dot( normalView ), y.dot( normalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\n\n} ).once( [ 'NORMAL', 'VERTEX' ] )().toVar( 'matcapUV' );\n"],"mappings":"OAASA,eAAkB,gCAClBC,0BAA6B,kCAC7BC,GAAIC,KAAMC,SAAY,2BAYxB,MAAMC,SAAyBH,IAAI,KAEzC,MAAMI,EAAIF,KAAMH,sBAAsBM,EAAG,EAAGN,sBAAsBK,EAAEE,UAAWC,YACzEC,EAAIT,sBAAsBU,MAAOL,GAEvC,OAAOH,KAAMG,EAAEM,IAAKZ,YAAcU,EAAEE,IAAKZ,aAAea,IAAK,MAAQC,IAAK,GAAK,IAE5EC,KAAM,CAAE,SAAU,UAPgBb,GAODc,MAAO","ignoreList":[]}