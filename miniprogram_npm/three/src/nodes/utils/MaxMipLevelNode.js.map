{"version":3,"file":"node_modules/three/src/nodes/utils/MaxMipLevelNode.js","names":["UniformNode","NodeUpdateType","nodeProxy","MaxMipLevelNode","type","constructor","textureNode","super","this","_textureNode","updateType","FRAME","texture","value","update","images","image","length","undefined","width","height","Math","log2","max","maxMipLevel","setParameterLength"],"sources":["node_modules/three/src/nodes/utils/MaxMipLevelNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { nodeProxy } from '../tsl/TSLBase.js';\n\n/**\n * A special type of uniform node that computes the\n * maximum mipmap level for a given texture node.\n *\n * ```js\n * const level = maxMipLevel( textureNode );\n * ```\n *\n * @augments UniformNode\n */\nclass MaxMipLevelNode extends UniformNode {\n\n\tstatic get type() {\n\n\t\treturn 'MaxMipLevelNode';\n\n\t}\n\n\t/**\n\t * Constructs a new max mip level node.\n\t *\n\t * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n\t */\n\tconstructor( textureNode ) {\n\n\t\tsuper( 0 );\n\n\t\t/**\n\t\t * The texture node to compute the max mip level for.\n\t\t *\n\t\t * @private\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis._textureNode = textureNode;\n\n\t\t/**\n\t\t * The `updateType` is set to `NodeUpdateType.FRAME` since the node updates\n\t\t * the texture once per frame in its {@link MaxMipLevelNode#update} method.\n\t\t *\n\t\t * @type {string}\n\t\t * @default 'frame'\n\t\t */\n\t\tthis.updateType = NodeUpdateType.FRAME;\n\n\t}\n\n\t/**\n\t * The texture node to compute the max mip level for.\n\t *\n\t * @readonly\n\t * @type {TextureNode}\n\t */\n\tget textureNode() {\n\n\t\treturn this._textureNode;\n\n\t}\n\n\t/**\n\t * The texture.\n\t *\n\t * @readonly\n\t * @type {Texture}\n\t */\n\tget texture() {\n\n\t\treturn this._textureNode.value;\n\n\t}\n\n\tupdate() {\n\n\t\tconst texture = this.texture;\n\t\tconst images = texture.images;\n\t\tconst image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;\n\n\t\tif ( image && image.width !== undefined ) {\n\n\t\t\tconst { width, height } = image;\n\n\t\t\tthis.value = Math.log2( Math.max( width, height ) );\n\n\t\t}\n\n\t}\n\n}\n\nexport default MaxMipLevelNode;\n\n/**\n * TSL function for creating a max mip level node.\n *\n * @tsl\n * @function\n * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\n * @returns {MaxMipLevelNode}\n */\nexport const maxMipLevel = /*@__PURE__*/ nodeProxy( MaxMipLevelNode ).setParameterLength( 1 );\n"],"mappings":"OAAOA,gBAAiB,gCACfC,mBAAsB,8BACtBC,cAAiB,oBAY1B,MAAMC,wBAAwBH,YAE7B,eAAWI,GAEV,MAAO,iBAER,CAOA,WAAAC,CAAaC,GAEZC,MAAO,GAQPC,KAAKC,aAAeH,EASpBE,KAAKE,WAAaT,eAAeU,KAElC,CAQA,eAAIL,GAEH,OAAOE,KAAKC,YAEb,CAQA,WAAIG,GAEH,OAAOJ,KAAKC,aAAaI,KAE1B,CAEA,MAAAC,GAEC,MAAMF,EAAUJ,KAAKI,QACfG,EAASH,EAAQG,OACjBC,EAAUD,GAAUA,EAAOE,OAAS,EAAUF,EAAQ,IAAOA,EAAQ,GAAIC,OAAWD,EAAQ,GAAQH,EAAQI,MAElH,GAAKA,QAAyBE,IAAhBF,EAAMG,MAAsB,CAEzC,MAAMA,MAAEA,EAAKC,OAAEA,GAAWJ,EAE1BR,KAAKK,MAAQQ,KAAKC,KAAMD,KAAKE,IAAKJ,EAAOC,GAE1C,CAED,iBAIcjB,uBAUR,MAAMqB,YAA4BtB,UAAWC,iBAAkBsB,mBAAoB","ignoreList":[]}