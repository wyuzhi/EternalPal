import{abs,cross,float,Fn,normalize,ivec2,sub,vec2,vec3,vec4}from"../tsl/TSLBase.js";import{textureSize}from"../accessors/TextureSizeNode.js";import{textureLoad}from"../accessors/TextureNode.js";import{WebGPUCoordinateSystem}from"../../constants.js";export const getViewPosition=Fn((([e,t,o],s)=>{let a;s.renderer.coordinateSystem===WebGPUCoordinateSystem?(e=vec2(e.x,e.y.oneMinus()).mul(2).sub(1),a=vec4(vec3(e,t),1)):a=vec4(vec3(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const r=vec4(o.mul(a));return r.xyz.div(r.w)}));export const getScreenPosition=Fn((([e,t])=>{const o=t.mul(vec4(e,1)),s=o.xy.div(o.w).mul(.5).add(.5).toVar();return vec2(s.x,s.y.oneMinus())}));export const getNormalFromDepth=Fn((([e,t,o])=>{const s=textureSize(textureLoad(t)),a=ivec2(e.mul(s)).toVar(),r=textureLoad(t,a).toVar(),i=textureLoad(t,a.sub(ivec2(2,0))).toVar(),u=textureLoad(t,a.sub(ivec2(1,0))).toVar(),c=textureLoad(t,a.add(ivec2(1,0))).toVar(),d=textureLoad(t,a.add(ivec2(2,0))).toVar(),n=textureLoad(t,a.add(ivec2(0,2))).toVar(),v=textureLoad(t,a.add(ivec2(0,1))).toVar(),l=textureLoad(t,a.sub(ivec2(0,1))).toVar(),b=textureLoad(t,a.sub(ivec2(0,2))).toVar(),m=abs(sub(float(2).mul(u).sub(i),r)).toVar(),x=abs(sub(float(2).mul(c).sub(d),r)).toVar(),V=abs(sub(float(2).mul(v).sub(n),r)).toVar(),f=abs(sub(float(2).mul(l).sub(b),r)).toVar(),L=getViewPosition(e,r,o).toVar(),g=m.lessThan(x).select(L.sub(getViewPosition(e.sub(vec2(float(1).div(s.x),0)),u,o)),L.negate().add(getViewPosition(e.add(vec2(float(1).div(s.x),0)),c,o))),y=V.lessThan(f).select(L.sub(getViewPosition(e.add(vec2(0,float(1).div(s.y))),v,o)),L.negate().add(getViewPosition(e.sub(vec2(0,float(1).div(s.y))),l,o)));return normalize(cross(g,y))}));
//# sourceMappingURL=PostProcessingUtils.js.map