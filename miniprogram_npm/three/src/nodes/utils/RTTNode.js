import{nodeObject}from"../tsl/TSLCore.js";import TextureNode from"../accessors/TextureNode.js";import{NodeUpdateType}from"../core/constants.js";import{uv}from"../accessors/UV.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import QuadMesh from"../../renderers/common/QuadMesh.js";import{RenderTarget}from"../../core/RenderTarget.js";import{Vector2}from"../../math/Vector2.js";import{HalfFloatType}from"../../constants.js";const _size=new Vector2;class RTTNode extends TextureNode{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:HalfFloatType}){const i=new RenderTarget(t,r,s);super(i.texture,uv()),this.isRTTNode=!0,this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new QuadMesh(new NodeMaterial),this.updateBeforeType=NodeUpdateType.RENDER}get autoResize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoResize){const t=e.getPixelRatio(),r=e.getSize(_size),s=r.width*t,i=r.height*t;s===this.renderTarget.width&&i===this.renderTarget.height||(this.renderTarget.setSize(s,i),this.textureNeedsUpdate=!0)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new TextureNode(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}export default RTTNode;export const rtt=(e,...t)=>nodeObject(new RTTNode(nodeObject(e),...t));export const convertToTexture=(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():rtt(e,...t);
//# sourceMappingURL=RTTNode.js.map