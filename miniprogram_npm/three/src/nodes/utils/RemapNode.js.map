{"version":3,"file":"node_modules/three/src/nodes/utils/RemapNode.js","names":["Node","float","addMethodChaining","nodeProxy","RemapNode","type","constructor","node","inLowNode","inHighNode","outLowNode","outHighNode","super","this","doClamp","setup","t","sub","div","clamp","mul","add","remap","setParameterLength","remapClamp"],"sources":["node_modules/three/src/nodes/utils/RemapNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { float, addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\n\n/**\n * This node allows to remap a node value from one range into another. E.g a value of\n * `0.4` in the range `[ 0.3, 0.5 ]` should be remapped into the normalized range `[ 0, 1 ]`.\n * `RemapNode` takes care of that and converts the original value of `0.4` to `0.5`.\n *\n * @augments Node\n */\nclass RemapNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'RemapNode';\n\n\t}\n\n\t/**\n\t * Constructs a new remap node.\n\t *\n\t * @param {Node} node - The node that should be remapped.\n\t * @param {Node} inLowNode - The source or current lower bound of the range.\n\t * @param {Node} inHighNode - The source or current upper bound of the range.\n\t * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\n\t * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\n\t */\n\tconstructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be remapped.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.node = node;\n\n\t\t/**\n\t\t * The source or current lower bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inLowNode = inLowNode;\n\n\t\t/**\n\t\t * The source or current upper bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.inHighNode = inHighNode;\n\n\t\t/**\n\t\t * The target lower bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default float(0)\n\t\t */\n\t\tthis.outLowNode = outLowNode;\n\n\t\t/**\n\t\t * The target upper bound of the range.\n\t\t *\n\t\t * @type {Node}\n\t\t * @default float(1)\n\t\t */\n\t\tthis.outHighNode = outHighNode;\n\n\t\t/**\n\t\t * Whether the node value should be clamped before\n\t\t * remapping it to the target range.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.doClamp = true;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;\n\n\t\tlet t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );\n\n\t\tif ( doClamp === true ) t = t.clamp();\n\n\t\treturn t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );\n\n\t}\n\n}\n\nexport default RemapNode;\n\n/**\n * TSL function for creating a remap node.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be remapped.\n * @param {Node} inLowNode - The source or current lower bound of the range.\n * @param {Node} inHighNode - The source or current upper bound of the range.\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\n * @returns {RemapNode}\n */\nexport const remap = /*@__PURE__*/ nodeProxy( RemapNode, null, null, { doClamp: false } ).setParameterLength( 3, 5 );\n\n/**\n * TSL function for creating a remap node, but with enabled clamping.\n *\n * @tsl\n * @function\n * @param {Node} node - The node that should be remapped.\n * @param {Node} inLowNode - The source or current lower bound of the range.\n * @param {Node} inHighNode - The source or current upper bound of the range.\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\n * @returns {RemapNode}\n */\nexport const remapClamp = /*@__PURE__*/ nodeProxy( RemapNode ).setParameterLength( 3, 5 );\n\naddMethodChaining( 'remap', remap );\naddMethodChaining( 'remapClamp', remapClamp );\n"],"mappings":"OAAOA,SAAU,yBACRC,MAAOC,kBAAmBC,cAAiB,oBASpD,MAAMC,kBAAkBJ,KAEvB,eAAWK,GAEV,MAAO,WAER,CAWA,WAAAC,CAAaC,EAAMC,EAAWC,EAAYC,EAAaT,MAAO,GAAKU,EAAcV,MAAO,IAEvFW,QAOAC,KAAKN,KAAOA,EAOZM,KAAKL,UAAYA,EAOjBK,KAAKJ,WAAaA,EAQlBI,KAAKH,WAAaA,EAQlBG,KAAKF,YAAcA,EASnBE,KAAKC,SAAU,CAEhB,CAEA,KAAAC,GAEC,MAAMR,KAAEA,EAAIC,UAAEA,EAASC,WAAEA,EAAUC,WAAEA,EAAUC,YAAEA,EAAWG,QAAEA,GAAYD,KAE1E,IAAIG,EAAIT,EAAKU,IAAKT,GAAYU,IAAKT,EAAWQ,IAAKT,IAInD,OAFiB,IAAZM,IAAmBE,EAAIA,EAAEG,SAEvBH,EAAEI,IAAKT,EAAYM,IAAKP,IAAeW,IAAKX,EAEpD,iBAIcN,iBAcR,MAAMkB,MAAsBnB,UAAWC,UAAW,KAAM,KAAM,CAAEU,SAAS,IAAUS,mBAAoB,EAAG,UAc1G,MAAMC,WAA2BrB,UAAWC,WAAYmB,mBAAoB,EAAG,GAEtFrB,kBAAmB,QAASoB,OAC5BpB,kBAAmB,aAAcsB","ignoreList":[]}