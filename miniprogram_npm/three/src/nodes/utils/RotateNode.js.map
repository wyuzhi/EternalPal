{"version":3,"file":"node_modules/three/src/nodes/utils/RotateNode.js","names":["TempNode","nodeProxy","vec4","mat2","mat4","cos","sin","RotateNode","type","constructor","positionNode","rotationNode","super","this","getNodeType","builder","setup","cosAngle","sinAngle","negate","mul","rotation","rotationXMatrix","x","rotationYMatrix","y","rotationZMatrix","z","xyz","rotate","setParameterLength"],"sources":["node_modules/three/src/nodes/utils/RotateNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { nodeProxy, vec4, mat2, mat4 } from '../tsl/TSLBase.js';\nimport { cos, sin } from '../math/MathNode.js';\n\n/**\n * Applies a rotation to the given position node.\n *\n * @augments TempNode\n */\nclass RotateNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'RotateNode';\n\n\t}\n\n\t/**\n\t * Constructs a new rotate node.\n\t *\n\t * @param {Node} positionNode - The position node.\n\t * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n\t * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n\t */\n\tconstructor( positionNode, rotationNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The position node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.positionNode = positionNode;\n\n\t\t/**\n\t\t *  Represents the rotation that is applied to the position node.\n\t\t *  Depending on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.rotationNode = rotationNode;\n\n\t}\n\n\t/**\n\t * The type of the {@link RotateNode#positionNode} defines the node's type.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node's type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.positionNode.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst { rotationNode, positionNode } = this;\n\n\t\tconst nodeType = this.getNodeType( builder );\n\n\t\tif ( nodeType === 'vec2' ) {\n\n\t\t\tconst cosAngle = rotationNode.cos();\n\t\t\tconst sinAngle = rotationNode.sin();\n\n\t\t\tconst rotationMatrix = mat2(\n\t\t\t\tcosAngle, sinAngle,\n\t\t\t\tsinAngle.negate(), cosAngle\n\t\t\t);\n\n\t\t\treturn rotationMatrix.mul( positionNode );\n\n\t\t} else {\n\n\t\t\tconst rotation = rotationNode;\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\n\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\n\n\t\t}\n\n\t}\n\n}\n\nexport default RotateNode;\n\n/**\n * TSL function for creating a rotate node.\n *\n * @tsl\n * @function\n * @param {Node} positionNode - The position node.\n * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\n * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\n * @returns {RotateNode}\n */\nexport const rotate = /*@__PURE__*/ nodeProxy( RotateNode ).setParameterLength( 2 );\n"],"mappings":"OAAOA,aAAc,6BACZC,UAAWC,KAAMC,KAAMC,SAAY,2BACnCC,IAAKC,QAAW,sBAOzB,MAAMC,mBAAmBP,SAExB,eAAWQ,GAEV,MAAO,YAER,CASA,WAAAC,CAAaC,EAAcC,GAE1BC,QAOAC,KAAKH,aAAeA,EAQpBG,KAAKF,aAAeA,CAErB,CAQA,WAAAG,CAAaC,GAEZ,OAAOF,KAAKH,aAAaI,YAAaC,EAEvC,CAEA,KAAAC,CAAOD,GAEN,MAAMJ,aAAEA,EAAYD,aAAEA,GAAiBG,KAIvC,GAAkB,SAFDA,KAAKC,YAAaC,GAER,CAE1B,MAAME,EAAWN,EAAaN,MACxBa,EAAWP,EAAaL,MAO9B,OALuBH,KACtBc,EAAUC,EACVA,EAASC,SAAUF,GAGEG,IAAKV,EAE5B,CAAO,CAEN,MAAMW,EAAWV,EACXW,EAAkBlB,KAAMF,KAAM,EAAK,EAAK,EAAK,GAAOA,KAAM,EAAKG,IAAKgB,EAASE,GAAKjB,IAAKe,EAASE,GAAIJ,SAAU,GAAOjB,KAAM,EAAKI,IAAKe,EAASE,GAAKlB,IAAKgB,EAASE,GAAK,GAAOrB,KAAM,EAAK,EAAK,EAAK,IAClMsB,EAAkBpB,KAAMF,KAAMG,IAAKgB,EAASI,GAAK,EAAKnB,IAAKe,EAASI,GAAK,GAAOvB,KAAM,EAAK,EAAK,EAAK,GAAOA,KAAMI,IAAKe,EAASI,GAAIN,SAAU,EAAKd,IAAKgB,EAASI,GAAK,GAAOvB,KAAM,EAAK,EAAK,EAAK,IAClMwB,EAAkBtB,KAAMF,KAAMG,IAAKgB,EAASM,GAAKrB,IAAKe,EAASM,GAAIR,SAAU,EAAK,GAAOjB,KAAMI,IAAKe,EAASM,GAAKtB,IAAKgB,EAASM,GAAK,EAAK,GAAOzB,KAAM,EAAK,EAAK,EAAK,GAAOA,KAAM,EAAK,EAAK,EAAK,IAExM,OAAOoB,EAAgBF,IAAKI,GAAkBJ,IAAKM,GAAkBN,IAAKlB,KAAMQ,EAAc,IAAQkB,GAEvG,CAED,iBAIcrB,kBAYR,MAAMsB,OAAuB5B,UAAWM,YAAauB,mBAAoB","ignoreList":[]}