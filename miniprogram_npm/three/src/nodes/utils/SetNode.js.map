{"version":3,"file":"node_modules/three/src/nodes/utils/SetNode.js","names":["TempNode","vectorComponents","SetNode","type","constructor","sourceNode","components","targetNode","super","this","getNodeType","builder","generate","sourceType","componentType","getComponentType","targetType","getTypeFromLength","length","targetSnippet","build","sourceSnippet","getTypeLength","snippetValues","i","component","push","getType","join"],"sources":["node_modules/three/src/nodes/utils/SetNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { vectorComponents } from '../core/constants.js';\n\n/**\n * This module is part of the TSL core and usually not used in app level code.\n * `SetNode` represents a set operation which means it is used to implement any\n * `setXYZW()`, `setRGBA()` and `setSTPQ()` method invocations on node objects.\n * For example:\n * ```js\n * materialLine.colorNode = color( 0, 0, 0 ).setR( float( 1 ) );\n * ```\n *\n * @augments TempNode\n */\nclass SetNode extends TempNode {\n\n\tstatic get type() {\n\n\t\treturn 'SetNode';\n\n\t}\n\n\t/**\n\t * Constructs a new set node.\n\t *\n\t * @param {Node} sourceNode - The node that should be updated.\n\t * @param {string} components - The components that should be updated.\n\t * @param {Node} targetNode - The value node.\n\t */\n\tconstructor( sourceNode, components, targetNode ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The node that should be updated.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.sourceNode = sourceNode;\n\n\t\t/**\n\t\t * The components that should be updated.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.components = components;\n\n\t\t/**\n\t\t * The value node.\n\t\t *\n\t\t * @type {Node}\n\t\t */\n\t\tthis.targetNode = targetNode;\n\n\t}\n\n\t/**\n\t * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.\n\t *\n\t * @param {NodeBuilder} builder - The current node builder.\n\t * @return {string} The node type.\n\t */\n\tgetNodeType( builder ) {\n\n\t\treturn this.sourceNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { sourceNode, components, targetNode } = this;\n\n\t\tconst sourceType = this.getNodeType( builder );\n\n\t\tconst componentType = builder.getComponentType( targetNode.getNodeType( builder ) );\n\t\tconst targetType = builder.getTypeFromLength( components.length, componentType );\n\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\n\n\t\tconst length = builder.getTypeLength( sourceType );\n\t\tconst snippetValues = [];\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst component = vectorComponents[ i ];\n\n\t\t\tif ( component === components[ 0 ] ) {\n\n\t\t\t\tsnippetValues.push( targetSnippet );\n\n\t\t\t\ti += components.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t}\n\n}\n\nexport default SetNode;\n"],"mappings":"OAAOA,aAAc,6BACZC,qBAAwB,uBAajC,MAAMC,gBAAgBF,SAErB,eAAWG,GAEV,MAAO,SAER,CASA,WAAAC,CAAaC,EAAYC,EAAYC,GAEpCC,QAOAC,KAAKJ,WAAaA,EAOlBI,KAAKH,WAAaA,EAOlBG,KAAKF,WAAaA,CAEnB,CAQA,WAAAG,CAAaC,GAEZ,OAAOF,KAAKJ,WAAWK,YAAaC,EAErC,CAEA,QAAAC,CAAUD,GAET,MAAMN,WAAEA,EAAUC,WAAEA,EAAUC,WAAEA,GAAeE,KAEzCI,EAAaJ,KAAKC,YAAaC,GAE/BG,EAAgBH,EAAQI,iBAAkBR,EAAWG,YAAaC,IAClEK,EAAaL,EAAQM,kBAAmBX,EAAWY,OAAQJ,GAE3DK,EAAgBZ,EAAWa,MAAOT,EAASK,GAC3CK,EAAgBhB,EAAWe,MAAOT,EAASE,GAE3CK,EAASP,EAAQW,cAAeT,GAChCU,EAAgB,GAEtB,IAAM,IAAIC,EAAI,EAAGA,EAAIN,EAAQM,IAAO,CAEnC,MAAMC,EAAYxB,iBAAkBuB,GAE/BC,IAAcnB,EAAY,IAE9BiB,EAAcG,KAAMP,GAEpBK,GAAKlB,EAAWY,OAAS,GAIzBK,EAAcG,KAAML,EAAgB,IAAMI,EAI5C,CAEA,MAAO,GAAId,EAAQgB,QAASd,OAAmBU,EAAcK,KAAM,SAEpE,iBAIc1B","ignoreList":[]}