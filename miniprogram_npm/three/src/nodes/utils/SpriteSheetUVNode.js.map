{"version":3,"file":"node_modules/three/src/nodes/utils/SpriteSheetUVNode.js","names":["Node","uv","nodeProxy","float","vec2","SpriteSheetUVNode","type","constructor","countNode","uvNode","frameNode","super","this","setup","width","height","frameNum","mod","mul","floor","column","row","sub","add","div","ceil","scale","reciprocal","uvFrameOffset","spritesheetUV","setParameterLength"],"sources":["node_modules/three/src/nodes/utils/SpriteSheetUVNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { uv } from '../accessors/UV.js';\nimport { nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\n\n/**\n * Can be used to compute texture coordinates for animated sprite sheets.\n *\n * ```js\n * const uvNode = spritesheetUV( vec2( 6, 6 ), uv(), time.mul( animationSpeed ) );\n *\n * material.colorNode = texture( spriteSheet, uvNode );\n * ```\n *\n * @augments Node\n */\nclass SpriteSheetUVNode extends Node {\n\n\tstatic get type() {\n\n\t\treturn 'SpriteSheetUVNode';\n\n\t}\n\n\t/**\n\t * Constructs a new sprite sheet uv node.\n\t *\n\t * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n\t * @param {Node<vec2>} [uvNode=uv()] - The uv node.\n\t * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n\t */\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\n\n\t\tsuper( 'vec2' );\n\n\t\t/**\n\t\t * The node that defines the number of sprites in the x and y direction (e.g 6x6).\n\t\t *\n\t\t * @type {Node<vec2>}\n\t\t */\n\t\tthis.countNode = countNode;\n\n\t\t/**\n\t\t * The uv node.\n\t\t *\n\t\t * @type {Node<vec2>}\n\t\t */\n\t\tthis.uvNode = uvNode;\n\n\t\t/**\n\t\t * The node that defines the current frame/sprite.\n\t\t *\n\t\t * @type {Node<float>}\n\t\t */\n\t\tthis.frameNode = frameNode;\n\n\t}\n\n\tsetup() {\n\n\t\tconst { frameNode, uvNode, countNode } = this;\n\n\t\tconst { width, height } = countNode;\n\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\n\n\t\tconst column = frameNum.mod( width );\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\n\n\t\tconst scale = countNode.reciprocal();\n\t\tconst uvFrameOffset = vec2( column, row );\n\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\n\n\t}\n\n}\n\nexport default SpriteSheetUVNode;\n\n/**\n * TSL function for creating a sprite sheet uv node.\n *\n * @tsl\n * @function\n * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\n * @param {?Node<vec2>} [uvNode=uv()] - The uv node.\n * @param {?Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\n * @returns {SpriteSheetUVNode}\n */\nexport const spritesheetUV = /*@__PURE__*/ nodeProxy( SpriteSheetUVNode ).setParameterLength( 3 );\n"],"mappings":"OAAOA,SAAU,yBACRC,OAAU,4BACVC,UAAWC,MAAOC,SAAY,oBAavC,MAAMC,0BAA0BL,KAE/B,eAAWM,GAEV,MAAO,mBAER,CASA,WAAAC,CAAaC,EAAWC,EAASR,KAAMS,EAAYP,MAAO,IAEzDQ,MAAO,QAOPC,KAAKJ,UAAYA,EAOjBI,KAAKH,OAASA,EAOdG,KAAKF,UAAYA,CAElB,CAEA,KAAAG,GAEC,MAAMH,UAAEA,EAASD,OAAEA,EAAMD,UAAEA,GAAcI,MAEnCE,MAAEA,EAAKC,OAAEA,GAAWP,EAEpBQ,EAAWN,EAAUO,IAAKH,EAAMI,IAAKH,IAAWI,QAEhDC,EAASJ,EAASC,IAAKH,GACvBO,EAAMN,EAAOO,IAAKN,EAASO,IAAK,GAAIC,IAAKV,GAAQW,QAEjDC,EAAQlB,EAAUmB,aAClBC,EAAgBxB,KAAMgB,EAAQC,GAEpC,OAAOZ,EAAOc,IAAKK,GAAgBV,IAAKQ,EAEzC,iBAIcrB,yBAYR,MAAMwB,cAA8B3B,UAAWG,mBAAoByB,mBAAoB","ignoreList":[]}