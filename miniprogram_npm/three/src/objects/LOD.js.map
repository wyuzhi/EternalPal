{"version":3,"file":"node_modules/three/src/objects/LOD.js","names":["Vector3","Object3D","_v1","_v2","LOD","constructor","super","this","isLOD","_currentLevel","type","Object","defineProperties","levels","enumerable","value","autoUpdate","copy","source","i","l","length","level","addLevel","object","clone","distance","hysteresis","Math","abs","splice","add","removeLevel","removedElements","remove","getCurrentLevel","getObjectForDistance","levelDistance","visible","raycast","raycaster","intersects","setFromMatrixPosition","matrixWorld","ray","origin","distanceTo","update","camera","zoom","toJSON","meta","data","push","uuid"],"sources":["node_modules/three/src/objects/LOD.js"],"sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n/**\n * A component for providing a basic Level of Detail (LOD) mechanism.\n *\n * Every LOD level is associated with an object, and rendering can be switched\n * between them at the distances specified. Typically you would create, say,\n * three meshes, one for far away (low detail), one for mid range (medium\n * detail) and one for close up (high detail).\n *\n * ```js\n * const lod = new THREE.LOD();\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\n *\n * //Create spheres with 3 levels of detail and create new LOD levels for them\n * for( let i = 0; i < 3; i++ ) {\n *\n * \tconst geometry = new THREE.IcosahedronGeometry( 10, 3 - i );\n * \tconst mesh = new THREE.Mesh( geometry, material );\n * \tlod.addLevel( mesh, i * 75 );\n *\n * }\n *\n * scene.add( lod );\n * ```\n *\n * @augments Object3D\n */\nclass LOD extends Object3D {\n\n\t/**\n\t * Constructs a new LOD.\n\t */\n\tconstructor() {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLOD = true;\n\n\t\t/**\n\t\t * The current LOD index.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\t/**\n\t\t\t * This array holds the LOD levels.\n\t\t\t *\n\t\t\t * @name LOD#levels\n\t\t\t * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}\n\t\t\t */\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Whether the LOD object is updated automatically by the renderer per frame\n\t\t * or not. If set to `false`, you have to call {@link LOD#update} in the\n\t\t * render loop by yourself.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Adds a mesh that will display at a certain distance and greater. Typically\n\t * the further away the distance, the lower the detail on the mesh.\n\t *\n\t * @param {Object3D} object - The 3D object to display at this level.\n\t * @param {number} [distance=0] - The distance at which to display this level of detail.\n\t * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.\n\t * @return {LOD} A reference to this instance.\n\t */\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes an existing level, based on the distance from the camera.\n\t * Returns `true` when the level has been removed. Otherwise `false`.\n\t *\n\t * @param {number} distance - Distance of the level to remove.\n\t * @return {boolean} Whether the level has been removed or not.\n\t */\n\tremoveLevel( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0; i < levels.length; i ++ ) {\n\n\t\t\tif ( levels[ i ].distance === distance ) {\n\n\t\t\t\tconst removedElements = levels.splice( i, 1 );\n\t\t\t\tthis.remove( removedElements[ 0 ].object );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Returns the currently active LOD level index.\n\t *\n\t * @return {number} The current active LOD level index.\n\t */\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\t/**\n\t * Returns a reference to the first 3D object that is greater than\n\t * the given distance.\n\t *\n\t * @param {number} distance - The LOD distance.\n\t * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.\n\t */\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this LOD.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the LOD by computing which LOD level should be visible according\n\t * to the current distance of the given camera.\n\t *\n\t * @param {Camera} camera - The camera the scene is rendered with.\n\t */\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1.distanceTo( _v2 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n\nexport { LOD };\n"],"mappings":"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","ignoreList":[]}