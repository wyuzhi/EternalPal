{"version":3,"file":"node_modules/three/src/objects/LineSegments.js","names":["Line","Vector3","Float32BufferAttribute","_start","_end","LineSegments","constructor","geometry","material","super","this","isLineSegments","type","computeLineDistances","index","positionAttribute","attributes","position","lineDistances","i","l","count","fromBufferAttribute","distanceTo","setAttribute","console","warn"],"sources":["node_modules/three/src/objects/LineSegments.js"],"sourcesContent":["import { Line } from './Line.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\n/**\n * A series of lines drawn between pairs of vertices.\n *\n * @augments Line\n */\nclass LineSegments extends Line {\n\n\t/**\n\t * Constructs a new line segments.\n\t *\n\t * @param {BufferGeometry} [geometry] - The line geometry.\n\t * @param {Material|Array<Material>} [material] - The line material.\n\t */\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineSegments };\n"],"mappings":"OAASA,SAAY,mBACZC,YAAe,4BACfC,2BAA8B,6BAEvC,MAAMC,OAAuB,IAAIF,QAC3BG,KAAqB,IAAIH,QAO/B,MAAMI,qBAAqBL,KAQ1B,WAAAM,CAAaC,EAAUC,GAEtBC,MAAOF,EAAUC,GASjBE,KAAKC,gBAAiB,EAEtBD,KAAKE,KAAO,cAEb,CAEA,oBAAAC,GAEC,MAAMN,EAAWG,KAAKH,SAItB,GAAwB,OAAnBA,EAASO,MAAiB,CAE9B,MAAMC,EAAoBR,EAASS,WAAWC,SACxCC,EAAgB,GAEtB,IAAM,IAAIC,EAAI,EAAGC,EAAIL,EAAkBM,MAAOF,EAAIC,EAAGD,GAAK,EAEzDhB,OAAOmB,oBAAqBP,EAAmBI,GAC/Cf,KAAKkB,oBAAqBP,EAAmBI,EAAI,GAEjDD,EAAeC,GAAc,IAANA,EAAY,EAAID,EAAeC,EAAI,GAC1DD,EAAeC,EAAI,GAAMD,EAAeC,GAAMhB,OAAOoB,WAAYnB,MAIlEG,EAASiB,aAAc,eAAgB,IAAItB,uBAAwBgB,EAAe,GAEnF,MAECO,QAAQC,KAAM,yGAIf,OAAOhB,IAER,SAIQL","ignoreList":[]}