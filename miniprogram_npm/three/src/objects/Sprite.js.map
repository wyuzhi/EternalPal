{"version":3,"file":"node_modules/three/src/objects/Sprite.js","names":["Vector2","Vector3","Matrix4","Triangle","Object3D","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","SpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","constructor","material","super","this","isSprite","type","undefined","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","geometry","center","count","raycast","raycaster","intersects","camera","console","error","setFromMatrixScale","matrixWorld","copy","modelViewMatrix","multiplyMatrices","matrixWorldInverse","setFromMatrixPosition","isPerspectiveCamera","sizeAttenuation","multiplyScalar","z","rotation","sin","cos","Math","transformVertex","set","intersect","ray","intersectTriangle","distance","origin","distanceTo","near","far","push","point","clone","uv","getInterpolation","face","object","source","recursive","vertexPosition","mvPosition","scale","subVectors","addScalar","multiply","x","y","applyMatrix4"],"sources":["node_modules/three/src/objects/Sprite.js"],"sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\n/**\n * A sprite is a plane that always faces towards the camera, generally with a\n * partially transparent texture applied.\n *\n * Sprites do not cast shadows, setting {@link Object3D#castShadow} to `true` will\n * have no effect.\n *\n * ```js\n * const map = new THREE.TextureLoader().load( 'sprite.png' );\n * const material = new THREE.SpriteMaterial( { map: map } );\n *\n * const sprite = new THREE.Sprite( material );\n * scene.add( sprite );\n * ```\n *\n * @augments Object3D\n */\nclass Sprite extends Object3D {\n\n\t/**\n\t * Constructs a new sprite.\n\t *\n\t * @param {SpriteMaterial} [material] - The sprite material.\n\t */\n\tconstructor( material = new SpriteMaterial() ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\t/**\n\t\t * The sprite geometry.\n\t\t *\n\t\t * @type {BufferGeometry}\n\t\t */\n\t\tthis.geometry = _geometry;\n\n\t\t/**\n\t\t * The sprite material.\n\t\t *\n\t\t * @type {SpriteMaterial}\n\t\t */\n\t\tthis.material = material;\n\n\t\t/**\n\t\t * The sprite's anchor point, and the point around which the sprite rotates.\n\t\t * A value of `(0.5, 0.5)` corresponds to the midpoint of the sprite. A value\n\t\t * of `(0, 0)` corresponds to the lower left corner of the sprite.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t\t/**\n\t\t * The number of instances of this sprite.\n\t\t * Can only be used with {@link WebGPURenderer}.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.count = 1;\n\n\t}\n\n\t/**\n\t * Computes intersection points between a casted ray and this sprite.\n\t *\n\t * @param {Raycaster} raycaster - The raycaster.\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\n\t */\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nexport { Sprite };\n"],"mappings":"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","ignoreList":[]}