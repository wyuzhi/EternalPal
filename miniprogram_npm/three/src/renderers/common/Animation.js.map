{"version":3,"file":"node_modules/three/src/renderers/common/Animation.js","names":["Animation","constructor","nodes","info","this","_context","self","_animationLoop","_requestId","start","update","time","xrFrame","requestAnimationFrame","autoReset","reset","nodeFrame","frame","frameId","stop","cancelAnimationFrame","getAnimationLoop","setAnimationLoop","callback","getContext","setContext","context","dispose"],"sources":["node_modules/three/src/renderers/common/Animation.js"],"sourcesContent":["\n/**\n * This module manages the internal animation loop of the renderer.\n *\n * @private\n */\nclass Animation {\n\n\t/**\n\t * Constructs a new animation loop management component.\n\t *\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( nodes, info ) {\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\t/**\n\t\t * A reference to the context from `requestAnimationFrame()` can\n\t\t * be called (usually `window`).\n\t\t *\n\t\t * @type {?(Window|XRSession)}\n\t\t */\n\t\tthis._context = typeof self !== 'undefined' ? self : null;\n\n\t\t/**\n\t\t * The user-defined animation loop.\n\t\t *\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._animationLoop = null;\n\n\t\t/**\n\t\t * The requestId which is returned from the `requestAnimationFrame()` call.\n\t\t * Can be used to cancel the stop the animation loop.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._requestId = null;\n\n\t}\n\n\t/**\n\t * Starts the internal animation loop.\n\t */\n\tstart() {\n\n\t\tconst update = ( time, xrFrame ) => {\n\n\t\t\tthis._requestId = this._context.requestAnimationFrame( update );\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t\tthis.nodes.nodeFrame.update();\n\n\t\t\tthis.info.frame = this.nodes.nodeFrame.frameId;\n\n\t\t\tif ( this._animationLoop !== null ) this._animationLoop( time, xrFrame );\n\n\t\t};\n\n\t\tupdate();\n\n\t}\n\n\t/**\n\t * Stops the internal animation loop.\n\t */\n\tstop() {\n\n\t\tthis._context.cancelAnimationFrame( this._requestId );\n\n\t\tthis._requestId = null;\n\n\t}\n\n\t/**\n\t * Returns the user-level animation loop.\n\t *\n\t * @return {?Function} The animation loop.\n\t */\n\tgetAnimationLoop() {\n\n\t\treturn this._animationLoop;\n\n\t}\n\n\t/**\n\t * Defines the user-level animation loop.\n\t *\n\t * @param {?Function} callback - The animation loop.\n\t */\n\tsetAnimationLoop( callback ) {\n\n\t\tthis._animationLoop = callback;\n\n\t}\n\n\t/**\n\t * Returns the animation context.\n\t *\n\t * @return {Window|XRSession} The animation context.\n\t */\n\tgetContext() {\n\n\t\treturn this._context;\n\n\t}\n\n\t/**\n\t * Defines the context in which `requestAnimationFrame()` is executed.\n\t *\n\t * @param {Window|XRSession} context - The context to set.\n\t */\n\tsetContext( context ) {\n\n\t\tthis._context = context;\n\n\t}\n\n\t/**\n\t * Frees all internal resources and stops the animation loop.\n\t */\n\tdispose() {\n\n\t\tthis.stop();\n\n\t}\n\n}\n\nexport default Animation;\n"],"mappings":"AAMA,MAAMA,UAQL,WAAAC,CAAaC,EAAOC,GAOnBC,KAAKF,MAAQA,EAObE,KAAKD,KAAOA,EAQZC,KAAKC,SAA2B,oBAATC,KAAuBA,KAAO,KAQrDF,KAAKG,eAAiB,KAStBH,KAAKI,WAAa,IAEnB,CAKA,KAAAC,GAEC,MAAMC,EAAS,CAAEC,EAAMC,KAEtBR,KAAKI,WAAaJ,KAAKC,SAASQ,sBAAuBH,IAE1B,IAAxBN,KAAKD,KAAKW,WAAqBV,KAAKD,KAAKY,QAE9CX,KAAKF,MAAMc,UAAUN,SAErBN,KAAKD,KAAKc,MAAQb,KAAKF,MAAMc,UAAUE,QAEV,OAAxBd,KAAKG,gBAA0BH,KAAKG,eAAgBI,EAAMC,EAAS,EAIzEF,GAED,CAKA,IAAAS,GAECf,KAAKC,SAASe,qBAAsBhB,KAAKI,YAEzCJ,KAAKI,WAAa,IAEnB,CAOA,gBAAAa,GAEC,OAAOjB,KAAKG,cAEb,CAOA,gBAAAe,CAAkBC,GAEjBnB,KAAKG,eAAiBgB,CAEvB,CAOA,UAAAC,GAEC,OAAOpB,KAAKC,QAEb,CAOA,UAAAoB,CAAYC,GAEXtB,KAAKC,SAAWqB,CAEjB,CAKA,OAAAC,GAECvB,KAAKe,MAEN,iBAIcnB","ignoreList":[]}