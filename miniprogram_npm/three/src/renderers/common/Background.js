import DataMap from"./DataMap.js";import Color4 from"./Color4.js";import{vec4,context,normalWorldGeometry,backgroundBlurriness,backgroundIntensity,backgroundRotation,modelViewProjection}from"../../nodes/TSL.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import{Mesh}from"../../objects/Mesh.js";import{SphereGeometry}from"../../geometries/SphereGeometry.js";import{BackSide}from"../../constants.js";const _clearColor=new Color4;class Background extends DataMap{constructor(e,o){super(),this.renderer=e,this.nodes=o}update(e,o,r){const a=this.renderer,t=this.nodes.getBackgroundNode(e)||e.background;let l=!1;if(null===t)a._clearColor.getRGB(_clearColor),_clearColor.a=a._clearColor.a;else if(!0===t.isColor)t.getRGB(_clearColor),_clearColor.a=1,l=!0;else if(!0===t.isNode){const c=this.get(e),s=t;_clearColor.copy(a._clearColor);let d=c.backgroundMesh;if(void 0===d){const u=context(vec4(s).mul(backgroundIntensity),{getUV:()=>backgroundRotation.mul(normalWorldGeometry),getTextureLevel:()=>backgroundBlurriness});let m=modelViewProjection;m=m.setZ(m.w);const g=new NodeMaterial;function p(){t.removeEventListener("dispose",p),d.material.dispose(),d.geometry.dispose()}g.name="Background.material",g.side=BackSide,g.depthTest=!1,g.depthWrite=!1,g.allowOverride=!1,g.fog=!1,g.lights=!1,g.vertexNode=m,g.colorNode=u,c.backgroundMeshNode=u,c.backgroundMesh=d=new Mesh(new SphereGeometry(1,32,32),g),d.frustumCulled=!1,d.name="Background.mesh",d.onBeforeRender=function(e,o,r){this.matrixWorld.copyPosition(r.matrixWorld)},t.addEventListener("dispose",p)}const i=s.getCacheKey();c.backgroundCacheKey!==i&&(c.backgroundMeshNode.node=vec4(s).mul(backgroundIntensity),c.backgroundMeshNode.needsUpdate=!0,d.material.needsUpdate=!0,c.backgroundCacheKey=i),o.unshift(d,d.geometry,d.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",t);const n=a.xr.getEnvironmentBlendMode();if("additive"===n?_clearColor.set(0,0,0,1):"alpha-blend"===n&&_clearColor.set(0,0,0,0),!0===a.autoClear||!0===l){const C=r.clearColorValue;C.r=_clearColor.r,C.g=_clearColor.g,C.b=_clearColor.b,C.a=_clearColor.a,!0!==a.backend.isWebGLBackend&&!0!==a.alpha||(C.r*=C.a,C.g*=C.a,C.b*=C.a),r.depthClearValue=a._clearDepth,r.stencilClearValue=a._clearStencil,r.clearColor=!0===a.autoClearColor,r.clearDepth=!0===a.autoClearDepth,r.clearStencil=!0===a.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}export default Background;
//# sourceMappingURL=Background.js.map