{"version":3,"file":"node_modules/three/src/renderers/common/Background.js","names":["DataMap","Color4","vec4","context","normalWorldGeometry","backgroundBlurriness","backgroundIntensity","backgroundRotation","modelViewProjection","NodeMaterial","Mesh","SphereGeometry","BackSide","_clearColor","Background","constructor","renderer","nodes","super","this","update","scene","renderList","renderContext","background","getBackgroundNode","forceClear","getRGB","a","isColor","isNode","sceneData","get","backgroundNode","copy","backgroundMesh","undefined","backgroundMeshNode","mul","getUV","getTextureLevel","viewProj","setZ","w","nodeMaterial","onBackgroundDispose","removeEventListener","material","dispose","geometry","name","side","depthTest","depthWrite","allowOverride","fog","lights","vertexNode","colorNode","frustumCulled","onBeforeRender","camera","matrixWorld","copyPosition","addEventListener","backgroundCacheKey","getCacheKey","node","needsUpdate","unshift","console","error","environmentBlendMode","xr","getEnvironmentBlendMode","set","autoClear","clearColorValue","r","g","b","backend","isWebGLBackend","alpha","depthClearValue","_clearDepth","stencilClearValue","_clearStencil","clearColor","autoClearColor","clearDepth","autoClearDepth","clearStencil","autoClearStencil"],"sources":["node_modules/three/src/renderers/common/Background.js"],"sourcesContent":["import DataMap from './DataMap.js';\nimport Color4 from './Color4.js';\nimport { vec4, context, normalWorldGeometry, backgroundBlurriness, backgroundIntensity, backgroundRotation, modelViewProjection } from '../../nodes/TSL.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\n\nimport { Mesh } from '../../objects/Mesh.js';\nimport { SphereGeometry } from '../../geometries/SphereGeometry.js';\nimport { BackSide } from '../../constants.js';\n\nconst _clearColor = /*@__PURE__*/ new Color4();\n\n/**\n * This renderer module manages the background.\n *\n * @private\n * @augments DataMap\n */\nclass Background extends DataMap {\n\n\t/**\n\t * Constructs a new background management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t */\n\tconstructor( renderer, nodes ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t}\n\n\t/**\n\t * Updates the background for the given scene. Depending on how `Scene.background`\n\t * or `Scene.backgroundNode` are configured, this method might configure a simple clear\n\t * or add a mesh to the render list for rendering the background as a textured plane\n\t * or skybox.\n\t *\n\t * @param {Scene} scene - The scene.\n\t * @param {RenderList} renderList - The current render list.\n\t * @param {RenderContext} renderContext - The current render context.\n\t */\n\tupdate( scene, renderList, renderContext ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\n\n\t\tlet forceClear = false;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\trenderer._clearColor.getRGB( _clearColor );\n\t\t\t_clearColor.a = renderer._clearColor.a;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\tbackground.getRGB( _clearColor );\n\t\t\t_clearColor.a = 1;\n\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneData = this.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\n\n\t\t\tif ( backgroundMesh === undefined ) {\n\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUV: () => backgroundRotation.mul( normalWorldGeometry ),\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\n\t\t\t\t} );\n\n\t\t\t\tlet viewProj = modelViewProjection;\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\n\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\n\t\t\t\tnodeMaterial.name = 'Background.material';\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.allowOverride = false;\n\t\t\t\tnodeMaterial.fog = false;\n\t\t\t\tnodeMaterial.lights = false;\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\n\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\n\t\t\t\tbackgroundMesh.frustumCulled = false;\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\n\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\tfunction onBackgroundDispose() {\n\n\t\t\t\t\tbackground.removeEventListener( 'dispose', onBackgroundDispose );\n\n\t\t\t\t\tbackgroundMesh.material.dispose();\n\t\t\t\t\tbackgroundMesh.geometry.dispose();\n\n\t\t\t\t}\n\n\t\t\t\tbackground.addEventListener( 'dispose', onBackgroundDispose );\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\n\t\t\t\tsceneData.backgroundMeshNode.needsUpdate = true;\n\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t//\n\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\n\n\t\tif ( environmentBlendMode === 'additive' ) {\n\n\t\t\t_clearColor.set( 0, 0, 0, 1 );\n\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\n\n\t\t\t_clearColor.set( 0, 0, 0, 0 );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\n\n\t\t\tclearColorValue.r = _clearColor.r;\n\t\t\tclearColorValue.g = _clearColor.g;\n\t\t\tclearColorValue.b = _clearColor.b;\n\t\t\tclearColorValue.a = _clearColor.a;\n\n\t\t\t// premultiply alpha\n\n\t\t\tif ( renderer.backend.isWebGLBackend === true || renderer.alpha === true ) {\n\n\t\t\t\tclearColorValue.r *= clearColorValue.a;\n\t\t\t\tclearColorValue.g *= clearColorValue.a;\n\t\t\t\tclearColorValue.b *= clearColorValue.a;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\n\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\n\n\t\t} else {\n\n\t\t\trenderContext.clearColor = false;\n\t\t\trenderContext.clearDepth = false;\n\t\t\trenderContext.clearStencil = false;\n\n\t\t}\n\n\t}\n\n}\n\nexport default Background;\n"],"mappings":"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","ignoreList":[]}