{"version":3,"file":"node_modules/three/src/renderers/common/Binding.js","names":["Binding","constructor","name","this","visibility","setVisibility","clone","Object","assign"],"sources":["node_modules/three/src/renderers/common/Binding.js"],"sourcesContent":["/**\n * A binding represents the connection between a resource (like a texture, sampler\n * or uniform buffer) and the resource definition in a shader stage.\n *\n * This module is an abstract base class for all concrete bindings types.\n *\n * @abstract\n * @private\n */\nclass Binding {\n\n\t/**\n\t * Constructs a new binding.\n\t *\n\t * @param {string} [name=''] - The binding's name.\n\t */\n\tconstructor( name = '' ) {\n\n\t\t/**\n\t\t * The binding's name.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * A bitmask that defines in what shader stages the\n\t\t * binding's resource is accessible.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.visibility = 0;\n\n\t}\n\n\t/**\n\t * Makes sure binding's resource is visible for the given shader stage.\n\t *\n\t * @param {number} visibility - The shader stage.\n\t */\n\tsetVisibility( visibility ) {\n\n\t\tthis.visibility |= visibility;\n\n\t}\n\n\t/**\n\t * Clones the binding.\n\t *\n\t * @return {Binding} The cloned binding.\n\t */\n\tclone() {\n\n\t\treturn Object.assign( new this.constructor(), this );\n\n\t}\n\n}\n\nexport default Binding;\n"],"mappings":"AASA,MAAMA,QAOL,WAAAC,CAAaC,EAAO,IAOnBC,KAAKD,KAAOA,EAQZC,KAAKC,WAAa,CAEnB,CAOA,aAAAC,CAAeD,GAEdD,KAAKC,YAAcA,CAEpB,CAOA,KAAAE,GAEC,OAAOC,OAAOC,OAAQ,IAAIL,KAAKF,YAAeE,KAE/C,iBAIcH","ignoreList":[]}