import{equirectUV}from"../../nodes/utils/EquirectUV.js";import{texture as TSL_Texture}from"../../nodes/accessors/TextureNode.js";import{positionWorldDirection}from"../../nodes/accessors/Position.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import{WebGLCubeRenderTarget}from"../../renderers/WebGLCubeRenderTarget.js";import{Scene}from"../../scenes/Scene.js";import{CubeCamera}from"../../cameras/CubeCamera.js";import{BoxGeometry}from"../../geometries/BoxGeometry.js";import{Mesh}from"../../objects/Mesh.js";import{BackSide,NoBlending,LinearFilter,LinearMipmapLinearFilter}from"../../constants.js";class CubeRenderTarget extends WebGLCubeRenderTarget{constructor(e=1,r={}){super(e,r),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,r){const t=r.minFilter,i=r.generateMipmaps;r.generateMipmaps=!0,this.texture.type=r.type,this.texture.colorSpace=r.colorSpace,this.texture.generateMipmaps=r.generateMipmaps,this.texture.minFilter=r.minFilter,this.texture.magFilter=r.magFilter;const o=new BoxGeometry(5,5,5),s=equirectUV(positionWorldDirection),n=new NodeMaterial;n.colorNode=TSL_Texture(r,s,0),n.side=BackSide,n.blending=NoBlending;const a=new Mesh(o,n),m=new Scene;m.add(a),r.minFilter===LinearMipmapLinearFilter&&(r.minFilter=LinearFilter);const p=new CubeCamera(1,10,this),c=e.getMRT();return e.setMRT(null),p.update(e,m),e.setMRT(c),r.minFilter=t,r.currentGenerateMipmaps=i,a.geometry.dispose(),a.material.dispose(),this}}export default CubeRenderTarget;
//# sourceMappingURL=CubeRenderTarget.js.map