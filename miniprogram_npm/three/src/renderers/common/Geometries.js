import DataMap from"./DataMap.js";import{AttributeType}from"./Constants.js";import{arrayNeedsUint32}from"../../utils.js";import{Uint16BufferAttribute,Uint32BufferAttribute}from"../../core/BufferAttribute.js";function getWireframeVersion(t){return null!==t.index?t.index.version:t.attributes.position.version}function getWireframeIndex(t){const e=[],i=t.index,r=t.attributes.position;if(null!==i){const t=i.array;for(let i=0,r=t.length;i<r;i+=3){const r=t[i+0],s=t[i+1],a=t[i+2];e.push(r,s,s,a,a,r)}}else{for(let t=0,i=r.array.length/3-1;t<i;t+=3){const i=t+0,r=t+1,s=t+2;e.push(i,r,r,s,s,i)}}const s=new(arrayNeedsUint32(e)?Uint32BufferAttribute:Uint16BufferAttribute)(e,1);return s.version=getWireframeVersion(t),s}class Geometries extends DataMap{constructor(t,e){super(),this.attributes=t,this.info=e,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(t){const e=t.geometry;return super.has(e)&&!0===this.get(e).initialized}updateForRender(t){!1===this.has(t)&&this.initGeometry(t),this.updateAttributes(t)}initGeometry(t){const e=t.geometry;this.get(e).initialized=!0,this.info.memory.geometries++;const i=()=>{this.info.memory.geometries--;const r=e.index,s=t.getAttributes();null!==r&&this.attributes.delete(r);for(const t of s)this.attributes.delete(t);const a=this.wireframes.get(e);void 0!==a&&this.attributes.delete(a),e.removeEventListener("dispose",i)};e.addEventListener("dispose",i)}updateAttributes(t){const e=t.getAttributes();for(const t of e)t.isStorageBufferAttribute||t.isStorageInstancedBufferAttribute?this.updateAttribute(t,AttributeType.STORAGE):this.updateAttribute(t,AttributeType.VERTEX);const i=this.getIndex(t);null!==i&&this.updateAttribute(i,AttributeType.INDEX);const r=t.geometry.indirect;null!==r&&this.updateAttribute(r,AttributeType.INDIRECT)}updateAttribute(t,e){const i=this.info.render.calls;t.isInterleavedBufferAttribute?void 0===this.attributeCall.get(t)?(this.attributes.update(t,e),this.attributeCall.set(t,i)):this.attributeCall.get(t.data)!==i&&(this.attributes.update(t,e),this.attributeCall.set(t.data,i),this.attributeCall.set(t,i)):this.attributeCall.get(t)!==i&&(this.attributes.update(t,e),this.attributeCall.set(t,i))}getIndirect(t){return t.geometry.indirect}getIndex(t){const{geometry:e,material:i}=t;let r=e.index;if(!0===i.wireframe){const t=this.wireframes;let i=t.get(e);void 0===i?(i=getWireframeIndex(e),t.set(e,i)):i.version!==getWireframeVersion(e)&&(this.attributes.delete(i),i=getWireframeIndex(e),t.set(e,i)),r=i}return r}}export default Geometries;
//# sourceMappingURL=Geometries.js.map