{"version":3,"file":"node_modules/three/src/renderers/common/IndirectStorageBufferAttribute.js","names":["StorageBufferAttribute","IndirectStorageBufferAttribute","constructor","count","itemSize","super","Uint32Array","this","isIndirectStorageBufferAttribute"],"sources":["node_modules/three/src/renderers/common/IndirectStorageBufferAttribute.js"],"sourcesContent":["import StorageBufferAttribute from './StorageBufferAttribute.js';\n\n/**\n * This special type of buffer attribute is intended for compute shaders.\n * It can be used to encode draw parameters for indirect draw calls.\n *\n * Note: This type of buffer attribute can only be used with `WebGPURenderer`\n * and a WebGPU backend.\n *\n * @augments StorageBufferAttribute\n */\nclass IndirectStorageBufferAttribute extends StorageBufferAttribute {\n\n\t/**\n\t * Constructs a new storage buffer attribute.\n\t *\n\t * @param {number|Uint32Array} count - The item count. It is also valid to pass a `Uint32Array` as an argument.\n\t * The subsequent parameter is then obsolete.\n\t * @param {number} itemSize - The item size.\n\t */\n\tconstructor( count, itemSize ) {\n\n\t\tsuper( count, itemSize, Uint32Array );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isIndirectStorageBufferAttribute = true;\n\n\t}\n\n}\n\nexport default IndirectStorageBufferAttribute;\n"],"mappings":"OAAOA,2BAA4B,8BAWnC,MAAMC,uCAAuCD,uBAS5C,WAAAE,CAAaC,EAAOC,GAEnBC,MAAOF,EAAOC,EAAUE,aASxBC,KAAKC,kCAAmC,CAEzC,iBAIcP","ignoreList":[]}