{"version":3,"file":"node_modules/three/src/renderers/common/Info.js","names":["Info","constructor","this","autoReset","frame","calls","render","frameCalls","drawCalls","triangles","points","lines","timestamp","compute","memory","geometries","textures","update","object","count","instanceCount","isMesh","isSprite","isPoints","isLineSegments","isLine","console","error","reset","dispose"],"sources":["node_modules/three/src/renderers/common/Info.js"],"sourcesContent":["/**\n * This renderer module provides a series of statistical information\n * about the GPU memory and the rendering process. Useful for debugging\n * and monitoring.\n */\nclass Info {\n\n\t/**\n\t * Constructs a new info component.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * Whether frame related metrics should automatically\n\t\t * be resetted or not. This property should be set to `false`\n\t\t * by apps which manage their own animation loop. They must\n\t\t * then call `renderer.info.reset()` once per frame manually.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.autoReset = true;\n\n\t\t/**\n\t\t * The current frame ID. This ID is managed\n\t\t * by `NodeFrame`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.frame = 0;\n\n\t\t/**\n\t\t * The number of render calls since the\n\t\t * app has been started.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.calls = 0;\n\n\t\t/**\n\t\t * Render related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} calls - The number of render calls since the app has been started.\n\t\t * @property {number} frameCalls - The number of render calls of the current frame.\n\t\t * @property {number} drawCalls - The number of draw calls of the current frame.\n\t\t * @property {number} triangles - The number of rendered triangle primitives of the current frame.\n\t\t * @property {number} points - The number of rendered point primitives of the current frame.\n\t\t * @property {number} lines - The number of rendered line primitives of the current frame.\n\t\t * @property {number} timestamp - The timestamp of the frame when using `renderer.renderAsync()`.\n\t\t */\n\t\tthis.render = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\tdrawCalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0,\n\t\t\ttimestamp: 0,\n\t\t};\n\n\t\t/**\n\t\t * Compute related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} calls - The number of compute calls since the app has been started.\n\t\t * @property {number} frameCalls - The number of compute calls of the current frame.\n\t\t * @property {number} timestamp - The timestamp of the frame when using `renderer.computeAsync()`.\n\t\t */\n\t\tthis.compute = {\n\t\t\tcalls: 0,\n\t\t\tframeCalls: 0,\n\t\t\ttimestamp: 0\n\t\t};\n\n\t\t/**\n\t\t * Memory related metrics.\n\t\t *\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t * @property {number} geometries - The number of active geometries.\n\t\t * @property {number} frameCalls - The number of active textures.\n\t\t */\n\t\tthis.memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t}\n\n\t/**\n\t * This method should be executed per draw call and updates the corresponding metrics.\n\t *\n\t * @param {Object3D} object - The 3D object that is going to be rendered.\n\t * @param {number} count - The vertex or index count.\n\t * @param {number} instanceCount - The instance count.\n\t */\n\tupdate( object, count, instanceCount ) {\n\n\t\tthis.render.drawCalls ++;\n\n\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\tthis.render.points += instanceCount * count;\n\n\t\t} else if ( object.isLineSegments ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Resets frame related metrics.\n\t */\n\treset() {\n\n\t\tthis.render.drawCalls = 0;\n\t\tthis.render.frameCalls = 0;\n\t\tthis.compute.frameCalls = 0;\n\n\t\tthis.render.triangles = 0;\n\t\tthis.render.points = 0;\n\t\tthis.render.lines = 0;\n\n\n\t}\n\n\t/**\n\t * Performs a complete reset of the object.\n\t */\n\tdispose() {\n\n\t\tthis.reset();\n\n\t\tthis.calls = 0;\n\n\t\tthis.render.calls = 0;\n\t\tthis.compute.calls = 0;\n\n\t\tthis.render.timestamp = 0;\n\t\tthis.compute.timestamp = 0;\n\t\tthis.memory.geometries = 0;\n\t\tthis.memory.textures = 0;\n\n\t}\n\n}\n\n\nexport default Info;\n"],"mappings":"AAKA,MAAMA,KAKL,WAAAC,GAWCC,KAAKC,WAAY,EAUjBD,KAAKE,MAAQ,EAUbF,KAAKG,MAAQ,EAebH,KAAKI,OAAS,CACbD,MAAO,EACPE,WAAY,EACZC,UAAW,EACXC,UAAW,EACXC,OAAQ,EACRC,MAAO,EACPC,UAAW,GAYZV,KAAKW,QAAU,CACdR,MAAO,EACPE,WAAY,EACZK,UAAW,GAWZV,KAAKY,OAAS,CACbC,WAAY,EACZC,SAAU,EAGZ,CASA,MAAAC,CAAQC,EAAQC,EAAOC,GAEtBlB,KAAKI,OAAOE,YAEPU,EAAOG,QAAUH,EAAOI,SAE5BpB,KAAKI,OAAOG,WAAaW,GAAkBD,EAAQ,GAExCD,EAAOK,SAElBrB,KAAKI,OAAOI,QAAUU,EAAgBD,EAE3BD,EAAOM,eAElBtB,KAAKI,OAAOK,OAASS,GAAkBD,EAAQ,GAEpCD,EAAOO,OAElBvB,KAAKI,OAAOK,OAASS,GAAkBD,EAAQ,GAI/CO,QAAQC,MAAO,yCAIjB,CAKA,KAAAC,GAEC1B,KAAKI,OAAOE,UAAY,EACxBN,KAAKI,OAAOC,WAAa,EACzBL,KAAKW,QAAQN,WAAa,EAE1BL,KAAKI,OAAOG,UAAY,EACxBP,KAAKI,OAAOI,OAAS,EACrBR,KAAKI,OAAOK,MAAQ,CAGrB,CAKA,OAAAkB,GAEC3B,KAAK0B,QAEL1B,KAAKG,MAAQ,EAEbH,KAAKI,OAAOD,MAAQ,EACpBH,KAAKW,QAAQR,MAAQ,EAErBH,KAAKI,OAAOM,UAAY,EACxBV,KAAKW,QAAQD,UAAY,EACzBV,KAAKY,OAAOC,WAAa,EACzBb,KAAKY,OAAOE,SAAW,CAExB,iBAKchB","ignoreList":[]}