{"version":3,"file":"node_modules/three/src/renderers/common/PostProcessing.js","names":["NodeMaterial","ColorManagement","vec4","renderOutput","NoToneMapping","QuadMesh","PostProcessing","constructor","renderer","outputNode","this","outputColorTransform","needsUpdate","material","name","_quadMesh","_context","render","_update","onBeforePostProcessing","toneMapping","outputColorSpace","workingColorSpace","currentXR","xr","enabled","onAfterPostProcessing","context","dispose","postProcessing","fragmentNode","renderAsync"],"sources":["node_modules/three/src/renderers/common/PostProcessing.js"],"sourcesContent":["import NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\nimport { vec4, renderOutput } from '../../nodes/TSL.js';\nimport { NoToneMapping } from '../../constants.js';\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\n\n/**\n * This module is responsible to manage the post processing setups in apps.\n * You usually create a single instance of this class and use it to define\n * the output of your post processing effect chain.\n * ```js\n * const postProcessing = new PostProcessing( renderer );\n *\n * const scenePass = pass( scene, camera );\n *\n * postProcessing.outputNode = scenePass;\n * ```\n *\n * Note: This module can only be used with `WebGPURenderer`.\n */\nclass PostProcessing {\n\n\t/**\n\t * Constructs a new post processing management module.\n\t *\n\t * @param {Renderer} renderer - A reference to the renderer.\n\t * @param {Node<vec4>} outputNode - An optional output node.\n\t */\n\tconstructor( renderer, outputNode = vec4( 0, 0, 1, 1 ) ) {\n\n\t\t/**\n\t\t * A reference to the renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * A node which defines the final output of the post\n\t\t * processing. This is usually the last node in a chain\n\t\t * of effect nodes.\n\t\t *\n\t\t * @type {Node<vec4>}\n\t\t */\n\t\tthis.outputNode = outputNode;\n\n\t\t/**\n\t\t * Whether the default output tone mapping and color\n\t\t * space transformation should be enabled or not.\n\t\t *\n\t\t * It is enabled by default by it must be disabled when\n\t\t * effects must be executed after tone mapping and color\n\t\t * space conversion. A typical example is FXAA which\n\t\t * requires sRGB input.\n\t\t *\n\t\t * When set to `false`, the app must control the output\n\t\t * transformation with `RenderOutputNode`.\n\t\t *\n\t\t * ```js\n\t\t * const outputPass = renderOutput( scenePass );\n\t\t * ```\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.outputColorTransform = true;\n\n\t\t/**\n\t\t * Must be set to `true` when the output node changes.\n\t\t *\n\t\t * @type {Node<vec4>}\n\t\t */\n\t\tthis.needsUpdate = true;\n\n\t\tconst material = new NodeMaterial();\n\t\tmaterial.name = 'PostProcessing';\n\n\t\t/**\n\t\t * The full screen quad that is used to render\n\t\t * the effects.\n\t\t *\n\t\t * @private\n\t\t * @type {QuadMesh}\n\t\t */\n\t\tthis._quadMesh = new QuadMesh( material );\n\n\t\t/**\n\t\t * The context of the post processing stack.\n\t\t *\n\t\t * @private\n\t\t * @type {?Object}\n\t\t * @default null\n\t\t */\n\t\tthis._context = null;\n\n\t}\n\n\t/**\n\t * When `PostProcessing` is used to apply post processing effects,\n\t * the application must use this version of `render()` inside\n\t * its animation loop (not the one from the renderer).\n\t */\n\trender() {\n\n\t\tconst renderer = this.renderer;\n\n\t\tthis._update();\n\n\t\tif ( this._context.onBeforePostProcessing !== null ) this._context.onBeforePostProcessing();\n\n\t\tconst toneMapping = renderer.toneMapping;\n\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputColorSpace = ColorManagement.workingColorSpace;\n\n\t\t//\n\n\t\tconst currentXR = renderer.xr.enabled;\n\t\trenderer.xr.enabled = false;\n\n\t\tthis._quadMesh.render( renderer );\n\n\t\trenderer.xr.enabled = currentXR;\n\n\t\t//\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputColorSpace = outputColorSpace;\n\n\t\tif ( this._context.onAfterPostProcessing !== null ) this._context.onAfterPostProcessing();\n\n\t}\n\n\t/**\n\t * Returns the current context of the post processing stack.\n\t *\n\t * @readonly\n\t * @type {?Object}\n\t */\n\tget context() {\n\n\t\treturn this._context;\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis._quadMesh.material.dispose();\n\n\t}\n\n\t/**\n\t * Updates the state of the module.\n\t *\n\t * @private\n\t */\n\t_update() {\n\n\t\tif ( this.needsUpdate === true ) {\n\n\t\t\tconst renderer = this.renderer;\n\n\t\t\tconst toneMapping = renderer.toneMapping;\n\t\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\t\tconst context = {\n\t\t\t\tpostProcessing: this,\n\t\t\t\tonBeforePostProcessing: null,\n\t\t\t\tonAfterPostProcessing: null\n\t\t\t};\n\n\t\t\tlet outputNode = this.outputNode;\n\n\t\t\tif ( this.outputColorTransform === true ) {\n\n\t\t\t\toutputNode = outputNode.context( context );\n\n\t\t\t\toutputNode = renderOutput( outputNode, toneMapping, outputColorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.toneMapping = toneMapping;\n\t\t\t\tcontext.outputColorSpace = outputColorSpace;\n\n\t\t\t\toutputNode = outputNode.context( context );\n\n\t\t\t}\n\n\t\t\tthis._context = context;\n\n\t\t\tthis._quadMesh.material.fragmentNode = outputNode;\n\t\t\tthis._quadMesh.material.needsUpdate = true;\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * When `PostProcessing` is used to apply post processing effects,\n\t * the application must use this version of `renderAsync()` inside\n\t * its animation loop (not the one from the renderer).\n\t *\n\t * @async\n\t * @return {Promise} A Promise that resolves when the render has been finished.\n\t */\n\tasync renderAsync() {\n\n\t\tthis._update();\n\n\t\tif ( this._context.onBeforePostProcessing !== null ) this._context.onBeforePostProcessing();\n\n\t\tconst renderer = this.renderer;\n\n\t\tconst toneMapping = renderer.toneMapping;\n\t\tconst outputColorSpace = renderer.outputColorSpace;\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputColorSpace = ColorManagement.workingColorSpace;\n\n\t\t//\n\n\t\tconst currentXR = renderer.xr.enabled;\n\t\trenderer.xr.enabled = false;\n\n\t\tawait this._quadMesh.renderAsync( renderer );\n\n\t\trenderer.xr.enabled = currentXR;\n\n\t\t//\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputColorSpace = outputColorSpace;\n\n\t\tif ( this._context.onAfterPostProcessing !== null ) this._context.onAfterPostProcessing();\n\n\t}\n\n}\n\nexport default PostProcessing;\n"],"mappings":"OAAOA,iBAAkB,+CAChBC,oBAAuB,uCACvBC,KAAMC,iBAAoB,4BAC1BC,kBAAqB,4BACvBC,aAAc,qCAgBrB,MAAMC,eAQL,WAAAC,CAAaC,EAAUC,EAAaP,KAAM,EAAG,EAAG,EAAG,IAOlDQ,KAAKF,SAAWA,EAShBE,KAAKD,WAAaA,EAoBlBC,KAAKC,sBAAuB,EAO5BD,KAAKE,aAAc,EAEnB,MAAMC,EAAW,IAAIb,aACrBa,EAASC,KAAO,iBAShBJ,KAAKK,UAAY,IAAIV,SAAUQ,GAS/BH,KAAKM,SAAW,IAEjB,CAOA,MAAAC,GAEC,MAAMT,EAAWE,KAAKF,SAEtBE,KAAKQ,UAEyC,OAAzCR,KAAKM,SAASG,wBAAkCT,KAAKM,SAASG,yBAEnE,MAAMC,EAAcZ,EAASY,YACvBC,EAAmBb,EAASa,iBAElCb,EAASY,YAAchB,cACvBI,EAASa,iBAAmBpB,gBAAgBqB,kBAI5C,MAAMC,EAAYf,EAASgB,GAAGC,QAC9BjB,EAASgB,GAAGC,SAAU,EAEtBf,KAAKK,UAAUE,OAAQT,GAEvBA,EAASgB,GAAGC,QAAUF,EAItBf,EAASY,YAAcA,EACvBZ,EAASa,iBAAmBA,EAEiB,OAAxCX,KAAKM,SAASU,uBAAiChB,KAAKM,SAASU,uBAEnE,CAQA,WAAIC,GAEH,OAAOjB,KAAKM,QAEb,CAKA,OAAAY,GAEClB,KAAKK,UAAUF,SAASe,SAEzB,CAOA,OAAAV,GAEC,IAA0B,IAArBR,KAAKE,YAAuB,CAEhC,MAAMJ,EAAWE,KAAKF,SAEhBY,EAAcZ,EAASY,YACvBC,EAAmBb,EAASa,iBAE5BM,EAAU,CACfE,eAAgBnB,KAChBS,uBAAwB,KACxBO,sBAAuB,MAGxB,IAAIjB,EAAaC,KAAKD,YAEa,IAA9BC,KAAKC,sBAETF,EAAaA,EAAWkB,QAASA,GAEjClB,EAAaN,aAAcM,EAAYW,EAAaC,KAIpDM,EAAQP,YAAcA,EACtBO,EAAQN,iBAAmBA,EAE3BZ,EAAaA,EAAWkB,QAASA,IAIlCjB,KAAKM,SAAWW,EAEhBjB,KAAKK,UAAUF,SAASiB,aAAerB,EACvCC,KAAKK,UAAUF,SAASD,aAAc,EAEtCF,KAAKE,aAAc,CAEpB,CAED,CAUA,iBAAMmB,GAELrB,KAAKQ,UAEyC,OAAzCR,KAAKM,SAASG,wBAAkCT,KAAKM,SAASG,yBAEnE,MAAMX,EAAWE,KAAKF,SAEhBY,EAAcZ,EAASY,YACvBC,EAAmBb,EAASa,iBAElCb,EAASY,YAAchB,cACvBI,EAASa,iBAAmBpB,gBAAgBqB,kBAI5C,MAAMC,EAAYf,EAASgB,GAAGC,QAC9BjB,EAASgB,GAAGC,SAAU,QAEhBf,KAAKK,UAAUgB,YAAavB,GAElCA,EAASgB,GAAGC,QAAUF,EAItBf,EAASY,YAAcA,EACvBZ,EAASa,iBAAmBA,EAEiB,OAAxCX,KAAKM,SAASU,uBAAiChB,KAAKM,SAASU,uBAEnE,iBAIcpB","ignoreList":[]}