{"version":3,"file":"node_modules/three/src/renderers/common/QuadMesh.js","names":["BufferGeometry","Float32BufferAttribute","Mesh","OrthographicCamera","_camera","QuadGeometry","constructor","flipY","super","uv","this","setAttribute","_geometry","QuadMesh","material","camera","isQuadMesh","renderAsync","renderer","render"],"sources":["node_modules/three/src/renderers/common/QuadMesh.js"],"sourcesContent":["import { BufferGeometry } from '../../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../../core/BufferAttribute.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { OrthographicCamera } from '../../cameras/OrthographicCamera.js';\n\nconst _camera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n/**\n * The purpose of this special geometry is to fill the entire viewport with a single triangle.\n *\n * Reference: {@link https://github.com/mrdoob/three.js/pull/21358}\n *\n * @private\n * @augments BufferGeometry\n */\nclass QuadGeometry extends BufferGeometry {\n\n\t/**\n\t * Constructs a new quad geometry.\n\t *\n\t * @param {boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.\n\t */\n\tconstructor( flipY = false ) {\n\n\t\tsuper();\n\n\t\tconst uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\n\n\t}\n\n}\n\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\n\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single quad mesh for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * Note: This module can only be used with `WebGPURenderer`.\n *\n * @augments Mesh\n */\nclass QuadMesh extends Mesh {\n\n\t/**\n\t * Constructs a new quad mesh.\n\t *\n\t * @param {?Material} [material=null] - The material to render the quad mesh with.\n\t */\n\tconstructor( material = null ) {\n\n\t\tsuper( _geometry, material );\n\n\t\t/**\n\t\t * The camera to render the quad mesh with.\n\t\t *\n\t\t * @type {OrthographicCamera}\n\t\t * @readonly\n\t\t */\n\t\tthis.camera = _camera;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isQuadMesh = true;\n\n\t}\n\n\t/**\n\t * Async version of `render()`.\n\t *\n\t * @async\n\t * @param {Renderer} renderer - The renderer.\n\t * @return {Promise} A Promise that resolves when the render has been finished.\n\t */\n\tasync renderAsync( renderer ) {\n\n\t\treturn renderer.renderAsync( this, _camera );\n\n\t}\n\n\t/**\n\t * Renders the quad mesh\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t */\n\trender( renderer ) {\n\n\t\trenderer.render( this, _camera );\n\n\t}\n\n}\n\nexport default QuadMesh;\n"],"mappings":"OAASA,mBAAsB,sCACtBC,2BAA8B,uCAC9BC,SAAY,+BACZC,uBAA0B,sCAEnC,MAAMC,QAAwB,IAAID,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAUzE,MAAME,qBAAqBL,eAO1B,WAAAM,CAAaC,GAAQ,GAEpBC,QAEA,MAAMC,GAAe,IAAVF,EAAkB,CAAE,GAAK,EAAG,EAAG,EAAG,EAAG,GAAM,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAEvEG,KAAKC,aAAc,WAAY,IAAIV,uBAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IAClGS,KAAKC,aAAc,KAAM,IAAIV,uBAAwBQ,EAAI,GAE1D,EAID,MAAMG,UAA0B,IAAIP,aAcpC,MAAMQ,iBAAiBX,KAOtB,WAAAI,CAAaQ,EAAW,MAEvBN,MAAOI,UAAWE,GAQlBJ,KAAKK,OAASX,QASdM,KAAKM,YAAa,CAEnB,CASA,iBAAMC,CAAaC,GAElB,OAAOA,EAASD,YAAaP,KAAMN,QAEpC,CAOA,MAAAe,CAAQD,GAEPA,EAASC,OAAQT,KAAMN,QAExB,iBAIcS","ignoreList":[]}