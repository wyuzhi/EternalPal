import ChainMap from"./ChainMap.js";import RenderObject from"./RenderObject.js";const _chainKeys=[];class RenderObjects{constructor(e,t,i,s,n,h){this.renderer=e,this.nodes=t,this.geometries=i,this.pipelines=s,this.bindings=n,this.info=h,this.chainMaps={}}get(e,t,i,s,n,h,a,r){const c=this.getChainMap(r);_chainKeys[0]=e,_chainKeys[1]=t,_chainKeys[2]=h,_chainKeys[3]=n;let d=c.get(_chainKeys);return void 0===d?(d=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,i,s,n,h,a,r),c.set(_chainKeys,d)):(d.updateClipping(a),d.needsGeometryUpdate&&d.setGeometry(e.geometry),(d.version!==t.version||d.needsUpdate)&&(d.initialCacheKey!==d.getCacheKey()?(d.dispose(),d=this.get(e,t,i,s,n,h,a,r)):d.version=t.version)),_chainKeys.length=0,d}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new ChainMap)}dispose(){this.chainMaps={}}createRenderObject(e,t,i,s,n,h,a,r,c,d,o){const p=this.getChainMap(o),g=new RenderObject(e,t,i,s,n,h,a,r,c,d);return g.onDispose=()=>{this.pipelines.delete(g),this.bindings.delete(g),this.nodes.delete(g),p.delete(g.getChainArray())},g}}export default RenderObjects;
//# sourceMappingURL=RenderObjects.js.map