{"version":3,"file":"node_modules/three/src/renderers/common/RenderObjects.js","names":["ChainMap","RenderObject","_chainKeys","RenderObjects","constructor","renderer","nodes","geometries","pipelines","bindings","info","this","chainMaps","get","object","material","scene","camera","lightsNode","renderContext","clippingContext","passId","chainMap","getChainMap","renderObject","undefined","createRenderObject","set","updateClipping","needsGeometryUpdate","setGeometry","geometry","version","needsUpdate","initialCacheKey","getCacheKey","dispose","length","onDispose","delete","getChainArray"],"sources":["node_modules/three/src/renderers/common/RenderObjects.js"],"sourcesContent":["import ChainMap from './ChainMap.js';\nimport RenderObject from './RenderObject.js';\n\nconst _chainKeys = [];\n\n/**\n * This module manages the render objects of the renderer.\n *\n * @private\n */\nclass RenderObjects {\n\n\t/**\n\t * Constructs a new render object management component.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Geometries} geometries - Renderer component for managing geometries.\n\t * @param {Pipelines} pipelines - Renderer component for managing pipelines.\n\t * @param {Bindings} bindings - Renderer component for managing bindings.\n\t * @param {Info} info - Renderer component for managing metrics and monitoring data.\n\t */\n\tconstructor( renderer, nodes, geometries, pipelines, bindings, info ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\t/**\n\t\t * Renderer component for managing nodes related logic.\n\t\t *\n\t\t * @type {Nodes}\n\t\t */\n\t\tthis.nodes = nodes;\n\n\t\t/**\n\t\t * Renderer component for managing geometries.\n\t\t *\n\t\t * @type {Geometries}\n\t\t */\n\t\tthis.geometries = geometries;\n\n\t\t/**\n\t\t * Renderer component for managing pipelines.\n\t\t *\n\t\t * @type {Pipelines}\n\t\t */\n\t\tthis.pipelines = pipelines;\n\n\t\t/**\n\t\t * Renderer component for managing bindings.\n\t\t *\n\t\t * @type {Bindings}\n\t\t */\n\t\tthis.bindings = bindings;\n\n\t\t/**\n\t\t * Renderer component for managing metrics and monitoring data.\n\t\t *\n\t\t * @type {Info}\n\t\t */\n\t\tthis.info = info;\n\n\t\t/**\n\t\t * A dictionary that manages render contexts in chain maps\n\t\t * for each pass ID.\n\t\t *\n\t\t * @type {Object<string,ChainMap>}\n\t\t */\n\t\tthis.chainMaps = {};\n\n\t}\n\n\t/**\n\t * Returns a render object for the given object and state data.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The 3D object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the 3D object should be rendered with.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {string} [passId] - An optional ID for identifying the pass.\n\t * @return {RenderObject} The render object.\n\t */\n\tget( object, material, scene, camera, lightsNode, renderContext, clippingContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\t// reuse chainArray\n\t\t_chainKeys[ 0 ] = object;\n\t\t_chainKeys[ 1 ] = material;\n\t\t_chainKeys[ 2 ] = renderContext;\n\t\t_chainKeys[ 3 ] = lightsNode;\n\n\t\tlet renderObject = chainMap.get( _chainKeys );\n\n\t\tif ( renderObject === undefined ) {\n\n\t\t\trenderObject = this.createRenderObject( this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId );\n\n\t\t\tchainMap.set( _chainKeys, renderObject );\n\n\t\t} else {\n\n\t\t\trenderObject.updateClipping( clippingContext );\n\n\t\t\tif ( renderObject.needsGeometryUpdate ) {\n\n\t\t\t\trenderObject.setGeometry( object.geometry );\n\n\t\t\t}\n\n\t\t\tif ( renderObject.version !== material.version || renderObject.needsUpdate ) {\n\n\t\t\t\tif ( renderObject.initialCacheKey !== renderObject.getCacheKey() ) {\n\n\t\t\t\t\trenderObject.dispose();\n\n\t\t\t\t\trenderObject = this.get( object, material, scene, camera, lightsNode, renderContext, clippingContext, passId );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderObject.version = material.version;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_chainKeys.length = 0;\n\n\t\treturn renderObject;\n\n\t}\n\n\t/**\n\t * Returns a chain map for the given pass ID.\n\t *\n\t * @param {string} [passId='default'] - The pass ID.\n\t * @return {ChainMap} The chain map.\n\t */\n\tgetChainMap( passId = 'default' ) {\n\n\t\treturn this.chainMaps[ passId ] || ( this.chainMaps[ passId ] = new ChainMap() );\n\n\t}\n\n\t/**\n\t * Frees internal resources.\n\t */\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\t/**\n\t * Factory method for creating render objects with the given list of parameters.\n\t *\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\n\t * @param {Geometries} geometries - Renderer component for managing geometries.\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The object's material.\n\t * @param {Scene} scene - The scene the 3D object belongs to.\n\t * @param {Camera} camera - The camera the object should be rendered with.\n\t * @param {LightsNode} lightsNode - The lights node.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {ClippingContext} clippingContext - The clipping context.\n\t * @param {string} [passId] - An optional ID for identifying the pass.\n\t * @return {RenderObject} The render object.\n\t */\n\tcreateRenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\tconst renderObject = new RenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, clippingContext );\n\n\t\trenderObject.onDispose = () => {\n\n\t\t\tthis.pipelines.delete( renderObject );\n\t\t\tthis.bindings.delete( renderObject );\n\t\t\tthis.nodes.delete( renderObject );\n\n\t\t\tchainMap.delete( renderObject.getChainArray() );\n\n\t\t};\n\n\t\treturn renderObject;\n\n\t}\n\n\n}\n\nexport default RenderObjects;\n"],"mappings":"OAAOA,aAAc,uBACdC,iBAAkB,oBAEzB,MAAMC,WAAa,GAOnB,MAAMC,cAYL,WAAAC,CAAaC,EAAUC,EAAOC,EAAYC,EAAWC,EAAUC,GAO9DC,KAAKN,SAAWA,EAOhBM,KAAKL,MAAQA,EAObK,KAAKJ,WAAaA,EAOlBI,KAAKH,UAAYA,EAOjBG,KAAKF,SAAWA,EAOhBE,KAAKD,KAAOA,EAQZC,KAAKC,UAAY,CAAC,CAEnB,CAeA,GAAAC,CAAKC,EAAQC,EAAUC,EAAOC,EAAQC,EAAYC,EAAeC,EAAiBC,GAEjF,MAAMC,EAAWX,KAAKY,YAAaF,GAGnCnB,WAAY,GAAMY,EAClBZ,WAAY,GAAMa,EAClBb,WAAY,GAAMiB,EAClBjB,WAAY,GAAMgB,EAElB,IAAIM,EAAeF,EAAST,IAAKX,YAsCjC,YApCsBuB,IAAjBD,GAEJA,EAAeb,KAAKe,mBAAoBf,KAAKL,MAAOK,KAAKJ,WAAYI,KAAKN,SAAUS,EAAQC,EAAUC,EAAOC,EAAQC,EAAYC,EAAeC,EAAiBC,GAEjKC,EAASK,IAAKzB,WAAYsB,KAI1BA,EAAaI,eAAgBR,GAExBI,EAAaK,qBAEjBL,EAAaM,YAAahB,EAAOiB,WAI7BP,EAAaQ,UAAYjB,EAASiB,SAAWR,EAAaS,eAEzDT,EAAaU,kBAAoBV,EAAaW,eAElDX,EAAaY,UAEbZ,EAAeb,KAAKE,IAAKC,EAAQC,EAAUC,EAAOC,EAAQC,EAAYC,EAAeC,EAAiBC,IAItGG,EAAaQ,QAAUjB,EAASiB,UAQnC9B,WAAWmC,OAAS,EAEbb,CAER,CAQA,WAAAD,CAAaF,EAAS,WAErB,OAAOV,KAAKC,UAAWS,KAAcV,KAAKC,UAAWS,GAAW,IAAIrB,SAErE,CAKA,OAAAoC,GAECzB,KAAKC,UAAY,CAAC,CAEnB,CAkBA,kBAAAc,CAAoBpB,EAAOC,EAAYF,EAAUS,EAAQC,EAAUC,EAAOC,EAAQC,EAAYC,EAAeC,EAAiBC,GAE7H,MAAMC,EAAWX,KAAKY,YAAaF,GAE7BG,EAAe,IAAIvB,aAAcK,EAAOC,EAAYF,EAAUS,EAAQC,EAAUC,EAAOC,EAAQC,EAAYC,EAAeC,GAYhI,OAVAI,EAAac,UAAY,KAExB3B,KAAKH,UAAU+B,OAAQf,GACvBb,KAAKF,SAAS8B,OAAQf,GACtBb,KAAKL,MAAMiC,OAAQf,GAEnBF,EAASiB,OAAQf,EAAagB,gBAAiB,EAIzChB,CAER,iBAKcrB","ignoreList":[]}