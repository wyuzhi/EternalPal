import{Color}from"../../math/Color.js";export function saveRendererState(e,t={}){return t.toneMapping=e.toneMapping,t.toneMappingExposure=e.toneMappingExposure,t.outputColorSpace=e.outputColorSpace,t.renderTarget=e.getRenderTarget(),t.activeCubeFace=e.getActiveCubeFace(),t.activeMipmapLevel=e.getActiveMipmapLevel(),t.renderObjectFunction=e.getRenderObjectFunction(),t.pixelRatio=e.getPixelRatio(),t.mrt=e.getMRT(),t.clearColor=e.getClearColor(t.clearColor||new Color),t.clearAlpha=e.getClearAlpha(),t.autoClear=e.autoClear,t.scissorTest=e.getScissorTest(),t}export function resetRendererState(e,t){return t=saveRendererState(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}export function restoreRendererState(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}export function saveSceneState(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}export function resetSceneState(e,t){return t=saveSceneState(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}export function restoreSceneState(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}export function saveRendererAndSceneState(e,t,r={}){return r=saveSceneState(t,r=saveRendererState(e,r))}export function resetRendererAndSceneState(e,t,r){return r=resetSceneState(t,r=resetRendererState(e,r))}export function restoreRendererAndSceneState(e,t,r){restoreRendererState(e,r),restoreSceneState(t,r)}
//# sourceMappingURL=RendererUtils.js.map