{"version":3,"file":"node_modules/three/src/renderers/common/RendererUtils.js","names":["Color","saveRendererState","renderer","state","toneMapping","toneMappingExposure","outputColorSpace","renderTarget","getRenderTarget","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","renderObjectFunction","getRenderObjectFunction","pixelRatio","getPixelRatio","mrt","getMRT","clearColor","getClearColor","clearAlpha","getClearAlpha","autoClear","scissorTest","getScissorTest","resetRendererState","setMRT","setRenderObjectFunction","setClearColor","restoreRendererState","setRenderTarget","setPixelRatio","setScissorTest","saveSceneState","scene","background","backgroundNode","overrideMaterial","resetSceneState","restoreSceneState","saveRendererAndSceneState","resetRendererAndSceneState","restoreRendererAndSceneState"],"sources":["node_modules/three/src/renderers/common/RendererUtils.js"],"sourcesContent":["import { Color } from '../../math/Color.js';\n\n/**\n * Saves the state of the given renderer and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function saveRendererState( renderer, state = {} ) {\n\n\tstate.toneMapping = renderer.toneMapping;\n\tstate.toneMappingExposure = renderer.toneMappingExposure;\n\tstate.outputColorSpace = renderer.outputColorSpace;\n\tstate.renderTarget = renderer.getRenderTarget();\n\tstate.activeCubeFace = renderer.getActiveCubeFace();\n\tstate.activeMipmapLevel = renderer.getActiveMipmapLevel();\n\tstate.renderObjectFunction = renderer.getRenderObjectFunction();\n\tstate.pixelRatio = renderer.getPixelRatio();\n\tstate.mrt = renderer.getMRT();\n\tstate.clearColor = renderer.getClearColor( state.clearColor || new Color() );\n\tstate.clearAlpha = renderer.getClearAlpha();\n\tstate.autoClear = renderer.autoClear;\n\tstate.scissorTest = renderer.getScissorTest();\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given renderer and stores it into the given state object.\n * Besides, the function also resets the state of the renderer to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function resetRendererState( renderer, state ) {\n\n\tstate = saveRendererState( renderer, state );\n\n\trenderer.setMRT( null );\n\trenderer.setRenderObjectFunction( null );\n\trenderer.setClearColor( 0x000000, 1 );\n\trenderer.autoClear = true;\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given renderer from the given state object.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Object} state - The state to restore.\n */\nexport function restoreRendererState( renderer, state ) {\n\n\trenderer.toneMapping = state.toneMapping;\n\trenderer.toneMappingExposure = state.toneMappingExposure;\n\trenderer.outputColorSpace = state.outputColorSpace;\n\trenderer.setRenderTarget( state.renderTarget, state.activeCubeFace, state.activeMipmapLevel );\n\trenderer.setRenderObjectFunction( state.renderObjectFunction );\n\trenderer.setPixelRatio( state.pixelRatio );\n\trenderer.setMRT( state.mrt );\n\trenderer.setClearColor( state.clearColor, state.clearAlpha );\n\trenderer.autoClear = state.autoClear;\n\trenderer.setScissorTest( state.scissorTest );\n\n}\n\n/**\n * Saves the state of the given scene and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function saveSceneState( scene, state = {} ) {\n\n\tstate.background = scene.background;\n\tstate.backgroundNode = scene.backgroundNode;\n\tstate.overrideMaterial = scene.overrideMaterial;\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given scene and stores it into the given state object.\n * Besides, the function also resets the state of the scene to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function resetSceneState( scene, state ) {\n\n\tstate = saveSceneState( scene, state );\n\n\tscene.background = null;\n\tscene.backgroundNode = null;\n\tscene.overrideMaterial = null;\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given scene from the given state object.\n *\n * @function\n * @param {Scene} scene - The scene.\n * @param {Object} state - The state to restore.\n */\nexport function restoreSceneState( scene, state ) {\n\n\tscene.background = state.background;\n\tscene.backgroundNode = state.backgroundNode;\n\tscene.overrideMaterial = state.overrideMaterial;\n\n}\n\n/**\n * Saves the state of the given renderer and scene and stores it into the given state object.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function saveRendererAndSceneState( renderer, scene, state = {} ) {\n\n\tstate = saveRendererState( renderer, state );\n\tstate = saveSceneState( scene, state );\n\n\treturn state;\n\n}\n\n/**\n * Saves the state of the given renderer and scene and stores it into the given state object.\n * Besides, the function also resets the state of the renderer and scene to its default values.\n *\n * If not state object is provided, the function creates one.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} [state={}] - The state.\n * @return {Object} The state.\n */\nexport function resetRendererAndSceneState( renderer, scene, state ) {\n\n\tstate = resetRendererState( renderer, state );\n\tstate = resetSceneState( scene, state );\n\n\treturn state;\n\n}\n\n/**\n * Restores the state of the given renderer and scene from the given state object.\n *\n * @function\n * @param {Renderer} renderer - The renderer.\n * @param {Scene} scene - The scene.\n * @param {Object} state - The state to restore.\n */\nexport function restoreRendererAndSceneState( renderer, scene, state ) {\n\n\trestoreRendererState( renderer, state );\n\trestoreSceneState( scene, state );\n\n}\n"],"mappings":"OAASA,UAAa,6BAYf,SAASC,kBAAmBC,EAAUC,EAAQ,CAAC,GAgBrD,OAdAA,EAAMC,YAAcF,EAASE,YAC7BD,EAAME,oBAAsBH,EAASG,oBACrCF,EAAMG,iBAAmBJ,EAASI,iBAClCH,EAAMI,aAAeL,EAASM,kBAC9BL,EAAMM,eAAiBP,EAASQ,oBAChCP,EAAMQ,kBAAoBT,EAASU,uBACnCT,EAAMU,qBAAuBX,EAASY,0BACtCX,EAAMY,WAAab,EAASc,gBAC5Bb,EAAMc,IAAMf,EAASgB,SACrBf,EAAMgB,WAAajB,EAASkB,cAAejB,EAAMgB,YAAc,IAAInB,OACnEG,EAAMkB,WAAanB,EAASoB,gBAC5BnB,EAAMoB,UAAYrB,EAASqB,UAC3BpB,EAAMqB,YAActB,EAASuB,iBAEtBtB,CAER,QAaO,SAASuB,mBAAoBxB,EAAUC,GAS7C,OAPAA,EAAQF,kBAAmBC,EAAUC,GAErCD,EAASyB,OAAQ,MACjBzB,EAAS0B,wBAAyB,MAClC1B,EAAS2B,cAAe,EAAU,GAClC3B,EAASqB,WAAY,EAEdpB,CAER,QASO,SAAS2B,qBAAsB5B,EAAUC,GAE/CD,EAASE,YAAcD,EAAMC,YAC7BF,EAASG,oBAAsBF,EAAME,oBACrCH,EAASI,iBAAmBH,EAAMG,iBAClCJ,EAAS6B,gBAAiB5B,EAAMI,aAAcJ,EAAMM,eAAgBN,EAAMQ,mBAC1ET,EAAS0B,wBAAyBzB,EAAMU,sBACxCX,EAAS8B,cAAe7B,EAAMY,YAC9Bb,EAASyB,OAAQxB,EAAMc,KACvBf,EAAS2B,cAAe1B,EAAMgB,WAAYhB,EAAMkB,YAChDnB,EAASqB,UAAYpB,EAAMoB,UAC3BrB,EAAS+B,eAAgB9B,EAAMqB,YAEhC,QAYO,SAASU,eAAgBC,EAAOhC,EAAQ,CAAC,GAM/C,OAJAA,EAAMiC,WAAaD,EAAMC,WACzBjC,EAAMkC,eAAiBF,EAAME,eAC7BlC,EAAMmC,iBAAmBH,EAAMG,iBAExBnC,CAER,QAaO,SAASoC,gBAAiBJ,EAAOhC,GAQvC,OANAA,EAAQ+B,eAAgBC,EAAOhC,GAE/BgC,EAAMC,WAAa,KACnBD,EAAME,eAAiB,KACvBF,EAAMG,iBAAmB,KAElBnC,CAER,QASO,SAASqC,kBAAmBL,EAAOhC,GAEzCgC,EAAMC,WAAajC,EAAMiC,WACzBD,EAAME,eAAiBlC,EAAMkC,eAC7BF,EAAMG,iBAAmBnC,EAAMmC,gBAEhC,QAaO,SAASG,0BAA2BvC,EAAUiC,EAAOhC,EAAQ,CAAC,GAKpE,OAFAA,EAAQ+B,eAAgBC,EADxBhC,EAAQF,kBAAmBC,EAAUC,GAKtC,QAcO,SAASuC,2BAA4BxC,EAAUiC,EAAOhC,GAK5D,OAFAA,EAAQoC,gBAAiBJ,EADzBhC,EAAQuB,mBAAoBxB,EAAUC,GAKvC,QAUO,SAASwC,6BAA8BzC,EAAUiC,EAAOhC,GAE9D2B,qBAAsB5B,EAAUC,GAChCqC,kBAAmBL,EAAOhC,EAE3B","ignoreList":[]}