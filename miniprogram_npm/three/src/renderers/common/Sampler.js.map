{"version":3,"file":"node_modules/three/src/renderers/common/Sampler.js","names":["Binding","Sampler","constructor","name","texture","super","this","_onDisposeTexture","version","generation","isSampler","value","_texture","removeEventListener","addEventListener","update"],"sources":["node_modules/three/src/renderers/common/Sampler.js"],"sourcesContent":["import Binding from './Binding.js';\n\n/**\n * Represents a sampler binding type.\n *\n * @private\n * @augments Binding\n */\nclass Sampler extends Binding {\n\n\t/**\n\t * Constructs a new sampler.\n\t *\n\t * @param {string} name - The samplers's name.\n\t * @param {?Texture} texture - The texture this binding is referring to.\n\t */\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\t/**\n\t\t * This function is called when the texture is disposed.\n\t\t * @type {function}\n\t\t * @private\n\t\t */\n\t\tthis._onDisposeTexture = () => {\n\n\t\t\tthis.texture = null;\n\n\t\t};\n\n\t\t/**\n\t\t * The texture the sampler is referring to.\n\t\t *\n\t\t * @type {?Texture}\n\t\t */\n\t\tthis.texture = texture;\n\n\t\t/**\n\t\t * The binding's version.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.version = texture ? texture.version : 0;\n\n\t\t/**\n\t\t * The binding's generation which is an additional version\n\t\t * qualifier.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.generation = null;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampler = true;\n\n\t}\n\n\t/**\n\t * Sets the texture of this sampler.\n\t * @param {?Texture} value - The texture to set.\n\t */\n\tset texture( value ) {\n\n\t\tif ( this._texture === value ) return;\n\n\t\tif ( this._texture ) {\n\n\t\t\tthis._texture.removeEventListener( 'dispose', this._onDisposeTexture );\n\n\t\t}\n\n\t\tthis._texture = value;\n\n\t\tthis.generation = null;\n\t\tthis.version = 0;\n\n\t\tif ( this._texture ) {\n\n\t\t\tthis._texture.addEventListener( 'dispose', this._onDisposeTexture );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the texture of this sampler.\n\t * @return {?Texture} The texture.\n\t */\n\tget texture() {\n\n\t\treturn this._texture;\n\n\t}\n\n\t/**\n\t * Updates the binding.\n\t *\n\t * @return {boolean} Whether the texture has been updated and must be\n\t * uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\tconst { texture, version } = this;\n\n\t\tif ( version !== texture.version ) {\n\n\t\t\tthis.version = texture.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport default Sampler;\n"],"mappings":"OAAOA,YAAa,eAQpB,MAAMC,gBAAgBD,QAQrB,WAAAE,CAAaC,EAAMC,GAElBC,MAAOF,GAOPG,KAAKC,kBAAoB,KAExBD,KAAKF,QAAU,IAAI,EASpBE,KAAKF,QAAUA,EAOfE,KAAKE,QAAUJ,EAAUA,EAAQI,QAAU,EAS3CF,KAAKG,WAAa,KASlBH,KAAKI,WAAY,CAElB,CAMA,WAAIN,CAASO,GAEPL,KAAKM,WAAaD,IAElBL,KAAKM,UAETN,KAAKM,SAASC,oBAAqB,UAAWP,KAAKC,mBAIpDD,KAAKM,SAAWD,EAEhBL,KAAKG,WAAa,KAClBH,KAAKE,QAAU,EAEVF,KAAKM,UAETN,KAAKM,SAASE,iBAAkB,UAAWR,KAAKC,mBAIlD,CAMA,WAAIH,GAEH,OAAOE,KAAKM,QAEb,CAQA,MAAAG,GAEC,MAAMX,QAAEA,EAAOI,QAAEA,GAAYF,KAE7B,OAAKE,IAAYJ,EAAQI,UAExBF,KAAKE,QAAUJ,EAAQI,SAEhB,EAMT,iBAIcP","ignoreList":[]}