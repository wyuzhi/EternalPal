{"version":3,"file":"node_modules/three/src/renderers/common/Storage3DTexture.js","names":["Texture","LinearFilter","ClampToEdgeWrapping","Storage3DTexture","constructor","width","height","depth","super","this","isArrayTexture","image","magFilter","minFilter","wrapR","isStorageTexture","is3DTexture","setSize","dispose"],"sources":["node_modules/three/src/renderers/common/Storage3DTexture.js"],"sourcesContent":["import { Texture } from '../../textures/Texture.js';\nimport { LinearFilter, ClampToEdgeWrapping } from '../../constants.js';\n\n/**\n * This special type of texture is intended for compute shaders.\n * It can be used to compute the data of a texture with a compute shader.\n *\n * Note: This type of texture can only be used with `WebGPURenderer`\n * and a WebGPU backend.\n *\n * @augments Texture\n */\nclass Storage3DTexture extends Texture {\n\n\t/**\n\t * Constructs a new storage texture.\n\t *\n\t * @param {number} [width=1] - The storage texture's width.\n\t * @param {number} [height=1] - The storage texture's height.\n\t * @param {number} [depth=1] - The storage texture's depth.\n\t */\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper();\n\n\t\t//inherited from texture. Must be false for 3DTexture\n\t\tthis.isArrayTexture = false;\n\n\t\t/**\n\t\t * The image object which just represents the texture's dimension.\n\t\t *\n\t\t * @type {{width: number, height: number, depth: number}}\n\t\t */\n\t\tthis.image = { width, height, depth };\n\n\t\t/**\n\t\t * The default `magFilter` for storage textures is `THREE.LinearFilter`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.magFilter = LinearFilter;\n\n\t\t/**\n\t\t * The default `minFilter` for storage textures is `THREE.LinearFilter`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.minFilter = LinearFilter;\n\n\t\t/**\n\t\t * This defines how the texture is wrapped in the depth direction and corresponds to\n\t\t * *W* in UVW mapping.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isStorageTexture = true;\n\n\t\t/**\n\t\t * Indicates whether this texture is a 3D texture.\n\t\t *\n\t\t * @type {boolean}\n\t\t *\n\t\t */\n\t\tthis.is3DTexture = true;\n\n\t}\n\n\t/**\n\t * Sets the size of the storage 3d texture.\n\t *\n\t * @param {number} width - The new width of the storage texture.\n\t * @param {number} height - The new height of the storage texture.\n\t * @param {number} depth - The new depth of the storage texture.\n\t */\n\tsetSize( width, height, depth ) {\n\n\t\tif ( this.image.width !== width || this.image.height !== height || this.image.depth !== depth ) {\n\n\t\t\tthis.image.width = width;\n\t\t\tthis.image.height = height;\n\t\t\tthis.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport default Storage3DTexture;\n"],"mappings":"OAASA,YAAe,mCACfC,aAAcC,wBAA2B,qBAWlD,MAAMC,yBAAyBH,QAS9B,WAAAI,CAAaC,EAAQ,EAAGC,EAAS,EAAGC,EAAQ,GAE3CC,QAGAC,KAAKC,gBAAiB,EAOtBD,KAAKE,MAAQ,CAAEN,QAAOC,SAAQC,SAO9BE,KAAKG,UAAYX,aAOjBQ,KAAKI,UAAYZ,aAQjBQ,KAAKK,MAAQZ,oBASbO,KAAKM,kBAAmB,EAQxBN,KAAKO,aAAc,CAEpB,CASA,OAAAC,CAASZ,EAAOC,EAAQC,GAElBE,KAAKE,MAAMN,QAAUA,GAASI,KAAKE,MAAML,SAAWA,GAAUG,KAAKE,MAAMJ,QAAUA,IAEvFE,KAAKE,MAAMN,MAAQA,EACnBI,KAAKE,MAAML,OAASA,EACpBG,KAAKE,MAAMJ,MAAQA,EAEnBE,KAAKS,UAIP,iBAIcf","ignoreList":[]}