{"version":3,"file":"node_modules/three/src/renderers/common/TimestampQueryPool.js","names":["TimestampQueryPool","constructor","maxQueries","this","trackTimestamp","currentQueryIndex","queryOffsets","Map","isDisposed","lastValue","pendingResolve","allocateQueriesForContext","resolveQueriesAsync","dispose"],"sources":["node_modules/three/src/renderers/common/TimestampQueryPool.js"],"sourcesContent":["/**\n * Abstract base class of a timestamp query pool.\n *\n * @abstract\n */\nclass TimestampQueryPool {\n\n\t/**\n\t * Creates a new timestamp query pool.\n\t *\n\t * @param {number} [maxQueries=256] - Maximum number of queries this pool can hold.\n\t */\n\tconstructor( maxQueries = 256 ) {\n\n\t\t/**\n\t\t * Whether to track timestamps or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.trackTimestamp = true;\n\n\t\t/**\n\t\t * Maximum number of queries this pool can hold.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 256\n\t\t */\n\t\tthis.maxQueries = maxQueries;\n\n\t\t/**\n\t\t * How many queries allocated so far.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.currentQueryIndex = 0;\n\n\t\t/**\n\t\t * Tracks offsets for different contexts.\n\t\t *\n\t\t * @type {Map<string, number>}\n\t\t */\n\t\tthis.queryOffsets = new Map();\n\n\t\t/**\n\t\t * Whether the pool has been disposed or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.isDisposed = false;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.lastValue = 0;\n\n\t\t/**\n\t\t * TODO\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.pendingResolve = false;\n\n\t}\n\n\t/**\n\t * Allocate queries for a specific renderContext.\n\t *\n\t * @abstract\n\t * @param {Object} renderContext - The render context to allocate queries for.\n\t * @returns {?number}\n\t */\n\tallocateQueriesForContext( /* renderContext */ ) {}\n\n\t/**\n\t * Resolve all timestamps and return data (or process them).\n\t *\n\t * @abstract\n\t * @async\n\t * @returns {Promise<number>|number} The resolved timestamp value.\n\t */\n\tasync resolveQueriesAsync() {}\n\n\t/**\n\t * Dispose of the query pool.\n\t *\n\t * @abstract\n\t */\n\tdispose() {}\n\n}\n\nexport default TimestampQueryPool;\n"],"mappings":"AAKA,MAAMA,mBAOL,WAAAC,CAAaC,EAAa,KAQzBC,KAAKC,gBAAiB,EAQtBD,KAAKD,WAAaA,EAQlBC,KAAKE,kBAAoB,EAOzBF,KAAKG,aAAe,IAAIC,IAQxBJ,KAAKK,YAAa,EAQlBL,KAAKM,UAAY,EAQjBN,KAAKO,gBAAiB,CAEvB,CASA,yBAAAC,GAAkD,CASlD,yBAAMC,GAAuB,CAO7B,OAAAC,GAAW,iBAIGb","ignoreList":[]}