import UniformBuffer from"./UniformBuffer.js";import{GPU_CHUNK_BYTES}from"./Constants.js";class UniformsGroup extends UniformBuffer{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){const e=this.bytesPerElement;let t=0;for(let r=0,s=this.uniforms.length;r<s;r++){const s=this.uniforms[r],i=s.boundary,u=s.itemSize*e,f=t%GPU_CHUNK_BYTES,o=f%i,n=f+o;t+=o,0!==n&&GPU_CHUNK_BYTES-n<u&&(t+=GPU_CHUNK_BYTES-n),s.offset=t/e,t+=u}return Math.ceil(t/GPU_CHUNK_BYTES)*GPU_CHUNK_BYTES}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,u=e.getType();if(r[i]!==s){this._getBufferForType(u)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,u=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(u);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,u=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(u);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,u=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(u);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===arraysEqual(r,s,i)){this.buffer.set(s,i),setArray(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}function setArray(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}function arraysEqual(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}export default UniformsGroup;
//# sourceMappingURL=UniformsGroup.js.map