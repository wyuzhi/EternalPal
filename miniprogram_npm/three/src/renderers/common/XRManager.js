import{ArrayCamera}from"../../cameras/ArrayCamera.js";import{EventDispatcher}from"../../core/EventDispatcher.js";import{PerspectiveCamera}from"../../cameras/PerspectiveCamera.js";import{Quaternion}from"../../math/Quaternion.js";import{RAD2DEG}from"../../math/MathUtils.js";import{Vector2}from"../../math/Vector2.js";import{Vector3}from"../../math/Vector3.js";import{Vector4}from"../../math/Vector4.js";import{WebXRController}from"../webxr/WebXRController.js";import{AddEquation,BackSide,CustomBlending,DepthFormat,DepthStencilFormat,FrontSide,RGBAFormat,UnsignedByteType,UnsignedInt248Type,UnsignedIntType,ZeroFactor}from"../../constants.js";import{DepthTexture}from"../../textures/DepthTexture.js";import{XRRenderTarget}from"./XRRenderTarget.js";import{CylinderGeometry}from"../../geometries/CylinderGeometry.js";import QuadMesh from"./QuadMesh.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import{PlaneGeometry}from"../../geometries/PlaneGeometry.js";import{MeshBasicMaterial}from"../../materials/MeshBasicMaterial.js";import{Mesh}from"../../objects/Mesh.js";const _cameraLPos=new Vector3,_cameraRPos=new Vector3;class XRManager extends EventDispatcher{constructor(e,t=!1){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new PerspectiveCamera,this._cameraL.viewport=new Vector4,this._cameraR=new PerspectiveCamera,this._cameraR.viewport=new Vector4,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new ArrayCamera,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._supportsLayers=!1,this._supportsGlBinding="undefined"!=typeof XRWebGLBinding,this._frameBufferTargets=null,this._createXRLayer=createXRLayer.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new Vector2,this._onSessionEvent=onSessionEvent.bind(this),this._onSessionEnd=onSessionEnd.bind(this),this._onInputSourcesChange=onInputSourcesChange.bind(this),this._onAnimationFrame=onAnimationFrame.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers=this._supportsGlBinding&&"createProjectionLayer"in XRWebGLBinding.prototype,this._useMultiviewIfPossible=t,this._useMultiview=!1}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}useMultiview(){return this._useMultiview}createQuadLayer(e,t,r,n,i,a,s,o={}){const l=new PlaneGeometry(e,t),c=new XRRenderTarget(i,a,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(i,a,o.stencil?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,o.stencil?DepthStencilFormat:DepthFormat),stencilBuffer:o.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});c._autoAllocateDepthBuffer=!0;const h=new MeshBasicMaterial({color:16777215,side:FrontSide});h.map=c.texture,h.map.offset.y=1,h.map.repeat.y=-1;const u=new Mesh(l,h);u.position.copy(r),u.quaternion.copy(n);const d={type:"quad",width:e,height:t,translation:r,quaternion:n,pixelwidth:i,pixelheight:a,plane:u,material:h,rendercall:s,renderTarget:c};if(this._layers.push(d),null!==this._session){d.plane.material=new MeshBasicMaterial({color:16777215,side:FrontSide}),d.plane.material.blending=CustomBlending,d.plane.material.blendEquation=AddEquation,d.plane.material.blendSrc=ZeroFactor,d.plane.material.blendDst=ZeroFactor,d.xrlayer=this._createXRLayer(d);const e=this._session.renderState.layers;e.unshift(d.xrlayer),this._session.updateRenderState({layers:e})}else c.isXRRenderTarget=!1;return u}createCylinderLayer(e,t,r,n,i,a,s,o,l={}){const c=new CylinderGeometry(e,e,e*t/r,64,64,!0,Math.PI-t/2,t),h=new XRRenderTarget(a,s,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(a,s,l.stencil?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,l.stencil?DepthStencilFormat:DepthFormat),stencilBuffer:l.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1});h._autoAllocateDepthBuffer=!0;const u=new MeshBasicMaterial({color:16777215,side:BackSide});u.map=h.texture,u.map.offset.y=1,u.map.repeat.y=-1;const d=new Mesh(c,u);d.position.copy(n),d.quaternion.copy(i);const p={type:"cylinder",radius:e,centralAngle:t,aspectratio:r,translation:n,quaternion:i,pixelwidth:a,pixelheight:s,plane:d,material:u,rendercall:o,renderTarget:h};if(this._layers.push(p),null!==this._session){p.plane.material=new MeshBasicMaterial({color:16777215,side:BackSide}),p.plane.material.blending=CustomBlending,p.plane.material.blendEquation=AddEquation,p.plane.material.blendSrc=ZeroFactor,p.plane.material.blendDst=ZeroFactor,p.xrlayer=this._createXRLayer(p);const e=this._session.renderState.layers;e.unshift(p.xrlayer),this._session.updateRenderState({layers:e})}else h.isXRRenderTarget=!1;return d}renderLayers(){const e=new Vector3,t=new Quaternion,r=this._renderer,n=this.isPresenting,i=r.getOutputRenderTarget(),a=r._frameBufferTarget;this.isPresenting=!1;const s=new Vector2;r.getSize(s);const o=r._quad;for(const n of this._layers)if(n.renderTarget.isXRRenderTarget=null!==this._session,n.renderTarget._hasExternalTextures=n.renderTarget.isXRRenderTarget,n.renderTarget.isXRRenderTarget&&this._supportsLayers){n.xrlayer.transform=new XRRigidTransform(n.plane.getWorldPosition(e),n.plane.getWorldQuaternion(t));const i=this._glBinding.getSubImage(n.xrlayer,this._xrFrame);r.backend.setXRRenderTargetTextures(n.renderTarget,i.colorTexture,void 0),r._setXRLayerSize(n.renderTarget.width,n.renderTarget.height),r.setOutputRenderTarget(n.renderTarget),r.setRenderTarget(null),r._frameBufferTarget=null,this._frameBufferTargets||(this._frameBufferTargets=new WeakMap);const{frameBufferTarget:a,quad:s}=this._frameBufferTargets.get(n.renderTarget)||{frameBufferTarget:null,quad:null};a?(r._frameBufferTarget=a,r._quad=s):(r._quad=new QuadMesh(new NodeMaterial),this._frameBufferTargets.set(n.renderTarget,{frameBufferTarget:r._getFrameBufferTarget(),quad:r._quad})),n.rendercall(),r._frameBufferTarget=null}else r.setRenderTarget(n.renderTarget),n.rendercall();r.setRenderTarget(null),r.setOutputRenderTarget(i),r._frameBufferTarget=a,r._setXRLayerSize(s.x,s.y),r._quad=o,this.isPresenting=n}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend;this._gl=t.getContext();const n=this._gl,i=n.getContextAttributes();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),this._supportsGlBinding){const t=new XRWebGLBinding(e,n);this._glBinding=t}if(!0===this._useLayers){let r=null,a=null,s=null;t.depth&&(s=t.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,r=t.stencil?DepthStencilFormat:DepthFormat,a=t.stencil?UnsignedInt248Type:UnsignedIntType);const o={colorFormat:n.RGBA8,depthFormat:s,scaleFactor:this._framebufferScaleFactor,clearOnAccess:!1};this._useMultiviewIfPossible&&t.hasFeature("OVR_multiview2")&&(o.textureType="texture-array",this._useMultiview=!0);const l=this._glBinding.createProjectionLayer(o),c=[l];this._glProjLayer=l,t.setPixelRatio(1),t._setXRLayerSize(l.textureWidth,l.textureHeight);const h=this._useMultiview?2:1,u=new DepthTexture(l.textureWidth,l.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,r,h);if(this._xrRenderTarget=new XRRenderTarget(l.textureWidth,l.textureHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:t.outputColorSpace,depthTexture:u,stencilBuffer:t.stencil,samples:i.antialias?4:0,resolveDepthBuffer:!1===l.ignoreDepthValues,resolveStencilBuffer:!1===l.ignoreDepthValues,depth:this._useMultiview?2:1,multiview:this._useMultiview}),this._xrRenderTarget._hasExternalTextures=!0,this._xrRenderTarget.depth=this._useMultiview?2:1,this._supportsLayers=e.enabledFeatures.includes("layers"),this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._supportsLayers)for(const e of this._layers)e.plane.material=new MeshBasicMaterial({color:16777215,side:"cylinder"===e.type?BackSide:FrontSide}),e.plane.material.blending=CustomBlending,e.plane.material.blendEquation=AddEquation,e.plane.material.blendSrc=ZeroFactor,e.plane.material.blendDst=ZeroFactor,e.xrlayer=this._createXRLayer(e),c.unshift(e.xrlayer);e.updateRenderState({layers:c})}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},i=new XRWebGLLayer(e,n,r);this._glBaseLayer=i,e.updateRenderState({baseLayer:i}),t.setPixelRatio(1),t._setXRLayerSize(i.framebufferWidth,i.framebufferHeight),this._xrRenderTarget=new XRRenderTarget(i.framebufferWidth,i.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:!1===i.ignoreDepthValues,resolveStencilBuffer:!1===i.ignoreDepthValues}),this._xrRenderTarget._isOpaqueFramebuffer=!0,this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType())}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,n=e.far,i=this._cameraXR,a=this._cameraL,s=this._cameraR;i.near=s.near=a.near=r,i.far=s.far=a.far=n,i.isMultiViewCamera=this._useMultiview,this._currentDepthNear===i.near&&this._currentDepthFar===i.far||(t.updateRenderState({depthNear:i.near,depthFar:i.far}),this._currentDepthNear=i.near,this._currentDepthFar=i.far),i.layers.mask=6|e.layers.mask,a.layers.mask=3&i.layers.mask,s.layers.mask=5&i.layers.mask;const o=e.parent,l=i.cameras;updateCamera(i,o);for(let e=0;e<l.length;e++)updateCamera(l[e],o);2===l.length?setProjectionFromUnion(i,a,s):i.projectionMatrix.copy(a.projectionMatrix),updateUserCamera(e,i,o)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new WebXRController,this._controllers[e]=t),t}}function setProjectionFromUnion(e,t,r){_cameraLPos.setFromMatrixPosition(t.matrixWorld),_cameraRPos.setFromMatrixPosition(r.matrixWorld);const n=_cameraLPos.distanceTo(_cameraRPos),i=t.projectionMatrix.elements,a=r.projectionMatrix.elements,s=i[14]/(i[10]-1),o=i[14]/(i[10]+1),l=(i[9]+1)/i[5],c=(i[9]-1)/i[5],h=(i[8]-1)/i[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,m=n/(-h+u),f=m*-h;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(f),e.translateZ(m),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=s+m,r=o+m,i=d-f,a=p+(n-f),h=l*o/r*t,u=c*o/r*t;e.projectionMatrix.makePerspective(i,a,h,u,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function updateCamera(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function updateUserCamera(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld)),e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*RAD2DEG*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}function onSessionEvent(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function onSessionEnd(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}if(this._currentDepthNear=null,this._currentDepthFar=null,t._resetXRState(),this._session=null,this._xrRenderTarget=null,!0===this._supportsLayers)for(const e of this._layers)e.renderTarget=new XRRenderTarget(e.pixelwidth,e.pixelheight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(e.pixelwidth,e.pixelheight,e.stencilBuffer?UnsignedInt248Type:UnsignedIntType,void 0,void 0,void 0,void 0,void 0,void 0,e.stencilBuffer?DepthStencilFormat:DepthFormat),stencilBuffer:e.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),e.renderTarget.isXRRenderTarget=!1,e.plane.material=e.material,e.material.map=e.renderTarget.texture,e.material.map.offset.y=1,e.material.map.repeat.y=-1,delete e.xrlayer;this.isPresenting=!1,this._useMultiview=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function onInputSourcesChange(e){const t=this._controllers,r=this._controllerInputSources;for(let n=0;n<e.removed.length;n++){const i=e.removed[n],a=r.indexOf(i);a>=0&&(r[a]=null,t[a].disconnect(i))}for(let n=0;n<e.added.length;n++){const i=e.added[n];let a=r.indexOf(i);if(-1===a){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(i),a=e;break}if(null===r[e]){r[e]=i,a=e;break}}if(-1===a)break}const s=t[a];s&&s.connect(i)}}function createXRLayer(e){return"quad"===e.type?this._glBinding.createQuadLayer({transform:new XRRigidTransform(e.translation,e.quaternion),width:e.width/2,height:e.height/2,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(e.translation,e.quaternion),radius:e.radius,centralAngle:e.centralAngle,aspectRatio:e.aspectRatio,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight,clearOnAccess:!1})}function onAnimationFrame(e,t){if(void 0===t)return;const r=this._cameraXR,n=this._renderer,i=n.backend,a=this._glBaseLayer,s=this.getReferenceSpace(),o=t.getViewerPose(s);if(this._xrFrame=t,null!==o){const e=o.views;null!==this._glBaseLayer&&i.setXRTarget(a.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let n=0;n<e.length;n++){const s=e[n];let o;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,s);o=e.viewport,0===n&&i.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues&&!this._useMultiview?void 0:e.depthStencilTexture)}else o=a.getViewport(s);let l=this._cameras[n];void 0===l&&(l=new PerspectiveCamera,l.layers.enable(n),l.viewport=new Vector4,this._cameras[n]=l),l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(s.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(o.x,o.y,o.width,o.height),0===n&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}n.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],n=this._controllers[e];null!==r&&void 0!==n&&n.update(r,t,s)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}export default XRManager;
//# sourceMappingURL=XRManager.js.map