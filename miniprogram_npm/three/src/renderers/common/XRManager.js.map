{"version":3,"file":"node_modules/three/src/renderers/common/XRManager.js","names":["ArrayCamera","EventDispatcher","PerspectiveCamera","Quaternion","RAD2DEG","Vector2","Vector3","Vector4","WebXRController","AddEquation","BackSide","CustomBlending","DepthFormat","DepthStencilFormat","FrontSide","RGBAFormat","UnsignedByteType","UnsignedInt248Type","UnsignedIntType","ZeroFactor","DepthTexture","XRRenderTarget","CylinderGeometry","QuadMesh","NodeMaterial","PlaneGeometry","MeshBasicMaterial","Mesh","_cameraLPos","_cameraRPos","XRManager","constructor","renderer","multiview","super","this","enabled","isPresenting","cameraAutoUpdate","_renderer","_cameraL","viewport","_cameraR","_cameras","_cameraXR","_currentDepthNear","_currentDepthFar","_controllers","_controllerInputSources","_xrRenderTarget","_layers","_supportsLayers","_supportsGlBinding","XRWebGLBinding","_frameBufferTargets","_createXRLayer","createXRLayer","bind","_gl","_currentAnimationContext","_currentAnimationLoop","_currentPixelRatio","_currentSize","_onSessionEvent","onSessionEvent","_onSessionEnd","onSessionEnd","_onInputSourcesChange","onInputSourcesChange","_onAnimationFrame","onAnimationFrame","_referenceSpace","_referenceSpaceType","_customReferenceSpace","_framebufferScaleFactor","_foveation","_session","_glBaseLayer","_glBinding","_glProjLayer","_xrFrame","_useLayers","prototype","_useMultiviewIfPossible","_useMultiview","getController","index","_getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","getFoveation","setFoveation","foveation","fixedFoveation","undefined","getFramebufferScaleFactor","setFramebufferScaleFactor","factor","console","warn","getReferenceSpaceType","setReferenceSpaceType","type","getReferenceSpace","setReferenceSpace","space","getCamera","getEnvironmentBlendMode","environmentBlendMode","getFrame","useMultiview","createQuadLayer","width","height","translation","quaternion","pixelwidth","pixelheight","rendercall","attributes","geometry","renderTarget","format","depthTexture","stencil","stencilBuffer","resolveDepthBuffer","resolveStencilBuffer","_autoAllocateDepthBuffer","material","color","side","map","texture","offset","y","repeat","plane","position","copy","layer","push","blending","blendEquation","blendSrc","blendDst","xrlayer","xrlayers","renderState","layers","unshift","updateRenderState","isXRRenderTarget","createCylinderLayer","radius","centralAngle","aspectratio","Math","PI","renderLayers","translationObject","quaternionObject","wasPresenting","rendererOutputTarget","getOutputRenderTarget","rendererFramebufferTarget","_frameBufferTarget","rendererSize","getSize","rendererQuad","_quad","_hasExternalTextures","transform","XRRigidTransform","getWorldPosition","getWorldQuaternion","glSubImage","getSubImage","backend","setXRRenderTargetTextures","colorTexture","_setXRLayerSize","setOutputRenderTarget","setRenderTarget","WeakMap","frameBufferTarget","quad","get","set","_getFrameBufferTarget","x","getSession","setSession","session","getContext","gl","getContextAttributes","isWebGPUBackend","Error","addEventListener","makeXRCompatible","getPixelRatio","_animation","getAnimationLoop","stop","glBinding","depthFormat","depthType","glDepthFormat","depth","DEPTH24_STENCIL8","DEPTH_COMPONENT24","projectionlayerInit","colorFormat","RGBA8","scaleFactor","clearOnAccess","hasFeature","textureType","glProjLayer","createProjectionLayer","layersArray","setPixelRatio","textureWidth","textureHeight","colorSpace","outputColorSpace","samples","antialias","ignoreDepthValues","enabledFeatures","includes","requestReferenceSpace","layerInit","alpha","framebufferScaleFactor","glBaseLayer","XRWebGLLayer","baseLayer","framebufferWidth","framebufferHeight","_isOpaqueFramebuffer","setAnimationLoop","setContext","start","dispatchEvent","updateCamera","camera","depthNear","near","depthFar","far","cameraXR","cameraL","cameraR","isMultiViewCamera","mask","parent","cameras","i","length","setProjectionFromUnion","projectionMatrix","updateUserCamera","controller","setFromMatrixPosition","matrixWorld","ipd","distanceTo","projL","elements","projR","topFov","bottomFov","leftFov","rightFov","left","right","zOffset","xOffset","decompose","scale","translateX","translateZ","compose","matrixWorldInverse","invert","projectionMatrixInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","matrix","multiplyMatrices","multiply","updateMatrixWorld","isPerspectiveCamera","fov","atan","zoom","event","controllerIndex","indexOf","inputSource","referenceSpace","update","frame","data","removeEventListener","disconnect","_resetXRState","setSize","controllers","controllerInputSources","removed","added","connect","viewPixelWidth","viewPixelHeight","aspectRatio","time","pose","getViewerPose","views","setXRTarget","framebuffer","cameraXRNeedsUpdate","view","getViewSubImage","depthStencilTexture","getViewport","enable","fromArray","detectedPlanes"],"sources":["node_modules/three/src/renderers/common/XRManager.js"],"sourcesContent":["import { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Quaternion } from '../../math/Quaternion.js';\nimport { RAD2DEG } from '../../math/MathUtils.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebXRController } from '../webxr/WebXRController.js';\nimport { AddEquation, BackSide, CustomBlending, DepthFormat, DepthStencilFormat, FrontSide, RGBAFormat, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, ZeroFactor } from '../../constants.js';\nimport { DepthTexture } from '../../textures/DepthTexture.js';\nimport { XRRenderTarget } from './XRRenderTarget.js';\nimport { CylinderGeometry } from '../../geometries/CylinderGeometry.js';\nimport QuadMesh from './QuadMesh.js';\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\nimport { PlaneGeometry } from '../../geometries/PlaneGeometry.js';\nimport { MeshBasicMaterial } from '../../materials/MeshBasicMaterial.js';\nimport { Mesh } from '../../objects/Mesh.js';\n\nconst _cameraLPos = /*@__PURE__*/ new Vector3();\nconst _cameraRPos = /*@__PURE__*/ new Vector3();\n\n/**\n * The XR manager is built on top of the WebXR Device API to\n * manage XR sessions with `WebGPURenderer`.\n *\n * XR is currently only supported with a WebGL 2 backend.\n *\n * @augments EventDispatcher\n */\nclass XRManager extends EventDispatcher {\n\n\t/**\n\t * Constructs a new XR manager.\n\t *\n\t * @param {Renderer} renderer - The renderer.\n\t * @param {boolean} [multiview=false] - Enables multiview if the device supports it.\n\t */\n\tconstructor( renderer, multiview = false ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag globally enables XR rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enabled = false;\n\n\t\t/**\n\t\t * Whether the XR device is currently presenting or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.isPresenting = false;\n\n\t\t/**\n\t\t * Whether the XR camera should automatically be updated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.cameraAutoUpdate = true;\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @private\n\t\t * @type {Renderer}\n\t\t */\n\t\tthis._renderer = renderer;\n\n\t\t// camera\n\n\t\t/**\n\t\t * Represents the camera for the left eye.\n\t\t *\n\t\t * @private\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis._cameraL = new PerspectiveCamera();\n\t\tthis._cameraL.viewport = new Vector4();\n\n\t\t/**\n\t\t * Represents the camera for the right eye.\n\t\t *\n\t\t * @private\n\t\t * @type {PerspectiveCamera}\n\t\t */\n\t\tthis._cameraR = new PerspectiveCamera();\n\t\tthis._cameraR.viewport = new Vector4();\n\n\t\t/**\n\t\t * A list of cameras used for rendering the XR views.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<Camera>}\n\t\t */\n\t\tthis._cameras = [ this._cameraL, this._cameraR ];\n\n\t\t/**\n\t\t * The main XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {ArrayCamera}\n\t\t */\n\t\tthis._cameraXR = new ArrayCamera();\n\n\t\t/**\n\t\t * The current near value of the XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentDepthNear = null;\n\n\t\t/**\n\t\t * The current far value of the XR camera.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentDepthFar = null;\n\n\t\t/**\n\t\t * A list of WebXR controllers requested by the application.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<WebXRController>}\n\t\t */\n\t\tthis._controllers = [];\n\n\t\t/**\n\t\t * A list of XR input source. Each input source belongs to\n\t\t * an instance of WebXRController.\n\t\t *\n\t\t * @private\n\t\t * @type {Array<XRInputSource?>}\n\t\t */\n\t\tthis._controllerInputSources = [];\n\n\t\t/**\n\t\t * The XR render target that represents the rendering destination\n\t\t * during an active XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {?RenderTarget}\n\t\t * @default null\n\t\t */\n\t\tthis._xrRenderTarget = null;\n\n\t\t/**\n\t\t * An array holding all the non-projection layers\n\t\t *\n\t\t * @private\n\t\t * @type {Array<Object>}\n\t\t * @default []\n\t\t */\n\t\tthis._layers = [];\n\n\t\t/**\n\t\t * Whether the device has support for all layer types.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._supportsLayers = false;\n\n\t\t/**\n\t\t * Whether the device supports binding gl objects.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t */\n\t\tthis._supportsGlBinding = typeof XRWebGLBinding !== 'undefined';\n\n\t\tthis._frameBufferTargets = null;\n\n\t\t/**\n\t\t * Helper function to create native WebXR Layer.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._createXRLayer = createXRLayer.bind( this );\n\n\t\t/**\n\t\t* The current WebGL context.\n\t\t*\n\t\t* @private\n\t\t* @type {?WebGL2RenderingContext}\n\t\t* @default null\n\t\t*/\n\t\tthis._gl = null;\n\n\t\t/**\n\t\t * The current animation context.\n\t\t *\n\t\t * @private\n\t\t * @type {?Window}\n\t\t * @default null\n\t\t */\n\t\tthis._currentAnimationContext = null;\n\n\t\t/**\n\t\t * The current animation loop.\n\t\t *\n\t\t * @private\n\t\t * @type {?Function}\n\t\t * @default null\n\t\t */\n\t\tthis._currentAnimationLoop = null;\n\n\t\t/**\n\t\t * The current pixel ratio.\n\t\t *\n\t\t * @private\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis._currentPixelRatio = null;\n\n\t\t/**\n\t\t * The current size of the renderer's canvas\n\t\t * in logical pixel unit.\n\t\t *\n\t\t * @private\n\t\t * @type {Vector2}\n\t\t */\n\t\tthis._currentSize = new Vector2();\n\n\t\t/**\n\t\t * The default event listener for handling events inside a XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onSessionEvent = onSessionEvent.bind( this );\n\n\t\t/**\n\t\t * The event listener for handling the end of a XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onSessionEnd = onSessionEnd.bind( this );\n\n\t\t/**\n\t\t * The event listener for handling the `inputsourceschange` event.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onInputSourcesChange = onInputSourcesChange.bind( this );\n\n\t\t/**\n\t\t * The animation loop which is used as a replacement for the default\n\t\t * animation loop of the application. It is only used when a XR session\n\t\t * is active.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._onAnimationFrame = onAnimationFrame.bind( this );\n\n\t\t/**\n\t\t * The current XR reference space.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRReferenceSpace}\n\t\t * @default null\n\t\t */\n\t\tthis._referenceSpace = null;\n\n\t\t/**\n\t\t * The current XR reference space type.\n\t\t *\n\t\t * @private\n\t\t * @type {XRReferenceSpaceType}\n\t\t * @default 'local-floor'\n\t\t */\n\t\tthis._referenceSpaceType = 'local-floor';\n\n\t\t/**\n\t\t * A custom reference space defined by the application.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRReferenceSpace}\n\t\t * @default null\n\t\t */\n\t\tthis._customReferenceSpace = null;\n\n\t\t/**\n\t\t * The framebuffer scale factor.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._framebufferScaleFactor = 1;\n\n\t\t/**\n\t\t * The foveation factor.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis._foveation = 1.0;\n\n\t\t/**\n\t\t * A reference to the current XR session.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRSession}\n\t\t * @default null\n\t\t */\n\t\tthis._session = null;\n\n\t\t/**\n\t\t * A reference to the current XR base layer.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRWebGLLayer}\n\t\t * @default null\n\t\t */\n\t\tthis._glBaseLayer = null;\n\n\t\t/**\n\t\t * A reference to the current XR binding.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRWebGLBinding}\n\t\t * @default null\n\t\t */\n\t\tthis._glBinding = null;\n\n\t\t/**\n\t\t * A reference to the current XR projection layer.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRProjectionLayer}\n\t\t * @default null\n\t\t */\n\t\tthis._glProjLayer = null;\n\n\t\t/**\n\t\t * A reference to the current XR frame.\n\t\t *\n\t\t * @private\n\t\t * @type {?XRFrame}\n\t\t * @default null\n\t\t */\n\t\tthis._xrFrame = null;\n\n\t\t/**\n\t\t * Whether to use the WebXR Layers API or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t */\n\t\tthis._useLayers = ( this._supportsGlBinding && 'createProjectionLayer' in XRWebGLBinding.prototype ); // eslint-disable-line compat/compat\n\n\t\t/**\n\t\t * Whether the usage of multiview has been requested by the application or not.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis._useMultiviewIfPossible = multiview;\n\n\t\t/**\n\t\t * Whether the usage of multiview is actually enabled. This flag only evaluates to `true`\n\t\t * if multiview has been requested by the application and the `OVR_multiview2` is available.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t */\n\t\tthis._useMultiview = false;\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in target ray space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetController( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getTargetRaySpace();\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in grip space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetControllerGrip( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getGripSpace();\n\n\t}\n\n\t/**\n\t * Returns an instance of `THREE.Group` that represents the transformation\n\t * of a XR controller in hand space. The requested controller is defined\n\t * by the given index.\n\t *\n\t * @param {number} index - The index of the XR controller.\n\t * @return {Group} A group that represents the controller's transformation.\n\t */\n\tgetHand( index ) {\n\n\t\tconst controller = this._getController( index );\n\n\t\treturn controller.getHandSpace();\n\n\t}\n\n\t/**\n\t * Returns the foveation value.\n\t *\n\t * @return {number|undefined} The foveation value. Returns `undefined` if no base or projection layer is defined.\n\t */\n\tgetFoveation() {\n\n\t\tif ( this._glProjLayer === null && this._glBaseLayer === null ) {\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t\treturn this._foveation;\n\n\t}\n\n\t/**\n\t * Sets the foveation value.\n\t *\n\t * @param {number} foveation - A number in the range `[0,1]` where `0` means no foveation (full resolution)\n\t * and `1` means maximum foveation (the edges render at lower resolution).\n\t */\n\tsetFoveation( foveation ) {\n\n\t\tthis._foveation = foveation;\n\n\t\tif ( this._glProjLayer !== null ) {\n\n\t\t\tthis._glProjLayer.fixedFoveation = foveation;\n\n\t\t}\n\n\t\tif ( this._glBaseLayer !== null && this._glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\tthis._glBaseLayer.fixedFoveation = foveation;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the framebuffer scale factor.\n\t *\n\t * @return {number} The framebuffer scale factor.\n\t */\n\tgetFramebufferScaleFactor() {\n\n\t\treturn this._framebufferScaleFactor;\n\n\t}\n\n\t/**\n\t * Sets the framebuffer scale factor.\n\t *\n\t * This method can not be used during a XR session.\n\t *\n\t * @param {number} factor - The framebuffer scale factor.\n\t */\n\tsetFramebufferScaleFactor( factor ) {\n\n\t\tthis._framebufferScaleFactor = factor;\n\n\t\tif ( this.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.XRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the reference space type.\n\t *\n\t * @return {XRReferenceSpaceType} The reference space type.\n\t */\n\tgetReferenceSpaceType() {\n\n\t\treturn this._referenceSpaceType;\n\n\t}\n\n\t/**\n\t * Sets the reference space type.\n\t *\n\t * This method can not be used during a XR session.\n\t *\n\t * @param {XRReferenceSpaceType} type - The reference space type.\n\t */\n\tsetReferenceSpaceType( type ) {\n\n\t\tthis._referenceSpaceType = type;\n\n\t\tif ( this.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.XRManager: Cannot change reference space type while presenting.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the XR reference space.\n\t *\n\t * @return {XRReferenceSpace} The XR reference space.\n\t */\n\tgetReferenceSpace() {\n\n\t\treturn this._customReferenceSpace || this._referenceSpace;\n\n\t}\n\n\t/**\n\t * Sets a custom XR reference space.\n\t *\n\t * @param {XRReferenceSpace} space - The XR reference space.\n\t */\n\tsetReferenceSpace( space ) {\n\n\t\tthis._customReferenceSpace = space;\n\n\t}\n\n\t/**\n\t * Returns the XR camera.\n\t *\n\t * @return {ArrayCamera} The XR camera.\n\t */\n\tgetCamera() {\n\n\t\treturn this._cameraXR;\n\n\t}\n\n\t/**\n\t * Returns the environment blend mode from the current XR session.\n\t *\n\t * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.\n\t */\n\tgetEnvironmentBlendMode() {\n\n\t\tif ( this._session !== null ) {\n\n\t\t\treturn this._session.environmentBlendMode;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the current XR frame.\n\t *\n\t * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.\n\t */\n\tgetFrame() {\n\n\t\treturn this._xrFrame;\n\n\t}\n\n\t/**\n\t * Returns `true` if the engine renders to a multiview target.\n\t *\n\t * @return {boolean} Whether the engine renders to a multiview render target or not.\n\t */\n\tuseMultiview() {\n\n\t\treturn this._useMultiview;\n\n\t}\n\n\t/**\n\t * This method can be used in XR applications to create a quadratic layer that presents a separate\n\t * rendered scene.\n\t *\n\t * @param {number} width - The width of the layer plane in world units.\n\t * @param {number} height - The height of the layer plane in world units.\n\t * @param {Vector3} translation - The position/translation of the layer plane in world units.\n\t * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.\n\t * @param {number} pixelwidth - The width of the layer's render target in pixels.\n\t * @param {number} pixelheight - The height of the layer's render target in pixels.\n\t * @param {Function} rendercall - A callback function that renders the layer. Similar to code in\n\t * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.\n\t * @param {Object} [attributes={}] - Allows to configure the layer's render target.\n\t * @return {Mesh} A mesh representing the quadratic XR layer. This mesh should be added to the XR scene.\n\t */\n\tcreateQuadLayer( width, height, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {} ) {\n\n\t\tconst geometry = new PlaneGeometry( width, height );\n\t\tconst renderTarget = new XRRenderTarget(\n\t\t\tpixelwidth,\n\t\t\tpixelheight,\n\t\t\t{\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\tpixelwidth,\n\t\t\t\t\tpixelheight,\n\t\t\t\t\tattributes.stencil ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tattributes.stencil ? DepthStencilFormat : DepthFormat\n\t\t\t\t),\n\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\tresolveStencilBuffer: false\n\t\t\t} );\n\n\t\trenderTarget._autoAllocateDepthBuffer = true;\n\n\t\tconst material = new MeshBasicMaterial( { color: 0xffffff, side: FrontSide } );\n\t\tmaterial.map = renderTarget.texture;\n\t\tmaterial.map.offset.y = 1;\n\t\tmaterial.map.repeat.y = - 1;\n\t\tconst plane = new Mesh( geometry, material );\n\t\tplane.position.copy( translation );\n\t\tplane.quaternion.copy( quaternion );\n\n\t\tconst layer = {\n\t\t\ttype: 'quad',\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\ttranslation: translation,\n\t\t\tquaternion: quaternion,\n\t\t\tpixelwidth: pixelwidth,\n\t\t\tpixelheight: pixelheight,\n\t\t\tplane: plane,\n\t\t\tmaterial: material,\n\t\t\trendercall: rendercall,\n\t\t\trenderTarget: renderTarget };\n\n\t\tthis._layers.push( layer );\n\n\t\tif ( this._session !== null ) {\n\n\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: FrontSide } );\n\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\tconst xrlayers = this._session.renderState.layers;\n\t\t\txrlayers.unshift( layer.xrlayer );\n\t\t\tthis._session.updateRenderState( { layers: xrlayers } );\n\n\t\t} else {\n\n\t\t\trenderTarget.isXRRenderTarget = false;\n\n\t\t}\n\n\t\treturn plane;\n\n\t}\n\n\t/**\n\t * This method can be used in XR applications to create a cylindrical layer that presents a separate\n\t * rendered scene.\n\t *\n\t * @param {number} radius - The radius of the cylinder in world units.\n\t * @param {number} centralAngle - The central angle of the cylinder in radians.\n\t * @param {number} aspectratio - The aspect ratio.\n\t * @param {Vector3} translation - The position/translation of the layer plane in world units.\n\t * @param {Quaternion} quaternion - The orientation of the layer plane expressed as a quaternion.\n\t * @param {number} pixelwidth - The width of the layer's render target in pixels.\n\t * @param {number} pixelheight - The height of the layer's render target in pixels.\n\t * @param {Function} rendercall - A callback function that renders the layer. Similar to code in\n\t * the default animation loop, this method can be used to update/transform 3D object in the layer's scene.\n\t * @param {Object} [attributes={}] - Allows to configure the layer's render target.\n\t * @return {Mesh} A mesh representing the cylindrical XR layer. This mesh should be added to the XR scene.\n\t */\n\tcreateCylinderLayer( radius, centralAngle, aspectratio, translation, quaternion, pixelwidth, pixelheight, rendercall, attributes = {} ) {\n\n\t\tconst geometry = new CylinderGeometry( radius, radius, radius * centralAngle / aspectratio, 64, 64, true, Math.PI - centralAngle / 2, centralAngle );\n\t\tconst renderTarget = new XRRenderTarget(\n\t\t\tpixelwidth,\n\t\t\tpixelheight,\n\t\t\t{\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\tpixelwidth,\n\t\t\t\t\tpixelheight,\n\t\t\t\t\tattributes.stencil ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tattributes.stencil ? DepthStencilFormat : DepthFormat\n\t\t\t\t),\n\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\tresolveStencilBuffer: false\n\t\t\t} );\n\n\t\trenderTarget._autoAllocateDepthBuffer = true;\n\n\t\tconst material = new MeshBasicMaterial( { color: 0xffffff, side: BackSide } );\n\t\tmaterial.map = renderTarget.texture;\n\t\tmaterial.map.offset.y = 1;\n\t\tmaterial.map.repeat.y = - 1;\n\t\tconst plane = new Mesh( geometry, material );\n\t\tplane.position.copy( translation );\n\t\tplane.quaternion.copy( quaternion );\n\n\t\tconst layer = {\n\t\t\ttype: 'cylinder',\n\t\t\tradius: radius,\n\t\t\tcentralAngle: centralAngle,\n\t\t\taspectratio: aspectratio,\n\t\t\ttranslation: translation,\n\t\t\tquaternion: quaternion,\n\t\t\tpixelwidth: pixelwidth,\n\t\t\tpixelheight: pixelheight,\n\t\t\tplane: plane,\n\t\t\tmaterial: material,\n\t\t\trendercall: rendercall,\n\t\t\trenderTarget: renderTarget };\n\n\t\tthis._layers.push( layer );\n\n\t\tif ( this._session !== null ) {\n\n\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: BackSide } );\n\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\tconst xrlayers = this._session.renderState.layers;\n\t\t\txrlayers.unshift( layer.xrlayer );\n\t\t\tthis._session.updateRenderState( { layers: xrlayers } );\n\n\t\t} else {\n\n\t\t\trenderTarget.isXRRenderTarget = false;\n\n\t\t}\n\n\t\treturn plane;\n\n\t}\n\n\t/**\n\t * Renders the XR layers that have been previously added to the scene.\n\t *\n\t * This method is usually called in your animation loop before rendering\n\t * the actual scene via `renderer.render( scene, camera );`.\n\t */\n\trenderLayers( ) {\n\n\t\tconst translationObject = new Vector3();\n\t\tconst quaternionObject = new Quaternion();\n\t\tconst renderer = this._renderer;\n\n\t\tconst wasPresenting = this.isPresenting;\n\t\tconst rendererOutputTarget = renderer.getOutputRenderTarget();\n\t\tconst rendererFramebufferTarget = renderer._frameBufferTarget;\n\t\tthis.isPresenting = false;\n\n\t\tconst rendererSize = new Vector2();\n\t\trenderer.getSize( rendererSize );\n\t\tconst rendererQuad = renderer._quad;\n\n\t\tfor ( const layer of this._layers ) {\n\n\t\t\tlayer.renderTarget.isXRRenderTarget = this._session !== null;\n\t\t\tlayer.renderTarget._hasExternalTextures = layer.renderTarget.isXRRenderTarget;\n\n\t\t\tif ( layer.renderTarget.isXRRenderTarget && this._supportsLayers ) {\n\n\t\t\t\tlayer.xrlayer.transform = new XRRigidTransform( layer.plane.getWorldPosition( translationObject ), layer.plane.getWorldQuaternion( quaternionObject ) );\n\n\t\t\t\tconst glSubImage = this._glBinding.getSubImage( layer.xrlayer, this._xrFrame );\n\t\t\t\trenderer.backend.setXRRenderTargetTextures(\n\t\t\t\t\tlayer.renderTarget,\n\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\tundefined );\n\n\t\t\t\trenderer._setXRLayerSize( layer.renderTarget.width, layer.renderTarget.height );\n\t\t\t\trenderer.setOutputRenderTarget( layer.renderTarget );\n\t\t\t\trenderer.setRenderTarget( null );\n\t\t\t\trenderer._frameBufferTarget = null;\n\n\t\t\t\tthis._frameBufferTargets || ( this._frameBufferTargets = new WeakMap() );\n\t\t\t\tconst { frameBufferTarget, quad } = this._frameBufferTargets.get( layer.renderTarget ) || { frameBufferTarget: null, quad: null };\n\t\t\t\tif ( ! frameBufferTarget ) {\n\n\t\t\t\t\trenderer._quad = new QuadMesh( new NodeMaterial() );\n\t\t\t\t\tthis._frameBufferTargets.set( layer.renderTarget, { frameBufferTarget: renderer._getFrameBufferTarget(), quad: renderer._quad } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer._frameBufferTarget = frameBufferTarget;\n\t\t\t\t\trenderer._quad = quad;\n\n\t\t\t\t}\n\n\t\t\t\tlayer.rendercall();\n\n\t\t\t\trenderer._frameBufferTarget = null;\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setRenderTarget( layer.renderTarget );\n\t\t\t\tlayer.rendercall();\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderer.setRenderTarget( null );\n\t\trenderer.setOutputRenderTarget( rendererOutputTarget );\n\t\trenderer._frameBufferTarget = rendererFramebufferTarget;\n\t\trenderer._setXRLayerSize( rendererSize.x, rendererSize.y );\n\t\trenderer._quad = rendererQuad;\n\t\tthis.isPresenting = wasPresenting;\n\n\t}\n\n\n\t/**\n\t * Returns the current XR session.\n\t *\n\t * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.\n\t */\n\tgetSession() {\n\n\t\treturn this._session;\n\n\t}\n\n\t/**\n\t * After a XR session has been requested usually with one of the `*Button` modules, it\n\t * is injected into the renderer with this method. This method triggers the start of\n\t * the actual XR rendering.\n\t *\n\t * @async\n\t * @param {XRSession} session - The XR session to set.\n\t * @return {Promise} A Promise that resolves when the session has been set.\n\t */\n\tasync setSession( session ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst backend = renderer.backend;\n\n\t\tthis._gl = renderer.getContext();\n\t\tconst gl = this._gl;\n\t\tconst attributes = gl.getContextAttributes();\n\n\t\tthis._session = session;\n\n\t\tif ( session !== null ) {\n\n\t\t\tif ( backend.isWebGPUBackend === true ) throw new Error( 'THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing \"{ forceWebGL: true }\" to the constructor of the renderer.' );\n\n\t\t\tsession.addEventListener( 'select', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeeze', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezestart', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezeend', this._onSessionEvent );\n\t\t\tsession.addEventListener( 'end', this._onSessionEnd );\n\t\t\tsession.addEventListener( 'inputsourceschange', this._onInputSourcesChange );\n\n\t\t\tawait backend.makeXRCompatible();\n\n\t\t\tthis._currentPixelRatio = renderer.getPixelRatio();\n\t\t\trenderer.getSize( this._currentSize );\n\n\t\t\tthis._currentAnimationContext = renderer._animation.getContext();\n\t\t\tthis._currentAnimationLoop = renderer._animation.getAnimationLoop();\n\t\t\trenderer._animation.stop();\n\n\t\t\t//\n\n\t\t\tif ( this._supportsGlBinding ) {\n\n\t\t\t\tconst glBinding = new XRWebGLBinding( session, gl );\n\t\t\t\tthis._glBinding = glBinding;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this._useLayers === true ) {\n\n\t\t\t\t// default path using XRProjectionLayer\n\n\t\t\t\tlet depthFormat = null;\n\t\t\t\tlet depthType = null;\n\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\tif ( renderer.depth ) {\n\n\t\t\t\t\tglDepthFormat = renderer.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\tdepthFormat = renderer.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\tdepthType = renderer.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t}\n\n\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\tscaleFactor: this._framebufferScaleFactor,\n\t\t\t\t\tclearOnAccess: false\n\t\t\t\t};\n\n\t\t\t\tif ( this._useMultiviewIfPossible && renderer.hasFeature( 'OVR_multiview2' ) ) {\n\n\t\t\t\t\tprojectionlayerInit.textureType = 'texture-array';\n\t\t\t\t\tthis._useMultiview = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst glProjLayer = this._glBinding.createProjectionLayer( projectionlayerInit );\n\t\t\t\tconst layersArray = [ glProjLayer ];\n\n\t\t\t\tthis._glProjLayer = glProjLayer;\n\n\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\trenderer._setXRLayerSize( glProjLayer.textureWidth, glProjLayer.textureHeight );\n\n\t\t\t\tconst depth = this._useMultiview ? 2 : 1;\n\t\t\t\tconst depthTexture = new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat, depth );\n\n\t\t\t\tthis._xrRenderTarget = new XRRenderTarget(\n\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\tdepthTexture: depthTexture,\n\t\t\t\t\t\tstencilBuffer: renderer.stencil,\n\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0,\n\t\t\t\t\t\tresolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tresolveStencilBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tdepth: this._useMultiview ? 2 : 1,\n\t\t\t\t\t\tmultiview: this._useMultiview\n\t\t\t\t\t} );\n\n\t\t\t\tthis._xrRenderTarget._hasExternalTextures = true;\n\t\t\t\tthis._xrRenderTarget.depth = this._useMultiview ? 2 : 1;\n\n\t\t\t\tthis._supportsLayers = session.enabledFeatures.includes( 'layers' );\n\n\t\t\t\tthis._referenceSpace = await session.requestReferenceSpace( this.getReferenceSpaceType() );\n\n\t\t\t\tif ( this._supportsLayers ) {\n\n\t\t\t\t\t// switch layers to native\n\t\t\t\t\tfor ( const layer of this._layers ) {\n\n\t\t\t\t\t\t// change material so it \"punches\" out a hole to show the XR Layer.\n\t\t\t\t\t\tlayer.plane.material = new MeshBasicMaterial( { color: 0xffffff, side: layer.type === 'cylinder' ? BackSide : FrontSide } );\n\t\t\t\t\t\tlayer.plane.material.blending = CustomBlending;\n\t\t\t\t\t\tlayer.plane.material.blendEquation = AddEquation;\n\t\t\t\t\t\tlayer.plane.material.blendSrc = ZeroFactor;\n\t\t\t\t\t\tlayer.plane.material.blendDst = ZeroFactor;\n\n\t\t\t\t\t\tlayer.xrlayer = this._createXRLayer( layer );\n\n\t\t\t\t\t\tlayersArray.unshift( layer.xrlayer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tsession.updateRenderState( { layers: layersArray } );\n\n\t\t\t} else {\n\n\t\t\t\t// fallback to XRWebGLLayer\n\n\t\t\t\tconst layerInit = {\n\t\t\t\t\tantialias: renderer.samples > 0,\n\t\t\t\t\talpha: true,\n\t\t\t\t\tdepth: renderer.depth,\n\t\t\t\t\tstencil: renderer.stencil,\n\t\t\t\t\tframebufferScaleFactor: this.getFramebufferScaleFactor()\n\t\t\t\t};\n\n\t\t\t\tconst glBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\t\t\t\tthis._glBaseLayer = glBaseLayer;\n\n\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\trenderer._setXRLayerSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight );\n\n\t\t\t\tthis._xrRenderTarget = new XRRenderTarget(\n\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\tstencilBuffer: renderer.stencil,\n\t\t\t\t\t\tresolveDepthBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\tresolveStencilBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tthis._xrRenderTarget._isOpaqueFramebuffer = true;\n\t\t\t\tthis._referenceSpace = await session.requestReferenceSpace( this.getReferenceSpaceType() );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tthis.setFoveation( this.getFoveation() );\n\n\t\t\trenderer._animation.setAnimationLoop( this._onAnimationFrame );\n\t\t\trenderer._animation.setContext( session );\n\t\t\trenderer._animation.start();\n\n\t\t\tthis.isPresenting = true;\n\n\t\t\tthis.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * This method is called by the renderer per frame and updates the XR camera\n\t * and it sub cameras based on the given camera. The given camera is the \"user\"\n\t * camera created on application level and used for non-XR rendering.\n\t *\n\t * @param {PerspectiveCamera} camera - The camera.\n\t */\n\tupdateCamera( camera ) {\n\n\t\tconst session = this._session;\n\n\t\tif ( session === null ) return;\n\n\t\tconst depthNear = camera.near;\n\t\tconst depthFar = camera.far;\n\n\t\tconst cameraXR = this._cameraXR;\n\t\tconst cameraL = this._cameraL;\n\t\tconst cameraR = this._cameraR;\n\n\t\tcameraXR.near = cameraR.near = cameraL.near = depthNear;\n\t\tcameraXR.far = cameraR.far = cameraL.far = depthFar;\n\t\tcameraXR.isMultiViewCamera = this._useMultiview;\n\n\t\tif ( this._currentDepthNear !== cameraXR.near || this._currentDepthFar !== cameraXR.far ) {\n\n\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\tsession.updateRenderState( {\n\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\tdepthFar: cameraXR.far\n\t\t\t} );\n\n\t\t\tthis._currentDepthNear = cameraXR.near;\n\t\t\tthis._currentDepthFar = cameraXR.far;\n\n\t\t}\n\n\t\t// inherit camera layers and enable eye layers (1 = left, 2 = right)\n\t\tcameraXR.layers.mask = camera.layers.mask | 0b110;\n\t\tcameraL.layers.mask = cameraXR.layers.mask & 0b011;\n\t\tcameraR.layers.mask = cameraXR.layers.mask & 0b101;\n\n\n\t\tconst parent = camera.parent;\n\t\tconst cameras = cameraXR.cameras;\n\n\t\tupdateCamera( cameraXR, parent );\n\n\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t}\n\n\t\t// update projection matrix for proper view frustum culling\n\n\t\tif ( cameras.length === 2 ) {\n\n\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t} else {\n\n\t\t\t// assume single camera setup (AR)\n\n\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t}\n\n\t\t// update user camera and its children\n\n\t\tupdateUserCamera( camera, cameraXR, parent );\n\n\n\t}\n\n\t/**\n\t * Returns a WebXR controller for the given controller index.\n\t *\n\t * @private\n\t * @param {number} index - The controller index.\n\t * @return {WebXRController} The XR controller.\n\t */\n\t_getController( index ) {\n\n\t\tlet controller = this._controllers[ index ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new WebXRController();\n\t\t\tthis._controllers[ index ] = controller;\n\n\t\t}\n\n\t\treturn controller;\n\n\t}\n\n}\n\n/**\n * Assumes 2 cameras that are parallel and share an X-axis, and that\n * the cameras' projection and world matrices have already been set.\n * And that near and far planes are identical for both cameras.\n * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n *\n * @param {ArrayCamera} camera - The camera to update.\n * @param {PerspectiveCamera} cameraL - The left camera.\n * @param {PerspectiveCamera} cameraR - The right camera.\n */\nfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t_cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t_cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\tconst ipd = _cameraLPos.distanceTo( _cameraRPos );\n\n\tconst projL = cameraL.projectionMatrix.elements;\n\tconst projR = cameraR.projectionMatrix.elements;\n\n\t// VR systems will have identical far and near planes, and\n\t// most likely identical top and bottom frustum extents.\n\t// Use the left camera for these values.\n\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\tconst left = near * leftFov;\n\tconst right = near * rightFov;\n\n\t// Calculate the new camera's position offset from the\n\t// left camera. xOffset should be roughly half `ipd`.\n\tconst zOffset = ipd / ( - leftFov + rightFov );\n\tconst xOffset = zOffset * - leftFov;\n\n\t// TODO: Better way to apply this offset?\n\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\tcamera.translateX( xOffset );\n\tcamera.translateZ( zOffset );\n\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t// Check if the projection uses an infinite far plane.\n\tif ( projL[ 10 ] === - 1.0 ) {\n\n\t\t// Use the projection matrix from the left eye.\n\t\t// The camera offset is sufficient to include the view volumes\n\t\t// of both eyes (assuming symmetric projections).\n\t\tcamera.projectionMatrix.copy( cameraL.projectionMatrix );\n\t\tcamera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );\n\n\t} else {\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tconst near2 = near + zOffset;\n\t\tconst far2 = far + zOffset;\n\t\tconst left2 = left - xOffset;\n\t\tconst right2 = right + ( ipd - xOffset );\n\t\tconst top2 = topFov * far / far2 * near2;\n\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t}\n\n}\n\n/**\n * Updates the world matrices for the given camera based on the parent 3D object.\n *\n * @inner\n * @param {Camera} camera - The camera to update.\n * @param {Object3D} parent - The parent 3D object.\n */\nfunction updateCamera( camera, parent ) {\n\n\tif ( parent === null ) {\n\n\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t} else {\n\n\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t}\n\n\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n}\n\n/**\n * Updates the given camera with the transformation of the XR camera and parent object.\n *\n * @inner\n * @param {Camera} camera - The camera to update.\n * @param {ArrayCamera} cameraXR - The XR camera.\n * @param {Object3D} parent - The parent 3D object.\n */\nfunction updateUserCamera( camera, cameraXR, parent ) {\n\n\tif ( parent === null ) {\n\n\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t} else {\n\n\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\tcamera.matrix.invert();\n\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t}\n\n\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\tcamera.updateMatrixWorld( true );\n\n\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\tif ( camera.isPerspectiveCamera ) {\n\n\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\tcamera.zoom = 1;\n\n\t}\n\n}\n\nfunction onSessionEvent( event ) {\n\n\tconst controllerIndex = this._controllerInputSources.indexOf( event.inputSource );\n\n\tif ( controllerIndex === - 1 ) {\n\n\t\treturn;\n\n\t}\n\n\tconst controller = this._controllers[ controllerIndex ];\n\n\tif ( controller !== undefined ) {\n\n\t\tconst referenceSpace = this.getReferenceSpace();\n\n\t\tcontroller.update( event.inputSource, event.frame, referenceSpace );\n\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t}\n\n}\n\nfunction onSessionEnd() {\n\n\tconst session = this._session;\n\tconst renderer = this._renderer;\n\n\tsession.removeEventListener( 'select', this._onSessionEvent );\n\tsession.removeEventListener( 'selectstart', this._onSessionEvent );\n\tsession.removeEventListener( 'selectend', this._onSessionEvent );\n\tsession.removeEventListener( 'squeeze', this._onSessionEvent );\n\tsession.removeEventListener( 'squeezestart', this._onSessionEvent );\n\tsession.removeEventListener( 'squeezeend', this._onSessionEvent );\n\tsession.removeEventListener( 'end', this._onSessionEnd );\n\tsession.removeEventListener( 'inputsourceschange', this._onInputSourcesChange );\n\n\tfor ( let i = 0; i < this._controllers.length; i ++ ) {\n\n\t\tconst inputSource = this._controllerInputSources[ i ];\n\n\t\tif ( inputSource === null ) continue;\n\n\t\tthis._controllerInputSources[ i ] = null;\n\n\t\tthis._controllers[ i ].disconnect( inputSource );\n\n\t}\n\n\tthis._currentDepthNear = null;\n\tthis._currentDepthFar = null;\n\n\t// restore framebuffer/rendering state\n\n\trenderer._resetXRState();\n\n\tthis._session = null;\n\tthis._xrRenderTarget = null;\n\n\t// switch layers back to emulated\n\tif ( this._supportsLayers === true ) {\n\n\t\tfor ( const layer of this._layers ) {\n\n\t\t\t// Recreate layer render target to reset state\n\t\t\tlayer.renderTarget = new XRRenderTarget(\n\t\t\t\tlayer.pixelwidth,\n\t\t\t\tlayer.pixelheight,\n\t\t\t\t{\n\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\tdepthTexture: new DepthTexture(\n\t\t\t\t\t\tlayer.pixelwidth,\n\t\t\t\t\t\tlayer.pixelheight,\n\t\t\t\t\t\tlayer.stencilBuffer ? UnsignedInt248Type : UnsignedIntType,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tlayer.stencilBuffer ? DepthStencilFormat : DepthFormat\n\t\t\t\t\t),\n\t\t\t\t\tstencilBuffer: layer.stencilBuffer,\n\t\t\t\t\tresolveDepthBuffer: false,\n\t\t\t\t\tresolveStencilBuffer: false\n\t\t\t\t} );\n\n\t\t\tlayer.renderTarget.isXRRenderTarget = false;\n\n\t\t\tlayer.plane.material = layer.material;\n\t\t\tlayer.material.map = layer.renderTarget.texture;\n\t\t\tlayer.material.map.offset.y = 1;\n\t\t\tlayer.material.map.repeat.y = - 1;\n\t\t\tdelete layer.xrlayer;\n\n\t\t}\n\n\t}\n\n\t//\n\n\tthis.isPresenting = false;\n\tthis._useMultiview = false;\n\n\trenderer._animation.stop();\n\trenderer._animation.setAnimationLoop( this._currentAnimationLoop );\n\trenderer._animation.setContext( this._currentAnimationContext );\n\trenderer._animation.start();\n\n\trenderer.setPixelRatio( this._currentPixelRatio );\n\trenderer.setSize( this._currentSize.width, this._currentSize.height, false );\n\n\tthis.dispatchEvent( { type: 'sessionend' } );\n\n}\n\nfunction onInputSourcesChange( event ) {\n\n\tconst controllers = this._controllers;\n\tconst controllerInputSources = this._controllerInputSources;\n\n\t// Notify disconnected\n\n\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\tconst inputSource = event.removed[ i ];\n\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\tif ( index >= 0 ) {\n\n\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t}\n\n\t}\n\n\t// Notify connected\n\n\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\tconst inputSource = event.added[ i ];\n\n\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t}\n\n\t\tconst controller = controllers[ controllerIndex ];\n\n\t\tif ( controller ) {\n\n\t\t\tcontroller.connect( inputSource );\n\n\t\t}\n\n\t}\n\n}\n\n// Creation method for native WebXR layers\nfunction createXRLayer( layer ) {\n\n\tif ( layer.type === 'quad' ) {\n\n\t\treturn this._glBinding.createQuadLayer( {\n\t\t\ttransform: new XRRigidTransform( layer.translation, layer.quaternion ),\n\t\t\twidth: layer.width / 2,\n\t\t\theight: layer.height / 2,\n\t\t\tspace: this._referenceSpace,\n\t\t\tviewPixelWidth: layer.pixelwidth,\n\t\t\tviewPixelHeight: layer.pixelheight,\n\t\t\tclearOnAccess: false\n\t\t} );\n\n\t} else {\n\n\t\treturn this._glBinding.createCylinderLayer( {\n\t\t\ttransform: new XRRigidTransform( layer.translation, layer.quaternion ),\n\t\t\tradius: layer.radius,\n\t\t\tcentralAngle: layer.centralAngle,\n\t\t\taspectRatio: layer.aspectRatio,\n\t\t\tspace: this._referenceSpace,\n\t\t\tviewPixelWidth: layer.pixelwidth,\n\t\t\tviewPixelHeight: layer.pixelheight,\n\t\t\tclearOnAccess: false\n\t\t} );\n\n\t}\n\n}\n\n// Animation Loop\n\nfunction onAnimationFrame( time, frame ) {\n\n\tif ( frame === undefined ) return;\n\n\tconst cameraXR = this._cameraXR;\n\tconst renderer = this._renderer;\n\tconst backend = renderer.backend;\n\n\tconst glBaseLayer = this._glBaseLayer;\n\n\tconst referenceSpace = this.getReferenceSpace();\n\tconst pose = frame.getViewerPose( referenceSpace );\n\n\tthis._xrFrame = frame;\n\n\tif ( pose !== null ) {\n\n\t\tconst views = pose.views;\n\n\t\tif ( this._glBaseLayer !== null ) {\n\n\t\t\tbackend.setXRTarget( glBaseLayer.framebuffer );\n\n\t\t}\n\n\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\tcameraXR.cameras.length = 0;\n\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\tconst view = views[ i ];\n\n\t\t\tlet viewport;\n\n\t\t\tif ( this._useLayers === true ) {\n\n\t\t\t\tconst glSubImage = this._glBinding.getViewSubImage( this._glProjLayer, view );\n\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tbackend.setXRRenderTargetTextures(\n\t\t\t\t\t\tthis._xrRenderTarget,\n\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t( this._glProjLayer.ignoreDepthValues && ! this._useMultiview ) ? undefined : glSubImage.depthStencilTexture\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t}\n\n\t\t\tlet camera = this._cameras[ i ];\n\n\t\t\tif ( camera === undefined ) {\n\n\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\tcamera.layers.enable( i );\n\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\tthis._cameras[ i ] = camera;\n\n\t\t\t}\n\n\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t}\n\n\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderer.setOutputRenderTarget( this._xrRenderTarget );\n\n\t}\n\n\t//\n\n\tfor ( let i = 0; i < this._controllers.length; i ++ ) {\n\n\t\tconst inputSource = this._controllerInputSources[ i ];\n\t\tconst controller = this._controllers[ i ];\n\n\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t}\n\n\t}\n\n\tif ( this._currentAnimationLoop ) this._currentAnimationLoop( time, frame );\n\n\tif ( frame.detectedPlanes ) {\n\n\t\tthis.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t}\n\n\tthis._xrFrame = null;\n\n}\n\nexport default XRManager;\n"],"mappings":"OAASA,gBAAmB,sCACnBC,oBAAuB,uCACvBC,sBAAyB,4CACzBC,eAAkB,kCAClBC,YAAe,iCACfC,YAAe,+BACfC,YAAe,+BACfC,YAAe,+BACfC,oBAAuB,qCACvBC,YAAaC,SAAUC,eAAgBC,YAAaC,mBAAoBC,UAAWC,WAAYC,iBAAkBC,mBAAoBC,gBAAiBC,eAAkB,4BACxKC,iBAAoB,wCACpBC,mBAAsB,6BACtBC,qBAAwB,8CAC1BC,aAAc,uBACdC,iBAAkB,+CAChBC,kBAAqB,2CACrBC,sBAAyB,8CACzBC,SAAY,wBAErB,MAAMC,YAA4B,IAAItB,QAChCuB,YAA4B,IAAIvB,QAUtC,MAAMwB,kBAAkB7B,gBAQvB,WAAA8B,CAAaC,EAAUC,GAAY,GAElCC,QAQAC,KAAKC,SAAU,EASfD,KAAKE,cAAe,EAQpBF,KAAKG,kBAAmB,EAQxBH,KAAKI,UAAYP,EAUjBG,KAAKK,SAAW,IAAItC,kBACpBiC,KAAKK,SAASC,SAAW,IAAIlC,QAQ7B4B,KAAKO,SAAW,IAAIxC,kBACpBiC,KAAKO,SAASD,SAAW,IAAIlC,QAQ7B4B,KAAKQ,SAAW,CAAER,KAAKK,SAAUL,KAAKO,UAQtCP,KAAKS,UAAY,IAAI5C,YASrBmC,KAAKU,kBAAoB,KASzBV,KAAKW,iBAAmB,KAQxBX,KAAKY,aAAe,GASpBZ,KAAKa,wBAA0B,GAU/Bb,KAAKc,gBAAkB,KASvBd,KAAKe,QAAU,GAQff,KAAKgB,iBAAkB,EASvBhB,KAAKiB,mBAA+C,oBAAnBC,eAEjClB,KAAKmB,oBAAsB,KAQ3BnB,KAAKoB,eAAiBC,cAAcC,KAAMtB,MAS1CA,KAAKuB,IAAM,KASXvB,KAAKwB,yBAA2B,KAShCxB,KAAKyB,sBAAwB,KAS7BzB,KAAK0B,mBAAqB,KAS1B1B,KAAK2B,aAAe,IAAIzD,QAQxB8B,KAAK4B,gBAAkBC,eAAeP,KAAMtB,MAQ5CA,KAAK8B,cAAgBC,aAAaT,KAAMtB,MAQxCA,KAAKgC,sBAAwBC,qBAAqBX,KAAMtB,MAUxDA,KAAKkC,kBAAoBC,iBAAiBb,KAAMtB,MAShDA,KAAKoC,gBAAkB,KASvBpC,KAAKqC,oBAAsB,cAS3BrC,KAAKsC,sBAAwB,KAS7BtC,KAAKuC,wBAA0B,EAS/BvC,KAAKwC,WAAa,EASlBxC,KAAKyC,SAAW,KAShBzC,KAAK0C,aAAe,KASpB1C,KAAK2C,WAAa,KASlB3C,KAAK4C,aAAe,KASpB5C,KAAK6C,SAAW,KAShB7C,KAAK8C,WAAe9C,KAAKiB,oBAAsB,0BAA2BC,eAAe6B,UAUzF/C,KAAKgD,wBAA0BlD,EAU/BE,KAAKiD,eAAgB,CAEtB,CAUA,aAAAC,CAAeC,GAId,OAFmBnD,KAAKoD,eAAgBD,GAEtBE,mBAEnB,CAUA,iBAAAC,CAAmBH,GAIlB,OAFmBnD,KAAKoD,eAAgBD,GAEtBI,cAEnB,CAUA,OAAAC,CAASL,GAIR,OAFmBnD,KAAKoD,eAAgBD,GAEtBM,cAEnB,CAOA,YAAAC,GAEC,GAA2B,OAAtB1D,KAAK4C,cAA+C,OAAtB5C,KAAK0C,aAMxC,OAAO1C,KAAKwC,UAEb,CAQA,YAAAmB,CAAcC,GAEb5D,KAAKwC,WAAaoB,EAES,OAAtB5D,KAAK4C,eAET5C,KAAK4C,aAAaiB,eAAiBD,GAIT,OAAtB5D,KAAK0C,mBAA8DoB,IAArC9D,KAAK0C,aAAamB,iBAEpD7D,KAAK0C,aAAamB,eAAiBD,EAIrC,CAOA,yBAAAG,GAEC,OAAO/D,KAAKuC,uBAEb,CASA,yBAAAyB,CAA2BC,GAE1BjE,KAAKuC,wBAA0B0B,GAEJ,IAAtBjE,KAAKE,cAETgE,QAAQC,KAAM,qEAIhB,CAOA,qBAAAC,GAEC,OAAOpE,KAAKqC,mBAEb,CASA,qBAAAgC,CAAuBC,GAEtBtE,KAAKqC,oBAAsBiC,GAEA,IAAtBtE,KAAKE,cAETgE,QAAQC,KAAM,wEAIhB,CAOA,iBAAAI,GAEC,OAAOvE,KAAKsC,uBAAyBtC,KAAKoC,eAE3C,CAOA,iBAAAoC,CAAmBC,GAElBzE,KAAKsC,sBAAwBmC,CAE9B,CAOA,SAAAC,GAEC,OAAO1E,KAAKS,SAEb,CAOA,uBAAAkE,GAEC,GAAuB,OAAlB3E,KAAKyC,SAET,OAAOzC,KAAKyC,SAASmC,oBAIvB,CAOA,QAAAC,GAEC,OAAO7E,KAAK6C,QAEb,CAOA,YAAAiC,GAEC,OAAO9E,KAAKiD,aAEb,CAiBA,eAAA8B,CAAiBC,EAAOC,EAAQC,EAAaC,EAAYC,EAAYC,EAAaC,EAAYC,EAAa,CAAC,GAE3G,MAAMC,EAAW,IAAIlG,cAAe0F,EAAOC,GACrCQ,EAAe,IAAIvG,eACxBkG,EACAC,EACA,CACCK,OAAQ9G,WACR0F,KAAMzF,iBACN8G,aAAc,IAAI1G,aACjBmG,EACAC,EACAE,EAAWK,QAAU9G,mBAAqBC,qBAC1C+E,OACAA,OACAA,OACAA,OACAA,OACAA,EACAyB,EAAWK,QAAUlH,mBAAqBD,aAE3CoH,cAAeN,EAAWK,QAC1BE,oBAAoB,EACpBC,sBAAsB,IAGxBN,EAAaO,0BAA2B,EAExC,MAAMC,EAAW,IAAI1G,kBAAmB,CAAE2G,MAAO,SAAUC,KAAMxH,YACjEsH,EAASG,IAAMX,EAAaY,QAC5BJ,EAASG,IAAIE,OAAOC,EAAI,EACxBN,EAASG,IAAII,OAAOD,GAAM,EAC1B,MAAME,EAAQ,IAAIjH,KAAMgG,EAAUS,GAClCQ,EAAMC,SAASC,KAAMzB,GACrBuB,EAAMtB,WAAWwB,KAAMxB,GAEvB,MAAMyB,EAAQ,CACbtC,KAAM,OACNU,MAAOA,EACPC,OAAQA,EACRC,YAAaA,EACbC,WAAYA,EACZC,WAAYA,EACZC,YAAaA,EACboB,MAAOA,EACPR,SAAUA,EACVX,WAAYA,EACZG,aAAcA,GAIf,GAFAzF,KAAKe,QAAQ8F,KAAMD,GAEI,OAAlB5G,KAAKyC,SAAoB,CAE7BmE,EAAMH,MAAMR,SAAW,IAAI1G,kBAAmB,CAAE2G,MAAO,SAAUC,KAAMxH,YACvEiI,EAAMH,MAAMR,SAASa,SAAWtI,eAChCoI,EAAMH,MAAMR,SAASc,cAAgBzI,YACrCsI,EAAMH,MAAMR,SAASe,SAAWhI,WAChC4H,EAAMH,MAAMR,SAASgB,SAAWjI,WAEhC4H,EAAMM,QAAUlH,KAAKoB,eAAgBwF,GAErC,MAAMO,EAAWnH,KAAKyC,SAAS2E,YAAYC,OAC3CF,EAASG,QAASV,EAAMM,SACxBlH,KAAKyC,SAAS8E,kBAAmB,CAAEF,OAAQF,GAE5C,MAEC1B,EAAa+B,kBAAmB,EAIjC,OAAOf,CAER,CAkBA,mBAAAgB,CAAqBC,EAAQC,EAAcC,EAAa1C,EAAaC,EAAYC,EAAYC,EAAaC,EAAYC,EAAa,CAAC,GAEnI,MAAMC,EAAW,IAAIrG,iBAAkBuI,EAAQA,EAAQA,EAASC,EAAeC,EAAa,GAAI,IAAI,EAAMC,KAAKC,GAAKH,EAAe,EAAGA,GAChIlC,EAAe,IAAIvG,eACxBkG,EACAC,EACA,CACCK,OAAQ9G,WACR0F,KAAMzF,iBACN8G,aAAc,IAAI1G,aACjBmG,EACAC,EACAE,EAAWK,QAAU9G,mBAAqBC,qBAC1C+E,OACAA,OACAA,OACAA,OACAA,OACAA,EACAyB,EAAWK,QAAUlH,mBAAqBD,aAE3CoH,cAAeN,EAAWK,QAC1BE,oBAAoB,EACpBC,sBAAsB,IAGxBN,EAAaO,0BAA2B,EAExC,MAAMC,EAAW,IAAI1G,kBAAmB,CAAE2G,MAAO,SAAUC,KAAM5H,WACjE0H,EAASG,IAAMX,EAAaY,QAC5BJ,EAASG,IAAIE,OAAOC,EAAI,EACxBN,EAASG,IAAII,OAAOD,GAAM,EAC1B,MAAME,EAAQ,IAAIjH,KAAMgG,EAAUS,GAClCQ,EAAMC,SAASC,KAAMzB,GACrBuB,EAAMtB,WAAWwB,KAAMxB,GAEvB,MAAMyB,EAAQ,CACbtC,KAAM,WACNoD,OAAQA,EACRC,aAAcA,EACdC,YAAaA,EACb1C,YAAaA,EACbC,WAAYA,EACZC,WAAYA,EACZC,YAAaA,EACboB,MAAOA,EACPR,SAAUA,EACVX,WAAYA,EACZG,aAAcA,GAIf,GAFAzF,KAAKe,QAAQ8F,KAAMD,GAEI,OAAlB5G,KAAKyC,SAAoB,CAE7BmE,EAAMH,MAAMR,SAAW,IAAI1G,kBAAmB,CAAE2G,MAAO,SAAUC,KAAM5H,WACvEqI,EAAMH,MAAMR,SAASa,SAAWtI,eAChCoI,EAAMH,MAAMR,SAASc,cAAgBzI,YACrCsI,EAAMH,MAAMR,SAASe,SAAWhI,WAChC4H,EAAMH,MAAMR,SAASgB,SAAWjI,WAEhC4H,EAAMM,QAAUlH,KAAKoB,eAAgBwF,GAErC,MAAMO,EAAWnH,KAAKyC,SAAS2E,YAAYC,OAC3CF,EAASG,QAASV,EAAMM,SACxBlH,KAAKyC,SAAS8E,kBAAmB,CAAEF,OAAQF,GAE5C,MAEC1B,EAAa+B,kBAAmB,EAIjC,OAAOf,CAER,CAQA,YAAAsB,GAEC,MAAMC,EAAoB,IAAI7J,QACxB8J,EAAmB,IAAIjK,WACvB6B,EAAWG,KAAKI,UAEhB8H,EAAgBlI,KAAKE,aACrBiI,EAAuBtI,EAASuI,wBAChCC,EAA4BxI,EAASyI,mBAC3CtI,KAAKE,cAAe,EAEpB,MAAMqI,EAAe,IAAIrK,QACzB2B,EAAS2I,QAASD,GAClB,MAAME,EAAe5I,EAAS6I,MAE9B,IAAM,MAAM9B,KAAS5G,KAAKe,QAKzB,GAHA6F,EAAMnB,aAAa+B,iBAAqC,OAAlBxH,KAAKyC,SAC3CmE,EAAMnB,aAAakD,qBAAuB/B,EAAMnB,aAAa+B,iBAExDZ,EAAMnB,aAAa+B,kBAAoBxH,KAAKgB,gBAAkB,CAElE4F,EAAMM,QAAQ0B,UAAY,IAAIC,iBAAkBjC,EAAMH,MAAMqC,iBAAkBd,GAAqBpB,EAAMH,MAAMsC,mBAAoBd,IAEnI,MAAMe,EAAahJ,KAAK2C,WAAWsG,YAAarC,EAAMM,QAASlH,KAAK6C,UACpEhD,EAASqJ,QAAQC,0BAChBvC,EAAMnB,aACNuD,EAAWI,kBACXtF,GAEDjE,EAASwJ,gBAAiBzC,EAAMnB,aAAaT,MAAO4B,EAAMnB,aAAaR,QACvEpF,EAASyJ,sBAAuB1C,EAAMnB,cACtC5F,EAAS0J,gBAAiB,MAC1B1J,EAASyI,mBAAqB,KAE9BtI,KAAKmB,sBAAyBnB,KAAKmB,oBAAsB,IAAIqI,SAC7D,MAAMC,kBAAEA,EAAiBC,KAAEA,GAAS1J,KAAKmB,oBAAoBwI,IAAK/C,EAAMnB,eAAkB,CAAEgE,kBAAmB,KAAMC,KAAM,MACpHD,GAON5J,EAASyI,mBAAqBmB,EAC9B5J,EAAS6I,MAAQgB,IANjB7J,EAAS6I,MAAQ,IAAItJ,SAAU,IAAIC,cACnCW,KAAKmB,oBAAoByI,IAAKhD,EAAMnB,aAAc,CAAEgE,kBAAmB5J,EAASgK,wBAAyBH,KAAM7J,EAAS6I,SASzH9B,EAAMtB,aAENzF,EAASyI,mBAAqB,IAE/B,MAECzI,EAAS0J,gBAAiB3C,EAAMnB,cAChCmB,EAAMtB,aAMRzF,EAAS0J,gBAAiB,MAC1B1J,EAASyJ,sBAAuBnB,GAChCtI,EAASyI,mBAAqBD,EAC9BxI,EAASwJ,gBAAiBd,EAAauB,EAAGvB,EAAahC,GACvD1G,EAAS6I,MAAQD,EACjBzI,KAAKE,aAAegI,CAErB,CAQA,UAAA6B,GAEC,OAAO/J,KAAKyC,QAEb,CAWA,gBAAMuH,CAAYC,GAEjB,MAAMpK,EAAWG,KAAKI,UAChB8I,EAAUrJ,EAASqJ,QAEzBlJ,KAAKuB,IAAM1B,EAASqK,aACpB,MAAMC,EAAKnK,KAAKuB,IACVgE,EAAa4E,EAAGC,uBAItB,GAFApK,KAAKyC,SAAWwH,EAEC,OAAZA,EAAmB,CAEvB,IAAiC,IAA5Bf,EAAQmB,gBAA2B,MAAM,IAAIC,MAAO,yJAsBzD,GApBAL,EAAQM,iBAAkB,SAAUvK,KAAK4B,iBACzCqI,EAAQM,iBAAkB,cAAevK,KAAK4B,iBAC9CqI,EAAQM,iBAAkB,YAAavK,KAAK4B,iBAC5CqI,EAAQM,iBAAkB,UAAWvK,KAAK4B,iBAC1CqI,EAAQM,iBAAkB,eAAgBvK,KAAK4B,iBAC/CqI,EAAQM,iBAAkB,aAAcvK,KAAK4B,iBAC7CqI,EAAQM,iBAAkB,MAAOvK,KAAK8B,eACtCmI,EAAQM,iBAAkB,qBAAsBvK,KAAKgC,6BAE/CkH,EAAQsB,mBAEdxK,KAAK0B,mBAAqB7B,EAAS4K,gBACnC5K,EAAS2I,QAASxI,KAAK2B,cAEvB3B,KAAKwB,yBAA2B3B,EAAS6K,WAAWR,aACpDlK,KAAKyB,sBAAwB5B,EAAS6K,WAAWC,mBACjD9K,EAAS6K,WAAWE,OAIf5K,KAAKiB,mBAAqB,CAE9B,MAAM4J,EAAY,IAAI3J,eAAgB+I,EAASE,GAC/CnK,KAAK2C,WAAakI,CAEnB,CAIA,IAAyB,IAApB7K,KAAK8C,WAAsB,CAI/B,IAAIgI,EAAc,KACdC,EAAY,KACZC,EAAgB,KAEfnL,EAASoL,QAEbD,EAAgBnL,EAAS+F,QAAUuE,EAAGe,iBAAmBf,EAAGgB,kBAC5DL,EAAcjL,EAAS+F,QAAUlH,mBAAqBD,YACtDsM,EAAYlL,EAAS+F,QAAU9G,mBAAqBC,iBAIrD,MAAMqM,EAAsB,CAC3BC,YAAalB,EAAGmB,MAChBR,YAAaE,EACbO,YAAavL,KAAKuC,wBAClBiJ,eAAe,GAGXxL,KAAKgD,yBAA2BnD,EAAS4L,WAAY,oBAEzDL,EAAoBM,YAAc,gBAClC1L,KAAKiD,eAAgB,GAItB,MAAM0I,EAAc3L,KAAK2C,WAAWiJ,sBAAuBR,GACrDS,EAAc,CAAEF,GAEtB3L,KAAK4C,aAAe+I,EAEpB9L,EAASiM,cAAe,GACxBjM,EAASwJ,gBAAiBsC,EAAYI,aAAcJ,EAAYK,eAEhE,MAAMf,EAAQjL,KAAKiD,cAAgB,EAAI,EACjC0C,EAAe,IAAI1G,aAAc0M,EAAYI,aAAcJ,EAAYK,cAAejB,OAAWjH,OAAWA,OAAWA,OAAWA,OAAWA,OAAWA,EAAWgH,EAAaG,GAyBtL,GAvBAjL,KAAKc,gBAAkB,IAAI5B,eAC1ByM,EAAYI,aACZJ,EAAYK,cACZ,CACCtG,OAAQ9G,WACR0F,KAAMzF,iBACNoN,WAAYpM,EAASqM,iBACrBvG,aAAcA,EACdE,cAAehG,EAAS+F,QACxBuG,QAAS5G,EAAW6G,UAAY,EAAI,EACpCtG,oBAAwD,IAAlC6F,EAAYU,kBAClCtG,sBAA0D,IAAlC4F,EAAYU,kBACpCpB,MAAOjL,KAAKiD,cAAgB,EAAI,EAChCnD,UAAWE,KAAKiD,gBAGlBjD,KAAKc,gBAAgB6H,sBAAuB,EAC5C3I,KAAKc,gBAAgBmK,MAAQjL,KAAKiD,cAAgB,EAAI,EAEtDjD,KAAKgB,gBAAkBiJ,EAAQqC,gBAAgBC,SAAU,UAEzDvM,KAAKoC,sBAAwB6H,EAAQuC,sBAAuBxM,KAAKoE,yBAE5DpE,KAAKgB,gBAGT,IAAM,MAAM4F,KAAS5G,KAAKe,QAGzB6F,EAAMH,MAAMR,SAAW,IAAI1G,kBAAmB,CAAE2G,MAAO,SAAUC,KAAqB,aAAfS,EAAMtC,KAAsB/F,SAAWI,YAC9GiI,EAAMH,MAAMR,SAASa,SAAWtI,eAChCoI,EAAMH,MAAMR,SAASc,cAAgBzI,YACrCsI,EAAMH,MAAMR,SAASe,SAAWhI,WAChC4H,EAAMH,MAAMR,SAASgB,SAAWjI,WAEhC4H,EAAMM,QAAUlH,KAAKoB,eAAgBwF,GAErCiF,EAAYvE,QAASV,EAAMM,SAM7B+C,EAAQ1C,kBAAmB,CAAEF,OAAQwE,GAEtC,KAAO,CAIN,MAAMY,EAAY,CACjBL,UAAWvM,EAASsM,QAAU,EAC9BO,OAAO,EACPzB,MAAOpL,EAASoL,MAChBrF,QAAS/F,EAAS+F,QAClB+G,uBAAwB3M,KAAK+D,6BAGxB6I,EAAc,IAAIC,aAAc5C,EAASE,EAAIsC,GACnDzM,KAAK0C,aAAekK,EAEpB3C,EAAQ1C,kBAAmB,CAAEuF,UAAWF,IAExC/M,EAASiM,cAAe,GACxBjM,EAASwJ,gBAAiBuD,EAAYG,iBAAkBH,EAAYI,mBAEpEhN,KAAKc,gBAAkB,IAAI5B,eAC1B0N,EAAYG,iBACZH,EAAYI,kBACZ,CACCtH,OAAQ9G,WACR0F,KAAMzF,iBACNoN,WAAYpM,EAASqM,iBACrBrG,cAAehG,EAAS+F,QACxBE,oBAAwD,IAAlC8G,EAAYP,kBAClCtG,sBAA0D,IAAlC6G,EAAYP,oBAItCrM,KAAKc,gBAAgBmM,sBAAuB,EAC5CjN,KAAKoC,sBAAwB6H,EAAQuC,sBAAuBxM,KAAKoE,wBAElE,CAIApE,KAAK2D,aAAc3D,KAAK0D,gBAExB7D,EAAS6K,WAAWwC,iBAAkBlN,KAAKkC,mBAC3CrC,EAAS6K,WAAWyC,WAAYlD,GAChCpK,EAAS6K,WAAW0C,QAEpBpN,KAAKE,cAAe,EAEpBF,KAAKqN,cAAe,CAAE/I,KAAM,gBAE7B,CAED,CASA,YAAAgJ,CAAcC,GAEb,MAAMtD,EAAUjK,KAAKyC,SAErB,GAAiB,OAAZwH,EAAmB,OAExB,MAAMuD,EAAYD,EAAOE,KACnBC,EAAWH,EAAOI,IAElBC,EAAW5N,KAAKS,UAChBoN,EAAU7N,KAAKK,SACfyN,EAAU9N,KAAKO,SAErBqN,EAASH,KAAOK,EAAQL,KAAOI,EAAQJ,KAAOD,EAC9CI,EAASD,IAAMG,EAAQH,IAAME,EAAQF,IAAMD,EAC3CE,EAASG,kBAAoB/N,KAAKiD,cAE7BjD,KAAKU,oBAAsBkN,EAASH,MAAQzN,KAAKW,mBAAqBiN,EAASD,MAInF1D,EAAQ1C,kBAAmB,CAC1BiG,UAAWI,EAASH,KACpBC,SAAUE,EAASD,MAGpB3N,KAAKU,kBAAoBkN,EAASH,KAClCzN,KAAKW,iBAAmBiN,EAASD,KAKlCC,EAASvG,OAAO2G,KAA4B,EAArBT,EAAOlG,OAAO2G,KACrCH,EAAQxG,OAAO2G,KAA8B,EAAvBJ,EAASvG,OAAO2G,KACtCF,EAAQzG,OAAO2G,KAA8B,EAAvBJ,EAASvG,OAAO2G,KAGtC,MAAMC,EAASV,EAAOU,OAChBC,EAAUN,EAASM,QAEzBZ,aAAcM,EAAUK,GAExB,IAAM,IAAIE,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAEpCb,aAAcY,EAASC,GAAKF,GAML,IAAnBC,EAAQE,OAEZC,uBAAwBT,EAAUC,EAASC,GAM3CF,EAASU,iBAAiB3H,KAAMkH,EAAQS,kBAMzCC,iBAAkBhB,EAAQK,EAAUK,EAGrC,CASA,cAAA7K,CAAgBD,GAEf,IAAIqL,EAAaxO,KAAKY,aAAcuC,GASpC,YAPoBW,IAAf0K,IAEJA,EAAa,IAAInQ,gBACjB2B,KAAKY,aAAcuC,GAAUqL,GAIvBA,CAER,EAcD,SAASH,uBAAwBd,EAAQM,EAASC,GAEjDrO,YAAYgP,sBAAuBZ,EAAQa,aAC3ChP,YAAY+O,sBAAuBX,EAAQY,aAE3C,MAAMC,EAAMlP,YAAYmP,WAAYlP,aAE9BmP,EAAQhB,EAAQS,iBAAiBQ,SACjCC,EAAQjB,EAAQQ,iBAAiBQ,SAKjCrB,EAAOoB,EAAO,KAASA,EAAO,IAAO,GACrClB,EAAMkB,EAAO,KAASA,EAAO,IAAO,GACpCG,GAAWH,EAAO,GAAM,GAAMA,EAAO,GACrCI,GAAcJ,EAAO,GAAM,GAAMA,EAAO,GAExCK,GAAYL,EAAO,GAAM,GAAMA,EAAO,GACtCM,GAAaJ,EAAO,GAAM,GAAMA,EAAO,GACvCK,EAAO3B,EAAOyB,EACdG,EAAQ5B,EAAO0B,EAIfG,EAAUX,IAAUO,EAAUC,GAC9BI,EAAUD,GAAYJ,EAU5B,GAPArB,EAAQa,YAAYc,UAAWjC,EAAO7G,SAAU6G,EAAOpI,WAAYoI,EAAOkC,OAC1ElC,EAAOmC,WAAYH,GACnBhC,EAAOoC,WAAYL,GACnB/B,EAAOmB,YAAYkB,QAASrC,EAAO7G,SAAU6G,EAAOpI,WAAYoI,EAAOkC,OACvElC,EAAOsC,mBAAmBlJ,KAAM4G,EAAOmB,aAAcoB,UAG9B,IAAlBjB,EAAO,IAKXtB,EAAOe,iBAAiB3H,KAAMkH,EAAQS,kBACtCf,EAAOwC,wBAAwBpJ,KAAMkH,EAAQkC,6BAEvC,CAKN,MAAMC,EAAQvC,EAAO6B,EACfW,EAAOtC,EAAM2B,EACbY,EAAQd,EAAOG,EACfY,EAASd,GAAUV,EAAMY,GACzBa,EAAOpB,EAASrB,EAAMsC,EAAOD,EAC7BK,EAAUpB,EAAYtB,EAAMsC,EAAOD,EAEzCzC,EAAOe,iBAAiBgC,gBAAiBJ,EAAOC,EAAQC,EAAMC,EAASL,EAAOC,GAC9E1C,EAAOwC,wBAAwBpJ,KAAM4G,EAAOe,kBAAmBwB,QAEhE,CAED,CASA,SAASxC,aAAcC,EAAQU,GAEd,OAAXA,EAEJV,EAAOmB,YAAY/H,KAAM4G,EAAOgD,QAIhChD,EAAOmB,YAAY8B,iBAAkBvC,EAAOS,YAAanB,EAAOgD,QAIjEhD,EAAOsC,mBAAmBlJ,KAAM4G,EAAOmB,aAAcoB,QAEtD,CAUA,SAASvB,iBAAkBhB,EAAQK,EAAUK,GAE5B,OAAXA,EAEJV,EAAOgD,OAAO5J,KAAMiH,EAASc,cAI7BnB,EAAOgD,OAAO5J,KAAMsH,EAAOS,aAC3BnB,EAAOgD,OAAOT,SACdvC,EAAOgD,OAAOE,SAAU7C,EAASc,cAIlCnB,EAAOgD,OAAOf,UAAWjC,EAAO7G,SAAU6G,EAAOpI,WAAYoI,EAAOkC,OACpElC,EAAOmD,mBAAmB,GAE1BnD,EAAOe,iBAAiB3H,KAAMiH,EAASU,kBACvCf,EAAOwC,wBAAwBpJ,KAAMiH,EAASmC,yBAEzCxC,EAAOoD,sBAEXpD,EAAOqD,IAAgB,EAAV3S,QAAc4J,KAAKgJ,KAAM,EAAItD,EAAOe,iBAAiBQ,SAAU,IAC5EvB,EAAOuD,KAAO,EAIhB,CAEA,SAASjP,eAAgBkP,GAExB,MAAMC,EAAkBhR,KAAKa,wBAAwBoQ,QAASF,EAAMG,aAEpE,IAA2B,IAAtBF,EAEJ,OAID,MAAMxC,EAAaxO,KAAKY,aAAcoQ,GAEtC,QAAoBlN,IAAf0K,EAA2B,CAE/B,MAAM2C,EAAiBnR,KAAKuE,oBAE5BiK,EAAW4C,OAAQL,EAAMG,YAAaH,EAAMM,MAAOF,GACnD3C,EAAWnB,cAAe,CAAE/I,KAAMyM,EAAMzM,KAAMgN,KAAMP,EAAMG,aAE3D,CAED,CAEA,SAASnP,eAER,MAAMkI,EAAUjK,KAAKyC,SACf5C,EAAWG,KAAKI,UAEtB6J,EAAQsH,oBAAqB,SAAUvR,KAAK4B,iBAC5CqI,EAAQsH,oBAAqB,cAAevR,KAAK4B,iBACjDqI,EAAQsH,oBAAqB,YAAavR,KAAK4B,iBAC/CqI,EAAQsH,oBAAqB,UAAWvR,KAAK4B,iBAC7CqI,EAAQsH,oBAAqB,eAAgBvR,KAAK4B,iBAClDqI,EAAQsH,oBAAqB,aAAcvR,KAAK4B,iBAChDqI,EAAQsH,oBAAqB,MAAOvR,KAAK8B,eACzCmI,EAAQsH,oBAAqB,qBAAsBvR,KAAKgC,uBAExD,IAAM,IAAImM,EAAI,EAAGA,EAAInO,KAAKY,aAAawN,OAAQD,IAAO,CAErD,MAAM+C,EAAclR,KAAKa,wBAAyBsN,GAE7B,OAAhB+C,IAELlR,KAAKa,wBAAyBsN,GAAM,KAEpCnO,KAAKY,aAAcuN,GAAIqD,WAAYN,GAEpC,CAaA,GAXAlR,KAAKU,kBAAoB,KACzBV,KAAKW,iBAAmB,KAIxBd,EAAS4R,gBAETzR,KAAKyC,SAAW,KAChBzC,KAAKc,gBAAkB,MAGO,IAAzBd,KAAKgB,gBAET,IAAM,MAAM4F,KAAS5G,KAAKe,QAGzB6F,EAAMnB,aAAe,IAAIvG,eACxB0H,EAAMxB,WACNwB,EAAMvB,YACN,CACCK,OAAQ9G,WACR0F,KAAMzF,iBACN8G,aAAc,IAAI1G,aACjB2H,EAAMxB,WACNwB,EAAMvB,YACNuB,EAAMf,cAAgB/G,mBAAqBC,qBAC3C+E,OACAA,OACAA,OACAA,OACAA,OACAA,EACA8C,EAAMf,cAAgBnH,mBAAqBD,aAE5CoH,cAAee,EAAMf,cACrBC,oBAAoB,EACpBC,sBAAsB,IAGxBa,EAAMnB,aAAa+B,kBAAmB,EAEtCZ,EAAMH,MAAMR,SAAWW,EAAMX,SAC7BW,EAAMX,SAASG,IAAMQ,EAAMnB,aAAaY,QACxCO,EAAMX,SAASG,IAAIE,OAAOC,EAAI,EAC9BK,EAAMX,SAASG,IAAII,OAAOD,GAAM,SACzBK,EAAMM,QAQflH,KAAKE,cAAe,EACpBF,KAAKiD,eAAgB,EAErBpD,EAAS6K,WAAWE,OACpB/K,EAAS6K,WAAWwC,iBAAkBlN,KAAKyB,uBAC3C5B,EAAS6K,WAAWyC,WAAYnN,KAAKwB,0BACrC3B,EAAS6K,WAAW0C,QAEpBvN,EAASiM,cAAe9L,KAAK0B,oBAC7B7B,EAAS6R,QAAS1R,KAAK2B,aAAaqD,MAAOhF,KAAK2B,aAAasD,QAAQ,GAErEjF,KAAKqN,cAAe,CAAE/I,KAAM,cAE7B,CAEA,SAASrC,qBAAsB8O,GAE9B,MAAMY,EAAc3R,KAAKY,aACnBgR,EAAyB5R,KAAKa,wBAIpC,IAAM,IAAIsN,EAAI,EAAGA,EAAI4C,EAAMc,QAAQzD,OAAQD,IAAO,CAEjD,MAAM+C,EAAcH,EAAMc,QAAS1D,GAC7BhL,EAAQyO,EAAuBX,QAASC,GAEzC/N,GAAS,IAEbyO,EAAwBzO,GAAU,KAClCwO,EAAaxO,GAAQqO,WAAYN,GAInC,CAIA,IAAM,IAAI/C,EAAI,EAAGA,EAAI4C,EAAMe,MAAM1D,OAAQD,IAAO,CAE/C,MAAM+C,EAAcH,EAAMe,MAAO3D,GAEjC,IAAI6C,EAAkBY,EAAuBX,QAASC,GAEtD,IAA2B,IAAtBF,EAA0B,CAI9B,IAAM,IAAI7C,EAAI,EAAGA,EAAIwD,EAAYvD,OAAQD,IAAO,CAE/C,GAAKA,GAAKyD,EAAuBxD,OAAS,CAEzCwD,EAAuB/K,KAAMqK,GAC7BF,EAAkB7C,EAClB,KAED,CAAO,GAAqC,OAAhCyD,EAAwBzD,GAAe,CAElDyD,EAAwBzD,GAAM+C,EAC9BF,EAAkB7C,EAClB,KAED,CAED,CAIA,IAA2B,IAAtB6C,EAA0B,KAEhC,CAEA,MAAMxC,EAAamD,EAAaX,GAE3BxC,GAEJA,EAAWuD,QAASb,EAItB,CAED,CAGA,SAAS7P,cAAeuF,GAEvB,MAAoB,SAAfA,EAAMtC,KAEHtE,KAAK2C,WAAWoC,gBAAiB,CACvC6D,UAAW,IAAIC,iBAAkBjC,EAAM1B,YAAa0B,EAAMzB,YAC1DH,MAAO4B,EAAM5B,MAAQ,EACrBC,OAAQ2B,EAAM3B,OAAS,EACvBR,MAAOzE,KAAKoC,gBACZ4P,eAAgBpL,EAAMxB,WACtB6M,gBAAiBrL,EAAMvB,YACvBmG,eAAe,IAKTxL,KAAK2C,WAAW8E,oBAAqB,CAC3CmB,UAAW,IAAIC,iBAAkBjC,EAAM1B,YAAa0B,EAAMzB,YAC1DuC,OAAQd,EAAMc,OACdC,aAAcf,EAAMe,aACpBuK,YAAatL,EAAMsL,YACnBzN,MAAOzE,KAAKoC,gBACZ4P,eAAgBpL,EAAMxB,WACtB6M,gBAAiBrL,EAAMvB,YACvBmG,eAAe,GAKlB,CAIA,SAASrJ,iBAAkBgQ,EAAMd,GAEhC,QAAevN,IAAVuN,EAAsB,OAE3B,MAAMzD,EAAW5N,KAAKS,UAChBZ,EAAWG,KAAKI,UAChB8I,EAAUrJ,EAASqJ,QAEnB0D,EAAc5M,KAAK0C,aAEnByO,EAAiBnR,KAAKuE,oBACtB6N,EAAOf,EAAMgB,cAAelB,GAIlC,GAFAnR,KAAK6C,SAAWwO,EAEF,OAATe,EAAgB,CAEpB,MAAME,EAAQF,EAAKE,MAEQ,OAAtBtS,KAAK0C,cAETwG,EAAQqJ,YAAa3F,EAAY4F,aAIlC,IAAIC,GAAsB,EAIrBH,EAAMlE,SAAWR,EAASM,QAAQE,SAEtCR,EAASM,QAAQE,OAAS,EAC1BqE,GAAsB,GAIvB,IAAM,IAAItE,EAAI,EAAGA,EAAImE,EAAMlE,OAAQD,IAAO,CAEzC,MAAMuE,EAAOJ,EAAOnE,GAEpB,IAAI7N,EAEJ,IAAyB,IAApBN,KAAK8C,WAAsB,CAE/B,MAAMkG,EAAahJ,KAAK2C,WAAWgQ,gBAAiB3S,KAAK4C,aAAc8P,GACvEpS,EAAW0I,EAAW1I,SAGX,IAAN6N,GAEJjF,EAAQC,0BACPnJ,KAAKc,gBACLkI,EAAWI,aACTpJ,KAAK4C,aAAayJ,oBAAuBrM,KAAKiD,mBAAkBa,EAAYkF,EAAW4J,oBAK5F,MAECtS,EAAWsM,EAAYiG,YAAaH,GAIrC,IAAInF,EAASvN,KAAKQ,SAAU2N,QAEZrK,IAAXyJ,IAEJA,EAAS,IAAIxP,kBACbwP,EAAOlG,OAAOyL,OAAQ3E,GACtBZ,EAAOjN,SAAW,IAAIlC,QACtB4B,KAAKQ,SAAU2N,GAAMZ,GAItBA,EAAOgD,OAAOwC,UAAWL,EAAK9J,UAAU2H,QACxChD,EAAOgD,OAAOf,UAAWjC,EAAO7G,SAAU6G,EAAOpI,WAAYoI,EAAOkC,OACpElC,EAAOe,iBAAiByE,UAAWL,EAAKpE,kBACxCf,EAAOwC,wBAAwBpJ,KAAM4G,EAAOe,kBAAmBwB,SAC/DvC,EAAOjN,SAASsJ,IAAKtJ,EAASwJ,EAAGxJ,EAASiG,EAAGjG,EAAS0E,MAAO1E,EAAS2E,QAE3D,IAANkJ,IAEJP,EAAS2C,OAAO5J,KAAM4G,EAAOgD,QAC7B3C,EAAS2C,OAAOf,UAAW5B,EAASlH,SAAUkH,EAASzI,WAAYyI,EAAS6B,SAIhD,IAAxBgD,GAEJ7E,EAASM,QAAQrH,KAAM0G,EAIzB,CAEA1N,EAASyJ,sBAAuBtJ,KAAKc,gBAEtC,CAIA,IAAM,IAAIqN,EAAI,EAAGA,EAAInO,KAAKY,aAAawN,OAAQD,IAAO,CAErD,MAAM+C,EAAclR,KAAKa,wBAAyBsN,GAC5CK,EAAaxO,KAAKY,aAAcuN,GAEjB,OAAhB+C,QAAuCpN,IAAf0K,GAE5BA,EAAW4C,OAAQF,EAAaG,EAAOF,EAIzC,CAEKnR,KAAKyB,uBAAwBzB,KAAKyB,sBAAuB0Q,EAAMd,GAE/DA,EAAM2B,gBAEVhT,KAAKqN,cAAe,CAAE/I,KAAM,iBAAkBgN,KAAMD,IAIrDrR,KAAK6C,SAAW,IAEjB,gBAEelD","ignoreList":[]}