{"version":3,"file":"node_modules/three/src/renderers/common/nodes/NodeSampledTexture.js","names":["SampledTexture","NodeSampledTexture","constructor","name","textureNode","groupNode","access","super","value","this","update","texture","NodeSampledCubeTexture","isSampledCubeTexture","NodeSampledTexture3D","isSampledTexture3D"],"sources":["node_modules/three/src/renderers/common/nodes/NodeSampledTexture.js"],"sourcesContent":["import { SampledTexture } from '../SampledTexture.js';\n\n/**\n * A special form of sampled texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments SampledTexture\n */\nclass NodeSampledTexture extends SampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\t/**\n\t\t * The texture node.\n\t\t *\n\t\t * @type {TextureNode}\n\t\t */\n\t\tthis.textureNode = textureNode;\n\n\t\t/**\n\t\t * The uniform group node.\n\t\t *\n\t\t * @type {UniformGroupNode}\n\t\t */\n\t\tthis.groupNode = groupNode;\n\n\t\t/**\n\t\t * The access type.\n\t\t *\n\t\t * @type {?string}\n\t\t * @default null\n\t\t */\n\t\tthis.access = access;\n\n\t}\n\n\t/**\n\t * Updates the binding.\n\t *\n\t * @return {boolean} Whether the texture has been updated and must be\n\t * uploaded to the GPU.\n\t */\n\tupdate() {\n\n\t\tconst { textureNode } = this;\n\n\t\tif ( this.texture !== textureNode.value ) {\n\n\t\t\tthis.texture = textureNode.value;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn super.update();\n\n\t}\n\n}\n\n/**\n * A special form of sampled cube texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments NodeSampledTexture\n */\nclass NodeSampledCubeTexture extends NodeSampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled cube texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\n/**\n * A special form of sampled 3D texture binding type.\n * It's texture value is managed by a node object.\n *\n * @private\n * @augments NodeSampledTexture\n */\nclass NodeSampledTexture3D extends NodeSampledTexture {\n\n\t/**\n\t * Constructs a new node-based sampled 3D texture.\n\t *\n\t * @param {string} name - The textures's name.\n\t * @param {TextureNode} textureNode - The texture node.\n\t * @param {UniformGroupNode} groupNode - The uniform group node.\n\t * @param {?string} [access=null] - The access type.\n\t */\n\tconstructor( name, textureNode, groupNode, access = null ) {\n\n\t\tsuper( name, textureNode, groupNode, access );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSampledTexture3D = true;\n\n\t}\n\n}\n\nexport { NodeSampledTexture, NodeSampledCubeTexture, NodeSampledTexture3D };\n"],"mappings":"OAASA,mBAAsB,uBAS/B,MAAMC,2BAA2BD,eAUhC,WAAAE,CAAaC,EAAMC,EAAaC,EAAWC,EAAS,MAEnDC,MAAOJ,EAAMC,EAAcA,EAAYI,MAAQ,MAO/CC,KAAKL,YAAcA,EAOnBK,KAAKJ,UAAYA,EAQjBI,KAAKH,OAASA,CAEf,CAQA,MAAAI,GAEC,MAAMN,YAAEA,GAAgBK,KAExB,OAAKA,KAAKE,UAAYP,EAAYI,OAEjCC,KAAKE,QAAUP,EAAYI,OAEpB,GAIDD,MAAMG,QAEd,EAWD,MAAME,+BAA+BX,mBAUpC,WAAAC,CAAaC,EAAMC,EAAaC,EAAWC,EAAS,MAEnDC,MAAOJ,EAAMC,EAAaC,EAAWC,GASrCG,KAAKI,sBAAuB,CAE7B,EAWD,MAAMC,6BAA6Bb,mBAUlC,WAAAC,CAAaC,EAAMC,EAAaC,EAAWC,EAAS,MAEnDC,MAAOJ,EAAMC,EAAaC,EAAWC,GASrCG,KAAKM,oBAAqB,CAE3B,SAIQd,mBAAoBW,uBAAwBE","ignoreList":[]}