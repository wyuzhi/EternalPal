import GLSLNodeBuilder from"./nodes/GLSLNodeBuilder.js";import Backend from"../common/Backend.js";import{getCacheKey}from"../common/RenderContext.js";import WebGLAttributeUtils from"./utils/WebGLAttributeUtils.js";import WebGLState from"./utils/WebGLState.js";import WebGLUtils from"./utils/WebGLUtils.js";import WebGLTextureUtils from"./utils/WebGLTextureUtils.js";import WebGLExtensions from"./utils/WebGLExtensions.js";import WebGLCapabilities from"./utils/WebGLCapabilities.js";import{GLFeatureName}from"./utils/WebGLConstants.js";import{WebGLBufferRenderer}from"./WebGLBufferRenderer.js";import{warnOnce}from"../../utils.js";import{WebGLCoordinateSystem}from"../../constants.js";import WebGLTimestampQueryPool from"./utils/WebGLTimestampQueryPool.js";class WebGLBackend extends Backend{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,r={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},s=void 0!==t.context?t.context:e.domElement.getContext("webgl2",r);function i(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=i,e.domElement.addEventListener("webglcontextlost",i,!1),this.gl=s,this.extensions=new WebGLExtensions(this),this.capabilities=new WebGLCapabilities(this),this.attributeUtils=new WebGLAttributeUtils(this),this.textureUtils=new WebGLTextureUtils(this),this.bufferRenderer=new WebGLBufferRenderer(this),this.state=new WebGLState(this),this.utils=new WebGLUtils(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.extensions.get("OVR_multiview2"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return WebGLCoordinateSystem}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,r=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),null!==r){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!0===e._autoAllocateDepthBuffer&&!1===e.multiview&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e._autoAllocateDepthBuffer=!1}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new WebGLTimestampQueryPool(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t}=this,r=this.get(e);if(e.viewport)this.updateViewport(e);else{const{width:e,height:r}=this.getDrawingBufferSize();t.viewport(0,0,e,r)}if(e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}this.initTimestampQuery(e),r.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const s=e.occlusionQueryCount;s>0&&(r.currentOcclusionQueries=r.occlusionQueries,r.currentOcclusionQueryObjects=r.occlusionQueryObjects,r.lastOcclusionObject=null,r.occlusionQueries=new Array(s),r.occlusionQueryObjects=new Array(s),r.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext;r.resetVertexState();const n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const a=e.textures;if(null!==a)for(let e=0;e<a.length;e++){const t=a[e];t.generateMipmaps&&this.generateMipmaps(t)}this._currentContext=i;const o=e.renderTarget;if(null!==e.textures&&o){const s=this.get(o);if(o.samples>0&&!1===this._useMultisampledExtension(o)){const i=s.framebuffers[e.getCacheKey()];let n=t.COLOR_BUFFER_BIT;o.resolveDepthBuffer&&(o.depthBuffer&&(n|=t.DEPTH_BUFFER_BIT),o.stencilBuffer&&o.resolveStencilBuffer&&(n|=t.STENCIL_BUFFER_BIT));const a=s.msaaFrameBuffer,u=s.msaaRenderbuffers,l=e.textures,f=l.length>1;if(r.bindFramebuffer(t.READ_FRAMEBUFFER,a),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i),f)for(let e=0;e<l.length;e++)t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);for(let r=0;r<l.length;r++){if(f){const{textureGPU:e}=this.get(l[r]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,u[r]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}if(e.scissor){const{x:r,y:s,width:i,height:a}=e.scissorValue,o=e.height-a-s;t.blitFramebuffer(r,o,r+i,o+a,r,o,r+i,o+a,n,t.NEAREST)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST)}if(f)for(let e=0;e<l.length;e++){const{textureGPU:r}=this.get(l[e]);t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,u[e]),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,r,0)}!0===this._supportsInvalidateFramebuffer&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}else if(!1===o.resolveDepthBuffer&&s.framebuffers){const i=s.framebuffers[e.getCacheKey()];r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,s.depthInvalidationArray)}}if(null!==i)if(this._setFramebuffer(i),i.viewport)this.updateViewport(i);else{const{width:e,height:t}=this.getDrawingBufferSize();r.viewport(0,0,e,t)}this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let a=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(0===i.getQueryParameter(n,i.QUERY_RESULT)&&e.add(s[t]),r[t]=null,i.deleteQuery(n),a++))}a<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,r,s=null,i=!0){const{gl:n,renderer:a}=this;if(null===s){s={textures:null,clearColorValue:this.getClearColor()}}let o=0;if(e&&(o|=n.COLOR_BUFFER_BIT),t&&(o|=n.DEPTH_BUFFER_BIT),r&&(o|=n.STENCIL_BUFFER_BIT),0!==o){let u;u=s.clearColorValue?s.clearColorValue:this.getClearColor();const l=a.getClearDepth(),f=a.getClearStencil();if(t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(u.r,u.g,u.b,u.a),n.clear(o);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)0===e?n.clearBufferfv(n.COLOR,e,[u.r,u.g,u.b,u.a]):n.clearBufferfv(n.COLOR,e,[0,0,0,1]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,l,f):t?n.clearBufferfv(n.DEPTH,0,[l]):r&&n.clearBufferiv(n.STENCIL,0,[f])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s,i=null){const{state:n,gl:a}=this;!1===this.discard&&(a.enable(a.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:u,attributes:l}=this.get(s),f=this._getVaoKey(l),c=this.vaoCache[f];void 0===c?this.vaoCache[f]=this._createVao(l):n.setVertexState(c),n.useProgram(o),this._bindUniforms(r);const h=this._getTransformFeedback(u);a.bindTransformFeedback(a.TRANSFORM_FEEDBACK,h),a.beginTransformFeedback(a.POINTS),i=null!==i?i:t.count,Array.isArray(i)&&(warnOnce("WebGLBackend.compute(): The count parameter must be a single number, not an array."),i=i[0]),l[0].isStorageInstancedBufferAttribute?a.drawArraysInstanced(a.POINTS,0,1,i):a.drawArrays(a.POINTS,0,i),a.endTransformFeedback(),a.bindTransformFeedback(a.TRANSFORM_FEEDBACK,null);for(let e=0;e<u.length;e++){const t=u[e];t.pbo&&this.has(t.pbo)&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}_isRenderCameraDepthArray(e){return e.depthTexture&&e.depthTexture.isArrayTexture&&e.camera.isArrayCamera}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:a}=this.get(r),{gl:o,state:u}=this,l=this.get(i),f=e.getDrawParameters();if(null===f)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(a);const h=e.getAttributes(),d=this.get(h);let m=d.vaoGPU;if(void 0===m){const e=this._getVaoKey(h);m=this.vaoCache[e],void 0===m&&(m=this._createVao(h),this.vaoCache[e]=m,d.vaoGPU=m)}const E=e.getIndex(),b=null!==E?this.get(E).bufferGPU:null;u.setVertexState(m,b);const T=l.lastOcclusionObject;if(T!==t&&void 0!==T){if(null!==T&&!0===T.occlusionTest&&(o.endQuery(o.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=o.createQuery();o.beginQuery(o.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const g=this.bufferRenderer;t.isPoints?g.mode=o.POINTS:t.isLineSegments?g.mode=o.LINES:t.isLine?g.mode=o.LINE_STRIP:t.isLineLoop?g.mode=o.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),g.mode=o.LINES):g.mode=o.TRIANGLES;const{vertexCount:R,instanceCount:F}=f;let{firstVertex:_}=f;if(g.object=t,null!==E){_*=E.array.BYTES_PER_ELEMENT;const e=this.get(E);g.index=E.count,g.type=e.type}else g.index=0;const p=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?(warnOnce("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),g.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?g.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):warnOnce("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):F>1?g.renderInstances(_,R,F):g.render(_,R)};if(!0===e.camera.isArrayCamera&&e.camera.cameras.length>0&&!1===e.camera.isMultiViewCamera){const r=this.get(e.camera),s=e.camera.cameras,i=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,i=s.length;r<i;r++){const s=o.createBuffer();e[0]=r,o.bindBuffer(o.UNIFORM_BUFFER,s),o.bufferData(o.UNIFORM_BUFFER,e,o.STATIC_DRAW),t.push(s)}r.indexesGPU=t}const n=this.get(i),a=this.renderer.getPixelRatio(),l=this._currentContext.renderTarget,f=this._isRenderCameraDepthArray(this._currentContext),c=this._currentContext.activeCubeFace;if(f){const e=this.get(l.depthTexture);if(e.clearedRenderId!==this.renderer._nodes.nodeFrame.renderId){e.clearedRenderId=this.renderer._nodes.nodeFrame.renderId;const{stencilBuffer:t}=l;for(let e=0,r=s.length;e<r;e++)this.renderer._activeCubeFace=e,this._currentContext.activeCubeFace=e,this._setFramebuffer(this._currentContext),this.clear(!1,!0,t,this._currentContext,!1);this.renderer._activeCubeFace=c,this._currentContext.activeCubeFace=c}}for(let i=0,l=s.length;i<l;i++){const l=s[i];if(t.layers.test(l.layers)){f&&(this.renderer._activeCubeFace=i,this._currentContext.activeCubeFace=i,this._setFramebuffer(this._currentContext));const t=l.viewport;if(void 0!==t){const r=t.x*a,s=t.y*a,i=t.width*a,n=t.height*a;u.viewport(Math.floor(r),Math.floor(e.context.height-n-s),Math.floor(i),Math.floor(n))}u.bindBufferBase(o.UNIFORM_BUFFER,n.index,r.indexesGPU[i]),p()}this._currentContext.activeCubeFace=c,this.renderer._activeCubeFace=c}}else p()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new GLSLNodeBuilder(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,a=r.createProgram(),o=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(a,o),r.attachShader(a,u),r.linkProgram(a),this.set(s,{programGPU:a,fragmentShader:o,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(a,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=(e.getShaderInfoLog(t)||"").trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=(s.getProgramInfoLog(e)||"").trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),a=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+a)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:a,vertexShader:o}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,a,o),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,a=s.createProgram(),o=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,f=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];f.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(a,o),s.attachShader(a,u),s.transformFeedbackVaryings(a,f,s.SEPARATE_ATTRIBS),s.linkProgram(a),!1===s.getProgramParameter(a,s.LINK_STATUS)&&this._logProgramError(a,o,u),r.useProgram(a),this._setupBindings(t,a);const h=n.attributes,d=[],m=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;d.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);m.push(r)}this.set(e,{programGPU:a,transformBuffers:m,attributes:d})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(GLFeatureName).filter((t=>GLFeatureName[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this.textureUtils.copyTextureToTexture(e,t,r,s,i,n)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:a,depthBuffer:o,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget,f=!0===i.isRenderTarget3D,c=i.depth>1,h=!0===i.isXRRenderTarget,d=!0===h&&!0===i._hasExternalTextures;let m=n.msaaFrameBuffer,E=n.depthRenderbuffer;const b=this.extensions.get("WEBGL_multisampled_render_to_texture"),T=this.extensions.get("OVR_multiview2"),g=this._useMultisampledExtension(i),R=getCacheKey(e);let F;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),F=n.cubeFramebuffers[R]):h&&!1===d?F=this._xrFramebuffer:(n.framebuffers||(n.framebuffers={}),F=n.framebuffers[R]),void 0===F){F=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,F);const s=e.textures,o=[];if(l){n.cubeFramebuffers[R]=F;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[R]=F;for(let r=0;r<s.length;r++){const n=s[r],o=this.get(n);o.renderTarget=e.renderTarget,o.cacheKey=R;const u=t.COLOR_ATTACHMENT0+r;if(i.multiview)T.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,u,o.textureGPU,0,a,0,2);else if(f||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,u,o.textureGPU,0,e)}else g?b.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,u,t.TEXTURE_2D,o.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,u,t.TEXTURE_2D,o.textureGPU,0)}}const h=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i._autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,g),n.xrDepthRenderbuffer=r,o.push(u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT),t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,h,t.RENDERBUFFER,r)}else if(null!==e.depthTexture){o.push(u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT);const r=this.get(e.depthTexture);if(r.renderTarget=e.renderTarget,r.cacheKey=R,i.multiview)T.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,h,r.textureGPU,0,a,0,2);else if(d&&g)b.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,h,t.TEXTURE_2D,r.textureGPU,0,a);else if(e.depthTexture.isArrayTexture){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,h,r.textureGPU,0,e)}else t.framebufferTexture2D(t.FRAMEBUFFER,h,t.TEXTURE_2D,r.textureGPU,0)}n.depthInvalidationArray=o}else{if(this._isRenderCameraDepthArray(e)){r.bindFramebuffer(t.FRAMEBUFFER,F);const s=this.renderer._activeCubeFace,i=this.get(e.depthTexture),n=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.framebufferTextureLayer(t.FRAMEBUFFER,n,i.textureGPU,0,s)}if((h||g||i.multiview)&&!0!==i._isOpaqueFramebuffer){r.bindFramebuffer(t.FRAMEBUFFER,F);const s=this.get(e.textures[0]);i.multiview?T.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,s.textureGPU,0,a,0,2):g?b.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0);const o=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i._autoAllocateDepthBuffer){const e=n.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,o,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);i.multiview?T.framebufferTextureMultisampleMultiviewOVR(t.FRAMEBUFFER,o,r.textureGPU,0,a,0,2):g?b.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,o,t.TEXTURE_2D,r.textureGPU,0,a):t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,r.textureGPU,0)}}}if(a>0&&!1===g&&!i.multiview){if(void 0===m){const s=[];m=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,m);const i=[],l=e.textures;for(let r=0;r<l.length;r++){i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r);const n=e.textures[r],o=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,a,o.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(t.bindRenderbuffer(t.RENDERBUFFER,null),n.msaaFrameBuffer=m,n.msaaRenderbuffers=i,o&&void 0===E){E=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(E,e,a),n.depthRenderbuffer=E;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=F;r.drawBuffers(e,F)}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let r=0;r<e.length;r++){t+=":"+this.get(e[r]).id}return t}_createVao(e){const{gl:t}=this,r=t.createVertexArray();t.bindVertexArray(r);for(let r=0;r<e.length;r++){const s=e[r],i=this.get(s);let n,a;t.bindBuffer(t.ARRAY_BUFFER,i.bufferGPU),t.enableVertexAttribArray(r),!0===s.isInterleavedBufferAttribute?(n=s.data.stride*i.bytesPerElement,a=s.offset*i.bytesPerElement):(n=0,a=0),i.isInteger?t.vertexAttribIPointer(r,s.itemSize,i.type,n,a):t.vertexAttribPointer(r,s.itemSize,i.type,s.normalized,n,a),s.isInstancedBufferAttribute&&!s.isInterleavedBufferAttribute?t.vertexAttribDivisor(r,s.meshPerAttribute):s.isInterleavedBufferAttribute&&s.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(r,s.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),r}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}_useMultisampledExtension(e){return!0===e.multiview||e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e._autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}export default WebGLBackend;
//# sourceMappingURL=WebGLBackend.js.map