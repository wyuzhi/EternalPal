{"version":3,"file":"node_modules/three/src/renderers/webgl-fallback/utils/WebGLTextureUtils.js","names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","FloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","NeverCompare","AlwaysCompare","LessCompare","LessEqualCompare","EqualCompare","GreaterEqualCompare","GreaterCompare","NotEqualCompare","NoColorSpace","LinearTransfer","SRGBTransfer","ColorManagement","wrappingToGL","filterToGL","compareToGL","initialized","WebGLTextureUtils","constructor","backend","this","gl","extensions","defaultTextures","_init","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","getGLTextureType","texture","glTextureType","isCubeTexture","TEXTURE_CUBE_MAP","isArrayTexture","isDataArrayTexture","isCompressedArrayTexture","TEXTURE_2D_ARRAY","isData3DTexture","TEXTURE_3D","TEXTURE_2D","getInternalFormat","internalFormatName","glFormat","glType","colorSpace","forceLinearTransfer","undefined","console","warn","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","UNSIGNED_SHORT","R16","UNSIGNED_INT","R32UI","BYTE","R8I","SHORT","R16I","INT","R32I","RED_INTEGER","R8UI","R16UI","RG","RG32F","RG16F","RG8","RG16","RG32UI","RG8I","RG16I","RG32I","RG_INTEGER","RG8UI","RG16UI","RGB","transfer","getTransfer","RGB32F","RGB16F","RGB8","RGB16","RGB32UI","RGB8I","RGB16I","RGB32I","SRGB8","UNSIGNED_SHORT_5_6_5","RGB565","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","UNSIGNED_SHORT_4_4_4_4","RGB4","UNSIGNED_INT_5_9_9_9_REV","RGB9_E5","RGB_INTEGER","RGB8UI","RGB16UI","RGBA","RGBA32F","RGBA16F","RGBA8","RGBA16","RGBA32UI","RGBA8I","RGBA16I","RGBA32I","SRGB8_ALPHA8","RGBA4","RGBA_INTEGER","RGBA8UI","RGBA16UI","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH_STENCIL","UNSIGNED_INT_24_8","DEPTH24_STENCIL8","get","setTextureParameters","textureType","workingPrimaries","getPrimaries","workingColorSpace","texturePrimaries","unpackConversion","NONE","BROWSER_DEFAULT_WEBGL","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","UNPACK_COLORSPACE_CONVERSION_WEBGL","texParameteri","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","magFilter","hasMipmaps","mipmaps","length","minFilter","TEXTURE_MIN_FILTER","compareFunction","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","TEXTURE_COMPARE_FUNC","has","type","anisotropy","extension","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","Math","min","getMaxAnisotropy","createDefaultTexture","textureGPU","createTexture","state","bindTexture","set","isDefault","options","levels","width","height","depth","utils","convert","format","glInternalFormat","isVideoTexture","texStorage3D","texStorage2D","copyBufferToTexture","buffer","source","data","bindBuffer","PIXEL_UNPACK_BUFFER","texSubImage2D","unbindTexture","updateTexture","isRenderTargetTexture","isCompressedTexture","image","i","mipmap","compressedTexSubImage3D","texSubImage3D","compressedTexSubImage2D","images","getImage","TEXTURE_CUBE_MAP_POSITIVE_X","update","texImage2D","generateMipmaps","generateMipmap","deallocateRenderBuffers","renderTarget","renderContextData","renderBufferStorageSetup","framebuffers","cacheKey","deleteFramebuffer","depthRenderbuffer","deleteRenderbuffer","stencilRenderbuffer","msaaFrameBuffer","msaaRenderbuffers","destroyTexture","deleteTexture","delete","copyTextureToTexture","srcTexture","dstTexture","srcRegion","dstPosition","srcLevel","dstLevel","dstTextureGPU","minX","minY","minZ","dstX","dstY","dstZ","max","x","y","isBox3","z","levelScale","pow","floor","currentUnpackRowLen","getParameter","UNPACK_ROW_LENGTH","currentUnpackImageHeight","UNPACK_IMAGE_HEIGHT","currentUnpackSkipPixels","UNPACK_SKIP_PIXELS","currentUnpackSkipRows","UNPACK_SKIP_ROWS","currentUnpackSkipImages","UNPACK_SKIP_IMAGES","isDst3D","isDepthTexture","srcTextureData","dstTextureData","srcRenderContextData","dstRenderContextData","srcFramebuffer","dstFramebuffer","bindFramebuffer","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","mask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","blitFramebuffer","isDataTexture","copyFramebufferToTexture","renderContext","rectangle","w","requireDrawFrameBuffer","samples","srcHeight","getDrawingBufferSize","partial","attachment","DEPTH_ATTACHMENT","stencil","STENCIL_BUFFER_BIT","COLOR_ATTACHMENT0","renderTargetContextData","fb","getCacheKey","flippedY","copyTexSubImage2D","createFramebuffer","framebufferTexture2D","_setFramebuffer","setupRenderBufferStorage","renderbuffer","useMultisampledRTT","depthTexture","depthBuffer","stencilBuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","FRAMEBUFFER","DEPTH_STENCIL_ATTACHMENT","copyTextureToBuffer","faceIndex","target","typedArrayType","_getTypedArrayType","byteLength","_getBytesPerTexel","createBuffer","PIXEL_PACK_BUFFER","bufferData","STREAM_READ","readPixels","_clientWaitAsync","dstBuffer","BYTES_PER_ELEMENT","getBufferSubData","Uint8Array","Uint16Array","Uint32Array","Float32Array","Error","bytesPerComponent","ALPHA","HTMLImageElement","HTMLCanvasElement","ImageBitmap","OffscreenCanvas"],"sources":["node_modules/three/src/renderers/webgl-fallback/utils/WebGLTextureUtils.js"],"sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, FloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare, NoColorSpace, LinearTransfer, SRGBTransfer } from '../../../constants.js';\nimport { ColorManagement } from '../../../math/ColorManagement.js';\n\nlet initialized = false, wrappingToGL, filterToGL, compareToGL;\n\n/**\n * A WebGL 2 backend utility module for managing textures.\n *\n * @private\n */\nclass WebGLTextureUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGLBackend} backend - The WebGL 2 backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGL 2 backend.\n\t\t *\n\t\t * @type {WebGLBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A reference to the rendering context.\n\t\t *\n\t\t * @type {WebGL2RenderingContext}\n\t\t */\n\t\tthis.gl = backend.gl;\n\n\t\t/**\n\t\t * A reference to a backend module holding extension-related\n\t\t * utility functions.\n\t\t *\n\t\t * @type {WebGLExtensions}\n\t\t */\n\t\tthis.extensions = backend.extensions;\n\n\t\t/**\n\t\t * A dictionary for managing default textures. The key\n\t\t * is the binding point (target), the value the WEbGL texture object.\n\t\t *\n\t\t * @type {Object<GLenum,WebGLTexture>}\n\t\t */\n\t\tthis.defaultTextures = {};\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init();\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Inits the state of the utility.\n\t *\n\t * @private\n\t */\n\t_init() {\n\n\t\tconst gl = this.gl;\n\n\t\t// Store only WebGL constants here.\n\n\t\twrappingToGL = {\n\t\t\t[ RepeatWrapping ]: gl.REPEAT,\n\t\t\t[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,\n\t\t\t[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT\n\t\t};\n\n\t\tfilterToGL = {\n\t\t\t[ NearestFilter ]: gl.NEAREST,\n\t\t\t[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t\t[ LinearFilter ]: gl.LINEAR,\n\t\t\t[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tcompareToGL = {\n\t\t\t[ NeverCompare ]: gl.NEVER,\n\t\t\t[ AlwaysCompare ]: gl.ALWAYS,\n\t\t\t[ LessCompare ]: gl.LESS,\n\t\t\t[ LessEqualCompare ]: gl.LEQUAL,\n\t\t\t[ EqualCompare ]: gl.EQUAL,\n\t\t\t[ GreaterEqualCompare ]: gl.GEQUAL,\n\t\t\t[ GreaterCompare ]: gl.GREATER,\n\t\t\t[ NotEqualCompare ]: gl.NOTEQUAL\n\t\t};\n\n\t}\n\n\t/**\n\t * Returns the native texture type for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {GLenum} The native texture type.\n\t */\n\tgetGLTextureType( texture ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet glTextureType;\n\n\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_CUBE_MAP;\n\n\t\t} else if ( texture.isArrayTexture === true || texture.isDataArrayTexture === true || texture.isCompressedArrayTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_2D_ARRAY;\n\n\t\t} else if ( texture.isData3DTexture === true ) { // TODO: isCompressed3DTexture, wait for #26642\n\n\t\t\tglTextureType = gl.TEXTURE_3D;\n\n\t\t} else {\n\n\t\t\tglTextureType = gl.TEXTURE_2D;\n\n\n\t\t}\n\n\t\treturn glTextureType;\n\n\t}\n\n\t/**\n\t * Returns the native texture type for the given texture.\n\t *\n\t * @param {?string} internalFormatName - The internal format name. When `null`, the internal format is derived from the subsequent parameters.\n\t * @param {GLenum} glFormat - The WebGL format.\n\t * @param {GLenum} glType - The WebGL type.\n\t * @param {string} colorSpace - The texture's color space.\n\t * @param {boolean} [forceLinearTransfer=false] - Whether to force a linear transfer or not.\n\t * @return {GLenum} The internal format.\n\t */\n\tgetInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === gl.RED ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.R32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RG32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RG16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RG32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RG8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RG16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB ) {\n\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGB32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGB16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? gl.SRGB8 : gl.RGB8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) internalFormat = gl.RGB565;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGB4;\n\t\t\tif ( glType === gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = gl.RGB9_E5;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGB_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGB8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGB16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGB32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGB8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGB16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGB32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA ) {\n\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RGBA8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.RGBA16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.RGBA32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.RGBA8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.RGBA16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.RGBA32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_COMPONENT ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.DEPTH_COMPONENT16;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH_COMPONENT24;\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_STENCIL ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;\n\n\t\t}\n\n\t\tif ( internalFormat === gl.R16F || internalFormat === gl.R32F ||\n\t\t\tinternalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n\t\t\tinternalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t/**\n\t * Sets the texture parameters for the given texture.\n\t *\n\t * @param {GLenum} textureType - The texture type.\n\t * @param {Texture} texture - The texture.\n\t */\n\tsetTextureParameters( textureType, texture ) {\n\n\t\tconst { gl, extensions, backend } = this;\n\n\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? gl.NONE : gl.BROWSER_DEFAULT_WEBGL;\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t// WebGL 2 does not support wrapping for depth 2D array textures\n\t\t\tif ( ! texture.isArrayTexture ) {\n\n\t\t\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\n\n\t\tconst hasMipmaps = texture.mipmaps !== undefined && texture.mipmaps.length > 0;\n\n\t\t// follow WebGPU backend mapping for texture filtering\n\t\tconst minFilter = texture.minFilter === LinearFilter && hasMipmaps ? LinearMipmapLinearFilter : texture.minFilter;\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\tif ( texture.anisotropy > 1 ) {\n\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\t\t\tgl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, backend.getMaxAnisotropy() ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates a default texture for the given texture that can be used\n\t * as a placeholder until the actual texture is ready for usage.\n\t *\n\t * @param {Texture} texture - The texture to create a default texture for.\n\t */\n\tcreateDefaultTexture( texture ) {\n\n\t\tconst { gl, backend, defaultTextures } = this;\n\n\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tlet textureGPU = defaultTextures[ glTextureType ];\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = gl.createTexture();\n\n\t\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\t// gl.texImage2D( glTextureType, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\tdefaultTextures[ glTextureType ] = textureGPU;\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tisDefault: true\n\t\t} );\n\n\t}\n\n\t/**\n\t * Defines a texture on the GPU for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t * @return {undefined}\n\t */\n\tcreateTexture( texture, options ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { levels, width, height, depth } = options;\n\n\t\tconst glFormat = backend.utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = backend.utils.convert( texture.type );\n\t\tconst glInternalFormat = this.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\tconst textureGPU = gl.createTexture();\n\t\tconst glTextureType = this.getGLTextureType( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isArrayTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( ! texture.isVideoTexture ) {\n\n\t\t\tgl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );\n\n\t\t}\n\n\t\tbackend.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tglFormat,\n\t\t\tglType,\n\t\t\tglInternalFormat\n\t\t} );\n\n\t}\n\n\t/**\n\t * Uploads texture buffer data to the GPU memory.\n\t *\n\t * @param {WebGLBuffer} buffer - The buffer data.\n\t * @param {Texture} texture - The texture,\n\t */\n\tcopyBufferToTexture( buffer, texture ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\tconst { textureGPU, glTextureType, glFormat, glType } = backend.get( texture );\n\n\t\tconst { width, height } = texture.source.data;\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, buffer );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, false );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false );\n\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, 0 );\n\n\t\tgl.bindBuffer( gl.PIXEL_UNPACK_BUFFER, null );\n\n\t\tbackend.state.unbindTexture();\n\t\t// debug\n\t\t// const framebuffer = gl.createFramebuffer();\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, framebuffer );\n\t\t// gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, glTextureType, textureGPU, 0 );\n\n\t\t// const readout = new Float32Array( width * height * 4 );\n\n\t\t// const altFormat = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_FORMAT );\n\t\t// const altType = gl.getParameter( gl.IMPLEMENTATION_COLOR_READ_TYPE );\n\n\t\t// gl.readPixels( 0, 0, width, height, altFormat, altType, readout );\n\t\t// gl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\t\t// console.log( readout );\n\n\t}\n\n\t/**\n\t * Uploads the updated texture data to the GPU.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @param {Object} [options={}] - Optional configuration parameter.\n\t */\n\tupdateTexture( texture, options ) {\n\n\t\tconst { gl } = this;\n\t\tconst { width, height } = options;\n\t\tconst { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get( texture );\n\n\t\tif ( texture.isRenderTargetTexture || ( textureGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\tthis.backend.state.bindTexture( glTextureType, textureGPU );\n\n\t\tthis.setTextureParameters( glTextureType, texture );\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tconst mipmaps = texture.mipmaps;\n\t\t\tconst image = options.image;\n\n\t\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\n\t\t\t\t\tif ( texture.format !== gl.RGBA ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tgl.compressedTexSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tgl.compressedTexSubImage2D( gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'Unsupported compressed texture format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tconst images = options.images;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst image = getImage( images[ i ] );\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t} else if ( texture.isDataArrayTexture || texture.isArrayTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\ttexture.update();\n\n\t\t\tgl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );\n\n\n\t\t} else {\n\n\t\t\tconst image = getImage( options.image );\n\n\t\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Generates mipmaps for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tgenerateMipmaps( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, glTextureType } = backend.get( texture );\n\n\t\tbackend.state.bindTexture( glTextureType, textureGPU );\n\t\tgl.generateMipmap( glTextureType );\n\n\t}\n\n\t/**\n\t * Deallocates the render buffers of the given render target.\n\t *\n\t * @param {RenderTarget} renderTarget - The render target.\n\t */\n\tdeallocateRenderBuffers( renderTarget ) {\n\n\t\tconst { gl, backend } = this;\n\n\t\t// remove framebuffer reference\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderContextData = backend.get( renderTarget );\n\n\t\t\trenderContextData.renderBufferStorageSetup = undefined;\n\n\t\t\tif ( renderContextData.framebuffers ) {\n\n\t\t\t\tfor ( const cacheKey in renderContextData.framebuffers ) {\n\n\t\t\t\t\tgl.deleteFramebuffer( renderContextData.framebuffers[ cacheKey ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.framebuffers;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.depthRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.depthRenderbuffer );\n\t\t\t\tdelete renderContextData.depthRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.stencilRenderbuffer ) {\n\n\t\t\t\tgl.deleteRenderbuffer( renderContextData.stencilRenderbuffer );\n\t\t\t\tdelete renderContextData.stencilRenderbuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaFrameBuffer ) {\n\n\t\t\t\tgl.deleteFramebuffer( renderContextData.msaaFrameBuffer );\n\t\t\t\tdelete renderContextData.msaaFrameBuffer;\n\n\t\t\t}\n\n\t\t\tif ( renderContextData.msaaRenderbuffers ) {\n\n\t\t\t\tfor ( let i = 0; i < renderContextData.msaaRenderbuffers.length; i ++ ) {\n\n\t\t\t\t\tgl.deleteRenderbuffer( renderContextData.msaaRenderbuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tdelete renderContextData.msaaRenderbuffers;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Destroys the GPU data for the given texture object.\n\t *\n\t * @param {Texture} texture - The texture.\n\t */\n\tdestroyTexture( texture ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { textureGPU, renderTarget } = backend.get( texture );\n\n\t\tthis.deallocateRenderBuffers( renderTarget );\n\t\tgl.deleteTexture( textureGPU );\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\t/**\n\t * Copies data of the given source texture to the given destination texture.\n\t *\n\t * @param {Texture} srcTexture - The source texture.\n\t * @param {Texture} dstTexture - The destination texture.\n\t * @param {?(Box3|Box2)} [srcRegion=null] - The region of the source texture to copy.\n\t * @param {?(Vector2|Vector3)} [dstPosition=null] - The destination position of the copy.\n\t * @param {number} [srcLevel=0] - The source mip level to copy from.\n\t * @param {number} [dstLevel=0] - The destination mip level to copy to.\n\t */\n\tcopyTextureToTexture( srcTexture, dstTexture, srcRegion = null, dstPosition = null, srcLevel = 0, dstLevel = 0 ) {\n\n\t\tconst { gl, backend } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get( dstTexture );\n\n\t\tstate.bindTexture( glTextureType, dstTextureGPU );\n\n\t\t// gather the necessary dimensions to copy\n\t\tlet width, height, depth, minX, minY, minZ;\n\t\tlet dstX, dstY, dstZ;\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ dstLevel ] : srcTexture.image;\n\n\t\tif ( srcRegion !== null ) {\n\n\t\t\twidth = srcRegion.max.x - srcRegion.min.x;\n\t\t\theight = srcRegion.max.y - srcRegion.min.y;\n\t\t\tdepth = srcRegion.isBox3 ? srcRegion.max.z - srcRegion.min.z : 1;\n\t\t\tminX = srcRegion.min.x;\n\t\t\tminY = srcRegion.min.y;\n\t\t\tminZ = srcRegion.isBox3 ? srcRegion.min.z : 0;\n\n\t\t} else {\n\n\t\t\tconst levelScale = Math.pow( 2, - srcLevel );\n\t\t\twidth = Math.floor( image.width * levelScale );\n\t\t\theight = Math.floor( image.height * levelScale );\n\n\t\t\tif ( srcTexture.isDataArrayTexture || srcTexture.isArrayTexture ) {\n\n\t\t\t\tdepth = image.depth;\n\n\t\t\t} else if ( srcTexture.isData3DTexture ) {\n\n\t\t\t\tdepth = Math.floor( image.depth * levelScale );\n\n\t\t\t} else {\n\n\t\t\t\tdepth = 1;\n\n\t\t\t}\n\n\t\t\tminX = 0;\n\t\t\tminY = 0;\n\t\t\tminZ = 0;\n\n\t\t}\n\n\t\tif ( dstPosition !== null ) {\n\n\t\t\tdstX = dstPosition.x;\n\t\t\tdstY = dstPosition.y;\n\t\t\tdstZ = dstPosition.z;\n\n\t\t} else {\n\n\t\t\tdstX = 0;\n\t\t\tdstY = 0;\n\t\t\tdstZ = 0;\n\n\t\t}\n\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t// used for copying data from cpu\n\t\tconst currentUnpackRowLen = gl.getParameter( gl.UNPACK_ROW_LENGTH );\n\t\tconst currentUnpackImageHeight = gl.getParameter( gl.UNPACK_IMAGE_HEIGHT );\n\t\tconst currentUnpackSkipPixels = gl.getParameter( gl.UNPACK_SKIP_PIXELS );\n\t\tconst currentUnpackSkipRows = gl.getParameter( gl.UNPACK_SKIP_ROWS );\n\t\tconst currentUnpackSkipImages = gl.getParameter( gl.UNPACK_SKIP_IMAGES );\n\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, image.width );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, minX );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, minY );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_IMAGES, minZ );\n\n\t\t// set up the src texture\n\t\tconst isDst3D = dstTexture.isDataArrayTexture || dstTexture.isData3DTexture || dstTexture.isArrayTexture;\n\t\tif ( srcTexture.isRenderTargetTexture || srcTexture.isDepthTexture ) {\n\n\t\t\tconst srcTextureData = backend.get( srcTexture );\n\t\t\tconst dstTextureData = backend.get( dstTexture );\n\n\t\t\tconst srcRenderContextData = backend.get( srcTextureData.renderTarget );\n\t\t\tconst dstRenderContextData = backend.get( dstTextureData.renderTarget );\n\n\t\t\tconst srcFramebuffer = srcRenderContextData.framebuffers[ srcTextureData.cacheKey ];\n\t\t\tconst dstFramebuffer = dstRenderContextData.framebuffers[ dstTextureData.cacheKey ];\n\n\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, srcFramebuffer );\n\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, dstFramebuffer );\n\n\t\t\tlet mask = gl.COLOR_BUFFER_BIT;\n\n\t\t\tif ( srcTexture.isDepthTexture ) mask = gl.DEPTH_BUFFER_BIT;\n\n\t\t\tgl.blitFramebuffer( minX, minY, width, height, dstX, dstY, width, height, mask, gl.NEAREST );\n\n\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\n\n\t\t} else {\n\n\t\t\tif ( isDst3D ) {\n\n\t\t\t\t// copy data into the 3d texture\n\t\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t\t\tgl.texSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image.data );\n\n\t\t\t\t} else if ( dstTexture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tgl.compressedTexSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.texSubImage3D( glTextureType, dstLevel, dstX, dstY, dstZ, width, height, depth, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// copy data into the 2d texture\n\t\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t\tgl.texSubImage2D( glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image.data );\n\n\t\t\t\t} else if ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\tgl.compressedTexSubImage2D( glTextureType, dstLevel, dstX, dstY, image.width, image.height, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.texSubImage2D( glTextureType, dstLevel, dstX, dstY, width, height, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset values\n\t\tgl.pixelStorei( gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\n\t\tgl.pixelStorei( gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\n\t\tgl.pixelStorei( gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( dstLevel === 0 && dstTexture.generateMipmaps ) {\n\n\t\t\tgl.generateMipmap( glTextureType );\n\n\t\t}\n\n\t\tstate.unbindTexture();\n\n\t}\n\n\n\t/**\n\t * Copies the current bound framebuffer to the given texture.\n\t *\n\t * @param {Texture} texture - The destination texture.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {Vector4} rectangle - A four dimensional vector defining the origin and dimension of the copy.\n\t */\n\tcopyFramebufferToTexture( texture, renderContext, rectangle ) {\n\n\t\tconst { gl } = this;\n\t\tconst { state } = this.backend;\n\n\t\tconst { textureGPU } = this.backend.get( texture );\n\n\t\tconst { x, y, z: width, w: height } = rectangle;\n\n\t\tconst requireDrawFrameBuffer = texture.isDepthTexture === true || ( renderContext.renderTarget && renderContext.renderTarget.samples > 0 );\n\n\t\tconst srcHeight = renderContext.renderTarget ? renderContext.renderTarget.height : this.backend.getDrawingBufferSize().y;\n\n\t\tif ( requireDrawFrameBuffer ) {\n\n\t\t\tconst partial = ( x !== 0 || y !== 0 );\n\t\t\tlet mask;\n\t\t\tlet attachment;\n\n\t\t\tif ( texture.isDepthTexture === true ) {\n\n\t\t\t\tmask = gl.DEPTH_BUFFER_BIT;\n\t\t\t\tattachment = gl.DEPTH_ATTACHMENT;\n\n\t\t\t\tif ( renderContext.stencil ) {\n\n\t\t\t\t\tmask |= gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmask = gl.COLOR_BUFFER_BIT;\n\t\t\t\tattachment = gl.COLOR_ATTACHMENT0;\n\n\t\t\t}\n\n\t\t\tif ( partial ) {\n\n\t\t\t\tconst renderTargetContextData = this.backend.get( renderContext.renderTarget );\n\n\t\t\t\tconst fb = renderTargetContextData.framebuffers[ renderContext.getCacheKey() ];\n\t\t\t\tconst msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, msaaFrameBuffer );\n\n\t\t\t\tconst flippedY = srcHeight - y - height;\n\n\t\t\t\tgl.blitFramebuffer( x, flippedY, x + width, flippedY + height, x, flippedY, x + width, flippedY + height, mask, gl.NEAREST );\n\n\t\t\t\tstate.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\n\t\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, flippedY, width, height );\n\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t} else {\n\n\t\t\t\tconst fb = gl.createFramebuffer();\n\n\t\t\t\tstate.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\t\tgl.framebufferTexture2D( gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0 );\n\t\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST );\n\n\t\t\t\tgl.deleteFramebuffer( fb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, textureGPU );\n\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, x, srcHeight - height - y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps ) this.generateMipmaps( texture );\n\n\t\tthis.backend._setFramebuffer( renderContext );\n\n\t}\n\n\t/**\n\t * SetupS storage for internal depth/stencil buffers and bind to correct framebuffer.\n\t *\n\t * @param {WebGLRenderbuffer} renderbuffer - The render buffer.\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {number} samples - The MSAA sample count.\n\t * @param {boolean} [useMultisampledRTT=false] - Whether to use WEBGL_multisampled_render_to_texture or not.\n\t */\n\tsetupRenderBufferStorage( renderbuffer, renderContext, samples, useMultisampledRTT = false ) {\n\n\t\tconst { gl } = this;\n\t\tconst renderTarget = renderContext.renderTarget;\n\n\t\tconst { depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;\n\n\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( depthBuffer && ! stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = gl.DEPTH_COMPONENT24;\n\n\t\t\tif ( useMultisampledRTT === true ) {\n\n\t\t\t\tconst multisampledRTTExt = this.extensions.get( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( gl.RENDERBUFFER, renderTarget.samples, glInternalFormat, width, height );\n\n\t\t\t} else if ( samples > 0 ) {\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === gl.FLOAT ) {\n\n\t\t\t\t\t\tglInternalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, glInternalFormat, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, glInternalFormat, width, height );\n\n\t\t\t}\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( depthBuffer && stencilBuffer ) {\n\n\t\t\tif ( samples > 0 ) {\n\n\t\t\t\tgl.renderbufferStorageMultisample( gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height );\n\n\t\t\t} else {\n\n\t\t\t\tgl.renderbufferStorage( gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height );\n\n\t\t\t}\n\n\n\t\t\tgl.framebufferRenderbuffer( gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer );\n\n\t\t}\n\n\t\tgl.bindRenderbuffer( gl.RENDERBUFFER, null );\n\n\t}\n\n\t/**\n\t * Returns texture data as a typed array.\n\t *\n\t * @async\n\t * @param {Texture} texture - The texture to copy.\n\t * @param {number} x - The x coordinate of the copy origin.\n\t * @param {number} y - The y coordinate of the copy origin.\n\t * @param {number} width - The width of the copy.\n\t * @param {number} height - The height of the copy.\n\t * @param {number} faceIndex - The face index.\n\t * @return {Promise<TypedArray>} A Promise that resolves with a typed array when the copy operation has finished.\n\t */\n\tasync copyTextureToBuffer( texture, x, y, width, height, faceIndex ) {\n\n\t\tconst { backend, gl } = this;\n\n\t\tconst { textureGPU, glFormat, glType } = this.backend.get( texture );\n\n\t\tconst fb = gl.createFramebuffer();\n\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\n\t\tconst target = texture.isCubeTexture ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n\n\t\tgl.framebufferTexture2D( gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, target, textureGPU, 0 );\n\n\t\tconst typedArrayType = this._getTypedArrayType( glType );\n\t\tconst bytesPerTexel = this._getBytesPerTexel( glType, glFormat );\n\n\t\tconst elementCount = width * height;\n\t\tconst byteLength = elementCount * bytesPerTexel;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.bufferData( gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ );\n\t\tgl.readPixels( x, y, width, height, glFormat, glType, 0 );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new typedArrayType( byteLength / typedArrayType.BYTES_PER_ELEMENT );\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.getBufferSubData( gl.PIXEL_PACK_BUFFER, 0, dstBuffer );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tgl.deleteFramebuffer( fb );\n\n\t\treturn dstBuffer;\n\n\t}\n\n\t/**\n\t * Returns the corresponding typed array type for the given WebGL data type.\n\t *\n\t * @private\n\t * @param {GLenum} glType - The WebGL data type.\n\t * @return {TypedArray.constructor} The typed array type.\n\t */\n\t_getTypedArrayType( glType ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) return Uint8Array;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_INT ) return Uint32Array;\n\n\t\tif ( glType === gl.HALF_FLOAT ) return Uint16Array;\n\t\tif ( glType === gl.FLOAT ) return Float32Array;\n\n\t\tthrow new Error( `Unsupported WebGL type: ${glType}` );\n\n\t}\n\n\t/**\n\t * Returns the bytes-per-texel value for the given WebGL data type and texture format.\n\t *\n\t * @private\n\t * @param {GLenum} glType - The WebGL data type.\n\t * @param {GLenum} glFormat - The WebGL texture format.\n\t * @return {number} The bytes-per-texel.\n\t */\n\t_getBytesPerTexel( glType, glFormat ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet bytesPerComponent = 0;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) bytesPerComponent = 1;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_5_5_1 ||\n\t\t\tglType === gl.UNSIGNED_SHORT_5_6_5 ||\n\t\t\tglType === gl.UNSIGNED_SHORT ||\n\t\t\tglType === gl.HALF_FLOAT ) bytesPerComponent = 2;\n\n\t\tif ( glType === gl.UNSIGNED_INT ||\n\t\t\tglType === gl.FLOAT ) bytesPerComponent = 4;\n\n\t\tif ( glFormat === gl.RGBA ) return bytesPerComponent * 4;\n\t\tif ( glFormat === gl.RGB ) return bytesPerComponent * 3;\n\t\tif ( glFormat === gl.ALPHA ) return bytesPerComponent;\n\n\t}\n\n}\n\nfunction getImage( source ) {\n\n\tif ( source.isDataTexture ) {\n\n\t\treturn source.image.data;\n\n\t} else if ( ( typeof HTMLImageElement !== 'undefined' && source instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && source instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && source instanceof OffscreenCanvas ) ) {\n\n\t\treturn source;\n\n\t}\n\n\treturn source.data;\n\n}\n\nexport default WebGLTextureUtils;\n"],"mappings":"OAASA,aAAcC,yBAA0BC,0BAA2BC,cAAeC,0BAA2BC,2BAA4BC,UAAWC,uBAAwBC,oBAAqBC,eAAgBC,aAAcC,cAAeC,YAAaC,iBAAkBC,aAAcC,oBAAqBC,eAAgBC,gBAAiBC,aAAcC,eAAgBC,iBAAoB,+BACnYC,oBAAuB,mCAEhC,IAAyBC,aAAcC,WAAYC,YAA/CC,aAAc,EAOlB,MAAMC,kBAOL,WAAAC,CAAaC,GAOZC,KAAKD,QAAUA,EAOfC,KAAKC,GAAKF,EAAQE,GAQlBD,KAAKE,WAAaH,EAAQG,WAQ1BF,KAAKG,gBAAkB,CAAC,GAEH,IAAhBP,cAEJI,KAAKI,QAELR,aAAc,EAIhB,CAOA,KAAAQ,GAEC,MAAMH,EAAKD,KAAKC,GAIhBR,aAAe,CACdb,CAAEA,gBAAkBqB,EAAGI,OACvB1B,CAAEA,qBAAuBsB,EAAGK,cAC5B5B,CAAEA,wBAA0BuB,EAAGM,iBAGhCb,WAAa,CACZpB,CAAEA,eAAiB2B,EAAGO,QACtBhC,CAAEA,4BAA8ByB,EAAGQ,uBACnClC,CAAEA,2BAA6B0B,EAAGS,sBAElCvC,CAAEA,cAAgB8B,EAAGU,OACrBtC,CAAEA,2BAA6B4B,EAAGW,sBAClCxC,CAAEA,0BAA4B6B,EAAGY,sBAGlClB,YAAc,CACbd,CAAEA,cAAgBoB,EAAGa,MACrBhC,CAAEA,eAAiBmB,EAAGc,OACtBhC,CAAEA,aAAekB,EAAGe,KACpBhC,CAAEA,kBAAoBiB,EAAGgB,OACzBhC,CAAEA,cAAgBgB,EAAGiB,MACrBhC,CAAEA,qBAAuBe,EAAGkB,OAC5BhC,CAAEA,gBAAkBc,EAAGmB,QACvBhC,CAAEA,iBAAmBa,EAAGoB,SAG1B,CAQA,gBAAAC,CAAkBC,GAEjB,MAAMtB,GAAEA,GAAOD,KAEf,IAAIwB,EAqBJ,OAjBCA,GAF8B,IAA1BD,EAAQE,cAEIxB,EAAGyB,kBAEmB,IAA3BH,EAAQI,iBAA0D,IAA/BJ,EAAQK,qBAAoE,IAArCL,EAAQM,yBAE7E5B,EAAG6B,kBAEoB,IAA5BP,EAAQQ,gBAEH9B,EAAG+B,WAIH/B,EAAGgC,WAKbT,CAER,CAYA,iBAAAU,CAAmBC,EAAoBC,EAAUC,EAAQC,EAAYC,GAAsB,GAE1F,MAAMtC,GAAEA,EAAEC,WAAEA,GAAeF,KAE3B,GAA4B,OAAvBmC,EAA8B,CAElC,QAAkCK,IAA7BvC,EAAIkC,GAAqC,OAAOlC,EAAIkC,GAEzDM,QAAQC,KAAM,2EAA8EP,EAAqB,IAElH,CAEA,IAAIQ,EAAiBP,EAkDrB,GAhDKA,IAAanC,EAAG2C,MAEfP,IAAWpC,EAAG4C,QAAQF,EAAiB1C,EAAG6C,MAC1CT,IAAWpC,EAAG8C,aAAaJ,EAAiB1C,EAAG+C,MAC/CX,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGiD,IAClDb,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGmD,KACnDf,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGqD,OACjDjB,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGuD,KACzCnB,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGyD,MAC1CrB,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAG2D,OAIzCxB,IAAanC,EAAG4D,cAEfxB,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAG6D,MAClDzB,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAG8D,OACnD1B,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGqD,OACjDjB,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGuD,KACzCnB,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGyD,MAC1CrB,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAG2D,OAIzCxB,IAAanC,EAAG+D,KAEf3B,IAAWpC,EAAG4C,QAAQF,EAAiB1C,EAAGgE,OAC1C5B,IAAWpC,EAAG8C,aAAaJ,EAAiB1C,EAAGiE,OAC/C7B,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGkE,KAClD9B,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGmE,MACnD/B,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGoE,QACjDhC,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGqE,MACzCjC,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGsE,OAC1ClC,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAGuE,QAIzCpC,IAAanC,EAAGwE,aAEfpC,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGyE,OAClDrC,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAG0E,QACnDtC,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGoE,QACjDhC,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGqE,MACzCjC,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGsE,OAC1ClC,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAGuE,QAIzCpC,IAAanC,EAAG2E,IAAM,CAE1B,MAAMC,EAAWtC,EAAsBjD,eAAiBE,gBAAgBsF,YAAaxC,GAEhFD,IAAWpC,EAAG4C,QAAQF,EAAiB1C,EAAG8E,QAC1C1C,IAAWpC,EAAG8C,aAAaJ,EAAiB1C,EAAG+E,QAC/C3C,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGgF,MAClD5C,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGiF,OACnD7C,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGkF,SACjD9C,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGmF,OACzC/C,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGoF,QAC1ChD,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAGqF,QACxCjD,IAAWpC,EAAGgD,gBAAgBN,EAAmBkC,IAAatF,aAAiBU,EAAGsF,MAAQtF,EAAGgF,MAC7F5C,IAAWpC,EAAGuF,uBAAuB7C,EAAiB1C,EAAGwF,QACzDpD,IAAWpC,EAAGyF,yBAAyB/C,EAAiB1C,EAAG0F,SAC3DtD,IAAWpC,EAAG2F,yBAAyBjD,EAAiB1C,EAAG4F,MAC3DxD,IAAWpC,EAAG6F,2BAA2BnD,EAAiB1C,EAAG8F,QAEnE,CAaA,GAXK3D,IAAanC,EAAG+F,cAEf3D,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGgG,QAClD5D,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGiG,SACnD7D,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGkF,SACjD9C,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGmF,OACzC/C,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGoF,QAC1ChD,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAGqF,SAIzClD,IAAanC,EAAGkG,KAAO,CAE3B,MAAMtB,EAAWtC,EAAsBjD,eAAiBE,gBAAgBsF,YAAaxC,GAEhFD,IAAWpC,EAAG4C,QAAQF,EAAiB1C,EAAGmG,SAC1C/D,IAAWpC,EAAG8C,aAAaJ,EAAiB1C,EAAGoG,SAC/ChE,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAGqG,OAClDjE,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGsG,QACnDlE,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGuG,UACjDnE,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGwG,QACzCpE,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGyG,SAC1CrE,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAG0G,SACxCtE,IAAWpC,EAAGgD,gBAAgBN,EAAmBkC,IAAatF,aAAiBU,EAAG2G,aAAe3G,EAAGqG,OACpGjE,IAAWpC,EAAG2F,yBAAyBjD,EAAiB1C,EAAG4G,OAC3DxE,IAAWpC,EAAGyF,yBAAyB/C,EAAiB1C,EAAG0F,QAEjE,CAmCA,OAjCKvD,IAAanC,EAAG6G,eAEfzE,IAAWpC,EAAGgD,gBAAgBN,EAAiB1C,EAAG8G,SAClD1E,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAG+G,UACnD3E,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGuG,UACjDnE,IAAWpC,EAAGsD,OAAOZ,EAAiB1C,EAAGwG,QACzCpE,IAAWpC,EAAGwD,QAAQd,EAAiB1C,EAAGyG,SAC1CrE,IAAWpC,EAAG0D,MAAMhB,EAAiB1C,EAAG0G,UAIzCvE,IAAanC,EAAGgH,kBAEf5E,IAAWpC,EAAGkD,iBAAiBR,EAAiB1C,EAAGiH,mBACnD7E,IAAWpC,EAAGoD,eAAeV,EAAiB1C,EAAGkH,mBACjD9E,IAAWpC,EAAG4C,QAAQF,EAAiB1C,EAAGmH,qBAI3ChF,IAAanC,EAAGoH,eAEfhF,IAAWpC,EAAGqH,oBAAoB3E,EAAiB1C,EAAGsH,kBAIvD5E,IAAmB1C,EAAG+C,MAAQL,IAAmB1C,EAAG6C,MACxDH,IAAmB1C,EAAGiE,OAASvB,IAAmB1C,EAAGgE,OACrDtB,IAAmB1C,EAAGoG,SAAW1D,IAAmB1C,EAAGmG,SAEvDlG,EAAWsH,IAAK,0BAIV7E,CAER,CAQA,oBAAA8E,CAAsBC,EAAanG,GAElC,MAAMtB,GAAEA,EAAEC,WAAEA,EAAUH,QAAEA,GAAYC,KAE9B2H,EAAmBnI,gBAAgBoI,aAAcpI,gBAAgBqI,mBACjEC,EAAmBvG,EAAQe,aAAejD,aAAe,KAAOG,gBAAgBoI,aAAcrG,EAAQe,YACtGyF,EAAmBxG,EAAQe,aAAejD,cAAgBsI,IAAqBG,EAAmB7H,EAAG+H,KAAO/H,EAAGgI,sBAErHhI,EAAGiI,YAAajI,EAAGkI,oBAAqB5G,EAAQ6G,OAChDnI,EAAGiI,YAAajI,EAAGoI,+BAAgC9G,EAAQ+G,kBAC3DrI,EAAGiI,YAAajI,EAAGsI,iBAAkBhH,EAAQiH,iBAC7CvI,EAAGiI,YAAajI,EAAGwI,mCAAoCV,GAEvD9H,EAAGyI,cAAehB,EAAazH,EAAG0I,eAAgBlJ,aAAc8B,EAAQqH,QACxE3I,EAAGyI,cAAehB,EAAazH,EAAG4I,eAAgBpJ,aAAc8B,EAAQuH,QAEnEpB,IAAgBzH,EAAG+B,YAAc0F,IAAgBzH,EAAG6B,kBAGjDP,EAAQI,gBAEd1B,EAAGyI,cAAehB,EAAazH,EAAG8I,eAAgBtJ,aAAc8B,EAAQyH,QAM1E/I,EAAGyI,cAAehB,EAAazH,EAAGgJ,mBAAoBvJ,WAAY6B,EAAQ2H,YAG1E,MAAMC,OAAiC3G,IAApBjB,EAAQ6H,SAAyB7H,EAAQ6H,QAAQC,OAAS,EAGvEC,EAAY/H,EAAQ+H,YAAcnL,cAAgBgL,EAAa/K,yBAA2BmD,EAAQ+H,UAWxG,GATArJ,EAAGyI,cAAehB,EAAazH,EAAGsJ,mBAAoB7J,WAAY4J,IAE7D/H,EAAQiI,kBAEZvJ,EAAGyI,cAAehB,EAAazH,EAAGwJ,qBAAsBxJ,EAAGyJ,wBAC3DzJ,EAAGyI,cAAehB,EAAazH,EAAG0J,qBAAsBhK,YAAa4B,EAAQiI,oBAIlB,IAAvDtJ,EAAW0J,IAAK,kCAA8C,CAElE,GAAKrI,EAAQ2H,YAAc5K,cAAgB,OAC3C,GAAKiD,EAAQ+H,YAAc/K,2BAA6BgD,EAAQ+H,YAAclL,yBAA2B,OACzG,GAAKmD,EAAQsI,OAASpL,YAA8D,IAAjDyB,EAAW0J,IAAK,4BAAyC,OAE5F,GAAKrI,EAAQuI,WAAa,EAAI,CAE7B,MAAMC,EAAY7J,EAAWsH,IAAK,kCAClCvH,EAAG+J,cAAetC,EAAaqC,EAAUE,2BAA4BC,KAAKC,IAAK5I,EAAQuI,WAAY/J,EAAQqK,oBAE5G,CAED,CAED,CAQA,oBAAAC,CAAsB9I,GAErB,MAAMtB,GAAEA,EAAEF,QAAEA,EAAOI,gBAAEA,GAAoBH,KAGnCwB,EAAgBxB,KAAKsB,iBAAkBC,GAE7C,IAAI+I,EAAanK,EAAiBqB,QAEdgB,IAAf8H,IAEJA,EAAarK,EAAGsK,gBAEhBxK,EAAQyK,MAAMC,YAAajJ,EAAe8I,GAC1CrK,EAAGyI,cAAelH,EAAevB,EAAGsJ,mBAAoBtJ,EAAGO,SAC3DP,EAAGyI,cAAelH,EAAevB,EAAGgJ,mBAAoBhJ,EAAGO,SAI3DL,EAAiBqB,GAAkB8I,GAIpCvK,EAAQ2K,IAAKnJ,EAAS,CACrB+I,aACA9I,gBACAmJ,WAAW,GAGb,CASA,aAAAJ,CAAehJ,EAASqJ,GAEvB,MAAM3K,GAAEA,EAAEF,QAAEA,GAAYC,MAClB6K,OAAEA,EAAMC,MAAEA,EAAKC,OAAEA,EAAMC,MAAEA,GAAUJ,EAEnCxI,EAAWrC,EAAQkL,MAAMC,QAAS3J,EAAQ4J,OAAQ5J,EAAQe,YAC1DD,EAAStC,EAAQkL,MAAMC,QAAS3J,EAAQsI,MACxCuB,EAAmBpL,KAAKkC,kBAAmBX,EAAQoB,eAAgBP,EAAUC,EAAQd,EAAQe,WAAYf,EAAQ8J,gBAEjHf,EAAarK,EAAGsK,gBAChB/I,EAAgBxB,KAAKsB,iBAAkBC,GAE7CxB,EAAQyK,MAAMC,YAAajJ,EAAe8I,GAE1CtK,KAAKyH,qBAAsBjG,EAAeD,GAErCA,EAAQI,gBAAkBJ,EAAQK,oBAAsBL,EAAQM,yBAEpE5B,EAAGqL,aAAcrL,EAAG6B,iBAAkB+I,EAAQO,EAAkBN,EAAOC,EAAQC,GAEpEzJ,EAAQQ,gBAEnB9B,EAAGqL,aAAcrL,EAAG+B,WAAY6I,EAAQO,EAAkBN,EAAOC,EAAQC,GAE5DzJ,EAAQ8J,gBAErBpL,EAAGsL,aAAc/J,EAAeqJ,EAAQO,EAAkBN,EAAOC,GAIlEhL,EAAQ2K,IAAKnJ,EAAS,CACrB+I,aACA9I,gBACAY,WACAC,SACA+I,oBAGF,CAQA,mBAAAI,CAAqBC,EAAQlK,GAE5B,MAAMtB,GAAEA,EAAEF,QAAEA,GAAYC,MAElBsK,WAAEA,EAAU9I,cAAEA,EAAaY,SAAEA,EAAQC,OAAEA,GAAWtC,EAAQyH,IAAKjG,IAE/DuJ,MAAEA,EAAKC,OAAEA,GAAWxJ,EAAQmK,OAAOC,KAEzC1L,EAAG2L,WAAY3L,EAAG4L,oBAAqBJ,GAEvC1L,EAAQyK,MAAMC,YAAajJ,EAAe8I,GAE1CrK,EAAGiI,YAAajI,EAAGkI,qBAAqB,GACxClI,EAAGiI,YAAajI,EAAGoI,gCAAgC,GACnDpI,EAAG6L,cAAetK,EAAe,EAAG,EAAG,EAAGsJ,EAAOC,EAAQ3I,EAAUC,EAAQ,GAE3EpC,EAAG2L,WAAY3L,EAAG4L,oBAAqB,MAEvC9L,EAAQyK,MAAMuB,eAef,CAQA,aAAAC,CAAezK,EAASqJ,GAEvB,MAAM3K,GAAEA,GAAOD,MACT8K,MAAEA,EAAKC,OAAEA,GAAWH,GACpBN,WAAEA,EAAU9I,cAAEA,EAAaY,SAAEA,EAAQC,OAAEA,EAAM+I,iBAAEA,GAAqBpL,KAAKD,QAAQyH,IAAKjG,GAE5F,IAAKA,EAAQ0K,4BAA0CzJ,IAAf8H,EAOxC,GAJAtK,KAAKD,QAAQyK,MAAMC,YAAajJ,EAAe8I,GAE/CtK,KAAKyH,qBAAsBjG,EAAeD,GAErCA,EAAQ2K,oBAAsB,CAElC,MAAM9C,EAAU7H,EAAQ6H,QAClB+C,EAAQvB,EAAQuB,MAEtB,IAAM,IAAIC,EAAI,EAAGA,EAAIhD,EAAQC,OAAQ+C,IAAO,CAE3C,MAAMC,EAASjD,EAASgD,GAEnB7K,EAAQM,yBAGPN,EAAQ4J,SAAWlL,EAAGkG,KAER,OAAb/D,EAEJnC,EAAGqM,wBAAyBrM,EAAG6B,iBAAkBsK,EAAG,EAAG,EAAG,EAAGC,EAAOvB,MAAOuB,EAAOtB,OAAQoB,EAAMnB,MAAO5I,EAAUiK,EAAOV,MAIxHlJ,QAAQC,KAAM,kGAMfzC,EAAGsM,cAAetM,EAAG6B,iBAAkBsK,EAAG,EAAG,EAAG,EAAGC,EAAOvB,MAAOuB,EAAOtB,OAAQoB,EAAMnB,MAAO5I,EAAUC,EAAQgK,EAAOV,MAMrG,OAAbvJ,EAEJnC,EAAGuM,wBAAyBvM,EAAGgC,WAAYmK,EAAG,EAAG,EAAGC,EAAOvB,MAAOuB,EAAOtB,OAAQ3I,EAAUiK,EAAOV,MAIlGlJ,QAAQC,KAAM,wCAMjB,CAGD,MAAO,GAAKnB,EAAQE,cAAgB,CAEnC,MAAMgL,EAAS7B,EAAQ6B,OAEvB,IAAM,IAAIL,EAAI,EAAGA,EAAI,EAAGA,IAAO,CAE9B,MAAMD,EAAQO,SAAUD,EAAQL,IAEhCnM,EAAG6L,cAAe7L,EAAG0M,4BAA8BP,EAAG,EAAG,EAAG,EAAGtB,EAAOC,EAAQ3I,EAAUC,EAAQ8J,EAEjG,CAED,MAAO,GAAK5K,EAAQK,oBAAsBL,EAAQI,eAAiB,CAElE,MAAMwK,EAAQvB,EAAQuB,MAEtBlM,EAAGsM,cAAetM,EAAG6B,iBAAkB,EAAG,EAAG,EAAG,EAAGqK,EAAMrB,MAAOqB,EAAMpB,OAAQoB,EAAMnB,MAAO5I,EAAUC,EAAQ8J,EAAMR,KAEpH,MAAO,GAAKpK,EAAQQ,gBAAkB,CAErC,MAAMoK,EAAQvB,EAAQuB,MAEtBlM,EAAGsM,cAAetM,EAAG+B,WAAY,EAAG,EAAG,EAAG,EAAGmK,EAAMrB,MAAOqB,EAAMpB,OAAQoB,EAAMnB,MAAO5I,EAAUC,EAAQ8J,EAAMR,KAE9G,MAAO,GAAKpK,EAAQ8J,eAEnB9J,EAAQqL,SAER3M,EAAG4M,WAAYrL,EAAe,EAAG4J,EAAkBhJ,EAAUC,EAAQuI,EAAQuB,WAGvE,CAEN,MAAMA,EAAQO,SAAU9B,EAAQuB,OAEhClM,EAAG6L,cAAetK,EAAe,EAAG,EAAG,EAAGsJ,EAAOC,EAAQ3I,EAAUC,EAAQ8J,EAE5E,CAED,CAOA,eAAAW,CAAiBvL,GAEhB,MAAMtB,GAAEA,EAAEF,QAAEA,GAAYC,MAClBsK,WAAEA,EAAU9I,cAAEA,GAAkBzB,EAAQyH,IAAKjG,GAEnDxB,EAAQyK,MAAMC,YAAajJ,EAAe8I,GAC1CrK,EAAG8M,eAAgBvL,EAEpB,CAOA,uBAAAwL,CAAyBC,GAExB,MAAMhN,GAAEA,EAAEF,QAAEA,GAAYC,KAGxB,GAAKiN,EAAe,CAEnB,MAAMC,EAAoBnN,EAAQyH,IAAKyF,GAIvC,GAFAC,EAAkBC,8BAA2B3K,EAExC0K,EAAkBE,aAAe,CAErC,IAAM,MAAMC,KAAYH,EAAkBE,aAEzCnN,EAAGqN,kBAAmBJ,EAAkBE,aAAcC,WAIhDH,EAAkBE,YAE1B,CAuBA,GArBKF,EAAkBK,oBAEtBtN,EAAGuN,mBAAoBN,EAAkBK,0BAClCL,EAAkBK,mBAIrBL,EAAkBO,sBAEtBxN,EAAGuN,mBAAoBN,EAAkBO,4BAClCP,EAAkBO,qBAIrBP,EAAkBQ,kBAEtBzN,EAAGqN,kBAAmBJ,EAAkBQ,wBACjCR,EAAkBQ,iBAIrBR,EAAkBS,kBAAoB,CAE1C,IAAM,IAAIvB,EAAI,EAAGA,EAAIc,EAAkBS,kBAAkBtE,OAAQ+C,IAEhEnM,EAAGuN,mBAAoBN,EAAkBS,kBAAmBvB,WAItDc,EAAkBS,iBAE1B,CAED,CAED,CAOA,cAAAC,CAAgBrM,GAEf,MAAMtB,GAAEA,EAAEF,QAAEA,GAAYC,MAClBsK,WAAEA,EAAU2C,aAAEA,GAAiBlN,EAAQyH,IAAKjG,GAElDvB,KAAKgN,wBAAyBC,GAC9BhN,EAAG4N,cAAevD,GAElBvK,EAAQ+N,OAAQvM,EAEjB,CAYA,oBAAAwM,CAAsBC,EAAYC,EAAYC,EAAY,KAAMC,EAAc,KAAMC,EAAW,EAAGC,EAAW,GAE5G,MAAMpO,GAAEA,EAAEF,QAAEA,GAAYC,MAClBwK,MAAEA,GAAUxK,KAAKD,SAEfuK,WAAYgE,EAAa9M,cAAEA,EAAaa,OAAEA,EAAMD,SAAEA,GAAarC,EAAQyH,IAAKyG,GAKpF,IAAInD,EAAOC,EAAQC,EAAOuD,EAAMC,EAAMC,EAClCC,EAAMC,EAAMC,EAJhBpE,EAAMC,YAAajJ,EAAe8M,GAKlC,MAAMnC,EAAQ6B,EAAW9B,oBAAsB8B,EAAW5E,QAASiF,GAAaL,EAAW7B,MAE3F,GAAmB,OAAd+B,EAEJpD,EAAQoD,EAAUW,IAAIC,EAAIZ,EAAU/D,IAAI2E,EACxC/D,EAASmD,EAAUW,IAAIE,EAAIb,EAAU/D,IAAI4E,EACzC/D,EAAQkD,EAAUc,OAASd,EAAUW,IAAII,EAAIf,EAAU/D,IAAI8E,EAAI,EAC/DV,EAAOL,EAAU/D,IAAI2E,EACrBN,EAAON,EAAU/D,IAAI4E,EACrBN,EAAOP,EAAUc,OAASd,EAAU/D,IAAI8E,EAAI,MAEtC,CAEN,MAAMC,EAAahF,KAAKiF,IAAK,GAAKf,GAClCtD,EAAQZ,KAAKkF,MAAOjD,EAAMrB,MAAQoE,GAClCnE,EAASb,KAAKkF,MAAOjD,EAAMpB,OAASmE,GAInClE,EAFIgD,EAAWpM,oBAAsBoM,EAAWrM,eAExCwK,EAAMnB,MAEHgD,EAAWjM,gBAEdmI,KAAKkF,MAAOjD,EAAMnB,MAAQkE,GAI1B,EAITX,EAAO,EACPC,EAAO,EACPC,EAAO,CAER,CAEqB,OAAhBN,GAEJO,EAAOP,EAAYW,EACnBH,EAAOR,EAAYY,EACnBH,EAAOT,EAAYc,IAInBP,EAAO,EACPC,EAAO,EACPC,EAAO,GAKR3O,EAAGiI,YAAajI,EAAGkI,oBAAqB8F,EAAW7F,OACnDnI,EAAGiI,YAAajI,EAAGoI,+BAAgC4F,EAAW3F,kBAC9DrI,EAAGiI,YAAajI,EAAGsI,iBAAkB0F,EAAWzF,iBAGhD,MAAM6G,EAAsBpP,EAAGqP,aAAcrP,EAAGsP,mBAC1CC,EAA2BvP,EAAGqP,aAAcrP,EAAGwP,qBAC/CC,EAA0BzP,EAAGqP,aAAcrP,EAAG0P,oBAC9CC,EAAwB3P,EAAGqP,aAAcrP,EAAG4P,kBAC5CC,EAA0B7P,EAAGqP,aAAcrP,EAAG8P,oBAEpD9P,EAAGiI,YAAajI,EAAGsP,kBAAmBpD,EAAMrB,OAC5C7K,EAAGiI,YAAajI,EAAGwP,oBAAqBtD,EAAMpB,QAC9C9K,EAAGiI,YAAajI,EAAG0P,mBAAoBpB,GACvCtO,EAAGiI,YAAajI,EAAG4P,iBAAkBrB,GACrCvO,EAAGiI,YAAajI,EAAG8P,mBAAoBtB,GAGvC,MAAMuB,EAAU/B,EAAWrM,oBAAsBqM,EAAWlM,iBAAmBkM,EAAWtM,eAC1F,GAAKqM,EAAW/B,uBAAyB+B,EAAWiC,eAAiB,CAEpE,MAAMC,EAAiBnQ,EAAQyH,IAAKwG,GAC9BmC,EAAiBpQ,EAAQyH,IAAKyG,GAE9BmC,EAAuBrQ,EAAQyH,IAAK0I,EAAejD,cACnDoD,EAAuBtQ,EAAQyH,IAAK2I,EAAelD,cAEnDqD,EAAiBF,EAAqBhD,aAAc8C,EAAe7C,UACnEkD,EAAiBF,EAAqBjD,aAAc+C,EAAe9C,UAEzE7C,EAAMgG,gBAAiBvQ,EAAGwQ,iBAAkBH,GAC5C9F,EAAMgG,gBAAiBvQ,EAAGyQ,iBAAkBH,GAE5C,IAAII,EAAO1Q,EAAG2Q,iBAET5C,EAAWiC,iBAAiBU,EAAO1Q,EAAG4Q,kBAE3C5Q,EAAG6Q,gBAAiBvC,EAAMC,EAAM1D,EAAOC,EAAQ2D,EAAMC,EAAM7D,EAAOC,EAAQ4F,EAAM1Q,EAAGO,SAEnFgK,EAAMgG,gBAAiBvQ,EAAGwQ,iBAAkB,MAC5CjG,EAAMgG,gBAAiBvQ,EAAGyQ,iBAAkB,KAE7C,MAEMV,EAGChC,EAAW+C,eAAiB/C,EAAWjM,gBAE3C9B,EAAGsM,cAAe/K,EAAe6M,EAAUK,EAAMC,EAAMC,EAAM9D,EAAOC,EAAQC,EAAO5I,EAAUC,EAAQ8J,EAAMR,MAEhGsC,EAAWpM,yBAEtB5B,EAAGqM,wBAAyB9K,EAAe6M,EAAUK,EAAMC,EAAMC,EAAM9D,EAAOC,EAAQC,EAAO5I,EAAU+J,EAAMR,MAI7G1L,EAAGsM,cAAe/K,EAAe6M,EAAUK,EAAMC,EAAMC,EAAM9D,EAAOC,EAAQC,EAAO5I,EAAUC,EAAQ8J,GAOjG6B,EAAW+C,cAEf9Q,EAAG6L,cAAetK,EAAe6M,EAAUK,EAAMC,EAAM7D,EAAOC,EAAQ3I,EAAUC,EAAQ8J,EAAMR,MAEnFqC,EAAW9B,oBAEtBjM,EAAGuM,wBAAyBhL,EAAe6M,EAAUK,EAAMC,EAAMxC,EAAMrB,MAAOqB,EAAMpB,OAAQ3I,EAAU+J,EAAMR,MAI5G1L,EAAG6L,cAAetK,EAAe6M,EAAUK,EAAMC,EAAM7D,EAAOC,EAAQ3I,EAAUC,EAAQ8J,GAS3FlM,EAAGiI,YAAajI,EAAGsP,kBAAmBF,GACtCpP,EAAGiI,YAAajI,EAAGwP,oBAAqBD,GACxCvP,EAAGiI,YAAajI,EAAG0P,mBAAoBD,GACvCzP,EAAGiI,YAAajI,EAAG4P,iBAAkBD,GACrC3P,EAAGiI,YAAajI,EAAG8P,mBAAoBD,GAGrB,IAAbzB,GAAkBJ,EAAWnB,iBAEjC7M,EAAG8M,eAAgBvL,GAIpBgJ,EAAMuB,eAEP,CAUA,wBAAAiF,CAA0BzP,EAAS0P,EAAeC,GAEjD,MAAMjR,GAAEA,GAAOD,MACTwK,MAAEA,GAAUxK,KAAKD,SAEjBuK,WAAEA,GAAetK,KAAKD,QAAQyH,IAAKjG,IAEnCuN,EAAEA,EAACC,EAAEA,EAAGE,EAAGnE,EAAOqG,EAAGpG,GAAWmG,EAEhCE,GAAoD,IAA3B7P,EAAQ0O,gBAA6BgB,EAAchE,cAAgBgE,EAAchE,aAAaoE,QAAU,EAEjIC,EAAYL,EAAchE,aAAegE,EAAchE,aAAalC,OAAS/K,KAAKD,QAAQwR,uBAAuBxC,EAEvH,GAAKqC,EAAyB,CAE7B,MAAMI,EAAkB,IAAN1C,GAAiB,IAANC,EAC7B,IAAI4B,EACAc,EAoBJ,IAlBgC,IAA3BlQ,EAAQ0O,gBAEZU,EAAO1Q,EAAG4Q,iBACVY,EAAaxR,EAAGyR,iBAEXT,EAAcU,UAElBhB,GAAQ1Q,EAAG2R,sBAMZjB,EAAO1Q,EAAG2Q,iBACVa,EAAaxR,EAAG4R,mBAIZL,EAAU,CAEd,MAAMM,EAA0B9R,KAAKD,QAAQyH,IAAKyJ,EAAchE,cAE1D8E,EAAKD,EAAwB1E,aAAc6D,EAAce,eACzDtE,EAAkBoE,EAAwBpE,gBAEhDlD,EAAMgG,gBAAiBvQ,EAAGyQ,iBAAkBqB,GAC5CvH,EAAMgG,gBAAiBvQ,EAAGwQ,iBAAkB/C,GAE5C,MAAMuE,EAAWX,EAAYvC,EAAIhE,EAEjC9K,EAAG6Q,gBAAiBhC,EAAGmD,EAAUnD,EAAIhE,EAAOmH,EAAWlH,EAAQ+D,EAAGmD,EAAUnD,EAAIhE,EAAOmH,EAAWlH,EAAQ4F,EAAM1Q,EAAGO,SAEnHgK,EAAMgG,gBAAiBvQ,EAAGwQ,iBAAkBsB,GAE5CvH,EAAMC,YAAaxK,EAAGgC,WAAYqI,GAElCrK,EAAGiS,kBAAmBjS,EAAGgC,WAAY,EAAG,EAAG,EAAG6M,EAAGmD,EAAUnH,EAAOC,GAElEP,EAAMuB,eAEP,KAAO,CAEN,MAAMgG,EAAK9R,EAAGkS,oBAEd3H,EAAMgG,gBAAiBvQ,EAAGyQ,iBAAkBqB,GAE5C9R,EAAGmS,qBAAsBnS,EAAGyQ,iBAAkBe,EAAYxR,EAAGgC,WAAYqI,EAAY,GACrFrK,EAAG6Q,gBAAiB,EAAG,EAAGhG,EAAOC,EAAQ,EAAG,EAAGD,EAAOC,EAAQ4F,EAAM1Q,EAAGO,SAEvEP,EAAGqN,kBAAmByE,EAEvB,CAED,MAECvH,EAAMC,YAAaxK,EAAGgC,WAAYqI,GAClCrK,EAAGiS,kBAAmBjS,EAAGgC,WAAY,EAAG,EAAG,EAAG6M,EAAGwC,EAAYvG,EAASgE,EAAGjE,EAAOC,GAEhFP,EAAMuB,gBAIFxK,EAAQuL,iBAAkB9M,KAAK8M,gBAAiBvL,GAErDvB,KAAKD,QAAQsS,gBAAiBpB,EAE/B,CAUA,wBAAAqB,CAA0BC,EAActB,EAAeI,EAASmB,GAAqB,GAEpF,MAAMvS,GAAEA,GAAOD,KACTiN,EAAegE,EAAchE,cAE7BwF,aAAEA,EAAYC,YAAEA,EAAWC,cAAEA,EAAa7H,MAAEA,EAAKC,OAAEA,GAAWkC,EAIpE,GAFAhN,EAAG2S,iBAAkB3S,EAAG4S,aAAcN,GAEjCG,IAAiBC,EAAgB,CAErC,IAAIvH,EAAmBnL,EAAGkH,kBAE1B,IAA4B,IAAvBqL,EAA8B,CAEPxS,KAAKE,WAAWsH,IAAK,wCAE7BsL,kCAAmC7S,EAAG4S,aAAc5F,EAAaoE,QAASjG,EAAkBN,EAAOC,EAEvH,MAAYsG,EAAU,GAEhBoB,GAAgBA,EAAaxC,gBAE5BwC,EAAa5I,OAAS5J,EAAG4C,QAE7BuI,EAAmBnL,EAAGmH,oBAMxBnH,EAAG8S,+BAAgC9S,EAAG4S,aAAcxB,EAASjG,EAAkBN,EAAOC,IAItF9K,EAAG+S,oBAAqB/S,EAAG4S,aAAczH,EAAkBN,EAAOC,GAInE9K,EAAGgT,wBAAyBhT,EAAGiT,YAAajT,EAAGyR,iBAAkBzR,EAAG4S,aAAcN,EAEnF,MAAYG,GAAeC,IAErBtB,EAAU,EAEdpR,EAAG8S,+BAAgC9S,EAAG4S,aAAcxB,EAASpR,EAAGsH,iBAAkBuD,EAAOC,GAIzF9K,EAAG+S,oBAAqB/S,EAAG4S,aAAc5S,EAAGoH,cAAeyD,EAAOC,GAKnE9K,EAAGgT,wBAAyBhT,EAAGiT,YAAajT,EAAGkT,yBAA0BlT,EAAG4S,aAAcN,IAI3FtS,EAAG2S,iBAAkB3S,EAAG4S,aAAc,KAEvC,CAcA,yBAAMO,CAAqB7R,EAASuN,EAAGC,EAAGjE,EAAOC,EAAQsI,GAExD,MAAMtT,QAAEA,EAAOE,GAAEA,GAAOD,MAElBsK,WAAEA,EAAUlI,SAAEA,EAAQC,OAAEA,GAAWrC,KAAKD,QAAQyH,IAAKjG,GAErDwQ,EAAK9R,EAAGkS,oBAEdlS,EAAGuQ,gBAAiBvQ,EAAGwQ,iBAAkBsB,GAEzC,MAAMuB,EAAS/R,EAAQE,cAAgBxB,EAAG0M,4BAA8B0G,EAAYpT,EAAGgC,WAEvFhC,EAAGmS,qBAAsBnS,EAAGwQ,iBAAkBxQ,EAAG4R,kBAAmByB,EAAQhJ,EAAY,GAExF,MAAMiJ,EAAiBvT,KAAKwT,mBAAoBnR,GAI1CoR,EADe3I,EAAQC,EAFP/K,KAAK0T,kBAAmBrR,EAAQD,GAKhDqJ,EAASxL,EAAG0T,eAElB1T,EAAG2L,WAAY3L,EAAG2T,kBAAmBnI,GACrCxL,EAAG4T,WAAY5T,EAAG2T,kBAAmBH,EAAYxT,EAAG6T,aACpD7T,EAAG8T,WAAYjF,EAAGC,EAAGjE,EAAOC,EAAQ3I,EAAUC,EAAQ,GACtDpC,EAAG2L,WAAY3L,EAAG2T,kBAAmB,YAE/B7T,EAAQkL,MAAM+I,mBAEpB,MAAMC,EAAY,IAAIV,EAAgBE,EAAaF,EAAeW,mBAQlE,OANAjU,EAAG2L,WAAY3L,EAAG2T,kBAAmBnI,GACrCxL,EAAGkU,iBAAkBlU,EAAG2T,kBAAmB,EAAGK,GAC9ChU,EAAG2L,WAAY3L,EAAG2T,kBAAmB,MAErC3T,EAAGqN,kBAAmByE,GAEfkC,CAER,CASA,kBAAAT,CAAoBnR,GAEnB,MAAMpC,GAAEA,GAAOD,KAEf,GAAKqC,IAAWpC,EAAGgD,cAAgB,OAAOmR,WAE1C,GAAK/R,IAAWpC,EAAG2F,uBAAyB,OAAOyO,YACnD,GAAKhS,IAAWpC,EAAGyF,uBAAyB,OAAO2O,YACnD,GAAKhS,IAAWpC,EAAGuF,qBAAuB,OAAO6O,YACjD,GAAKhS,IAAWpC,EAAGkD,eAAiB,OAAOkR,YAC3C,GAAKhS,IAAWpC,EAAGoD,aAAe,OAAOiR,YAEzC,GAAKjS,IAAWpC,EAAG8C,WAAa,OAAOsR,YACvC,GAAKhS,IAAWpC,EAAG4C,MAAQ,OAAO0R,aAElC,MAAM,IAAIC,MAAO,2BAA2BnS,IAE7C,CAUA,iBAAAqR,CAAmBrR,EAAQD,GAE1B,MAAMnC,GAAEA,GAAOD,KAEf,IAAIyU,EAAoB,EAaxB,OAXKpS,IAAWpC,EAAGgD,gBAAgBwR,EAAoB,GAElDpS,IAAWpC,EAAG2F,wBAClBvD,IAAWpC,EAAGyF,wBACdrD,IAAWpC,EAAGuF,sBACdnD,IAAWpC,EAAGkD,gBACdd,IAAWpC,EAAG8C,aAAa0R,EAAoB,GAE3CpS,IAAWpC,EAAGoD,cAClBhB,IAAWpC,EAAG4C,QAAQ4R,EAAoB,GAEtCrS,IAAanC,EAAGkG,KAAkC,EAApBsO,EAC9BrS,IAAanC,EAAG2E,IAAiC,EAApB6P,EAC7BrS,IAAanC,EAAGyU,MAAeD,OAApC,CAED,EAID,SAAS/H,SAAUhB,GAElB,OAAKA,EAAOqF,cAEJrF,EAAOS,MAAMR,KAEqB,oBAArBgJ,kBAAoCjJ,aAAkBiJ,kBAC3C,oBAAtBC,mBAAqClJ,aAAkBkJ,mBACvC,oBAAhBC,aAA+BnJ,aAAkBmJ,aAC7B,oBAApBC,iBAAmCpJ,aAAkBoJ,gBAEvDpJ,EAIDA,EAAOC,IAEf,gBAEe9L","ignoreList":[]}