import{BackSide,FrontSide,CubeUVReflectionMapping,SRGBTransfer}from"../../constants.js";import{BoxGeometry}from"../../geometries/BoxGeometry.js";import{PlaneGeometry}from"../../geometries/PlaneGeometry.js";import{ShaderMaterial}from"../../materials/ShaderMaterial.js";import{Color}from"../../math/Color.js";import{ColorManagement}from"../../math/ColorManagement.js";import{Euler}from"../../math/Euler.js";import{Matrix4}from"../../math/Matrix4.js";import{Mesh}from"../../objects/Mesh.js";import{ShaderLib}from"../shaders/ShaderLib.js";import{cloneUniforms,getUnlitUniformColorSpace}from"../shaders/UniformsUtils.js";const _rgb={r:0,b:0,g:0},_e1=new Euler,_m1=new Matrix4;function WebGLBackground(e,r,t,a,o,n,i){const l=new Color(0);let s,u,m=!0===n?0:1,d=null,f=0,g=null;function p(e){let a=!0===e.isScene?e.background:null;if(a&&a.isTexture){a=(e.backgroundBlurriness>0?t:r).get(a)}return a}function c(r,t){r.getRGB(_rgb,getUnlitUniformColorSpace(e)),a.buffers.color.setClear(_rgb.r,_rgb.g,_rgb.b,t,i)}return{getClearColor:function(){return l},setClearColor:function(e,r=1){l.set(e),m=r,c(l,m)},getClearAlpha:function(){return m},setClearAlpha:function(e){m=e,c(l,m)},render:function(r){let t=!1;const o=p(r);null===o?c(l,m):o&&o.isColor&&(c(o,1),t=!0);const n=e.xr.getEnvironmentBlendMode();"additive"===n?a.buffers.color.setClear(0,0,0,1,i):"alpha-blend"===n&&a.buffers.color.setClear(0,0,0,0,i),(e.autoClear||t)&&(a.buffers.depth.setTest(!0),a.buffers.depth.setMask(!0),a.buffers.color.setMask(!0),e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil))},addToRenderList:function(r,t){const a=p(t);a&&(a.isCubeTexture||a.mapping===CubeUVReflectionMapping)?(void 0===u&&(u=new Mesh(new BoxGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.backgroundCube.uniforms),vertexShader:ShaderLib.backgroundCube.vertexShader,fragmentShader:ShaderLib.backgroundCube.fragmentShader,side:BackSide,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(e,r,t){this.matrixWorld.copyPosition(t.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),o.update(u)),_e1.copy(t.backgroundRotation),_e1.x*=-1,_e1.y*=-1,_e1.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(_e1.y*=-1,_e1.z*=-1),u.material.uniforms.envMap.value=a,u.material.uniforms.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,u.material.uniforms.backgroundBlurriness.value=t.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=t.backgroundIntensity,u.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1)),u.material.toneMapped=ColorManagement.getTransfer(a.colorSpace)!==SRGBTransfer,d===a&&f===a.version&&g===e.toneMapping||(u.material.needsUpdate=!0,d=a,f=a.version,g=e.toneMapping),u.layers.enableAll(),r.unshift(u,u.geometry,u.material,0,0,null)):a&&a.isTexture&&(void 0===s&&(s=new Mesh(new PlaneGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),s.geometry.deleteAttribute("normal"),Object.defineProperty(s.material,"map",{get:function(){return this.uniforms.t2D.value}}),o.update(s)),s.material.uniforms.t2D.value=a,s.material.uniforms.backgroundIntensity.value=t.backgroundIntensity,s.material.toneMapped=ColorManagement.getTransfer(a.colorSpace)!==SRGBTransfer,!0===a.matrixAutoUpdate&&a.updateMatrix(),s.material.uniforms.uvTransform.value.copy(a.matrix),d===a&&f===a.version&&g===e.toneMapping||(s.material.needsUpdate=!0,d=a,f=a.version,g=e.toneMapping),s.layers.enableAll(),r.unshift(s,s.geometry,s.material,0,0,null))},dispose:function(){void 0!==u&&(u.geometry.dispose(),u.material.dispose(),u=void 0),void 0!==s&&(s.geometry.dispose(),s.material.dispose(),s=void 0)}}}export{WebGLBackground};
//# sourceMappingURL=WebGLBackground.js.map