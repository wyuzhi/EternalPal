{"version":3,"file":"node_modules/three/src/renderers/webgl/WebGLMaterials.js","names":["BackSide","getUnlitUniformColorSpace","Euler","Matrix4","_e1","_m1","WebGLMaterials","renderer","properties","refreshTransformUniform","map","uniform","matrixAutoUpdate","updateMatrix","value","copy","matrix","refreshUniformsCommon","uniforms","material","opacity","color","diffuse","emissive","multiplyScalar","emissiveIntensity","mapTransform","alphaMap","alphaMapTransform","bumpMap","bumpMapTransform","bumpScale","side","normalMap","normalMapTransform","normalScale","negate","displacementMap","displacementMapTransform","displacementScale","displacementBias","emissiveMap","emissiveMapTransform","specularMap","specularMapTransform","alphaTest","materialProperties","get","envMap","envMapRotation","x","y","z","isCubeTexture","isRenderTargetTexture","setFromMatrix4","makeRotationFromEuler","flipEnvMap","reflectivity","ior","refractionRatio","lightMap","lightMapIntensity","lightMapTransform","aoMap","aoMapIntensity","aoMapTransform","refreshFogUniforms","fog","getRGB","fogColor","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","pixelRatio","height","transmissionRenderTarget","isMeshBasicMaterial","isMeshLambertMaterial","isMeshToonMaterial","gradientMap","refreshUniformsToon","isMeshPhongMaterial","specular","shininess","Math","max","refreshUniformsPhong","isMeshStandardMaterial","metalness","metalnessMap","metalnessMapTransform","roughness","roughnessMap","roughnessMapTransform","envMapIntensity","refreshUniformsStandard","isMeshPhysicalMaterial","sheen","sheenColor","sheenRoughness","sheenColorMap","sheenColorMapTransform","sheenRoughnessMap","sheenRoughnessMapTransform","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatMapTransform","clearcoatRoughnessMap","clearcoatRoughnessMapTransform","clearcoatNormalMap","clearcoatNormalMapTransform","clearcoatNormalScale","dispersion","iridescence","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessRange","iridescenceThicknessMaximum","iridescenceMap","iridescenceMapTransform","iridescenceThicknessMap","iridescenceThicknessMapTransform","transmission","transmissionSamplerMap","texture","transmissionSamplerSize","set","width","transmissionMap","transmissionMapTransform","thickness","thicknessMap","thicknessMapTransform","attenuationDistance","attenuationColor","anisotropy","anisotropyVector","cos","anisotropyRotation","sin","anisotropyMap","anisotropyMapTransform","specularIntensity","specularColor","specularColorMap","specularColorMapTransform","specularIntensityMap","specularIntensityMapTransform","refreshUniformsPhysical","isMeshMatcapMaterial","matcap","refreshUniformsMatcap","isMeshDepthMaterial","isMeshDistanceMaterial","light","referencePosition","setFromMatrixPosition","matrixWorld","nearDistance","shadow","camera","farDistance","refreshUniformsDistance","isMeshNormalMaterial","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","dashSize","totalSize","gapSize","scale","refreshUniformsDash","isPointsMaterial","size","uvTransform","refreshUniformsPoints","isSpriteMaterial","rotation","refreshUniformsSprites","isShadowMaterial","isShaderMaterial","uniformsNeedUpdate"],"sources":["node_modules/three/src/renderers/webgl/WebGLMaterials.js"],"sourcesContent":["import { BackSide } from '../../constants.js';\nimport { getUnlitUniformColorSpace } from '../shaders/UniformsUtils.js';\nimport { Euler } from '../../math/Euler.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\n\nconst _e1 = /*@__PURE__*/ new Euler();\nconst _m1 = /*@__PURE__*/ new Matrix4();\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshTransformUniform( map, uniform ) {\n\n\t\tif ( map.matrixAutoUpdate === true ) {\n\n\t\t\tmap.updateMatrix();\n\n\t\t}\n\n\t\tuniform.value.copy( map.matrix );\n\n\t}\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\n\t\t\trefreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );\n\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\trefreshTransformUniform( material.normalMap, uniforms.normalMapTransform );\n\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\n\t\t\trefreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );\n\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\trefreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\trefreshTransformUniform( material.specularMap, uniforms.specularMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst envMap = materialProperties.envMap;\n\t\tconst envMapRotation = materialProperties.envMapRotation;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t_e1.copy( envMapRotation );\n\n\t\t\t// accommodate left-handed frame\n\t\t\t_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;\n\n\t\t\tif ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {\n\n\t\t\t\t// environment maps which are not cube render targets or PMREMs follow a different convention\n\t\t\t\t_e1.y *= - 1;\n\t\t\t\t_e1.z *= - 1;\n\n\t\t\t}\n\n\t\t\tuniforms.envMapRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\trefreshTransformUniform( material.lightMap, uniforms.lightMapTransform );\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\trefreshTransformUniform( material.aoMap, uniforms.aoMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.uvTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\trefreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );\n\n\t\t}\n\n\t\tuniforms.roughness.value = material.roughness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\trefreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.dispersion > 0 ) {\n\n\t\t\tuniforms.dispersion.value = material.dispersion;\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t\trefreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tif ( material.anisotropy > 0 ) {\n\n\t\t\tuniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n\t\t\tif ( material.anisotropyMap ) {\n\n\t\t\t\tuniforms.anisotropyMap.value = material.anisotropyMap;\n\n\t\t\t\trefreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t\trefreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t\trefreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tconst light = properties.get( material ).light;\n\n\t\tuniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );\n\t\tuniforms.nearDistance.value = light.shadow.camera.near;\n\t\tuniforms.farDistance.value = light.shadow.camera.far;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nexport { WebGLMaterials };\n"],"mappings":"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","ignoreList":[]}