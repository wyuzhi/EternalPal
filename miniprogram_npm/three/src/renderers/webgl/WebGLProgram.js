import{WebGLUniforms}from"./WebGLUniforms.js";import{WebGLShader}from"./WebGLShader.js";import{ShaderChunk}from"../shaders/ShaderChunk.js";import{NoToneMapping,AddOperation,MixOperation,MultiplyOperation,CubeRefractionMapping,CubeUVReflectionMapping,CubeReflectionMapping,PCFSoftShadowMap,PCFShadowMap,VSMShadowMap,AgXToneMapping,ACESFilmicToneMapping,NeutralToneMapping,CineonToneMapping,CustomToneMapping,ReinhardToneMapping,LinearToneMapping,GLSL3,LinearTransfer,SRGBTransfer}from"../../constants.js";import{ColorManagement}from"../../math/ColorManagement.js";import{Vector3}from"../../math/Vector3.js";import{Matrix3}from"../../math/Matrix3.js";const COMPLETION_STATUS_KHR=37297;let programIdCount=0;function handleSource(e,n){const i=e.split("\n"),r=[],a=Math.max(n-6,0),t=Math.min(n+6,i.length);for(let e=a;e<t;e++){const a=e+1;r.push(`${a===n?">":" "} ${a}: ${i[e]}`)}return r.join("\n")}const _m0=new Matrix3;function getEncodingComponents(e){ColorManagement._getMatrix(_m0,ColorManagement.workingColorSpace,e);const n=`mat3( ${_m0.elements.map((e=>e.toFixed(4)))} )`;switch(ColorManagement.getTransfer(e)){case LinearTransfer:return[n,"LinearTransferOETF"];case SRGBTransfer:return[n,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",e),[n,"LinearTransferOETF"]}}function getShaderErrors(e,n,i){const r=e.getShaderParameter(n,e.COMPILE_STATUS),a=(e.getShaderInfoLog(n)||"").trim();if(r&&""===a)return"";const t=/ERROR: 0:(\d+)/.exec(a);if(t){const r=parseInt(t[1]);return i.toUpperCase()+"\n\n"+a+"\n\n"+handleSource(e.getShaderSource(n),r)}return a}function getTexelEncodingFunction(e,n){const i=getEncodingComponents(n);return[`vec4 ${e}( vec4 value ) {`,`\treturn ${i[1]}( vec4( value.rgb * ${i[0]}, value.a ) );`,"}"].join("\n")}function getToneMappingFunction(e,n){let i;switch(n){case LinearToneMapping:i="Linear";break;case ReinhardToneMapping:i="Reinhard";break;case CineonToneMapping:i="Cineon";break;case ACESFilmicToneMapping:i="ACESFilmic";break;case AgXToneMapping:i="AgX";break;case NeutralToneMapping:i="Neutral";break;case CustomToneMapping:i="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",n),i="Linear"}return"vec3 "+e+"( vec3 color ) { return "+i+"ToneMapping( color ); }"}const _v0=new Vector3;function getLuminanceFunction(){ColorManagement.getLuminanceCoefficients(_v0);return["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${_v0.x.toFixed(4)}, ${_v0.y.toFixed(4)}, ${_v0.z.toFixed(4)} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function generateVertexExtensions(e){return[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(filterEmptyLine).join("\n")}function generateDefines(e){const n=[];for(const i in e){const r=e[i];!1!==r&&n.push("#define "+i+" "+r)}return n.join("\n")}function fetchAttributeLocations(e,n){const i={},r=e.getProgramParameter(n,e.ACTIVE_ATTRIBUTES);for(let a=0;a<r;a++){const r=e.getActiveAttrib(n,a),t=r.name;let o=1;r.type===e.FLOAT_MAT2&&(o=2),r.type===e.FLOAT_MAT3&&(o=3),r.type===e.FLOAT_MAT4&&(o=4),i[t]={type:r.type,location:e.getAttribLocation(n,t),locationSize:o}}return i}function filterEmptyLine(e){return""!==e}function replaceLightNums(e,n){const i=n.numSpotLightShadows+n.numSpotLightMaps-n.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,n.numDirLights).replace(/NUM_SPOT_LIGHTS/g,n.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,n.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,i).replace(/NUM_RECT_AREA_LIGHTS/g,n.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,n.numPointLights).replace(/NUM_HEMI_LIGHTS/g,n.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,n.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,n.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,n.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,n.numPointLightShadows)}function replaceClippingPlaneNums(e,n){return e.replace(/NUM_CLIPPING_PLANES/g,n.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,n.numClippingPlanes-n.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}const shaderChunkMap=new Map;function includeReplacer(e,n){let i=ShaderChunk[n];if(void 0===i){const e=shaderChunkMap.get(n);if(void 0===e)throw new Error("Can not resolve #include <"+n+">");i=ShaderChunk[e],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',n,e)}return resolveIncludes(i)}const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer)}function loopReplacer(e,n,i,r){let a="";for(let e=parseInt(n);e<parseInt(i);e++)a+=r.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return a}function generatePrecision(e){let n=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\tprecision ${e.precision} sampler3D;\n\tprecision ${e.precision} sampler2DArray;\n\tprecision ${e.precision} sampler2DShadow;\n\tprecision ${e.precision} samplerCubeShadow;\n\tprecision ${e.precision} sampler2DArrayShadow;\n\tprecision ${e.precision} isampler2D;\n\tprecision ${e.precision} isampler3D;\n\tprecision ${e.precision} isamplerCube;\n\tprecision ${e.precision} isampler2DArray;\n\tprecision ${e.precision} usampler2D;\n\tprecision ${e.precision} usampler3D;\n\tprecision ${e.precision} usamplerCube;\n\tprecision ${e.precision} usampler2DArray;\n\t`;return"highp"===e.precision?n+="\n#define HIGH_PRECISION":"mediump"===e.precision?n+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(n+="\n#define LOW_PRECISION"),n}function generateShadowMapTypeDefine(e){let n="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===PCFShadowMap?n="SHADOWMAP_TYPE_PCF":e.shadowMapType===PCFSoftShadowMap?n="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===VSMShadowMap&&(n="SHADOWMAP_TYPE_VSM"),n}function generateEnvMapTypeDefine(e){let n="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:n="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:n="ENVMAP_TYPE_CUBE_UV"}return n}function generateEnvMapModeDefine(e){let n="ENVMAP_MODE_REFLECTION";if(e.envMap&&e.envMapMode===CubeRefractionMapping)n="ENVMAP_MODE_REFRACTION";return n}function generateEnvMapBlendingDefine(e){let n="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case MultiplyOperation:n="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:n="ENVMAP_BLENDING_MIX";break;case AddOperation:n="ENVMAP_BLENDING_ADD"}return n}function generateCubeUVSize(e){const n=e.envMapCubeUVHeight;if(null===n)return null;const i=Math.log2(n)-2,r=1/n;return{texelWidth:1/(3*Math.max(Math.pow(2,i),112)),texelHeight:r,maxMip:i}}function WebGLProgram(e,n,i,r){const a=e.getContext(),t=i.defines;let o=i.vertexShader,p=i.fragmentShader;const s=generateShadowMapTypeDefine(i),d=generateEnvMapTypeDefine(i),E=generateEnvMapModeDefine(i),S=generateEnvMapBlendingDefine(i),M=generateCubeUVSize(i),f=generateVertexExtensions(i),c=generateDefines(t),l=a.createProgram();let _,u,A=i.glslVersion?"#version "+i.glslVersion+"\n":"";i.isRawShaderMaterial?(_=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,c].filter(filterEmptyLine).join("\n"),_.length>0&&(_+="\n"),u=["#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,c].filter(filterEmptyLine).join("\n"),u.length>0&&(u+="\n")):(_=[generatePrecision(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,c,i.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",i.batching?"#define USE_BATCHING":"",i.batchingColor?"#define USE_BATCHING_COLOR":"",i.instancing?"#define USE_INSTANCING":"",i.instancingColor?"#define USE_INSTANCING_COLOR":"",i.instancingMorph?"#define USE_INSTANCING_MORPH":"",i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.map?"#define USE_MAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+E:"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.displacementMap?"#define USE_DISPLACEMENTMAP":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.mapUv?"#define MAP_UV "+i.mapUv:"",i.alphaMapUv?"#define ALPHAMAP_UV "+i.alphaMapUv:"",i.lightMapUv?"#define LIGHTMAP_UV "+i.lightMapUv:"",i.aoMapUv?"#define AOMAP_UV "+i.aoMapUv:"",i.emissiveMapUv?"#define EMISSIVEMAP_UV "+i.emissiveMapUv:"",i.bumpMapUv?"#define BUMPMAP_UV "+i.bumpMapUv:"",i.normalMapUv?"#define NORMALMAP_UV "+i.normalMapUv:"",i.displacementMapUv?"#define DISPLACEMENTMAP_UV "+i.displacementMapUv:"",i.metalnessMapUv?"#define METALNESSMAP_UV "+i.metalnessMapUv:"",i.roughnessMapUv?"#define ROUGHNESSMAP_UV "+i.roughnessMapUv:"",i.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+i.anisotropyMapUv:"",i.clearcoatMapUv?"#define CLEARCOATMAP_UV "+i.clearcoatMapUv:"",i.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+i.clearcoatNormalMapUv:"",i.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+i.clearcoatRoughnessMapUv:"",i.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+i.iridescenceMapUv:"",i.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+i.iridescenceThicknessMapUv:"",i.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+i.sheenColorMapUv:"",i.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+i.sheenRoughnessMapUv:"",i.specularMapUv?"#define SPECULARMAP_UV "+i.specularMapUv:"",i.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+i.specularColorMapUv:"",i.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+i.specularIntensityMapUv:"",i.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+i.transmissionMapUv:"",i.thicknessMapUv?"#define THICKNESSMAP_UV "+i.thicknessMapUv:"",i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.flatShading?"#define FLAT_SHADED":"",i.skinning?"#define USE_SKINNING":"",i.morphTargets?"#define USE_MORPHTARGETS":"",i.morphNormals&&!1===i.flatShading?"#define USE_MORPHNORMALS":"",i.morphColors?"#define USE_MORPHCOLORS":"",i.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+i.morphTextureStride:"",i.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+i.morphTargetsCount:"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+s:"",i.sizeAttenuation?"#define USE_SIZEATTENUATION":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),u=[generatePrecision(i),"#define SHADER_TYPE "+i.shaderType,"#define SHADER_NAME "+i.shaderName,c,i.useFog&&i.fog?"#define USE_FOG":"",i.useFog&&i.fogExp2?"#define FOG_EXP2":"",i.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",i.map?"#define USE_MAP":"",i.matcap?"#define USE_MATCAP":"",i.envMap?"#define USE_ENVMAP":"",i.envMap?"#define "+d:"",i.envMap?"#define "+E:"",i.envMap?"#define "+S:"",M?"#define CUBEUV_TEXEL_WIDTH "+M.texelWidth:"",M?"#define CUBEUV_TEXEL_HEIGHT "+M.texelHeight:"",M?"#define CUBEUV_MAX_MIP "+M.maxMip+".0":"",i.lightMap?"#define USE_LIGHTMAP":"",i.aoMap?"#define USE_AOMAP":"",i.bumpMap?"#define USE_BUMPMAP":"",i.normalMap?"#define USE_NORMALMAP":"",i.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",i.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",i.emissiveMap?"#define USE_EMISSIVEMAP":"",i.anisotropy?"#define USE_ANISOTROPY":"",i.anisotropyMap?"#define USE_ANISOTROPYMAP":"",i.clearcoat?"#define USE_CLEARCOAT":"",i.clearcoatMap?"#define USE_CLEARCOATMAP":"",i.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",i.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",i.dispersion?"#define USE_DISPERSION":"",i.iridescence?"#define USE_IRIDESCENCE":"",i.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",i.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",i.specularMap?"#define USE_SPECULARMAP":"",i.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",i.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",i.roughnessMap?"#define USE_ROUGHNESSMAP":"",i.metalnessMap?"#define USE_METALNESSMAP":"",i.alphaMap?"#define USE_ALPHAMAP":"",i.alphaTest?"#define USE_ALPHATEST":"",i.alphaHash?"#define USE_ALPHAHASH":"",i.sheen?"#define USE_SHEEN":"",i.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",i.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",i.transmission?"#define USE_TRANSMISSION":"",i.transmissionMap?"#define USE_TRANSMISSIONMAP":"",i.thicknessMap?"#define USE_THICKNESSMAP":"",i.vertexTangents&&!1===i.flatShading?"#define USE_TANGENT":"",i.vertexColors||i.instancingColor||i.batchingColor?"#define USE_COLOR":"",i.vertexAlphas?"#define USE_COLOR_ALPHA":"",i.vertexUv1s?"#define USE_UV1":"",i.vertexUv2s?"#define USE_UV2":"",i.vertexUv3s?"#define USE_UV3":"",i.pointsUvs?"#define USE_POINTS_UV":"",i.gradientMap?"#define USE_GRADIENTMAP":"",i.flatShading?"#define FLAT_SHADED":"",i.doubleSided?"#define DOUBLE_SIDED":"",i.flipSided?"#define FLIP_SIDED":"",i.shadowMapEnabled?"#define USE_SHADOWMAP":"",i.shadowMapEnabled?"#define "+s:"",i.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",i.numLightProbes>0?"#define USE_LIGHT_PROBES":"",i.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",i.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",i.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",i.reversedDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",i.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",i.toneMapping!==NoToneMapping?ShaderChunk.tonemapping_pars_fragment:"",i.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",i.toneMapping):"",i.dithering?"#define DITHERING":"",i.opaque?"#define OPAQUE":"",ShaderChunk.colorspace_pars_fragment,getTexelEncodingFunction("linearToOutputTexel",i.outputColorSpace),getLuminanceFunction(),i.useDepthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")),o=resolveIncludes(o),o=replaceLightNums(o,i),o=replaceClippingPlaneNums(o,i),p=resolveIncludes(p),p=replaceLightNums(p,i),p=replaceClippingPlaneNums(p,i),o=unrollLoops(o),p=unrollLoops(p),!0!==i.isRawShaderMaterial&&(A="#version 300 es\n",_=[f,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+_,u=["#define varying in",i.glslVersion===GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",i.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+u);const U=A+_+o,g=A+u+p,P=WebGLShader(a,a.VERTEX_SHADER,U),T=WebGLShader(a,a.FRAGMENT_SHADER,g);function h(n){if(e.debug.checkShaderErrors){const i=a.getProgramInfoLog(l)||"",r=a.getShaderInfoLog(P)||"",t=a.getShaderInfoLog(T)||"",o=i.trim(),p=r.trim(),s=t.trim();let d=!0,E=!0;if(!1===a.getProgramParameter(l,a.LINK_STATUS))if(d=!1,"function"==typeof e.debug.onShaderError)e.debug.onShaderError(a,l,P,T);else{const e=getShaderErrors(a,P,"vertex"),i=getShaderErrors(a,T,"fragment");console.error("THREE.WebGLProgram: Shader Error "+a.getError()+" - VALIDATE_STATUS "+a.getProgramParameter(l,a.VALIDATE_STATUS)+"\n\nMaterial Name: "+n.name+"\nMaterial Type: "+n.type+"\n\nProgram Info Log: "+o+"\n"+e+"\n"+i)}else""!==o?console.warn("THREE.WebGLProgram: Program Info Log:",o):""!==p&&""!==s||(E=!1);E&&(n.diagnostics={runnable:d,programLog:o,vertexShader:{log:p,prefix:_},fragmentShader:{log:s,prefix:u}})}a.deleteShader(P),a.deleteShader(T),m=new WebGLUniforms(a,l),C=fetchAttributeLocations(a,l)}let m,C;a.attachShader(l,P),a.attachShader(l,T),void 0!==i.index0AttributeName?a.bindAttribLocation(l,0,i.index0AttributeName):!0===i.morphTargets&&a.bindAttribLocation(l,0,"position"),a.linkProgram(l),this.getUniforms=function(){return void 0===m&&h(this),m},this.getAttributes=function(){return void 0===C&&h(this),C};let N=!1===i.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===N&&(N=a.getProgramParameter(l,37297)),N},this.destroy=function(){r.releaseStatesOfProgram(this),a.deleteProgram(l),this.program=void 0},this.type=i.shaderType,this.name=i.shaderName,this.id=programIdCount++,this.cacheKey=n,this.usedTimes=1,this.program=l,this.vertexShader=P,this.fragmentShader=T,this}export{WebGLProgram};
//# sourceMappingURL=WebGLProgram.js.map