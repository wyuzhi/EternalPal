import{BackSide,DoubleSide,CubeUVReflectionMapping,ObjectSpaceNormalMap,TangentSpaceNormalMap,NoToneMapping,NormalBlending,LinearSRGBColorSpace,SRGBTransfer}from"../../constants.js";import{Layers}from"../../core/Layers.js";import{WebGLProgram}from"./WebGLProgram.js";import{WebGLShaderCache}from"./WebGLShaderCache.js";import{ShaderLib}from"../shaders/ShaderLib.js";import{UniformsUtils}from"../shaders/UniformsUtils.js";import{ColorManagement}from"../../math/ColorManagement.js";function WebGLPrograms(e,a,n,s,t,r,p){const o=new Layers,i=new WebGLShaderCache,l=new Set,h=[],c=t.logarithmicDepthBuffer,u=t.vertexTextures;let m=t.precision;const M={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function d(e){return l.add(e),0===e?"uv":`uv${e}`}return{getParameters:function(r,o,h,g,b){const v=g.fog,S=b.geometry,f=r.isMeshStandardMaterial?g.environment:null,U=(r.isMeshStandardMaterial?n:a).get(r.envMap||f),C=U&&U.mapping===CubeUVReflectionMapping?U.image.height:null,T=M[r.type];null!==r.precision&&(m=t.getMaxPrecision(r.precision),m!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",m,"instead."));const x=S.morphAttributes.position||S.morphAttributes.normal||S.morphAttributes.color,L=void 0!==x?x.length:0;let P,y,w,R,D=0;if(void 0!==S.morphAttributes.position&&(D=1),void 0!==S.morphAttributes.normal&&(D=2),void 0!==S.morphAttributes.color&&(D=3),T){const e=ShaderLib[T];P=e.vertexShader,y=e.fragmentShader}else P=r.vertexShader,y=r.fragmentShader,i.update(r),w=i.getVertexShaderID(r),R=i.getFragmentShaderID(r);const A=e.getRenderTarget(),k=e.state.buffers.depth.getReversed(),B=!0===b.isInstancedMesh,N=!0===b.isBatchedMesh,I=!!r.map,G=!!r.matcap,V=!!U,W=!!r.aoMap,j=!!r.lightMap,E=!!r.bumpMap,H=!!r.normalMap,_=!!r.displacementMap,F=!!r.emissiveMap,K=!!r.metalnessMap,O=!!r.roughnessMap,z=r.anisotropy>0,q=r.clearcoat>0,X=r.dispersion>0,$=r.iridescence>0,J=r.sheen>0,Q=r.transmission>0,Y=z&&!!r.anisotropyMap,Z=q&&!!r.clearcoatMap,ee=q&&!!r.clearcoatNormalMap,ae=q&&!!r.clearcoatRoughnessMap,ne=$&&!!r.iridescenceMap,se=$&&!!r.iridescenceThicknessMap,te=J&&!!r.sheenColorMap,re=J&&!!r.sheenRoughnessMap,pe=!!r.specularMap,oe=!!r.specularColorMap,ie=!!r.specularIntensityMap,le=Q&&!!r.transmissionMap,he=Q&&!!r.thicknessMap,ce=!!r.gradientMap,ue=!!r.alphaMap,me=r.alphaTest>0,Me=!!r.alphaHash,de=!!r.extensions;let ge=NoToneMapping;r.toneMapped&&(null!==A&&!0!==A.isXRRenderTarget||(ge=e.toneMapping));const be={shaderID:T,shaderType:r.type,shaderName:r.name,vertexShader:P,fragmentShader:y,defines:r.defines,customVertexShaderID:w,customFragmentShaderID:R,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:m,batching:N,batchingColor:N&&null!==b._colorsTexture,instancing:B,instancingColor:B&&null!==b.instanceColor,instancingMorph:B&&null!==b.morphTexture,supportsVertexTextures:u,outputColorSpace:null===A?e.outputColorSpace:!0===A.isXRRenderTarget?A.texture.colorSpace:LinearSRGBColorSpace,alphaToCoverage:!!r.alphaToCoverage,map:I,matcap:G,envMap:V,envMapMode:V&&U.mapping,envMapCubeUVHeight:C,aoMap:W,lightMap:j,bumpMap:E,normalMap:H,displacementMap:u&&_,emissiveMap:F,normalMapObjectSpace:H&&r.normalMapType===ObjectSpaceNormalMap,normalMapTangentSpace:H&&r.normalMapType===TangentSpaceNormalMap,metalnessMap:K,roughnessMap:O,anisotropy:z,anisotropyMap:Y,clearcoat:q,clearcoatMap:Z,clearcoatNormalMap:ee,clearcoatRoughnessMap:ae,dispersion:X,iridescence:$,iridescenceMap:ne,iridescenceThicknessMap:se,sheen:J,sheenColorMap:te,sheenRoughnessMap:re,specularMap:pe,specularColorMap:oe,specularIntensityMap:ie,transmission:Q,transmissionMap:le,thicknessMap:he,gradientMap:ce,opaque:!1===r.transparent&&r.blending===NormalBlending&&!1===r.alphaToCoverage,alphaMap:ue,alphaTest:me,alphaHash:Me,combine:r.combine,mapUv:I&&d(r.map.channel),aoMapUv:W&&d(r.aoMap.channel),lightMapUv:j&&d(r.lightMap.channel),bumpMapUv:E&&d(r.bumpMap.channel),normalMapUv:H&&d(r.normalMap.channel),displacementMapUv:_&&d(r.displacementMap.channel),emissiveMapUv:F&&d(r.emissiveMap.channel),metalnessMapUv:K&&d(r.metalnessMap.channel),roughnessMapUv:O&&d(r.roughnessMap.channel),anisotropyMapUv:Y&&d(r.anisotropyMap.channel),clearcoatMapUv:Z&&d(r.clearcoatMap.channel),clearcoatNormalMapUv:ee&&d(r.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ae&&d(r.clearcoatRoughnessMap.channel),iridescenceMapUv:ne&&d(r.iridescenceMap.channel),iridescenceThicknessMapUv:se&&d(r.iridescenceThicknessMap.channel),sheenColorMapUv:te&&d(r.sheenColorMap.channel),sheenRoughnessMapUv:re&&d(r.sheenRoughnessMap.channel),specularMapUv:pe&&d(r.specularMap.channel),specularColorMapUv:oe&&d(r.specularColorMap.channel),specularIntensityMapUv:ie&&d(r.specularIntensityMap.channel),transmissionMapUv:le&&d(r.transmissionMap.channel),thicknessMapUv:he&&d(r.thicknessMap.channel),alphaMapUv:ue&&d(r.alphaMap.channel),vertexTangents:!!S.attributes.tangent&&(H||z),vertexColors:r.vertexColors,vertexAlphas:!0===r.vertexColors&&!!S.attributes.color&&4===S.attributes.color.itemSize,pointsUvs:!0===b.isPoints&&!!S.attributes.uv&&(I||ue),fog:!!v,useFog:!0===r.fog,fogExp2:!!v&&v.isFogExp2,flatShading:!0===r.flatShading&&!1===r.wireframe,sizeAttenuation:!0===r.sizeAttenuation,logarithmicDepthBuffer:c,reversedDepthBuffer:k,skinning:!0===b.isSkinnedMesh,morphTargets:void 0!==S.morphAttributes.position,morphNormals:void 0!==S.morphAttributes.normal,morphColors:void 0!==S.morphAttributes.color,morphTargetsCount:L,morphTextureStride:D,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:p.numPlanes,numClipIntersection:p.numIntersection,dithering:r.dithering,shadowMapEnabled:e.shadowMap.enabled&&h.length>0,shadowMapType:e.shadowMap.type,toneMapping:ge,decodeVideoTexture:I&&!0===r.map.isVideoTexture&&ColorManagement.getTransfer(r.map.colorSpace)===SRGBTransfer,decodeVideoTextureEmissive:F&&!0===r.emissiveMap.isVideoTexture&&ColorManagement.getTransfer(r.emissiveMap.colorSpace)===SRGBTransfer,premultipliedAlpha:r.premultipliedAlpha,doubleSided:r.side===DoubleSide,flipSided:r.side===BackSide,useDepthPacking:r.depthPacking>=0,depthPacking:r.depthPacking||0,index0AttributeName:r.index0AttributeName,extensionClipCullDistance:de&&!0===r.extensions.clipCullDistance&&s.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(de&&!0===r.extensions.multiDraw||N)&&s.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:s.has("KHR_parallel_shader_compile"),customProgramCacheKey:r.customProgramCacheKey()};return be.vertexUv1s=l.has(1),be.vertexUv2s=l.has(2),be.vertexUv3s=l.has(3),l.clear(),be},getProgramCacheKey:function(a){const n=[];if(a.shaderID?n.push(a.shaderID):(n.push(a.customVertexShaderID),n.push(a.customFragmentShaderID)),void 0!==a.defines)for(const e in a.defines)n.push(e),n.push(a.defines[e]);return!1===a.isRawShaderMaterial&&(!function(e,a){e.push(a.precision),e.push(a.outputColorSpace),e.push(a.envMapMode),e.push(a.envMapCubeUVHeight),e.push(a.mapUv),e.push(a.alphaMapUv),e.push(a.lightMapUv),e.push(a.aoMapUv),e.push(a.bumpMapUv),e.push(a.normalMapUv),e.push(a.displacementMapUv),e.push(a.emissiveMapUv),e.push(a.metalnessMapUv),e.push(a.roughnessMapUv),e.push(a.anisotropyMapUv),e.push(a.clearcoatMapUv),e.push(a.clearcoatNormalMapUv),e.push(a.clearcoatRoughnessMapUv),e.push(a.iridescenceMapUv),e.push(a.iridescenceThicknessMapUv),e.push(a.sheenColorMapUv),e.push(a.sheenRoughnessMapUv),e.push(a.specularMapUv),e.push(a.specularColorMapUv),e.push(a.specularIntensityMapUv),e.push(a.transmissionMapUv),e.push(a.thicknessMapUv),e.push(a.combine),e.push(a.fogExp2),e.push(a.sizeAttenuation),e.push(a.morphTargetsCount),e.push(a.morphAttributeCount),e.push(a.numDirLights),e.push(a.numPointLights),e.push(a.numSpotLights),e.push(a.numSpotLightMaps),e.push(a.numHemiLights),e.push(a.numRectAreaLights),e.push(a.numDirLightShadows),e.push(a.numPointLightShadows),e.push(a.numSpotLightShadows),e.push(a.numSpotLightShadowsWithMaps),e.push(a.numLightProbes),e.push(a.shadowMapType),e.push(a.toneMapping),e.push(a.numClippingPlanes),e.push(a.numClipIntersection),e.push(a.depthPacking)}(n,a),function(e,a){o.disableAll(),a.supportsVertexTextures&&o.enable(0);a.instancing&&o.enable(1);a.instancingColor&&o.enable(2);a.instancingMorph&&o.enable(3);a.matcap&&o.enable(4);a.envMap&&o.enable(5);a.normalMapObjectSpace&&o.enable(6);a.normalMapTangentSpace&&o.enable(7);a.clearcoat&&o.enable(8);a.iridescence&&o.enable(9);a.alphaTest&&o.enable(10);a.vertexColors&&o.enable(11);a.vertexAlphas&&o.enable(12);a.vertexUv1s&&o.enable(13);a.vertexUv2s&&o.enable(14);a.vertexUv3s&&o.enable(15);a.vertexTangents&&o.enable(16);a.anisotropy&&o.enable(17);a.alphaHash&&o.enable(18);a.batching&&o.enable(19);a.dispersion&&o.enable(20);a.batchingColor&&o.enable(21);a.gradientMap&&o.enable(22);e.push(o.mask),o.disableAll(),a.fog&&o.enable(0);a.useFog&&o.enable(1);a.flatShading&&o.enable(2);a.logarithmicDepthBuffer&&o.enable(3);a.reversedDepthBuffer&&o.enable(4);a.skinning&&o.enable(5);a.morphTargets&&o.enable(6);a.morphNormals&&o.enable(7);a.morphColors&&o.enable(8);a.premultipliedAlpha&&o.enable(9);a.shadowMapEnabled&&o.enable(10);a.doubleSided&&o.enable(11);a.flipSided&&o.enable(12);a.useDepthPacking&&o.enable(13);a.dithering&&o.enable(14);a.transmission&&o.enable(15);a.sheen&&o.enable(16);a.opaque&&o.enable(17);a.pointsUvs&&o.enable(18);a.decodeVideoTexture&&o.enable(19);a.decodeVideoTextureEmissive&&o.enable(20);a.alphaToCoverage&&o.enable(21);e.push(o.mask)}(n,a),n.push(e.outputColorSpace)),n.push(a.customProgramCacheKey),n.join()},getUniforms:function(e){const a=M[e.type];let n;if(a){const e=ShaderLib[a];n=UniformsUtils.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(a,n){let s;for(let e=0,a=h.length;e<a;e++){const a=h[e];if(a.cacheKey===n){s=a,++s.usedTimes;break}}return void 0===s&&(s=new WebGLProgram(e,n,a,r),h.push(s)),s},releaseProgram:function(e){if(0==--e.usedTimes){const a=h.indexOf(e);h[a]=h[h.length-1],h.pop(),e.destroy()}},releaseShaderCache:function(e){i.remove(e)},programs:h,dispose:function(){i.dispose()}}}export{WebGLPrograms};
//# sourceMappingURL=WebGLPrograms.js.map