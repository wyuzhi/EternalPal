{"version":3,"file":"node_modules/three/src/renderers/webgl/WebGLTextures.js","names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedIntType","FloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","UnsignedByteType","NoColorSpace","LinearSRGBColorSpace","NeverCompare","AlwaysCompare","LessCompare","LessEqualCompare","EqualCompare","GreaterEqualCompare","GreaterCompare","NotEqualCompare","SRGBTransfer","LinearTransfer","UnsignedShortType","UnsignedInt248Type","createElementNS","ColorManagement","Vector2","getByteLength","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","multisampledRTTExt","has","get","supportsInvalidateFramebuffer","navigator","test","userAgent","_imageDimensions","_videoTextures","WeakMap","_canvas","_sources","useOffscreenCanvas","OffscreenCanvas","getContext","err","createCanvas","width","height","resizeImage","image","needsNewCanvas","maxSize","scale","dimensions","getDimensions","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","VideoFrame","floor","undefined","canvas","drawImage","console","warn","textureNeedsGenerateMipmaps","texture","generateMipmaps","generateMipmap","target","getTargetType","isWebGLCubeRenderTarget","TEXTURE_CUBE_MAP","isWebGL3DRenderTarget","TEXTURE_3D","isWebGLArrayRenderTarget","isCompressedArrayTexture","TEXTURE_2D_ARRAY","TEXTURE_2D","getInternalFormat","internalFormatName","glFormat","glType","colorSpace","forceLinearTransfer","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RED_INTEGER","R8UI","UNSIGNED_SHORT","R16UI","UNSIGNED_INT","R32UI","BYTE","R8I","SHORT","R16I","INT","R32I","RG","RG32F","RG16F","RG8","RG_INTEGER","RG8UI","RG16UI","RG32UI","RG8I","RG16I","RG32I","RGB_INTEGER","RGB8UI","RGB16UI","RGB32UI","RGB8I","RGB16I","RGB32I","RGBA_INTEGER","RGBA8UI","RGBA16UI","RGBA32UI","RGBA8I","RGBA16I","RGBA32I","RGB","UNSIGNED_INT_5_9_9_9_REV","RGB9_E5","RGBA","transfer","getTransfer","RGBA32F","RGBA16F","SRGB8_ALPHA8","RGBA8","UNSIGNED_SHORT_4_4_4_4","RGBA4","UNSIGNED_SHORT_5_5_5_1","RGB5_A1","getInternalDepthFormat","useStencil","depthType","glInternalFormat","DEPTH24_STENCIL8","DEPTH32F_STENCIL8","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","getMipLevels","isFramebufferTexture","minFilter","log2","mipmaps","length","isCompressedTexture","Array","isArray","onTextureDispose","event","removeEventListener","textureProperties","__webglInit","source","webglTextures","webglTexture","__cacheKey","usedTimes","deleteTexture","Object","keys","delete","remove","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTarget","renderTargetProperties","depthTexture","dispose","i","__webglFramebuffer","level","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","textures","il","attachmentProperties","__webglTexture","memory","deallocateRenderTarget","textureUnits","setTexture2D","slot","frame","render","set","update","updateVideoTexture","isRenderTargetTexture","isExternalTexture","version","__version","complete","uploadTexture","sourceTexture","bindTexture","TEXTURE0","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","compareToGL","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","setTextureParameters","textureType","type","magFilter","texParameteri","TEXTURE_WRAP_S","wrapS","TEXTURE_WRAP_T","wrapT","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","compareFunction","TEXTURE_COMPARE_MODE","COMPARE_REF_TO_TEXTURE","TEXTURE_COMPARE_FUNC","anisotropy","__currentAnisotropy","extension","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","initTexture","forceUpload","addEventListener","textureCacheKey","array","push","format","premultiplyAlpha","flipY","unpackAlignment","join","getTextureCacheKey","createTexture","getRow","index","rowLength","componentStride","isDataArrayTexture","isData3DTexture","sourceProperties","activeTexture","workingPrimaries","getPrimaries","workingColorSpace","texturePrimaries","unpackConversion","NONE","BROWSER_DEFAULT_WEBGL","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","maxTextureSize","verifyColorSpace","convert","mipmap","useTexStorage","allocateMemory","dataReady","levels","isDepthTexture","texStorage2D","texImage2D","isDataTexture","texSubImage2D","data","updateRanges","sort","a","b","start","mergeIndex","previousRange","range","previousEnd","count","currentRow","previousRow","currentUnpackRowLen","getParameter","UNPACK_ROW_LENGTH","currentUnpackSkipPixels","UNPACK_SKIP_PIXELS","currentUnpackSkipRows","UNPACK_SKIP_ROWS","l","pixelStart","pixelCount","ceil","x","y","clearUpdateRanges","updateTexture","texStorage3D","depth","layerUpdates","size","layerByteLength","layerIndex","layerData","subarray","BYTES_PER_ELEMENT","compressedTexSubImage3D","clearLayerUpdates","compressedTexImage3D","texSubImage3D","texImage3D","compressedTexSubImage2D","compressedTexImage2D","onUpdate","setupFrameBufferTexture","framebuffer","attachment","textureTarget","__renderTarget","__hasExternalTextures","bindFramebuffer","FRAMEBUFFER","useMultisampledRTT","framebufferTexture2DMultisampleEXT","getRenderTargetSamples","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Z","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","glAttachmentType","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","samples","renderbufferStorageMultisampleEXT","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthTexture","Error","needsUpdate","webglDepthTexture","setupDepthRenderbuffer","isCube","__boundDepthTexture","__depthDisposeCallback","disposeEvent","__autoAllocateDepthBuffer","createRenderbuffer","invalidationArrayRead","invalidationArrayDraw","maxSamples","__useRenderToTexture","error","naturalWidth","naturalHeight","displayWidth","displayHeight","this","allocateTextureUnit","textureUnit","maxTextures","resetTextureUnits","setTexture2DArray","setTexture3D","setTextureCube","isCompressed","cubeImage","maxCubemapSize","j","mipmapImage","uploadCubeTexture","rebindTextures","colorTexture","COLOR_ATTACHMENT0","setupRenderTarget","isMultipleRenderTargets","createFramebuffer","isXRRenderTarget","unbindTexture","glTextureType","updateRenderTargetMipmap","targetType","updateMultisampleRenderTarget","mask","COLOR_BUFFER_BIT","depthStyle","DRAW_FRAMEBUFFER","READ_FRAMEBUFFER","resolveDepthBuffer","DEPTH_BUFFER_BIT","resolveStencilBuffer","STENCIL_BUFFER_BIT","blitFramebuffer","invalidateFramebuffer"],"sources":["node_modules/three/src/renderers/webgl/WebGLTextures.js"],"sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedIntType, FloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, UnsignedByteType, NoColorSpace, LinearSRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare, SRGBTransfer, LinearTransfer, UnsignedShortType, UnsignedInt248Type } from '../../constants.js';\nimport { createElementNS } from '../../utils.js';\nimport { ColorManagement } from '../../math/ColorManagement.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { getByteLength } from '../../extras/TextureUtils.js';\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _imageDimensions = new Vector2();\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\tconst dimensions = getDimensions( image );\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( dimensions.width > maxSize || dimensions.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( dimensions.width, dimensions.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||\n\t\t\t\t( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {\n\n\t\t\t\tconst width = Math.floor( scale * dimensions.width );\n\t\t\t\tconst height = Math.floor( scale * dimensions.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture ) {\n\n\t\treturn texture.generateMipmaps;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getTargetType( texture ) {\n\n\t\tif ( texture.isWebGLCubeRenderTarget ) return _gl.TEXTURE_CUBE_MAP;\n\t\tif ( texture.isWebGL3DRenderTarget ) return _gl.TEXTURE_3D;\n\t\tif ( texture.isWebGLArrayRenderTarget || texture.isCompressedArrayTexture ) return _gl.TEXTURE_2D_ARRAY;\n\t\treturn _gl.TEXTURE_2D;\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.R8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.R16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RG32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGB16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGB32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGB8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGB16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGB32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RGBA16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RGBA32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.RGBA8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.RGBA16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.RGBA32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_INT_5_9_9_9_REV ) internalFormat = _gl.RGB9_E5;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getInternalDepthFormat( useStencil, depthType ) {\n\n\t\tlet glInternalFormat;\n\t\tif ( useStencil ) {\n\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t} else if ( depthType === FloatType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH32F_STENCIL8;\n\n\t\t\t} else if ( depthType === UnsignedShortType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\t\t\t\tconsole.warn( 'DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.' );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t} else if ( depthType === FloatType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( depthType === UnsignedShortType ) {\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn glInternalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\tproperties.remove( renderTarget.depthTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {\n\n\t\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {\n\n\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\tinfo.memory.textures --;\n\n\t\t\t}\n\n\t\t\tproperties.remove( textures[ i ] );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.colorSpace );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.isExternalTexture !== true && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t} else if ( texture.isExternalTexture ) {\n\n\t\t\ttextureProperties.__webglTexture = texture.sourceTexture ? texture.sourceTexture : null;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tconst compareToGL = {\n\t\t[ NeverCompare ]: _gl.NEVER,\n\t\t[ AlwaysCompare ]: _gl.ALWAYS,\n\t\t[ LessCompare ]: _gl.LESS,\n\t\t[ LessEqualCompare ]: _gl.LEQUAL,\n\t\t[ EqualCompare ]: _gl.EQUAL,\n\t\t[ GreaterEqualCompare ]: _gl.GEQUAL,\n\t\t[ GreaterCompare ]: _gl.GREATER,\n\t\t[ NotEqualCompare ]: _gl.NOTEQUAL\n\t};\n\n\tfunction setTextureParameters( textureType, texture ) {\n\n\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false &&\n\t\t\t( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||\n\t\t\ttexture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );\n\n\t\t}\n\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t}\n\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction getRow( index, rowLength, componentStride ) {\n\n\t\treturn Math.floor( Math.floor( index / componentStride ) / rowLength );\n\n\t}\n\n\tfunction updateTexture( texture, image, glFormat, glType ) {\n\n\t\tconst componentStride = 4; // only RGBA supported\n\n\t\tconst updateRanges = texture.updateRanges;\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\t// Before applying update ranges, we merge any adjacent / overlapping\n\t\t\t// ranges to reduce load on `gl.texSubImage2D`. Empirically, this has led\n\t\t\t// to performance improvements for applications which make heavy use of\n\t\t\t// update ranges. Likely due to GPU command overhead.\n\t\t\t//\n\t\t\t// Note that to reduce garbage collection between frames, we merge the\n\t\t\t// update ranges in-place. This is safe because this method will clear the\n\t\t\t// update ranges once updated.\n\n\t\t\tupdateRanges.sort( ( a, b ) => a.start - b.start );\n\n\t\t\t// To merge the update ranges in-place, we work from left to right in the\n\t\t\t// existing updateRanges array, merging ranges. This may result in a final\n\t\t\t// array which is smaller than the original. This index tracks the last\n\t\t\t// index representing a merged range, any data after this index can be\n\t\t\t// trimmed once the merge algorithm is completed.\n\t\t\tlet mergeIndex = 0;\n\n\t\t\tfor ( let i = 1; i < updateRanges.length; i ++ ) {\n\n\t\t\t\tconst previousRange = updateRanges[ mergeIndex ];\n\t\t\t\tconst range = updateRanges[ i ];\n\n\t\t\t\t// Only merge if in the same row and overlapping/adjacent\n\t\t\t\tconst previousEnd = previousRange.start + previousRange.count;\n\t\t\t\tconst currentRow = getRow( range.start, image.width, componentStride );\n\t\t\t\tconst previousRow = getRow( previousRange.start, image.width, componentStride );\n\n\t\t\t\t// We add one here to merge adjacent ranges. This is safe because ranges\n\t\t\t\t// operate over positive integers.\n\t\t\t\tif (\n\t\t\t\t\trange.start <= previousEnd + 1 &&\n\t\t\t\t\tcurrentRow === previousRow &&\n\t\t\t\t\tgetRow( range.start + range.count - 1, image.width, componentStride ) === currentRow // ensure range doesn't spill\n\t\t\t\t) {\n\n\t\t\t\t\tpreviousRange.count = Math.max(\n\t\t\t\t\t\tpreviousRange.count,\n\t\t\t\t\t\trange.start + range.count - previousRange.start\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\t++ mergeIndex;\n\t\t\t\t\tupdateRanges[ mergeIndex ] = range;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Trim the array to only contain the merged ranges.\n\t\t\tupdateRanges.length = mergeIndex + 1;\n\n\t\t\tconst currentUnpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\n\t\t\tconst currentUnpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\n\t\t\tconst currentUnpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\n\t\t\t\tconst pixelStart = Math.floor( range.start / componentStride );\n\t\t\t\tconst pixelCount = Math.ceil( range.count / componentStride );\n\n\t\t\t\tconst x = pixelStart % image.width;\n\t\t\t\tconst y = Math.floor( pixelStart / image.width );\n\n\t\t\t\t// Assumes update ranges refer to contiguous memory\n\t\t\t\tconst width = pixelCount;\n\t\t\t\tconst height = 1;\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, x );\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, y );\n\n\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, x, y, width, height, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t\ttexture.clearUpdateRanges();\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, currentUnpackRowLen );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows );\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tlet image = resizeImage( texture.image, false, capabilities.maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tlet glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst dataReady = source.dataReady;\n\t\t\tconst levels = getMipLevels( texture, image );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\tglInternalFormat = getInternalDepthFormat( texture.format === DepthStencilFormat, texture.type );\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\tupdateTexture( texture, image, glFormat, glType );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst layerByteLength = getByteLength( mipmap.width, mipmap.height, texture.format, texture.type );\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst layerData = mipmap.data.subarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ttexture.clearLayerUpdates();\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\tif ( texture.layerUpdates.size > 0 ) {\n\n\t\t\t\t\t\t\tconst layerByteLength = getByteLength( image.width, image.height, texture.format, texture.type );\n\n\t\t\t\t\t\t\tfor ( const layerIndex of texture.layerUpdates ) {\n\n\t\t\t\t\t\t\t\tconst layerData = image.data.subarray(\n\t\t\t\t\t\t\t\t\tlayerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t\t( layerIndex + 1 ) * layerByteLength / image.data.BYTES_PER_ELEMENT\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttexture.clearLayerUpdates();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tconst dimensions = getDimensions( mipmaps[ 0 ] );\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tconst dimensions = getDimensions( image );\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], true, capabilities.maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\n\t\t\tconst useTexStorage = ( texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst dataReady = source.dataReady;\n\t\t\tlet levels = getMipLevels( texture, image );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tconst dimensions = getDimensions( cubeImage[ 0 ] );\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tif ( dataReady ) {\n\n\t\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\ttextureProperties.__renderTarget = renderTarget;\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tconst width = Math.max( 1, renderTarget.width >> level );\n\t\t\tconst height = Math.max( 1, renderTarget.height >> level );\n\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, textureProperties.__webglTexture, level );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t// retrieve the depth attachment types\n\t\t\tconst depthTexture = renderTarget.depthTexture;\n\t\t\tconst depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;\n\t\t\tconst glInternalFormat = getInternalDepthFormat( renderTarget.stencilBuffer, depthType );\n\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n\t\t\t// set up the attachment\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\tconst isUseMultisampledRTT = useMultisampledRTT( renderTarget );\n\t\t\tif ( isUseMultisampledRTT ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( isMultisample ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\tconst textureProperties = properties.get( renderTarget.depthTexture );\n\t\ttextureProperties.__renderTarget = renderTarget;\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! textureProperties.__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = textureProperties.__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t// if the bound depth texture has changed\n\t\tif ( renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture ) {\n\n\t\t\t// fire the dispose event to get rid of stored state associated with the previously bound depth buffer\n\t\t\tconst depthTexture = renderTarget.depthTexture;\n\t\t\tif ( renderTargetProperties.__depthDisposeCallback ) {\n\n\t\t\t\trenderTargetProperties.__depthDisposeCallback();\n\n\t\t\t}\n\n\t\t\t// set up dispose listeners to track when the currently attached buffer is implicitly unbound\n\t\t\tif ( depthTexture ) {\n\n\t\t\t\tconst disposeEvent = () => {\n\n\t\t\t\t\tdelete renderTargetProperties.__boundDepthTexture;\n\t\t\t\t\tdelete renderTargetProperties.__depthDisposeCallback;\n\t\t\t\t\tdepthTexture.removeEventListener( 'dispose', disposeEvent );\n\n\t\t\t\t};\n\n\t\t\t\tdepthTexture.addEventListener( 'dispose', disposeEvent );\n\t\t\t\trenderTargetProperties.__depthDisposeCallback = disposeEvent;\n\n\t\t\t}\n\n\t\t\trenderTargetProperties.__boundDepthTexture = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tconst mipmaps = renderTarget.texture.mipmaps;\n\n\t\t\tif ( mipmaps && mipmaps.length > 0 ) {\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer[ 0 ], renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer[ i ] === undefined ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// attach buffer if it's been created already\n\t\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer[ i ];\n\t\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst mipmaps = renderTarget.texture.mipmaps;\n\n\t\t\t\tif ( mipmaps && mipmaps.length > 0 ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ 0 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer === undefined ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// attach buffer if it's been created already\n\t\t\t\t\tconst glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\t\tconst renderbuffer = renderTargetProperties.__webglDepthbuffer;\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\n\n\t\tif ( ! isMultipleRenderTargets ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = [];\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( glTextureType, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( glTextureType, attachment );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, glTextureType, 0 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment ) ) {\n\n\t\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture );\n\n\t\t\tif ( texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst textures = renderTarget.textures;\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture ) ) {\n\n\t\t\t\tconst targetType = getTargetType( renderTarget );\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( targetType, webglTexture );\n\t\t\t\tgenerateMipmap( targetType );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst invalidationArrayRead = [];\n\tconst invalidationArrayDraw = [];\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.samples > 0 ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = renderTarget.textures;\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\t\tconst isMultipleRenderTargets = ( textures.length > 1 );\n\n\t\t\t\t// If MRT we need to remove FBO attachments\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tconst mipmaps = renderTarget.texture.mipmaps;\n\n\t\t\t\tif ( mipmaps && mipmaps.length > 0 ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ 0 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTarget.resolveDepthBuffer ) {\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\n\t\t\t\t\t\t// resolving stencil is slow with a D3D backend. disable it for all transmission render targets (see #27799)\n\n\t\t\t\t\t\tif ( renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\t\tif ( supportsInvalidateFramebuffer === true ) {\n\n\t\t\t\t\t\tinvalidationArrayRead.length = 0;\n\t\t\t\t\t\tinvalidationArrayDraw.length = 0;\n\n\t\t\t\t\t\tinvalidationArrayRead.push( _gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false ) {\n\n\t\t\t\t\t\t\tinvalidationArrayRead.push( depthStyle );\n\t\t\t\t\t\t\tinvalidationArrayDraw.push( depthStyle );\n\n\t\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, invalidationArrayDraw );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArrayRead );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( capabilities.maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst colorSpace = texture.colorSpace;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true ) return image;\n\n\t\tif ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {\n\n\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction getDimensions( image ) {\n\n\t\tif ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {\n\n\t\t\t// if intrinsic data are not available, fallback to width/height\n\n\t\t\t_imageDimensions.width = image.naturalWidth || image.width;\n\t\t\t_imageDimensions.height = image.naturalHeight || image.height;\n\n\t\t} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {\n\n\t\t\t_imageDimensions.width = image.displayWidth;\n\t\t\t_imageDimensions.height = image.displayHeight;\n\n\t\t} else {\n\n\t\t\t_imageDimensions.width = image.width;\n\t\t\t_imageDimensions.height = image.height;\n\n\t\t}\n\n\t\treturn _imageDimensions;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nexport { WebGLTextures };\n"],"mappings":"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","ignoreList":[]}