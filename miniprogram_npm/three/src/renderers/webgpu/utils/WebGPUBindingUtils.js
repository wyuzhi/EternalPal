import{GPUTextureAspect,GPUTextureViewDimension,GPUTextureSampleType,GPUBufferBindingType,GPUStorageTextureAccess,GPUSamplerBindingType}from"./WebGPUConstants.js";import{FloatType,IntType,UnsignedIntType}from"../../../constants.js";import{NodeAccess}from"../../../nodes/core/constants.js";class WebGPUBindingUtils{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,i=[];let s=0;for(const r of e.bindings){const e={binding:s++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===NodeAccess.READ_WRITE||r.access===NodeAccess.WRITE_ONLY)?t.type=GPUBufferBindingType.Storage:t.type=GPUBufferBindingType.ReadOnlyStorage),e.buffer=t}else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const i=r.access;i===NodeAccess.READ_WRITE?t.access=GPUStorageTextureAccess.ReadWrite:i===NodeAccess.WRITE_ONLY?t.access=GPUStorageTextureAccess.WriteOnly:t.access=GPUStorageTextureAccess.ReadOnly,r.texture.isArrayTexture?t.viewDimension=GPUTextureViewDimension.TwoDArray:r.texture.is3DTexture&&(t.viewDimension=GPUTextureViewDimension.ThreeD),e.storageTexture=t}else if(r.isSampledTexture){const i={},{primarySamples:s}=t.utils.getTextureSampleData(r.texture);if(s>1&&(i.multisampled=!0,r.texture.isDepthTexture||(i.sampleType=GPUTextureSampleType.UnfilterableFloat)),r.texture.isDepthTexture)t.compatibilityMode&&null===r.texture.compareFunction?i.sampleType=GPUTextureSampleType.UnfilterableFloat:i.sampleType=GPUTextureSampleType.Depth;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===IntType?i.sampleType=GPUTextureSampleType.SInt:e===UnsignedIntType?i.sampleType=GPUTextureSampleType.UInt:e===FloatType&&(this.backend.hasFeature("float32-filterable")?i.sampleType=GPUTextureSampleType.Float:i.sampleType=GPUTextureSampleType.UnfilterableFloat)}r.isSampledCubeTexture?i.viewDimension=GPUTextureViewDimension.Cube:r.texture.isArrayTexture||r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?i.viewDimension=GPUTextureViewDimension.TwoDArray:r.isSampledTexture3D&&(i.viewDimension=GPUTextureViewDimension.ThreeD),e.texture=i}else if(r.isSampler){const i={};r.texture.isDepthTexture&&(null!==r.texture.compareFunction?i.type=GPUSamplerBindingType.Comparison:t.compatibilityMode&&(i.type=GPUSamplerBindingType.NonFiltering)),e.sampler=i}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);i.push(e)}return r.createBindGroupLayout({entries:i})}createBindings(e,t,r,i=0){const{backend:s,bindGroupLayoutCache:n}=this,u=s.get(e);let a,o=n.get(e.bindingsReference);void 0===o&&(o=this.createBindingsLayout(e),n.set(e.bindingsReference,o)),r>0&&(void 0===u.groups&&(u.groups=[],u.versions=[]),u.versions[r]===i&&(a=u.groups[r])),void 0===a&&(a=this.createBindGroup(e,o),r>0&&(u.groups[r]=a,u.versions[r]=i)),u.group=a,u.layout=o}updateBinding(e){const t=this.backend,r=t.device,i=e.buffer,s=t.get(e).buffer;r.queue.writeBuffer(s,0,i,0)}createBindGroupIndex(e,t){const r=this.backend.device,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,s=e[0],n=r.createBuffer({label:"bindingCameraIndex_"+s,size:16,usage:i});r.queue.writeBuffer(n,0,e,0);const u=[{binding:0,resource:{buffer:n}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+s,layout:t,entries:u})}createBindGroup(e,t){const r=this.backend,i=r.device;let s=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=i.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:s});e.buffer=n}n.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const i=t.attribute;e.buffer=r.get(i).buffer}n.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isSampledTexture){const e=r.get(t.texture);let u;if(void 0!==e.externalTexture)u=i.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount;let i=`view-${e.texture.width}-${e.texture.height}`;if(e.texture.depthOrArrayLayers>1&&(i+=`-${e.texture.depthOrArrayLayers}`),i+=`-${r}`,u=e[i],void 0===u){const s=GPUTextureAspect.All;let n;n=t.isSampledCubeTexture?GPUTextureViewDimension.Cube:t.isSampledTexture3D?GPUTextureViewDimension.ThreeD:t.texture.isArrayTexture||t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?GPUTextureViewDimension.TwoDArray:GPUTextureViewDimension.TwoD,u=e[i]=e.texture.createView({aspect:s,dimension:n,mipLevelCount:r})}}n.push({binding:s,resource:u})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:s,resource:e.sampler})}s++}return i.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}export default WebGPUBindingUtils;
//# sourceMappingURL=WebGPUBindingUtils.js.map