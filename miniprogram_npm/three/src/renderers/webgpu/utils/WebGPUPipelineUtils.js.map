{"version":3,"file":"node_modules/three/src/renderers/webgpu/utils/WebGPUPipelineUtils.js","names":["BlendColorFactor","OneMinusBlendColorFactor","GPUFrontFace","GPUCullMode","GPUColorWriteFlags","GPUCompareFunction","GPUBlendFactor","GPUBlendOperation","GPUIndexFormat","GPUStencilOperation","FrontSide","BackSide","DoubleSide","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstColorFactor","OneMinusDstColorFactor","DstAlphaFactor","OneMinusDstAlphaFactor","SrcAlphaSaturateFactor","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","KeepStencilOp","ZeroStencilOp","ReplaceStencilOp","InvertStencilOp","IncrementStencilOp","DecrementStencilOp","IncrementWrapStencilOp","DecrementWrapStencilOp","NeverStencilFunc","AlwaysStencilFunc","LessStencilFunc","LessEqualStencilFunc","EqualStencilFunc","GreaterEqualStencilFunc","GreaterStencilFunc","NotEqualStencilFunc","WebGPUPipelineUtils","constructor","backend","this","_activePipelines","WeakMap","setPipeline","pass","pipeline","get","set","_getSampleCount","renderContext","utils","getSampleCountRenderContext","createRenderPipeline","renderObject","promises","object","material","geometry","vertexProgram","fragmentProgram","device","pipelineData","bindGroupLayouts","bindGroup","getBindings","bindingsData","push","layout","vertexBuffers","attributeUtils","createShaderVertexBuffers","blending","transparent","_getBlending","stencilFront","stencilWrite","compare","_getStencilCompare","failOp","_getStencilOperation","stencilFail","depthFailOp","stencilZFail","passOp","stencilZPass","colorWriteMask","_getColorWriteMask","targets","context","textures","i","length","colorFormat","getTextureFormatGPU","format","blend","writeMask","getCurrentColorFormat","vertexModule","module","fragmentModule","primitiveState","_getPrimitiveState","depthCompare","_getDepthCompare","depthStencilFormat","getCurrentDepthStencilFormat","sampleCount","pipelineDescriptor","label","name","type","id","vertex","Object","assign","buffers","fragment","primitive","multisample","count","alphaToCoverageEnabled","alphaToCoverage","createPipelineLayout","depthStencil","renderDepth","depth","renderStencil","stencil","depthWriteEnabled","depthWrite","stencilBack","stencilReadMask","stencilFuncMask","stencilWriteMask","polygonOffset","depthBias","polygonOffsetUnits","depthBiasSlopeScale","polygonOffsetFactor","depthBiasClamp","p","Promise","resolve","createRenderPipelineAsync","then","createBundleEncoder","descriptor","colorFormats","createRenderBundleEncoder","createComputePipeline","bindings","computeProgram","pipelineGPU","bindingsGroup","compute","color","alpha","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","srcFactor","_getBlendFactor","dstFactor","operation","_getBlendOperation","setBlend","srcRGB","dstRGB","srcAlpha","dstAlpha","Add","premultipliedAlpha","One","OneMinusSrcAlpha","Zero","OneMinusSrc","Dst","SrcAlpha","console","error","undefined","blendFactor","Src","OneMinusDst","DstAlpha","OneMinusDstAlpha","SrcAlphaSaturated","Constant","OneMinusConstant","stencilCompare","stencilFunc","Never","Always","Less","LessEqual","Equal","GreaterEqual","Greater","NotEqual","op","stencilOperation","Keep","Replace","Invert","IncrementClamp","DecrementClamp","IncrementWrap","DecrementWrap","blendOperation","Subtract","ReverseSubtract","Min","Max","topology","getPrimitiveTopology","index","isLine","isLineSegments","stripIndexFormat","array","Uint16Array","Uint16","Uint32","side","frontFace","CCW","cullMode","Back","Front","None","colorWrite","All","depthTest","depthFunc"],"sources":["node_modules/three/src/renderers/webgpu/utils/WebGPUPipelineUtils.js"],"sourcesContent":["import { BlendColorFactor, OneMinusBlendColorFactor, } from '../../common/Constants.js';\n\nimport {\n\tGPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation\n} from './WebGPUConstants.js';\n\nimport {\n\tFrontSide, BackSide, DoubleSide,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor,\n\tOneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor,\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc\n} from '../../../constants.js';\n\n/**\n * A WebGPU backend utility module for managing pipelines.\n *\n * @private\n */\nclass WebGPUPipelineUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t\t/**\n\t\t * A Weak Map that tracks the active pipeline for render or compute passes.\n\t\t *\n\t\t * @private\n\t\t * @type {WeakMap<(GPURenderPassEncoder|GPUComputePassEncoder),(GPURenderPipeline|GPUComputePipeline)>}\n\t\t */\n\t\tthis._activePipelines = new WeakMap();\n\n\t}\n\n\t/**\n\t * Sets the given pipeline for the given pass. The method makes sure to only set the\n\t * pipeline when necessary.\n\t *\n\t * @param {(GPURenderPassEncoder|GPUComputePassEncoder)} pass - The pass encoder.\n\t * @param {(GPURenderPipeline|GPUComputePipeline)} pipeline - The pipeline.\n\t */\n\tsetPipeline( pass, pipeline ) {\n\n\t\tconst currentPipeline = this._activePipelines.get( pass );\n\n\t\tif ( currentPipeline !== pipeline ) {\n\n\t\t\tpass.setPipeline( pipeline );\n\n\t\t\tthis._activePipelines.set( pass, pipeline );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns the sample count derived from the given render context.\n\t *\n\t * @private\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {number} The sample count.\n\t */\n\t_getSampleCount( renderContext ) {\n\n\t\treturn this.backend.utils.getSampleCountRenderContext( renderContext );\n\n\t}\n\n\t/**\n\t * Creates a render pipeline for the given render object.\n\t *\n\t * @param {RenderObject} renderObject - The render object.\n\t * @param {Array<Promise>} promises - An array of compilation promises which are used in `compileAsync()`.\n\t */\n\tcreateRenderPipeline( renderObject, promises ) {\n\n\t\tconst { object, material, geometry, pipeline } = renderObject;\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\t\tconst utils = backend.utils;\n\n\t\tconst pipelineData = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindGroup of renderObject.getBindings() ) {\n\n\t\t\tconst bindingsData = backend.get( bindGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );\n\n\t\t// blending\n\n\t\tlet blending;\n\n\t\tif ( material.blending !== NoBlending && ( material.blending !== NormalBlending || material.transparent !== false ) ) {\n\n\t\t\tblending = this._getBlending( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\n\t\tconst targets = [];\n\n\t\tif ( renderObject.context.textures !== null ) {\n\n\t\t\tconst textures = renderObject.context.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst colorFormat = utils.getTextureFormatGPU( textures[ i ] );\n\n\t\t\t\ttargets.push( {\n\t\t\t\t\tformat: colorFormat,\n\t\t\t\t\tblend: blending,\n\t\t\t\t\twriteMask: colorWriteMask\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\n\t\t\ttargets.push( {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: blending,\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} );\n\n\t\t}\n\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\n\t\tconst sampleCount = this._getSampleCount( renderObject.context );\n\n\t\tconst pipelineDescriptor = {\n\t\t\tlabel: `renderPipeline_${ material.name || material.type }_${ material.id }`,\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount,\n\t\t\t\talphaToCoverageEnabled: material.alphaToCoverage && sampleCount > 1\n\t\t\t},\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t};\n\n\n\t\tconst depthStencil = {};\n\t\tconst renderDepth = renderObject.context.depth;\n\t\tconst renderStencil = renderObject.context.stencil;\n\n\t\tif ( renderDepth === true || renderStencil === true ) {\n\n\t\t\tif ( renderDepth === true ) {\n\n\t\t\t\tdepthStencil.format = depthStencilFormat;\n\t\t\t\tdepthStencil.depthWriteEnabled = material.depthWrite;\n\t\t\t\tdepthStencil.depthCompare = depthCompare;\n\n\t\t\t}\n\n\t\t\tif ( renderStencil === true ) {\n\n\t\t\t\tdepthStencil.stencilFront = stencilFront;\n\t\t\t\tdepthStencil.stencilBack = {}; // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tdepthStencil.stencilReadMask = material.stencilFuncMask;\n\t\t\t\tdepthStencil.stencilWriteMask = material.stencilWriteMask;\n\n\t\t\t}\n\n\t\t\tif ( material.polygonOffset === true ) {\n\n\t\t\t\tdepthStencil.depthBias = material.polygonOffsetUnits;\n\t\t\t\tdepthStencil.depthBiasSlopeScale = material.polygonOffsetFactor;\n\t\t\t\tdepthStencil.depthBiasClamp = 0; // three.js does not provide an API to configure this value\n\n\t\t\t}\n\n\t\t\tpipelineDescriptor.depthStencil = depthStencil;\n\n\t\t}\n\n\n\t\tif ( promises === null ) {\n\n\t\t\tpipelineData.pipeline = device.createRenderPipeline( pipelineDescriptor );\n\n\t\t} else {\n\n\t\t\tconst p = new Promise( ( resolve /*, reject*/ ) => {\n\n\t\t\t\tdevice.createRenderPipelineAsync( pipelineDescriptor ).then( pipeline => {\n\n\t\t\t\t\tpipelineData.pipeline = pipeline;\n\t\t\t\t\tresolve();\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\tpromises.push( p );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Creates GPU render bundle encoder for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @param {?string} [label='renderBundleEncoder'] - The label.\n\t * @return {GPURenderBundleEncoder} The GPU render bundle encoder.\n\t */\n\tcreateBundleEncoder( renderContext, label = 'renderBundleEncoder' ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { utils, device } = backend;\n\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderContext );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderContext );\n\t\tconst sampleCount = this._getSampleCount( renderContext );\n\n\t\tconst descriptor = {\n\t\t\tlabel: label,\n\t\t\tcolorFormats: [ colorFormat ],\n\t\t\tdepthStencilFormat,\n\t\t\tsampleCount\n\t\t};\n\n\t\treturn device.createRenderBundleEncoder( descriptor );\n\n\t}\n\n\t/**\n\t * Creates a compute pipeline for the given compute node.\n\t *\n\t * @param {ComputePipeline} pipeline - The compute pipeline.\n\t * @param {Array<BindGroup>} bindings - The bindings.\n\t */\n\tcreateComputePipeline( pipeline, bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\n\n\t\tconst pipelineGPU = backend.get( pipeline );\n\n\t\t// bind group layouts\n\n\t\tconst bindGroupLayouts = [];\n\n\t\tfor ( const bindingsGroup of bindings ) {\n\n\t\t\tconst bindingsData = backend.get( bindingsGroup );\n\n\t\t\tbindGroupLayouts.push( bindingsData.layout );\n\n\t\t}\n\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\n\t\t\tcompute: computeProgram,\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\t/**\n\t * Returns the blending state as a descriptor object required\n\t * for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {Object} The blending state.\n\t */\n\t_getBlending( material ) {\n\n\t\tlet color, alpha;\n\n\t\tconst blending = material.blending;\n\t\tconst blendSrc = material.blendSrc;\n\t\tconst blendDst = material.blendDst;\n\t\tconst blendEquation = material.blendEquation;\n\n\n\t\tif ( blending === CustomBlending ) {\n\n\t\t\tconst blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;\n\t\t\tconst blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;\n\t\t\tconst blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;\n\n\t\t\tcolor = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrc ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDst ),\n\t\t\t\toperation: this._getBlendOperation( blendEquation )\n\t\t\t};\n\n\t\t\talpha = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\t\tconst setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {\n\n\t\t\t\tcolor = {\n\t\t\t\t\tsrcFactor: srcRGB,\n\t\t\t\t\tdstFactor: dstRGB,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\talpha = {\n\t\t\t\t\tsrcFactor: srcAlpha,\n\t\t\t\t\tdstFactor: dstAlpha,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Dst, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tconsole.error( 'THREE.WebGPURenderer: SubtractiveBlending requires material.premultipliedAlpha = true' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tconsole.error( 'THREE.WebGPURenderer: MultiplyBlending requires material.premultipliedAlpha = true' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( color !== undefined && alpha !== undefined ) {\n\n\t\t\treturn { color, alpha };\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );\n\n\t\t}\n\n\t}\n\t/**\n\t * Returns the GPU blend factor which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} blend - The blend factor as a three.js constant.\n\t * @return {string} The GPU blend factor.\n\t */\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Src;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrc;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Dst;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDst;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Constant;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusConstant;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t/**\n\t * Returns the GPU stencil compare function which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU stencil compare function.\n\t */\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t/**\n\t * Returns the GPU stencil operation which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} op - A three.js constant defining the stencil operation.\n\t * @return {string} The GPU stencil operation.\n\t */\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t/**\n\t * Returns the GPU blend operation which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {number} blendEquation - A three.js constant defining the blend equation.\n\t * @return {string} The GPU blend operation.\n\t */\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t/**\n\t * Returns the primitive state as a descriptor object required\n\t * for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Object3D} object - The 3D object.\n\t * @param {BufferGeometry} geometry - The geometry.\n\t * @param {Material} material - The material.\n\t * @return {Object} The primitive state.\n\t */\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\t\tconst utils = this.backend.utils;\n\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\n\n\t\tif ( geometry.index !== null && object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tdescriptor.stripIndexFormat = ( geometry.index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t/**\n\t * Returns the GPU color write mask which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {number} The GPU color write mask.\n\t */\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t/**\n\t * Returns the GPU depth compare function which is required for the pipeline creation.\n\t *\n\t * @private\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU depth compare function.\n\t */\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n}\n\nexport default WebGPUPipelineUtils;\n"],"mappings":"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","ignoreList":[]}