import DataMap from"../../common/DataMap.js";import{GPUTextureViewDimension,GPUIndexFormat,GPUFilterMode,GPUPrimitiveTopology,GPULoadOp,GPUStoreOp}from"./WebGPUConstants.js";class WebGPUTexturePassUtils extends DataMap{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:GPUFilterMode.Linear}),this.flipYSampler=e.createSampler({minFilter:GPUFilterMode.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:GPUPrimitiveTopology.TriangleStrip,stripIndexFormat:GPUIndexFormat.Uint32},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:GPUPrimitiveTopology.TriangleStrip,stripIndexFormat:GPUIndexFormat.Uint32},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,i=0){const r=t.format,{width:n,height:a}=t.size,o=this.getTransferPipeline(r),s=this.getFlipYPipeline(r),l=this.device.createTexture({size:{width:n,height:a,depthOrArrayLayers:1},format:r,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),p=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:i}),m=l.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:0}),d=this.device.createCommandEncoder({}),u=(e,t,i)=>{const r=e.getBindGroupLayout(0),n=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),a=d.beginRenderPass({colorAttachments:[{view:i,loadOp:GPULoadOp.Clear,storeOp:GPUStoreOp.Store,clearValue:[0,0,0,0]}]});a.setPipeline(e),a.setBindGroup(0,n),a.draw(4,1,0,0),a.end()};u(o,p,m),u(s,m,p),this.device.queue.submit([d.finish()]),l.destroy()}generateMipmaps(e,t,i=0){const r=this.get(e);void 0===r.useCount&&(r.useCount=0,r.layers=[]);const n=r.layers[i]||this._mipmapCreateBundles(e,t,i),a=this.device.createCommandEncoder({});this._mipmapRunBundles(a,n),this.device.queue.submit([a.finish()]),0!==r.useCount&&(r.layers[i]=n),r.useCount++}_mipmapCreateBundles(e,t,i){const r=this.getTransferPipeline(t.format),n=r.getBindGroupLayout(0);let a=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:i});const o=[];for(let s=1;s<t.mipLevelCount;s++){const l=this.device.createBindGroup({layout:n,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:a}]}),p=e.createView({baseMipLevel:s,mipLevelCount:1,dimension:GPUTextureViewDimension.TwoD,baseArrayLayer:i}),m={colorAttachments:[{view:p,loadOp:GPULoadOp.Clear,storeOp:GPUStoreOp.Store,clearValue:[0,0,0,0]}]},d=this.device.createRenderBundleEncoder({colorFormats:[t.format]});d.setPipeline(r),d.setBindGroup(0,l),d.draw(4,1,0,0),o.push({renderBundles:[d.finish()],passDescriptor:m}),a=p}return o}_mipmapRunBundles(e,t){const i=t.length;for(let r=0;r<i;r++){const i=t[r],n=e.beginRenderPass(i.passDescriptor);n.executeBundles(i.renderBundles),n.end()}}}export default WebGPUTexturePassUtils;
//# sourceMappingURL=WebGPUTexturePassUtils.js.map