{"version":3,"file":"node_modules/three/src/renderers/webgpu/utils/WebGPUUtils.js","names":["HalfFloatType","UnsignedByteType","GPUPrimitiveTopology","GPUTextureFormat","WebGPUUtils","constructor","backend","this","getCurrentDepthStencilFormat","renderContext","format","depthTexture","getTextureFormatGPU","depth","stencil","Depth24PlusStencil8","Depth24Plus","texture","get","getTextureSampleData","samples","isFramebufferTexture","isDepthTexture","renderTarget","renderer","getRenderTarget","isMSAA","primarySamples","getCurrentColorFormat","textures","getPreferredCanvasFormat","getCurrentColorSpace","colorSpace","outputColorSpace","getPrimitiveTopology","object","material","isPoints","PointList","isLineSegments","isMesh","wireframe","LineList","isLine","LineStrip","TriangleList","getSampleCount","sampleCount","getSampleCountRenderContext","outputType","parameters","undefined","navigator","gpu","BGRA8Unorm","RGBA16Float","Error"],"sources":["node_modules/three/src/renderers/webgpu/utils/WebGPUUtils.js"],"sourcesContent":["import { HalfFloatType, UnsignedByteType } from '../../../constants.js';\nimport { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\n\n/**\n * A WebGPU backend utility module with common helpers.\n *\n * @private\n */\nclass WebGPUUtils {\n\n\t/**\n\t * Constructs a new utility object.\n\t *\n\t * @param {WebGPUBackend} backend - The WebGPU backend.\n\t */\n\tconstructor( backend ) {\n\n\t\t/**\n\t\t * A reference to the WebGPU backend.\n\t\t *\n\t\t * @type {WebGPUBackend}\n\t\t */\n\t\tthis.backend = backend;\n\n\t}\n\n\t/**\n\t * Returns the depth/stencil GPU format for the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The depth/stencil GPU texture format.\n\t */\n\tgetCurrentDepthStencilFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\n\n\t\t} else if ( renderContext.depth && renderContext.stencil ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t} else if ( renderContext.depth ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24Plus;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t/**\n\t * Returns the GPU format for the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {string} The GPU texture format.\n\t */\n\tgetTextureFormatGPU( texture ) {\n\n\t\treturn this.backend.get( texture ).format;\n\n\t}\n\n\t/**\n\t * Returns an object that defines the multi-sampling state of the given texture.\n\t *\n\t * @param {Texture} texture - The texture.\n\t * @return {Object} The multi-sampling state.\n\t */\n\tgetTextureSampleData( texture ) {\n\n\t\tlet samples;\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tsamples = 1;\n\n\t\t} else if ( texture.isDepthTexture && ! texture.renderTarget ) {\n\n\t\t\tconst renderer = this.backend.renderer;\n\t\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\t\tsamples = renderTarget ? renderTarget.samples : renderer.samples;\n\n\t\t} else if ( texture.renderTarget ) {\n\n\t\t\tsamples = texture.renderTarget.samples;\n\n\t\t}\n\n\t\tsamples = samples || 1;\n\n\t\tconst isMSAA = samples > 1 && texture.renderTarget !== null && ( texture.isDepthTexture !== true && texture.isFramebufferTexture !== true );\n\t\tconst primarySamples = isMSAA ? 1 : samples;\n\n\t\treturn { samples, primarySamples, isMSAA };\n\n\t}\n\n\t/**\n\t * Returns the default color attachment's GPU format of the current render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The GPU texture format of the default color attachment.\n\t */\n\tgetCurrentColorFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.textures[ 0 ] );\n\n\t\t} else {\n\n\t\t\tformat = this.getPreferredCanvasFormat(); // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t/**\n\t * Returns the output color space of the current render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {string} The output color space.\n\t */\n\tgetCurrentColorSpace( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.textures[ 0 ].colorSpace;\n\n\t\t}\n\n\t\treturn this.backend.renderer.outputColorSpace;\n\n\t}\n\n\t/**\n\t * Returns GPU primitive topology for the given object and material.\n\t *\n\t * @param {Object3D} object - The 3D object.\n\t * @param {Material} material - The material.\n\t * @return {string} The GPU primitive topology.\n\t */\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\t/**\n\t * Returns a modified sample count from the given sample count value.\n\t *\n\t * That is required since WebGPU only supports either 1 or 4.\n\t *\n\t * @param {number} sampleCount - The input sample count.\n\t * @return {number} The (potentially updated) output sample count.\n\t */\n\tgetSampleCount( sampleCount ) {\n\n\t\treturn sampleCount >= 4 ? 4 : 1;\n\n\t}\n\n\t/**\n\t * Returns the sample count of the given render context.\n\t *\n\t * @param {RenderContext} renderContext - The render context.\n\t * @return {number} The sample count.\n\t */\n\tgetSampleCountRenderContext( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn this.getSampleCount( renderContext.sampleCount );\n\n\t\t}\n\n\t\treturn this.getSampleCount( this.backend.renderer.samples );\n\n\t}\n\n\t/**\n\t * Returns the preferred canvas format.\n\t *\n\t * There is a separate method for this so it's possible to\n\t * honor edge cases for specific devices.\n\t *\n\t * @return {string} The GPU texture format of the canvas.\n\t */\n\tgetPreferredCanvasFormat() {\n\n\t\tconst outputType = this.backend.parameters.outputType;\n\n\t\tif ( outputType === undefined ) {\n\n\t\t\treturn navigator.gpu.getPreferredCanvasFormat();\n\n\t\t} else if ( outputType === UnsignedByteType ) {\n\n\t\t\treturn GPUTextureFormat.BGRA8Unorm;\n\n\t\t} else if ( outputType === HalfFloatType ) {\n\n\t\t\treturn GPUTextureFormat.RGBA16Float;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unsupported outputType' );\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGPUUtils;\n"],"mappings":"OAASA,cAAeC,qBAAwB,+BACvCC,qBAAsBC,qBAAwB,uBAOvD,MAAMC,YAOL,WAAAC,CAAaC,GAOZC,KAAKD,QAAUA,CAEhB,CAQA,4BAAAE,CAA8BC,GAE7B,IAAIC,EAgBJ,OAdoC,OAA/BD,EAAcE,aAElBD,EAASH,KAAKK,oBAAqBH,EAAcE,cAEtCF,EAAcI,OAASJ,EAAcK,QAEhDJ,EAASP,iBAAiBY,oBAEfN,EAAcI,QAEzBH,EAASP,iBAAiBa,aAIpBN,CAER,CAQA,mBAAAE,CAAqBK,GAEpB,OAAOV,KAAKD,QAAQY,IAAKD,GAAUP,MAEpC,CAQA,oBAAAS,CAAsBF,GAErB,IAAIG,EAEJ,GAAKH,EAAQI,qBAEZD,EAAU,OAEJ,GAAKH,EAAQK,iBAAoBL,EAAQM,aAAe,CAE9D,MAAMC,EAAWjB,KAAKD,QAAQkB,SACxBD,EAAeC,EAASC,kBAE9BL,EAAUG,EAAeA,EAAaH,QAAUI,EAASJ,OAE1D,MAAYH,EAAQM,eAEnBH,EAAUH,EAAQM,aAAaH,SAIhCA,EAAUA,GAAW,EAErB,MAAMM,EAASN,EAAU,GAA8B,OAAzBH,EAAQM,eAAsD,IAA3BN,EAAQK,iBAA4D,IAAjCL,EAAQI,qBAG5G,MAAO,CAAED,UAASO,eAFKD,EAAS,EAAIN,EAEFM,SAEnC,CAQA,qBAAAE,CAAuBnB,GAEtB,IAAIC,EAYJ,OARCA,EAF+B,OAA3BD,EAAcoB,SAETtB,KAAKK,oBAAqBH,EAAcoB,SAAU,IAIlDtB,KAAKuB,2BAIRpB,CAER,CAQA,oBAAAqB,CAAsBtB,GAErB,OAAgC,OAA3BA,EAAcoB,SAEXpB,EAAcoB,SAAU,GAAIG,WAI7BzB,KAAKD,QAAQkB,SAASS,gBAE9B,CASA,oBAAAC,CAAsBC,EAAQC,GAE7B,OAAKD,EAAOE,SAAkBnC,qBAAqBoC,UACzCH,EAAOI,gBAAoBJ,EAAOK,SAAiC,IAAvBJ,EAASK,UAA8BvC,qBAAqBwC,SACxGP,EAAOQ,OAAgBzC,qBAAqB0C,UAC5CT,EAAOK,OAAgBtC,qBAAqB2C,kBAAjD,CAEN,CAUA,cAAAC,CAAgBC,GAEf,OAAOA,GAAe,EAAI,EAAI,CAE/B,CAQA,2BAAAC,CAA6BvC,GAE5B,OAAgC,OAA3BA,EAAcoB,SAEXtB,KAAKuC,eAAgBrC,EAAcsC,aAIpCxC,KAAKuC,eAAgBvC,KAAKD,QAAQkB,SAASJ,QAEnD,CAUA,wBAAAU,GAEC,MAAMmB,EAAa1C,KAAKD,QAAQ4C,WAAWD,WAE3C,QAAoBE,IAAfF,EAEJ,OAAOG,UAAUC,IAAIvB,2BAEf,GAAKmB,IAAehD,iBAE1B,OAAOE,iBAAiBmD,WAElB,GAAKL,IAAejD,cAE1B,OAAOG,iBAAiBoD,YAIxB,MAAM,IAAIC,MAAO,yBAInB,iBAIcpD","ignoreList":[]}