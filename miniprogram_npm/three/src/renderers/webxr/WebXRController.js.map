{"version":3,"file":"node_modules/three/src/renderers/webxr/WebXRController.js","names":["Vector3","Group","_moveEvent","type","WebXRController","constructor","this","_targetRay","_grip","_hand","getHandSpace","matrixAutoUpdate","visible","joints","inputState","pinching","getTargetRaySpace","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","getGripSpace","dispatchEvent","event","connect","inputSource","hand","inputjoint","values","_getHandJoint","data","disconnect","update","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","session","visibilityState","jointPose","getJointPose","joint","matrix","fromArray","transform","decompose","position","rotation","scale","matrixWorldNeedsUpdate","jointRadius","radius","indexTip","thumbTip","distance","distanceTo","distanceToPinch","threshold","handedness","target","gripSpace","getPose","copy","targetRaySpace","undefined","jointName","add"],"sources":["node_modules/three/src/renderers/webxr/WebXRController.js"],"sourcesContent":["import { Vector3 } from '../../math/Vector3.js';\nimport { Group } from '../../objects/Group.js';\n\nconst _moveEvent = { type: 'move' };\n\n/**\n * Class for representing a XR controller with its\n * different coordinate systems.\n *\n * @private\n */\nclass WebXRController {\n\n\t/**\n\t * Constructs a new XR controller.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * A group representing the target ray space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._targetRay = null;\n\n\t\t/**\n\t\t * A group representing the grip space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._grip = null;\n\n\t\t/**\n\t\t * A group representing the hand space\n\t\t * of the XR controller.\n\t\t *\n\t\t * @private\n\t\t * @type {?Group}\n\t\t * @default null\n\t\t */\n\t\tthis._hand = null;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand space of the XR controller.\n\t *\n\t * @return {Group} A group representing the hand space of the XR controller.\n\t */\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\t/**\n\t * Returns a group representing the target ray space of the XR controller.\n\t *\n\t * @return {Group} A group representing the target ray space of the XR controller.\n\t */\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\t/**\n\t * Returns a group representing the grip space of the XR controller.\n\t *\n\t * @return {Group} A group representing the grip space of the XR controller.\n\t */\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\t/**\n\t * Dispatches the given event to the groups representing\n\t * the different coordinate spaces of the XR controller.\n\t *\n\t * @param {Object} event - The event to dispatch.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Connects the controller with the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Disconnects the controller from the given XR input source.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates the controller with the given input source, XR frame and reference space.\n\t * This updates the transformations of the groups that represent the different\n\t * coordinate systems of the controller.\n\t *\n\t * @param {XRInputSource} inputSource - The input source.\n\t * @param {XRFrame} frame - The XR frame.\n\t * @param {XRReferenceSpace} referenceSpace - The reference space.\n\t * @return {WebXRController} A reference to this instance.\n\t */\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Returns a group representing the hand joint for the given input joint.\n\t *\n\t * @private\n\t * @param {Group} hand - The group representing the hand space.\n\t * @param {XRJointSpace} inputjoint - The hand joint data.\n\t * @return {Group} A group representing the hand joint for the given input joint.\n\t */\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\n\nexport { WebXRController };\n"],"mappings":"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","ignoreList":[]}