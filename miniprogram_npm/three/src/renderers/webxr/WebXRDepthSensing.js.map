{"version":3,"file":"node_modules/three/src/renderers/webxr/WebXRDepthSensing.js","names":["PlaneGeometry","ShaderMaterial","Mesh","ExternalTexture","_occlusion_vertex","_occlusion_fragment","WebXRDepthSensing","constructor","this","texture","mesh","depthNear","depthFar","init","depthData","renderState","getMesh","cameraXR","viewport","cameras","material","vertexShader","fragmentShader","uniforms","depthColor","value","depthWidth","z","depthHeight","w","reset","getDepthTexture"],"sources":["node_modules/three/src/renderers/webxr/WebXRDepthSensing.js"],"sourcesContent":["import { PlaneGeometry } from '../../geometries/PlaneGeometry.js';\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { ExternalTexture } from '../../textures/ExternalTexture.js';\n\nconst _occlusion_vertex = `\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}`;\n\nconst _occlusion_fragment = `\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}`;\n\n/**\n * A XR module that manages the access to the Depth Sensing API.\n */\nclass WebXRDepthSensing {\n\n\t/**\n\t * Constructs a new depth sensing module.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * An opaque texture representing the depth of the user's environment.\n\t\t *\n\t\t * @type {?ExternalTexture}\n\t\t */\n\t\tthis.texture = null;\n\n\t\t/**\n\t\t * A plane mesh for visualizing the depth texture.\n\t\t *\n\t\t * @type {?Mesh}\n\t\t */\n\t\tthis.mesh = null;\n\n\t\t/**\n\t\t * The depth near value.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.depthNear = 0;\n\n\t\t/**\n\t\t * The depth near far.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.depthFar = 0;\n\n\t}\n\n\t/**\n\t * Inits the depth sensing module\n\t *\n\t * @param {XRWebGLDepthInformation} depthData - The XR depth data.\n\t * @param {XRRenderState} renderState - The XR render state.\n\t */\n\tinit( depthData, renderState ) {\n\n\t\tif ( this.texture === null ) {\n\n\t\t\tconst texture = new ExternalTexture( depthData.texture );\n\n\t\t\tif ( ( depthData.depthNear !== renderState.depthNear ) || ( depthData.depthFar !== renderState.depthFar ) ) {\n\n\t\t\t\tthis.depthNear = depthData.depthNear;\n\t\t\t\tthis.depthFar = depthData.depthFar;\n\n\t\t\t}\n\n\t\t\tthis.texture = texture;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns a plane mesh that visualizes the depth texture.\n\t *\n\t * @param {ArrayCamera} cameraXR - The XR camera.\n\t * @return {?Mesh} The plane mesh.\n\t */\n\tgetMesh( cameraXR ) {\n\n\t\tif ( this.texture !== null ) {\n\n\t\t\tif ( this.mesh === null ) {\n\n\t\t\t\tconst viewport = cameraXR.cameras[ 0 ].viewport;\n\t\t\t\tconst material = new ShaderMaterial( {\n\t\t\t\t\tvertexShader: _occlusion_vertex,\n\t\t\t\t\tfragmentShader: _occlusion_fragment,\n\t\t\t\t\tuniforms: {\n\t\t\t\t\t\tdepthColor: { value: this.texture },\n\t\t\t\t\t\tdepthWidth: { value: viewport.z },\n\t\t\t\t\t\tdepthHeight: { value: viewport.w }\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tthis.mesh = new Mesh( new PlaneGeometry( 20, 20 ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this.mesh;\n\n\t}\n\n\t/**\n\t * Resets the module\n\t */\n\treset() {\n\n\t\tthis.texture = null;\n\t\tthis.mesh = null;\n\n\t}\n\n\t/**\n\t * Returns a texture representing the depth of the user's environment.\n\t *\n\t * @return {?ExternalTexture} The depth texture.\n\t */\n\tgetDepthTexture() {\n\n\t\treturn this.texture;\n\n\t}\n\n}\n\nexport { WebXRDepthSensing };\n"],"mappings":"OAASA,kBAAqB,2CACrBC,mBAAsB,2CACtBC,SAAY,+BACZC,oBAAuB,oCAEhC,MAAMC,kBAAoB,iEAOpBC,oBAAsB,yZAwB5B,MAAMC,kBAKL,WAAAC,GAOCC,KAAKC,QAAU,KAOfD,KAAKE,KAAO,KAOZF,KAAKG,UAAY,EAOjBH,KAAKI,SAAW,CAEjB,CAQA,IAAAC,CAAMC,EAAWC,GAEhB,GAAsB,OAAjBP,KAAKC,QAAmB,CAE5B,MAAMA,EAAU,IAAIN,gBAAiBW,EAAUL,SAExCK,EAAUH,YAAcI,EAAYJ,WAAiBG,EAAUF,WAAaG,EAAYH,WAE9FJ,KAAKG,UAAYG,EAAUH,UAC3BH,KAAKI,SAAWE,EAAUF,UAI3BJ,KAAKC,QAAUA,CAEhB,CAED,CAQA,OAAAO,CAASC,GAER,GAAsB,OAAjBT,KAAKC,SAEU,OAAdD,KAAKE,KAAgB,CAEzB,MAAMQ,EAAWD,EAASE,QAAS,GAAID,SACjCE,EAAW,IAAInB,eAAgB,CACpCoB,aAAcjB,kBACdkB,eAAgBjB,oBAChBkB,SAAU,CACTC,WAAY,CAAEC,MAAOjB,KAAKC,SAC1BiB,WAAY,CAAED,MAAOP,EAASS,GAC9BC,YAAa,CAAEH,MAAOP,EAASW,MAIjCrB,KAAKE,KAAO,IAAIR,KAAM,IAAIF,cAAe,GAAI,IAAMoB,EAEpD,CAID,OAAOZ,KAAKE,IAEb,CAKA,KAAAoB,GAECtB,KAAKC,QAAU,KACfD,KAAKE,KAAO,IAEb,CAOA,eAAAqB,GAEC,OAAOvB,KAAKC,OAEb,SAIQH","ignoreList":[]}