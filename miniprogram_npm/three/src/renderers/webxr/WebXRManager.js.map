{"version":3,"file":"node_modules/three/src/renderers/webxr/WebXRManager.js","names":["ArrayCamera","EventDispatcher","PerspectiveCamera","Vector2","Vector3","Vector4","RAD2DEG","WebGLAnimation","WebGLRenderTarget","WebXRController","DepthTexture","ExternalTexture","DepthFormat","DepthStencilFormat","RGBAFormat","UnsignedByteType","UnsignedIntType","UnsignedInt248Type","WebXRDepthSensing","WebXRManager","constructor","renderer","gl","super","scope","this","session","framebufferScaleFactor","referenceSpace","referenceSpaceType","foveation","customReferenceSpace","pose","glBinding","glProjLayer","glBaseLayer","xrFrame","depthSensing","cameraAccessTextures","attributes","getContextAttributes","initialRenderTarget","newRenderTarget","controllers","controllerInputSources","currentSize","currentPixelRatio","cameraL","viewport","cameraR","cameras","cameraXR","_currentDepthNear","_currentDepthFar","onSessionEvent","event","controllerIndex","indexOf","inputSource","controller","undefined","update","frame","dispatchEvent","type","data","onSessionEnd","removeEventListener","onInputSourcesChange","i","length","disconnect","reset","key","setRenderTarget","animation","stop","isPresenting","setPixelRatio","setSize","width","height","removed","index","added","push","connect","cameraAutoUpdate","enabled","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","value","console","warn","setReferenceSpaceType","getReferenceSpace","setReferenceSpace","space","getBaseLayer","getBinding","getFrame","getSession","setSession","async","getRenderTarget","addEventListener","xrCompatible","makeXRCompatible","getPixelRatio","getSize","XRWebGLBinding","prototype","depthFormat","depthType","glDepthFormat","depth","stencil","DEPTH24_STENCIL8","DEPTH_COMPONENT24","projectionlayerInit","colorFormat","RGBA8","scaleFactor","createProjectionLayer","updateRenderState","layers","textureWidth","textureHeight","format","depthTexture","stencilBuffer","colorSpace","outputColorSpace","samples","antialias","resolveDepthBuffer","ignoreDepthValues","resolveStencilBuffer","layerInit","alpha","XRWebGLLayer","baseLayer","framebufferWidth","framebufferHeight","isXRRenderTarget","setFoveation","requestReferenceSpace","setContext","start","getEnvironmentBlendMode","environmentBlendMode","getDepthTexture","cameraLPos","cameraRPos","updateCamera","camera","parent","matrixWorld","copy","matrix","multiplyMatrices","matrixWorldInverse","invert","depthNear","near","depthFar","far","texture","mask","setFromMatrixPosition","ipd","distanceTo","projL","projectionMatrix","elements","projR","topFov","bottomFov","leftFov","rightFov","left","right","zOffset","xOffset","decompose","position","quaternion","scale","translateX","translateZ","compose","projectionMatrixInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","setProjectionFromUnion","multiply","updateMatrixWorld","isPerspectiveCamera","fov","Math","atan","zoom","updateUserCamera","getCamera","getFoveation","fixedFoveation","hasDepthSensing","getDepthSensingMesh","getMesh","getCameraTexture","xrCamera","onAnimationFrameCallback","setAnimationLoop","time","getViewerPose","views","setRenderTargetFramebuffer","framebuffer","cameraXRNeedsUpdate","view","getViewport","glSubImage","getViewSubImage","setRenderTargetTextures","colorTexture","depthStencilTexture","enable","fromArray","transform","set","x","y","enabledFeatures","includes","depthUsage","depthData","getDepthInformation","isValid","init","renderState","state","unbindTexture","cameraTex","glTexture","getCameraImage","sourceTexture","detectedPlanes","callback","dispose"],"sources":["node_modules/three/src/renderers/webxr/WebXRManager.js"],"sourcesContent":["import { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { RAD2DEG } from '../../math/MathUtils.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\nimport { WebGLRenderTarget } from '../WebGLRenderTarget.js';\nimport { WebXRController } from './WebXRController.js';\nimport { DepthTexture } from '../../textures/DepthTexture.js';\nimport { ExternalTexture } from '../../textures/ExternalTexture.js';\nimport { DepthFormat, DepthStencilFormat, RGBAFormat, UnsignedByteType, UnsignedIntType, UnsignedInt248Type } from '../../constants.js';\nimport { WebXRDepthSensing } from './WebXRDepthSensing.js';\n\n/**\n * This class represents an abstraction of the WebXR Device API and is\n * internally used by {@link WebGLRenderer}. `WebXRManager` also provides a public\n * interface that allows users to enable/disable XR and perform XR related\n * tasks like for instance retrieving controllers.\n *\n * @augments EventDispatcher\n * @hideconstructor\n */\nclass WebXRManager extends EventDispatcher {\n\n\t/**\n\t * Constructs a new WebGL renderer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGL2RenderingContext} gl - The rendering context.\n\t */\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\t// Set default foveation to maximum.\n\t\tlet foveation = 1.0;\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\n\t\tconst depthSensing = new WebXRDepthSensing();\n\t\tconst cameraAccessTextures = {};\n\t\tconst attributes = gl.getContextAttributes();\n\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\tconst currentSize = new Vector2();\n\t\tlet currentPixelRatio = null;\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraXR = new ArrayCamera();\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\t/**\n\t\t * Whether the manager's XR camera should be automatically updated or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.cameraAutoUpdate = true;\n\n\t\t/**\n\t\t * This flag notifies the renderer to be ready for XR rendering. Set it to `true`\n\t\t * if you are going to use XR in your app.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enabled = false;\n\n\t\t/**\n\t\t * Whether XR presentation is active or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.isPresenting = false;\n\n\t\t/**\n\t\t * Returns a group representing the `target ray` space of the XR controller.\n\t\t * Use this space for visualizing 3D objects that support the user in pointing\n\t\t * tasks like UI interaction.\n\t\t *\n\t\t * @param {number} index - The index of the controller.\n\t\t * @return {Group} A group representing the `target ray` space.\n\t\t */\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\t/**\n\t\t * Returns a group representing the `grip` space of the XR controller.\n\t\t * Use this space for visualizing 3D objects that support the user in pointing\n\t\t * tasks like UI interaction.\n\t\t *\n\t\t * Note: If you want to show something in the user's hand AND offer a\n\t\t * pointing ray at the same time, you'll want to attached the handheld object\n\t\t * to the group returned by `getControllerGrip()` and the ray to the\n\t\t * group returned by `getController()`. The idea is to have two\n\t\t * different groups in two different coordinate spaces for the same WebXR\n\t\t * controller.\n\t\t *\n\t\t * @param {number} index - The index of the controller.\n\t\t * @return {Group} A group representing the `grip` space.\n\t\t */\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\t/**\n\t\t * Returns a group representing the `hand` space of the XR controller.\n\t\t * Use this space for visualizing 3D objects that support the user in pointing\n\t\t * tasks like UI interaction.\n\t\t *\n\t\t * @param {number} index - The index of the controller.\n\t\t * @return {Group} A group representing the `hand` space.\n\t\t */\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\tdepthSensing.reset();\n\t\t\tfor ( const key in cameraAccessTextures ) {\n\n\t\t\t\tdelete cameraAccessTextures[ key ];\n\n\t\t\t}\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\trenderer.setPixelRatio( currentPixelRatio );\n\t\t\trenderer.setSize( currentSize.width, currentSize.height, false );\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\t/**\n\t\t * Sets the framebuffer scale factor.\n\t\t *\n\t\t * This method can not be used during a XR session.\n\t\t *\n\t\t * @param {number} value - The framebuffer scale factor.\n\t\t */\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the reference space type. Can be used to configure a spatial relationship with the user's physical\n\t\t * environment. Depending on how the user moves in 3D space, setting an appropriate reference space can\n\t\t * improve tracking. Default is `local-floor`. Valid values can be found here\n\t\t * https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace#reference_space_types.\n\t\t *\n\t\t * This method can not be used during a XR session.\n\t\t *\n\t\t * @param {string} value - The reference space type.\n\t\t */\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the XR reference space.\n\t\t *\n\t\t * @return {XRReferenceSpace} The XR reference space.\n\t\t */\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\t/**\n\t\t * Sets a custom XR reference space.\n\t\t *\n\t\t * @param {XRReferenceSpace} space - The XR reference space.\n\t\t */\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the current base layer.\n\t\t *\n\t\t * @return {?(XRWebGLLayer|XRProjectionLayer)} The XR base layer.\n\t\t */\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the current XR binding.\n\t\t *\n\t\t * @return {?XRWebGLBinding} The XR binding.\n\t\t */\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the current XR frame.\n\t\t *\n\t\t * @return {?XRFrame} The XR frame. Returns `null` when used outside a XR session.\n\t\t */\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the current XR session.\n\t\t *\n\t\t * @return {?XRSession} The XR session. Returns `null` when used outside a XR session.\n\t\t */\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\t/**\n\t\t * After a XR session has been requested usually with one of the `*Button` modules, it\n\t\t * is injected into the renderer with this method. This method triggers the start of\n\t\t * the actual XR rendering.\n\t\t *\n\t\t * @async\n\t\t * @param {XRSession} value - The XR session to set.\n\t\t * @return {Promise} A Promise that resolves when the session has been set.\n\t\t */\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\trenderer.getSize( currentSize );\n\n\t\t\t\tif ( typeof XRWebGLBinding !== 'undefined' ) {\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t}\n\n\t\t\t\t// Check that the browser implements the necessary APIs to use an\n\t\t\t\t// XRProjectionLayer rather than an XRWebGLLayer\n\t\t\t\tconst useLayers = glBinding !== null && 'createProjectionLayer' in XRWebGLBinding.prototype;\n\n\t\t\t\tif ( ! useLayers ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\talpha: true,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\t\trenderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tresolveDepthBuffer: ( glBaseLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\t\tresolveStencilBuffer: ( glBaseLayer.ignoreDepthValues === false )\n\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\trenderer.setPixelRatio( 1 );\n\t\t\t\t\trenderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0,\n\t\t\t\t\t\t\tresolveDepthBuffer: ( glProjLayer.ignoreDepthValues === false ),\n\t\t\t\t\t\t\tresolveStencilBuffer: ( glProjLayer.ignoreDepthValues === false )\n\t\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\tthis.setFoveation( foveation );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the environment blend mode from the current XR session.\n\t\t *\n\t\t * @return {'opaque'|'additive'|'alpha-blend'|undefined} The environment blend mode. Returns `undefined` when used outside of a XR session.\n\t\t */\n\t\tthis.getEnvironmentBlendMode = function () {\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\treturn session.environmentBlendMode;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the current depth texture computed via depth sensing.\n\t\t *\n\t\t * @return {?Texture} The depth texture.\n\t\t */\n\t\tthis.getDepthTexture = function () {\n\n\t\t\treturn depthSensing.getDepthTexture();\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.connect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t *\n\t\t * @param {ArrayCamera} camera - The camera to update.\n\t\t * @param {PerspectiveCamera} cameraL - The left camera.\n\t\t * @param {PerspectiveCamera} cameraR - The right camera.\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Check if the projection uses an infinite far plane.\n\t\t\tif ( projL[ 10 ] === - 1.0 ) {\n\n\t\t\t\t// Use the projection matrix from the left eye.\n\t\t\t\t// The camera offset is sufficient to include the view volumes\n\t\t\t\t// of both eyes (assuming symmetric projections).\n\t\t\t\tcamera.projectionMatrix.copy( cameraL.projectionMatrix );\n\t\t\t\tcamera.projectionMatrixInverse.copy( cameraL.projectionMatrixInverse );\n\n\t\t\t} else {\n\n\t\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t\t// although must now be relative to the new union camera.\n\t\t\t\tconst near2 = near + zOffset;\n\t\t\t\tconst far2 = far + zOffset;\n\t\t\t\tconst left2 = left - xOffset;\n\t\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\t/**\n\t\t * Updates the state of the XR camera. Use this method on app level if you\n\t\t * set cameraAutoUpdate` to `false`. The method requires the non-XR\n\t\t * camera of the scene as a parameter. The passed in camera's transformation\n\t\t * is automatically adjusted to the position of the XR camera when calling\n\t\t * this method.\n\t\t *\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tlet depthNear = camera.near;\n\t\t\tlet depthFar = camera.far;\n\n\t\t\tif ( depthSensing.texture !== null ) {\n\n\t\t\t\tif ( depthSensing.depthNear > 0 ) depthNear = depthSensing.depthNear;\n\t\t\t\tif ( depthSensing.depthFar > 0 ) depthFar = depthSensing.depthFar;\n\n\t\t\t}\n\n\t\t\tcameraXR.near = cameraR.near = cameraL.near = depthNear;\n\t\t\tcameraXR.far = cameraR.far = cameraL.far = depthFar;\n\n\t\t\tif ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\t\tdepthFar: cameraXR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraXR.near;\n\t\t\t\t_currentDepthFar = cameraXR.far;\n\n\t\t\t}\n\n\t\t\t// inherit camera layers and enable eye layers (1 = left, 2 = right)\n\t\t\tcameraXR.layers.mask = camera.layers.mask | 0b110;\n\t\t\tcameraL.layers.mask = cameraXR.layers.mask & 0b011;\n\t\t\tcameraR.layers.mask = cameraXR.layers.mask & 0b101;\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraXR.cameras;\n\n\t\t\tupdateCamera( cameraXR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\t// update user camera and its children\n\n\t\t\tupdateUserCamera( camera, cameraXR, parent );\n\n\t\t};\n\n\t\tfunction updateUserCamera( camera, cameraXR, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\t\t\tcamera.matrix.invert();\n\t\t\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t\t\t}\n\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.updateMatrixWorld( true );\n\n\t\t\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\t\t\tcamera.zoom = 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Returns an instance of {@link ArrayCamera} which represents the XR camera\n\t\t * of the active XR session. For each view it holds a separate camera object.\n\t\t *\n\t\t * The camera's `fov` is currently not used and does not reflect the fov of\n\t\t * the XR camera. If you need the fov on app level, you have to compute in\n\t\t * manually from the XR camera's projection matrices.\n\t\t *\n\t\t * @return {ArrayCamera} The XR camera.\n\t\t */\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraXR;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the amount of foveation used by the XR compositor for the projection layer.\n\t\t *\n\t\t * @return {number|undefined} The amount of foveation.\n\t\t */\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn foveation;\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the foveation value.\n\t\t *\n\t\t * @param {number} value - A number in the range `[0,1]` where `0` means no foveation (full resolution)\n\t\t * and `1` means maximum foveation (the edges render at lower resolution).\n\t\t */\n\t\tthis.setFoveation = function ( value ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tfoveation = value;\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Returns `true` if depth sensing is supported.\n\t\t *\n\t\t * @return {boolean} Whether depth sensing is supported or not.\n\t\t */\n\t\tthis.hasDepthSensing = function () {\n\n\t\t\treturn depthSensing.texture !== null;\n\n\t\t};\n\n\t\t/**\n\t\t * Returns the depth sensing mesh.\n\t\t *\n\t\t * @return {Mesh} The depth sensing mesh.\n\t\t */\n\t\tthis.getDepthSensingMesh = function () {\n\n\t\t\treturn depthSensing.getMesh( cameraXR );\n\n\t\t};\n\n\t\t/**\n\t\t * Retrieves an opaque texture from the view-aligned {@link XRCamera}.\n\t\t * Only available during the current animation loop.\n\t\t *\n\t\t * @param {XRCamera} xrCamera - The camera to query.\n\t\t * @return {?Texture} An opaque texture representing the current raw camera frame.\n\t\t */\n\t\tthis.getCameraTexture = function ( xrCamera ) {\n\n\t\t\treturn cameraAccessTextures[ xrCamera ];\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\t\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\t\t\tcameraXR.cameras.length = 0;\n\t\t\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tconst enabledFeatures = session.enabledFeatures;\n\t\t\t\tconst gpuDepthSensingEnabled = enabledFeatures &&\n\t\t\t\t\tenabledFeatures.includes( 'depth-sensing' ) &&\n\t\t\t\t\tsession.depthUsage == 'gpu-optimized';\n\n\t\t\t\tif ( gpuDepthSensingEnabled && glBinding ) {\n\n\t\t\t\t\tconst depthData = glBinding.getDepthInformation( views[ 0 ] );\n\n\t\t\t\t\tif ( depthData && depthData.isValid && depthData.texture ) {\n\n\t\t\t\t\t\tdepthSensing.init( depthData, session.renderState );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst cameraAccessEnabled = enabledFeatures &&\n\t\t\t\t    enabledFeatures.includes( 'camera-access' );\n\n\t\t\t\tif ( cameraAccessEnabled ) {\n\n\t\t\t\t\trenderer.state.unbindTexture();\n\n\t\t\t\t\tif ( glBinding ) {\n\n\t\t\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\t\t\tconst camera = views[ i ].camera;\n\n\t\t\t\t\t\t\tif ( camera ) {\n\n\t\t\t\t\t\t\t\tlet cameraTex = cameraAccessTextures[ camera ];\n\n\t\t\t\t\t\t\t\tif ( ! cameraTex ) {\n\n\t\t\t\t\t\t\t\t\tcameraTex = new ExternalTexture();\n\t\t\t\t\t\t\t\t\tcameraAccessTextures[ camera ] = cameraTex;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst glTexture = glBinding.getCameraImage( camera );\n\t\t\t\t\t\t\t\tcameraTex.sourceTexture = glTexture;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( frame.detectedPlanes ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nexport { WebXRManager };\n"],"mappings":"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","ignoreList":[]}