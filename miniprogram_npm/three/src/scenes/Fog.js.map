{"version":3,"file":"node_modules/three/src/scenes/Fog.js","names":["Color","Fog","constructor","color","near","far","this","isFog","name","clone","toJSON","type","getHex"],"sources":["node_modules/three/src/scenes/Fog.js"],"sourcesContent":["import { Color } from '../math/Color.js';\n\n/**\n * This class can be used to define a linear fog that grows linearly denser\n * with the distance.\n *\n * ```js\n * const scene = new THREE.Scene();\n * scene.fog = new THREE.Fog( 0xcccccc, 10, 15 );\n * ```\n */\nclass Fog {\n\n\t/**\n\t * Constructs a new fog.\n\t *\n\t * @param {number|Color} color - The fog's color.\n\t * @param {number} [near=1] - The minimum distance to start applying fog.\n\t * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.\n\t */\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isFog = true;\n\n\t\t/**\n\t\t * The name of the fog.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = '';\n\n\t\t/**\n\t\t * The fog's color.\n\t\t *\n\t\t * @type {Color}\n\t\t */\n\t\tthis.color = new Color( color );\n\n\t\t/**\n\t\t * The minimum distance to start applying fog. Objects that are less than\n\t\t * `near` units from the active camera won't be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.near = near;\n\n\t\t/**\n\t\t * The maximum distance at which fog stops being calculated and applied.\n\t\t * Objects that are more than `far` units away from the active camera won't\n\t\t * be affected by fog.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1000\n\t\t */\n\t\tthis.far = far;\n\n\t}\n\n\t/**\n\t * Returns a new fog with copied values from this instance.\n\t *\n\t * @return {Fog} A clone of this instance.\n\t */\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\t/**\n\t * Serializes the fog into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized fog\n\t */\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nexport { Fog };\n"],"mappings":"OAASA,UAAa,mBAWtB,MAAMC,IASL,WAAAC,CAAaC,EAAOC,EAAO,EAAGC,EAAM,KASnCC,KAAKC,OAAQ,EAObD,KAAKE,KAAO,GAOZF,KAAKH,MAAQ,IAAIH,MAAOG,GASxBG,KAAKF,KAAOA,EAUZE,KAAKD,IAAMA,CAEZ,CAOA,KAAAI,GAEC,OAAO,IAAIR,IAAKK,KAAKH,MAAOG,KAAKF,KAAME,KAAKD,IAE7C,CAQA,MAAAK,GAEC,MAAO,CACNC,KAAM,MACNH,KAAMF,KAAKE,KACXL,MAAOG,KAAKH,MAAMS,SAClBR,KAAME,KAAKF,KACXC,IAAKC,KAAKD,IAGZ,SAIQJ","ignoreList":[]}