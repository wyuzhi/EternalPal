{"version":3,"file":"node_modules/three/src/textures/CompressedCubeTexture.js","names":["CubeReflectionMapping","CompressedTexture","CompressedCubeTexture","constructor","images","format","type","super","undefined","width","height","this","isCompressedCubeTexture","isCubeTexture","image"],"sources":["node_modules/three/src/textures/CompressedCubeTexture.js"],"sourcesContent":["import { CubeReflectionMapping } from '../constants.js';\nimport { CompressedTexture } from './CompressedTexture.js';\n\n/**\n * Creates a cube texture based on data in compressed form.\n *\n * These texture are usually loaded with {@link CompressedTextureLoader}.\n *\n * @augments CompressedTexture\n */\nclass CompressedCubeTexture extends CompressedTexture {\n\n\t/**\n\t * Constructs a new compressed texture.\n\t *\n\t * @param {Array<CompressedTexture>} images - An array of compressed textures.\n\t * @param {number} [format=RGBAFormat] - The texture format.\n\t * @param {number} [type=UnsignedByteType] - The texture type.\n\t */\n\tconstructor( images, format, type ) {\n\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCompressedCubeTexture = true;\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.image = images;\n\n\t}\n\n}\n\nexport { CompressedCubeTexture };\n"],"mappings":"OAASA,0BAA6B,yBAC7BC,sBAAyB,yBASlC,MAAMC,8BAA8BD,kBASnC,WAAAE,CAAaC,EAAQC,EAAQC,GAE5BC,WAAOC,EAAWJ,EAAQ,GAAIK,MAAOL,EAAQ,GAAIM,OAAQL,EAAQC,EAAMN,uBASvEW,KAAKC,yBAA0B,EAS/BD,KAAKE,eAAgB,EAErBF,KAAKG,MAAQV,CAEd,SAIQF","ignoreList":[]}