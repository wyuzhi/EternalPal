{"version":3,"file":"node_modules/three/src/textures/DepthTexture.js","names":["Source","Texture","NearestFilter","UnsignedIntType","DepthFormat","DepthStencilFormat","DepthTexture","constructor","width","height","type","mapping","wrapS","wrapT","magFilter","minFilter","anisotropy","format","depth","Error","super","this","isDepthTexture","flipY","generateMipmaps","compareFunction","copy","source","Object","assign","image","toJSON","meta","data"],"sources":["node_modules/three/src/textures/DepthTexture.js"],"sourcesContent":["import { Source } from './Source.js';\nimport { Texture } from './Texture.js';\nimport { NearestFilter, UnsignedIntType, DepthFormat, DepthStencilFormat } from '../constants.js';\n\n/**\n * This class can be used to automatically save the depth information of a\n * rendering into a texture.\n *\n * @augments Texture\n */\nclass DepthTexture extends Texture {\n\n\t/**\n\t * Constructs a new depth texture.\n\t *\n\t * @param {number} width - The width of the texture.\n\t * @param {number} height - The height of the texture.\n\t * @param {number} [type=UnsignedIntType] - The texture type.\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\n\t * @param {number} [format=DepthFormat] - The texture format.\n\t * @param {number} [depth=1] - The depth of the texture.\n\t */\n\tconstructor( width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat, depth = 1 ) {\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tconst image = { width: width, height: height, depth: depth };\n\n\t\tsuper( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isDepthTexture = true;\n\n\t\t/**\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\n\t\t * uploaded to the GPU.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.flipY = false;\n\n\t\t/**\n\t\t * Whether to generate mipmaps (if possible) for a texture.\n\t\t *\n\t\t * Overwritten and set to `false` by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.generateMipmaps = false;\n\n\t\t/**\n\t\t * Code corresponding to the depth compare function.\n\t\t *\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\n\t\t * @default null\n\t\t */\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.source = new Source( Object.assign( {}, source.image ) ); // see #30540\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport { DepthTexture };\n"],"mappings":"OAASA,WAAc,qBACdC,YAAe,sBACfC,cAAeC,gBAAiBC,YAAaC,uBAA0B,kBAQhF,MAAMC,qBAAqBL,QAiB1B,WAAAM,CAAaC,EAAOC,EAAQC,EAAOP,gBAAiBQ,EAASC,EAAOC,EAAOC,EAAYZ,cAAea,EAAYb,cAAec,EAAYC,EAASb,YAAac,EAAQ,GAE1K,GAAKD,IAAWb,aAAea,IAAWZ,mBAEzC,MAAM,IAAIc,MAAO,oFAMlBC,MAFc,CAAEZ,MAAOA,EAAOC,OAAQA,EAAQS,MAAOA,GAEvCP,EAASC,EAAOC,EAAOC,EAAWC,EAAWE,EAAQP,EAAMM,GASzEK,KAAKC,gBAAiB,EAWtBD,KAAKE,OAAQ,EAUbF,KAAKG,iBAAkB,EAQvBH,KAAKI,gBAAkB,IAExB,CAGA,IAAAC,CAAMC,GAOL,OALAP,MAAMM,KAAMC,GAEZN,KAAKM,OAAS,IAAI3B,OAAQ4B,OAAOC,OAAQ,CAAC,EAAGF,EAAOG,QACpDT,KAAKI,gBAAkBE,EAAOF,gBAEvBJ,IAER,CAEA,MAAAU,CAAQC,GAEP,MAAMC,EAAOb,MAAMW,OAAQC,GAI3B,OAF8B,OAAzBX,KAAKI,kBAA2BQ,EAAKR,gBAAkBJ,KAAKI,iBAE1DQ,CAER,SAIQ3B","ignoreList":[]}