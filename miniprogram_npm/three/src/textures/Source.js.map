{"version":3,"file":"node_modules/three/src/textures/Source.js","names":["ImageUtils","generateUUID","_sourceId","Source","constructor","data","this","isSource","Object","defineProperty","value","uuid","dataReady","version","getSize","target","HTMLVideoElement","set","videoWidth","videoHeight","VideoFrame","displayHeight","displayWidth","width","height","depth","needsUpdate","toJSON","meta","isRootObject","undefined","images","output","url","Array","isArray","i","l","length","isDataTexture","push","serializeImage","image","HTMLImageElement","HTMLCanvasElement","ImageBitmap","getDataURL","from","type","name","console","warn"],"sources":["node_modules/three/src/textures/Source.js"],"sourcesContent":["import { ImageUtils } from '../extras/ImageUtils.js';\nimport { generateUUID } from '../math/MathUtils.js';\n\nlet _sourceId = 0;\n\n/**\n * Represents the data source of a texture.\n *\n * The main purpose of this class is to decouple the data definition from the texture\n * definition so the same data can be used with multiple texture instances.\n */\nclass Source {\n\n\t/**\n\t * Constructs a new video texture.\n\t *\n\t * @param {any} [data=null] - The data definition of a texture.\n\t */\n\tconstructor( data = null ) {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isSource = true;\n\n\t\t/**\n\t\t * The ID of the source.\n\t\t *\n\t\t * @name Source#id\n\t\t * @type {number}\n\t\t * @readonly\n\t\t */\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\n\n\t\t/**\n\t\t * The UUID of the source.\n\t\t *\n\t\t * @type {string}\n\t\t * @readonly\n\t\t */\n\t\tthis.uuid = generateUUID();\n\n\t\t/**\n\t\t * The data definition of a texture.\n\t\t *\n\t\t * @type {any}\n\t\t */\n\t\tthis.data = data;\n\n\t\t/**\n\t\t * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\n\t\t * provides more control on how texture data should be processed. When `dataReady` is set\n\t\t * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\n\t\t * the data into the GPU memory.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.dataReady = true;\n\n\t\t/**\n\t\t * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\n\t\t *\n\t\t * @type {number}\n\t\t * @readonly\n\t\t * @default 0\n\t\t */\n\t\tthis.version = 0;\n\n\t}\n\n\t/**\n\t * Returns the dimensions of the source into the given target vector.\n\t *\n\t * @param {(Vector2|Vector3)} target - The target object the result is written into.\n\t * @return {(Vector2|Vector3)} The dimensions of the source.\n\t */\n\tgetSize( target ) {\n\n\t\tconst data = this.data;\n\n\t\tif ( data instanceof HTMLVideoElement ) {\n\n\t\t\ttarget.set( data.videoWidth, data.videoHeight, 0 );\n\n\t\t} else if ( data instanceof VideoFrame ) {\n\n\t\t\ttarget.set( data.displayHeight, data.displayWidth, 0 );\n\n\t\t} else if ( data !== null ) {\n\n\t\t\ttarget.set( data.width, data.height, data.depth || 0 );\n\n\t\t} else {\n\n\t\t\ttarget.set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\t/**\n\t * When the property is set to `true`, the engine allocates the memory\n\t * for the texture (if necessary) and triggers the actual texture upload\n\t * to the GPU next time the source is used.\n\t *\n\t * @type {boolean}\n\t * @default false\n\t * @param {boolean} value\n\t */\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\t/**\n\t * Serializes the source into JSON.\n\t *\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\n\t * @return {Object} A JSON object representing the serialized source.\n\t * @see {@link ObjectLoader#parse}\n\t */\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nexport { Source };\n"],"mappings":"OAASA,eAAkB,iCAClBC,iBAAoB,uBAE7B,IAAIC,UAAY,EAQhB,MAAMC,OAOL,WAAAC,CAAaC,EAAO,MASnBC,KAAKC,UAAW,EAShBC,OAAOC,eAAgBH,KAAM,KAAM,CAAEI,MAAOR,cAQ5CI,KAAKK,KAAOV,eAOZK,KAAKD,KAAOA,EAWZC,KAAKM,WAAY,EASjBN,KAAKO,QAAU,CAEhB,CAQA,OAAAC,CAASC,GAER,MAAMV,EAAOC,KAAKD,KAoBlB,OAlBKA,aAAgBW,iBAEpBD,EAAOE,IAAKZ,EAAKa,WAAYb,EAAKc,YAAa,GAEpCd,aAAgBe,WAE3BL,EAAOE,IAAKZ,EAAKgB,cAAehB,EAAKiB,aAAc,GAE/B,OAATjB,EAEXU,EAAOE,IAAKZ,EAAKkB,MAAOlB,EAAKmB,OAAQnB,EAAKoB,OAAS,GAInDV,EAAOE,IAAK,EAAG,EAAG,GAIZF,CAER,CAWA,eAAIW,CAAahB,IAED,IAAVA,GAAiBJ,KAAKO,SAE5B,CASA,MAAAc,CAAQC,GAEP,MAAMC,OAA0BC,IAATF,GAAsC,iBAATA,EAEpD,IAAOC,QAA6CC,IAA7BF,EAAKG,OAAQzB,KAAKK,MAExC,OAAOiB,EAAKG,OAAQzB,KAAKK,MAI1B,MAAMqB,EAAS,CACdrB,KAAML,KAAKK,KACXsB,IAAK,IAGA5B,EAAOC,KAAKD,KAElB,GAAc,OAATA,EAAgB,CAEpB,IAAI4B,EAEJ,GAAKC,MAAMC,QAAS9B,GAAS,CAI5B4B,EAAM,GAEN,IAAM,IAAIG,EAAI,EAAGC,EAAIhC,EAAKiC,OAAQF,EAAIC,EAAGD,IAEnC/B,EAAM+B,GAAIG,cAEdN,EAAIO,KAAMC,eAAgBpC,EAAM+B,GAAIM,QAIpCT,EAAIO,KAAMC,eAAgBpC,EAAM+B,IAMnC,MAICH,EAAMQ,eAAgBpC,GAIvB2B,EAAOC,IAAMA,CAEd,CAQA,OANOJ,IAEND,EAAKG,OAAQzB,KAAKK,MAASqB,GAIrBA,CAER,EAID,SAASS,eAAgBC,GAExB,MAAmC,oBAArBC,kBAAoCD,aAAiBC,kBACnC,oBAAtBC,mBAAqCF,aAAiBE,mBACtC,oBAAhBC,aAA+BH,aAAiBG,YAIlD7C,WAAW8C,WAAYJ,GAIzBA,EAAMrC,KAIH,CACNA,KAAM6B,MAAMa,KAAML,EAAMrC,MACxBkB,MAAOmB,EAAMnB,MACbC,OAAQkB,EAAMlB,OACdwB,KAAMN,EAAMrC,KAAKD,YAAY6C,OAK9BC,QAAQC,KAAM,+CACP,CAAC,EAMX,QAEShD","ignoreList":[]}