import type THREE from 'three';
import { ArProcessor, MaskType } from './ArProcessor';
import { Rect, PointArray } from './Utils/base_type';
interface SingleNailKeypointResult {
    nailRect: Rect;
    keyPoints: PointArray;
    nailType: number;
}
interface NailMaskResult {
    width: number;
    height: number;
    nailNum: number;
    nailMask: Uint8Array;
}
interface NailAlgResult {
    nailMaskResult: NailMaskResult;
    nailKeypointResults: SingleNailKeypointResult[];
}
interface ArNailProcessorParams {
    three: typeof THREE;
}
interface UpdateModelsParams {
    algResult?: NailAlgResult;
    models: THREE.Group;
    cameraWidth: number;
    cameraHeight: number;
}
export declare class ArNailProcessor implements ArProcessor {
    private three;
    name: string;
    maskTextures: THREE.DataTexture[];
    threshold: number;
    maskType: MaskType;
    constructor({ three }: ArNailProcessorParams);
    updateModels({ algResult, models, cameraWidth, cameraHeight, }: UpdateModelsParams): void;
}
export {};
