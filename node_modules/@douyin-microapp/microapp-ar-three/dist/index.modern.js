var e;!function(e){e[e.remove=0]="remove",e[e.reveal=1]="reveal"}(e||(e={}));class t{constructor({three:t}){this.three=void 0,this.name=void 0,this.maskTextures=void 0,this.threshold=0,this.maskType=e.remove,this.name="ArFootProcessor",this.three=t,this.threshold=1,this.maskTextures=[new this.three.DataTexture(new Uint8Array(1),1,1,this.three.AlphaFormat),new this.three.DataTexture(new Uint8Array(1),1,1,this.three.AlphaFormat)]}updateMesh(e,t){const r=new this.three.Vector3,s=new this.three.Quaternion,i=new this.three.Vector3(1,1,1),a=new this.three.Matrix4;for(let t=0;t<e.length;t++)a.elements[t]=e[t];a.decompose(r,s,i),t.position.copy(r),t.scale.copy(i),t.quaternion.copy(s)}updateModels({algResult:e,models:t}){if(null==e)return t.left.visible=!1,void(t.right.visible=!1);0!==e.left.length?(this.updateMesh(e.left[0],t.left),t.left.visible=!0):t.left.visible=!1,0!==e.right.length?(this.updateMesh(e.right[0],t.right),t.right.visible=!0):t.right.visible=!1,1===this.maskTextures[0].image.width?(this.maskTextures[0].copy(new this.three.DataTexture(e.leftMask,e.maskWidth,e.maskHeight,this.three.AlphaFormat)),this.maskTextures[1].copy(new this.three.DataTexture(e.rightMask,e.maskWidth,e.maskHeight,this.three.AlphaFormat))):(this.maskTextures[0].image.data.set(e.leftMask),this.maskTextures[1].image.data.set(e.rightMask)),this.maskTextures[0].needsUpdate=!0,this.maskTextures[1].needsUpdate=!0}}function r(e,t,r){return`\n    vec4 ${t} = texture2D(${e}, vUv);\n    ${t}.a = ${t}.a >= ${(null==r.threshold?0:r.threshold).toPrecision(2)} ? 1.0 : 0.0;\n`}class s{constructor({three:t,processors:s,cameraTexture:i,modelTexture:a,mixedTextureWidth:n,mixedTextureHeight:o}){this.mixedRenderTarget=void 0,this.maskScene=void 0,this.maskCamera=void 0,this.three=void 0,this.mixedTexture=void 0,this.processors=void 0,this.three=t,this.processors=s;const h=function(t,s,i){let a="",n="",o="";const h={texCamera:{value:t},texModel:{value:s}},l=[],u=[];for(let t=0;t<i.length;t++){const{maskTextures:s,maskType:m}=i[t];if(null==s)continue;if(null==m)continue;const d=`${i[t].name[0].toLocaleLowerCase()}${i[t].name.slice(1)}`;for(let c=0;c<s.length;c++){const x=`${d}MaskTextures${String(c)}`,v=`${d}MaskTexel${String(c)}`;switch(a+=`uniform sampler2D ${x};\n`,h[x]={value:s[c]},m){case e.remove:n+=r(x,v,i[t]),u.push(v);break;case e.reveal:o+=r(x,v,i[t]),l.push(v)}}}return 0!==u.length&&(n+=`    removeMaskTexel = ${u.join(" + ")};\n\n\n    if(removeMaskTexel.a >= 1.0) {\n      model.a = 0.0;\n    }\n    if(model.a == 0.0) {\n      result = camera;\n    }\n    else {\n      result = model;\n    }\n`),0!==l.length&&(o+=`    revealMaskTexel = ${l.join(" + ")};\n\n\n    if(revealMaskTexel.a < 1.0) {\n      model.a = 0.0;\n    }\n    if(model.a == 0.0) {\n      result = camera;\n    }\n    else {\n      result = model;\n    }\n`),{shaderUniforms:h,fsCode:a+"\nuniform sampler2D texModel;\nuniform sampler2D texCamera;\n\nvarying vec2 vUv;\nvoid main(void) {\n    vec4 model = texture2D(texModel, vUv);\n    vec4 camera = texture2D(texCamera, vUv);\n    vec4 result = camera;\n\n    vec4 removeMaskTexel;\n    vec4 revealMaskTexel;\n\n"+n+o+"\n    gl_FragColor = vec4(result);\n}"}}(i,a,this.processors),l=new this.three.ShaderMaterial({uniforms:h.shaderUniforms,vertexShader:"\nvarying vec2 vUv;\n\nvoid main()\n{\n    vUv = uv;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:h.fsCode}),u=new this.three.PlaneGeometry(n,o);this.mixedRenderTarget=new this.three.WebGLRenderTarget(n,o);const m=new this.three.Mesh(u,l);m.position.z=-10,this.maskScene=new this.three.Scene,this.maskScene.add(m),this.maskCamera=new this.three.OrthographicCamera(n/-2,n/2,o/2,o/-2,1,1e3),this.mixedTexture=this.mixedRenderTarget.texture}render({renderer:e}){const t=e.getRenderTarget();e.setRenderTarget(this.mixedRenderTarget),e.render(this.maskScene,this.maskCamera),e.setRenderTarget(t)}}function i({p0:e,p1:t,p2:r}){const s=Math.abs(e.x-r.x),i=Math.abs(t.x-r.x),a=Math.abs(e.y-r.y),n=Math.abs(t.y-r.y);return{area:.5*Math.abs(s*n-i*a),centroid:{x:(r.x+e.x+t.x)/3,y:(r.y+e.y+t.y)/3}}}function a({nailModel:e,keyPoints:t,cameraWidth:r,cameraHeight:s,THREE:a}){const n=function({keyPoints:e,cameraWidth:t,cameraHeight:r}){const s=new Array,a={x:e.get(7).x*t-t/2,y:e.get(7).y*r-r/2,z:-10};let n,o=0,h=0,l=0;for(let u=0;u<8;u++){const m=e.get(u);s.push({x:m.x*t-t/2,y:m.y*r-r/2,z:-10}),u>0&&7!==u&&(n=i({p0:s[u-1],p1:s[u],p2:a}),o+=n.area,h+=n.centroid.x*n.area,l+=n.centroid.y*n.area)}return h/=o,l/=o,{x:h,y:l}}({keyPoints:t,cameraWidth:r,cameraHeight:s}),o=new Float32Array(e.geometry.attributes.position.array.length);if(e.geometry.attributes.position instanceof a.BufferAttribute){for(let e=0;e<8;e++){const i={x:t.get(e).x*r-r/2,y:t.get(e).y*s-s/2},a=i.y-n.y;o[3*e]=i.x+.2*(i.x-n.x),o[3*e+1]=i.y+.2*a,o[3*e+2]=-10}e.geometry.attributes.position.array=o}e.visible=!0,e.geometry.attributes.position.needsUpdate=!0}class n{constructor({three:t}){this.three=void 0,this.name=void 0,this.maskTextures=void 0,this.threshold=0,this.maskType=e.reveal,this.name="ArNailProcessor",this.three=t,this.threshold=.5,this.maskTextures=[new this.three.DataTexture(new Uint8Array(1),1,1,this.three.AlphaFormat)],this.maskTextures[0].needsUpdate=!0}updateModels({algResult:e,models:t,cameraWidth:r,cameraHeight:s}){null!=e&&(1===this.maskTextures[0].image.width?this.maskTextures[0].copy(new this.three.DataTexture(e.nailMaskResult.nailMask,e.nailMaskResult.width,e.nailMaskResult.height,this.three.AlphaFormat)):this.maskTextures[0].image.data.set(e.nailMaskResult.nailMask),this.maskTextures[0].needsUpdate=!0,function({algResult:e,nailModelGroup:t,cameraWidth:r,cameraHeight:s,THREE:i}){for(let e=0;e<5;e++)t.children[e].visible=!1;for(let n=0;n<e.nailMaskResult.nailNum;n++){const o=e.nailKeypointResults[n].nailType-1,{keyPoints:h}=e.nailKeypointResults[n];o<0||a({nailModel:t.children[o],keyPoints:h,cameraWidth:r,cameraHeight:s,THREE:i})}}({algResult:e,nailModelGroup:t,cameraWidth:r,cameraHeight:s,THREE:this.three}))}}const o=new Float32Array([1/6,1/4,7/24,1/8,.5,1/12,17/24,1/8,5/6,1/4,17/24,5/6,.5,11/12,7/24,5/6]),h=[0,1,4,1,2,4,2,3,4],l=[7,0,6,0,1,6,1,2,6,2,3,6,3,4,6,4,5,6];function u({THREE:e,highLightTexture:t}){const r=new Float32Array(24);for(let e=0;e<24;e++)r[e]=e;const s=new e.BufferGeometry;s.setAttribute("position",new e.BufferAttribute(r,3)),s.setAttribute("uv",new e.BufferAttribute(o,2)),s.setIndex(l);const i=new e.ShaderMaterial({uniforms:{highLightTexture:{value:t}},vertexShader:"\n    varying vec2 vUv;\n\n    void main()\n    {\n        vUv = uv;\n        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * mvPosition;\n    }\n  ",fragmentShader:"\n    uniform sampler2D highLightTexture;\n\n    varying vec2 vUv;\n    void main(void) {\n        vec4 tex = texture2D(highLightTexture, vUv);\n        gl_FragColor = vec4(tex.r, tex.g, tex.b, 1.0);\n    }\n  "});return i.side=e.DoubleSide,new e.Mesh(s,i)}function m({THREE:e,highLightTexture:t}){const r=new e.Group;for(let s=0;s<5;s++)r.add(u({THREE:e,highLightTexture:t}));return r}const d={getNailModelGroupByColor:({THREE:e,renderer:t,color:r})=>{r instanceof e.Color||(r=new e.Color(r));const s=function({THREE:e,renderer:t,color:r}){const s=new Float32Array([-87.04,128,1,-107.52,35.84,1,-107.52,-15.36,1,-81.92,-112.64,1,-71.68,10.24,1]),i=new e.Scene,a=new e.OrthographicCamera(-256,256,256,-256,1,1e3),n=new e.WebGLRenderTarget(512,512),o=new e.BufferGeometry;o.setAttribute("position",new e.BufferAttribute(s,3)),o.setIndex(h);const l=new e.MeshBasicMaterial({color:new e.Color(16777215)}),u=new e.Mesh(o,l);u.position.z=-10,i.add(u),t.setRenderTarget(n);const m=new e.Color;return t.getClearColor(m),t.setClearColor(r),t.render(i,a),t.setClearColor(m,t.getClearAlpha()),t.setRenderTarget(null),n.texture}({THREE:e,renderer:t,color:r});return m({THREE:e,highLightTexture:s})},getNailModelGroupByTexture:({THREE:e,texture:t})=>m({THREE:e,highLightTexture:t})};export{t as ArFootProcessor,s as ArMixer,n as ArNailProcessor,d as ArNailUtils};
//# sourceMappingURL=index.modern.js.map
